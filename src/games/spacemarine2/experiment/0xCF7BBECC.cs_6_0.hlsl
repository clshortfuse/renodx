cbuffer CB_PS_PASS_FILLUBO : register(b4, space0)
{
    float4 CB_PS_PASS_FILL_m0[15] : packoffset(c0);
};

Texture2D<float4> FILL_COLOR : register(t0, space2);
RWTexture2D<float4> FILL_DEST_TEX : register(u0, space0);
SamplerState PS_SAMPLERS[12] : register(s0, space1);

static uint3 gl_WorkGroupID;
static uint gl_LocalInvocationIndex;
struct SPIRV_Cross_Input
{
    uint3 gl_WorkGroupID : SV_GroupID;
    uint gl_LocalInvocationIndex : SV_GroupIndex;
};

void comp_main()
{
    uint _49 = ((gl_LocalInvocationIndex >> 1u) & 7u) | (gl_WorkGroupID.x << 4u);
    uint _51 = ((gl_LocalInvocationIndex & 1u) | (gl_WorkGroupID.y << 4u)) | ((gl_LocalInvocationIndex >> 3u) & 6u);
    uint4 _57 = asuint(CB_PS_PASS_FILL_m0[10u]);
    uint4 _65 = asuint(CB_PS_PASS_FILL_m0[11u]);
    uint4 _72 = asuint(CB_PS_PASS_FILL_m0[12u]);
    uint4 _80 = asuint(CB_PS_PASS_FILL_m0[13u]);
    uint4 _86 = asuint(CB_PS_PASS_FILL_m0[9u]);
    float _89 = float(_49);
    float _90 = float(_51);
    float _97 = (_89 * asfloat(_57.x)) + asfloat(_57.z);
    float _98 = (_90 * asfloat(_57.y)) + asfloat(_57.w);
    float _100 = floor(_97);
    float _101 = floor(_98);
    float _102 = _97 - _100;
    float _103 = _98 - _101;
    float _110 = (_100 * asfloat(_65.x)) + asfloat(_65.z);
    float _111 = (_101 * asfloat(_65.y)) + asfloat(_65.w);
    float _114 = _110 + asfloat(_72.x);
    float _115 = _111 + asfloat(_72.y);
    float _118 = _110 + asfloat(_72.z);
    float _119 = _111 + asfloat(_72.w);
    float _122 = _110 + asfloat(_80.x);
    float _123 = _111 + asfloat(_80.y);
    float4 _131 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_110, _111));
    float _132 = _131.x;
    float _133 = _131.y;
    float4 _135 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_110, _111));
    float _136 = _135.x;
    float _137 = _135.y;
    float4 _140 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_110, _111));
    float _141 = _140.x;
    float _142 = _140.y;
    float4 _144 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_114, _115));
    float _145 = _144.x;
    float _146 = _144.y;
    float _147 = _144.z;
    float _148 = _144.w;
    float4 _150 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_114, _115));
    float _151 = _150.x;
    float _152 = _150.y;
    float _153 = _150.z;
    float _154 = _150.w;
    float4 _156 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_114, _115));
    float _157 = _156.x;
    float _158 = _156.y;
    float _159 = _156.z;
    float _160 = _156.w;
    float4 _162 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_118, _119));
    float _163 = _162.x;
    float _164 = _162.y;
    float _165 = _162.z;
    float _166 = _162.w;
    float4 _168 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_118, _119));
    float _169 = _168.x;
    float _170 = _168.y;
    float _171 = _168.z;
    float _172 = _168.w;
    float4 _174 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_118, _119));
    float _175 = _174.x;
    float _176 = _174.y;
    float _177 = _174.z;
    float _178 = _174.w;
    float4 _180 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_122, _123));
    float _181 = _180.z;
    float _182 = _180.w;
    float4 _184 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_122, _123));
    float _185 = _184.z;
    float _186 = _184.w;
    float4 _188 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_122, _123));
    float _189 = _188.z;
    float _190 = _188.w;
    float _194 = ((_141 + _132) * 0.5f) + _136;
    float _197 = ((_142 + _133) * 0.5f) + _137;
    float _200 = ((_157 + _145) * 0.5f) + _151;
    float _203 = ((_158 + _146) * 0.5f) + _152;
    float _206 = ((_159 + _147) * 0.5f) + _153;
    float _209 = ((_160 + _148) * 0.5f) + _154;
    float _212 = ((_175 + _163) * 0.5f) + _169;
    float _215 = ((_176 + _164) * 0.5f) + _170;
    float _218 = ((_177 + _165) * 0.5f) + _171;
    float _221 = ((_178 + _166) * 0.5f) + _172;
    float _224 = ((_189 + _181) * 0.5f) + _185;
    float _227 = ((_190 + _182) * 0.5f) + _186;
    float _228 = 1.0f - _102;
    float _230 = 1.0f - _103;
    float _231 = _230 * _228;
    float _235 = abs(_221 - _206);
    float _241 = _221 - _209;
    float _246 = clamp(asfloat(2129690299u - asuint(max(_235, abs(_206 - _209)))) * abs(_241), 0.0f, 1.0f);
    float _251 = abs(_203 - _206);
    float _256 = _203 - _194;
    float _260 = clamp(asfloat(2129690299u - asuint(max(_251, abs(_206 - _194)))) * abs(_256), 0.0f, 1.0f);
    float _264 = _230 * _102;
    float _271 = _218 - _206;
    float _276 = clamp(asfloat(2129690299u - asuint(max(abs(_218 - _221), _235))) * abs(_271), 0.0f, 1.0f);
    float _281 = abs(_212 - _221);
    float _286 = _212 - _197;
    float _291 = clamp(asfloat(2129690299u - asuint(max(_281, abs(_221 - _197)))) * abs(_286), 0.0f, 1.0f);
    float _293 = _228 * _103;
    float _297 = abs(_212 - _203);
    float _302 = _212 - _200;
    float _307 = clamp(asfloat(2129690299u - asuint(max(_297, abs(_203 - _200)))) * abs(_302), 0.0f, 1.0f);
    float _315 = _227 - _206;
    float _320 = clamp(asfloat(2129690299u - asuint(max(abs(_227 - _203), _251))) * abs(_315), 0.0f, 1.0f);
    float _322 = _103 * _102;
    float _329 = _215 - _203;
    float _331 = (((_241 * _231) + (_271 * _264)) + (_302 * _293)) + (_329 * _322);
    float _334 = clamp(asfloat(2129690299u - asuint(max(abs(_215 - _212), _297))) * abs(_329), 0.0f, 1.0f);
    float _342 = _224 - _221;
    float _344 = (((_286 * _264) + (_256 * _231)) + (_315 * _293)) + (_342 * _322);
    float _347 = clamp(asfloat(2129690299u - asuint(max(abs(_224 - _212), _281))) * abs(_342), 0.0f, 1.0f);
    float _360 = (_344 * _344) + (_331 * _331);
    bool _362 = _360 < 3.0517578125e-05f;
    float _369 = _362 ? 1.0f : asfloat(1597275508u - (asuint(_360) >> 1u));
    float _371 = _369 * (_362 ? 1.0f : _331);
    float _372 = _369 * _344;
    float _373 = ((((((_347 * _347) + (_334 * _334)) * _322) + (((_260 * _260) + (_246 * _246)) * _231)) + (((_320 * _320) + (_307 * _307)) * _293)) + (((_291 * _291) + (_276 * _276)) * _264)) * 0.5f;
    float _374 = _373 * _373;
    float _388 = (((asfloat(2129690299u - asuint(max(abs(_371), abs(_372)))) * ((_371 * _371) + (_372 * _372))) + (-1.0f)) * _374) + 1.0f;
    float _390 = 1.0f - (_374 * 0.5f);
    float _393 = 0.5f - (_374 * 0.2899999916553497314453125f);
    float _396 = asfloat(2129690299u - asuint(_393));
    float _415 = (-1.0f) - _103;
    float _416 = _371 * _102;
    float _417 = _372 * _415;
    float _419 = _372 * _102;
    float _420 = _371 * _415;
    float _422 = _388 * (_417 - _416);
    float _423 = _390 * (_419 + _420);
    float _427 = min((_422 * _422) + (_423 * _423), _396);
    float _432 = (_427 * _393) + (-1.0f);
    float _441 = (_432 * _432) * ((((_427 * 0.625f) + (-1.5625f)) * ((_427 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _445 = _371 * _228;
    float _447 = _372 * _228;
    float _449 = _388 * (_445 + _417);
    float _450 = _390 * (_420 - _447);
    float _454 = min((_449 * _449) + (_450 * _450), _396);
    float _458 = (_454 * _393) + (-1.0f);
    float _464 = (_458 * _458) * ((((_454 * 0.625f) + (-1.5625f)) * ((_454 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _472 = (-1.0f) - _102;
    float _473 = _371 * _472;
    float _474 = _372 * _230;
    float _476 = _372 * _472;
    float _477 = _371 * _230;
    float _479 = _388 * (_473 + _474);
    float _480 = _390 * (_477 - _476);
    float _484 = min((_479 * _479) + (_480 * _480), _396);
    float _488 = (_484 * _393) + (-1.0f);
    float _494 = (_488 * _488) * ((((_484 * 0.625f) + (-1.5625f)) * ((_484 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _504 = _388 * (_474 - _416);
    float _505 = _390 * (_419 + _477);
    float _509 = min((_504 * _504) + (_505 * _505), _396);
    float _513 = (_509 * _393) + (-1.0f);
    float _519 = (_513 * _513) * ((((_509 * 0.625f) + (-1.5625f)) * ((_509 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _527 = (-0.0f) - _103;
    float _529 = _372 * _527;
    float _531 = _371 * _527;
    float _533 = _388 * (_529 - _416);
    float _534 = _390 * (_419 + _531);
    float _538 = min((_533 * _533) + (_534 * _534), _396);
    float _542 = (_538 * _393) + (-1.0f);
    float _548 = (_542 * _542) * ((((_538 * 0.625f) + (-1.5625f)) * ((_538 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _558 = _388 * (_473 + _529);
    float _559 = _390 * (_531 - _476);
    float _563 = min((_558 * _558) + (_559 * _559), _396);
    float _567 = (_563 * _393) + (-1.0f);
    float _573 = (_567 * _567) * ((((_563 * 0.625f) + (-1.5625f)) * ((_563 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _583 = _388 * (_445 + _474);
    float _584 = _390 * (_477 - _447);
    float _588 = min((_583 * _583) + (_584 * _584), _396);
    float _592 = (_588 * _393) + (-1.0f);
    float _598 = (_592 * _592) * ((((_588 * 0.625f) + (-1.5625f)) * ((_588 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _606 = 2.0f - _102;
    float _608 = _371 * _606;
    float _610 = _372 * _606;
    float _612 = _388 * (_608 + _474);
    float _613 = _390 * (_477 - _610);
    float _617 = min((_612 * _612) + (_613 * _613), _396);
    float _621 = (_617 * _393) + (-1.0f);
    float _627 = (_621 * _621) * ((((_617 * 0.625f) + (-1.5625f)) * ((_617 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _637 = _388 * (_608 + _529);
    float _638 = _390 * (_531 - _610);
    float _642 = min((_637 * _637) + (_638 * _638), _396);
    float _646 = (_642 * _393) + (-1.0f);
    float _652 = (_646 * _646) * ((((_642 * 0.625f) + (-1.5625f)) * ((_642 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _662 = _388 * (_445 + _529);
    float _663 = _390 * (_531 - _447);
    float _667 = min((_662 * _662) + (_663 * _663), _396);
    float _671 = (_667 * _393) + (-1.0f);
    float _677 = (_671 * _671) * ((((_667 * 0.625f) + (-1.5625f)) * ((_667 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _685 = 2.0f - _103;
    float _686 = _372 * _685;
    float _688 = _371 * _685;
    float _690 = _388 * (_445 + _686);
    float _691 = _390 * (_688 - _447);
    float _695 = min((_690 * _690) + (_691 * _691), _396);
    float _699 = (_695 * _393) + (-1.0f);
    float _705 = (_699 * _699) * ((((_695 * 0.625f) + (-1.5625f)) * ((_695 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _715 = _388 * (_686 - _416);
    float _716 = _390 * (_419 + _688);
    float _720 = min((_715 * _715) + (_716 * _716), _396);
    float _724 = (_720 * _393) + (-1.0f);
    float _730 = (_724 * _724) * ((((_720 * 0.625f) + (-1.5625f)) * ((_720 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _738 = 1.0f / (((((((((((_464 + _441) + _494) + _519) + _548) + _573) + _598) + _627) + _652) + _677) + _705) + _730);
    FILL_DEST_TEX[uint2(_86.x + _49, _86.y + _51)] = float4(min(max(max(_147, max(_166, _146)), _163), max(min(min(_147, min(_166, _146)), _163), ((((((((((((_464 * _133) + (_441 * _132)) + (_494 * _145)) + (_519 * _146)) + (_548 * _147)) + (_573 * _148)) + (_598 * _163)) + (_627 * _164)) + (_652 * _165)) + (_677 * _166)) + (_705 * _181)) + (_730 * _182)) * _738)), min(max(max(_153, max(_172, _152)), _169), max(min(min(_153, min(_172, _152)), _169), ((((((((((((_464 * _137) + (_441 * _136)) + (_494 * _151)) + (_519 * _152)) + (_548 * _153)) + (_573 * _154)) + (_598 * _169)) + (_627 * _170)) + (_652 * _171)) + (_677 * _172)) + (_705 * _185)) + (_730 * _186)) * _738)), min(max(max(_159, max(_178, _158)), _175), max(min(min(_159, min(_178, _158)), _175), ((((((((((((_464 * _142) + (_441 * _141)) + (_494 * _157)) + (_519 * _158)) + (_548 * _159)) + (_573 * _160)) + (_598 * _175)) + (_627 * _176)) + (_652 * _177)) + (_677 * _178)) + (_705 * _189)) + (_730 * _190)) * _738)), 1.0f);
    uint _753 = _49 | 8u;
    uint4 _757 = asuint(CB_PS_PASS_FILL_m0[10u]);
    uint4 _764 = asuint(CB_PS_PASS_FILL_m0[11u]);
    uint4 _771 = asuint(CB_PS_PASS_FILL_m0[12u]);
    uint4 _778 = asuint(CB_PS_PASS_FILL_m0[13u]);
    uint4 _783 = asuint(CB_PS_PASS_FILL_m0[9u]);
    float _786 = float(_753);
    float _793 = (asfloat(_757.x) * _786) + asfloat(_757.z);
    float _794 = (asfloat(_757.y) * _90) + asfloat(_757.w);
    float _795 = floor(_793);
    float _796 = floor(_794);
    float _797 = _793 - _795;
    float _798 = _794 - _796;
    float _805 = (_795 * asfloat(_764.x)) + asfloat(_764.z);
    float _806 = (_796 * asfloat(_764.y)) + asfloat(_764.w);
    float _809 = _805 + asfloat(_771.x);
    float _810 = _806 + asfloat(_771.y);
    float _813 = _805 + asfloat(_771.z);
    float _814 = _806 + asfloat(_771.w);
    float _817 = _805 + asfloat(_778.x);
    float _818 = _806 + asfloat(_778.y);
    float4 _823 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_805, _806));
    float _824 = _823.x;
    float _825 = _823.y;
    float4 _827 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_805, _806));
    float _828 = _827.x;
    float _829 = _827.y;
    float4 _831 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_805, _806));
    float _832 = _831.x;
    float _833 = _831.y;
    float4 _835 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_809, _810));
    float _836 = _835.x;
    float _837 = _835.y;
    float _838 = _835.z;
    float _839 = _835.w;
    float4 _841 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_809, _810));
    float _842 = _841.x;
    float _843 = _841.y;
    float _844 = _841.z;
    float _845 = _841.w;
    float4 _847 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_809, _810));
    float _848 = _847.x;
    float _849 = _847.y;
    float _850 = _847.z;
    float _851 = _847.w;
    float4 _853 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_813, _814));
    float _854 = _853.x;
    float _855 = _853.y;
    float _856 = _853.z;
    float _857 = _853.w;
    float4 _859 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_813, _814));
    float _860 = _859.x;
    float _861 = _859.y;
    float _862 = _859.z;
    float _863 = _859.w;
    float4 _865 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_813, _814));
    float _866 = _865.x;
    float _867 = _865.y;
    float _868 = _865.z;
    float _869 = _865.w;
    float4 _871 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_817, _818));
    float _872 = _871.z;
    float _873 = _871.w;
    float4 _875 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_817, _818));
    float _876 = _875.z;
    float _877 = _875.w;
    float4 _879 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_817, _818));
    float _880 = _879.z;
    float _881 = _879.w;
    float _884 = ((_832 + _824) * 0.5f) + _828;
    float _887 = ((_833 + _825) * 0.5f) + _829;
    float _890 = ((_848 + _836) * 0.5f) + _842;
    float _893 = ((_849 + _837) * 0.5f) + _843;
    float _896 = ((_850 + _838) * 0.5f) + _844;
    float _899 = ((_851 + _839) * 0.5f) + _845;
    float _902 = ((_866 + _854) * 0.5f) + _860;
    float _905 = ((_867 + _855) * 0.5f) + _861;
    float _908 = ((_868 + _856) * 0.5f) + _862;
    float _911 = ((_869 + _857) * 0.5f) + _863;
    float _914 = ((_880 + _872) * 0.5f) + _876;
    float _917 = ((_881 + _873) * 0.5f) + _877;
    float _918 = 1.0f - _797;
    float _919 = 1.0f - _798;
    float _920 = _919 * _918;
    float _924 = abs(_911 - _896);
    float _929 = _911 - _899;
    float _933 = clamp(asfloat(2129690299u - asuint(max(_924, abs(_896 - _899)))) * abs(_929), 0.0f, 1.0f);
    float _938 = abs(_893 - _896);
    float _943 = _893 - _884;
    float _947 = clamp(asfloat(2129690299u - asuint(max(_938, abs(_896 - _884)))) * abs(_943), 0.0f, 1.0f);
    float _951 = _919 * _797;
    float _958 = _908 - _896;
    float _963 = clamp(asfloat(2129690299u - asuint(max(abs(_908 - _911), _924))) * abs(_958), 0.0f, 1.0f);
    float _968 = abs(_902 - _911);
    float _973 = _902 - _887;
    float _978 = clamp(asfloat(2129690299u - asuint(max(_968, abs(_911 - _887)))) * abs(_973), 0.0f, 1.0f);
    float _980 = _918 * _798;
    float _984 = abs(_902 - _893);
    float _989 = _902 - _890;
    float _994 = clamp(asfloat(2129690299u - asuint(max(_984, abs(_893 - _890)))) * abs(_989), 0.0f, 1.0f);
    float _1002 = _917 - _896;
    float _1007 = clamp(asfloat(2129690299u - asuint(max(abs(_917 - _893), _938))) * abs(_1002), 0.0f, 1.0f);
    float _1009 = _798 * _797;
    float _1016 = _905 - _893;
    float _1018 = (((_929 * _920) + (_958 * _951)) + (_989 * _980)) + (_1016 * _1009);
    float _1021 = clamp(asfloat(2129690299u - asuint(max(abs(_905 - _902), _984))) * abs(_1016), 0.0f, 1.0f);
    float _1029 = _914 - _911;
    float _1031 = (((_973 * _951) + (_943 * _920)) + (_1002 * _980)) + (_1029 * _1009);
    float _1034 = clamp(asfloat(2129690299u - asuint(max(abs(_914 - _902), _968))) * abs(_1029), 0.0f, 1.0f);
    float _1047 = (_1031 * _1031) + (_1018 * _1018);
    bool _1048 = _1047 < 3.0517578125e-05f;
    float _1053 = _1048 ? 1.0f : asfloat(1597275508u - (asuint(_1047) >> 1u));
    float _1055 = _1053 * (_1048 ? 1.0f : _1018);
    float _1056 = _1053 * _1031;
    float _1057 = ((((((_1034 * _1034) + (_1021 * _1021)) * _1009) + (((_947 * _947) + (_933 * _933)) * _920)) + (((_1007 * _1007) + (_994 * _994)) * _980)) + (((_978 * _978) + (_963 * _963)) * _951)) * 0.5f;
    float _1058 = _1057 * _1057;
    float _1071 = (((asfloat(2129690299u - asuint(max(abs(_1055), abs(_1056)))) * ((_1055 * _1055) + (_1056 * _1056))) + (-1.0f)) * _1058) + 1.0f;
    float _1073 = 1.0f - (_1058 * 0.5f);
    float _1075 = 0.5f - (_1058 * 0.2899999916553497314453125f);
    float _1078 = asfloat(2129690299u - asuint(_1075));
    float _1097 = (-1.0f) - _798;
    float _1098 = _1055 * _797;
    float _1099 = _1056 * _1097;
    float _1101 = _1056 * _797;
    float _1102 = _1055 * _1097;
    float _1104 = _1071 * (_1099 - _1098);
    float _1105 = _1073 * (_1101 + _1102);
    float _1109 = min((_1104 * _1104) + (_1105 * _1105), _1078);
    float _1113 = (_1109 * _1075) + (-1.0f);
    float _1119 = (_1113 * _1113) * ((((_1109 * 0.625f) + (-1.5625f)) * ((_1109 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1123 = _1055 * _918;
    float _1125 = _1056 * _918;
    float _1127 = _1071 * (_1123 + _1099);
    float _1128 = _1073 * (_1102 - _1125);
    float _1132 = min((_1127 * _1127) + (_1128 * _1128), _1078);
    float _1136 = (_1132 * _1075) + (-1.0f);
    float _1142 = (_1136 * _1136) * ((((_1132 * 0.625f) + (-1.5625f)) * ((_1132 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1150 = (-1.0f) - _797;
    float _1151 = _1055 * _1150;
    float _1152 = _1056 * _919;
    float _1154 = _1056 * _1150;
    float _1155 = _1055 * _919;
    float _1157 = _1071 * (_1151 + _1152);
    float _1158 = _1073 * (_1155 - _1154);
    float _1162 = min((_1157 * _1157) + (_1158 * _1158), _1078);
    float _1166 = (_1162 * _1075) + (-1.0f);
    float _1172 = (_1166 * _1166) * ((((_1162 * 0.625f) + (-1.5625f)) * ((_1162 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1182 = _1071 * (_1152 - _1098);
    float _1183 = _1073 * (_1101 + _1155);
    float _1187 = min((_1182 * _1182) + (_1183 * _1183), _1078);
    float _1191 = (_1187 * _1075) + (-1.0f);
    float _1197 = (_1191 * _1191) * ((((_1187 * 0.625f) + (-1.5625f)) * ((_1187 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1205 = (-0.0f) - _798;
    float _1206 = _1056 * _1205;
    float _1208 = _1055 * _1205;
    float _1210 = _1071 * (_1206 - _1098);
    float _1211 = _1073 * (_1101 + _1208);
    float _1215 = min((_1210 * _1210) + (_1211 * _1211), _1078);
    float _1219 = (_1215 * _1075) + (-1.0f);
    float _1225 = (_1219 * _1219) * ((((_1215 * 0.625f) + (-1.5625f)) * ((_1215 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1235 = _1071 * (_1151 + _1206);
    float _1236 = _1073 * (_1208 - _1154);
    float _1240 = min((_1235 * _1235) + (_1236 * _1236), _1078);
    float _1244 = (_1240 * _1075) + (-1.0f);
    float _1250 = (_1244 * _1244) * ((((_1240 * 0.625f) + (-1.5625f)) * ((_1240 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1260 = _1071 * (_1123 + _1152);
    float _1261 = _1073 * (_1155 - _1125);
    float _1265 = min((_1260 * _1260) + (_1261 * _1261), _1078);
    float _1269 = (_1265 * _1075) + (-1.0f);
    float _1275 = (_1269 * _1269) * ((((_1265 * 0.625f) + (-1.5625f)) * ((_1265 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1283 = 2.0f - _797;
    float _1284 = _1055 * _1283;
    float _1286 = _1056 * _1283;
    float _1288 = _1071 * (_1284 + _1152);
    float _1289 = _1073 * (_1155 - _1286);
    float _1293 = min((_1288 * _1288) + (_1289 * _1289), _1078);
    float _1297 = (_1293 * _1075) + (-1.0f);
    float _1303 = (_1297 * _1297) * ((((_1293 * 0.625f) + (-1.5625f)) * ((_1293 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1313 = _1071 * (_1284 + _1206);
    float _1314 = _1073 * (_1208 - _1286);
    float _1318 = min((_1313 * _1313) + (_1314 * _1314), _1078);
    float _1322 = (_1318 * _1075) + (-1.0f);
    float _1328 = (_1322 * _1322) * ((((_1318 * 0.625f) + (-1.5625f)) * ((_1318 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1338 = _1071 * (_1123 + _1206);
    float _1339 = _1073 * (_1208 - _1125);
    float _1343 = min((_1338 * _1338) + (_1339 * _1339), _1078);
    float _1347 = (_1343 * _1075) + (-1.0f);
    float _1353 = (_1347 * _1347) * ((((_1343 * 0.625f) + (-1.5625f)) * ((_1343 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1361 = 2.0f - _798;
    float _1362 = _1056 * _1361;
    float _1364 = _1055 * _1361;
    float _1366 = _1071 * (_1123 + _1362);
    float _1367 = _1073 * (_1364 - _1125);
    float _1371 = min((_1366 * _1366) + (_1367 * _1367), _1078);
    float _1375 = (_1371 * _1075) + (-1.0f);
    float _1381 = (_1375 * _1375) * ((((_1371 * 0.625f) + (-1.5625f)) * ((_1371 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1391 = _1071 * (_1362 - _1098);
    float _1392 = _1073 * (_1101 + _1364);
    float _1396 = min((_1391 * _1391) + (_1392 * _1392), _1078);
    float _1400 = (_1396 * _1075) + (-1.0f);
    float _1406 = (_1400 * _1400) * ((((_1396 * 0.625f) + (-1.5625f)) * ((_1396 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1414 = 1.0f / (((((((((((_1142 + _1119) + _1172) + _1197) + _1225) + _1250) + _1275) + _1303) + _1328) + _1353) + _1381) + _1406);
    FILL_DEST_TEX[uint2(_783.x + _753, _783.y + _51)] = float4(min(max(max(_838, max(_857, _837)), _854), max(min(min(_838, min(_857, _837)), _854), ((((((((((((_1142 * _825) + (_1119 * _824)) + (_1172 * _836)) + (_1197 * _837)) + (_1225 * _838)) + (_1250 * _839)) + (_1275 * _854)) + (_1303 * _855)) + (_1328 * _856)) + (_1353 * _857)) + (_1381 * _872)) + (_1406 * _873)) * _1414)), min(max(max(_844, max(_863, _843)), _860), max(min(min(_844, min(_863, _843)), _860), ((((((((((((_1142 * _829) + (_1119 * _828)) + (_1172 * _842)) + (_1197 * _843)) + (_1225 * _844)) + (_1250 * _845)) + (_1275 * _860)) + (_1303 * _861)) + (_1328 * _862)) + (_1353 * _863)) + (_1381 * _876)) + (_1406 * _877)) * _1414)), min(max(max(_850, max(_869, _849)), _866), max(min(min(_850, min(_869, _849)), _866), ((((((((((((_1142 * _833) + (_1119 * _832)) + (_1172 * _848)) + (_1197 * _849)) + (_1225 * _850)) + (_1250 * _851)) + (_1275 * _866)) + (_1303 * _867)) + (_1328 * _868)) + (_1353 * _869)) + (_1381 * _880)) + (_1406 * _881)) * _1414)), 1.0f);
    uint _1428 = _51 | 8u;
    uint4 _1431 = asuint(CB_PS_PASS_FILL_m0[10u]);
    uint4 _1438 = asuint(CB_PS_PASS_FILL_m0[11u]);
    uint4 _1445 = asuint(CB_PS_PASS_FILL_m0[12u]);
    uint4 _1452 = asuint(CB_PS_PASS_FILL_m0[13u]);
    uint4 _1457 = asuint(CB_PS_PASS_FILL_m0[9u]);
    float _1460 = float(_1428);
    float _1467 = (asfloat(_1431.x) * _786) + asfloat(_1431.z);
    float _1468 = (asfloat(_1431.y) * _1460) + asfloat(_1431.w);
    float _1469 = floor(_1467);
    float _1470 = floor(_1468);
    float _1471 = _1467 - _1469;
    float _1472 = _1468 - _1470;
    float _1479 = (_1469 * asfloat(_1438.x)) + asfloat(_1438.z);
    float _1480 = (_1470 * asfloat(_1438.y)) + asfloat(_1438.w);
    float _1483 = _1479 + asfloat(_1445.x);
    float _1484 = _1480 + asfloat(_1445.y);
    float _1487 = _1479 + asfloat(_1445.z);
    float _1488 = _1480 + asfloat(_1445.w);
    float _1491 = _1479 + asfloat(_1452.x);
    float _1492 = _1480 + asfloat(_1452.y);
    float4 _1497 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_1479, _1480));
    float _1498 = _1497.x;
    float _1499 = _1497.y;
    float4 _1501 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_1479, _1480));
    float _1502 = _1501.x;
    float _1503 = _1501.y;
    float4 _1505 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_1479, _1480));
    float _1506 = _1505.x;
    float _1507 = _1505.y;
    float4 _1509 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_1483, _1484));
    float _1510 = _1509.x;
    float _1511 = _1509.y;
    float _1512 = _1509.z;
    float _1513 = _1509.w;
    float4 _1515 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_1483, _1484));
    float _1516 = _1515.x;
    float _1517 = _1515.y;
    float _1518 = _1515.z;
    float _1519 = _1515.w;
    float4 _1521 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_1483, _1484));
    float _1522 = _1521.x;
    float _1523 = _1521.y;
    float _1524 = _1521.z;
    float _1525 = _1521.w;
    float4 _1527 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_1487, _1488));
    float _1528 = _1527.x;
    float _1529 = _1527.y;
    float _1530 = _1527.z;
    float _1531 = _1527.w;
    float4 _1533 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_1487, _1488));
    float _1534 = _1533.x;
    float _1535 = _1533.y;
    float _1536 = _1533.z;
    float _1537 = _1533.w;
    float4 _1539 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_1487, _1488));
    float _1540 = _1539.x;
    float _1541 = _1539.y;
    float _1542 = _1539.z;
    float _1543 = _1539.w;
    float4 _1545 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_1491, _1492));
    float _1546 = _1545.z;
    float _1547 = _1545.w;
    float4 _1549 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_1491, _1492));
    float _1550 = _1549.z;
    float _1551 = _1549.w;
    float4 _1553 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_1491, _1492));
    float _1554 = _1553.z;
    float _1555 = _1553.w;
    float _1558 = ((_1506 + _1498) * 0.5f) + _1502;
    float _1561 = ((_1507 + _1499) * 0.5f) + _1503;
    float _1564 = ((_1522 + _1510) * 0.5f) + _1516;
    float _1567 = ((_1523 + _1511) * 0.5f) + _1517;
    float _1570 = ((_1524 + _1512) * 0.5f) + _1518;
    float _1573 = ((_1525 + _1513) * 0.5f) + _1519;
    float _1576 = ((_1540 + _1528) * 0.5f) + _1534;
    float _1579 = ((_1541 + _1529) * 0.5f) + _1535;
    float _1582 = ((_1542 + _1530) * 0.5f) + _1536;
    float _1585 = ((_1543 + _1531) * 0.5f) + _1537;
    float _1588 = ((_1554 + _1546) * 0.5f) + _1550;
    float _1591 = ((_1555 + _1547) * 0.5f) + _1551;
    float _1592 = 1.0f - _1471;
    float _1593 = 1.0f - _1472;
    float _1594 = _1593 * _1592;
    float _1598 = abs(_1585 - _1570);
    float _1603 = _1585 - _1573;
    float _1607 = clamp(asfloat(2129690299u - asuint(max(_1598, abs(_1570 - _1573)))) * abs(_1603), 0.0f, 1.0f);
    float _1612 = abs(_1567 - _1570);
    float _1617 = _1567 - _1558;
    float _1621 = clamp(asfloat(2129690299u - asuint(max(_1612, abs(_1570 - _1558)))) * abs(_1617), 0.0f, 1.0f);
    float _1625 = _1593 * _1471;
    float _1632 = _1582 - _1570;
    float _1637 = clamp(asfloat(2129690299u - asuint(max(abs(_1582 - _1585), _1598))) * abs(_1632), 0.0f, 1.0f);
    float _1642 = abs(_1576 - _1585);
    float _1647 = _1576 - _1561;
    float _1652 = clamp(asfloat(2129690299u - asuint(max(_1642, abs(_1585 - _1561)))) * abs(_1647), 0.0f, 1.0f);
    float _1654 = _1592 * _1472;
    float _1658 = abs(_1576 - _1567);
    float _1663 = _1576 - _1564;
    float _1668 = clamp(asfloat(2129690299u - asuint(max(_1658, abs(_1567 - _1564)))) * abs(_1663), 0.0f, 1.0f);
    float _1676 = _1591 - _1570;
    float _1681 = clamp(asfloat(2129690299u - asuint(max(abs(_1591 - _1567), _1612))) * abs(_1676), 0.0f, 1.0f);
    float _1683 = _1472 * _1471;
    float _1690 = _1579 - _1567;
    float _1692 = (((_1603 * _1594) + (_1632 * _1625)) + (_1663 * _1654)) + (_1690 * _1683);
    float _1695 = clamp(asfloat(2129690299u - asuint(max(abs(_1579 - _1576), _1658))) * abs(_1690), 0.0f, 1.0f);
    float _1703 = _1588 - _1585;
    float _1705 = (((_1647 * _1625) + (_1617 * _1594)) + (_1676 * _1654)) + (_1703 * _1683);
    float _1708 = clamp(asfloat(2129690299u - asuint(max(abs(_1588 - _1576), _1642))) * abs(_1703), 0.0f, 1.0f);
    float _1721 = (_1705 * _1705) + (_1692 * _1692);
    bool _1722 = _1721 < 3.0517578125e-05f;
    float _1727 = _1722 ? 1.0f : asfloat(1597275508u - (asuint(_1721) >> 1u));
    float _1729 = _1727 * (_1722 ? 1.0f : _1692);
    float _1730 = _1727 * _1705;
    float _1731 = ((((((_1708 * _1708) + (_1695 * _1695)) * _1683) + (((_1621 * _1621) + (_1607 * _1607)) * _1594)) + (((_1681 * _1681) + (_1668 * _1668)) * _1654)) + (((_1652 * _1652) + (_1637 * _1637)) * _1625)) * 0.5f;
    float _1732 = _1731 * _1731;
    float _1745 = (((asfloat(2129690299u - asuint(max(abs(_1729), abs(_1730)))) * ((_1729 * _1729) + (_1730 * _1730))) + (-1.0f)) * _1732) + 1.0f;
    float _1747 = 1.0f - (_1732 * 0.5f);
    float _1749 = 0.5f - (_1732 * 0.2899999916553497314453125f);
    float _1752 = asfloat(2129690299u - asuint(_1749));
    float _1771 = (-1.0f) - _1472;
    float _1772 = _1729 * _1471;
    float _1773 = _1730 * _1771;
    float _1775 = _1730 * _1471;
    float _1776 = _1729 * _1771;
    float _1778 = _1745 * (_1773 - _1772);
    float _1779 = _1747 * (_1775 + _1776);
    float _1783 = min((_1778 * _1778) + (_1779 * _1779), _1752);
    float _1787 = (_1783 * _1749) + (-1.0f);
    float _1793 = (_1787 * _1787) * ((((_1783 * 0.625f) + (-1.5625f)) * ((_1783 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1797 = _1729 * _1592;
    float _1799 = _1730 * _1592;
    float _1801 = _1745 * (_1797 + _1773);
    float _1802 = _1747 * (_1776 - _1799);
    float _1806 = min((_1801 * _1801) + (_1802 * _1802), _1752);
    float _1810 = (_1806 * _1749) + (-1.0f);
    float _1816 = (_1810 * _1810) * ((((_1806 * 0.625f) + (-1.5625f)) * ((_1806 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1824 = (-1.0f) - _1471;
    float _1825 = _1729 * _1824;
    float _1826 = _1730 * _1593;
    float _1828 = _1730 * _1824;
    float _1829 = _1729 * _1593;
    float _1831 = _1745 * (_1825 + _1826);
    float _1832 = _1747 * (_1829 - _1828);
    float _1836 = min((_1831 * _1831) + (_1832 * _1832), _1752);
    float _1840 = (_1836 * _1749) + (-1.0f);
    float _1846 = (_1840 * _1840) * ((((_1836 * 0.625f) + (-1.5625f)) * ((_1836 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1856 = _1745 * (_1826 - _1772);
    float _1857 = _1747 * (_1775 + _1829);
    float _1861 = min((_1856 * _1856) + (_1857 * _1857), _1752);
    float _1865 = (_1861 * _1749) + (-1.0f);
    float _1871 = (_1865 * _1865) * ((((_1861 * 0.625f) + (-1.5625f)) * ((_1861 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1879 = (-0.0f) - _1472;
    float _1880 = _1730 * _1879;
    float _1882 = _1729 * _1879;
    float _1884 = _1745 * (_1880 - _1772);
    float _1885 = _1747 * (_1775 + _1882);
    float _1889 = min((_1884 * _1884) + (_1885 * _1885), _1752);
    float _1893 = (_1889 * _1749) + (-1.0f);
    float _1899 = (_1893 * _1893) * ((((_1889 * 0.625f) + (-1.5625f)) * ((_1889 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1909 = _1745 * (_1825 + _1880);
    float _1910 = _1747 * (_1882 - _1828);
    float _1914 = min((_1909 * _1909) + (_1910 * _1910), _1752);
    float _1918 = (_1914 * _1749) + (-1.0f);
    float _1924 = (_1918 * _1918) * ((((_1914 * 0.625f) + (-1.5625f)) * ((_1914 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1934 = _1745 * (_1797 + _1826);
    float _1935 = _1747 * (_1829 - _1799);
    float _1939 = min((_1934 * _1934) + (_1935 * _1935), _1752);
    float _1943 = (_1939 * _1749) + (-1.0f);
    float _1949 = (_1943 * _1943) * ((((_1939 * 0.625f) + (-1.5625f)) * ((_1939 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1957 = 2.0f - _1471;
    float _1958 = _1729 * _1957;
    float _1960 = _1730 * _1957;
    float _1962 = _1745 * (_1958 + _1826);
    float _1963 = _1747 * (_1829 - _1960);
    float _1967 = min((_1962 * _1962) + (_1963 * _1963), _1752);
    float _1971 = (_1967 * _1749) + (-1.0f);
    float _1977 = (_1971 * _1971) * ((((_1967 * 0.625f) + (-1.5625f)) * ((_1967 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _1987 = _1745 * (_1958 + _1880);
    float _1988 = _1747 * (_1882 - _1960);
    float _1992 = min((_1987 * _1987) + (_1988 * _1988), _1752);
    float _1996 = (_1992 * _1749) + (-1.0f);
    float _2002 = (_1996 * _1996) * ((((_1992 * 0.625f) + (-1.5625f)) * ((_1992 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2012 = _1745 * (_1797 + _1880);
    float _2013 = _1747 * (_1882 - _1799);
    float _2017 = min((_2012 * _2012) + (_2013 * _2013), _1752);
    float _2021 = (_2017 * _1749) + (-1.0f);
    float _2027 = (_2021 * _2021) * ((((_2017 * 0.625f) + (-1.5625f)) * ((_2017 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2035 = 2.0f - _1472;
    float _2036 = _1730 * _2035;
    float _2038 = _1729 * _2035;
    float _2040 = _1745 * (_1797 + _2036);
    float _2041 = _1747 * (_2038 - _1799);
    float _2045 = min((_2040 * _2040) + (_2041 * _2041), _1752);
    float _2049 = (_2045 * _1749) + (-1.0f);
    float _2055 = (_2049 * _2049) * ((((_2045 * 0.625f) + (-1.5625f)) * ((_2045 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2065 = _1745 * (_2036 - _1772);
    float _2066 = _1747 * (_1775 + _2038);
    float _2070 = min((_2065 * _2065) + (_2066 * _2066), _1752);
    float _2074 = (_2070 * _1749) + (-1.0f);
    float _2080 = (_2074 * _2074) * ((((_2070 * 0.625f) + (-1.5625f)) * ((_2070 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2088 = 1.0f / (((((((((((_1816 + _1793) + _1846) + _1871) + _1899) + _1924) + _1949) + _1977) + _2002) + _2027) + _2055) + _2080);
    FILL_DEST_TEX[uint2(_1457.x + _753, _1457.y + _1428)] = float4(min(max(max(_1512, max(_1531, _1511)), _1528), max(min(min(_1512, min(_1531, _1511)), _1528), ((((((((((((_1816 * _1499) + (_1793 * _1498)) + (_1846 * _1510)) + (_1871 * _1511)) + (_1899 * _1512)) + (_1924 * _1513)) + (_1949 * _1528)) + (_1977 * _1529)) + (_2002 * _1530)) + (_2027 * _1531)) + (_2055 * _1546)) + (_2080 * _1547)) * _2088)), min(max(max(_1518, max(_1537, _1517)), _1534), max(min(min(_1518, min(_1537, _1517)), _1534), ((((((((((((_1816 * _1503) + (_1793 * _1502)) + (_1846 * _1516)) + (_1871 * _1517)) + (_1899 * _1518)) + (_1924 * _1519)) + (_1949 * _1534)) + (_1977 * _1535)) + (_2002 * _1536)) + (_2027 * _1537)) + (_2055 * _1550)) + (_2080 * _1551)) * _2088)), min(max(max(_1524, max(_1543, _1523)), _1540), max(min(min(_1524, min(_1543, _1523)), _1540), ((((((((((((_1816 * _1507) + (_1793 * _1506)) + (_1846 * _1522)) + (_1871 * _1523)) + (_1899 * _1524)) + (_1924 * _1525)) + (_1949 * _1540)) + (_1977 * _1541)) + (_2002 * _1542)) + (_2027 * _1543)) + (_2055 * _1554)) + (_2080 * _1555)) * _2088)), 1.0f);
    uint4 _2104 = asuint(CB_PS_PASS_FILL_m0[10u]);
    uint4 _2111 = asuint(CB_PS_PASS_FILL_m0[11u]);
    uint4 _2118 = asuint(CB_PS_PASS_FILL_m0[12u]);
    uint4 _2125 = asuint(CB_PS_PASS_FILL_m0[13u]);
    uint4 _2130 = asuint(CB_PS_PASS_FILL_m0[9u]);
    float _2139 = (asfloat(_2104.x) * _89) + asfloat(_2104.z);
    float _2140 = (asfloat(_2104.y) * _1460) + asfloat(_2104.w);
    float _2141 = floor(_2139);
    float _2142 = floor(_2140);
    float _2143 = _2139 - _2141;
    float _2144 = _2140 - _2142;
    float _2151 = (_2141 * asfloat(_2111.x)) + asfloat(_2111.z);
    float _2152 = (_2142 * asfloat(_2111.y)) + asfloat(_2111.w);
    float _2155 = _2151 + asfloat(_2118.x);
    float _2156 = _2152 + asfloat(_2118.y);
    float _2159 = _2151 + asfloat(_2118.z);
    float _2160 = _2152 + asfloat(_2118.w);
    float _2163 = _2151 + asfloat(_2125.x);
    float _2164 = _2152 + asfloat(_2125.y);
    float4 _2169 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_2151, _2152));
    float _2170 = _2169.x;
    float _2171 = _2169.y;
    float4 _2173 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_2151, _2152));
    float _2174 = _2173.x;
    float _2175 = _2173.y;
    float4 _2177 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_2151, _2152));
    float _2178 = _2177.x;
    float _2179 = _2177.y;
    float4 _2181 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_2155, _2156));
    float _2182 = _2181.x;
    float _2183 = _2181.y;
    float _2184 = _2181.z;
    float _2185 = _2181.w;
    float4 _2187 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_2155, _2156));
    float _2188 = _2187.x;
    float _2189 = _2187.y;
    float _2190 = _2187.z;
    float _2191 = _2187.w;
    float4 _2193 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_2155, _2156));
    float _2194 = _2193.x;
    float _2195 = _2193.y;
    float _2196 = _2193.z;
    float _2197 = _2193.w;
    float4 _2199 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_2159, _2160));
    float _2200 = _2199.x;
    float _2201 = _2199.y;
    float _2202 = _2199.z;
    float _2203 = _2199.w;
    float4 _2205 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_2159, _2160));
    float _2206 = _2205.x;
    float _2207 = _2205.y;
    float _2208 = _2205.z;
    float _2209 = _2205.w;
    float4 _2211 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_2159, _2160));
    float _2212 = _2211.x;
    float _2213 = _2211.y;
    float _2214 = _2211.z;
    float _2215 = _2211.w;
    float4 _2217 = FILL_COLOR.GatherRed(PS_SAMPLERS[4u], float2(_2163, _2164));
    float _2218 = _2217.z;
    float _2219 = _2217.w;
    float4 _2221 = FILL_COLOR.GatherGreen(PS_SAMPLERS[4u], float2(_2163, _2164));
    float _2222 = _2221.z;
    float _2223 = _2221.w;
    float4 _2225 = FILL_COLOR.GatherBlue(PS_SAMPLERS[4u], float2(_2163, _2164));
    float _2226 = _2225.z;
    float _2227 = _2225.w;
    float _2230 = ((_2178 + _2170) * 0.5f) + _2174;
    float _2233 = ((_2179 + _2171) * 0.5f) + _2175;
    float _2236 = ((_2194 + _2182) * 0.5f) + _2188;
    float _2239 = ((_2195 + _2183) * 0.5f) + _2189;
    float _2242 = ((_2196 + _2184) * 0.5f) + _2190;
    float _2245 = ((_2197 + _2185) * 0.5f) + _2191;
    float _2248 = ((_2212 + _2200) * 0.5f) + _2206;
    float _2251 = ((_2213 + _2201) * 0.5f) + _2207;
    float _2254 = ((_2214 + _2202) * 0.5f) + _2208;
    float _2257 = ((_2215 + _2203) * 0.5f) + _2209;
    float _2260 = ((_2226 + _2218) * 0.5f) + _2222;
    float _2263 = ((_2227 + _2219) * 0.5f) + _2223;
    float _2264 = 1.0f - _2143;
    float _2265 = 1.0f - _2144;
    float _2266 = _2265 * _2264;
    float _2270 = abs(_2257 - _2242);
    float _2275 = _2257 - _2245;
    float _2279 = clamp(asfloat(2129690299u - asuint(max(_2270, abs(_2242 - _2245)))) * abs(_2275), 0.0f, 1.0f);
    float _2284 = abs(_2239 - _2242);
    float _2289 = _2239 - _2230;
    float _2293 = clamp(asfloat(2129690299u - asuint(max(_2284, abs(_2242 - _2230)))) * abs(_2289), 0.0f, 1.0f);
    float _2297 = _2265 * _2143;
    float _2304 = _2254 - _2242;
    float _2309 = clamp(asfloat(2129690299u - asuint(max(abs(_2254 - _2257), _2270))) * abs(_2304), 0.0f, 1.0f);
    float _2314 = abs(_2248 - _2257);
    float _2319 = _2248 - _2233;
    float _2324 = clamp(asfloat(2129690299u - asuint(max(_2314, abs(_2257 - _2233)))) * abs(_2319), 0.0f, 1.0f);
    float _2326 = _2264 * _2144;
    float _2330 = abs(_2248 - _2239);
    float _2335 = _2248 - _2236;
    float _2340 = clamp(asfloat(2129690299u - asuint(max(_2330, abs(_2239 - _2236)))) * abs(_2335), 0.0f, 1.0f);
    float _2348 = _2263 - _2242;
    float _2353 = clamp(asfloat(2129690299u - asuint(max(abs(_2263 - _2239), _2284))) * abs(_2348), 0.0f, 1.0f);
    float _2355 = _2144 * _2143;
    float _2362 = _2251 - _2239;
    float _2364 = (((_2275 * _2266) + (_2304 * _2297)) + (_2335 * _2326)) + (_2362 * _2355);
    float _2367 = clamp(asfloat(2129690299u - asuint(max(abs(_2251 - _2248), _2330))) * abs(_2362), 0.0f, 1.0f);
    float _2375 = _2260 - _2257;
    float _2377 = (((_2319 * _2297) + (_2289 * _2266)) + (_2348 * _2326)) + (_2375 * _2355);
    float _2380 = clamp(asfloat(2129690299u - asuint(max(abs(_2260 - _2248), _2314))) * abs(_2375), 0.0f, 1.0f);
    float _2393 = (_2377 * _2377) + (_2364 * _2364);
    bool _2394 = _2393 < 3.0517578125e-05f;
    float _2399 = _2394 ? 1.0f : asfloat(1597275508u - (asuint(_2393) >> 1u));
    float _2401 = _2399 * (_2394 ? 1.0f : _2364);
    float _2402 = _2399 * _2377;
    float _2403 = ((((((_2380 * _2380) + (_2367 * _2367)) * _2355) + (((_2293 * _2293) + (_2279 * _2279)) * _2266)) + (((_2353 * _2353) + (_2340 * _2340)) * _2326)) + (((_2324 * _2324) + (_2309 * _2309)) * _2297)) * 0.5f;
    float _2404 = _2403 * _2403;
    float _2417 = (((asfloat(2129690299u - asuint(max(abs(_2401), abs(_2402)))) * ((_2401 * _2401) + (_2402 * _2402))) + (-1.0f)) * _2404) + 1.0f;
    float _2419 = 1.0f - (_2404 * 0.5f);
    float _2421 = 0.5f - (_2404 * 0.2899999916553497314453125f);
    float _2424 = asfloat(2129690299u - asuint(_2421));
    float _2443 = (-1.0f) - _2144;
    float _2444 = _2401 * _2143;
    float _2445 = _2402 * _2443;
    float _2447 = _2402 * _2143;
    float _2448 = _2401 * _2443;
    float _2450 = _2417 * (_2445 - _2444);
    float _2451 = _2419 * (_2447 + _2448);
    float _2455 = min((_2450 * _2450) + (_2451 * _2451), _2424);
    float _2459 = (_2455 * _2421) + (-1.0f);
    float _2465 = (_2459 * _2459) * ((((_2455 * 0.625f) + (-1.5625f)) * ((_2455 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2469 = _2401 * _2264;
    float _2471 = _2402 * _2264;
    float _2473 = _2417 * (_2469 + _2445);
    float _2474 = _2419 * (_2448 - _2471);
    float _2478 = min((_2473 * _2473) + (_2474 * _2474), _2424);
    float _2482 = (_2478 * _2421) + (-1.0f);
    float _2488 = (_2482 * _2482) * ((((_2478 * 0.625f) + (-1.5625f)) * ((_2478 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2496 = (-1.0f) - _2143;
    float _2497 = _2401 * _2496;
    float _2498 = _2402 * _2265;
    float _2500 = _2402 * _2496;
    float _2501 = _2401 * _2265;
    float _2503 = _2417 * (_2497 + _2498);
    float _2504 = _2419 * (_2501 - _2500);
    float _2508 = min((_2503 * _2503) + (_2504 * _2504), _2424);
    float _2512 = (_2508 * _2421) + (-1.0f);
    float _2518 = (_2512 * _2512) * ((((_2508 * 0.625f) + (-1.5625f)) * ((_2508 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2528 = _2417 * (_2498 - _2444);
    float _2529 = _2419 * (_2447 + _2501);
    float _2533 = min((_2528 * _2528) + (_2529 * _2529), _2424);
    float _2537 = (_2533 * _2421) + (-1.0f);
    float _2543 = (_2537 * _2537) * ((((_2533 * 0.625f) + (-1.5625f)) * ((_2533 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2551 = (-0.0f) - _2144;
    float _2552 = _2402 * _2551;
    float _2554 = _2401 * _2551;
    float _2556 = _2417 * (_2552 - _2444);
    float _2557 = _2419 * (_2447 + _2554);
    float _2561 = min((_2556 * _2556) + (_2557 * _2557), _2424);
    float _2565 = (_2561 * _2421) + (-1.0f);
    float _2571 = (_2565 * _2565) * ((((_2561 * 0.625f) + (-1.5625f)) * ((_2561 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2581 = _2417 * (_2497 + _2552);
    float _2582 = _2419 * (_2554 - _2500);
    float _2586 = min((_2581 * _2581) + (_2582 * _2582), _2424);
    float _2590 = (_2586 * _2421) + (-1.0f);
    float _2596 = (_2590 * _2590) * ((((_2586 * 0.625f) + (-1.5625f)) * ((_2586 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2606 = _2417 * (_2469 + _2498);
    float _2607 = _2419 * (_2501 - _2471);
    float _2611 = min((_2606 * _2606) + (_2607 * _2607), _2424);
    float _2615 = (_2611 * _2421) + (-1.0f);
    float _2621 = (_2615 * _2615) * ((((_2611 * 0.625f) + (-1.5625f)) * ((_2611 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2629 = 2.0f - _2143;
    float _2630 = _2401 * _2629;
    float _2632 = _2402 * _2629;
    float _2634 = _2417 * (_2630 + _2498);
    float _2635 = _2419 * (_2501 - _2632);
    float _2639 = min((_2634 * _2634) + (_2635 * _2635), _2424);
    float _2643 = (_2639 * _2421) + (-1.0f);
    float _2649 = (_2643 * _2643) * ((((_2639 * 0.625f) + (-1.5625f)) * ((_2639 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2659 = _2417 * (_2630 + _2552);
    float _2660 = _2419 * (_2554 - _2632);
    float _2664 = min((_2659 * _2659) + (_2660 * _2660), _2424);
    float _2668 = (_2664 * _2421) + (-1.0f);
    float _2674 = (_2668 * _2668) * ((((_2664 * 0.625f) + (-1.5625f)) * ((_2664 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2684 = _2417 * (_2469 + _2552);
    float _2685 = _2419 * (_2554 - _2471);
    float _2689 = min((_2684 * _2684) + (_2685 * _2685), _2424);
    float _2693 = (_2689 * _2421) + (-1.0f);
    float _2699 = (_2693 * _2693) * ((((_2689 * 0.625f) + (-1.5625f)) * ((_2689 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2707 = 2.0f - _2144;
    float _2708 = _2402 * _2707;
    float _2710 = _2401 * _2707;
    float _2712 = _2417 * (_2469 + _2708);
    float _2713 = _2419 * (_2710 - _2471);
    float _2717 = min((_2712 * _2712) + (_2713 * _2713), _2424);
    float _2721 = (_2717 * _2421) + (-1.0f);
    float _2727 = (_2721 * _2721) * ((((_2717 * 0.625f) + (-1.5625f)) * ((_2717 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2737 = _2417 * (_2708 - _2444);
    float _2738 = _2419 * (_2447 + _2710);
    float _2742 = min((_2737 * _2737) + (_2738 * _2738), _2424);
    float _2746 = (_2742 * _2421) + (-1.0f);
    float _2752 = (_2746 * _2746) * ((((_2742 * 0.625f) + (-1.5625f)) * ((_2742 * 0.4000000059604644775390625f) + (-1.0f))) + (-0.5625f));
    float _2760 = 1.0f / (((((((((((_2488 + _2465) + _2518) + _2543) + _2571) + _2596) + _2621) + _2649) + _2674) + _2699) + _2727) + _2752);
    FILL_DEST_TEX[uint2(_2130.x + _49, _2130.y + _1428)] = float4(min(max(max(_2184, max(_2203, _2183)), _2200), max(min(min(_2184, min(_2203, _2183)), _2200), ((((((((((((_2488 * _2171) + (_2465 * _2170)) + (_2518 * _2182)) + (_2543 * _2183)) + (_2571 * _2184)) + (_2596 * _2185)) + (_2621 * _2200)) + (_2649 * _2201)) + (_2674 * _2202)) + (_2699 * _2203)) + (_2727 * _2218)) + (_2752 * _2219)) * _2760)), min(max(max(_2190, max(_2209, _2189)), _2206), max(min(min(_2190, min(_2209, _2189)), _2206), ((((((((((((_2488 * _2175) + (_2465 * _2174)) + (_2518 * _2188)) + (_2543 * _2189)) + (_2571 * _2190)) + (_2596 * _2191)) + (_2621 * _2206)) + (_2649 * _2207)) + (_2674 * _2208)) + (_2699 * _2209)) + (_2727 * _2222)) + (_2752 * _2223)) * _2760)), min(max(max(_2196, max(_2215, _2195)), _2212), max(min(min(_2196, min(_2215, _2195)), _2212), ((((((((((((_2488 * _2179) + (_2465 * _2178)) + (_2518 * _2194)) + (_2543 * _2195)) + (_2571 * _2196)) + (_2596 * _2197)) + (_2621 * _2212)) + (_2649 * _2213)) + (_2674 * _2214)) + (_2699 * _2215)) + (_2727 * _2226)) + (_2752 * _2227)) * _2760)), 1.0f);
}

[numthreads(64, 1, 1)]
void main(SPIRV_Cross_Input stage_input)
{
    gl_WorkGroupID = stage_input.gl_WorkGroupID;
    gl_LocalInvocationIndex = stage_input.gl_LocalInvocationIndex;
    comp_main();
}
