#include "../shared.h"
Texture2D<float4> SrcImage : register(t0);

RWTexture2D<float4> OutputImage : register(u0);

cbuffer cbCAS : register(b0) {
  uint4 const0 : packoffset(c000.x);
  uint4 const1 : packoffset(c001.x);
};

[numthreads(64, 1, 1)]
void main(
  uint3 SV_DispatchThreadID : SV_DispatchThreadID,
  uint3 SV_GroupID : SV_GroupID,
  uint3 SV_GroupThreadID : SV_GroupThreadID,
  uint SV_GroupIndex : SV_GroupIndex
) {
  int _15 = (((uint)(SV_GroupThreadID.x) >> 1) & 7) | ((uint)((uint)(SV_GroupID.x) << 4));
  int _16 = ((((uint)(SV_GroupThreadID.x) >> 3) & 6) | ((uint)(SV_GroupThreadID.x) & 1)) | ((uint)((uint)(SV_GroupID.y) << 4));
  
  
#if DISABLE_SHARPENING // Skip sharpening - just passthrough the input using EXACT same coordinate transformation
  // First pixel (_15, _16) - use exact same coordinate calculation as original
  float pass_24 = float((uint)_15);
  float pass_25 = float((uint)_16);
  float pass_32 = (asfloat(const0.x) * pass_24) + asfloat(const0.z);
  float pass_33 = (asfloat(const0.y) * pass_25) + asfloat(const0.w);
  float pass_34 = floor(pass_32);
  float pass_35 = floor(pass_33);
  int pass_38 = int(pass_34);
  int pass_39 = int(pass_35);
  OutputImage[int2(_15, _16)] = SrcImage.Load(int3(pass_38, pass_39, 0));
  
  // Second pixel (_15|8, _16) - use exact same coordinate calculation as original
  int pass_350 = _15 | 8;
  float pass_358 = float((uint)pass_350);
  float pass_365 = (asfloat(const0.x) * pass_358) + asfloat(const0.z);
  float pass_366 = (asfloat(const0.y) * pass_25) + asfloat(const0.w);
  float pass_367 = floor(pass_365);
  float pass_368 = floor(pass_366);
  int pass_371 = int(pass_367);
  int pass_372 = int(pass_368);
  OutputImage[int2(pass_350, _16)] = SrcImage.Load(int3(pass_371, pass_372, 0));
  
  // Third pixel (_15, _16|8) - use exact same coordinate calculation as original
  int pass_683 = _16 | 8;
  float pass_691 = float((uint)pass_683);
  float pass_698 = (asfloat(const0.x) * pass_358) + asfloat(const0.z);
  float pass_699 = (asfloat(const0.y) * pass_691) + asfloat(const0.w);
  float pass_700 = floor(pass_698);
  float pass_701 = floor(pass_699);
  int pass_704 = int(pass_700);
  int pass_705 = int(pass_701);
  OutputImage[int2(pass_350, pass_683)] = SrcImage.Load(int3(pass_704, pass_705, 0));
  
  // Fourth pixel (_15, _16|8) - use exact same coordinate calculation as original  
  float pass_1029 = (asfloat(const0.x) * pass_24) + asfloat(const0.z);
  float pass_1030 = (asfloat(const0.y) * pass_691) + asfloat(const0.w);
  float pass_1031 = floor(pass_1029);
  float pass_1032 = floor(pass_1030);
  int pass_1035 = int(pass_1031);
  int pass_1036 = int(pass_1032);
  OutputImage[int2(_15, pass_683)] = SrcImage.Load(int3(pass_1035, pass_1036, 0));
  return;
#endif

  float _24 = float((uint)_15);
  float _25 = float((uint)_16);
  float _32 = (asfloat(const0.x) * _24) + asfloat(const0.z);
  float _33 = (asfloat(const0.y) * _25) + asfloat(const0.w);
  float _34 = floor(_32);
  float _35 = floor(_33);
  float _36 = _32 - _34;
  float _37 = _33 - _35;
  int _38 = int(_34);
  int _39 = int(_35);
  uint _40 = _39 + -1u;
  float4 _41 = SrcImage.Load(int3(_38, _40, 0));
  float _46 = max(0.0f, _41.y);
  float _48 = _46 * 0.0078125f;
  uint _49 = _38 + -1u;
  float4 _50 = SrcImage.Load(int3(_49, _39, 0));
  float _55 = max(0.0f, _50.y);
  float _57 = _55 * 0.0078125f;
  float4 _58 = SrcImage.Load(int3(_38, _39, 0));
  float _65 = max(0.0f, _58.y) * 0.0078125f;
  uint _66 = _38 + 1u;
  float4 _67 = SrcImage.Load(int3(_66, _40, 0));
  float _72 = max(0.0f, _67.y);
  float _74 = _72 * 0.0078125f;
  float4 _75 = SrcImage.Load(int3(_66, _39, 0));
  float _82 = max(0.0f, _75.y) * 0.0078125f;
  uint _83 = _38 + 2u;
  float4 _84 = SrcImage.Load(int3(_83, _39, 0));
  float _89 = max(0.0f, _84.y);
  float _91 = _89 * 0.0078125f;
  uint _92 = _39 + 1u;
  float4 _93 = SrcImage.Load(int3(_49, _92, 0));
  float _98 = max(0.0f, _93.y);
  float _100 = _98 * 0.0078125f;
  float4 _101 = SrcImage.Load(int3(_38, _92, 0));
  float _108 = max(0.0f, _101.y) * 0.0078125f;
  uint _109 = _39 + 2u;
  float4 _110 = SrcImage.Load(int3(_38, _109, 0));
  float _115 = max(0.0f, _110.y);
  float _117 = _115 * 0.0078125f;
  float4 _118 = SrcImage.Load(int3(_66, _92, 0));
  float _125 = max(0.0f, _118.y) * 0.0078125f;
  float4 _126 = SrcImage.Load(int3(_83, _92, 0));
  float _131 = max(0.0f, _126.y);
  float _133 = _131 * 0.0078125f;
  float4 _134 = SrcImage.Load(int3(_66, _109, 0));
  float _139 = max(0.0f, _134.y);
  float _141 = _139 * 0.0078125f;
  float _145 = min(min(min(min(_48, _57), _65), _82), _108);
  float _149 = max(max(max(max(_48, _57), _65), _82), _108);
  float _153 = min(min(min(min(_74, _65), _82), _91), _125);
  float _157 = max(max(max(max(_74, _65), _82), _91), _125);
  float _161 = min(min(min(min(_65, _100), _108), _125), _117);
  float _165 = max(max(max(max(_65, _100), _108), _125), _117);
  float _169 = min(min(min(min(_82, _108), _125), _133), _141);
  float _173 = max(max(max(max(_82, _108), _125), _133), _141);
  float _218 = asfloat(const1.x);
  float _223 = 1.0f - _36;
  float _224 = 1.0f - _37;
  float _234 = (_223 * _224) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _145) + _149))))));
  float _240 = (_224 * _36) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _153) + _157))))));
  float _246 = (_223 * _37) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _161) + _165))))));
  float _252 = (_36 * _37) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _169) + _173))))));
  float _253 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_145, (1.0f - _149)) * asfloat(((uint)(2129690299u - (int)(asint(_149))))))))) >> 1)) + 532432441u))) * _218) * _234;
  float _254 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_153, (1.0f - _157)) * asfloat(((uint)(2129690299u - (int)(asint(_157))))))))) >> 1)) + 532432441u))) * _218) * _240;
  float _255 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_161, (1.0f - _165)) * asfloat(((uint)(2129690299u - (int)(asint(_165))))))))) >> 1)) + 532432441u))) * _218) * _246;
  float _257 = (_254 + _234) + _255;
  float _258 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_169, (1.0f - _173)) * asfloat(((uint)(2129690299u - (int)(asint(_173))))))))) >> 1)) + 532432441u))) * _218) * _252;
  float _260 = (_253 + _240) + _258;
  float _262 = (_253 + _246) + _258;
  float _264 = (_254 + _252) + _255;
  float _272 = (((_264 + _257) + ((((_254 + _253) + _255) + _258) * 2.0f)) + _260) + _262;
  float _275 = asfloat(((uint)(2129764351u - (int)(asint(_272)))));
  float _278 = (2.0f - (_275 * _272)) * _275;
  float _298 = _278 * 0.0078125f;
  OutputImage[int2(_15, _16)] = float4((saturate(_298 * ((((((((_264 * max(0.0f, _118.x)) + (_253 * (max(0.0f, _50.x) + max(0.0f, _41.x)))) + (_257 * max(0.0f, _58.x))) + (_260 * max(0.0f, _75.x))) + (_262 * max(0.0f, _101.x))) + (_258 * (max(0.0f, _134.x) + max(0.0f, _126.x)))) + (_255 * (max(0.0f, _110.x) + max(0.0f, _93.x)))) + (_254 * (max(0.0f, _84.x) + max(0.0f, _67.x))))) * 128.0f), (saturate(_278 * ((((((((_257 * _65) + (((_55 + _46) * 0.0078125f) * _253)) + (_264 * _125)) + (_260 * _82)) + (_262 * _108)) + (_258 * ((_139 + _131) * 0.0078125f))) + (_255 * ((_115 + _98) * 0.0078125f))) + (_254 * ((_89 + _72) * 0.0078125f)))) * 128.0f), (saturate(_298 * ((((((((_264 * max(0.0f, _118.z)) + (_253 * (max(0.0f, _50.z) + max(0.0f, _41.z)))) + (_257 * max(0.0f, _58.z))) + (_260 * max(0.0f, _75.z))) + (_262 * max(0.0f, _101.z))) + (_258 * (max(0.0f, _134.z) + max(0.0f, _126.z)))) + (_255 * (max(0.0f, _110.z) + max(0.0f, _93.z)))) + (_254 * (max(0.0f, _84.z) + max(0.0f, _67.z))))) * 128.0f), 1.0f);
  int _350 = _15 | 8;
  float _358 = float((uint)_350);
  float _365 = (asfloat(const0.x) * _358) + asfloat(const0.z);
  float _366 = (asfloat(const0.y) * _25) + asfloat(const0.w);
  float _367 = floor(_365);
  float _368 = floor(_366);
  float _369 = _365 - _367;
  float _370 = _366 - _368;
  int _371 = int(_367);
  int _372 = int(_368);
  uint _373 = _372 + -1u;
  float4 _374 = SrcImage.Load(int3(_371, _373, 0));
  float _379 = max(0.0f, _374.y);
  float _381 = _379 * 0.0078125f;
  uint _382 = _371 + -1u;
  float4 _383 = SrcImage.Load(int3(_382, _372, 0));
  float _388 = max(0.0f, _383.y);
  float _390 = _388 * 0.0078125f;
  float4 _391 = SrcImage.Load(int3(_371, _372, 0));
  float _398 = max(0.0f, _391.y) * 0.0078125f;
  uint _399 = _371 + 1u;
  float4 _400 = SrcImage.Load(int3(_399, _373, 0));
  float _405 = max(0.0f, _400.y);
  float _407 = _405 * 0.0078125f;
  float4 _408 = SrcImage.Load(int3(_399, _372, 0));
  float _415 = max(0.0f, _408.y) * 0.0078125f;
  uint _416 = _371 + 2u;
  float4 _417 = SrcImage.Load(int3(_416, _372, 0));
  float _422 = max(0.0f, _417.y);
  float _424 = _422 * 0.0078125f;
  uint _425 = _372 + 1u;
  float4 _426 = SrcImage.Load(int3(_382, _425, 0));
  float _431 = max(0.0f, _426.y);
  float _433 = _431 * 0.0078125f;
  float4 _434 = SrcImage.Load(int3(_371, _425, 0));
  float _441 = max(0.0f, _434.y) * 0.0078125f;
  uint _442 = _372 + 2u;
  float4 _443 = SrcImage.Load(int3(_371, _442, 0));
  float _448 = max(0.0f, _443.y);
  float _450 = _448 * 0.0078125f;
  float4 _451 = SrcImage.Load(int3(_399, _425, 0));
  float _458 = max(0.0f, _451.y) * 0.0078125f;
  float4 _459 = SrcImage.Load(int3(_416, _425, 0));
  float _464 = max(0.0f, _459.y);
  float _466 = _464 * 0.0078125f;
  float4 _467 = SrcImage.Load(int3(_399, _442, 0));
  float _472 = max(0.0f, _467.y);
  float _474 = _472 * 0.0078125f;
  float _478 = min(min(min(min(_381, _390), _398), _415), _441);
  float _482 = max(max(max(max(_381, _390), _398), _415), _441);
  float _486 = min(min(min(min(_407, _398), _415), _424), _458);
  float _490 = max(max(max(max(_407, _398), _415), _424), _458);
  float _494 = min(min(min(min(_398, _433), _441), _458), _450);
  float _498 = max(max(max(max(_398, _433), _441), _458), _450);
  float _502 = min(min(min(min(_415, _441), _458), _466), _474);
  float _506 = max(max(max(max(_415, _441), _458), _466), _474);
  float _551 = asfloat(const1.x);
  float _556 = 1.0f - _369;
  float _557 = 1.0f - _370;
  float _567 = (_556 * _557) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _478) + _482))))));
  float _573 = (_557 * _369) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _486) + _490))))));
  float _579 = (_556 * _370) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _494) + _498))))));
  float _585 = (_369 * _370) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _502) + _506))))));
  float _586 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_478, (1.0f - _482)) * asfloat(((uint)(2129690299u - (int)(asint(_482))))))))) >> 1)) + 532432441u))) * _551) * _567;
  float _587 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_486, (1.0f - _490)) * asfloat(((uint)(2129690299u - (int)(asint(_490))))))))) >> 1)) + 532432441u))) * _551) * _573;
  float _588 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_494, (1.0f - _498)) * asfloat(((uint)(2129690299u - (int)(asint(_498))))))))) >> 1)) + 532432441u))) * _551) * _579;
  float _590 = (_587 + _567) + _588;
  float _591 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_502, (1.0f - _506)) * asfloat(((uint)(2129690299u - (int)(asint(_506))))))))) >> 1)) + 532432441u))) * _551) * _585;
  float _593 = (_586 + _573) + _591;
  float _595 = (_586 + _579) + _591;
  float _597 = (_587 + _585) + _588;
  float _605 = (((_597 + _590) + ((((_587 + _586) + _588) + _591) * 2.0f)) + _593) + _595;
  float _608 = asfloat(((uint)(2129764351u - (int)(asint(_605)))));
  float _611 = (2.0f - (_608 * _605)) * _608;
  float _631 = _611 * 0.0078125f;
  OutputImage[int2(_350, _16)] = float4((saturate(_631 * ((((((((_597 * max(0.0f, _451.x)) + (_586 * (max(0.0f, _383.x) + max(0.0f, _374.x)))) + (_590 * max(0.0f, _391.x))) + (_593 * max(0.0f, _408.x))) + (_595 * max(0.0f, _434.x))) + (_591 * (max(0.0f, _467.x) + max(0.0f, _459.x)))) + (_588 * (max(0.0f, _443.x) + max(0.0f, _426.x)))) + (_587 * (max(0.0f, _417.x) + max(0.0f, _400.x))))) * 128.0f), (saturate(_611 * ((((((((_590 * _398) + (((_388 + _379) * 0.0078125f) * _586)) + (_597 * _458)) + (_593 * _415)) + (_595 * _441)) + (_591 * ((_472 + _464) * 0.0078125f))) + (_588 * ((_448 + _431) * 0.0078125f))) + (_587 * ((_422 + _405) * 0.0078125f)))) * 128.0f), (saturate(_631 * ((((((((_597 * max(0.0f, _451.z)) + (_586 * (max(0.0f, _383.z) + max(0.0f, _374.z)))) + (_590 * max(0.0f, _391.z))) + (_593 * max(0.0f, _408.z))) + (_595 * max(0.0f, _434.z))) + (_591 * (max(0.0f, _467.z) + max(0.0f, _459.z)))) + (_588 * (max(0.0f, _443.z) + max(0.0f, _426.z)))) + (_587 * (max(0.0f, _417.z) + max(0.0f, _400.z))))) * 128.0f), 1.0f);
  int _683 = _16 | 8;
  float _691 = float((uint)_683);
  float _698 = (asfloat(const0.x) * _358) + asfloat(const0.z);
  float _699 = (asfloat(const0.y) * _691) + asfloat(const0.w);
  float _700 = floor(_698);
  float _701 = floor(_699);
  float _702 = _698 - _700;
  float _703 = _699 - _701;
  int _704 = int(_700);
  int _705 = int(_701);
  uint _706 = _705 + -1u;
  float4 _707 = SrcImage.Load(int3(_704, _706, 0));
  float _712 = max(0.0f, _707.y);
  float _714 = _712 * 0.0078125f;
  uint _715 = _704 + -1u;
  float4 _716 = SrcImage.Load(int3(_715, _705, 0));
  float _721 = max(0.0f, _716.y);
  float _723 = _721 * 0.0078125f;
  float4 _724 = SrcImage.Load(int3(_704, _705, 0));
  float _731 = max(0.0f, _724.y) * 0.0078125f;
  uint _732 = _704 + 1u;
  float4 _733 = SrcImage.Load(int3(_732, _706, 0));
  float _738 = max(0.0f, _733.y);
  float _740 = _738 * 0.0078125f;
  float4 _741 = SrcImage.Load(int3(_732, _705, 0));
  float _748 = max(0.0f, _741.y) * 0.0078125f;
  uint _749 = _704 + 2u;
  float4 _750 = SrcImage.Load(int3(_749, _705, 0));
  float _755 = max(0.0f, _750.y);
  float _757 = _755 * 0.0078125f;
  uint _758 = _705 + 1u;
  float4 _759 = SrcImage.Load(int3(_715, _758, 0));
  float _764 = max(0.0f, _759.y);
  float _766 = _764 * 0.0078125f;
  float4 _767 = SrcImage.Load(int3(_704, _758, 0));
  float _774 = max(0.0f, _767.y) * 0.0078125f;
  uint _775 = _705 + 2u;
  float4 _776 = SrcImage.Load(int3(_704, _775, 0));
  float _781 = max(0.0f, _776.y);
  float _783 = _781 * 0.0078125f;
  float4 _784 = SrcImage.Load(int3(_732, _758, 0));
  float _791 = max(0.0f, _784.y) * 0.0078125f;
  float4 _792 = SrcImage.Load(int3(_749, _758, 0));
  float _797 = max(0.0f, _792.y);
  float _799 = _797 * 0.0078125f;
  float4 _800 = SrcImage.Load(int3(_732, _775, 0));
  float _805 = max(0.0f, _800.y);
  float _807 = _805 * 0.0078125f;
  float _811 = min(min(min(min(_714, _723), _731), _748), _774);
  float _815 = max(max(max(max(_714, _723), _731), _748), _774);
  float _819 = min(min(min(min(_740, _731), _748), _757), _791);
  float _823 = max(max(max(max(_740, _731), _748), _757), _791);
  float _827 = min(min(min(min(_731, _766), _774), _791), _783);
  float _831 = max(max(max(max(_731, _766), _774), _791), _783);
  float _835 = min(min(min(min(_748, _774), _791), _799), _807);
  float _839 = max(max(max(max(_748, _774), _791), _799), _807);
  float _884 = asfloat(const1.x);
  float _889 = 1.0f - _702;
  float _890 = 1.0f - _703;
  float _900 = (_889 * _890) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _811) + _815))))));
  float _906 = (_890 * _702) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _819) + _823))))));
  float _912 = (_889 * _703) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _827) + _831))))));
  float _918 = (_702 * _703) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _835) + _839))))));
  float _919 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_811, (1.0f - _815)) * asfloat(((uint)(2129690299u - (int)(asint(_815))))))))) >> 1)) + 532432441u))) * _884) * _900;
  float _920 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_819, (1.0f - _823)) * asfloat(((uint)(2129690299u - (int)(asint(_823))))))))) >> 1)) + 532432441u))) * _884) * _906;
  float _921 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_827, (1.0f - _831)) * asfloat(((uint)(2129690299u - (int)(asint(_831))))))))) >> 1)) + 532432441u))) * _884) * _912;
  float _923 = (_920 + _900) + _921;
  float _924 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_835, (1.0f - _839)) * asfloat(((uint)(2129690299u - (int)(asint(_839))))))))) >> 1)) + 532432441u))) * _884) * _918;
  float _926 = (_919 + _906) + _924;
  float _928 = (_919 + _912) + _924;
  float _930 = (_920 + _918) + _921;
  float _938 = (((_930 + _923) + ((((_920 + _919) + _921) + _924) * 2.0f)) + _926) + _928;
  float _941 = asfloat(((uint)(2129764351u - (int)(asint(_938)))));
  float _944 = (2.0f - (_941 * _938)) * _941;
  float _964 = _944 * 0.0078125f;
  OutputImage[int2(_350, _683)] = float4((saturate(_964 * ((((((((_930 * max(0.0f, _784.x)) + (_919 * (max(0.0f, _716.x) + max(0.0f, _707.x)))) + (_923 * max(0.0f, _724.x))) + (_926 * max(0.0f, _741.x))) + (_928 * max(0.0f, _767.x))) + (_924 * (max(0.0f, _800.x) + max(0.0f, _792.x)))) + (_921 * (max(0.0f, _776.x) + max(0.0f, _759.x)))) + (_920 * (max(0.0f, _750.x) + max(0.0f, _733.x))))) * 128.0f), (saturate(_944 * ((((((((_923 * _731) + (((_721 + _712) * 0.0078125f) * _919)) + (_930 * _791)) + (_926 * _748)) + (_928 * _774)) + (_924 * ((_805 + _797) * 0.0078125f))) + (_921 * ((_781 + _764) * 0.0078125f))) + (_920 * ((_755 + _738) * 0.0078125f)))) * 128.0f), (saturate(_964 * ((((((((_930 * max(0.0f, _784.z)) + (_919 * (max(0.0f, _716.z) + max(0.0f, _707.z)))) + (_923 * max(0.0f, _724.z))) + (_926 * max(0.0f, _741.z))) + (_928 * max(0.0f, _767.z))) + (_924 * (max(0.0f, _800.z) + max(0.0f, _792.z)))) + (_921 * (max(0.0f, _776.z) + max(0.0f, _759.z)))) + (_920 * (max(0.0f, _750.z) + max(0.0f, _733.z))))) * 128.0f), 1.0f);
  float _1029 = (asfloat(const0.x) * _24) + asfloat(const0.z);
  float _1030 = (asfloat(const0.y) * _691) + asfloat(const0.w);
  float _1031 = floor(_1029);
  float _1032 = floor(_1030);
  float _1033 = _1029 - _1031;
  float _1034 = _1030 - _1032;
  int _1035 = int(_1031);
  int _1036 = int(_1032);
  uint _1037 = _1036 + -1u;
  float4 _1038 = SrcImage.Load(int3(_1035, _1037, 0));
  float _1043 = max(0.0f, _1038.y);
  float _1045 = _1043 * 0.0078125f;
  uint _1046 = _1035 + -1u;
  float4 _1047 = SrcImage.Load(int3(_1046, _1036, 0));
  float _1052 = max(0.0f, _1047.y);
  float _1054 = _1052 * 0.0078125f;
  float4 _1055 = SrcImage.Load(int3(_1035, _1036, 0));
  float _1062 = max(0.0f, _1055.y) * 0.0078125f;
  uint _1063 = _1035 + 1u;
  float4 _1064 = SrcImage.Load(int3(_1063, _1037, 0));
  float _1069 = max(0.0f, _1064.y);
  float _1071 = _1069 * 0.0078125f;
  float4 _1072 = SrcImage.Load(int3(_1063, _1036, 0));
  float _1079 = max(0.0f, _1072.y) * 0.0078125f;
  uint _1080 = _1035 + 2u;
  float4 _1081 = SrcImage.Load(int3(_1080, _1036, 0));
  float _1086 = max(0.0f, _1081.y);
  float _1088 = _1086 * 0.0078125f;
  uint _1089 = _1036 + 1u;
  float4 _1090 = SrcImage.Load(int3(_1046, _1089, 0));
  float _1095 = max(0.0f, _1090.y);
  float _1097 = _1095 * 0.0078125f;
  float4 _1098 = SrcImage.Load(int3(_1035, _1089, 0));
  float _1105 = max(0.0f, _1098.y) * 0.0078125f;
  uint _1106 = _1036 + 2u;
  float4 _1107 = SrcImage.Load(int3(_1035, _1106, 0));
  float _1112 = max(0.0f, _1107.y);
  float _1114 = _1112 * 0.0078125f;
  float4 _1115 = SrcImage.Load(int3(_1063, _1089, 0));
  float _1122 = max(0.0f, _1115.y) * 0.0078125f;
  float4 _1123 = SrcImage.Load(int3(_1080, _1089, 0));
  float _1128 = max(0.0f, _1123.y);
  float _1130 = _1128 * 0.0078125f;
  float4 _1131 = SrcImage.Load(int3(_1063, _1106, 0));
  float _1136 = max(0.0f, _1131.y);
  float _1138 = _1136 * 0.0078125f;
  float _1142 = min(min(min(min(_1045, _1054), _1062), _1079), _1105);
  float _1146 = max(max(max(max(_1045, _1054), _1062), _1079), _1105);
  float _1150 = min(min(min(min(_1071, _1062), _1079), _1088), _1122);
  float _1154 = max(max(max(max(_1071, _1062), _1079), _1088), _1122);
  float _1158 = min(min(min(min(_1062, _1097), _1105), _1122), _1114);
  float _1162 = max(max(max(max(_1062, _1097), _1105), _1122), _1114);
  float _1166 = min(min(min(min(_1079, _1105), _1122), _1130), _1138);
  float _1170 = max(max(max(max(_1079, _1105), _1122), _1130), _1138);
  float _1215 = asfloat(const1.x);
  float _1220 = 1.0f - _1033;
  float _1221 = 1.0f - _1034;
  float _1231 = (_1220 * _1221) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _1142) + _1146))))));
  float _1237 = (_1221 * _1033) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _1150) + _1154))))));
  float _1243 = (_1220 * _1034) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _1158) + _1162))))));
  float _1249 = (_1033 * _1034) * asfloat(((uint)(2129690299u - (int)(asint(((0.03125f - _1166) + _1170))))));
  float _1250 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_1142, (1.0f - _1146)) * asfloat(((uint)(2129690299u - (int)(asint(_1146))))))))) >> 1)) + 532432441u))) * _1215) * _1231;
  float _1251 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_1150, (1.0f - _1154)) * asfloat(((uint)(2129690299u - (int)(asint(_1154))))))))) >> 1)) + 532432441u))) * _1215) * _1237;
  float _1252 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_1158, (1.0f - _1162)) * asfloat(((uint)(2129690299u - (int)(asint(_1162))))))))) >> 1)) + 532432441u))) * _1215) * _1243;
  float _1254 = (_1251 + _1231) + _1252;
  float _1255 = (asfloat(((uint)(((int)((uint)((int)(asint(saturate(min(_1166, (1.0f - _1170)) * asfloat(((uint)(2129690299u - (int)(asint(_1170))))))))) >> 1)) + 532432441u))) * _1215) * _1249;
  float _1257 = (_1250 + _1237) + _1255;
  float _1259 = (_1250 + _1243) + _1255;
  float _1261 = (_1251 + _1249) + _1252;
  float _1269 = (((_1261 + _1254) + ((((_1251 + _1250) + _1252) + _1255) * 2.0f)) + _1257) + _1259;
  float _1272 = asfloat(((uint)(2129764351u - (int)(asint(_1269)))));
  float _1275 = (2.0f - (_1272 * _1269)) * _1272;
  float _1295 = _1275 * 0.0078125f;
  OutputImage[int2(_15, _683)] = float4((saturate(_1295 * ((((((((_1261 * max(0.0f, _1115.x)) + (_1250 * (max(0.0f, _1047.x) + max(0.0f, _1038.x)))) + (_1254 * max(0.0f, _1055.x))) + (_1257 * max(0.0f, _1072.x))) + (_1259 * max(0.0f, _1098.x))) + (_1255 * (max(0.0f, _1131.x) + max(0.0f, _1123.x)))) + (_1252 * (max(0.0f, _1107.x) + max(0.0f, _1090.x)))) + (_1251 * (max(0.0f, _1081.x) + max(0.0f, _1064.x))))) * 128.0f), (saturate(_1275 * ((((((((_1254 * _1062) + (((_1052 + _1043) * 0.0078125f) * _1250)) + (_1261 * _1122)) + (_1257 * _1079)) + (_1259 * _1105)) + (_1255 * ((_1136 + _1128) * 0.0078125f))) + (_1252 * ((_1112 + _1095) * 0.0078125f))) + (_1251 * ((_1086 + _1069) * 0.0078125f)))) * 128.0f), (saturate(_1295 * ((((((((_1261 * max(0.0f, _1115.z)) + (_1250 * (max(0.0f, _1047.z) + max(0.0f, _1038.z)))) + (_1254 * max(0.0f, _1055.z))) + (_1257 * max(0.0f, _1072.z))) + (_1259 * max(0.0f, _1098.z))) + (_1255 * (max(0.0f, _1131.z) + max(0.0f, _1123.z)))) + (_1252 * (max(0.0f, _1107.z) + max(0.0f, _1090.z)))) + (_1251 * (max(0.0f, _1081.z) + max(0.0f, _1064.z))))) * 128.0f), 1.0f);
}
