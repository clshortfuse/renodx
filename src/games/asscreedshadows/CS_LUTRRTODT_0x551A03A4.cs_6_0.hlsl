#include "./common.hlsl"

RWTexture3D<float4> u0_space5 : register(u0, space5);

cbuffer cb0_space5 : register(b0, space5) {
  float cb0_space5_000x : packoffset(c000.x);
  float cb0_space5_000y : packoffset(c000.y);
  float cb0_space5_000z : packoffset(c000.z);
  float cb0_space5_000w : packoffset(c000.w);
  float cb0_space5_001x : packoffset(c001.x);
  float cb0_space5_002x : packoffset(c002.x);
  float cb0_space5_002y : packoffset(c002.y);
  float cb0_space5_002z : packoffset(c002.z);
  float cb0_space5_002w : packoffset(c002.w);
  uint cb0_space5_003x : packoffset(c003.x);
  uint cb0_space5_003y : packoffset(c003.y);
  float cb0_space5_003z : packoffset(c003.z);
  float cb0_space5_003w : packoffset(c003.w);
};

[numthreads(16, 16, 1)]
void main(uint3 SV_DispatchThreadID: SV_DispatchThreadID,
          uint3 SV_GroupID: SV_GroupID,
          uint3 SV_GroupThreadID: SV_GroupThreadID,
          uint SV_GroupIndex: SV_GroupIndex) {
  float _6 = float((uint)SV_DispatchThreadID.x);
  float _7 = float((uint)SV_DispatchThreadID.y);
  float _8 = float((uint)SV_DispatchThreadID.z);
  float _9 = _6 * 0.6451612710952759f;
  float _10 = _9 + -12.473931312561035f;
  float _11 = exp2(_10);
  float _12 = _7 * 0.6451612710952759f;
  float _13 = _12 + -12.473931312561035f;
  float _14 = exp2(_13);
  float _15 = _8 * 0.6451612710952759f;
  float _16 = _15 + -12.473931312561035f;
  float _17 = exp2(_16);

  float exposure = 32.f;  // cb0_space5_003z
  float _20 = exposure * _11;
  float _21 = exposure * _14;
  float _22 = exposure * _17;

#if 1  // apply SDR tonemapper
  float3 untonemapped = float3(_20, _21, _22);
  const float diffuse_white_nits = cb0_space5_003z * (203.f / 90.5f);  // default exposure was 90.5f, offset so 203 paper white at exposure 0.0
  const float peak_nits = cb0_space5_003w;

  float3 tonemapped = ApplyBlendedToneMapEncodePQ(untonemapped, peak_nits, diffuse_white_nits);  // Vanilla SDR + Frostbite
  // float3 tonemapped = ApplyBlendedACESToneMapEncodePQ(untonemapped, peak_nits, diffuse_white_nits);  // ACES
  u0_space5[uint3(SV_DispatchThreadID.rgb)] = float4(tonemapped, 1.f);
  return;
#endif

  float _359;
  float _360;
  float _361;
  float _455;
  float _456;
  float _457;
  switch ((uint)(cb0_space5_003y)) {
    case 2: {
      float _26 = _20 * 0.009999999776482582f;
      float _27 = abs(_26);
      float _29 = cb0_space5_003w * 0.009999999776482582f;
      float _37 = _29 - cb0_space5_000y;
      float _38 = _37 * cb0_space5_000z;
      float _39 = _38 / cb0_space5_000x;
      float _40 = _27 - cb0_space5_000y;
      float _41 = _40 * cb0_space5_000x;
      float _42 = _41 + cb0_space5_000y;
      bool _43 = (cb0_space5_000y > 9.999999747378752e-06f);
      float _44 = _27 / cb0_space5_000y;
      float _45 = abs(_44);
      float _46 = log2(_45);
      float _47 = _46 * cb0_space5_000w;
      float _48 = exp2(_47);
      float _49 = _48 * cb0_space5_000y;
      float _50 = _49 + cb0_space5_001x;
      float _51 = select(_43, _50, cb0_space5_001x);
      float _52 = _39 * cb0_space5_000x;
      float _53 = _52 + cb0_space5_000y;
      float _54 = cb0_space5_000x * _29;
      float _55 = _29 - _53;
      float _56 = _54 / _55;
      float _57 = _40 - _39;
      float _58 = _56 * _57;
      float _59 = _58 / _29;
      float _60 = _59 + 1.0f;
      float _61 = _55 / _60;
      float _62 = _29 - _61;
      float _63 = saturate(_44);
      float _64 = _63 * _63;
      float _65 = _63 * 2.0f;
      float _66 = 3.0f - _65;
      float _67 = _64 * _66;
      float _68 = 1.0f - _67;
      float _69 = _39 + cb0_space5_000y;
      bool _70 = (_27 > _69);
      float _71 = select(_70, 1.0f, 0.0f);
      float _72 = _67 - _71;
      float _73 = _68 * _51;
      float _74 = _72 * _42;
      float _75 = _62 * _71;
      float _76 = _74 + _75;
      float _77 = _76 + _73;
      float _78 = _77 * 100.0f;
      float _79 = _21 * 0.009999999776482582f;
      float _80 = abs(_79);
      float _81 = _80 - cb0_space5_000y;
      float _82 = _81 * cb0_space5_000x;
      float _83 = _82 + cb0_space5_000y;
      float _84 = _80 / cb0_space5_000y;
      float _85 = abs(_84);
      float _86 = log2(_85);
      float _87 = _86 * cb0_space5_000w;
      float _88 = exp2(_87);
      float _89 = _88 * cb0_space5_000y;
      float _90 = _89 + cb0_space5_001x;
      float _91 = select(_43, _90, cb0_space5_001x);
      float _92 = _81 - _39;
      float _93 = _56 * _92;
      float _94 = _93 / _29;
      float _95 = _94 + 1.0f;
      float _96 = _55 / _95;
      float _97 = _29 - _96;
      float _98 = saturate(_84);
      float _99 = _98 * _98;
      float _100 = _98 * 2.0f;
      float _101 = 3.0f - _100;
      float _102 = _99 * _101;
      float _103 = 1.0f - _102;
      bool _104 = (_80 > _69);
      float _105 = select(_104, 1.0f, 0.0f);
      float _106 = _102 - _105;
      float _107 = _103 * _91;
      float _108 = _106 * _83;
      float _109 = _97 * _105;
      float _110 = _108 + _109;
      float _111 = _110 + _107;
      float _112 = _111 * 100.0f;
      float _113 = _22 * 0.009999999776482582f;
      float _114 = abs(_113);
      float _115 = _114 - cb0_space5_000y;
      float _116 = _115 * cb0_space5_000x;
      float _117 = _116 + cb0_space5_000y;
      float _118 = _114 / cb0_space5_000y;
      float _119 = abs(_118);
      float _120 = log2(_119);
      float _121 = _120 * cb0_space5_000w;
      float _122 = exp2(_121);
      float _123 = _122 * cb0_space5_000y;
      float _124 = _123 + cb0_space5_001x;
      float _125 = select(_43, _124, cb0_space5_001x);
      float _126 = _115 - _39;
      float _127 = _56 * _126;
      float _128 = _127 / _29;
      float _129 = _128 + 1.0f;
      float _130 = _55 / _129;
      float _131 = _29 - _130;
      float _132 = saturate(_118);
      float _133 = _132 * _132;
      float _134 = _132 * 2.0f;
      float _135 = 3.0f - _134;
      float _136 = _133 * _135;
      float _137 = 1.0f - _136;
      bool _138 = (_114 > _69);
      float _139 = select(_138, 1.0f, 0.0f);
      float _140 = _136 - _139;
      float _141 = _137 * _125;
      float _142 = _140 * _117;
      float _143 = _131 * _139;
      float _144 = _142 + _143;
      float _145 = _144 + _141;
      float _146 = _145 * 100.0f;
      _359 = _78;
      _360 = _112;
      _361 = _146;
      break;
    }
    case 3: {
      float _149 = abs(cb0_space5_003w);
      float _152 = abs(cb0_space5_002x);
      float _156 = _20 / _149;
      float _157 = abs(_156);
      float _158 = log2(_152);
      float _159 = _158 * cb0_space5_002z;
      float _160 = exp2(_159);
      float _161 = cb0_space5_002w * cb0_space5_002z;
      float _162 = _161 * _158;
      float _163 = exp2(_162);
      float _164 = log2(_149);
      float _165 = _164 * cb0_space5_002z;
      float _166 = exp2(_165);
      float _167 = _161 * _164;
      float _168 = exp2(_167);
      float _169 = _168 - _163;
      float _170 = _169 * cb0_space5_002y;
      float _171 = _166 * cb0_space5_002y;
      float _172 = _171 - _160;
      float _173 = _172 / _170;
      float _174 = _168 * _163;
      float _175 = _163 * cb0_space5_002y;
      float _176 = _175 * _166;
      float _177 = _174 - _176;
      float _178 = _177 / _170;
      float _179 = log2(_157);
      float _180 = _179 * cb0_space5_002z;
      float _181 = exp2(_180);
      float _182 = log2(_181);
      float _183 = _182 * cb0_space5_002w;
      float _184 = exp2(_183);
      float _185 = _184 * _173;
      float _186 = _185 + _178;
      float _187 = _181 / _186;
      float _188 = cb0_space5_003w * _187;
      float _189 = _21 / _149;
      float _190 = abs(_189);
      float _191 = log2(_190);
      float _192 = _191 * cb0_space5_002z;
      float _193 = exp2(_192);
      float _194 = log2(_193);
      float _195 = _194 * cb0_space5_002w;
      float _196 = exp2(_195);
      float _197 = _196 * _173;
      float _198 = _197 + _178;
      float _199 = _193 / _198;
      float _200 = cb0_space5_003w * _199;
      float _201 = _22 / _149;
      float _202 = abs(_201);
      float _203 = log2(_202);
      float _204 = _203 * cb0_space5_002z;
      float _205 = exp2(_204);
      float _206 = log2(_205);
      float _207 = _206 * cb0_space5_002w;
      float _208 = exp2(_207);
      float _209 = _208 * _173;
      float _210 = _209 + _178;
      float _211 = _205 / _210;
      float _212 = cb0_space5_003w * _211;
      _359 = _188;
      _360 = _200;
      _361 = _212;
      break;
    }
    case 4: {
      float _215 = _20 / cb0_space5_003w;
      float _216 = _21 / cb0_space5_003w;
      float _217 = _22 / cb0_space5_003w;
      float _218 = _215 + 1.0f;
      float _219 = _216 + 1.0f;
      float _220 = _217 + 1.0f;
      float _221 = _20 / _218;
      float _222 = _21 / _219;
      float _223 = _22 / _220;
      _359 = _221;
      _360 = _222;
      _361 = _223;
      break;
    }
    case 5: {
      _359 = _20;
      _360 = _21;
      _361 = _22;
      break;
    }
    case 6: {
      float _226 = min(_20, cb0_space5_003w);
      float _227 = min(_21, cb0_space5_003w);
      float _228 = min(_22, cb0_space5_003w);
      _359 = _226;
      _360 = _227;
      _361 = _228;
      break;
    }
    case 1: {
      float _230 = _20 * 0.009999999776482582f;
      float _231 = abs(_230);
      float _233 = cb0_space5_003w * 0.009999999776482582f;
      float _241 = _233 - cb0_space5_000y;
      float _242 = _241 * cb0_space5_000z;
      float _243 = _242 / cb0_space5_000x;
      float _244 = _231 - cb0_space5_000y;
      float _245 = _244 * cb0_space5_000x;
      float _246 = _245 + cb0_space5_000y;
      bool _247 = (cb0_space5_000y > 9.999999747378752e-06f);
      float _248 = _231 / cb0_space5_000y;
      float _249 = abs(_248);
      float _250 = log2(_249);
      float _251 = _250 * cb0_space5_000w;
      float _252 = exp2(_251);
      float _253 = _252 * cb0_space5_000y;
      float _254 = _253 + cb0_space5_001x;
      float _255 = select(_247, _254, cb0_space5_001x);
      float _256 = _243 * cb0_space5_000x;
      float _257 = _256 + cb0_space5_000y;
      float _258 = cb0_space5_000x * _233;
      float _259 = _233 - _257;
      float _260 = _258 / _259;
      float _261 = _244 - _243;
      float _262 = _261 * _260;
      float _263 = -0.0f - _262;
      float _264 = _263 / _233;
      float _265 = _264 * 1.4426950216293335f;
      float _266 = exp2(_265);
      float _267 = _266 * _259;
      float _268 = _233 - _267;
      float _269 = saturate(_248);
      float _270 = _269 * _269;
      float _271 = _269 * 2.0f;
      float _272 = 3.0f - _271;
      float _273 = _270 * _272;
      float _274 = 1.0f - _273;
      float _275 = _243 + cb0_space5_000y;
      bool _276 = (_231 > _275);
      float _277 = select(_276, 1.0f, 0.0f);
      float _278 = _273 - _277;
      float _279 = _274 * _255;
      float _280 = _278 * _246;
      float _281 = _268 * _277;
      float _282 = _280 + _281;
      float _283 = _282 + _279;
      float _284 = _283 * 100.0f;
      float _285 = _21 * 0.009999999776482582f;
      float _286 = abs(_285);
      float _287 = _286 - cb0_space5_000y;
      float _288 = _287 * cb0_space5_000x;
      float _289 = _288 + cb0_space5_000y;
      float _290 = _286 / cb0_space5_000y;
      float _291 = abs(_290);
      float _292 = log2(_291);
      float _293 = _292 * cb0_space5_000w;
      float _294 = exp2(_293);
      float _295 = _294 * cb0_space5_000y;
      float _296 = _295 + cb0_space5_001x;
      float _297 = select(_247, _296, cb0_space5_001x);
      float _298 = _287 - _243;
      float _299 = _298 * _260;
      float _300 = -0.0f - _299;
      float _301 = _300 / _233;
      float _302 = _301 * 1.4426950216293335f;
      float _303 = exp2(_302);
      float _304 = _303 * _259;
      float _305 = _233 - _304;
      float _306 = saturate(_290);
      float _307 = _306 * _306;
      float _308 = _306 * 2.0f;
      float _309 = 3.0f - _308;
      float _310 = _307 * _309;
      float _311 = 1.0f - _310;
      bool _312 = (_286 > _275);
      float _313 = select(_312, 1.0f, 0.0f);
      float _314 = _310 - _313;
      float _315 = _311 * _297;
      float _316 = _314 * _289;
      float _317 = _305 * _313;
      float _318 = _316 + _317;
      float _319 = _318 + _315;
      float _320 = _319 * 100.0f;
      float _321 = _22 * 0.009999999776482582f;
      float _322 = abs(_321);
      float _323 = _322 - cb0_space5_000y;
      float _324 = _323 * cb0_space5_000x;
      float _325 = _324 + cb0_space5_000y;
      float _326 = _322 / cb0_space5_000y;
      float _327 = abs(_326);
      float _328 = log2(_327);
      float _329 = _328 * cb0_space5_000w;
      float _330 = exp2(_329);
      float _331 = _330 * cb0_space5_000y;
      float _332 = _331 + cb0_space5_001x;
      float _333 = select(_247, _332, cb0_space5_001x);
      float _334 = _323 - _243;
      float _335 = _334 * _260;
      float _336 = -0.0f - _335;
      float _337 = _336 / _233;
      float _338 = _337 * 1.4426950216293335f;
      float _339 = exp2(_338);
      float _340 = _339 * _259;
      float _341 = _233 - _340;
      float _342 = saturate(_326);
      float _343 = _342 * _342;
      float _344 = _342 * 2.0f;
      float _345 = 3.0f - _344;
      float _346 = _343 * _345;
      float _347 = 1.0f - _346;
      bool _348 = (_322 > _275);
      float _349 = select(_348, 1.0f, 0.0f);
      float _350 = _346 - _349;
      float _351 = _347 * _333;
      float _352 = _350 * _325;
      float _353 = _341 * _349;
      float _354 = _352 + _353;
      float _355 = _354 + _351;
      float _356 = _355 * 100.0f;
      _359 = _284;
      _360 = _320;
      _361 = _356;
      break;
    }
    default: {
      _359 = 0.0f;
      _360 = 0.0f;
      _361 = 0.0f;
      break;
    }
  }
  bool _363 = ((uint)(cb0_space5_003x) == 0);
  if (!_363) {
    float _365 = _359 * 1.0258245468139648f;
    float _366 = mad(_360, -0.020053241401910782f, _365);
    float _367 = mad(_361, -0.005771517753601074f, _366);
    float _368 = _359 * -0.0022343560121953487f;
    float _369 = mad(_360, 1.0045864582061768f, _368);
    float _370 = mad(_361, -0.002352168783545494f, _369);
    float _371 = _359 * -0.005013367626816034f;
    float _372 = mad(_360, -0.02529006451368332f, _371);
    float _373 = mad(_361, 1.0303034782409668f, _372);
    float _374 = _367 * 9.999999747378752e-05f;
    float _375 = abs(_374);
    float _376 = log2(_375);
    float _377 = _376 * 0.1593017578125f;
    float _378 = exp2(_377);
    float _379 = _378 * 18.8515625f;
    float _380 = _379 + 0.8359375f;
    float _381 = _378 * 18.6875f;
    float _382 = _381 + 1.0f;
    float _383 = _380 / _382;
    float _384 = log2(_383);
    float _385 = _384 * 78.84375f;
    float _386 = exp2(_385);
    float _387 = _370 * 9.999999747378752e-05f;
    float _388 = abs(_387);
    float _389 = log2(_388);
    float _390 = _389 * 0.1593017578125f;
    float _391 = exp2(_390);
    float _392 = _391 * 18.8515625f;
    float _393 = _392 + 0.8359375f;
    float _394 = _391 * 18.6875f;
    float _395 = _394 + 1.0f;
    float _396 = _393 / _395;
    float _397 = log2(_396);
    float _398 = _397 * 78.84375f;
    float _399 = exp2(_398);
    float _400 = _373 * 9.999999747378752e-05f;
    float _401 = abs(_400);
    float _402 = log2(_401);
    float _403 = _402 * 0.1593017578125f;
    float _404 = exp2(_403);
    float _405 = _404 * 18.8515625f;
    float _406 = _405 + 0.8359375f;
    float _407 = _404 * 18.6875f;
    float _408 = _407 + 1.0f;
    float _409 = _406 / _408;
    float _410 = log2(_409);
    float _411 = _410 * 78.84375f;
    float _412 = exp2(_411);
    _455 = _386;
    _456 = _399;
    _457 = _412;
  } else {
    float _414 = _359 * 1.7050509452819824f;
    float _415 = mad(_360, -0.6217920184135437f, _414);
    float _416 = mad(_361, -0.08325883746147156f, _415);
    float _417 = _359 * -0.13025641441345215f;
    float _418 = mad(_360, 1.1408041715621948f, _417);
    float _419 = mad(_361, -0.010548345744609833f, _418);
    float _420 = _359 * -0.024003375321626663f;
    float _421 = mad(_360, -0.12896890938282013f, _420);
    float _422 = mad(_361, 1.1529725790023804f, _421);
    float _424 = _416 / cb0_space5_003w;
    float _425 = _419 / cb0_space5_003w;
    float _426 = _422 / cb0_space5_003w;
    float _427 = saturate(_424);
    float _428 = saturate(_425);
    float _429 = saturate(_426);
    bool _430 = (_427 <= 0.0031308000907301903f);
    bool _431 = (_428 <= 0.0031308000907301903f);
    bool _432 = (_429 <= 0.0031308000907301903f);
    float _433 = _427 * 12.920000076293945f;
    float _434 = _428 * 12.920000076293945f;
    float _435 = _429 * 12.920000076293945f;
    float _436 = log2(_427);
    float _437 = log2(_428);
    float _438 = log2(_429);
    float _439 = _436 * 0.4166666567325592f;
    float _440 = _437 * 0.4166666567325592f;
    float _441 = _438 * 0.4166666567325592f;
    float _442 = exp2(_439);
    float _443 = exp2(_440);
    float _444 = exp2(_441);
    float _445 = _442 * 1.0549999475479126f;
    float _446 = _443 * 1.0549999475479126f;
    float _447 = _444 * 1.0549999475479126f;
    float _448 = _445 + -0.054999999701976776f;
    float _449 = _446 + -0.054999999701976776f;
    float _450 = _447 + -0.054999999701976776f;
    float _451 = select(_430, _433, _448);
    float _452 = select(_431, _434, _449);
    float _453 = select(_432, _435, _450);
    _455 = _451;
    _456 = _452;
    _457 = _453;
  }
  u0_space5[int3((uint)(SV_DispatchThreadID.x), (uint)(SV_DispatchThreadID.y),
                 (uint)(SV_DispatchThreadID.z))] =
      float4(_455, _456, _457, 1.0f);
}
