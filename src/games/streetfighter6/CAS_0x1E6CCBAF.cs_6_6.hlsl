#include "./lilium_cas.hlsl"

Texture2D<float4> SrcImage : register(t0);

RWTexture2D<float4> OutputImage : register(u0);

cbuffer cbCAS : register(b0) {
  uint4 const0 : packoffset(c000.x);
  uint4 const1 : packoffset(c001.x);
};

[numthreads(64, 1, 1)]
void main(
    uint3 SV_DispatchThreadID: SV_DispatchThreadID,  // Dispatch * numthreads
    uint3 SV_GroupID: SV_GroupID,                    // Which group this thread belongs to
    uint3 SV_GroupThreadID: SV_GroupThreadID,        // Value is 0-63 because of numthreads(64, 1, 1) (64 * 1 * 1)
    uint SV_GroupIndex: SV_GroupIndex) {
  int _8 = (uint)(SV_GroupThreadID.x) >> 1;  // 1 = 0x000000001 = 32 bit (All 0 except 1st bit). Operation halves the value?
  int _9 = _8 & 7;
  int _10 = (uint)(SV_GroupThreadID.x) >> 3;
  int _11 = (uint)(SV_GroupThreadID.x) & 1;
  int _12 = _10 & 6;
  int _13 = _12 | _11;
  uint _14 = (uint)(SV_GroupID.x) << 4;
  uint _15 = (uint)(SV_GroupID.y) << 4;
  int _16 = _9 | _14;
  int _17 = _13 | _15;
  uint _20 = _17 + -1u;  // Center pixel is _17, so this is the pixel left of it

  // Fetching the 3x3 neighborhood of pixels
  //    b               b
  //  d e f * 0.5  +  d e f * 0.5
  //    h               h
  /* float4 _22 = SrcImage.Load(int3(_16, _20, 0)); // b

  float _26 = max(0.0f, _22.x);
  float _27 = max(0.0f, _22.y);
  float _28 = max(0.0f, _22.z);
  float _29 = _27 * 0.0078125f;
  uint _30 = _16 + -1u;
  float4 _31 = SrcImage.Load(int3(_30, _17, 0)); // d

  float _35 = max(0.0f, _31.x);
  float _36 = max(0.0f, _31.y);
  float _37 = max(0.0f, _31.z);
  float _38 = _36 * 0.0078125f;
  float4 _39 = SrcImage.Load(int3(_16, _17, 0)); // e

  float _43 = max(0.0f, _39.x);
  float _44 = max(0.0f, _39.y);
  float _45 = max(0.0f, _39.z);
  float _46 = _44 * 0.0078125f;
  int _47 = _16 + 1;
  float4 _48 = SrcImage.Load(int3(_47, _17, 0)); // f

  float _52 = max(0.0f, _48.x);
  float _53 = max(0.0f, _48.y);
  float _54 = max(0.0f, _48.z);
  float _55 = _53 * 0.0078125f;
  int _56 = _17 + 1;
  float4 _57 = SrcImage.Load(int3(_16, _56, 0)); // h

  float _61 = max(0.0f, _57.x);
  float _62 = max(0.0f, _57.y);
  float _63 = max(0.0f, _57.z);
  float _64 = _62 * 0.0078125f;
  float _65 = min(_38, _46);
  float _66 = min(_65, _55);
  float _67 = min(_66, _29);
  float _68 = min(_67, _64);
  float _69 = max(_38, _46);
  float _70 = max(_69, _55);
  float _71 = max(_70, _29);
  float _72 = max(_71, _64);
  int _73 = asint(_72);
  uint _74 = 2129690299u - _73;
  float _75 = asfloat(_74);
  float _76 = 1.0f - _72;
  float _77 = min(_68, _76);
  float _78 = _75 * _77;
  float _79 = saturate(_78);
  int _80 = asint(_79);
  int _81 = (uint)(_80) >> 1;
  uint _82 = _81 + 532432441u;
  float _83 = asfloat(_82);
  float _84 = asfloat((uint)(const1.x));
  float _85 = _83 * _84;
  float _86 = _85 * 4.0f;
  float _87 = _86 + 1.0f;
  int _88 = asint(_87);
  uint _89 = 2129764351u - _88;
  float _90 = asfloat(_89);
  float _91 = _90 * _87;
  float _92 = 2.0f - _91;
  float _93 = _92 * _90;
  float _94 = _35 + _26;
  float _95 = _94 + _52;
  float _96 = _95 + _61;
  float _97 = _85 * _96;
  float _98 = _97 + _43;
  float _99 = _98 * 0.0078125f;
  float _100 = _99 * _93;
  float _101 = saturate(_100);
  float _102 = _36 + _27;
  float _103 = _102 + _53;
  float _104 = _103 + _62;
  float _105 = _104 * 0.0078125f;
  float _106 = _105 * _85;
  float _107 = _106 + _46;
  float _108 = _93 * _107;
  float _109 = saturate(_108);
  float _110 = _37 + _28;
  float _111 = _110 + _54;
  float _112 = _111 + _63;
  float _113 = _85 * _112;
  float _114 = _113 + _45;
  float _115 = _114 * 0.0078125f;
  float _116 = _115 * _93;
  float _117 = saturate(_116);
  float _118 = _101 * 128.0f;
  float _119 = _109 * 128.0f;
  float _120 = _117 * 128.0f;
  OutputImage[int2(_16, _17)] = float4(_118, _119, _120, 1.0f);
 */
  OutputImage[int2(_16, _17)] = float4(ApplyCAS(SrcImage, int3(_16, _17, 0)), 1.0f);

  int _122 = _16 | 8;
  /* float4 _126 = SrcImage.Load(int3(_122, _20, 0));
  float _130 = max(0.0f, _126.x);
  float _131 = max(0.0f, _126.y);
  float _132 = max(0.0f, _126.z);
  float _133 = _131 * 0.0078125f;
  uint _134 = _122 + -1u;
  float4 _135 = SrcImage.Load(int3(_134, _17, 0));
  float _139 = max(0.0f, _135.x);
  float _140 = max(0.0f, _135.y);
  float _141 = max(0.0f, _135.z);
  float _142 = _140 * 0.0078125f;
  float4 _143 = SrcImage.Load(int3(_122, _17, 0)); // middle
  float _147 = max(0.0f, _143.x);
  float _148 = max(0.0f, _143.y);
  float _149 = max(0.0f, _143.z);
  float _150 = _148 * 0.0078125f;
  uint _151 = _122 + 1u;
  float4 _152 = SrcImage.Load(int3(_151, _17, 0));
  float _156 = max(0.0f, _152.x);
  float _157 = max(0.0f, _152.y);
  float _158 = max(0.0f, _152.z);
  float _159 = _157 * 0.0078125f;
  float4 _160 = SrcImage.Load(int3(_122, _56, 0));
  float _164 = max(0.0f, _160.x);
  float _165 = max(0.0f, _160.y);
  float _166 = max(0.0f, _160.z);
  float _167 = _165 * 0.0078125f;
  float _168 = min(_142, _150);
  float _169 = min(_168, _159);
  float _170 = min(_169, _133);
  float _171 = min(_170, _167);
  float _172 = max(_142, _150);
  float _173 = max(_172, _159);
  float _174 = max(_173, _133);
  float _175 = max(_174, _167);
  int _176 = asint(_175);
  uint _177 = 2129690299u - _176;
  float _178 = asfloat(_177);
  float _179 = 1.0f - _175;
  float _180 = min(_171, _179);
  float _181 = _178 * _180;
  float _182 = saturate(_181);
  int _183 = asint(_182);
  int _184 = (uint)(_183) >> 1;
  uint _185 = _184 + 532432441u;
  float _186 = asfloat(_185);
  float _187 = asfloat((uint)(const1.x));
  float _188 = _186 * _187;
  float _189 = _188 * 4.0f;
  float _190 = _189 + 1.0f;
  int _191 = asint(_190);
  uint _192 = 2129764351u - _191;
  float _193 = asfloat(_192);
  float _194 = _193 * _190;
  float _195 = 2.0f - _194;
  float _196 = _195 * _193;
  float _197 = _139 + _130;
  float _198 = _197 + _156;
  float _199 = _198 + _164;
  float _200 = _188 * _199;
  float _201 = _200 + _147;
  float _202 = _201 * 0.0078125f;
  float _203 = _202 * _196;
  float _204 = saturate(_203);
  float _205 = _140 + _131;
  float _206 = _205 + _157;
  float _207 = _206 + _165;
  float _208 = _207 * 0.0078125f;
  float _209 = _208 * _188;
  float _210 = _209 + _150;
  float _211 = _196 * _210;
  float _212 = saturate(_211);
  float _213 = _141 + _132;
  float _214 = _213 + _158;
  float _215 = _214 + _166;
  float _216 = _188 * _215;
  float _217 = _216 + _149;
  float _218 = _217 * 0.0078125f;
  float _219 = _218 * _196;
  float _220 = saturate(_219);
  float _221 = _204 * 128.0f;
  float _222 = _212 * 128.0f;
  float _223 = _220 * 128.0f;
  OutputImage[int2(_122, _17)] = float4(_221, _222, _223, 1.0f);
  */
  OutputImage[int2(_122, _17)] = float4(ApplyCAS(SrcImage, int3(_122, _17, 0)), 1.0f);

  int _225 = _17 | 8;
  /* uint _228 = _225 + -1u;
  float4 _230 = SrcImage.Load(int3(_122, _228, 0));
  float _234 = max(0.0f, _230.x);
  float _235 = max(0.0f, _230.y);
  float _236 = max(0.0f, _230.z);
  float _237 = _235 * 0.0078125f;
  float4 _238 = SrcImage.Load(int3(_134, _225, 0));
  float _242 = max(0.0f, _238.x);
  float _243 = max(0.0f, _238.y);
  float _244 = max(0.0f, _238.z);
  float _245 = _243 * 0.0078125f;
  float4 _246 = SrcImage.Load(int3(_122, _225, 0));
  float _250 = max(0.0f, _246.x);
  float _251 = max(0.0f, _246.y);
  float _252 = max(0.0f, _246.z);
  float _253 = _251 * 0.0078125f;
  float4 _254 = SrcImage.Load(int3(_151, _225, 0));
  float _258 = max(0.0f, _254.x);
  float _259 = max(0.0f, _254.y);
  float _260 = max(0.0f, _254.z);
  float _261 = _259 * 0.0078125f;
  uint _262 = _225 + 1u;
  float4 _263 = SrcImage.Load(int3(_122, _262, 0));
  float _267 = max(0.0f, _263.x);
  float _268 = max(0.0f, _263.y);
  float _269 = max(0.0f, _263.z);
  float _270 = _268 * 0.0078125f;
  float _271 = min(_245, _253);
  float _272 = min(_271, _261);
  float _273 = min(_272, _237);
  float _274 = min(_273, _270);
  float _275 = max(_245, _253);
  float _276 = max(_275, _261);
  float _277 = max(_276, _237);
  float _278 = max(_277, _270);
  int _279 = asint(_278);
  uint _280 = 2129690299u - _279;
  float _281 = asfloat(_280);
  float _282 = 1.0f - _278;
  float _283 = min(_274, _282);
  float _284 = _281 * _283;
  float _285 = saturate(_284);
  int _286 = asint(_285);
  int _287 = (uint)(_286) >> 1;
  uint _288 = _287 + 532432441u;
  float _289 = asfloat(_288);
  float _290 = asfloat((uint)(const1.x));
  float _291 = _289 * _290;
  float _292 = _291 * 4.0f;
  float _293 = _292 + 1.0f;
  int _294 = asint(_293);
  uint _295 = 2129764351u - _294;
  float _296 = asfloat(_295);
  float _297 = _296 * _293;
  float _298 = 2.0f - _297;
  float _299 = _298 * _296;
  float _300 = _242 + _234;
  float _301 = _300 + _258;
  float _302 = _301 + _267;
  float _303 = _291 * _302;
  float _304 = _303 + _250;
  float _305 = _304 * 0.0078125f;
  float _306 = _305 * _299;
  float _307 = saturate(_306);
  float _308 = _243 + _235;
  float _309 = _308 + _259;
  float _310 = _309 + _268;
  float _311 = _310 * 0.0078125f;
  float _312 = _311 * _291;
  float _313 = _312 + _253;
  float _314 = _299 * _313;
  float _315 = saturate(_314);
  float _316 = _244 + _236;
  float _317 = _316 + _260;
  float _318 = _317 + _269;
  float _319 = _291 * _318;
  float _320 = _319 + _252;
  float _321 = _320 * 0.0078125f;
  float _322 = _321 * _299;
  float _323 = saturate(_322);
  float _324 = _307 * 128.0f;
  float _325 = _315 * 128.0f;
  float _326 = _323 * 128.0f;
  OutputImage[int2(_122, _225)] = float4(_324, _325, _326, 1.0f);
  */
  OutputImage[int2(_122, _225)] = float4(ApplyCAS(SrcImage, int3(_122, _225, 0)), 1.0f);

  /* float4 _331 = SrcImage.Load(int3(_16, _228, 0));
  float _335 = max(0.0f, _331.x);
  float _336 = max(0.0f, _331.y);
  float _337 = max(0.0f, _331.z);
  float _338 = _336 * 0.0078125f;
  float4 _339 = SrcImage.Load(int3(_30, _225, 0));
  float _343 = max(0.0f, _339.x);
  float _344 = max(0.0f, _339.y);
  float _345 = max(0.0f, _339.z);
  float _346 = _344 * 0.0078125f;
  float4 _347 = SrcImage.Load(int3(_16, _225, 0));
  float _351 = max(0.0f, _347.x);
  float _352 = max(0.0f, _347.y);
  float _353 = max(0.0f, _347.z);
  float _354 = _352 * 0.0078125f;
  float4 _355 = SrcImage.Load(int3(_47, _225, 0));
  float _359 = max(0.0f, _355.x);
  float _360 = max(0.0f, _355.y);
  float _361 = max(0.0f, _355.z);
  float _362 = _360 * 0.0078125f;
  float4 _363 = SrcImage.Load(int3(_16, _262, 0));
  float _367 = max(0.0f, _363.x);
  float _368 = max(0.0f, _363.y);
  float _369 = max(0.0f, _363.z);
  float _370 = _368 * 0.0078125f;
  float _371 = min(_346, _354);
  float _372 = min(_371, _362);
  float _373 = min(_372, _338);
  float _374 = min(_373, _370);
  float _375 = max(_346, _354);
  float _376 = max(_375, _362);
  float _377 = max(_376, _338);
  float _378 = max(_377, _370);
  int _379 = asint(_378);
  uint _380 = 2129690299u - _379;
  float _381 = asfloat(_380);
  float _382 = 1.0f - _378;
  float _383 = min(_374, _382);
  float _384 = _381 * _383;
  float _385 = saturate(_384);
  int _386 = asint(_385);
  int _387 = (uint)(_386) >> 1;
  uint _388 = _387 + 532432441u;
  float _389 = asfloat(_388);
  float _390 = asfloat((uint)(const1.x));
  float _391 = _389 * _390;
  float _392 = _391 * 4.0f;
  float _393 = _392 + 1.0f;
  int _394 = asint(_393);
  uint _395 = 2129764351u - _394;
  float _396 = asfloat(_395);
  float _397 = _396 * _393;
  float _398 = 2.0f - _397;
  float _399 = _398 * _396;
  float _400 = _343 + _335;
  float _401 = _400 + _359;
  float _402 = _401 + _367;
  float _403 = _391 * _402;
  float _404 = _403 + _351;
  float _405 = _404 * 0.0078125f;
  float _406 = _405 * _399;
  float _407 = saturate(_406);
  float _408 = _344 + _336;
  float _409 = _408 + _360;
  float _410 = _409 + _368;
  float _411 = _410 * 0.0078125f;
  float _412 = _411 * _391;
  float _413 = _412 + _354;
  float _414 = _399 * _413;
  float _415 = saturate(_414);
  float _416 = _345 + _337;
  float _417 = _416 + _361;
  float _418 = _417 + _369;
  float _419 = _391 * _418;
  float _420 = _419 + _353;
  float _421 = _420 * 0.0078125f;
  float _422 = _421 * _399;
  float _423 = saturate(_422);
  float _424 = _407 * 128.0f;
  float _425 = _415 * 128.0f;
  float _426 = _423 * 128.0f;
  OutputImage[int2(_16, _225)] = float4(_424, _425, _426, 1.0f);
  */
  OutputImage[int2(_16, _225)] = float4(ApplyCAS(SrcImage, int3(_16, _225, 0)), 1.0f);
}
