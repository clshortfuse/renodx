#include "./common.hlsl"

Texture2D<float> ReadonlyDepth : register(t0);

Texture2D<float4> RE_POSTPROCESS_Color : register(t1);

Texture2D<float> tFilterTempMap1 : register(t2);

Texture3D<float> tVolumeMap : register(t3);

struct RadialBlurComputeResult {
  float computeAlpha;
};

StructuredBuffer<RadialBlurComputeResult> ComputeResultSRV : register(t4);

Texture3D<float4> tTextureMap0 : register(t5);

Texture3D<float4> tTextureMap1 : register(t6);

Texture3D<float4> tTextureMap2 : register(t7);

Texture2D<float4> ImagePlameBase : register(t8);

Texture2D<float> ImagePlameAlpha : register(t9);

cbuffer SceneInfo : register(b0) {
  row_major float4x4 viewProjMat : packoffset(c000.x);
  row_major float3x4 transposeViewMat : packoffset(c004.x);
  row_major float3x4 transposeViewInvMat : packoffset(c007.x);
  float4 projElement[2] : packoffset(c010.x);
  float4 projInvElements[2] : packoffset(c012.x);
  row_major float4x4 viewProjInvMat : packoffset(c014.x);
  row_major float4x4 prevViewProjMat : packoffset(c018.x);
  float3 ZToLinear : packoffset(c022.x);
  float subdivisionLevel : packoffset(c022.w);
  float2 screenSize : packoffset(c023.x);
  float2 screenInverseSize : packoffset(c023.z);
  float2 cullingHelper : packoffset(c024.x);
  float cameraNearPlane : packoffset(c024.z);
  float cameraFarPlane : packoffset(c024.w);
  float4 viewFrustum[6] : packoffset(c025.x);
  float4 clipplane : packoffset(c031.x);
  float2 vrsVelocityThreshold : packoffset(c032.x);
  uint GPUVisibleMask : packoffset(c032.z);
  uint resolutionRatioPacked : packoffset(c032.w);
};

cbuffer TonemapParam : register(b1) {
  float contrast : packoffset(c000.x);
  float linearBegin : packoffset(c000.y);
  float linearLength : packoffset(c000.z);
  float toe : packoffset(c000.w);
  float maxNit : packoffset(c001.x);
  float linearStart : packoffset(c001.y);
  float displayMaxNitSubContrastFactor : packoffset(c001.z);
  float contrastFactor : packoffset(c001.w);
  float mulLinearStartContrastFactor : packoffset(c002.x);
  float invLinearBegin : packoffset(c002.y);
  float madLinearStartContrastFactor : packoffset(c002.z);
};

cbuffer DynamicRangeConversionParam : register(b2) {
  float useDynamicRangeConversion : packoffset(c000.x);
  float exposureScale : packoffset(c000.y);
  float kneeStartNit : packoffset(c000.z);
  float knee : packoffset(c000.w);
};

cbuffer CBHazeFilterParams : register(b3) {
  float fHazeFilterStart : packoffset(c000.x);
  float fHazeFilterInverseRange : packoffset(c000.y);
  float fHazeFilterHeightStart : packoffset(c000.z);
  float fHazeFilterHeightInverseRange : packoffset(c000.w);
  float4 fHazeFilterUVWOffset : packoffset(c001.x);
  float fHazeFilterScale : packoffset(c002.x);
  float fHazeFilterBorder : packoffset(c002.y);
  float fHazeFilterBorderFade : packoffset(c002.z);
  float fHazeFilterDepthDiffBias : packoffset(c002.w);
  uint fHazeFilterAttribute : packoffset(c003.x);
  uint fHazeFilterReserved1 : packoffset(c003.y);
  uint fHazeFilterReserved2 : packoffset(c003.z);
  uint fHazeFilterReserved3 : packoffset(c003.w);
};

cbuffer LensDistortionParam : register(b4) {
  float fDistortionCoef : packoffset(c000.x);
  float fRefraction : packoffset(c000.y);
  uint aberrationEnable : packoffset(c000.z);
  uint distortionType : packoffset(c000.w);
  float fCorrectCoef : packoffset(c001.x);
  uint reserve1 : packoffset(c001.y);
  uint reserve2 : packoffset(c001.z);
  uint reserve3 : packoffset(c001.w);
};

cbuffer PaniniProjectionParam : register(b5) {
  float4 fOptimizedParam : packoffset(c000.x);
};

cbuffer RadialBlurRenderParam : register(b6) {
  float4 cbRadialColor : packoffset(c000.x);
  float2 cbRadialScreenPos : packoffset(c001.x);
  float2 cbRadialMaskSmoothstep : packoffset(c001.z);
  float2 cbRadialMaskRate : packoffset(c002.x);
  float cbRadialBlurPower : packoffset(c002.z);
  float cbRadialSharpRange : packoffset(c002.w);
  uint cbRadialBlurFlags : packoffset(c003.x);
  float cbRadialReserve0 : packoffset(c003.y);
  float cbRadialReserve1 : packoffset(c003.z);
  float cbRadialReserve2 : packoffset(c003.w);
};

cbuffer FilmGrainParam : register(b7) {
  float2 fNoisePower : packoffset(c000.x);
  float2 fNoiseUVOffset : packoffset(c000.z);
  float fNoiseDensity : packoffset(c001.x);
  float fNoiseContrast : packoffset(c001.y);
  float fBlendRate : packoffset(c001.z);
  float fReverseNoiseSize : packoffset(c001.w);
};

cbuffer ColorCorrectTexture : register(b8) {
  float fTextureSize : packoffset(c000.x);
  float fTextureBlendRate : packoffset(c000.y);
  float fTextureBlendRate2 : packoffset(c000.z);
  float fTextureInverseSize : packoffset(c000.w);
  row_major float4x4 fColorMatrix : packoffset(c001.x);
};

cbuffer ColorDeficientTable : register(b9) {
  float4 cvdR : packoffset(c000.x);
  float4 cvdG : packoffset(c001.x);
  float4 cvdB : packoffset(c002.x);
};

cbuffer ImagePlaneParam : register(b10) {
  float4 ColorParam : packoffset(c000.x);
  float Levels_Rate : packoffset(c001.x);
  float Levels_Range : packoffset(c001.y);
  uint Blend_Type : packoffset(c001.z);
};

cbuffer CBControl : register(b11) {
  uint cPassEnabled : packoffset(c000.x);
};

SamplerState PointClamp : register(s1, space32);

SamplerState BilinearWrap : register(s4, space32);

SamplerState BilinearClamp : register(s5, space32);

SamplerState BilinearBorder : register(s6, space32);

SamplerState TrilinearClamp : register(s9, space32);

float4 main(
    noperspective float4 SV_Position: SV_Position,
    linear float4 Kerare: Kerare,
    linear float Exposure: Exposure) : SV_Target {
  float4 SV_Target;
  float3 untonemapped;

  int _45 = (uint)(cPassEnabled) & 1;
  bool _46 = (_45 != 0);
  bool _49 = ((uint)(distortionType) == 0);
  bool _50 = _46 && _49;
  bool _51 = ((uint)(distortionType) == 1);
  bool _52 = _46 && _51;
  int _53 = (uint)(cPassEnabled) & 64;
  bool _54 = (_53 != 0);
  float _178;
  float _179;
  float _311;
  float _312;
  float _324;
  float _325;
  float _329;
  float _330;
  float _442;
  float _443;
  float _444;
  float _519;
  float _574;
  float _629;
  float _630;
  float _631;
  float _766;
  float _767;
  float _899;
  float _900;
  float _912;
  float _913;
  float _917;
  float _918;
  float _1030;
  float _1031;
  float _1032;
  float _1145;
  float _1146;
  float _1280;
  float _1281;
  float _1293;
  float _1294;
  float _1304;
  float _1305;
  float _1306;
  float _1412;
  float _1413;
  float _1414;
  float _1419;
  float _1420;
  float _1421;
  float _1422;
  float _1423;
  float _1424;
  float _1425;
  float _1426;
  float _1427;
  float _1874;
  float _1875;
  float _1876;
  float _2267;
  float _2268;
  float _2269;
  float _2449;
  float _2450;
  float _2451;
  float _2465;
  float _2466;
  float _2467;
  float _2493;
  float _2494;
  float _2495;
  float _2506;
  float _2507;
  float _2508;
  float _2550;
  float _2566;
  float _2582;
  float _2610;
  float _2611;
  float _2612;
  float _2650;
  float _2661;
  float _2672;
  float _2714;
  float _2725;
  float _2736;
  float _2787;
  float _2798;
  float _2809;
  float _2830;
  float _2831;
  float _2832;
  float _2846;
  float _2847;
  float _2848;
  float _2883;
  float _2884;
  float _2885;
  float _2957;
  float _2958;
  float _2959;
  float _3007;
  float _3032;
  float _3033;
  float _3034;
  if (_50) {
    // Here in Main menu
    float _65 = screenInverseSize.x * SV_Position.x;
    float _66 = screenInverseSize.y * SV_Position.y;
    float _67 = _65 + -0.5f;
    float _68 = _66 + -0.5f;
    float _69 = dot(float2(_67, _68), float2(_67, _68));
    float _70 = _69 * fDistortionCoef;
    float _71 = _70 + 1.0f;
    float _72 = _71 * fCorrectCoef;
    float _73 = _72 * _67;
    float _74 = _72 * _68;
    float _75 = _73 + 0.5f;
    float _76 = _74 + 0.5f;
    bool _77 = ((uint)(aberrationEnable) == 0);
    if (_77) {
      if (_54) {
        int _84 = (uint)(fHazeFilterAttribute) & 2;
        bool _85 = (_84 != 0);
        int _86 = (uint)(fHazeFilterAttribute) & 4;
        bool _87 = (_86 == 0);
        float _90 = tFilterTempMap1.Sample(BilinearWrap, float2(_75, _76));
        if (_85) {
          float _95 = ReadonlyDepth.SampleLevel(PointClamp, float2(_75, _76), 0.0f);
          float _97 = _75 * 2.0f;
          float _98 = _97 * screenSize.x;
          float _99 = _98 * screenInverseSize.x;
          float _100 = _76 * 2.0f;
          float _101 = _100 * screenSize.y;
          float _102 = _101 * screenInverseSize.y;
          float _103 = _99 + -1.0f;
          float _104 = 1.0f - _102;
          float _125 = _103 * (viewProjInvMat[0].x);
          float _126 = mad(_104, (viewProjInvMat[1].x), _125);
          float _127 = mad(_95.x, (viewProjInvMat[2].x), _126);
          float _128 = _127 + (viewProjInvMat[3].x);
          float _129 = _103 * (viewProjInvMat[0].y);
          float _130 = mad(_104, (viewProjInvMat[1].y), _129);
          float _131 = mad(_95.x, (viewProjInvMat[2].y), _130);
          float _132 = _131 + (viewProjInvMat[3].y);
          float _133 = _103 * (viewProjInvMat[0].z);
          float _134 = mad(_104, (viewProjInvMat[1].z), _133);
          float _135 = mad(_95.x, (viewProjInvMat[2].z), _134);
          float _136 = _135 + (viewProjInvMat[3].z);
          float _137 = _103 * (viewProjInvMat[0].w);
          float _138 = mad(_104, (viewProjInvMat[1].w), _137);
          float _139 = mad(_95.x, (viewProjInvMat[2].w), _138);
          float _140 = _139 + (viewProjInvMat[3].w);
          float _141 = 1.0f / _140;
          float _142 = _141 * _128;
          float _143 = _141 * _132;
          float _144 = _141 * _136;
          float _151 = _142 - (transposeViewInvMat[0].w);
          float _152 = _143 - (transposeViewInvMat[1].w);
          float _153 = _144 - (transposeViewInvMat[2].w);
          float _154 = _151 * _151;
          float _155 = _152 * _152;
          float _156 = _155 + _154;
          float _157 = _153 * _153;
          float _158 = _156 + _157;
          float _159 = sqrt(_158);
          float _162 = _159 - fHazeFilterStart;
          float _164 = _162 * fHazeFilterInverseRange;
          float _166 = _143 - fHazeFilterHeightStart;
          float _168 = _166 * fHazeFilterHeightInverseRange;
          float _169 = max(_164, _168);
          float _170 = _90.x * _169;
          float _171 = saturate(_170);
          _178 = _171;
          _179 = _95.x;
        } else {
          int _173 = (uint)(fHazeFilterAttribute) & 1;
          bool _174 = (_173 != 0);
          float _175 = 1.0f - _90.x;
          float _176 = select(_174, _175, _90.x);
          _178 = _176;
          _179 = 0.0f;
        }
        float _184 = -0.0f - _76;
        float _197 = (transposeViewInvMat[0].x) * _75;
        float _198 = mad(_184, (transposeViewInvMat[0].y), _197);
        float _199 = mad(-1.0f, (transposeViewInvMat[0].z), _198);
        float _200 = (transposeViewInvMat[1].x) * _75;
        float _201 = mad(_184, (transposeViewInvMat[1].y), _200);
        float _202 = mad(-1.0f, (transposeViewInvMat[1].z), _201);
        float _203 = (transposeViewInvMat[2].x) * _75;
        float _204 = mad(_184, (transposeViewInvMat[2].y), _203);
        float _205 = mad(-1.0f, (transposeViewInvMat[2].z), _204);
        float _207 = fHazeFilterUVWOffset.w * _199;
        float _208 = fHazeFilterUVWOffset.w * _202;
        float _209 = fHazeFilterUVWOffset.w * _205;
        float _210 = _207 + fHazeFilterUVWOffset.x;
        float _211 = _208 + fHazeFilterUVWOffset.y;
        float _212 = _209 + fHazeFilterUVWOffset.z;
        float _215 = tVolumeMap.Sample(BilinearWrap, float3(_210, _211, _212));
        float _217 = _215.x * 0.5f;
        float _218 = _207 * 2.0f;
        float _219 = _208 * 2.0f;
        float _220 = _209 * 2.0f;
        float _221 = _218 + fHazeFilterUVWOffset.x;
        float _222 = _219 + fHazeFilterUVWOffset.y;
        float _223 = _220 + fHazeFilterUVWOffset.z;
        float _224 = tVolumeMap.Sample(BilinearWrap, float3(_221, _222, _223));
        float _226 = _224.x * 0.25f;
        float _227 = _226 + _217;
        float _228 = _207 * 4.0f;
        float _229 = _208 * 4.0f;
        float _230 = _209 * 4.0f;
        float _231 = _228 + fHazeFilterUVWOffset.x;
        float _232 = _229 + fHazeFilterUVWOffset.y;
        float _233 = _230 + fHazeFilterUVWOffset.z;
        float _234 = tVolumeMap.Sample(BilinearWrap, float3(_231, _232, _233));
        float _236 = _234.x * 0.125f;
        float _237 = _227 + _236;
        float _238 = _207 * 8.0f;
        float _239 = _208 * 8.0f;
        float _240 = _209 * 8.0f;
        float _241 = _238 + fHazeFilterUVWOffset.x;
        float _242 = _239 + fHazeFilterUVWOffset.y;
        float _243 = _240 + fHazeFilterUVWOffset.z;
        float _244 = tVolumeMap.Sample(BilinearWrap, float3(_241, _242, _243));
        float _246 = _244.x * 0.0625f;
        float _247 = _237 + _246;
        float _248 = fHazeFilterUVWOffset.x + 0.5f;
        float _249 = fHazeFilterUVWOffset.y + 0.5f;
        float _250 = fHazeFilterUVWOffset.z + 0.5f;
        float _251 = _207 + _248;
        float _252 = _208 + _249;
        float _253 = _209 + _250;
        float _254 = tVolumeMap.Sample(BilinearWrap, float3(_251, _252, _253));
        float _256 = _254.x * 0.5f;
        float _257 = _218 + _248;
        float _258 = _219 + _249;
        float _259 = _220 + _250;
        float _260 = tVolumeMap.Sample(BilinearWrap, float3(_257, _258, _259));
        float _262 = _260.x * 0.25f;
        float _263 = _262 + _256;
        float _264 = _228 + _248;
        float _265 = _229 + _249;
        float _266 = _230 + _250;
        float _267 = tVolumeMap.Sample(BilinearWrap, float3(_264, _265, _266));
        float _269 = _267.x * 0.125f;
        float _270 = _263 + _269;
        float _271 = _238 + _248;
        float _272 = _239 + _249;
        float _273 = _240 + _250;
        float _274 = tVolumeMap.Sample(BilinearWrap, float3(_271, _272, _273));
        float _276 = _274.x * 0.0625f;
        float _277 = _270 + _276;
        float _278 = _247 * 2.0f;
        float _279 = _277 * 2.0f;
        float _280 = _278 + -1.0f;
        float _281 = _279 + -1.0f;
        float _282 = _280 * _178;
        float _285 = _282 * fHazeFilterScale;
        float _286 = fHazeFilterScale * _178;
        float _287 = _286 * _281;
        if (!_87) {
          float _289 = abs(_73);
          float _290 = abs(_74);
          float _292 = _289 - fHazeFilterBorder;
          float _293 = _290 - fHazeFilterBorder;
          float _294 = max(_292, 0.0f);
          float _295 = max(_293, 0.0f);
          float _296 = min(_294, 1.0f);
          float _297 = min(_295, 1.0f);
          float _298 = 0.5f / fHazeFilterBorder;
          float _299 = _298 * _296;
          float _300 = _298 * _297;
          float _302 = _299 * fHazeFilterBorderFade;
          float _303 = _300 * fHazeFilterBorderFade;
          float _304 = max(_302, _303);
          float _305 = saturate(_304);
          float _306 = _305 * _285;
          float _307 = _305 * _287;
          float _308 = _285 - _306;
          float _309 = _287 - _307;
          _311 = _308;
          _312 = _309;
        } else {
          _311 = _285;
          _312 = _287;
        }
        if (_85) {
          float _314 = _311 + _75;
          float _315 = _312 + _76;
          float _317 = ReadonlyDepth.Sample(BilinearWrap, float2(_314, _315));
          float _319 = _317.x - _179;
          bool _321 = !(_319 >= fHazeFilterDepthDiffBias);
          if (!_321) {
            _324 = 0.0f;
            _325 = 0.0f;
          } else {
            _324 = _311;
            _325 = _312;
          }
        } else {
          _324 = _311;
          _325 = _312;
        }
        float _326 = _324 + _75;
        float _327 = _325 + _76;
        _329 = _326;
        _330 = _327;
      } else {
        _329 = _75;
        _330 = _76;
      }
      float4 _333 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_329, _330));
      float _337 = _333.x * Exposure;
      float _338 = _333.y * Exposure;
      float _339 = _333.z * Exposure;
      untonemapped = float3(_337, _338, _339);

      float _340 = max(_337, _338);
      float _341 = max(_340, _339);
      bool _342 = isfinite(_341);
      if (_342) {
        float _348 = invLinearBegin * _337;
        bool _349 = (_337 >= linearBegin);
        float _350 = _348 * _348;
        float _351 = _348 * 2.0f;
        float _352 = 3.0f - _351;
        float _353 = _350 * _352;
        float _354 = invLinearBegin * _338;
        bool _355 = (_338 >= linearBegin);
        float _356 = _354 * _354;
        float _357 = _354 * 2.0f;
        float _358 = 3.0f - _357;
        float _359 = _356 * _358;
        float _360 = invLinearBegin * _339;
        bool _361 = (_339 >= linearBegin);
        float _362 = _360 * _360;
        float _363 = _360 * 2.0f;
        float _364 = 3.0f - _363;
        float _365 = _362 * _364;
        float _366 = 1.0f - _353;
        float _367 = select(_349, 0.0f, _366);
        float _368 = 1.0f - _359;
        float _369 = select(_355, 0.0f, _368);
        float _370 = 1.0f - _365;
        float _371 = select(_361, 0.0f, _370);
        bool _374 = (_337 < linearStart);
        bool _375 = (_338 < linearStart);
        bool _376 = (_339 < linearStart);
        float _377 = select(_374, 0.0f, 1.0f);
        float _378 = select(_375, 0.0f, 1.0f);
        float _379 = select(_376, 0.0f, 1.0f);
        float _380 = 1.0f - _377;
        float _381 = _380 - _367;
        float _382 = 1.0f - _378;
        float _383 = _382 - _369;
        float _384 = 1.0f - _379;
        float _385 = _384 - _371;
        float _387 = log2(_348);
        float _388 = log2(_354);
        float _389 = log2(_360);
        float _390 = _387 * toe;
        float _391 = _388 * toe;
        float _392 = _389 * toe;
        float _393 = exp2(_390);
        float _394 = exp2(_391);
        float _395 = exp2(_392);
        float _396 = _393 * _367;
        float _397 = _396 * linearBegin;
        float _398 = _394 * _369;
        float _399 = _398 * linearBegin;
        float _400 = _395 * _371;
        float _401 = _400 * linearBegin;
        float _403 = contrast * _337;
        float _404 = contrast * _338;
        float _405 = contrast * _339;
        float _407 = _403 + madLinearStartContrastFactor;
        float _408 = _404 + madLinearStartContrastFactor;
        float _409 = _405 + madLinearStartContrastFactor;
        float _410 = _407 * _381;
        float _411 = _408 * _383;
        float _412 = _409 * _385;
        float _413 = _410 + _397;
        float _414 = _411 + _399;
        float _415 = _412 + _401;
        float _419 = contrastFactor * _337;
        float _420 = contrastFactor * _338;
        float _421 = contrastFactor * _339;
        float _423 = _419 + mulLinearStartContrastFactor;
        float _424 = _420 + mulLinearStartContrastFactor;
        float _425 = _421 + mulLinearStartContrastFactor;
        float _426 = exp2(_423);
        float _427 = exp2(_424);
        float _428 = exp2(_425);
        float _429 = _426 * displayMaxNitSubContrastFactor;
        float _430 = _427 * displayMaxNitSubContrastFactor;
        float _431 = _428 * displayMaxNitSubContrastFactor;
        float _432 = maxNit - _429;
        float _433 = maxNit - _430;
        float _434 = maxNit - _431;
        float _435 = _432 * _377;
        float _436 = _433 * _378;
        float _437 = _434 * _379;
        float _438 = _413 + _435;
        float _439 = _414 + _436;
        float _440 = _415 + _437;
        _442 = _438;
        _443 = _439;
        _444 = _440;
      } else {
        _442 = 1.0f;
        _443 = 1.0f;
        _444 = 1.0f;
      }
      float _445 = saturate(_442);
      float _446 = saturate(_443);
      _629 = _444;
      _630 = _445;
      _631 = _446;
    } else {
      // Here in main menu

      float _448 = _69 + fRefraction;
      float _449 = _448 * fDistortionCoef;
      float _450 = _449 + 1.0f;
      float _451 = _67 * fCorrectCoef;
      float _452 = _451 * _450;
      float _453 = _68 * fCorrectCoef;
      float _454 = _453 * _450;
      float _455 = _452 + 0.5f;
      float _456 = _454 + 0.5f;
      float _457 = _448 + fRefraction;
      float _458 = _457 * fDistortionCoef;
      float _459 = _458 + 1.0f;
      float _460 = _451 * _459;
      float _461 = _453 * _459;
      float _462 = _460 + 0.5f;
      float _463 = _461 + 0.5f;
      float4 _466 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_75, _76));
      float _470 = _466.x * Exposure;
      float _471 = _466.y * Exposure;
      float _472 = _466.z * Exposure;  // Works
      untonemapped = float3(_470, _471, _472);

      float _473 = max(_470, _471);
      float _474 = max(_473, _472);
      bool _475 = isfinite(_474);
      if (_475) {
        float _481 = invLinearBegin * _470;
        bool _482 = (_470 >= linearBegin);
        float _483 = _481 * _481;
        float _484 = _481 * 2.0f;
        float _485 = 3.0f - _484;
        float _486 = _483 * _485;
        float _487 = 1.0f - _486;
        float _488 = select(_482, 0.0f, _487);
        bool _491 = (_470 < linearStart);
        float _492 = select(_491, 0.0f, 1.0f);
        float _493 = 1.0f - _492;
        float _494 = _493 - _488;
        float _496 = log2(_481);
        float _497 = _496 * toe;
        float _498 = exp2(_497);
        float _499 = linearBegin * _498;
        float _500 = _499 * _488;
        float _502 = contrast * _470;
        float _504 = _502 + madLinearStartContrastFactor;
        float _505 = _504 * _494;
        float _506 = _505 + _500;
        float _510 = contrastFactor * _470;
        float _512 = _510 + mulLinearStartContrastFactor;
        float _513 = exp2(_512);
        float _514 = _513 * displayMaxNitSubContrastFactor;
        float _515 = maxNit - _514;
        float _516 = _515 * _492;
        float _517 = _506 + _516;
        _519 = _517;
      } else {
        _519 = 1.0f;
      }
      float _520 = saturate(_519);
      float4 _521 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_455, _456));
      float _525 = _521.x * Exposure;
      float _526 = _521.y * Exposure;
      float _527 = _521.z * Exposure;
      untonemapped = float3(_525, _526, _527);

      float _528 = max(_525, _526);
      float _529 = max(_528, _527);
      bool _530 = isfinite(_529);
      if (_530) {
        // here in main menu

        float _536 = invLinearBegin * _526;
        bool _537 = (_526 >= linearBegin);
        float _538 = _536 * _536;
        float _539 = _536 * 2.0f;
        float _540 = 3.0f - _539;
        float _541 = _538 * _540;
        float _542 = 1.0f - _541;
        float _543 = select(_537, 0.0f, _542);
        bool _546 = (_526 < linearStart);
        float _547 = select(_546, 0.0f, 1.0f);
        float _548 = 1.0f - _547;
        float _549 = _548 - _543;
        float _551 = log2(_536);
        float _552 = _551 * toe;
        float _553 = exp2(_552);
        float _554 = linearBegin * _553;
        float _555 = _554 * _543;
        float _557 = contrast * _526;
        float _559 = _557 + madLinearStartContrastFactor;
        float _560 = _559 * _549;
        float _561 = _560 + _555;
        float _565 = contrastFactor * _526;
        float _567 = _565 + mulLinearStartContrastFactor;
        float _568 = exp2(_567);
        float _569 = _568 * displayMaxNitSubContrastFactor;
        float _570 = maxNit - _569;
        float _571 = _570 * _547;
        float _572 = _561 + _571;
        _574 = _572;
      } else {
        _574 = 1.0f;
      }
      float _575 = saturate(_574);
      float4 _576 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_462, _463));
      float _580 = _576.x * Exposure;
      float _581 = _576.y * Exposure;
      float _582 = _576.z * Exposure;
      untonemapped = float3(_580, _581, _582);

      float _583 = max(_580, _581);
      float _584 = max(_583, _582);
      bool _585 = isfinite(_584);
      if (_585) {
        float _591 = invLinearBegin * _582;
        bool _592 = (_582 >= linearBegin);
        float _593 = _591 * _591;
        float _594 = _591 * 2.0f;
        float _595 = 3.0f - _594;
        float _596 = _593 * _595;
        float _597 = 1.0f - _596;
        float _598 = select(_592, 0.0f, _597);
        bool _601 = (_582 < linearStart);
        float _602 = select(_601, 0.0f, 1.0f);
        float _603 = 1.0f - _602;
        float _604 = _603 - _598;
        float _606 = log2(_591);
        float _607 = _606 * toe;
        float _608 = exp2(_607);
        float _609 = linearBegin * _608;
        float _610 = _609 * _598;
        float _612 = contrast * _582;
        float _614 = _612 + madLinearStartContrastFactor;
        float _615 = _614 * _604;
        float _616 = _615 + _610;
        float _620 = contrastFactor * _582;
        float _622 = _620 + mulLinearStartContrastFactor;
        float _623 = exp2(_622);
        float _624 = _623 * displayMaxNitSubContrastFactor;
        float _625 = maxNit - _624;
        float _626 = _625 * _602;
        float _627 = _616 + _626;
        _629 = _627;
        _630 = _520;
        _631 = _575;
      } else {
        _629 = 1.0f;
        _630 = _520;
        _631 = _575;
      }
    }
    float _632 = saturate(_629);
    _1419 = _630;
    _1420 = _631;
    _1421 = _632;
    _1422 = fDistortionCoef;
    _1423 = 0.0f;
    _1424 = 0.0f;
    _1425 = 0.0f;
    _1426 = 0.0f;
    _1427 = fCorrectCoef;
  } else {
    // Not here in main menu
    if (_52) {
      float _643 = SV_Position.x * 2.0f;
      float _644 = _643 * screenInverseSize.x;
      float _645 = SV_Position.y * 2.0f;
      float _646 = _645 * screenInverseSize.y;
      float _647 = _644 + -1.0f;
      float _648 = _646 + -1.0f;
      float _649 = _647 * _647;
      float _650 = _649 + 1.0f;
      float _651 = sqrt(_650);
      float _652 = 1.0f / _651;
      float _653 = _652 + fOptimizedParam.x;
      float _654 = _651 * fOptimizedParam.z;
      float _655 = _654 * _653;
      float _656 = _652 + -1.0f;
      float _657 = _656 * fOptimizedParam.y;
      float _658 = _657 + 1.0f;
      float _659 = fOptimizedParam.w * 0.5f;
      float _660 = _659 * _647;
      float _661 = _660 * _655;
      float _662 = _659 * _648;
      float _663 = _662 * _658;
      float _664 = _663 * _655;
      float _665 = _661 + 0.5f;
      float _666 = _664 + 0.5f;
      if (_54) {
        int _672 = (uint)(fHazeFilterAttribute) & 2;
        bool _673 = (_672 != 0);
        int _674 = (uint)(fHazeFilterAttribute) & 4;
        bool _675 = (_674 == 0);
        float _678 = tFilterTempMap1.Sample(BilinearWrap, float2(_665, _666));
        if (_673) {
          float _683 = ReadonlyDepth.SampleLevel(PointClamp, float2(_665, _666), 0.0f);
          float _685 = screenSize.x * 2.0f;
          float _686 = _685 * _665;
          float _687 = _686 * screenInverseSize.x;
          float _688 = screenSize.y * 2.0f;
          float _689 = _688 * _666;
          float _690 = _689 * screenInverseSize.y;
          float _691 = _687 + -1.0f;
          float _692 = 1.0f - _690;
          float _713 = _691 * (viewProjInvMat[0].x);
          float _714 = mad(_692, (viewProjInvMat[1].x), _713);
          float _715 = mad(_683.x, (viewProjInvMat[2].x), _714);
          float _716 = _715 + (viewProjInvMat[3].x);
          float _717 = _691 * (viewProjInvMat[0].y);
          float _718 = mad(_692, (viewProjInvMat[1].y), _717);
          float _719 = mad(_683.x, (viewProjInvMat[2].y), _718);
          float _720 = _719 + (viewProjInvMat[3].y);
          float _721 = _691 * (viewProjInvMat[0].z);
          float _722 = mad(_692, (viewProjInvMat[1].z), _721);
          float _723 = mad(_683.x, (viewProjInvMat[2].z), _722);
          float _724 = _723 + (viewProjInvMat[3].z);
          float _725 = _691 * (viewProjInvMat[0].w);
          float _726 = mad(_692, (viewProjInvMat[1].w), _725);
          float _727 = mad(_683.x, (viewProjInvMat[2].w), _726);
          float _728 = _727 + (viewProjInvMat[3].w);
          float _729 = 1.0f / _728;
          float _730 = _729 * _716;
          float _731 = _729 * _720;
          float _732 = _729 * _724;
          float _739 = _730 - (transposeViewInvMat[0].w);
          float _740 = _731 - (transposeViewInvMat[1].w);
          float _741 = _732 - (transposeViewInvMat[2].w);
          float _742 = _739 * _739;
          float _743 = _740 * _740;
          float _744 = _743 + _742;
          float _745 = _741 * _741;
          float _746 = _744 + _745;
          float _747 = sqrt(_746);
          float _750 = _747 - fHazeFilterStart;
          float _752 = _750 * fHazeFilterInverseRange;
          float _754 = _731 - fHazeFilterHeightStart;
          float _756 = _754 * fHazeFilterHeightInverseRange;
          float _757 = max(_752, _756);
          float _758 = _678.x * _757;
          float _759 = saturate(_758);
          _766 = _759;
          _767 = _683.x;
        } else {
          int _761 = (uint)(fHazeFilterAttribute) & 1;
          bool _762 = (_761 != 0);
          float _763 = 1.0f - _678.x;
          float _764 = select(_762, _763, _678.x);
          _766 = _764;
          _767 = 0.0f;
        }
        float _772 = -0.0f - _666;
        float _785 = (transposeViewInvMat[0].x) * _665;
        float _786 = mad(_772, (transposeViewInvMat[0].y), _785);
        float _787 = mad(-1.0f, (transposeViewInvMat[0].z), _786);
        float _788 = (transposeViewInvMat[1].x) * _665;
        float _789 = mad(_772, (transposeViewInvMat[1].y), _788);
        float _790 = mad(-1.0f, (transposeViewInvMat[1].z), _789);
        float _791 = (transposeViewInvMat[2].x) * _665;
        float _792 = mad(_772, (transposeViewInvMat[2].y), _791);
        float _793 = mad(-1.0f, (transposeViewInvMat[2].z), _792);
        float _795 = fHazeFilterUVWOffset.w * _787;
        float _796 = fHazeFilterUVWOffset.w * _790;
        float _797 = fHazeFilterUVWOffset.w * _793;
        float _798 = _795 + fHazeFilterUVWOffset.x;
        float _799 = _796 + fHazeFilterUVWOffset.y;
        float _800 = _797 + fHazeFilterUVWOffset.z;
        float _803 = tVolumeMap.Sample(BilinearWrap, float3(_798, _799, _800));
        float _805 = _803.x * 0.5f;
        float _806 = _795 * 2.0f;
        float _807 = _796 * 2.0f;
        float _808 = _797 * 2.0f;
        float _809 = _806 + fHazeFilterUVWOffset.x;
        float _810 = _807 + fHazeFilterUVWOffset.y;
        float _811 = _808 + fHazeFilterUVWOffset.z;
        float _812 = tVolumeMap.Sample(BilinearWrap, float3(_809, _810, _811));
        float _814 = _812.x * 0.25f;
        float _815 = _814 + _805;
        float _816 = _795 * 4.0f;
        float _817 = _796 * 4.0f;
        float _818 = _797 * 4.0f;
        float _819 = _816 + fHazeFilterUVWOffset.x;
        float _820 = _817 + fHazeFilterUVWOffset.y;
        float _821 = _818 + fHazeFilterUVWOffset.z;
        float _822 = tVolumeMap.Sample(BilinearWrap, float3(_819, _820, _821));
        float _824 = _822.x * 0.125f;
        float _825 = _815 + _824;
        float _826 = _795 * 8.0f;
        float _827 = _796 * 8.0f;
        float _828 = _797 * 8.0f;
        float _829 = _826 + fHazeFilterUVWOffset.x;
        float _830 = _827 + fHazeFilterUVWOffset.y;
        float _831 = _828 + fHazeFilterUVWOffset.z;
        float _832 = tVolumeMap.Sample(BilinearWrap, float3(_829, _830, _831));
        float _834 = _832.x * 0.0625f;
        float _835 = _825 + _834;
        float _836 = fHazeFilterUVWOffset.x + 0.5f;
        float _837 = fHazeFilterUVWOffset.y + 0.5f;
        float _838 = fHazeFilterUVWOffset.z + 0.5f;
        float _839 = _795 + _836;
        float _840 = _796 + _837;
        float _841 = _797 + _838;
        float _842 = tVolumeMap.Sample(BilinearWrap, float3(_839, _840, _841));
        float _844 = _842.x * 0.5f;
        float _845 = _806 + _836;
        float _846 = _807 + _837;
        float _847 = _808 + _838;
        float _848 = tVolumeMap.Sample(BilinearWrap, float3(_845, _846, _847));
        float _850 = _848.x * 0.25f;
        float _851 = _850 + _844;
        float _852 = _816 + _836;
        float _853 = _817 + _837;
        float _854 = _818 + _838;
        float _855 = tVolumeMap.Sample(BilinearWrap, float3(_852, _853, _854));
        float _857 = _855.x * 0.125f;
        float _858 = _851 + _857;
        float _859 = _826 + _836;
        float _860 = _827 + _837;
        float _861 = _828 + _838;
        float _862 = tVolumeMap.Sample(BilinearWrap, float3(_859, _860, _861));
        float _864 = _862.x * 0.0625f;
        float _865 = _858 + _864;
        float _866 = _835 * 2.0f;
        float _867 = _865 * 2.0f;
        float _868 = _866 + -1.0f;
        float _869 = _867 + -1.0f;
        float _870 = _868 * _766;
        float _873 = _870 * fHazeFilterScale;
        float _874 = fHazeFilterScale * _766;
        float _875 = _874 * _869;
        if (!_675) {
          float _877 = abs(_661);
          float _878 = abs(_664);
          float _880 = _877 - fHazeFilterBorder;
          float _881 = _878 - fHazeFilterBorder;
          float _882 = max(_880, 0.0f);
          float _883 = max(_881, 0.0f);
          float _884 = min(_882, 1.0f);
          float _885 = min(_883, 1.0f);
          float _886 = 0.5f / fHazeFilterBorder;
          float _887 = _886 * _884;
          float _888 = _886 * _885;
          float _890 = _887 * fHazeFilterBorderFade;
          float _891 = _888 * fHazeFilterBorderFade;
          float _892 = max(_890, _891);
          float _893 = saturate(_892);
          float _894 = _893 * _873;
          float _895 = _893 * _875;
          float _896 = _873 - _894;
          float _897 = _875 - _895;
          _899 = _896;
          _900 = _897;
        } else {
          _899 = _873;
          _900 = _875;
        }
        if (_673) {
          float _902 = _899 + _665;
          float _903 = _900 + _666;
          float _905 = ReadonlyDepth.Sample(BilinearWrap, float2(_902, _903));
          float _907 = _905.x - _767;
          bool _909 = !(_907 >= fHazeFilterDepthDiffBias);
          if (!_909) {
            _912 = 0.0f;
            _913 = 0.0f;
          } else {
            _912 = _899;
            _913 = _900;
          }
        } else {
          _912 = _899;
          _913 = _900;
        }
        float _914 = _912 + _665;
        float _915 = _913 + _666;
        _917 = _914;
        _918 = _915;
      } else {
        _917 = _665;
        _918 = _666;
      }
      float4 _921 = RE_POSTPROCESS_Color.Sample(BilinearBorder, float2(_917, _918));
      float _925 = _921.x * Exposure;
      float _926 = _921.y * Exposure;
      float _927 = _921.z * Exposure;
      untonemapped = float3(_925, _926, _927);

      float _928 = max(_925, _926);
      float _929 = max(_928, _927);
      bool _930 = isfinite(_929);
      if (_930) {
        float _936 = invLinearBegin * _925;
        bool _937 = (_925 >= linearBegin);
        float _938 = _936 * _936;
        float _939 = _936 * 2.0f;
        float _940 = 3.0f - _939;
        float _941 = _938 * _940;
        float _942 = invLinearBegin * _926;
        bool _943 = (_926 >= linearBegin);
        float _944 = _942 * _942;
        float _945 = _942 * 2.0f;
        float _946 = 3.0f - _945;
        float _947 = _944 * _946;
        float _948 = invLinearBegin * _927;
        bool _949 = (_927 >= linearBegin);
        float _950 = _948 * _948;
        float _951 = _948 * 2.0f;
        float _952 = 3.0f - _951;
        float _953 = _950 * _952;
        float _954 = 1.0f - _941;
        float _955 = select(_937, 0.0f, _954);
        float _956 = 1.0f - _947;
        float _957 = select(_943, 0.0f, _956);
        float _958 = 1.0f - _953;
        float _959 = select(_949, 0.0f, _958);
        bool _962 = (_925 < linearStart);
        bool _963 = (_926 < linearStart);
        bool _964 = (_927 < linearStart);
        float _965 = select(_962, 0.0f, 1.0f);
        float _966 = select(_963, 0.0f, 1.0f);
        float _967 = select(_964, 0.0f, 1.0f);
        float _968 = 1.0f - _965;
        float _969 = _968 - _955;
        float _970 = 1.0f - _966;
        float _971 = _970 - _957;
        float _972 = 1.0f - _967;
        float _973 = _972 - _959;
        float _975 = log2(_936);
        float _976 = log2(_942);
        float _977 = log2(_948);
        float _978 = _975 * toe;
        float _979 = _976 * toe;
        float _980 = _977 * toe;
        float _981 = exp2(_978);
        float _982 = exp2(_979);
        float _983 = exp2(_980);
        float _984 = _981 * _955;
        float _985 = _984 * linearBegin;
        float _986 = _982 * _957;
        float _987 = _986 * linearBegin;
        float _988 = _983 * _959;
        float _989 = _988 * linearBegin;
        float _991 = contrast * _925;
        float _992 = contrast * _926;
        float _993 = contrast * _927;
        float _995 = _991 + madLinearStartContrastFactor;
        float _996 = _992 + madLinearStartContrastFactor;
        float _997 = _993 + madLinearStartContrastFactor;
        float _998 = _995 * _969;
        float _999 = _996 * _971;
        float _1000 = _997 * _973;
        float _1001 = _998 + _985;
        float _1002 = _999 + _987;
        float _1003 = _1000 + _989;
        float _1007 = contrastFactor * _925;
        float _1008 = contrastFactor * _926;
        float _1009 = contrastFactor * _927;
        float _1011 = _1007 + mulLinearStartContrastFactor;
        float _1012 = _1008 + mulLinearStartContrastFactor;
        float _1013 = _1009 + mulLinearStartContrastFactor;
        float _1014 = exp2(_1011);
        float _1015 = exp2(_1012);
        float _1016 = exp2(_1013);
        float _1017 = _1014 * displayMaxNitSubContrastFactor;
        float _1018 = _1015 * displayMaxNitSubContrastFactor;
        float _1019 = _1016 * displayMaxNitSubContrastFactor;
        float _1020 = maxNit - _1017;
        float _1021 = maxNit - _1018;
        float _1022 = maxNit - _1019;
        float _1023 = _1020 * _965;
        float _1024 = _1021 * _966;
        float _1025 = _1022 * _967;
        float _1026 = _1001 + _1023;
        float _1027 = _1002 + _1024;
        float _1028 = _1003 + _1025;
        _1030 = _1026;
        _1031 = _1027;
        _1032 = _1028;
      } else {
        _1030 = 1.0f;
        _1031 = 1.0f;
        _1032 = 1.0f;
      }
      float _1033 = saturate(_1030);
      float _1034 = saturate(_1031);
      float _1035 = saturate(_1032);
      _1419 = _1033;
      _1420 = _1034;
      _1421 = _1035;
      _1422 = 0.0f;
      _1423 = fOptimizedParam.x;
      _1424 = fOptimizedParam.y;
      _1425 = fOptimizedParam.z;
      _1426 = fOptimizedParam.w;
      _1427 = 1.0f;
    } else {
      if (!_54) {
        uint _1038 = uint(SV_Position.x);
        uint _1039 = uint(SV_Position.y);
        float4 _1041 = RE_POSTPROCESS_Color.Load(int3(_1038, _1039, 0));
        _1304 = _1041.x;
        _1305 = _1041.y;
        _1306 = _1041.z;
      } else {
        float _1049 = screenInverseSize.x * SV_Position.x;
        float _1050 = screenInverseSize.y * SV_Position.y;
        int _1053 = (uint)(fHazeFilterAttribute) & 2;
        bool _1054 = (_1053 != 0);
        int _1055 = (uint)(fHazeFilterAttribute) & 4;
        bool _1056 = (_1055 == 0);
        float _1059 = tFilterTempMap1.Sample(BilinearWrap, float2(_1049, _1050));
        if (_1054) {
          float _1064 = ReadonlyDepth.SampleLevel(PointClamp, float2(_1049, _1050), 0.0f);
          float _1066 = SV_Position.x * 2.0f;
          float _1067 = _1066 * screenInverseSize.x;
          float _1068 = SV_Position.y * 2.0f;
          float _1069 = _1068 * screenInverseSize.y;
          float _1070 = _1067 + -1.0f;
          float _1071 = 1.0f - _1069;
          float _1092 = _1070 * (viewProjInvMat[0].x);
          float _1093 = mad(_1071, (viewProjInvMat[1].x), _1092);
          float _1094 = mad(_1064.x, (viewProjInvMat[2].x), _1093);
          float _1095 = _1094 + (viewProjInvMat[3].x);
          float _1096 = _1070 * (viewProjInvMat[0].y);
          float _1097 = mad(_1071, (viewProjInvMat[1].y), _1096);
          float _1098 = mad(_1064.x, (viewProjInvMat[2].y), _1097);
          float _1099 = _1098 + (viewProjInvMat[3].y);
          float _1100 = _1070 * (viewProjInvMat[0].z);
          float _1101 = mad(_1071, (viewProjInvMat[1].z), _1100);
          float _1102 = mad(_1064.x, (viewProjInvMat[2].z), _1101);
          float _1103 = _1102 + (viewProjInvMat[3].z);
          float _1104 = _1070 * (viewProjInvMat[0].w);
          float _1105 = mad(_1071, (viewProjInvMat[1].w), _1104);
          float _1106 = mad(_1064.x, (viewProjInvMat[2].w), _1105);
          float _1107 = _1106 + (viewProjInvMat[3].w);
          float _1108 = 1.0f / _1107;
          float _1109 = _1108 * _1095;
          float _1110 = _1108 * _1099;
          float _1111 = _1108 * _1103;
          float _1118 = _1109 - (transposeViewInvMat[0].w);
          float _1119 = _1110 - (transposeViewInvMat[1].w);
          float _1120 = _1111 - (transposeViewInvMat[2].w);
          float _1121 = _1118 * _1118;
          float _1122 = _1119 * _1119;
          float _1123 = _1122 + _1121;
          float _1124 = _1120 * _1120;
          float _1125 = _1123 + _1124;
          float _1126 = sqrt(_1125);
          float _1129 = _1126 - fHazeFilterStart;
          float _1131 = _1129 * fHazeFilterInverseRange;
          float _1133 = _1110 - fHazeFilterHeightStart;
          float _1135 = _1133 * fHazeFilterHeightInverseRange;
          float _1136 = max(_1131, _1135);
          float _1137 = _1059.x * _1136;
          float _1138 = saturate(_1137);
          _1145 = _1138;
          _1146 = _1064.x;
        } else {
          int _1140 = (uint)(fHazeFilterAttribute) & 1;
          bool _1141 = (_1140 != 0);
          float _1142 = 1.0f - _1059.x;
          float _1143 = select(_1141, _1142, _1059.x);
          _1145 = _1143;
          _1146 = 0.0f;
        }
        float _1151 = -0.0f - _1050;
        float _1164 = (transposeViewInvMat[0].x) * _1049;
        float _1165 = mad(_1151, (transposeViewInvMat[0].y), _1164);
        float _1166 = mad(-1.0f, (transposeViewInvMat[0].z), _1165);
        float _1167 = (transposeViewInvMat[1].x) * _1049;
        float _1168 = mad(_1151, (transposeViewInvMat[1].y), _1167);
        float _1169 = mad(-1.0f, (transposeViewInvMat[1].z), _1168);
        float _1170 = (transposeViewInvMat[2].x) * _1049;
        float _1171 = mad(_1151, (transposeViewInvMat[2].y), _1170);
        float _1172 = mad(-1.0f, (transposeViewInvMat[2].z), _1171);
        float _1174 = fHazeFilterUVWOffset.w * _1166;
        float _1175 = fHazeFilterUVWOffset.w * _1169;
        float _1176 = fHazeFilterUVWOffset.w * _1172;
        float _1177 = _1174 + fHazeFilterUVWOffset.x;
        float _1178 = _1175 + fHazeFilterUVWOffset.y;
        float _1179 = _1176 + fHazeFilterUVWOffset.z;
        float _1182 = tVolumeMap.Sample(BilinearWrap, float3(_1177, _1178, _1179));
        float _1184 = _1182.x * 0.5f;
        float _1185 = _1174 * 2.0f;
        float _1186 = _1175 * 2.0f;
        float _1187 = _1176 * 2.0f;
        float _1188 = _1185 + fHazeFilterUVWOffset.x;
        float _1189 = _1186 + fHazeFilterUVWOffset.y;
        float _1190 = _1187 + fHazeFilterUVWOffset.z;
        float _1191 = tVolumeMap.Sample(BilinearWrap, float3(_1188, _1189, _1190));
        float _1193 = _1191.x * 0.25f;
        float _1194 = _1193 + _1184;
        float _1195 = _1174 * 4.0f;
        float _1196 = _1175 * 4.0f;
        float _1197 = _1176 * 4.0f;
        float _1198 = _1195 + fHazeFilterUVWOffset.x;
        float _1199 = _1196 + fHazeFilterUVWOffset.y;
        float _1200 = _1197 + fHazeFilterUVWOffset.z;
        float _1201 = tVolumeMap.Sample(BilinearWrap, float3(_1198, _1199, _1200));
        float _1203 = _1201.x * 0.125f;
        float _1204 = _1194 + _1203;
        float _1205 = _1174 * 8.0f;
        float _1206 = _1175 * 8.0f;
        float _1207 = _1176 * 8.0f;
        float _1208 = _1205 + fHazeFilterUVWOffset.x;
        float _1209 = _1206 + fHazeFilterUVWOffset.y;
        float _1210 = _1207 + fHazeFilterUVWOffset.z;
        float _1211 = tVolumeMap.Sample(BilinearWrap, float3(_1208, _1209, _1210));
        float _1213 = _1211.x * 0.0625f;
        float _1214 = _1204 + _1213;
        float _1215 = fHazeFilterUVWOffset.x + 0.5f;
        float _1216 = fHazeFilterUVWOffset.y + 0.5f;
        float _1217 = fHazeFilterUVWOffset.z + 0.5f;
        float _1218 = _1174 + _1215;
        float _1219 = _1175 + _1216;
        float _1220 = _1176 + _1217;
        float _1221 = tVolumeMap.Sample(BilinearWrap, float3(_1218, _1219, _1220));
        float _1223 = _1221.x * 0.5f;
        float _1224 = _1185 + _1215;
        float _1225 = _1186 + _1216;
        float _1226 = _1187 + _1217;
        float _1227 = tVolumeMap.Sample(BilinearWrap, float3(_1224, _1225, _1226));
        float _1229 = _1227.x * 0.25f;
        float _1230 = _1229 + _1223;
        float _1231 = _1195 + _1215;
        float _1232 = _1196 + _1216;
        float _1233 = _1197 + _1217;
        float _1234 = tVolumeMap.Sample(BilinearWrap, float3(_1231, _1232, _1233));
        float _1236 = _1234.x * 0.125f;
        float _1237 = _1230 + _1236;
        float _1238 = _1205 + _1215;
        float _1239 = _1206 + _1216;
        float _1240 = _1207 + _1217;
        float _1241 = tVolumeMap.Sample(BilinearWrap, float3(_1238, _1239, _1240));
        float _1243 = _1241.x * 0.0625f;
        float _1244 = _1237 + _1243;
        float _1245 = _1214 * 2.0f;
        float _1246 = _1244 * 2.0f;
        float _1247 = _1245 + -1.0f;
        float _1248 = _1246 + -1.0f;
        float _1249 = _1247 * _1145;
        float _1252 = _1249 * fHazeFilterScale;
        float _1253 = fHazeFilterScale * _1145;
        float _1254 = _1253 * _1248;
        if (!_1056) {
          float _1256 = _1049 + -0.5f;
          float _1257 = _1050 + -0.5f;
          float _1258 = abs(_1256);
          float _1259 = abs(_1257);
          float _1261 = _1258 - fHazeFilterBorder;
          float _1262 = _1259 - fHazeFilterBorder;
          float _1263 = max(_1261, 0.0f);
          float _1264 = max(_1262, 0.0f);
          float _1265 = min(_1263, 1.0f);
          float _1266 = min(_1264, 1.0f);
          float _1267 = 0.5f / fHazeFilterBorder;
          float _1268 = _1267 * _1265;
          float _1269 = _1267 * _1266;
          float _1271 = _1268 * fHazeFilterBorderFade;
          float _1272 = _1269 * fHazeFilterBorderFade;
          float _1273 = max(_1271, _1272);
          float _1274 = saturate(_1273);
          float _1275 = _1274 * _1252;
          float _1276 = _1274 * _1254;
          float _1277 = _1252 - _1275;
          float _1278 = _1254 - _1276;
          _1280 = _1277;
          _1281 = _1278;
        } else {
          _1280 = _1252;
          _1281 = _1254;
        }
        if (_1054) {
          float _1283 = _1280 + _1049;
          float _1284 = _1281 + _1050;
          float _1286 = ReadonlyDepth.Sample(BilinearWrap, float2(_1283, _1284));
          float _1288 = _1286.x - _1146;
          bool _1290 = !(_1288 >= fHazeFilterDepthDiffBias);
          if (!_1290) {
            _1293 = 0.0f;
            _1294 = 0.0f;
          } else {
            _1293 = _1280;
            _1294 = _1281;
          }
        } else {
          _1293 = _1280;
          _1294 = _1281;
        }
        float _1295 = _1293 + _1049;
        float _1296 = _1294 + _1050;
        float4 _1299 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_1295, _1296));
        _1304 = _1299.x;
        _1305 = _1299.y;
        _1306 = _1299.z;
      }
      float _1307 = _1304 * Exposure;
      float _1308 = _1305 * Exposure;
      float _1309 = _1306 * Exposure;
      untonemapped = float3(_1307, _1308, _1309);

      float _1310 = max(_1307, _1308);
      float _1311 = max(_1310, _1309);
      bool _1312 = isfinite(_1311);
      if (_1312) {
        float _1318 = invLinearBegin * _1307;
        bool _1319 = (_1307 >= linearBegin);
        float _1320 = _1318 * _1318;
        float _1321 = _1318 * 2.0f;
        float _1322 = 3.0f - _1321;
        float _1323 = _1320 * _1322;
        float _1324 = invLinearBegin * _1308;
        bool _1325 = (_1308 >= linearBegin);
        float _1326 = _1324 * _1324;
        float _1327 = _1324 * 2.0f;
        float _1328 = 3.0f - _1327;
        float _1329 = _1326 * _1328;
        float _1330 = invLinearBegin * _1309;
        bool _1331 = (_1309 >= linearBegin);
        float _1332 = _1330 * _1330;
        float _1333 = _1330 * 2.0f;
        float _1334 = 3.0f - _1333;
        float _1335 = _1332 * _1334;
        float _1336 = 1.0f - _1323;
        float _1337 = select(_1319, 0.0f, _1336);
        float _1338 = 1.0f - _1329;
        float _1339 = select(_1325, 0.0f, _1338);
        float _1340 = 1.0f - _1335;
        float _1341 = select(_1331, 0.0f, _1340);
        bool _1344 = (_1307 < linearStart);
        bool _1345 = (_1308 < linearStart);
        bool _1346 = (_1309 < linearStart);
        float _1347 = select(_1344, 0.0f, 1.0f);
        float _1348 = select(_1345, 0.0f, 1.0f);
        float _1349 = select(_1346, 0.0f, 1.0f);
        float _1350 = 1.0f - _1347;
        float _1351 = _1350 - _1337;
        float _1352 = 1.0f - _1348;
        float _1353 = _1352 - _1339;
        float _1354 = 1.0f - _1349;
        float _1355 = _1354 - _1341;
        float _1357 = log2(_1318);
        float _1358 = log2(_1324);
        float _1359 = log2(_1330);
        float _1360 = _1357 * toe;
        float _1361 = _1358 * toe;
        float _1362 = _1359 * toe;
        float _1363 = exp2(_1360);
        float _1364 = exp2(_1361);
        float _1365 = exp2(_1362);
        float _1366 = _1363 * _1337;
        float _1367 = _1366 * linearBegin;
        float _1368 = _1364 * _1339;
        float _1369 = _1368 * linearBegin;
        float _1370 = _1365 * _1341;
        float _1371 = _1370 * linearBegin;
        float _1373 = contrast * _1307;
        float _1374 = contrast * _1308;
        float _1375 = contrast * _1309;
        float _1377 = _1373 + madLinearStartContrastFactor;
        float _1378 = _1374 + madLinearStartContrastFactor;
        float _1379 = _1375 + madLinearStartContrastFactor;
        float _1380 = _1377 * _1351;
        float _1381 = _1378 * _1353;
        float _1382 = _1379 * _1355;
        float _1383 = _1380 + _1367;
        float _1384 = _1381 + _1369;
        float _1385 = _1382 + _1371;
        float _1389 = contrastFactor * _1307;
        float _1390 = contrastFactor * _1308;
        float _1391 = contrastFactor * _1309;
        float _1393 = _1389 + mulLinearStartContrastFactor;
        float _1394 = _1390 + mulLinearStartContrastFactor;
        float _1395 = _1391 + mulLinearStartContrastFactor;
        float _1396 = exp2(_1393);
        float _1397 = exp2(_1394);
        float _1398 = exp2(_1395);
        float _1399 = _1396 * displayMaxNitSubContrastFactor;
        float _1400 = _1397 * displayMaxNitSubContrastFactor;
        float _1401 = _1398 * displayMaxNitSubContrastFactor;
        float _1402 = maxNit - _1399;
        float _1403 = maxNit - _1400;
        float _1404 = maxNit - _1401;
        float _1405 = _1402 * _1347;
        float _1406 = _1403 * _1348;
        float _1407 = _1404 * _1349;
        float _1408 = _1383 + _1405;
        float _1409 = _1384 + _1406;
        float _1410 = _1385 + _1407;
        _1412 = _1408;
        _1413 = _1409;
        _1414 = _1410;
      } else {
        _1412 = 1.0f;
        _1413 = 1.0f;
        _1414 = 1.0f;
      }
      float _1415 = saturate(_1412);
      float _1416 = saturate(_1413);
      float _1417 = saturate(_1414);
      _1419 = _1415;
      _1420 = _1416;
      _1421 = _1417;
      _1422 = 0.0f;
      _1423 = 0.0f;
      _1424 = 0.0f;
      _1425 = 0.0f;
      _1426 = 0.0f;
      _1427 = 1.0f;
    }
  }

  int _1428 = (uint)(cPassEnabled) & 32;
  bool _1429 = (_1428 == 0);
  if (!_1429) {
    int _1447 = (uint)(cbRadialBlurFlags) & 2;
    bool _1448 = (_1447 != 0);
    float _1449 = float((bool)_1448);
    float _1450 = 1.0f - _1449;
    float _1453 = ComputeResultSRV[0].computeAlpha;
    float _1454 = _1453 * _1449;
    float _1455 = _1450 + _1454;
    float _1456 = _1455 * cbRadialColor.w;
    bool _1457 = (_1456 == 0.0f);
    if (!_1457) {
      float _1463 = screenInverseSize.x * SV_Position.x;
      float _1464 = screenInverseSize.y * SV_Position.y;
      float _1465 = -0.5f - cbRadialScreenPos.x;
      float _1466 = _1465 + _1463;
      float _1467 = -0.5f - cbRadialScreenPos.y;
      float _1468 = _1467 + _1464;
      bool _1469 = (_1466 < 0.0f);
      float _1470 = 1.0f - _1463;
      float _1471 = select(_1469, _1470, _1463);
      bool _1472 = (_1468 < 0.0f);
      float _1473 = 1.0f - _1464;
      float _1474 = select(_1472, _1473, _1464);
      int _1475 = (uint)(cbRadialBlurFlags) & 1;
      bool _1476 = (_1475 != 0);
      float _1477 = dot(float2(_1466, _1468), float2(_1466, _1468));
      float _1478 = rsqrt(_1477);
      float _1479 = _1478 * cbRadialSharpRange;
      float _1480 = _1479 * _1466;
      float _1481 = _1479 * _1468;
      float _1482 = abs(_1480);
      float _1483 = abs(_1481);
      uint _1484 = uint(_1482);
      uint _1485 = uint(_1483);
      uint _1486 = _1485 + _1484;
      int _1487 = _1486 ^ 61;
      int _1488 = (uint)(_1486) >> 16;
      int _1489 = _1487 ^ _1488;
      uint _1490 = _1489 * 9;
      int _1491 = (uint)(_1490) >> 4;
      int _1492 = _1491 ^ _1490;
      uint _1493 = _1492 * 668265261;
      int _1494 = (uint)(_1493) >> 15;
      int _1495 = _1494 ^ _1493;
      float _1496 = float((uint)_1495);
      float _1497 = _1496 * 2.3283064365386963e-10f;
      float _1498 = select(_1476, _1497, 1.0f);
      float _1499 = _1466 * _1466;
      float _1500 = _1468 * _1468;
      float _1501 = _1499 + _1500;
      float _1502 = sqrt(_1501);
      float _1503 = max(1.0f, _1502);
      float _1504 = 1.0f / _1503;
      float _1505 = cbRadialBlurPower * -0.0011111111380159855f;
      float _1506 = _1505 * _1471;
      float _1507 = _1506 * _1498;
      float _1508 = _1507 * _1504;
      float _1509 = _1505 * _1474;
      float _1510 = _1509 * _1498;
      float _1511 = _1510 * _1504;
      float _1512 = _1508 + 1.0f;
      float _1513 = _1511 + 1.0f;
      float _1514 = _1512 * _1466;
      float _1515 = _1513 * _1468;
      float _1517 = cbRadialBlurPower * -0.002222222276031971f;
      float _1518 = _1517 * _1471;
      float _1519 = _1518 * _1498;
      float _1520 = _1519 * _1504;
      float _1521 = _1517 * _1474;
      float _1522 = _1521 * _1498;
      float _1523 = _1522 * _1504;
      float _1524 = _1520 + 1.0f;
      float _1525 = _1523 + 1.0f;
      float _1526 = _1524 * _1466;
      float _1527 = _1525 * _1468;
      float _1528 = cbRadialBlurPower * -0.0033333334140479565f;
      float _1529 = _1528 * _1471;
      float _1530 = _1529 * _1498;
      float _1531 = _1530 * _1504;
      float _1532 = _1528 * _1474;
      float _1533 = _1532 * _1498;
      float _1534 = _1533 * _1504;
      float _1535 = _1531 + 1.0f;
      float _1536 = _1534 + 1.0f;
      float _1537 = _1535 * _1466;
      float _1538 = _1536 * _1468;
      float _1539 = cbRadialBlurPower * -0.004444444552063942f;
      float _1540 = _1539 * _1471;
      float _1541 = _1540 * _1498;
      float _1542 = _1541 * _1504;
      float _1543 = _1539 * _1474;
      float _1544 = _1543 * _1498;
      float _1545 = _1544 * _1504;
      float _1546 = _1542 + 1.0f;
      float _1547 = _1545 + 1.0f;
      float _1548 = _1546 * _1466;
      float _1549 = _1547 * _1468;
      float _1550 = cbRadialBlurPower * -0.0055555556900799274f;
      float _1551 = _1550 * _1471;
      float _1552 = _1551 * _1498;
      float _1553 = _1552 * _1504;
      float _1554 = _1550 * _1474;
      float _1555 = _1554 * _1498;
      float _1556 = _1555 * _1504;
      float _1557 = _1553 + 1.0f;
      float _1558 = _1556 + 1.0f;
      float _1559 = _1557 * _1466;
      float _1560 = _1558 * _1468;
      float _1561 = cbRadialBlurPower * -0.006666666828095913f;
      float _1562 = _1561 * _1471;
      float _1563 = _1562 * _1498;
      float _1564 = _1563 * _1504;
      float _1565 = _1561 * _1474;
      float _1566 = _1565 * _1498;
      float _1567 = _1566 * _1504;
      float _1568 = _1564 + 1.0f;
      float _1569 = _1567 + 1.0f;
      float _1570 = _1568 * _1466;
      float _1571 = _1569 * _1468;
      float _1572 = cbRadialBlurPower * -0.007777777966111898f;
      float _1573 = _1572 * _1471;
      float _1574 = _1573 * _1498;
      float _1575 = _1574 * _1504;
      float _1576 = _1572 * _1474;
      float _1577 = _1576 * _1498;
      float _1578 = _1577 * _1504;
      float _1579 = _1575 + 1.0f;
      float _1580 = _1578 + 1.0f;
      float _1581 = _1579 * _1466;
      float _1582 = _1580 * _1468;
      float _1583 = cbRadialBlurPower * -0.008888889104127884f;
      float _1584 = _1583 * _1471;
      float _1585 = _1584 * _1498;
      float _1586 = _1585 * _1504;
      float _1587 = _1583 * _1474;
      float _1588 = _1587 * _1498;
      float _1589 = _1588 * _1504;
      float _1590 = _1586 + 1.0f;
      float _1591 = _1589 + 1.0f;
      float _1592 = _1590 * _1466;
      float _1593 = _1591 * _1468;
      float _1594 = cbRadialBlurPower * -0.009999999776482582f;
      float _1595 = _1594 * _1471;
      float _1596 = _1595 * _1498;
      float _1597 = _1596 * _1504;
      float _1598 = _1594 * _1474;
      float _1599 = _1598 * _1498;
      float _1600 = _1599 * _1504;
      float _1601 = _1597 + 1.0f;
      float _1602 = _1600 + 1.0f;
      float _1603 = _1601 * _1466;
      float _1604 = _1602 * _1468;
      float _1605 = Exposure * 0.10000000149011612f;
      float _1606 = _1605 * cbRadialColor.x;
      float _1607 = _1605 * cbRadialColor.y;
      float _1608 = _1605 * cbRadialColor.z;
      if (_50) {
        float _1610 = _1514 + cbRadialScreenPos.x;
        float _1611 = _1515 + cbRadialScreenPos.y;
        float _1612 = dot(float2(_1610, _1611), float2(_1610, _1611));
        float _1613 = _1612 * _1422;
        float _1614 = _1613 + 1.0f;
        float _1615 = _1614 * _1427;
        float _1616 = _1615 * _1610;
        float _1617 = _1615 * _1611;
        float _1618 = _1616 + 0.5f;
        float _1619 = _1617 + 0.5f;
        float4 _1621 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1618, _1619), 0.0f);
        float _1625 = _1526 + cbRadialScreenPos.x;
        float _1626 = _1527 + cbRadialScreenPos.y;
        float _1627 = dot(float2(_1625, _1626), float2(_1625, _1626));
        float _1628 = _1627 * _1422;
        float _1629 = _1628 + 1.0f;
        float _1630 = _1625 * _1427;
        float _1631 = _1630 * _1629;
        float _1632 = _1626 * _1427;
        float _1633 = _1632 * _1629;
        float _1634 = _1631 + 0.5f;
        float _1635 = _1633 + 0.5f;
        float4 _1636 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1634, _1635), 0.0f);
        float _1640 = _1636.x + _1621.x;
        float _1641 = _1636.y + _1621.y;
        float _1642 = _1636.z + _1621.z;
        float _1643 = _1537 + cbRadialScreenPos.x;
        float _1644 = _1538 + cbRadialScreenPos.y;
        float _1645 = dot(float2(_1643, _1644), float2(_1643, _1644));
        float _1646 = _1645 * _1422;
        float _1647 = _1646 + 1.0f;
        float _1648 = _1643 * _1427;
        float _1649 = _1648 * _1647;
        float _1650 = _1644 * _1427;
        float _1651 = _1650 * _1647;
        float _1652 = _1649 + 0.5f;
        float _1653 = _1651 + 0.5f;
        float4 _1654 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1652, _1653), 0.0f);
        float _1658 = _1640 + _1654.x;
        float _1659 = _1641 + _1654.y;
        float _1660 = _1642 + _1654.z;
        float _1661 = _1548 + cbRadialScreenPos.x;
        float _1662 = _1549 + cbRadialScreenPos.y;
        float _1663 = dot(float2(_1661, _1662), float2(_1661, _1662));
        float _1664 = _1663 * _1422;
        float _1665 = _1664 + 1.0f;
        float _1666 = _1661 * _1427;
        float _1667 = _1666 * _1665;
        float _1668 = _1662 * _1427;
        float _1669 = _1668 * _1665;
        float _1670 = _1667 + 0.5f;
        float _1671 = _1669 + 0.5f;
        float4 _1672 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1670, _1671), 0.0f);
        float _1676 = _1658 + _1672.x;
        float _1677 = _1659 + _1672.y;
        float _1678 = _1660 + _1672.z;
        float _1679 = _1559 + cbRadialScreenPos.x;
        float _1680 = _1560 + cbRadialScreenPos.y;
        float _1681 = dot(float2(_1679, _1680), float2(_1679, _1680));
        float _1682 = _1681 * _1422;
        float _1683 = _1682 + 1.0f;
        float _1684 = _1679 * _1427;
        float _1685 = _1684 * _1683;
        float _1686 = _1680 * _1427;
        float _1687 = _1686 * _1683;
        float _1688 = _1685 + 0.5f;
        float _1689 = _1687 + 0.5f;
        float4 _1690 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1688, _1689), 0.0f);
        float _1694 = _1676 + _1690.x;
        float _1695 = _1677 + _1690.y;
        float _1696 = _1678 + _1690.z;
        float _1697 = _1570 + cbRadialScreenPos.x;
        float _1698 = _1571 + cbRadialScreenPos.y;
        float _1699 = dot(float2(_1697, _1698), float2(_1697, _1698));
        float _1700 = _1699 * _1422;
        float _1701 = _1700 + 1.0f;
        float _1702 = _1697 * _1427;
        float _1703 = _1702 * _1701;
        float _1704 = _1698 * _1427;
        float _1705 = _1704 * _1701;
        float _1706 = _1703 + 0.5f;
        float _1707 = _1705 + 0.5f;
        float4 _1708 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1706, _1707), 0.0f);
        float _1712 = _1694 + _1708.x;
        float _1713 = _1695 + _1708.y;
        float _1714 = _1696 + _1708.z;
        float _1715 = _1581 + cbRadialScreenPos.x;
        float _1716 = _1582 + cbRadialScreenPos.y;
        float _1717 = dot(float2(_1715, _1716), float2(_1715, _1716));
        float _1718 = _1717 * _1422;
        float _1719 = _1718 + 1.0f;
        float _1720 = _1715 * _1427;
        float _1721 = _1720 * _1719;
        float _1722 = _1716 * _1427;
        float _1723 = _1722 * _1719;
        float _1724 = _1721 + 0.5f;
        float _1725 = _1723 + 0.5f;
        float4 _1726 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1724, _1725), 0.0f);
        float _1730 = _1712 + _1726.x;
        float _1731 = _1713 + _1726.y;
        float _1732 = _1714 + _1726.z;
        float _1733 = _1592 + cbRadialScreenPos.x;
        float _1734 = _1593 + cbRadialScreenPos.y;
        float _1735 = dot(float2(_1733, _1734), float2(_1733, _1734));
        float _1736 = _1735 * _1422;
        float _1737 = _1736 + 1.0f;
        float _1738 = _1733 * _1427;
        float _1739 = _1738 * _1737;
        float _1740 = _1734 * _1427;
        float _1741 = _1740 * _1737;
        float _1742 = _1739 + 0.5f;
        float _1743 = _1741 + 0.5f;
        float4 _1744 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1742, _1743), 0.0f);
        float _1748 = _1730 + _1744.x;
        float _1749 = _1731 + _1744.y;
        float _1750 = _1732 + _1744.z;
        float _1751 = _1603 + cbRadialScreenPos.x;
        float _1752 = _1604 + cbRadialScreenPos.y;
        float _1753 = dot(float2(_1751, _1752), float2(_1751, _1752));
        float _1754 = _1753 * _1422;
        float _1755 = _1754 + 1.0f;
        float _1756 = _1751 * _1427;
        float _1757 = _1756 * _1755;
        float _1758 = _1752 * _1427;
        float _1759 = _1758 * _1755;
        float _1760 = _1757 + 0.5f;
        float _1761 = _1759 + 0.5f;
        float4 _1762 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1760, _1761), 0.0f);
        float _1766 = _1748 + _1762.x;
        float _1767 = _1749 + _1762.y;
        float _1768 = _1750 + _1762.z;
        float _1769 = _1606 * _1766;
        float _1770 = _1607 * _1767;
        float _1771 = _1608 * _1768;
        float _1772 = max(_1769, _1770);
        float _1773 = max(_1772, _1771);
        bool _1774 = isfinite(_1773);
        if (_1774) {
          float _1780 = invLinearBegin * _1769;
          bool _1781 = (_1769 >= linearBegin);
          float _1782 = _1780 * _1780;
          float _1783 = _1780 * 2.0f;
          float _1784 = 3.0f - _1783;
          float _1785 = _1782 * _1784;
          float _1786 = invLinearBegin * _1770;
          bool _1787 = (_1770 >= linearBegin);
          float _1788 = _1786 * _1786;
          float _1789 = _1786 * 2.0f;
          float _1790 = 3.0f - _1789;
          float _1791 = _1788 * _1790;
          float _1792 = invLinearBegin * _1771;
          bool _1793 = (_1771 >= linearBegin);
          float _1794 = _1792 * _1792;
          float _1795 = _1792 * 2.0f;
          float _1796 = 3.0f - _1795;
          float _1797 = _1794 * _1796;
          float _1798 = 1.0f - _1785;
          float _1799 = select(_1781, 0.0f, _1798);
          float _1800 = 1.0f - _1791;
          float _1801 = select(_1787, 0.0f, _1800);
          float _1802 = 1.0f - _1797;
          float _1803 = select(_1793, 0.0f, _1802);
          bool _1806 = (_1769 < linearStart);
          bool _1807 = (_1770 < linearStart);
          bool _1808 = (_1771 < linearStart);
          float _1809 = select(_1806, 0.0f, 1.0f);
          float _1810 = select(_1807, 0.0f, 1.0f);
          float _1811 = select(_1808, 0.0f, 1.0f);
          float _1812 = 1.0f - _1809;
          float _1813 = _1812 - _1799;
          float _1814 = 1.0f - _1810;
          float _1815 = _1814 - _1801;
          float _1816 = 1.0f - _1811;
          float _1817 = _1816 - _1803;
          float _1819 = log2(_1780);
          float _1820 = log2(_1786);
          float _1821 = log2(_1792);
          float _1822 = _1819 * toe;
          float _1823 = _1820 * toe;
          float _1824 = _1821 * toe;
          float _1825 = exp2(_1822);
          float _1826 = exp2(_1823);
          float _1827 = exp2(_1824);
          float _1828 = _1825 * _1799;
          float _1829 = _1828 * linearBegin;
          float _1830 = _1826 * _1801;
          float _1831 = _1830 * linearBegin;
          float _1832 = _1827 * _1803;
          float _1833 = _1832 * linearBegin;
          float _1835 = contrast * _1769;
          float _1836 = contrast * _1770;
          float _1837 = contrast * _1771;
          float _1839 = _1835 + madLinearStartContrastFactor;
          float _1840 = _1836 + madLinearStartContrastFactor;
          float _1841 = _1837 + madLinearStartContrastFactor;
          float _1842 = _1839 * _1813;
          float _1843 = _1840 * _1815;
          float _1844 = _1841 * _1817;
          float _1845 = _1842 + _1829;
          float _1846 = _1843 + _1831;
          float _1847 = _1844 + _1833;
          float _1851 = contrastFactor * _1769;
          float _1852 = contrastFactor * _1770;
          float _1853 = contrastFactor * _1771;
          float _1855 = _1851 + mulLinearStartContrastFactor;
          float _1856 = _1852 + mulLinearStartContrastFactor;
          float _1857 = _1853 + mulLinearStartContrastFactor;
          float _1858 = exp2(_1855);
          float _1859 = exp2(_1856);
          float _1860 = exp2(_1857);
          float _1861 = _1858 * displayMaxNitSubContrastFactor;
          float _1862 = _1859 * displayMaxNitSubContrastFactor;
          float _1863 = _1860 * displayMaxNitSubContrastFactor;
          float _1864 = maxNit - _1861;
          float _1865 = maxNit - _1862;
          float _1866 = maxNit - _1863;
          float _1867 = _1864 * _1809;
          float _1868 = _1865 * _1810;
          float _1869 = _1866 * _1811;
          float _1870 = _1845 + _1867;
          float _1871 = _1846 + _1868;
          float _1872 = _1847 + _1869;
          _1874 = _1870;
          _1875 = _1871;
          _1876 = _1872;
        } else {
          _1874 = 1.0f;
          _1875 = 1.0f;
          _1876 = 1.0f;
        }
        float _1877 = saturate(_1874);
        float _1878 = saturate(_1875);
        float _1879 = saturate(_1876);
        float _1880 = _1419 * 0.10000000149011612f;
        float _1881 = _1880 * cbRadialColor.x;
        float _1882 = _1420 * 0.10000000149011612f;
        float _1883 = _1882 * cbRadialColor.y;
        float _1884 = _1421 * 0.10000000149011612f;
        float _1885 = _1884 * cbRadialColor.z;
        float _1886 = _1877 + _1881;
        float _1887 = _1878 + _1883;
        float _1888 = _1879 + _1885;
        _2465 = _1886;
        _2466 = _1887;
        _2467 = _1888;
      } else {
        float _1890 = cbRadialScreenPos.x + 0.5f;
        float _1891 = _1890 + _1514;
        float _1892 = cbRadialScreenPos.y + 0.5f;
        float _1893 = _1892 + _1515;
        float _1894 = _1890 + _1526;
        float _1895 = _1892 + _1527;
        float _1896 = _1890 + _1537;
        float _1897 = _1892 + _1538;
        float _1898 = _1890 + _1548;
        float _1899 = _1892 + _1549;
        float _1900 = _1890 + _1559;
        float _1901 = _1892 + _1560;
        float _1902 = _1890 + _1570;
        float _1903 = _1892 + _1571;
        float _1904 = _1890 + _1581;
        float _1905 = _1892 + _1582;
        float _1906 = _1890 + _1592;
        float _1907 = _1892 + _1593;
        float _1908 = _1890 + _1603;
        float _1909 = _1892 + _1604;
        if (_52) {
          float _1911 = _1891 * 2.0f;
          float _1912 = _1893 * 2.0f;
          float _1913 = _1911 + -1.0f;
          float _1914 = _1912 + -1.0f;
          float _1915 = _1913 * _1913;
          float _1916 = _1915 + 1.0f;
          float _1917 = sqrt(_1916);
          float _1918 = 1.0f / _1917;
          float _1919 = _1918 + _1423;
          float _1920 = _1917 * _1425;
          float _1921 = _1920 * _1919;
          float _1922 = _1918 + -1.0f;
          float _1923 = _1922 * _1424;
          float _1924 = _1923 + 1.0f;
          float _1925 = _1426 * 0.5f;
          float _1926 = _1925 * _1921;
          float _1927 = _1926 * _1913;
          float _1928 = _1925 * _1924;
          float _1929 = _1928 * _1921;
          float _1930 = _1929 * _1914;
          float _1931 = _1927 + 0.5f;
          float _1932 = _1930 + 0.5f;
          float4 _1934 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1931, _1932), 0.0f);
          float _1938 = _1894 * 2.0f;
          float _1939 = _1895 * 2.0f;
          float _1940 = _1938 + -1.0f;
          float _1941 = _1939 + -1.0f;
          float _1942 = _1940 * _1940;
          float _1943 = _1942 + 1.0f;
          float _1944 = sqrt(_1943);
          float _1945 = 1.0f / _1944;
          float _1946 = _1945 + _1423;
          float _1947 = _1944 * _1425;
          float _1948 = _1947 * _1946;
          float _1949 = _1945 + -1.0f;
          float _1950 = _1949 * _1424;
          float _1951 = _1950 + 1.0f;
          float _1952 = _1925 * _1940;
          float _1953 = _1952 * _1948;
          float _1954 = _1925 * _1941;
          float _1955 = _1954 * _1951;
          float _1956 = _1955 * _1948;
          float _1957 = _1953 + 0.5f;
          float _1958 = _1956 + 0.5f;
          float4 _1959 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1957, _1958), 0.0f);
          float _1963 = _1959.x + _1934.x;
          float _1964 = _1959.y + _1934.y;
          float _1965 = _1959.z + _1934.z;
          float _1966 = _1896 * 2.0f;
          float _1967 = _1897 * 2.0f;
          float _1968 = _1966 + -1.0f;
          float _1969 = _1967 + -1.0f;
          float _1970 = _1968 * _1968;
          float _1971 = _1970 + 1.0f;
          float _1972 = sqrt(_1971);
          float _1973 = 1.0f / _1972;
          float _1974 = _1973 + _1423;
          float _1975 = _1972 * _1425;
          float _1976 = _1975 * _1974;
          float _1977 = _1973 + -1.0f;
          float _1978 = _1977 * _1424;
          float _1979 = _1978 + 1.0f;
          float _1980 = _1925 * _1968;
          float _1981 = _1980 * _1976;
          float _1982 = _1925 * _1969;
          float _1983 = _1982 * _1979;
          float _1984 = _1983 * _1976;
          float _1985 = _1981 + 0.5f;
          float _1986 = _1984 + 0.5f;
          float4 _1987 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1985, _1986), 0.0f);
          float _1991 = _1963 + _1987.x;
          float _1992 = _1964 + _1987.y;
          float _1993 = _1965 + _1987.z;
          float _1994 = _1898 * 2.0f;
          float _1995 = _1899 * 2.0f;
          float _1996 = _1994 + -1.0f;
          float _1997 = _1995 + -1.0f;
          float _1998 = _1996 * _1996;
          float _1999 = _1998 + 1.0f;
          float _2000 = sqrt(_1999);
          float _2001 = 1.0f / _2000;
          float _2002 = _2001 + _1423;
          float _2003 = _2000 * _1425;
          float _2004 = _2003 * _2002;
          float _2005 = _2001 + -1.0f;
          float _2006 = _2005 * _1424;
          float _2007 = _2006 + 1.0f;
          float _2008 = _1925 * _1996;
          float _2009 = _2008 * _2004;
          float _2010 = _1925 * _1997;
          float _2011 = _2010 * _2007;
          float _2012 = _2011 * _2004;
          float _2013 = _2009 + 0.5f;
          float _2014 = _2012 + 0.5f;
          float4 _2015 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2013, _2014), 0.0f);
          float _2019 = _1991 + _2015.x;
          float _2020 = _1992 + _2015.y;
          float _2021 = _1993 + _2015.z;
          float _2022 = _1900 * 2.0f;
          float _2023 = _1901 * 2.0f;
          float _2024 = _2022 + -1.0f;
          float _2025 = _2023 + -1.0f;
          float _2026 = _2024 * _2024;
          float _2027 = _2026 + 1.0f;
          float _2028 = sqrt(_2027);
          float _2029 = 1.0f / _2028;
          float _2030 = _2029 + _1423;
          float _2031 = _2028 * _1425;
          float _2032 = _2031 * _2030;
          float _2033 = _2029 + -1.0f;
          float _2034 = _2033 * _1424;
          float _2035 = _2034 + 1.0f;
          float _2036 = _1925 * _2024;
          float _2037 = _2036 * _2032;
          float _2038 = _1925 * _2025;
          float _2039 = _2038 * _2035;
          float _2040 = _2039 * _2032;
          float _2041 = _2037 + 0.5f;
          float _2042 = _2040 + 0.5f;
          float4 _2043 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2041, _2042), 0.0f);
          float _2047 = _2019 + _2043.x;
          float _2048 = _2020 + _2043.y;
          float _2049 = _2021 + _2043.z;
          float _2050 = _1902 * 2.0f;
          float _2051 = _1903 * 2.0f;
          float _2052 = _2050 + -1.0f;
          float _2053 = _2051 + -1.0f;
          float _2054 = _2052 * _2052;
          float _2055 = _2054 + 1.0f;
          float _2056 = sqrt(_2055);
          float _2057 = 1.0f / _2056;
          float _2058 = _2057 + _1423;
          float _2059 = _2056 * _1425;
          float _2060 = _2059 * _2058;
          float _2061 = _2057 + -1.0f;
          float _2062 = _2061 * _1424;
          float _2063 = _2062 + 1.0f;
          float _2064 = _1925 * _2052;
          float _2065 = _2064 * _2060;
          float _2066 = _1925 * _2053;
          float _2067 = _2066 * _2063;
          float _2068 = _2067 * _2060;
          float _2069 = _2065 + 0.5f;
          float _2070 = _2068 + 0.5f;
          float4 _2071 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2069, _2070), 0.0f);
          float _2075 = _2047 + _2071.x;
          float _2076 = _2048 + _2071.y;
          float _2077 = _2049 + _2071.z;
          float _2078 = _1904 * 2.0f;
          float _2079 = _1905 * 2.0f;
          float _2080 = _2078 + -1.0f;
          float _2081 = _2079 + -1.0f;
          float _2082 = _2080 * _2080;
          float _2083 = _2082 + 1.0f;
          float _2084 = sqrt(_2083);
          float _2085 = 1.0f / _2084;
          float _2086 = _2085 + _1423;
          float _2087 = _2084 * _1425;
          float _2088 = _2087 * _2086;
          float _2089 = _2085 + -1.0f;
          float _2090 = _2089 * _1424;
          float _2091 = _2090 + 1.0f;
          float _2092 = _1925 * _2080;
          float _2093 = _2092 * _2088;
          float _2094 = _1925 * _2081;
          float _2095 = _2094 * _2091;
          float _2096 = _2095 * _2088;
          float _2097 = _2093 + 0.5f;
          float _2098 = _2096 + 0.5f;
          float4 _2099 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2097, _2098), 0.0f);
          float _2103 = _2075 + _2099.x;
          float _2104 = _2076 + _2099.y;
          float _2105 = _2077 + _2099.z;
          float _2106 = _1906 * 2.0f;
          float _2107 = _1907 * 2.0f;
          float _2108 = _2106 + -1.0f;
          float _2109 = _2107 + -1.0f;
          float _2110 = _2108 * _2108;
          float _2111 = _2110 + 1.0f;
          float _2112 = sqrt(_2111);
          float _2113 = 1.0f / _2112;
          float _2114 = _2113 + _1423;
          float _2115 = _2112 * _1425;
          float _2116 = _2115 * _2114;
          float _2117 = _2113 + -1.0f;
          float _2118 = _2117 * _1424;
          float _2119 = _2118 + 1.0f;
          float _2120 = _1925 * _2108;
          float _2121 = _2120 * _2116;
          float _2122 = _1925 * _2109;
          float _2123 = _2122 * _2119;
          float _2124 = _2123 * _2116;
          float _2125 = _2121 + 0.5f;
          float _2126 = _2124 + 0.5f;
          float4 _2127 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2125, _2126), 0.0f);
          float _2131 = _2103 + _2127.x;
          float _2132 = _2104 + _2127.y;
          float _2133 = _2105 + _2127.z;
          float _2134 = _1908 * 2.0f;
          float _2135 = _1909 * 2.0f;
          float _2136 = _2134 + -1.0f;
          float _2137 = _2135 + -1.0f;
          float _2138 = _2136 * _2136;
          float _2139 = _2138 + 1.0f;
          float _2140 = sqrt(_2139);
          float _2141 = 1.0f / _2140;
          float _2142 = _2141 + _1423;
          float _2143 = _2140 * _1425;
          float _2144 = _2143 * _2142;
          float _2145 = _2141 + -1.0f;
          float _2146 = _2145 * _1424;
          float _2147 = _2146 + 1.0f;
          float _2148 = _1925 * _2136;
          float _2149 = _2148 * _2144;
          float _2150 = _1925 * _2137;
          float _2151 = _2150 * _2147;
          float _2152 = _2151 * _2144;
          float _2153 = _2149 + 0.5f;
          float _2154 = _2152 + 0.5f;
          float4 _2155 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_2153, _2154), 0.0f);
          float _2159 = _2131 + _2155.x;
          float _2160 = _2132 + _2155.y;
          float _2161 = _2133 + _2155.z;
          float _2162 = _1606 * _2159;
          float _2163 = _1607 * _2160;
          float _2164 = _1608 * _2161;
          float _2165 = max(_2162, _2163);
          float _2166 = max(_2165, _2164);
          bool _2167 = isfinite(_2166);
          if (_2167) {
            float _2173 = invLinearBegin * _2162;
            bool _2174 = (_2162 >= linearBegin);
            float _2175 = _2173 * _2173;
            float _2176 = _2173 * 2.0f;
            float _2177 = 3.0f - _2176;
            float _2178 = _2175 * _2177;
            float _2179 = invLinearBegin * _2163;
            bool _2180 = (_2163 >= linearBegin);
            float _2181 = _2179 * _2179;
            float _2182 = _2179 * 2.0f;
            float _2183 = 3.0f - _2182;
            float _2184 = _2181 * _2183;
            float _2185 = invLinearBegin * _2164;
            bool _2186 = (_2164 >= linearBegin);
            float _2187 = _2185 * _2185;
            float _2188 = _2185 * 2.0f;
            float _2189 = 3.0f - _2188;
            float _2190 = _2187 * _2189;
            float _2191 = 1.0f - _2178;
            float _2192 = select(_2174, 0.0f, _2191);
            float _2193 = 1.0f - _2184;
            float _2194 = select(_2180, 0.0f, _2193);
            float _2195 = 1.0f - _2190;
            float _2196 = select(_2186, 0.0f, _2195);
            bool _2199 = (_2162 < linearStart);
            bool _2200 = (_2163 < linearStart);
            bool _2201 = (_2164 < linearStart);
            float _2202 = select(_2199, 0.0f, 1.0f);
            float _2203 = select(_2200, 0.0f, 1.0f);
            float _2204 = select(_2201, 0.0f, 1.0f);
            float _2205 = 1.0f - _2202;
            float _2206 = _2205 - _2192;
            float _2207 = 1.0f - _2203;
            float _2208 = _2207 - _2194;
            float _2209 = 1.0f - _2204;
            float _2210 = _2209 - _2196;
            float _2212 = log2(_2173);
            float _2213 = log2(_2179);
            float _2214 = log2(_2185);
            float _2215 = _2212 * toe;
            float _2216 = _2213 * toe;
            float _2217 = _2214 * toe;
            float _2218 = exp2(_2215);
            float _2219 = exp2(_2216);
            float _2220 = exp2(_2217);
            float _2221 = _2218 * _2192;
            float _2222 = _2221 * linearBegin;
            float _2223 = _2219 * _2194;
            float _2224 = _2223 * linearBegin;
            float _2225 = _2220 * _2196;
            float _2226 = _2225 * linearBegin;
            float _2228 = contrast * _2162;
            float _2229 = contrast * _2163;
            float _2230 = contrast * _2164;
            float _2232 = _2228 + madLinearStartContrastFactor;
            float _2233 = _2229 + madLinearStartContrastFactor;
            float _2234 = _2230 + madLinearStartContrastFactor;
            float _2235 = _2232 * _2206;
            float _2236 = _2233 * _2208;
            float _2237 = _2234 * _2210;
            float _2238 = _2235 + _2222;
            float _2239 = _2236 + _2224;
            float _2240 = _2237 + _2226;
            float _2244 = contrastFactor * _2162;
            float _2245 = contrastFactor * _2163;
            float _2246 = contrastFactor * _2164;
            float _2248 = _2244 + mulLinearStartContrastFactor;
            float _2249 = _2245 + mulLinearStartContrastFactor;
            float _2250 = _2246 + mulLinearStartContrastFactor;
            float _2251 = exp2(_2248);
            float _2252 = exp2(_2249);
            float _2253 = exp2(_2250);
            float _2254 = _2251 * displayMaxNitSubContrastFactor;
            float _2255 = _2252 * displayMaxNitSubContrastFactor;
            float _2256 = _2253 * displayMaxNitSubContrastFactor;
            float _2257 = maxNit - _2254;
            float _2258 = maxNit - _2255;
            float _2259 = maxNit - _2256;
            float _2260 = _2257 * _2202;
            float _2261 = _2258 * _2203;
            float _2262 = _2259 * _2204;
            float _2263 = _2238 + _2260;
            float _2264 = _2239 + _2261;
            float _2265 = _2240 + _2262;
            _2267 = _2263;
            _2268 = _2264;
            _2269 = _2265;
          } else {
            _2267 = 1.0f;
            _2268 = 1.0f;
            _2269 = 1.0f;
          }
          float _2270 = saturate(_2267);
          float _2271 = saturate(_2268);
          float _2272 = saturate(_2269);
          float _2273 = _1419 * 0.10000000149011612f;
          float _2274 = _2273 * cbRadialColor.x;
          float _2275 = _1420 * 0.10000000149011612f;
          float _2276 = _2275 * cbRadialColor.y;
          float _2277 = _1421 * 0.10000000149011612f;
          float _2278 = _2277 * cbRadialColor.z;
          float _2279 = _2270 + _2274;
          float _2280 = _2271 + _2276;
          float _2281 = _2272 + _2278;
          _2465 = _2279;
          _2466 = _2280;
          _2467 = _2281;
        } else {
          float4 _2284 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1891, _1893), 0.0f);
          float4 _2288 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1894, _1895), 0.0f);
          float _2292 = _2288.x + _2284.x;
          float _2293 = _2288.y + _2284.y;
          float _2294 = _2288.z + _2284.z;
          float4 _2295 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1896, _1897), 0.0f);
          float _2299 = _2292 + _2295.x;
          float _2300 = _2293 + _2295.y;
          float _2301 = _2294 + _2295.z;
          float4 _2302 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1898, _1899), 0.0f);
          float _2306 = _2299 + _2302.x;
          float _2307 = _2300 + _2302.y;
          float _2308 = _2301 + _2302.z;
          float4 _2309 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1900, _1901), 0.0f);
          float _2313 = _2306 + _2309.x;
          float _2314 = _2307 + _2309.y;
          float _2315 = _2308 + _2309.z;
          float4 _2316 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1902, _1903), 0.0f);
          float _2320 = _2313 + _2316.x;
          float _2321 = _2314 + _2316.y;
          float _2322 = _2315 + _2316.z;
          float4 _2323 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1904, _1905), 0.0f);
          float _2327 = _2320 + _2323.x;
          float _2328 = _2321 + _2323.y;
          float _2329 = _2322 + _2323.z;
          float4 _2330 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1906, _1907), 0.0f);
          float _2334 = _2327 + _2330.x;
          float _2335 = _2328 + _2330.y;
          float _2336 = _2329 + _2330.z;
          float4 _2337 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_1908, _1909), 0.0f);
          float _2341 = _2334 + _2337.x;
          float _2342 = _2335 + _2337.y;
          float _2343 = _2336 + _2337.z;
          float _2344 = _1606 * _2341;
          float _2345 = _1607 * _2342;
          float _2346 = _1608 * _2343;
          float _2347 = max(_2344, _2345);
          float _2348 = max(_2347, _2346);
          bool _2349 = isfinite(_2348);
          if (_2349) {
            float _2355 = invLinearBegin * _2344;
            bool _2356 = (_2344 >= linearBegin);
            float _2357 = _2355 * _2355;
            float _2358 = _2355 * 2.0f;
            float _2359 = 3.0f - _2358;
            float _2360 = _2357 * _2359;
            float _2361 = invLinearBegin * _2345;
            bool _2362 = (_2345 >= linearBegin);
            float _2363 = _2361 * _2361;
            float _2364 = _2361 * 2.0f;
            float _2365 = 3.0f - _2364;
            float _2366 = _2363 * _2365;
            float _2367 = invLinearBegin * _2346;
            bool _2368 = (_2346 >= linearBegin);
            float _2369 = _2367 * _2367;
            float _2370 = _2367 * 2.0f;
            float _2371 = 3.0f - _2370;
            float _2372 = _2369 * _2371;
            float _2373 = 1.0f - _2360;
            float _2374 = select(_2356, 0.0f, _2373);
            float _2375 = 1.0f - _2366;
            float _2376 = select(_2362, 0.0f, _2375);
            float _2377 = 1.0f - _2372;
            float _2378 = select(_2368, 0.0f, _2377);
            bool _2381 = (_2344 < linearStart);
            bool _2382 = (_2345 < linearStart);
            bool _2383 = (_2346 < linearStart);
            float _2384 = select(_2381, 0.0f, 1.0f);
            float _2385 = select(_2382, 0.0f, 1.0f);
            float _2386 = select(_2383, 0.0f, 1.0f);
            float _2387 = 1.0f - _2384;
            float _2388 = _2387 - _2374;
            float _2389 = 1.0f - _2385;
            float _2390 = _2389 - _2376;
            float _2391 = 1.0f - _2386;
            float _2392 = _2391 - _2378;
            float _2394 = log2(_2355);
            float _2395 = log2(_2361);
            float _2396 = log2(_2367);
            float _2397 = _2394 * toe;
            float _2398 = _2395 * toe;
            float _2399 = _2396 * toe;
            float _2400 = exp2(_2397);
            float _2401 = exp2(_2398);
            float _2402 = exp2(_2399);
            float _2403 = _2400 * _2374;
            float _2404 = _2403 * linearBegin;
            float _2405 = _2401 * _2376;
            float _2406 = _2405 * linearBegin;
            float _2407 = _2402 * _2378;
            float _2408 = _2407 * linearBegin;
            float _2410 = contrast * _2344;
            float _2411 = contrast * _2345;
            float _2412 = contrast * _2346;
            float _2414 = _2410 + madLinearStartContrastFactor;
            float _2415 = _2411 + madLinearStartContrastFactor;
            float _2416 = _2412 + madLinearStartContrastFactor;
            float _2417 = _2414 * _2388;
            float _2418 = _2415 * _2390;
            float _2419 = _2416 * _2392;
            float _2420 = _2417 + _2404;
            float _2421 = _2418 + _2406;
            float _2422 = _2419 + _2408;
            float _2426 = contrastFactor * _2344;
            float _2427 = contrastFactor * _2345;
            float _2428 = contrastFactor * _2346;
            float _2430 = _2426 + mulLinearStartContrastFactor;
            float _2431 = _2427 + mulLinearStartContrastFactor;
            float _2432 = _2428 + mulLinearStartContrastFactor;
            float _2433 = exp2(_2430);
            float _2434 = exp2(_2431);
            float _2435 = exp2(_2432);
            float _2436 = _2433 * displayMaxNitSubContrastFactor;
            float _2437 = _2434 * displayMaxNitSubContrastFactor;
            float _2438 = _2435 * displayMaxNitSubContrastFactor;
            float _2439 = maxNit - _2436;
            float _2440 = maxNit - _2437;
            float _2441 = maxNit - _2438;
            float _2442 = _2439 * _2384;
            float _2443 = _2440 * _2385;
            float _2444 = _2441 * _2386;
            float _2445 = _2420 + _2442;
            float _2446 = _2421 + _2443;
            float _2447 = _2422 + _2444;
            _2449 = _2445;
            _2450 = _2446;
            _2451 = _2447;
          } else {
            _2449 = 1.0f;
            _2450 = 1.0f;
            _2451 = 1.0f;
          }
          float _2452 = saturate(_2449);
          float _2453 = saturate(_2450);
          float _2454 = saturate(_2451);
          float _2455 = _1419 * 0.10000000149011612f;
          float _2456 = _2455 * cbRadialColor.x;
          float _2457 = _1420 * 0.10000000149011612f;
          float _2458 = _2457 * cbRadialColor.y;
          float _2459 = _1421 * 0.10000000149011612f;
          float _2460 = _2459 * cbRadialColor.z;
          float _2461 = _2452 + _2456;
          float _2462 = _2453 + _2458;
          float _2463 = _2454 + _2460;
          _2465 = _2461;
          _2466 = _2462;
          _2467 = _2463;
        }
      }
      bool _2468 = (cbRadialMaskRate.x > 0.0f);
      if (_2468) {
        float _2470 = _1466 * _1466;
        float _2471 = _1468 * _1468;
        float _2472 = _2470 + _2471;
        float _2473 = sqrt(_2472);
        float _2474 = _2473 * cbRadialMaskSmoothstep.x;
        float _2475 = _2474 + cbRadialMaskSmoothstep.y;
        float _2476 = saturate(_2475);
        float _2477 = _2476 * 2.0f;
        float _2478 = 3.0f - _2477;
        float _2479 = _2476 * _2476;
        float _2480 = _2479 * cbRadialMaskRate.x;
        float _2481 = _2480 * _2478;
        float _2482 = _2481 + cbRadialMaskRate.y;
        float _2483 = _2465 - _1419;
        float _2484 = _2466 - _1420;
        float _2485 = _2467 - _1421;
        float _2486 = _2482 * _2483;
        float _2487 = _2482 * _2484;
        float _2488 = _2482 * _2485;
        float _2489 = _2486 + _1419;
        float _2490 = _2487 + _1420;
        float _2491 = _2488 + _1421;
        _2493 = _2489;
        _2494 = _2490;
        _2495 = _2491;
      } else {
        _2493 = _2465;
        _2494 = _2466;
        _2495 = _2467;
      }
      float _2496 = _2493 - _1419;
      float _2497 = _2494 - _1420;
      float _2498 = _2495 - _1421;
      float _2499 = _2496 * _1456;
      float _2500 = _2497 * _1456;
      float _2501 = _2498 * _1456;
      float _2502 = _2499 + _1419;
      float _2503 = _2500 + _1420;
      float _2504 = _2501 + _1421;
      _2506 = _2502;
      _2507 = _2503;
      _2508 = _2504;
    } else {
      _2506 = _1419;
      _2507 = _1420;
      _2508 = _1421;
    }
  } else {
    // here in main menu

    _2506 = _1419;
    _2507 = _1420;
    _2508 = _1421;
  }
  int _2509 = (uint)(cPassEnabled) & 2;
  bool _2510 = (_2509 == 0);
  if (!_2510) {
    float _2525 = screenSize.x * fNoiseUVOffset.x;
    float _2526 = screenSize.y * fNoiseUVOffset.y;
    float _2527 = _2525 + SV_Position.x;
    float _2528 = _2526 + SV_Position.y;
    float _2529 = _2527 * fReverseNoiseSize;
    float _2530 = floor(_2529);
    float _2531 = _2528 * fReverseNoiseSize;
    float _2532 = floor(_2531);
    float _2533 = dot(float2(_2530, _2532), float2(0.0671105608344078f, 0.005837149918079376f));
    float _2534 = frac(_2533);
    float _2535 = _2534 * 52.98291778564453f;
    float _2536 = frac(_2535);
    bool _2537 = (_2536 < fNoiseDensity);
    if (_2537) {
      float _2539 = _2532 * _2530;
      uint _2540 = uint(_2539);
      int _2541 = _2540 ^ 12345391;
      uint _2542 = _2541 * 3635641;
      uint _2543 = _2541 * 232681024;
      int _2544 = (uint)(_2542) >> 26;
      int _2545 = _2544 | _2543;
      int _2546 = _2545 ^ _2542;
      float _2547 = float((uint)_2546);
      float _2548 = _2547 * 2.3283064365386963e-10f;
      _2550 = _2548;
    } else {
      _2550 = 0.0f;
    }
    float _2551 = _2536 * 757.4846801757812f;
    float _2552 = frac(_2551);
    bool _2553 = (_2552 < fNoiseDensity);
    if (_2553) {
      int _2555 = asint(_2552);
      int _2556 = _2555 ^ 12345391;
      uint _2557 = _2556 * 3635641;
      uint _2558 = _2556 * 232681024;
      int _2559 = (uint)(_2557) >> 26;
      int _2560 = _2559 | _2558;
      int _2561 = _2560 ^ _2557;
      float _2562 = float((uint)_2561);
      float _2563 = _2562 * 2.3283064365386963e-10f;
      float _2564 = _2563 + -0.5f;
      _2566 = _2564;
    } else {
      _2566 = 0.0f;
    }
    float _2567 = _2552 * 757.4846801757812f;
    float _2568 = frac(_2567);
    bool _2569 = (_2568 < fNoiseDensity);
    if (_2569) {
      int _2571 = asint(_2568);
      int _2572 = _2571 ^ 12345391;
      uint _2573 = _2572 * 3635641;
      uint _2574 = _2572 * 232681024;
      int _2575 = (uint)(_2573) >> 26;
      int _2576 = _2575 | _2574;
      int _2577 = _2576 ^ _2573;
      float _2578 = float((uint)_2577);
      float _2579 = _2578 * 2.3283064365386963e-10f;
      float _2580 = _2579 + -0.5f;
      _2582 = _2580;
    } else {
      _2582 = 0.0f;
    }
    float _2583 = _2550 * fNoisePower.x;
    float _2584 = _2582 * fNoisePower.y;
    float _2585 = _2566 * fNoisePower.y;
    float _2586 = mad(_2585, 1.4019999504089355f, _2583);
    float _2587 = mad(_2584, -0.3440000116825104f, _2583);
    float _2588 = mad(_2585, -0.7139999866485596f, _2587);
    float _2589 = mad(_2584, 1.7719999551773071f, _2583);
    float _2590 = saturate(_2506);
    float _2591 = saturate(_2507);
    float _2592 = saturate(_2508);
    float _2593 = dot(float3(_2590, _2591, _2592), float3(0.29899999499320984f, -0.16899999976158142f, 0.5f));
    float _2594 = saturate(_2593);
    float _2595 = 1.0f - _2594;
    float _2596 = log2(_2595);
    float _2597 = _2596 * fNoiseContrast;
    float _2598 = exp2(_2597);
    float _2599 = _2598 * fBlendRate;
    float _2600 = _2586 - _2506;
    float _2601 = _2588 - _2507;
    float _2602 = _2589 - _2508;
    float _2603 = _2599 * _2600;
    float _2604 = _2599 * _2601;
    float _2605 = _2599 * _2602;
    float _2606 = _2603 + _2506;
    float _2607 = _2604 + _2507;
    float _2608 = _2605 + _2508;
    _2610 = _2606;
    _2611 = _2607;
    _2612 = _2608;
  } else {
    // here in main menu
    _2610 = _2506;
    _2611 = _2507;
    _2612 = _2508;
  }
  int _2613 = (uint)(cPassEnabled) & 4;
  bool _2614 = (_2613 == 0);
  if (!_2614) {
    float _2636 = saturate(_2610);
    float _2637 = saturate(_2611);
    float _2638 = saturate(_2612);

    float _2639 = fTextureInverseSize * 0.5f;
    bool _2640 = !(_2636 <= 0.0031308000907301903f);
    [branch]
    if (!_2640) {
      float _2642 = _2636 * 12.920000076293945f;
      _2650 = _2642;
    } else {
      float _2644 = log2(_2636);
      float _2645 = _2644 * 0.4166666567325592f;
      float _2646 = exp2(_2645);
      float _2647 = _2646 * 1.0549999475479126f;
      float _2648 = _2647 + -0.054999999701976776f;
      _2650 = _2648;
    }
    bool _2651 = !(_2637 <= 0.0031308000907301903f);
    [branch]
    if (!_2651) {
      float _2653 = _2637 * 12.920000076293945f;
      _2661 = _2653;
    } else {
      float _2655 = log2(_2637);
      float _2656 = _2655 * 0.4166666567325592f;
      float _2657 = exp2(_2656);
      float _2658 = _2657 * 1.0549999475479126f;
      float _2659 = _2658 + -0.054999999701976776f;
      _2661 = _2659;
    }
    bool _2662 = !(_2638 <= 0.0031308000907301903f);
    [branch]
    if (!_2662) {
      float _2664 = _2638 * 12.920000076293945f;
      _2672 = _2664;
    } else {
      float _2666 = log2(_2638);
      float _2667 = _2666 * 0.4166666567325592f;
      float _2668 = exp2(_2667);
      float _2669 = _2668 * 1.0549999475479126f;
      float _2670 = _2669 + -0.054999999701976776f;
      _2672 = _2670;
    }
    float _2673 = 1.0f - fTextureInverseSize;
    float _2674 = _2650 * _2673;
    float _2675 = _2661 * _2673;
    float _2676 = _2672 * _2673;
    float _2677 = _2674 + _2639;
    float _2678 = _2675 + _2639;
    float _2679 = _2676 + _2639;
    bool _2680 = (fTextureBlendRate > 0.0f);
    bool _2681 = (fTextureBlendRate2 > 0.0f);
    bool _2682 = _2680 && _2681;
    [branch]
    if (_2682) {
      float4 _2686 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2677, _2678, _2679), 0.0f);
      float4 _2691 = tTextureMap1.SampleLevel(TrilinearClamp, float3(_2677, _2678, _2679), 0.0f);
      float _2695 = _2691.x - _2686.x;
      float _2696 = _2691.y - _2686.y;
      float _2697 = _2691.z - _2686.z;
      float _2698 = _2695 * fTextureBlendRate;
      float _2699 = _2696 * fTextureBlendRate;
      float _2700 = _2697 * fTextureBlendRate;
      float _2701 = _2698 + _2686.x;
      float _2702 = _2699 + _2686.y;
      float _2703 = _2700 + _2686.z;
      bool _2704 = !(_2701 <= 0.0031308000907301903f);
      [branch]
      if (!_2704) {
        float _2706 = _2701 * 12.920000076293945f;
        _2714 = _2706;
      } else {
        float _2708 = log2(_2701);
        float _2709 = _2708 * 0.4166666567325592f;
        float _2710 = exp2(_2709);
        float _2711 = _2710 * 1.0549999475479126f;
        float _2712 = _2711 + -0.054999999701976776f;
        _2714 = _2712;
      }
      bool _2715 = !(_2702 <= 0.0031308000907301903f);
      [branch]
      if (!_2715) {
        float _2717 = _2702 * 12.920000076293945f;
        _2725 = _2717;
      } else {
        float _2719 = log2(_2702);
        float _2720 = _2719 * 0.4166666567325592f;
        float _2721 = exp2(_2720);
        float _2722 = _2721 * 1.0549999475479126f;
        float _2723 = _2722 + -0.054999999701976776f;
        _2725 = _2723;
      }
      bool _2726 = !(_2703 <= 0.0031308000907301903f);
      [branch]
      if (!_2726) {
        float _2728 = _2703 * 12.920000076293945f;
        _2736 = _2728;
      } else {
        float _2730 = log2(_2703);
        float _2731 = _2730 * 0.4166666567325592f;
        float _2732 = exp2(_2731);
        float _2733 = _2732 * 1.0549999475479126f;
        float _2734 = _2733 + -0.054999999701976776f;
        _2736 = _2734;
      }
      float4 _2738 = tTextureMap2.SampleLevel(TrilinearClamp, float3(_2714, _2725, _2736), 0.0f);
      float _2742 = _2738.x - _2701;
      float _2743 = _2738.y - _2702;
      float _2744 = _2738.z - _2703;
      float _2745 = _2742 * fTextureBlendRate2;
      float _2746 = _2743 * fTextureBlendRate2;
      float _2747 = _2744 * fTextureBlendRate2;
      float _2748 = _2745 + _2701;
      float _2749 = _2746 + _2702;
      float _2750 = _2747 + _2703;
      _2830 = _2748;
      _2831 = _2749;
      _2832 = _2750;
    } else {
      if (_2680) {
        float4 _2753 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2677, _2678, _2679), 0.0f);
        float4 _2758 = tTextureMap1.SampleLevel(TrilinearClamp, float3(_2677, _2678, _2679), 0.0f);
        float _2762 = _2758.x - _2753.x;
        float _2763 = _2758.y - _2753.y;
        float _2764 = _2758.z - _2753.z;
        float _2765 = _2762 * fTextureBlendRate;
        float _2766 = _2763 * fTextureBlendRate;
        float _2767 = _2764 * fTextureBlendRate;
        float _2768 = _2765 + _2753.x;
        float _2769 = _2766 + _2753.y;
        float _2770 = _2767 + _2753.z;
        _2830 = _2768;
        _2831 = _2769;
        _2832 = _2770;
      } else {
        if (_2681) {
          float4 _2773 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2677, _2678, _2679), 0.0f);
          bool _2777 = !(_2773.x <= 0.0031308000907301903f);
          [branch]
          if (!_2777) {
            float _2779 = _2773.x * 12.920000076293945f;
            _2787 = _2779;
          } else {
            float _2781 = log2(_2773.x);
            float _2782 = _2781 * 0.4166666567325592f;
            float _2783 = exp2(_2782);
            float _2784 = _2783 * 1.0549999475479126f;
            float _2785 = _2784 + -0.054999999701976776f;
            _2787 = _2785;
          }
          bool _2788 = !(_2773.y <= 0.0031308000907301903f);
          [branch]
          if (!_2788) {
            float _2790 = _2773.y * 12.920000076293945f;
            _2798 = _2790;
          } else {
            float _2792 = log2(_2773.y);
            float _2793 = _2792 * 0.4166666567325592f;
            float _2794 = exp2(_2793);
            float _2795 = _2794 * 1.0549999475479126f;
            float _2796 = _2795 + -0.054999999701976776f;
            _2798 = _2796;
          }
          bool _2799 = !(_2773.z <= 0.0031308000907301903f);
          [branch]
          if (!_2799) {
            float _2801 = _2773.z * 12.920000076293945f;
            _2809 = _2801;
          } else {
            float _2803 = log2(_2773.z);
            float _2804 = _2803 * 0.4166666567325592f;
            float _2805 = exp2(_2804);
            float _2806 = _2805 * 1.0549999475479126f;
            float _2807 = _2806 + -0.054999999701976776f;
            _2809 = _2807;
          }
          float4 _2811 = tTextureMap2.SampleLevel(TrilinearClamp, float3(_2787, _2798, _2809), 0.0f);
          float _2815 = _2811.x - _2773.x;
          float _2816 = _2811.y - _2773.y;
          float _2817 = _2811.z - _2773.z;
          float _2818 = _2815 * fTextureBlendRate2;
          float _2819 = _2816 * fTextureBlendRate2;
          float _2820 = _2817 * fTextureBlendRate2;
          float _2821 = _2818 + _2773.x;
          float _2822 = _2819 + _2773.y;
          float _2823 = _2820 + _2773.z;
          _2830 = _2821;
          _2831 = _2822;
          _2832 = _2823;
        } else {
          float4 _2825 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_2677, _2678, _2679), 0.0f);
          _2830 = _2825.x;
          _2831 = _2825.y;
          _2832 = _2825.z;
        }
      }
    }
    float _2833 = _2830 * (fColorMatrix[0].x);
    float _2834 = mad(_2831, (fColorMatrix[1].x), _2833);
    float _2835 = mad(_2832, (fColorMatrix[2].x), _2834);
    float _2836 = _2835 + (fColorMatrix[3].x);
    float _2837 = _2830 * (fColorMatrix[0].y);
    float _2838 = mad(_2831, (fColorMatrix[1].y), _2837);
    float _2839 = mad(_2832, (fColorMatrix[2].y), _2838);
    float _2840 = _2839 + (fColorMatrix[3].y);
    float _2841 = _2830 * (fColorMatrix[0].z);
    float _2842 = mad(_2831, (fColorMatrix[1].z), _2841);
    float _2843 = mad(_2832, (fColorMatrix[2].z), _2842);
    float _2844 = _2843 + (fColorMatrix[3].z);
    _2846 = _2836;
    _2847 = _2840;
    _2848 = _2844;
  } else {
    // here in main menu

    _2846 = _2610;
    _2847 = _2611;
    _2848 = _2612;
  }
  int _2849 = (uint)(cPassEnabled) & 8;
  bool _2850 = (_2849 == 0);
  if (!_2850) {
    float _2864 = cvdR.x * _2846;
    float _2865 = cvdR.y * _2847;
    float _2866 = _2864 + _2865;
    float _2867 = cvdR.z * _2848;
    float _2868 = _2866 + _2867;
    float _2869 = cvdG.x * _2846;
    float _2870 = cvdG.y * _2847;
    float _2871 = _2869 + _2870;
    float _2872 = cvdG.z * _2848;
    float _2873 = _2871 + _2872;
    float _2874 = cvdB.x * _2846;
    float _2875 = cvdB.y * _2847;
    float _2876 = _2874 + _2875;
    float _2877 = cvdB.z * _2848;
    float _2878 = _2876 + _2877;
    float _2879 = saturate(_2868);
    float _2880 = saturate(_2873);
    float _2881 = saturate(_2878);
    _2883 = _2879;
    _2884 = _2880;
    _2885 = _2881;
  } else {
    // here in main menu

    _2883 = _2846;
    _2884 = _2847;
    _2885 = _2848;
  }
  int _2886 = (uint)(cPassEnabled) & 16;
  bool _2887 = (_2886 == 0);
  if (!_2887) {
    float _2900 = screenInverseSize.x * SV_Position.x;
    float _2901 = screenInverseSize.y * SV_Position.y;
    float4 _2904 = ImagePlameBase.SampleLevel(BilinearClamp, float2(_2900, _2901), 0.0f);
    float _2909 = _2904.x * ColorParam.x;
    float _2910 = _2904.y * ColorParam.y;
    float _2911 = _2904.z * ColorParam.z;
    float _2912 = _2904.w * ColorParam.w;
    float _2914 = ImagePlameAlpha.SampleLevel(BilinearClamp, float2(_2900, _2901), 0.0f);
    float _2916 = _2914.x * Levels_Rate;
    float _2917 = _2916 + Levels_Range;
    float _2918 = saturate(_2917);
    float _2919 = _2912 * _2918;
    bool _2920 = (_2909 < 0.5f);
    bool _2921 = (_2910 < 0.5f);
    bool _2922 = (_2911 < 0.5f);
    float _2923 = _2883 * 2.0f;
    float _2924 = _2923 * _2909;
    float _2925 = _2884 * 2.0f;
    float _2926 = _2925 * _2910;
    float _2927 = _2885 * 2.0f;
    float _2928 = _2927 * _2911;
    float _2929 = 1.0f - _2909;
    float _2930 = 1.0f - _2910;
    float _2931 = 1.0f - _2911;
    float _2932 = 1.0f - _2883;
    float _2933 = 1.0f - _2884;
    float _2934 = 1.0f - _2885;
    float _2935 = _2932 * 2.0f;
    float _2936 = _2935 * _2929;
    float _2937 = _2933 * 2.0f;
    float _2938 = _2937 * _2930;
    float _2939 = _2934 * 2.0f;
    float _2940 = _2939 * _2931;
    float _2941 = 1.0f - _2936;
    float _2942 = 1.0f - _2938;
    float _2943 = 1.0f - _2940;
    float _2944 = select(_2920, _2924, _2941);
    float _2945 = select(_2921, _2926, _2942);
    float _2946 = select(_2922, _2928, _2943);
    float _2947 = _2944 - _2883;
    float _2948 = _2945 - _2884;
    float _2949 = _2946 - _2885;
    float _2950 = _2947 * _2919;
    float _2951 = _2948 * _2919;
    float _2952 = _2949 * _2919;
    float _2953 = _2950 + _2883;
    float _2954 = _2951 + _2884;
    float _2955 = _2952 + _2885;
    _2957 = _2953;
    _2958 = _2954;
    _2959 = _2955;
  } else {
    // Here in main menu

    _2957 = _2883;
    _2958 = _2884;
    _2959 = _2885;
  }
  bool _2962 = !(useDynamicRangeConversion == 0.0f);
  if (_2962) {
    float _2967 = _2957 * 0.6699999570846558f;
    float _2968 = mad(0.16500000655651093f, _2958, _2967);
    float _2969 = mad(0.16500000655651093f, _2959, _2968);
    float _2970 = _2957 * 0.16500000655651093f;
    float _2971 = mad(0.6699999570846558f, _2958, _2970);
    float _2972 = mad(0.16500000655651093f, _2959, _2971);
    float _2973 = mad(0.16500000655651093f, _2958, _2970);
    float _2974 = mad(0.6699999570846558f, _2959, _2973);
    float _2975 = _2969 * 0.6370000243186951f;
    float _2976 = mad(0.1446000039577484f, _2972, _2975);
    float _2977 = mad(0.1688999980688095f, _2974, _2976);
    float _2978 = _2969 * 0.26269999146461487f;
    float _2979 = mad(0.6779999732971191f, _2972, _2978);
    float _2980 = mad(0.059300001710653305f, _2974, _2979);
    float _2981 = mad(0.02810000069439411f, _2972, 0.0f);
    float _2982 = mad(1.0609999895095825f, _2974, _2981);
    float _2983 = _2980 + _2977;
    float _2984 = _2983 + _2982;
    float _2985 = _2977 / _2984;
    float _2986 = _2980 / _2984;
    float _2987 = kneeStartNit / exposureScale;
    float _2988 = _2987 * 0.009999999776482582f;
    float _2989 = 1.0f - knee;
    bool _2990 = (_2980 < _2988);
    if (_2990) {
      float _2992 = _2980 * exposureScale;
      _3007 = _2992;
    } else {
      float _2994 = exposureScale * _2989;
      float _2995 = _2994 * _2988;
      float _2996 = _2988 * exposureScale;
      float _2997 = log2(_2989);
      float _2998 = _2995 * 0.6931471824645996f;
      float _2999 = _2998 * _2997;
      float _3000 = _2996 - _2999;
      float _3001 = _2980 / _2988;
      float _3002 = _3001 - knee;
      float _3003 = log2(_3002);
      float _3004 = _2998 * _3003;
      float _3005 = _3000 + _3004;
      _3007 = _3005;
    }
    float _3008 = _2985 / _2986;
    float _3009 = _3008 * _3007;
    float _3010 = 1.0f - _2985;
    float _3011 = _3010 - _2986;
    float _3012 = _3011 / _2986;
    float _3013 = _3012 * _3007;
    float _3014 = _3009 * 1.7166999578475952f;
    float _3015 = mad(-0.35569998621940613f, _3007, _3014);
    float _3016 = mad(-0.2533999979496002f, _3013, _3015);
    float _3017 = _3009 * -0.666700005531311f;
    float _3018 = mad(1.6165000200271606f, _3007, _3017);
    float _3019 = mad(0.015799999237060547f, _3013, _3018);
    float _3020 = _3009 * 0.01759999990463257f;
    float _3021 = mad(-0.04280000180006027f, _3007, _3020);
    float _3022 = mad(0.9420999884605408f, _3013, _3021);
    float _3023 = _3016 * 1.6534652709960938f;
    float _3024 = mad(-0.32673269510269165f, _3019, _3023);
    float _3025 = mad(-0.32673269510269165f, _3022, _3024);
    float _3026 = _3016 * -0.32673269510269165f;
    float _3027 = mad(1.6534652709960938f, _3019, _3026);
    float _3028 = mad(-0.32673269510269165f, _3022, _3027);
    float _3029 = mad(-0.32673269510269165f, _3019, _3026);
    float _3030 = mad(1.6534652709960938f, _3022, _3029);
    _3032 = _3025;
    _3033 = _3028;
    _3034 = _3030;
  } else {
    _3032 = _2957;
    _3033 = _2958;
    _3034 = _2959;
  }
  SV_Target.x = _3032;
  SV_Target.y = _3033;
  SV_Target.z = _3034;
  SV_Target.w = 0.0f;

  // untonemapped is linear
  SV_Target.rgb = Tonemap(untonemapped, SV_Target.rgb);
  return SV_Target;
}
