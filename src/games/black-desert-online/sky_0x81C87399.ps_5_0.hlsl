// ---- Created with 3Dmigoto v1.4.1 on Sun Oct 26 21:43:45 2025

cbuffer _Globals : register(b0)
{
  float4x4 matFroxelViewProj : packoffset(c0);
  float4x4 matFarCloudShadowProjectionTexScale : packoffset(c4);
  float c_fRayleighHeight2 : packoffset(c8);
  float3 c_vecRayleighExtinctionCoeff : packoffset(c8.y);
  float3 c_vecMieExtinctionCoeff : packoffset(c9);
  float4 c_vecAngularRayleighSctrCoeff : packoffset(c10);
  float4 c_vecAngularMieSctrCoeff : packoffset(c11);
  float4 c_vecCS_g : packoffset(c12);
  float c_fMultiScatter : packoffset(c13);
  float3 c_vecRayleighExtinctionMultiCoeff : packoffset(c13.y);
  float3 c_vecMieExtinctionMultiCoeff : packoffset(c14);
  float4 c_vecAngularRayleighMultiSctrCoeff : packoffset(c15);
  float4 c_vecAngularMieMultiSctrCoeff : packoffset(c16);
  float4 c_vecCloudRayleighExtinctionCoeff : packoffset(c17);
  float4 c_vecCloudMieExtinctionCoeff : packoffset(c18);
  float4 c_vecAngularCloudRayleighSctrCoeff : packoffset(c19);
  float4 c_vecAngularCloudMieSctrCoeff : packoffset(c20);
  float4 c_vecRayleighColor : packoffset(c21);
  float4 c_vecMieColor : packoffset(c22);
  float4 c_vecCloudColor : packoffset(c23);
  float fRainAmount : packoffset(c24);
  float4 vecCloudScroll : packoffset(c25);
  float4 vecCloudDetailScroll : packoffset(c26);
  float4 vecCamDir : packoffset(c27);
  float fNear : packoffset(c28);
  float fFar : packoffset(c28.y);
  float fTime : packoffset(c28.z);
  float fStarLayerConst : packoffset(c28.w);
  float4 vecImageSize : packoffset(c29);
  float4x4 matInvViewProjection : packoffset(c30);
  float3 vecViewPosition : packoffset(c34);
}

cbuffer outdoorScatteringConst : register(b2)
{
  float4 vecSunColorConst : packoffset(c0);
  float4 vecSunGlareColorConst : packoffset(c1);
  float4 vecHorizon0ColorConst : packoffset(c2);
  float4 vecHorizon1ColorConst : packoffset(c3);
  float4 vecSkyBaseColorConst : packoffset(c4);
  float4 vecExtinctionColorConst : packoffset(c5);
  float4 vecReighColorConst : packoffset(c6);
  float4 vecSunScatterColorConst : packoffset(c7);
  float4 vecAmbientColorConst[2] : packoffset(c8);
  float4 vecAmbientOcclusionColorConst : packoffset(c10);
  float4 vecDeepAOColorConst : packoffset(c11);
  float4 vecSkinAmbientColorConst : packoffset(c12);
  float4 vecHairAmbientColorConst : packoffset(c13);
  float4 vecEffectAmbientColorAlphaConst : packoffset(c14);
  float4 vecEffectAmbientColorConst : packoffset(c15);
  float4 vecEffectAmbientColorHit : packoffset(c16);
  float4 vecEffectAmbientColorHitAlpha : packoffset(c17);
  float3 vecSunDirection : packoffset(c18);
  float fSeaHeightConst : packoffset(c18.w);
  float3 vecMoonDirection : packoffset(c19);
  float IndoorRateRegion : packoffset(c19.w);
  float fSunScatterExpConst : packoffset(c20);
  float fSunGlareExpConst : packoffset(c20.y);
  float fSunExpConst : packoffset(c20.z);
  float fScatterDistanceFalloffConst : packoffset(c20.w);
  float fMieDistanceFalloffConst : packoffset(c21);
  float fMieHeightConst : packoffset(c21.y);
  float fReighDistanceFalloffConst : packoffset(c21.z);
  float fEnvIntensityConst : packoffset(c21.w);
  float fHorizonColorExp0Const : packoffset(c22);
  float fHorizonColorExp1Const : packoffset(c22.y);
  float fCharacterLightMultiply : packoffset(c22.z);
  float fCharacterLightMultiply2 : packoffset(c22.w);
  float RainAmount : packoffset(c23);
  float AirTemperature : packoffset(c23.y);
  float AirTemperatureForParticle : packoffset(c23.z);
  float IndoorRateRoof : packoffset(c23.w);
  float3 vecLightDirection : packoffset(c24);
  float fCloudLayer0Const : packoffset(c24.w);
  float fCloudLayer1Const : packoffset(c25);
  float fCloudLayer2Const : packoffset(c25.y);
  float fCloudLayer3Const : packoffset(c25.z);
  float fCloudLayer4Const : packoffset(c25.w);
  float fCloudLayer5Const : packoffset(c26);
  float fCloudLayer6Const : packoffset(c26.y);
  float fCloudLayer7Const : packoffset(c26.z);
  float fCloudLayer8Const : packoffset(c26.w);
  float fCloudLayer9Const : packoffset(c27);
  float fCloudLayer10Const : packoffset(c27.y);
  float fCloudLayer11Const : packoffset(c27.z);
  float fCloudLayer12Const : packoffset(c27.w);
  float4 fShaderTest : packoffset(c28) = {1,1,1,1};
  float4 vecCloudColorConst : packoffset(c29);
  float3 vecColorMultiply : packoffset(c30);
  float fBrightnessMultiply : packoffset(c30.w);
  float fScatteringScale : packoffset(c31);
  float fAerosolDensityScale : packoffset(c31.y);
  float fAerosolPhaseFunG : packoffset(c31.z);
  float fAerosolAbsorbtionScale : packoffset(c31.w);
  float fTurbidity : packoffset(c32);
  float fRayleighHeight : packoffset(c32.y);
  float fMieHeight2 : packoffset(c32.z);
  float fCloudAltitude : packoffset(c32.w);
  float fCloudThickness : packoffset(c33);
  float fCloudDensity : packoffset(c33.y);
  float fCloudDensityContrast : packoffset(c33.z);
  float fCloudBaseScale : packoffset(c33.w);
  float fCloudDetailScale : packoffset(c34);
  bool isSceneScatter : packoffset(c34.y);
  float fRainPoolAmount : packoffset(c34.z);
  float fSnowPoolAmount : packoffset(c34.w);
}

cbuffer HDRConst : register(b3)
{
  float4 MaxEffectOutput : packoffset(c0);
  float MaxEffectColorBrightness : packoffset(c1);
  float hdrEncodeMulti : packoffset(c1.y);
  float hdrEncodeMulti_Effect : packoffset(c1.z);
  float gammaConst : packoffset(c1.w);
}

cbuffer shadowConst : register(b4)
{
  row_major float4x4 matShadowProjectionTexScale0 : packoffset(c0);
  row_major float4x4 matShadowProjectionTexScale1 : packoffset(c4);
  row_major float4x4 matShadowProjectionTexScale2 : packoffset(c8);
  row_major float4x4 matShadowProjectionTexScale3 : packoffset(c12);
  float4 vecShadowViewPosition0 : packoffset(c16);
  float4 vecShadowViewPosition1 : packoffset(c17);
  float4 vecShadowViewPosition2 : packoffset(c18);
  float4 vecShadowViewPosition3 : packoffset(c19);
  float fShadowmapSizeNear : packoffset(c20);
  float fShadowmapSizeFar : packoffset(c20.y);
  float fInvShadowmapSizeNear : packoffset(c20.z);
  float fInvShadowmapSizeFar : packoffset(c20.w);
  float fShadowmapSizeDynamic : packoffset(c21);
  float fInvShadowmapSizeDynamic : packoffset(c21.y);
  float fShadowmapNormalScale : packoffset(c21.z);
  float shadowConstFloatDummy0 : packoffset(c21.w);
}

SamplerState PA_LINEAR_WRAP_FILTER_s : register(s0);
SamplerState PA_POINT_CLAMP_FILTER_s : register(s1);
SamplerState PA_LINEAR_CLAMP_FILTER_s : register(s2);
Texture2D<float4> texShadowMap0 : register(t0);
Texture3D<float4> texCloudBase : register(t1);
Texture3D<float4> texCloudDetail : register(t2);
Texture2D<float4> texNetDensityToAtmosphereTop : register(t3);
Texture2D<float4> texDiffuse : register(t4);
Texture2D<float4> texOffscreenInscatter : register(t5);
Texture2D<float4> texOffscreenExtinction : register(t6);
TextureCube<float4> texStarLayer : register(t7);
Texture2D<float4> texDepthRaw : register(t8);
Texture2D<float4> texDepthSmall : register(t9);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD2,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;
  uint4 bitmask, uiDest;
  float4 fDest;

  // Prepare jittered screen-space coordinates and neighborhood offsets for depth sampling.
  r0.xyzw = float4(0.5,0.5,0.5,0.5) * vecImageSize.zwzw;
  r1.xyzw = vecImageSize.xyxy * v1.xyxy;
  r1.xyzw = frac(r1.xyzw);
  r1.xyzw = r1.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r2.xyzw = cmp(float4(0,0,0,0) < r1.zwzw);
  r1.xyzw = cmp(r1.xyzw < float4(0,0,0,0));
  r1.xyzw = (int4)r1.xyzw + (int4)-r2.xyzw;
  r1.xyzw = (int4)r1.xyzw;
  r2.xyzw = min(float4(0,0,0,0), r1.zwzw);
  r0.xyzw = r2.xyzw * r0.xyzw + v1.xyxy;
  r2.xyzw = texDepthSmall.Gather(PA_POINT_CLAMP_FILTER_s, r0.zw, int2(0, 0)).xyzw;
  r3.x = texDepthRaw.Sample(PA_POINT_CLAMP_FILTER_s, v1.xy).x;
  r3.y = fFar + -fNear;
  r3.z = -fNear / r3.y;
  r3.y = fFar / r3.y;
  r3.w = r3.x + -r3.y;
  r3.w = r3.z / r3.w;
  r4.x = r3.w * 0.00999000017 + 9.99999975e-06;
  // Convert depth differences to linear distances from the camera.
  r2.xyzw = -r3.yyyy + r2.xyzw;
  r2.xyzw = r3.zzzz / r2.xyzw;
  r2.xyzw = r2.zxyw + -r3.wwww;
  r5.xyzw = cmp(abs(r2.yzxw) < r4.xxxx);
  r4.y = r5.y ? r5.x : 0;
  r4.y = r5.z ? r4.y : 0;
  r4.y = r5.w ? r4.y : 0;
  // Early out when the reprojection neighbourhood agrees with the current surface.
  if (r4.y != 0) {
    r4.yzw = texOffscreenInscatter.SampleLevel(PA_LINEAR_CLAMP_FILTER_s, v1.xy, 0).xyz;
    r5.xyz = texOffscreenExtinction.SampleLevel(PA_LINEAR_CLAMP_FILTER_s, v1.xy, 0).xyz;
  } else {
    // Fall back to a broader search for the closest stable depth sample.
    r5.w = cmp(abs(r2.z) < abs(r2.y));
    r6.xyzw = vecImageSize.zzww * float4(0.5,-0.5,0.5,0.5) + r0.zzww;
    r7.x = abs(r2.z);
    r7.yz = r6.xw;
    r6.x = abs(r2.y);
    r6.xyz = r5.www ? r7.xyz : r6.xyz;
    r5.w = cmp(abs(r2.x) < r6.x);
    r7.xyzw = vecImageSize.zzww * float4(0.5,-0.5,-0.5,-0.5) + r0.zzww;
    r2.x = abs(r2.x);
    r2.yz = r7.xw;
    r2.xyz = r5.www ? r2.xyz : r6.xyz;
    r5.w = cmp(abs(r2.w) < r2.x);
    r7.x = abs(r2.w);
    r2.xyz = r5.www ? r7.xyz : r2.xyz;
    r2.w = cmp(r2.x < r4.x);
    if (r2.w != 0) {
      r4.yzw = texOffscreenInscatter.SampleLevel(PA_POINT_CLAMP_FILTER_s, r2.yz, 0).xyz;
      r5.xyz = texOffscreenExtinction.SampleLevel(PA_POINT_CLAMP_FILTER_s, r2.yz, 0).xyz;
    } else {
      r1.xyzw = vecImageSize.zwzw * -r1.xyzw;
      r6.xz = float2(2,2) * r1.xx;
      r6.yw = float2(0,0);
      r6.xyzw = r6.xyzw + r0.zwzw;
      r7.xyzw = texDepthSmall.Gather(PA_POINT_CLAMP_FILTER_s, r6.zw, int2(0, 0)).xyzw;
      r7.xyzw = r7.xyzw + -r3.yyyy;
      r7.xyzw = r3.zzzz / r7.xyzw;
      r7.xyzw = r7.zxyw + -r3.wwww;
      r1.x = cmp(abs(r7.y) < r2.x);
      r8.xyzw = vecImageSize.zzww * float4(-0.5,0.5,0.5,0.5) + r6.zzww;
      r9.x = abs(r7.y);
      r9.yz = r8.xw;
      r2.xyz = r1.xxx ? r9.xyz : r2.xyz;
      r1.x = cmp(abs(r7.z) < r2.x);
      r8.x = abs(r7.z);
      r2.xyz = r1.xxx ? r8.xyz : r2.xyz;
      r1.x = cmp(abs(r7.x) < r2.x);
      r6.xyzw = vecImageSize.zzww * float4(0.5,-0.5,-0.5,-0.5) + r6.xzwy;
      r7.x = abs(r7.x);
      r7.yz = r6.xw;
      r2.xyz = r1.xxx ? r7.xyz : r2.xyz;
      r1.x = cmp(abs(r7.w) < r2.x);
      r6.x = abs(r7.w);
      r2.xyz = r1.xxx ? r6.xyz : r2.xyz;
      r6.xz = vecImageSize.zz;
      r6.yw = r1.yy;
      r6.xyzw = r6.xyzw * float4(0,2,0,2) + r0.zwzw;
      r7.xyzw = texDepthSmall.Gather(PA_POINT_CLAMP_FILTER_s, r6.zw, int2(0, 0)).xyzw;
      r7.xyzw = r7.xyzw + -r3.yyyy;
      r7.xyzw = r3.zzzz / r7.xyzw;
      r7.xyzw = r7.zxyw + -r3.wwww;
      r1.x = cmp(abs(r7.y) < r2.x);
      r8.xyzw = vecImageSize.zzww * float4(-0.5,0.5,0.5,0.5) + r6.zzww;
      r9.x = abs(r7.y);
      r9.yz = r8.xw;
      r2.xyz = r1.xxx ? r9.xyz : r2.xyz;
      r1.x = cmp(abs(r7.z) < r2.x);
      r8.x = abs(r7.z);
      r2.xyz = r1.xxx ? r8.xyz : r2.xyz;
      r1.x = cmp(abs(r7.x) < r2.x);
      r6.xyzw = vecImageSize.zzww * float4(0.5,-0.5,-0.5,-0.5) + r6.xzwy;
      r7.x = abs(r7.x);
      r7.yz = r6.xw;
      r2.xyz = r1.xxx ? r7.xyz : r2.xyz;
      r1.x = cmp(abs(r7.w) < r2.x);
      r6.x = abs(r7.w);
      r2.xyz = r1.xxx ? r6.xyz : r2.xyz;
      r0.xyzw = r1.zwzw * float4(2,2,2,2) + r0.xyzw;
      r1.xyzw = texDepthSmall.Gather(PA_POINT_CLAMP_FILTER_s, r0.zw, int2(0, 0)).xyzw;
      r1.xyzw = r1.xyzw + -r3.yyyy;
      r1.xyzw = r3.zzzz / r1.xyzw;
      r1.xyzw = r1.zxyw + -r3.wwww;
      r2.w = cmp(abs(r1.y) < r2.x);
      r6.xyzw = vecImageSize.zzww * float4(-0.5,0.5,0.5,0.5) + r0.zzww;
      r7.x = abs(r1.y);
      r7.yz = r6.xw;
      r2.xyz = r2.www ? r7.xyz : r2.xyz;
      r2.w = cmp(abs(r1.z) < r2.x);
      r6.x = abs(r1.z);
      r2.xyz = r2.www ? r6.xyz : r2.xyz;
      r2.w = cmp(abs(r1.x) < r2.x);
      r0.xyzw = vecImageSize.zzww * float4(0.5,-0.5,-0.5,-0.5) + r0.xzwy;
      r1.x = abs(r1.x);
      r1.yz = r0.xw;
      r1.xyz = r2.www ? r1.xyz : r2.xyz;
      r0.w = cmp(abs(r1.w) < r1.x);
      r0.x = abs(r1.w);
      r0.xyz = r0.www ? r0.xyz : r1.xyz;
      r0.x = cmp(r0.x < r4.x);
      if (r0.x != 0) {
        r4.yzw = texOffscreenInscatter.SampleLevel(PA_POINT_CLAMP_FILTER_s, r0.yz, 0).xyz;
        r5.xyz = texOffscreenExtinction.SampleLevel(PA_POINT_CLAMP_FILTER_s, r0.yz, 0).xyz;
      } else {
        // Reconstruct the world-space ray for this pixel so we can march along the volumetric column.
        r0.xy = w1.xy;
        r0.z = r3.x;
        r0.w = 1;
        r1.x = dot(r0.xyzw, matInvViewProjection._m00_m10_m20_m30);
        r1.y = dot(r0.xyzw, matInvViewProjection._m01_m11_m21_m31);
        r1.z = dot(r0.xyzw, matInvViewProjection._m02_m12_m22_m32);
        r0.x = dot(r0.xyzw, matInvViewProjection._m03_m13_m23_m33);
        r0.xyz = r1.xyz / r0.xxx;
        r0.w = 1;
        r0.w = dot(r0.xyzw, r0.xyzw);
        r1.x = sqrt(r0.w);
        r0.w = rsqrt(r0.w);
        r1.yzw = r0.xyz * r0.www;
        r2.xyz = vecViewPosition.xyz + r0.xyz;
        r3.y = cmp(r3.x < 0.999999881);
        r6.xyz = vecViewPosition.xyz + -r2.xyz;
        r3.z = dot(r6.xyz, r6.xyz);
        r2.w = fMieHeightConst * 2 + r2.y;
        r6.xyz = -vecViewPosition.xyz + r2.xwz;
        r2.w = dot(r6.xyz, r6.xyz);
        r2.w = rsqrt(r2.w);
        r7.xy = r6.xz * r2.ww;
        r2.w = fMieHeightConst * 2 + vecViewPosition.y;
        r3.w = dot(r6.xz, r6.xz);
        r3.zw = sqrt(r3.zw);
        r3.w = r3.w * r2.w;
        r3.w = r3.w / r6.y;
        r4.x = dot(r7.xy, r7.xy);
        r4.x = rsqrt(r4.x);
        r6.xy = r7.xy * r4.xx;
        r6.xz = r6.xy * r3.ww;
        r7.y = vecViewPosition.y + r2.w;
        r7.xz = float2(0,0);
        r6.y = -vecViewPosition.y;
        r6.xyz = r7.zyz + r6.xyz;
        r3.w = dot(r6.xyz, r6.xyz);
        r3.w = sqrt(r3.w);
        r3.w = min(r3.w, r3.z);
        r3.w = fMieDistanceFalloffConst * -r3.w;
        r3.w = exp2(r3.w);
        r3.w = 1 + -r3.w;
  // Fade horizon tint based on weather; rain mutes the saturated horizon boost.
        r6.xyz = log2(vecHorizon1ColorConst.xyz);
        r6.xyz = float3(0.600000024,0.600000024,0.600000024) * r6.xyz;
        r6.xyz = exp2(r6.xyz);
        r8.xyz = float3(0.600000024,0.600000024,0.600000024) * r6.xyz;
        r4.x = 1 + -RainAmount;
        r4.x = max(0.00100000005, r4.x);
        r4.x = log2(r4.x);
        r4.x = 4.19999981 * r4.x;
        r4.x = exp2(r4.x);
        r6.xyz = -r6.xyz * float3(0.600000024,0.600000024,0.600000024) + vecHorizon1ColorConst.xyz;
        r6.xyz = r4.xxx * r6.xyz + r8.xyz;
        r8.xyz = r6.xyz * r3.www;
        r8.xyz = r8.xyz + r8.xyz;
        r4.x = dot(r0.xyz, r0.xyz);
        r4.x = rsqrt(r4.x);
        r9.xyz = r4.xxx * r0.xyz;
        r0.x = dot(vecSunDirection.xyz, r9.xyz);
        r0.x = r0.x * 0.5 + 0.5;
        r0.z = 1 + -r0.x;
        r0.x = r0.z * 0.0500000007 + r0.x;
        r0.x = log2(r0.x);
        r0.x = fSunScatterExpConst * r0.x;
        r0.x = exp2(r0.x);
        r0.z = fScatterDistanceFalloffConst * -r3.z;
        r0.z = 0.721347511 * r0.z;
        r0.z = exp2(r0.z);
        r0.z = 1 + -r0.z;
        r0.x = r0.x * r0.z;
        r10.xyz = vecSunScatterColorConst.xyz * r0.xxx;
        r10.xyz = r10.xyz * float3(2,2,2) + r8.xyz;
        r0.x = saturate(-r0.y * r4.x + 1);
        r0.x = log2(r0.x);
        r0.x = fHorizonColorExp1Const * r0.x;
        r0.x = exp2(r0.x);
        r3.z = -2.62308191e-07 * r3.z;
        r3.z = exp2(r3.z);
        r3.z = 1 + -r3.z;
        r0.x = r3.z * r0.x;
        r0.x = min(1, r0.x);
  // Blend the bright horizon scatter towards the baseline Rayleigh colour ramp.
        r11.xyz = vecReighColorConst.xyz * float3(10,10,10) + -r10.xyz;
        r10.xyz = r0.xxx * r11.xyz + r10.xyz;
        r3.z = 1 + -r3.w;
        r3.z = min(1, r3.z);
        r3.w = cmp(0 < vecMoonDirection.y);
        r4.x = vecMoonDirection.y + vecSunDirection.y;
        r4.x = 9.99999975e-06 + r4.x;
        r4.x = vecMoonDirection.y / r4.x;
        r3.w = r3.w ? r4.x : 0;
        r4.x = cmp(0.00100000005 < r3.w);
        if (r4.x != 0) {
          // Add a secondary forward-scatter lobe when the moon is above the horizon.
          r5.w = dot(vecMoonDirection.xyz, r9.xyz);
          r5.w = r5.w * 0.5 + 0.5;
          r6.w = 1 + -r5.w;
          r5.w = r6.w * 0.0500000007 + r5.w;
          r5.w = log2(r5.w);
          r5.w = fSunScatterExpConst * r5.w;
          r5.w = exp2(r5.w);
          r0.z = r5.w * r0.z;
          r9.xyz = vecSunScatterColorConst.xyz * r0.zzz;
          r8.xyz = r9.xyz * float3(2,2,2) + r8.xyz;
          r9.xyz = vecReighColorConst.xyz * float3(10,10,10) + -r8.xyz;
          r8.xyz = r0.xxx * r9.xyz + r8.xyz;
          r8.xyz = r8.xyz + -r10.xyz;
          r10.xyz = r3.www * r8.xyz + r10.xyz;
        }
  // Convert the accumulated single-scatter result into a pseudo-HDR colour and optionally swap in captured sky LUTs when rendering the scene capture.
        r8.xyz = log2(abs(r10.xyz));
        r8.xyz = float3(2.20000005,2.20000005,2.20000005) * r8.xyz;
        r8.yzw = exp2(r8.xyz);
        r0.x = vecExtinctionColorConst.x + vecExtinctionColorConst.x;
        r8.x = r3.z * r0.x;
        r9.yzw = float3(0.349999994,0.349999994,0.349999994) * r8.yzw;
        r9.x = max(0.349999994, r8.x);
        r8.xyzw = isSceneScatter ? r9.xyzw : r8.xyzw;
  // March the eye ray through atmosphere to find cloud cell intersections and density.
        r9.xyz = float3(1000000,1000000,1000000) * r1.yzw;
        r10.xyz = r1.yzw * float3(1000000,1000000,1000000) + vecViewPosition.xyz;
        r11.xyz = vecViewPosition.xyz + -r10.xyz;
        r0.z = dot(r11.xyz, r11.xyz);
        r0.z = sqrt(r0.z);
        r10.w = fMieHeightConst * 2 + r10.y;
        r10.xyz = -vecViewPosition.xyz + r10.xwz;
        r3.z = dot(r10.xyz, r10.xyz);
        r3.z = rsqrt(r3.z);
        r11.xy = r10.xz * r3.zz;
        r3.z = dot(r10.xz, r10.xz);
        r3.z = sqrt(r3.z);
        r2.w = r3.z * r2.w;
        r2.w = r2.w / r10.y;
        r3.z = dot(r11.xy, r11.xy);
        r3.z = rsqrt(r3.z);
        r10.xy = r11.xy * r3.zz;
        r10.xz = r10.xy * r2.ww;
        r10.y = -vecViewPosition.y;
        r7.xyz = r10.xyz + r7.xyz;
        r2.w = dot(r7.xyz, r7.xyz);
        r2.w = sqrt(r2.w);
        r2.w = min(r2.w, r0.z);
        r2.w = fMieDistanceFalloffConst * -r2.w;
        r2.w = exp2(r2.w);
        r2.w = 1 + -r2.w;
        r3.z = 1 + -r2.w;
        r3.z = min(1, r3.z);
        if (r4.x != 0) {
          r5.w = r3.z;
        } else {
          r5.w = r3.z;
        }
        r0.x = r5.w * r0.x;
        r5.w = max(0.349999994, r0.x);
        r7.x = isSceneScatter ? r5.w : r0.x;
        r6.xyz = r2.www * r6.xyz;
        r6.xyz = r6.xyz + r6.xyz;
        r0.x = dot(r9.xyz, r9.xyz);
        r0.x = rsqrt(r0.x);
        r9.xzw = r9.xyz * r0.xxx;
        r2.w = dot(vecSunDirection.xyz, r9.xzw);
        r2.w = r2.w * 0.5 + 0.5;
        r5.w = 1 + -r2.w;
        r2.w = r5.w * 0.0500000007 + r2.w;
        r2.w = log2(r2.w);
        r2.w = fSunScatterExpConst * r2.w;
        r2.w = exp2(r2.w);
        r5.w = fScatterDistanceFalloffConst * -r0.z;
        r5.w = 0.721347511 * r5.w;
        r5.w = exp2(r5.w);
        r5.w = 1 + -r5.w;
        r2.w = r5.w * r2.w;
        r10.xyz = vecSunScatterColorConst.xyz * r2.www;
        r10.xyz = r10.xyz * float3(2,2,2) + r6.xyz;
        r0.x = saturate(-r9.y * r0.x + 1);
        r0.x = log2(r0.x);
        r0.x = fHorizonColorExp1Const * r0.x;
        r0.x = exp2(r0.x);
        r0.z = -2.62308191e-07 * r0.z;
        r0.z = exp2(r0.z);
        r0.z = 1 + -r0.z;
        r0.x = r0.x * r0.z;
        r0.x = min(1, r0.x);
        r11.xyz = vecReighColorConst.xyz * float3(10,10,10) + -r10.xyz;
        r10.xyz = r0.xxx * r11.xyz + r10.xyz;
        if (r4.x != 0) {
          r0.z = dot(vecMoonDirection.xyz, r9.xzw);
          r0.z = r0.z * 0.5 + 0.5;
          r2.w = 1 + -r0.z;
          r0.z = r2.w * 0.0500000007 + r0.z;
          r0.z = log2(r0.z);
          r0.z = fSunScatterExpConst * r0.z;
          r0.z = exp2(r0.z);
          r0.z = r0.z * r5.w;
          r9.xyz = vecSunScatterColorConst.xyz * r0.zzz;
          r6.xyz = r9.xyz * float3(2,2,2) + r6.xyz;
          r9.xyz = vecReighColorConst.xyz * float3(10,10,10) + -r6.xyz;
          r6.xyz = r0.xxx * r9.xyz + r6.xyz;
          r6.xyz = r6.xyz + -r10.xyz;
          r10.xyz = r3.www * r6.xyz + r10.xyz;
        }
        r0.x = -r0.y * r0.w + 1;
        r0.x = log2(r0.x);
        r0.x = fHorizonColorExp0Const * r0.x;
        r0.x = exp2(r0.x);
        r0.yzw = vecHorizon0ColorConst.xyz * float3(2,2,2) + -vecSkyBaseColorConst.xyz;
        r0.xyz = r0.xxx * r0.yzw + vecSkyBaseColorConst.xyz;
        r0.xyz = r0.xyz * r3.zzz + r10.xyz;
        r0.w = dot(vecSunDirection.xyz, r1.yzw);
        r0.w = max(0, r0.w);
        r2.w = 100 * fSunGlareExpConst;
        r0.w = log2(r0.w);
        r0.w = r2.w * r0.w;
        r0.w = exp2(r0.w);
        r6.xyz = vecSunGlareColorConst.xyz * r0.www;
        r0.w = saturate(10 * vecSunDirection.y);
        r0.xyz = r6.xyz * r0.www + r0.xyz;
        r0.w = dot(vecMoonDirection.xyz, r1.yzw);
        r0.w = max(0, r0.w);
        r0.w = log2(r0.w);
        r0.w = r2.w * r0.w;
        r0.w = exp2(r0.w);
        r1.yzw = vecSunGlareColorConst.xyz * r0.www;
        r0.w = saturate(10 * vecMoonDirection.y);
        r0.xyz = r1.yzw * r0.www + r0.xyz;
        r0.xyz = max(float3(0.00100000005,0.00100000005,0.00100000005), r0.xyz);
        r0.xyz = log2(r0.xyz);
        r0.xyz = float3(2.20000005,2.20000005,2.20000005) * r0.xyz;
        r7.yzw = exp2(r0.xyz);
        r0.xyzw = r3.yyyy ? r8.xyzw : r7.xyzw;
        r1.yzw = float3(0.00999999978,0.00999999978,0.00999999978) * vecViewPosition.xyz;
        r6.x = 0.00999999978 * r1.x;
        r2.w = dot(vecLightDirection.xyz, vecLightDirection.xyz);
        r2.w = rsqrt(r2.w);
        r3.yzw = vecLightDirection.xyz * r2.www;
        r2.xyz = r2.xyz * float3(0.00999999978,0.00999999978,0.00999999978) + -r1.yzw;
        r2.w = dot(r2.xyz, r2.xyz);
        r2.w = sqrt(r2.w);
        r2.xyz = r2.xyz / r2.www;
        r7.xz = float2(0.00999999978,0.00999999978) * vecViewPosition.xz;
        r7.y = -6360000;
        r2.w = vecViewPosition.y * 0.00999999978 + 6360000;
        r4.x = dot(r2.xyz, r2.xyz);
        r5.w = dot(r2.ww, r2.yy);
        r2.w = r2.w * r2.w + -4.14736009e+13;
        r2.w = r2.w * r4.x;
        r2.w = 4 * r2.w;
        r2.w = r5.w * r5.w + -r2.w;
        r6.z = cmp(r2.w < 0);
        r2.w = sqrt(r2.w);
        r2.w = -r5.w + r2.w;
        r4.x = r4.x + r4.x;
        r2.w = r2.w / r4.x;
        r2.w = cmp(0 < r2.w);
        r2.w = r6.z ? 0 : r2.w;
        r1.x = cmp(720000 < r1.x);
        r6.y = 4;
        r6.xy = r1.xx ? float2(80000,1.12103877e-44) : r6.xy;
        r6.xzw = r6.xxx * r2.xyz;
        r8.xy = r1.xx ? float2(8,9.80908925e-45) : float2(4,4.20389539e-45);
        r6.xzw = r6.xzw / r8.xxx;
        r1.x = dot(r6.xzw, r6.xzw);
        r1.x = sqrt(r1.x);
        r4.x = vecCloudScroll.w / r1.x;
        r4.x = frac(r4.x);
        r4.x = frac(r4.x);
        r1.yzw = r6.xzw * r4.xxx + r1.yzw;
        r6.xz = float2(0.00999999978,0.5) * r1.xx;
        r5.w = min(1, r6.x);
        r6.x = 9.99999975e-06 * fCloudDetailScale;
        r6.w = 100 + -fCloudDensity;
        r6.w = fRainAmount * r6.w + fCloudDensity;
        r6.w = r6.w * 0.0199999996 + -1;
        r8.xz = float2(9.99999997e-07,0.221666664) * fCloudBaseScale;
        r7.w = fCloudDensityContrast * 0.100000001 + 1;
        r8.w = 1 + -r4.x;
        r9.x = cmp(r5.w < 0.999000013);
        r9.yzw = c_vecCloudMieExtinctionCoeff.xyz + c_vecCloudRayleighExtinctionCoeff.xyz;
        r10.x = -0.5 / fShadowmapSizeNear;
        r10.yzw = float3(0,0,0);
        r12.xyz = float3(0,0,0);
        r13.xyz = r1.yzw;
        r14.xyz = float3(0,0,0);
        r15.xyz = float3(0,0,0);
        r16.xyz = float3(0,0,0);
        r17.xyz = float3(0,0,0);
        r18.xyz = float3(0,0,0);
        r11.xyzw = float4(0,0,0,0);
        // Sample the volumetric cloud volume with a fixed number of steps, accumulating transmittance and lighting.
        while (true) {
          r12.w = cmp((int)r11.w >= (int)r6.y);
          if (r12.w != 0) break;
          r19.xyz = r13.xyz + -r7.xyz;
          r12.w = dot(r19.xyz, r19.xyz);
          r12.w = sqrt(r12.w);
          r19.xyz = r19.xyz / r12.www;
          r12.w = -6360000 + r12.w;
          r12.w = max(0.00999999978, r12.w);
          r20.xy = -r12.ww / fRayleighHeight;
          r20.xy = float2(1.44269502,1.44269502) * r20.xy;
          r20.xy = exp2(r20.xy);
          // Sample base and detail cloud noise volumes to derive the current layer density.
          r21.xyz = r13.xyz * r8.xxx + vecCloudScroll.xyz;
          r21.xyz = texCloudBase.SampleLevel(PA_LINEAR_WRAP_FILTER_s, r21.xyz, 0).xyz;
          r22.xyz = r13.xyz * r6.xxx + vecCloudDetailScroll.xyz;
          r22.xyz = texCloudDetail.SampleLevel(PA_LINEAR_WRAP_FILTER_s, r22.xyz, 0).xyz;
          r13.w = dot(r22.xyz, float3(0.625,0.25,0.125));
          r13.w = 1 + -r13.w;
          r14.w = -fCloudAltitude + r13.y;
          r14.w = saturate(r14.w / fCloudThickness);
          r14.w = sqrt(r14.w);
          r14.w = 3.14159274 * r14.w;
          r14.w = sin(r14.w);
          r14.w = r14.w * r14.w;
          r15.w = dot(r21.xyz, float3(0.625,0.25,0.125));
          r14.w = saturate(r15.w * r14.w);
          r14.w = -0.5 + r14.w;
          r14.w = r14.w * r7.w + r6.w;
          r14.w = saturate(0.5 + r14.w);
          r15.w = r14.w + -r13.w;
          r13.w = 1 + -r13.w;
          r20.z = saturate(r15.w / r13.w);
          r13.w = dot(r19.xyz, r3.yzw);
          r19.x = 1.24999997e-05 * r12.w;
          r19.y = r13.w * 0.5 + 0.5;
          r19.xy = texNetDensityToAtmosphereTop.SampleLevel(PA_LINEAR_CLAMP_FILTER_s, r19.xy, 0).xy;
          // Step forward along the light vector to accumulate multiple density taps for a cheap integral.
          r21.xyz = r3.yzw * r8.zzz + r13.xyz;
          r22.xyz = r21.xyz * r8.xxx + vecCloudScroll.xyz;
          r22.xyz = texCloudBase.SampleLevel(PA_LINEAR_WRAP_FILTER_s, r22.xyz, 0).xyz;
          r12.w = -fCloudAltitude + r21.y;
          r12.w = saturate(r12.w / fCloudThickness);
          r12.w = sqrt(r12.w);
          r12.w = 3.14159274 * r12.w;
          r12.w = sin(r12.w);
          r12.w = r12.w * r12.w;
          r13.w = dot(r22.xyz, float3(0.625,0.25,0.125));
          r12.w = saturate(r13.w * r12.w);
          r12.w = -0.5 + r12.w;
          r12.w = r12.w * r7.w + r6.w;
          r12.w = saturate(0.5 + r12.w);
          r13.w = r14.w + r12.w;
          r13.w = 0.166666672 * r13.w;
          r13.w = r14.w * 0.142857149 + r13.w;
          r21.xyz = r3.yzw * r8.zzz + r21.xyz;
          r22.xyz = r21.xyz * r8.xxx + vecCloudScroll.xyz;
          r22.xyz = texCloudBase.SampleLevel(PA_LINEAR_WRAP_FILTER_s, r22.xyz, 0).xyz;
          r14.w = -fCloudAltitude + r21.y;
          r14.w = saturate(r14.w / fCloudThickness);
          r14.w = sqrt(r14.w);
          r14.w = 3.14159274 * r14.w;
          r14.w = sin(r14.w);
          r14.w = r14.w * r14.w;
          r15.w = dot(r22.xyz, float3(0.625,0.25,0.125));
          r14.w = saturate(r15.w * r14.w);
          r14.w = -0.5 + r14.w;
          r14.w = r14.w * r7.w + r6.w;
          r14.w = saturate(0.5 + r14.w);
          r12.w = r14.w + r12.w;
          r12.w = r12.w * 0.200000003 + r13.w;
          r21.xyz = r3.yzw * r8.zzz + r21.xyz;
          r22.xyz = r21.xyz * r8.xxx + vecCloudScroll.xyz;
          r22.xyz = texCloudBase.SampleLevel(PA_LINEAR_WRAP_FILTER_s, r22.xyz, 0).xyz;
          r13.w = -fCloudAltitude + r21.y;
          r13.w = saturate(r13.w / fCloudThickness);
          r13.w = sqrt(r13.w);
          r13.w = 3.14159274 * r13.w;
          r13.w = sin(r13.w);
          r13.w = r13.w * r13.w;
          r15.w = dot(r22.xyz, float3(0.625,0.25,0.125));
          r13.w = saturate(r15.w * r13.w);
          r13.w = -0.5 + r13.w;
          r13.w = r13.w * r7.w + r6.w;
          r13.w = saturate(0.5 + r13.w);
          r14.w = r14.w + r13.w;
          r12.w = r14.w * 0.25 + r12.w;
          r21.xyz = r3.yzw * r8.zzz + r21.xyz;
          r22.xyz = r21.xyz * r8.xxx + vecCloudScroll.xyz;
          r22.xyz = texCloudBase.SampleLevel(PA_LINEAR_WRAP_FILTER_s, r22.xyz, 0).xyz;
          r14.w = -fCloudAltitude + r21.y;
          r14.w = saturate(r14.w / fCloudThickness);
          r14.w = sqrt(r14.w);
          r14.w = 3.14159274 * r14.w;
          r14.w = sin(r14.w);
          r14.w = r14.w * r14.w;
          r15.w = dot(r22.xyz, float3(0.625,0.25,0.125));
          r14.w = saturate(r15.w * r14.w);
          r14.w = -0.5 + r14.w;
          r14.w = r14.w * r7.w + r6.w;
          r14.w = saturate(0.5 + r14.w);
          r13.w = r14.w + r13.w;
          r12.w = r13.w * 0.333333343 + r12.w;
          r21.xyz = r3.yzw * r8.zzz + r21.xyz;
          r21.xzw = r21.xyz * r8.xxx + vecCloudScroll.xyz;
          r21.xzw = texCloudBase.SampleLevel(PA_LINEAR_WRAP_FILTER_s, r21.xzw, 0).xyz;
          r13.w = -fCloudAltitude + r21.y;
          r13.w = saturate(r13.w / fCloudThickness);
          r13.w = sqrt(r13.w);
          r13.w = 3.14159274 * r13.w;
          r13.w = sin(r13.w);
          r13.w = r13.w * r13.w;
          r15.w = dot(r21.xzw, float3(0.625,0.25,0.125));
          r13.w = saturate(r15.w * r13.w);
          r13.w = -0.5 + r13.w;
          r13.w = r13.w * r7.w + r6.w;
          r13.w = saturate(0.5 + r13.w);
          r13.w = r14.w + r13.w;
          r12.w = r13.w * 0.5 + r12.w;
          r19.z = r12.w * r8.z;
          r12.w = cmp((int)r11.w == (int)r8.y);
          r12.w = r12.w ? r8.w : 1;
          r12.w = r11.w ? r12.w : r4.x;
          r21.xyz = r20.xyz * r12.www;
          // Optionally fetch cascaded shadow attenuation to darken the cloud sample under terrain shadows.
          if (r9.x != 0) {
            r22.xyz = r13.xyz * float3(100,100,100) + -vecShadowViewPosition3.xyz;
            r23.xyzw = matShadowProjectionTexScale3._m10_m11_m12_m13 * r22.yyyy;
            r23.xyzw = r22.xxxx * matShadowProjectionTexScale3._m00_m01_m02_m03 + r23.xyzw;
            r22.xyzw = r22.zzzz * matShadowProjectionTexScale3._m20_m21_m22_m23 + r23.xyzw;
            r22.xyzw = matShadowProjectionTexScale3._m30_m31_m32_m33 + r22.xyzw;
            r23.xy = cmp(float2(0.00999999978,0.00999999978) < r22.xy);
            r23.zw = cmp(r22.xy < float2(0.99000001,0.99000001));
            r13.w = r23.z ? r23.x : 0;
            r13.w = r23.y ? r13.w : 0;
            r13.w = r23.w ? r13.w : 0;
            if (r13.w != 0) {
              r23.xy = r22.xy * float2(0.5,0.5) + r10.xx;
              r22.xy = float2(0.5,0.5) + r23.xy;
              r22.xyz = r22.xyz / r22.www;
              r23.xy = cmp(float2(0,0) < r22.xy);
              r23.zw = cmp(r22.xy < float2(1,1));
              r13.w = r23.z ? r23.x : 0;
              r13.w = r23.y ? r13.w : 0;
              r13.w = r23.w ? r13.w : 0;
              r14.w = r22.z * -1500 + 1500;
              r15.w = texShadowMap0.SampleLevel(PA_POINT_CLAMP_FILTER_s, r22.xy, 0).x;
              r15.w = abs(r15.w) + -r22.z;
              r14.w = r15.w * r14.w;
              r14.w = 1.44269502 * r14.w;
              r14.w = exp2(r14.w);
              r14.w = min(1, r14.w);
              r13.w = r13.w ? r14.w : 1;
            } else {
              r13.w = 1;
            }
            r14.w = 1 + -r13.w;
            r13.w = r5.w * r14.w + r13.w;
          } else {
            r13.w = 1;
          }
          r20.xyz = r20.xyz * r12.www + r14.xyz;
          r20.xyz = r20.xyz * r6.zzz;
          r18.xyz = r20.xyz * r13.www + r18.xyz;
          r19.xyz = r18.xyz + r19.xyz;
          r20.xyz = c_vecMieExtinctionCoeff.xyz * r19.yyy;
          r20.xyz = float3(1.11000001,1.11000001,1.11000001) * r20.xyz;
          r20.xyz = c_vecRayleighExtinctionCoeff.xyz * r19.xxx + r20.xyz;
          r19.xyw = r19.xxx * float3(2.05559991e-06,4.97880001e-06,2.13600003e-07) + r20.xyz;
          r19.xyz = r19.zzz * r9.yzw + r19.xyw;
          r19.xyz = float3(-1.44269502,-1.44269502,-1.44269502) * r19.xyz;
          r19.xyz = exp2(r19.xyz);
          r20.xyz = r21.xxx * r19.xyz;
          r22.xyz = r21.yyy * r19.xyz;
          r23.xyz = r21.zzz * r19.xyz;
          r24.xyz = r21.xxx * r19.xyz + r15.xyz;
          r24.xyz = r24.xyz * r6.zzz;
          r10.yzw = r24.xyz * r13.www + r10.yzw;
          r24.xyz = r21.yyy * r19.xyz + r16.xyz;
          r24.xyz = r24.xyz * r6.zzz;
          r11.xyz = r24.xyz * r13.www + r11.xyz;
          r19.xyz = r21.zzz * r19.xyz + r17.xyz;
          r19.xyz = r19.xyz * r6.zzz;
          r12.xyz = r19.xyz * r13.www + r12.xyz;
          r13.xyz = r2.xyz * r1.xxx + r13.xyz;
          r11.w = (int)r11.w + 1;
          r14.xyz = r21.xyz;
          r15.xyz = r20.xyz;
          r16.xyz = r22.xyz;
          r17.xyz = r23.xyz;
        }
        // Combine total cloud extinction with the precomputed single-scatter sky contribution.
        r1.xyz = c_vecMieExtinctionCoeff.xyz * r18.yyy;
        r1.xyz = c_vecRayleighExtinctionCoeff.xyz * r18.xxx + r1.xyz;
        r1.xyz = r9.yzw * r18.zzz + r1.xyz;
        r1.xyz = float3(-1.44269502,-1.44269502,-1.44269502) * r1.xyz;
        r1.xyz = exp2(r1.xyz);
        // Evaluate angular scattering terms for the final inscatter colour at this pixel.
        r1.w = dot(r2.xyz, r3.yzw);
        r2.x = r1.w * 0.5 + 1.39999998;
        r2.x = 0.0636619776 * r2.x;
        r2.xyz = c_vecAngularRayleighSctrCoeff.xyz * r2.xxx;
        r2.xyz = c_vecRayleighColor.xyz * r2.xyz;
        r3.yz = c_vecCS_g.ww * c_vecCS_g.ww + float2(1,2);
        r3.w = dot(r1.ww, c_vecCS_g.ww);
        r3.y = r3.y + -r3.w;
        r3.y = max(0.00499999989, r3.y);
        r3.w = -c_vecCS_g.w * c_vecCS_g.w + 1;
        r3.w = 3 * r3.w;
        r3.z = r3.z + r3.z;
        r3.z = r3.w / r3.z;
        r3.w = r1.w * r1.w + 1;
        r3.y = log2(r3.y);
        r3.yz = float2(1.5,0.0795774683) * r3.yz;
        r3.y = exp2(r3.y);
        r3.y = r3.w / r3.y;
        r3.y = r3.z * r3.y;
        r3.yzw = c_vecAngularMieSctrCoeff.xyz * r3.yyy;
        r3.yzw = c_vecMieColor.xyz * r3.yzw;
        r3.yzw = r11.xyz * r3.yzw;
        r2.xyz = r10.yzw * r2.xyz + r3.yzw;
  // Apply cloud anisotropy and colour modulation, then clamp using the transmittance mask.
        r3.yz = -r1.ww * float2(-0.400000006,1.53999996) + float2(1.03999996,1.59290004);
        r3.yz = log2(r3.yz);
        r3.yz = float2(1.5,1.5) * r3.yz;
        r3.yz = exp2(r3.yz);
        r3.yz = float2(12.566371,12.566371) * r3.yz;
        r3.yz = float2(0.959999979,0.407099992) / r3.yz;
        r6.xyz = c_vecAngularCloudMieSctrCoeff.xyz * r3.yyy;
        r3.yzw = c_vecAngularCloudMieSctrCoeff.xyz * r3.zzz;
        r3.yzw = float3(0.5,0.5,0.5) * r3.yzw;
        r3.yzw = r6.xyz * float3(0.5,0.5,0.5) + r3.yzw;
        r3.yzw = r12.xyz * r3.yzw;
        r2.xyz = r3.yzw * c_vecCloudColor.xyz + r2.xyz;
        r2.xyz = (int3)r2.xyz & (int3)r2.www;
        r1.xyz = r2.www ? r1.xyz : float3(1,1,1);
        r1.w = 100 * fScatteringScale;
        r2.xyz = r2.xyz * r1.www;
        r1.w = 3 * hdrEncodeMulti;
        r0.yzw = hdrEncodeMulti * r0.yzw;
        r0.yzw = float3(3,3,3) * r0.yzw;
        r4.yzw = r2.xyz * r1.www + r0.yzw;
        r0.x = max(0.150000006, r0.x);
        r5.xyz = r1.xyz * r0.xxx;
      }
    }
  }
  r0.xyzw = texDiffuse.Sample(PA_POINT_CLAMP_FILTER_s, v1.xy).xyzw;
  // Reconstruct the base framebuffer colour prior to sky injection.
  r0.xyzw = log2(r0.xyzw);
  r0.xyzw = gammaConst * r0.xyzw;
  r0.xyzw = exp2(r0.xyzw);
  // Generate a rotating starfield sample in view space to sprinkle on top of the sky.
  r1.x = cmp(0.999999881 < r3.x);
  r1.y = dot(v2.xyz, v2.xyz);
  r1.y = rsqrt(r1.y);
  r1.yzw = v2.xyz * r1.yyy;
  r2.x = 0.00499999989 * fTime;
  sincos(r2.x, r2.x, r3.x);
  r2.y = 1 + -r3.x;
  r6.xy = float2(0.44721359,-0.89442718) * r2.xx;
  r7.w = -0.400000006 * r2.y;
  r3.y = -r6.x;
  r7.xy = r2.yy * float2(0.200000003,0.800000012) + r3.xx;
  r6.z = r3.x;
  r6.w = -r6.y;
  r2.x = dot(r1.wyz, r6.xzw);
  r7.z = r6.y;
  r2.y = dot(r1.zyw, r7.xzw);
  r3.zw = r7.wy;
  r2.z = dot(r1.yzw, r3.yzw);
  r1.yzw = texStarLayer.Sample(PA_LINEAR_CLAMP_FILTER_s, r2.xyz).xyz;
  r2.xyz = r1.yzw * r1.yzw;
  r1.yzw = r2.xyz * r1.yzw;
  r1.yzw = fStarLayerConst * r1.yzw;
  r1.yzw = hdrEncodeMulti * r1.yzw;
  r1.yzw = r1.yzw * float3(300,300,300) + r0.xyz;
  r0.xyz = r1.xxx ? r1.yzw : r0.xyz;
  // Blend the skybox, sun/moon glare, volumetric scatter and stars before encoding back to HDR.
  r0.xyz = r0.xyz * r5.xyz + r4.yzw;
  r1.x = 1 / gammaConst;
  r0.xyz = log2(r0.xyz);
  r0.xyz = r1.xxx * r0.xyz;
  o0.xyz = exp2(r0.xyz);
  o0.w = r0.w;
  return;
}