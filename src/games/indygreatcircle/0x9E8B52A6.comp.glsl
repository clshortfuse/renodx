// Color Grade
#version 450
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#if defined(GL_EXT_control_flow_attributes)
#extension GL_EXT_control_flow_attributes : require
#define SPIRV_CROSS_FLATTEN [[flatten]]
#define SPIRV_CROSS_BRANCH [[dont_flatten]]
#define SPIRV_CROSS_UNROLL [[unroll]]
#define SPIRV_CROSS_LOOP [[dont_unroll]]
#else
#define SPIRV_CROSS_FLATTEN
#define SPIRV_CROSS_BRANCH
#define SPIRV_CROSS_UNROLL
#define SPIRV_CROSS_LOOP
#endif
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

const ivec2 _4776[8] = ivec2[](ivec2(-1), ivec2(-1, 1), ivec2(1, -1), ivec2(1), ivec2(-1, 0), ivec2(1, 0), ivec2(0, -1), ivec2(0, 1));

struct _4994
{
    float _m0;
    float _m1;
};

struct _4995
{
    float _m0[6];
    float _m1[6];
    _4994 _m2;
    _4994 _m3;
    _4994 _m4;
    float _m5;
    float _m6;
};

layout(buffer_reference) buffer _850;
layout(buffer_reference, buffer_reference_align = 16, std430) buffer _850
{
    uvec4 _m0;
    vec4 _m1;
    vec4 _m2;
    vec4 _m3;
    vec4 _m4;
    vec4 _m5;
    vec4 _m6;
    vec4 _m7;
    vec4 _m8;
    vec4 _m9;
    uint _m10;
    float _m11;
    float _m12;
    float _m13;
    float _m14;
    float _m15;
    float _m16;
    float _m17;
    float _m18;
    float _m19;
    uint _m20;
    float _m21;
    float _m22;
    int _m23;
    uint _m24;
};

layout(set = 0, binding = 0, std140) uniform _862_864
{
    uvec4 _m0;
    vec4 _m1;
    vec4 _m2;
    vec4 _m3;
    vec4 _m4;
    vec4 _m5;
    vec4 _m6;
    vec4 _m7;
    vec4 _m8;
    vec4 _m9;
    vec4 _m10;
    vec4 _m11;
    vec4 _m12;
    vec4 _m13;
    vec4 _m14;
    vec4 _m15;
    vec4 _m16;
    vec4 _m17;
    vec4 _m18;
    vec4 _m19;
    vec4 _m20;
    vec4 _m21;
    vec4 _m22;
    vec4 _m23;
    vec4 _m24;
    vec4 _m25;
    vec4 _m26;
    vec4 _m27;
    vec4 _m28;
    float _m29;
    float _m30;
    float _m31;
    float _m32;
    float _m33;
    float _m34;
    float _m35;
    float _m36;
    float _m37;
    float _m38;
    float _m39;
    float _m40;
    float _m41;
    float _m42;
    float _m43;
    float _m44;
    float _m45;
    float _m46;
    float _m47;
    float _m48;
    float _m49;
    float _m50;
    float _m51;
    float _m52;
    float _m53;
    float _m54;
    float _m55;
    float _m56;
    float _m57;
    uint _m58;
    uint _m59;
    uint _m60;
    float _m61;
    uint _m62;
    uint _m63;
    uint _m64;
    float _m65;
    float _m66;
    float _m67;
    float _m68;
    float _m69;
    float _m70;
    float _m71;
    float _m72;
    int _m73;
    float _m74;
    float _m75;
    uint _m76;
} _864;

layout(set = 1, binding = 8, std140) uniform _2766_2768
{
    vec4 _m0[4];
} _2768;

layout(set = 1, binding = 9, std140) uniform _4225_4227
{
    vec4 _m0[3];
} _4227;

layout(set = 0, binding = 31, std430) restrict readonly buffer _4645_4647
{
    vec4 _m0[];
} _4647;

layout(set = 0, binding = 1, std140) uniform _4952_4954
{
    vec4 _m0[1024];
} _4954;

layout(set = 0, binding = 2, std430) restrict readonly buffer _4956_4958
{
    uvec4 _m0[];
} _4958;

layout(set = 0, binding = 3, std430) restrict readonly buffer _4960_4962
{
    uvec4 _m0[];
} _4962;

layout(push_constant, std430) uniform _848_852
{
    _850 _m0;
} _852;

layout(set = 0, binding = 9) uniform texture2D _883;
layout(set = 0, binding = 6) uniform sampler _887;
layout(set = 0, binding = 10) uniform texture2D _1162;
layout(set = 1, binding = 2) uniform texture2D _1188;
layout(set = 1, binding = 1) uniform texture2D _1356;
layout(set = 1, binding = 3) uniform texture2D _1848;
layout(set = 0, binding = 5) uniform texture2D _1887;
layout(set = 0, binding = 11) uniform texture2D _1905;
layout(set = 1, binding = 4) uniform texture2D _1922;
layout(set = 0, binding = 12) uniform texture2D _1939;
layout(set = 0, binding = 7) uniform sampler _1941;
layout(set = 1, binding = 5) uniform texture3D _2049;
layout(set = 0, binding = 8) uniform texture2D _2261;
layout(set = 0, binding = 13) uniform texture2D _2490;
layout(set = 0, binding = 4) uniform sampler _2492;
layout(set = 1, binding = 6, r8) uniform readonly image2D _2552;
layout(set = 1, binding = 7) uniform texture2D _2627;
layout(set = 0, binding = 14) uniform texture2D _3030;
layout(set = 0, binding = 15) uniform texture2D _3067;
layout(set = 0, binding = 16) uniform sampler _3069;
layout(set = 0, binding = 17) uniform texture2D _3330;
layout(set = 0, binding = 18) uniform texture2D _3366;
layout(set = 0, binding = 19) uniform sampler _3368;
layout(set = 0, binding = 20) uniform texture2D _3631;
layout(set = 0, binding = 21) uniform texture2D _3667;
layout(set = 0, binding = 22) uniform sampler _3669;
layout(set = 0, binding = 23) uniform texture2D _3931;
layout(set = 0, binding = 24) uniform texture2D _3967;
layout(set = 0, binding = 25) uniform sampler _3969;
layout(set = 0, binding = 26) uniform texture2D _4321;
layout(set = 0, binding = 27) uniform texture2D _4362;
layout(set = 0, binding = 28) uniform texture2D _4402;
layout(set = 0, binding = 29) uniform texture3D _4488;
layout(set = 1, binding = 10) uniform texture2D _4612;
layout(set = 0, binding = 30) uniform sampler _4614;
layout(set = 1, binding = 11) uniform texture2D _4731;
layout(set = 1, binding = 12) uniform texture2D _4853;
layout(set = 1, binding = 13, r11f_g11f_b10f) uniform writeonly image2D _4930;
layout(set = 2, binding = 0) uniform texture2D _4942[];
layout(set = 2, binding = 1) uniform textureCube _4946[1];
layout(set = 2, binding = 2) uniform texture3D _4949[1];

uint _149;
uint _151;
uint _4969;

uint _27(float _26)
{
    return floatBitsToUint(_26);
}

float _33(float _30, float _31, float _32)
{
    return max(_30, max(_31, _32));
}

vec3 _146(vec3 _145)
{
    float _817 = _145.x;
    float _820 = _145.y;
    float _823 = _145.z;
    return _145 * (1.0 / (1.0 - (0.9900000095367431640625 * _33(_817, _820, _823))));
}

vec3 _52(vec3 _50, mat3 _51)
{
    return _50 * _51;
}

vec3 _65(vec3 _61, mat3 _62, mat3 _63, mat3 _64)
{
    vec3 _267 = _61;
    mat3 _268 = _62;
    vec3 _270 = _52(_267, _268);
    mat3 _271 = _63;
    vec3 _273 = _52(_270, _271);
    mat3 _274 = _64;
    return _52(_273, _274);
}

// BT709 -> XYZ
vec3 _140(vec3 _139)
{
    return _65(_139, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875)), mat3(vec3(1.04981100559234619140625, 0.0, -9.74845024757087230682373046875e-05), vec3(-0.49590301513671875, 1.37331306934356689453125, 0.09824003279209136962890625), vec3(3.9999999756901161163114011287689e-08, 0.0, 0.991252005100250244140625)));
}

float _129(float _125, float _126, float _127, float _128)
{
    float _555;
    if (_125 < _127)
    {
        _555 = _125;
    }
    else
    {
        float _558 = (_126 - _127) / pow(pow((1.0 - _127) / (_126 - _127), -_128) - 1.0, 1.0 / _128);
        float _576 = (_125 - _127) / _558;
        float _582 = pow(_576, _128);
        _555 = _127 + ((_558 * _576) / pow(1.0 + _582, 1.0 / _128));
    }
    return _555;
}

vec3 _132(vec3 _131)
{
    vec3 _614 = _131;
    mat3 _616 = mat3(vec3(1.45143926143646240234375, -0.236510753631591796875, -0.214928567409515380859375), vec3(-0.07655377686023712158203125, 1.1762297153472900390625, -0.0996759235858917236328125), vec3(0.0083161480724811553955078125, -0.0060324496589601039886474609375, 0.99771630764007568359375));
    vec3 _600 = _52(_614, _616);
    float _619 = _600.x;
    float _622 = _600.y;
    float _625 = _600.z;
    float _618 = _33(_619, _622, _625);
    vec3 _633;
    if (_618 == 0.0)
    {
        _633 = vec3(0.0);
    }
    else
    {
        _633 = (vec3(_618) - _600) / vec3(abs(_618));
    }
    float _648 = _633.x;
    float _651 = 1.14699995517730712890625;
    float _652 = 0.814999997615814208984375;
    float _653 = 1.2000000476837158203125;
    vec3 _644;
    _644.x = _129(_648, _651, _652, _653);
    float _658 = _633.y;
    float _661 = 1.26400005817413330078125;
    float _662 = 0.802999973297119140625;
    float _663 = 1.2000000476837158203125;
    _644.y = _129(_658, _661, _662, _663);
    float _668 = _633.z;
    float _671 = 1.3120000362396240234375;
    float _672 = 0.87999999523162841796875;
    float _673 = 1.2000000476837158203125;
    _644.z = _129(_668, _671, _672, _673);
    vec3 _676 = vec3(_618) - (_644 * abs(_618));
    vec3 _698 = _676;
    mat3 _700 = mat3(vec3(0.695452213287353515625, 0.140678703784942626953125, 0.16386906802654266357421875), vec3(0.0447945632040500640869140625, 0.859671115875244140625, 0.095534317195415496826171875), vec3(-0.0055258828215301036834716796875, 0.0040252101607620716094970703125, 1.00150072574615478515625));
    vec3 _684 = _52(_698, _700);
    return _684;
}

vec3 _143(vec3 _142)
{
    return _65(_142, mat3(vec3(0.952552378177642822265625, 0.0, 9.3678601842839270830154418945313e-05), vec3(0.3439664542675018310546875, 0.728166103363037109375, -0.07213254272937774658203125), vec3(0.0, 0.0, 1.00882518291473388671875)), mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125)), mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875)));
}

// ACEScc Encode
float _122(float _121)
{
    if (_121 <= 0.0078125)
    {
        return (10.5402374267578125 * _121) + 0.072905533015727996826171875;
    }
    else
    {
        return (log2(_121) + 9.72000026702880859375) / 17.520000457763671875;
    }
}

// ACEScc Decode
float _119(float _118)
{
    if (_118 > 0.15525114536285400390625)
    {
        return exp2((_118 * 17.520000457763671875) - 9.72000026702880859375);
    }
    else
    {
        return (_118 - 0.072905533015727996826171875) / 10.5402374267578125;
    }
}

vec2 _16(vec2 _15)
{
    return clamp(_15, vec2(0.0), vec2(1.0));
}

float _10(float _9)
{
    return clamp(_9, 0.0, 1.0);
}

// y from BT.709
float _86(vec3 _85)
{
    return dot(_85, vec3(0.2125999927520751953125, 0.715200006961822509765625, 0.072200000286102294921875));
}

float _68(float _67)
{
    float _281;
    if (_67 < 1.0)
    {
        _281 = _67;
    }
    else
    {
        _281 = 1.0 / _67;
    }
    float _278 = _281;
    float _289 = _278 * _278;
    float _293 = 0.087292902171611785888671875;
    _293 = (-0.3018949925899505615234375) + (_293 * _289);
    _293 = 1.0 + (_293 * _289);
    _293 *= _278;
    float _309;
    if (_67 < 1.0)
    {
        _309 = _293;
    }
    else
    {
        _309 = 1.57079637050628662109375 - _293;
    }
    return _309;
}

float _71(float _70)
{
    float _323 = abs(_70);
    float _320 = _68(_323);
    float _327;
    if (_70 < 0.0)
    {
        _327 = -_320;
    }
    else
    {
        _327 = _320;
    }
    return _327;
}

float _76(float _74, float _75)
{
    float _341 = _74 / _75;
    float _337 = _71(_341);
    SPIRV_CROSS_FLATTEN
    if (_75 < 0.0)
    {
        _337 += ((_74 >= 0.0) ? 3.1415927410125732421875 : (-3.1415927410125732421875));
    }
    return _337;
}

float _96(float _95)
{
    return fract(sin(_95) * 158.545318603515625);
}

float _101(float _98, float _99, float _100)
{
    float _414 = _98;
    float _420 = _98 + _99;
    return mix(_96(_414), _96(_420), _100);
}

float _107(float _104, vec2 _105, vec2 _106)
{
    float _427 = _104;
    float _429 = _105.x;
    float _432 = _106.x;
    float _426 = _101(_427, _429, _432);
    float _441 = _104 + _105.y;
    float _442 = _105.x;
    float _445 = _106.x;
    float _436 = _101(_441, _442, _445);
    return mix(_426, _436, _106.y);
}

float _116(inout vec2 _112, inout vec2 _113, float _114, int _115)
{
    float _456 = 0.0;
    float _457 = _114;
    SPIRV_CROSS_LOOP
    for (int _459 = 0; _459 < _115; _459++)
    {
        vec2 _469 = _112 + _113;
        vec2 _473 = floor(_469);
        _469 = fract(_469);
        _469 = (_469 * _469) * (vec2(3.0) - (_469 * 2.0));
        float _492 = dot(_473, vec2(1.0, 157.0));
        vec2 _493 = vec2(1.0, 157.0);
        vec2 _494 = _469;
        _456 += (_107(_492, _493, _494) * _457);
        _457 *= _114;
        _112 *= 2.0;
        _113 *= 0.60000002384185791015625;
    }
    return _456;
}

float _93(uvec2 _91, uint _92)
{
    uvec2 _370 = _91 & uvec2(3u);
    return float(((((2068378560u * (1u - (_370.x >> uint(1)))) + (1500172770u * (_370.x >> uint(1)))) >> ((_370.y + ((_370.x & 1u) << uint(2))) << uint(2))) + _92) & 15u) / 16.0;
}

float _42(float _41)
{
    float _224;
    if (_41 > 0.003130800090730190277099609375)
    {
        _224 = (pow(_41, 0.4166666567325592041015625) * 1.05499994754791259765625) - 0.054999999701976776123046875;
    }
    else
    {
        _224 = _41 * 12.9200000762939453125;
    }
    return _224;
}

vec4 _82(uint _81)
{
    return unpackUnorm4x8(_81).wzyx;
}

float _36(float _35)
{
    float _186;
    if (_35 <= 0.040449999272823333740234375)
    {
        _186 = _35 / 12.9200000762939453125;
    }
    else
    {
        _186 = pow((_35 / 1.05499994754791259765625) + 0.0521326996386051177978515625, 2.400000095367431640625);
    }
    return _186;
}

vec3 _39(vec3 _38)
{
    float _203 = _38.x;
    float _208 = _38.y;
    float _213 = _38.z;
    return vec3(_36(_203), _36(_208), _36(_213));
}

vec3 _22(vec3 _21)
{
    return clamp(_21, vec3(0.0), vec3(1.0));
}

// log lut encode
vec3 _137(vec3 _135, float _136)
{
    vec3 _705 = (log(_135 + vec3(0.00999999977648258209228515625)) + vec3(4.60517024993896484375)) / vec3(9.21035003662109375);
    _705 *= ((_136 - 1.0) / _136);
    _705 += vec3(0.5 / _136);
    vec3 _729 = _705;
    return _22(_729);
}

vec3 _45(vec3 _44)
{
    float _239 = _44.x;
    float _243 = _44.y;
    float _247 = _44.z;
    return vec3(_42(_239), _42(_243), _42(_247));
}

vec3 _58(vec3 _55, mat3 _56, mat3 _57)
{
    vec3 _259 = _55;
    mat3 _260 = _56;
    vec3 _262 = _52(_259, _260);
    mat3 _263 = _57;
    return _52(_262, _263);
}

void main()
{
    _149 = 2147483648u;
    _151 = 1073741824u;
    ivec2 _835 = ivec2(gl_GlobalInvocationID.xy);
    vec2 _842 = (vec2(_835) + vec2(0.5)) * _852._m0._m2.zw;
    float _861 = _864._m65;
    float _869 = 1.0 / _861;
    vec2 _872 = _842 - vec2(0.5);
    float _876 = length(_872);
    vec2 _879 = (textureLod(sampler2D(_883, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xy - vec2(0.4980392158031463623046875)) * 0.0199999995529651641845703125;
    _879.x *= _869;
    float _912 = textureLod(sampler2D(_883, _887), vec4(_842 + _879, 0.0, 0.0).xy, vec4(_842 + _879, 0.0, 0.0).w).z;
    vec2 _932 = _842 + (_879 * _912);
    float _938 = _852._m0._m11;
    SPIRV_CROSS_BRANCH
    if (_938 > 0.0)
    {
        float _949 = float(_938 < 1.0);
        vec2 _953 = _842;
        _953.x *= _861;
        _953.x *= (1.0 + (0.4000000059604644775390625 * _949));
        _953.y -= ((_949 * _864._m66) * 2.0);
        _953 *= 6.0;
        _953 += vec2(_864._m66 * 1.5);
        vec2 _988 = vec2(sin(_953.x - _953.y) * sin(_953.y), cos(_953.x + _953.y) * cos(_953.y)) * 0.0040000001899898052215576171875;
        _988.x *= _869;
        _988 *= (1.0 + ((_949 * 3000.0) * _988.x));
        float _1026 = (_949 * _864._m67) + ((1.0 - _949) * _864._m68);
        _932 += (_988 * (_938 * _1026));
    }
    vec3 _1178;
    SPIRV_CROSS_BRANCH
    if (((_852._m0._m24 & 1u) != 0u) == false)
    {
        float _1058 = _864._m69;
        bool _1067 = _864._m70 != 0.0;
        bool _1075;
        if (!_1067)
        {
            _1075 = _864._m8.z != 0.0;
        }
        else
        {
            _1075 = _1067;
        }
        bool _1083;
        if (!_1075)
        {
            _1083 = _864._m71 != 0.0;
        }
        else
        {
            _1083 = _1075;
        }
        bool _1063 = _1083;
        float _1084 = 0.0;
        SPIRV_CROSS_BRANCH
        if ((_852._m0._m12 != 0.0) && (_876 > 0.0))
        {
            _1084 = _852._m0._m12 * pow(_876, _852._m0._m13 - 1.0);
        }
        vec2 _1109 = _872 * _1084;
        SPIRV_CROSS_BRANCH
        if (_1063 || (_1058 != 0.0))
        {
            SPIRV_CROSS_BRANCH
            if (_1058 != 0.0)
            {
                float _1123 = 1.0 - (0.100000001490116119384765625 * _1058);
                float _1128 = 0.100000001490116119384765625 * _1058;
                float _1131 = (_932.x * _1123) + (0.75 * _1128);
                float _1140 = 0.25 * _1128;
                vec2 _1144 = vec2(_1131 + _1140, _932.y);
                vec2 _1151 = vec2(_1131 - _1140, _932.y);
                float _1158 = 0.0;
                SPIRV_CROSS_BRANCH
                if (_1063)
                {
                    _1158 = textureLod(sampler2D(_1162, _887), vec4(_1131, _932.y, 0.0, 0.0).xy, vec4(_1131, _932.y, 0.0, 0.0).w).w;
                }
                _1178 = vec3(0.0);
                SPIRV_CROSS_BRANCH
                if (_1158 != 0.0)
                {
                    SPIRV_CROSS_BRANCH
                    if (_1084 != 0.0)
                    {
                        vec3 _1187 = vec3(textureLod(sampler2D(_1188, _887), vec4(_1144 - _1109, 0.0, 0.0).xy, vec4(_1144 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1188, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).y, textureLod(sampler2D(_1188, _887), vec4(_1144 + _1109, 0.0, 0.0).xy, vec4(_1144 + _1109, 0.0, 0.0).w).z);
                        vec3 _1243 = vec3(textureLod(sampler2D(_1188, _887), vec4(_1151 - _1109, 0.0, 0.0).xy, vec4(_1151 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1188, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).y, textureLod(sampler2D(_1188, _887), vec4(_1151 + _1109, 0.0, 0.0).xy, vec4(_1151 + _1109, 0.0, 0.0).w).z);
                        _1178 += ((_1187 + _1243) * (_1158 * 0.5));
                    }
                    else
                    {
                        vec3 _1307 = textureLod(sampler2D(_1188, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).xyz;
                        vec3 _1323 = textureLod(sampler2D(_1188, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).xyz;
                        _1178 += ((_1307 + _1323) * (_1158 * 0.5));
                    }
                }
                SPIRV_CROSS_BRANCH
                if (_1158 != 1.0)
                {
                    SPIRV_CROSS_BRANCH
                    if (_1084 != 0.0)
                    {
                        vec3 _1355 = vec3(textureLod(sampler2D(_1356, _887), vec4(_1144 - _1109, 0.0, 0.0).xy, vec4(_1144 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1356, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).y, textureLod(sampler2D(_1356, _887), vec4(_1144 + _1109, 0.0, 0.0).xy, vec4(_1144 + _1109, 0.0, 0.0).w).z);
                        vec3 _1411 = vec3(textureLod(sampler2D(_1356, _887), vec4(_1151 - _1109, 0.0, 0.0).xy, vec4(_1151 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1356, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).y, textureLod(sampler2D(_1356, _887), vec4(_1151 + _1109, 0.0, 0.0).xy, vec4(_1151 + _1109, 0.0, 0.0).w).z);
                        _1178 += ((_1355 + _1411) * ((1.0 - _1158) * 0.5));
                    }
                    else
                    {
                        vec3 _1476 = textureLod(sampler2D(_1356, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).xyz;
                        vec3 _1492 = textureLod(sampler2D(_1356, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).xyz;
                        _1178 += ((_1476 + _1492) * ((1.0 - _1158) * 0.5));
                    }
                }
            }
            else
            {
                float _1518 = 0.0;
                SPIRV_CROSS_BRANCH
                if (_1063)
                {
                    _1518 = textureLod(sampler2D(_1162, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).w;
                }
                _1178 = vec3(0.0);
                SPIRV_CROSS_BRANCH
                if (_1518 != 0.0)
                {
                    SPIRV_CROSS_BRANCH
                    if (_1084 != 0.0)
                    {
                        _1178.x += (_1518 * textureLod(sampler2D(_1188, _887), vec4(_932 - _1109, 0.0, 0.0).xy, vec4(_932 - _1109, 0.0, 0.0).w).x);
                        _1178.y += (_1518 * textureLod(sampler2D(_1188, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).y);
                        _1178.z += (_1518 * textureLod(sampler2D(_1188, _887), vec4(_932 + _1109, 0.0, 0.0).xy, vec4(_932 + _1109, 0.0, 0.0).w).z);
                    }
                    else
                    {
                        _1178 += (textureLod(sampler2D(_1188, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz * _1518);
                    }
                }
                SPIRV_CROSS_BRANCH
                if (_1518 != 1.0)
                {
                    SPIRV_CROSS_BRANCH
                    if (_1084 != 0.0)
                    {
                        _1178.x += ((1.0 - _1518) * textureLod(sampler2D(_1356, _887), vec4(_932 - _1109, 0.0, 0.0).xy, vec4(_932 - _1109, 0.0, 0.0).w).x);
                        _1178.y += ((1.0 - _1518) * textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).y);
                        _1178.z += ((1.0 - _1518) * textureLod(sampler2D(_1356, _887), vec4(_932 + _1109, 0.0, 0.0).xy, vec4(_932 + _1109, 0.0, 0.0).w).z);
                    }
                    else
                    {
                        _1178 += (textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz * (1.0 - _1518));
                    }
                }
            }
        }
        else
        {
            SPIRV_CROSS_BRANCH
            if (_1084 != 0.0)
            {
                _1178.x = textureLod(sampler2D(_1356, _887), vec4(_932 - _1109, 0.0, 0.0).xy, vec4(_932 - _1109, 0.0, 0.0).w).x;
                _1178.y = textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).y;
                _1178.z = textureLod(sampler2D(_1356, _887), vec4(_932 + _1109, 0.0, 0.0).xy, vec4(_932 + _1109, 0.0, 0.0).w).z;
            }
            else
            {
                _1178 = textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
            }
        }
    }
    else
    {
        _1178 = textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
    }
    float _1836 = _852._m0._m14;
    uint _1832 = _27(_1836);
    SPIRV_CROSS_BRANCH
    if ((_1832 & 16u) != 0u)
    {
        vec4 _1847 = textureLod(sampler2D(_1848, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w);
        vec3 _1863 = _1847.xyz;
        vec3 _1866 = _146(_1863);
        _1847.x = _1866.x;
        _1847.y = _1866.y;
        _1847.z = _1866.z;
        _1178 = (_1178 * (1.0 - _1847.w)) + _1847.xyz;
    }
    vec4 _1881 = _852._m0._m1;
    float _1886 = textureLod(sampler2D(_1887, _887), vec2(0.5), 0.0).x;
    float _1893 = _852._m0._m1.w;
    float _1898 = (_1893 != 0.0) ? _1893 : _1886;
    vec3 _1904 = textureLod(sampler2D(_1905, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
    vec3 _1921 = textureLod(sampler2D(_1922, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
    vec3 _1938 = textureLod(sampler2D(_1939, _1941), vec4((_842 * 1.39999997615814208984375) * vec2(1.0, _869), 0.0, 0.0).xy, vec4((_842 * 1.39999997615814208984375) * vec2(1.0, _869), 0.0, 0.0).w).xyz;
    _1178 += ((_1904 * _1938) * _1881.z);
    _1178 += ((_1921 * ((_1938 * 0.5) + vec3(0.5))) * 0.100000001490116119384765625);
    _1178 = ((_1178 * _1881.x) + (_1904 * _1881.y)) * _1898;
    bool _1993 = _852._m0._m15 > 0.0;
    vec3 _2001 = _1178;
    vec3 _2000 = _140(_2001);
    vec3 _2004 = _2000;
    _2000 = _132(_2004);
    vec3 _2007 = _2000;
    _1178 = _143(_2007);
    SPIRV_CROSS_BRANCH
    if (_852._m0._m15 > 0.0)
    {
        vec3 _2017 = _65(_1178, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875)), mat3(vec3(1.6410233974456787109375, -0.324803292751312255859375, -0.23642469942569732666015625), vec3(-0.663662850856781005859375, 1.6153316497802734375, 0.016756348311901092529296875), vec3(0.01172189414501190185546875, -0.008284442126750946044921875, 0.98839485645294189453125)));
        float _2034 = _2017.x;
        float _2038 = _2017.y;
        float _2042 = _2017.z;
        // ACEScc Encode
        vec3 _2033 = vec3(_122(_2034), _122(_2038), _122(_2042));
        // Sample LUT
        _1178 = textureLod(sampler3D(_2049, _887), vec4(_2033, 0.0).xyz, vec4(_2033, 0.0).w).xyz;
        float _2068 = _1178.x;
        float _2072 = _1178.y;
        float _2076 = _1178.z;
        // ACEScc Decode
        _1178 = vec3(_119(_2068), _119(_2072), _119(_2076));
        _1178 = _65(_1178, mat3(vec3(0.662454187870025634765625, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.674081742763519287109375, 0.053689517080783843994140625), vec3(-0.0055746496655046939849853515625, 0.0040607335977256298065185546875, 1.01033914089202880859375)), mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125)), mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875)));
    }
    float _2096 = 0.0;
    SPIRV_CROSS_BRANCH
    if (_852._m0._m3.x > 0.0)
    {
        vec2 _2105 = _842;
        vec2 _2107 = ((_2105 * 2.0) - vec2(1.0)) * vec2(_852._m0._m3.y, 1.0);
        vec2 _2118 = _2107 * vec2(_852._m0._m4.y);
        vec2 _2127 = clamp(_2107 * vec2(_852._m0._m4.y), vec2(-1.0), vec2(1.0));
        vec2 _2142 = (_2127 * vec2(0.5)) + vec2(0.5);
        _2127 = _16(_2142);
        _2127 *= (vec2(1.0) - _2127.yx);
        float _2149 = 1.0 - length(_2118);
        float _2153 = (_2127.x * _2127.y) * 16.0;
        _2096 = mix(_2153, _2149, _852._m0._m4.x);
        float _2174 = pow(1.0 - _2096, _852._m0._m4.z);
        _2096 = 1.0 - _10(_2174);
        float _2183 = pow(_2096, _852._m0._m4.w);
        _2096 = _10(_2183);
        vec3 _2186 = _1178;
        float _2195 = 1.0 - (_86(_2186) * _852._m0._m3.z);
        float _2185 = _10(_2195);
        float _2200 = _2185 - _2096;
        _2096 = mix(0.0, _10(_2200), _852._m0._m3.x);
    }
    bool _2210 = _864._m72 > 0.0;
    bool _2218;
    if (!_2210)
    {
        _2218 = _864._m9.w > 0.0;
    }
    else
    {
        _2218 = _2210;
    }
    SPIRV_CROSS_BRANCH
    if (_2218)
    {
        float _2224 = _876 - 0.25;
        float _2221 = _10(_2224) * 2.0;
        vec3 _2228 = _1178;
        float _2227 = _86(_2228);
        SPIRV_CROSS_BRANCH
        if (_864._m9.w > 0.0)
        {
            float _2236 = mod(_864._m66 * 0.0500000007450580596923828125, 10.0);
            float _2244 = _872.y;
            float _2247 = _872.x;
            float _2243 = _76(_2244, _2247) * 0.3183098733425140380859375;
            vec2 _2253 = vec2((_876 - _2236) * 0.100000001490116119384765625, _2243);
            float _2260 = textureLod(sampler2D(_2261, _1941), vec4(_2253.x, _2253.y, 0.0, 0.0).xy, vec4(_2253.x, _2253.y, 0.0, 0.0).w).x;
            float _2279 = (_2260 + 0.20000000298023223876953125) * 0.833333313465118408203125;
            float _2285 = min((_2221 * 1.75) * _864._m9.w, 1.0);
            float _2293 = min(1.0, _2285 * 2.0) * max(0.0, _2285 - _2279);
            float _2302 = max(0.0, (_2285 * 2.0) - 1.0);
            float _2307 = mix(_2293, _2285, _2302);
            _1178 = mix(_1178, vec3(_2227), vec3(_2307 * _864._m9.y));
            _2096 = max(_2096, min(1.0, (_2221 * _864._m9.x) * _864._m9.w));
        }
        SPIRV_CROSS_BRANCH
        if (_864._m72 > 0.0)
        {
            vec2 _2350 = _842 * vec2(16.0);
            vec2 _2351 = vec2(1.7599999904632568359375 * _864._m66, (-0.75) * _864._m66);
            float _2352 = 0.550000011920928955078125;
            int _2353 = 3;
            float _2354 = _116(_2350, _2351, _2352, _2353);
            vec2 _2365 = _842 * vec2(16.0);
            vec2 _2366 = vec2((-1.2599999904632568359375) * _864._m66, 0.550000011920928955078125 * _864._m66);
            float _2367 = 0.550000011920928955078125;
            int _2368 = 3;
            float _2369 = _116(_2365, _2366, _2367, _2368);
            float _2336 = _2354 * _2369;
            float _2371 = _2221 * _864._m72;
            float _2378 = _2371;
            float _2376 = mix(_2336, 1.0, _10(_2378));
            _2096 = max(_2096, _2376 * _2371);
            vec3 _2387 = vec3(_2227, 0.0, 0.0);
            float _2391 = _2371;
            float _2390 = _10(_2391) * _2376;
            _1178 = mix(_1178, _2387, vec3(_2390));
        }
    }
    float _2401 = 1.0;
    SPIRV_CROSS_BRANCH
    if (_852._m0._m5.w > 0.0)
    {
        vec2 _2410 = _842 * _864._m10.xy;
        vec2 _2418 = vec2(_2410.x, 1.0 - _2410.y);
        vec2 _2425 = (_2418 * 2.0) - vec2(1.0);
        vec2 _2430 = vec2(cos(_852._m0._m5.x), sin(_852._m0._m5.x));
        vec2 _2442 = _2425 + (_2430 * _852._m0._m5.z);
        float _2451 = (clamp(dot(_2442, _2430) * _852._m0._m5.y, -1.0, 1.0) * 0.5) + 0.5;
        float _2463 = _852._m0._m6.x * 0.5;
        uvec2 _2473 = uvec2(_835);
        uint _2474 = 0u;
        float _2470 = ((_93(_2473, _2474) * 2.0) - 1.0) / 255.0;
        float _2480 = min(max(_2463, _2451 + _2470), 1.0 - _2463);
        float _2489 = textureLod(sampler2D(_2490, _2492), vec4(_2480, 0.5, 0.0, 0.0).xy, vec4(_2480, 0.5, 0.0, 0.0).w).x;
        float _2506 = _852._m0._m5.w;
        _2401 = mix(1.0, _2489, _42(_2506));
    }
    _1178 = mix(_864._m11.xyz, _1178, vec3(_2401));
    _1178 = mix(_1178, _864._m12.xyz, vec3(_2096));
    float _2529 = _852._m0._m16;
    uint _2525 = _27(_2529);
    vec2 _2533 = _842;
    uint _2535 = 0u;
    uint _2536 = 0u;
    SPIRV_CROSS_BRANCH
    if ((_2525 & 15u) != 0u)
    {
        ivec2 _2542 = ivec2(_835.x >> 1, _835.y);
        uint _2549 = uint(imageLoad(_2552, _2542).x * 255.0);
        _2535 = (_2549 >> uint((_835.x & 1) * 4)) & 15u;
        _2536 = _2535;
    }
    uint _2567 = _2536 & 3u;
    bool _2570 = (_2525 & 1u) != 0u;
    SPIRV_CROSS_BRANCH
    if (_2570)
    {
        vec4 _2577 = _852._m0._m7;
        _2577.w *= float(_2567 == 0u);
        vec3 _2591 = _1178;
        float _2590 = _86(_2591);
        _1178 = mix(_1178, vec3(_2590), vec3(_2577.w));
        _1178 *= _2577.xyz;
    }
    SPIRV_CROSS_BRANCH
    if (_852._m0._m8.w != 0.0)
    {
        float _2612 = fract(_864._m66);
        float _2616 = fract(_864._m66 + 0.5);
        float _2621 = abs(1.0 - (_2612 / 0.5));
        vec2 _2626 = textureLod(sampler2D(_2627, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xy;
        _2626 = (_2626 * 2.0) - vec2(1.0);
        float _2647 = textureLod(sampler2D(_2627, _887), vec4(_842 + (_2626 * _2612), 0.0, 0.0).xy, vec4(_842 + (_2626 * _2612), 0.0, 0.0).w).z;
        float _2671 = textureLod(sampler2D(_2627, _887), vec4(_842 + (_2626 * _2616), 0.0, 0.0).xy, vec4(_842 + (_2626 * _2616), 0.0, 0.0).w).z;
        float _2697 = _2621;
        _2621 = mix(_2647, _2671, _10(_2697));
        vec3 _2701 = vec3(_2621);
        _2701 *= _852._m0._m8.xyz;
        float _2715 = _852._m0._m8.w;
        _1178 = mix(_1178, _2701, vec3(_10(_2715)));
    }
    vec4 _2721 = vec4(0.0);
    vec4 _2723 = vec4(0.0);
    SPIRV_CROSS_BRANCH
    if (_852._m0._m17 > 0.0)
    {
        vec2 _2732 = abs((_842 * 2.0) - vec2(1.0));
        _2732.x = max(0.0, 1.0 - ((1.0 - _2732.x) / _869));
        vec2 _2746 = (floor(_2732 / vec2(0.0416666679084300994873046875)) + vec2(0.5)) * 0.0416666679084300994873046875;
        _2721 = vec4(0.0);
        _2723 = vec4(0.0);
        SPIRV_CROSS_UNROLL
        for (int _2755 = 0; _2755 < 4; _2755++)
        {
            vec4 _2763 = _2768._m0[_2755];
            float _2773 = _2763.x;
            uint _2772 = _27(_2773);
            SPIRV_CROSS_FLATTEN
            if (_2772 == 0u)
            {
                break;
            }
            float _2782 = _2763.y;
            float _2785 = _2763.z;
            float _2788 = _2763.w;
            float _2791 = pow(pow(_2732.x, _2782) + pow(_2732.y * _2788, _2782), 1.0 / _2782);
            uint _2807 = _2772;
            vec4 _2806 = _82(_2807);
            vec3 _2810 = _2806.xyz;
            vec3 _2813 = _39(_2810);
            _2806.x = _2813.x;
            _2806.y = _2813.y;
            _2806.z = _2813.z;
            float _2820 = min(1.0, _2791 * 5.0);
            _2806.w *= _2820;
            float _2833 = 2.0 - _2782;
            float _2830 = 1.0 + (_10(_2833) * 0.4142135679721832275390625);
            float _2838 = (_2791 - _2785) / _2830;
            float _2844 = max(0.0, 1.0 - max(_2838 / 0.300000011920928955078125, (-_2838) / 0.4000000059604644775390625));
            _2844 *= _2844;
            _2844 *= _2844;
            _2844 *= 0.5;
            float _2868 = 1.2000000476837158203125 - (abs(_2838) * 50.0);
            float _2862 = _10(_2868);
            float _2870 = (_2844 + _2862) * _2806.w;
            _2723.w = ((1.0 - _2870) * _2723.w) + _2870;
            vec4 _2887 = _2723;
            vec3 _2894 = (_2887.xyz * (1.0 - _2870)) + (_2806.xyz * _2870);
            _2723.x = _2894.x;
            _2723.y = _2894.y;
            _2723.z = _2894.z;
            float _2901 = pow(pow(_2746.x, _2782) + pow(_2746.y * _2788, _2782), 1.0 / _2782);
            float _2916 = (_2901 - _2785) / _2830;
            float _2922 = max(0.0, 1.0 - (abs(_2916) / 0.054999999701976776123046875)) * _2806.w;
            vec4 _2935 = _2723;
            vec3 _2937 = _2935.xyz + (_2806.xyz * _2922);
            _2723.x = _2937.x;
            _2723.y = _2937.y;
            _2723.z = _2937.z;
            float _2944 = 0.60000002384185791015625 + (max(0.0, _2782 - 8.0) * 0.25);
            float _2951 = max(0.0, 1.0 - max(_2838 / 0.0199999995529651641845703125, (-_2838) / _2944));
            _2951 *= _2951;
            _2951 *= _2951;
            float _2967 = _2951 * _2806.w;
            _2721.w = ((1.0 - _2967) * _2721.w) + _2967;
            vec4 _2982 = _2721;
            vec3 _2989 = (_2982.xyz * (1.0 - _2967)) + (_2806.xyz * _2967);
            _2721.x = _2989.x;
            _2721.y = _2989.y;
            _2721.z = _2989.z;
        }
    }
    vec4 _2998 = _864._m13;
    vec4 _3001 = _864._m14;
    vec4 _3004 = _864._m15;
    SPIRV_CROSS_BRANCH
    if (_2998.w != 0.0)
    {
        float _3012 = _3001.z;
        float _3015 = _3001.w;
        vec2 _3018 = _3004.xy;
        vec4 _3066;
        SPIRV_CROSS_BRANCH
        if (_3015 != 0.0)
        {
            SPIRV_CROSS_BRANCH
            if (_3012 < 0.0)
            {
                vec3 _3029 = textureLod(sampler2D(_3030, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _3046 = vec2(_3015 * _3029.z) * ((_3029.xy * vec2(2.0)) - vec2(1.0));
                vec2 _3064 = (_842 + _3046) * _3018;
                vec2 _3058 = _16(_3064);
                _3066 = textureLod(sampler2D(_3067, _3069), vec4(_3058, 0.0, 0.0).xy, vec4(_3058, 0.0, 0.0).w);
            }
            else
            {
                float _3084 = fract(_864._m66 / _3012);
                float _3090 = fract(0.5 + (_864._m66 / _3012));
                float _3097 = abs(1.0 - (2.0 * _3084));
                vec3 _3102 = textureLod(sampler2D(_3030, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _3118 = ((_3102.xy * 2.0) - vec2(1.0)) * (_3015 * _3102.z);
                _3118.x *= _869;
                vec2 _3134 = _842 - (_3118 * (_3084 - 0.5));
                vec2 _3141 = _842 - (_3118 * (_3090 - 0.5));
                _3066 = mix(textureLod(sampler2D(_3067, _3069), vec4(_3134 * _3018, 0.0, 0.0).xy, vec4(_3134 * _3018, 0.0, 0.0).w), textureLod(sampler2D(_3067, _3069), vec4(_3141 * _3018, 0.0, 0.0).xy, vec4(_3141 * _3018, 0.0, 0.0).w), vec4(_3097));
            }
        }
        else
        {
            _3066 = textureLod(sampler2D(_3067, _3069), vec4(_842 * _3018, 0.0, 0.0).xy, vec4(_842 * _3018, 0.0, 0.0).w);
        }
        float _3206 = float(_3004.w < 0.0);
        _3066 = mix(_3066, vec4(1.0, 1.0, 1.0, _3066.x), vec4(_3206));
        _3066.w *= min(1.0, _3001.x * pow(2.0 * _876, _3001.y));
        _3066.w *= abs(_2998.w);
        vec4 _3240 = _3066;
        vec3 _3242 = _3240.xyz * _2998.xyz;
        _3066.x = _3242.x;
        _3066.y = _3242.y;
        _3066.z = _3242.z;
        float _3249 = abs(_3004.w);
        vec4 _3254 = _3066;
        vec3 _3256 = _3254.xyz * _3249;
        _3066.x = _3256.x;
        _3066.y = _3256.y;
        _3066.z = _3256.z;
        vec3 _3263 = _3066.xyz * _3066.w;
        bool _3269 = _3004.z != 0.0;
        SPIRV_CROSS_BRANCH
        if (_3269)
        {
            _3066.w *= _2721.w;
            _3263 *= _2721.xyz;
        }
        float _3286 = 1.0 - (float(_2998.w > 0.0) * _3066.w);
        _1178 = (_1178 * _3286) + _3263;
    }
    _2998 = _864._m16;
    _3001 = _864._m17;
    _3004 = _864._m18;
    SPIRV_CROSS_BRANCH
    if (_2998.w != 0.0)
    {
        float _3312 = _3001.z;
        float _3315 = _3001.w;
        vec2 _3318 = _3004.xy;
        vec4 _3365;
        SPIRV_CROSS_BRANCH
        if (_3315 != 0.0)
        {
            SPIRV_CROSS_BRANCH
            if (_3312 < 0.0)
            {
                vec3 _3329 = textureLod(sampler2D(_3330, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _3346 = vec2(_3315 * _3329.z) * ((_3329.xy * vec2(2.0)) - vec2(1.0));
                vec2 _3363 = (_842 + _3346) * _3318;
                vec2 _3357 = _16(_3363);
                _3365 = textureLod(sampler2D(_3366, _3368), vec4(_3357, 0.0, 0.0).xy, vec4(_3357, 0.0, 0.0).w);
            }
            else
            {
                float _3383 = fract(_864._m66 / _3312);
                float _3389 = fract(0.5 + (_864._m66 / _3312));
                float _3396 = abs(1.0 - (2.0 * _3383));
                vec3 _3401 = textureLod(sampler2D(_3330, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _3417 = ((_3401.xy * 2.0) - vec2(1.0)) * (_3315 * _3401.z);
                _3417.x *= _869;
                vec2 _3433 = _842 - (_3417 * (_3383 - 0.5));
                vec2 _3440 = _842 - (_3417 * (_3389 - 0.5));
                _3365 = mix(textureLod(sampler2D(_3366, _3368), vec4(_3433 * _3318, 0.0, 0.0).xy, vec4(_3433 * _3318, 0.0, 0.0).w), textureLod(sampler2D(_3366, _3368), vec4(_3440 * _3318, 0.0, 0.0).xy, vec4(_3440 * _3318, 0.0, 0.0).w), vec4(_3396));
            }
        }
        else
        {
            _3365 = textureLod(sampler2D(_3366, _3368), vec4(_842 * _3318, 0.0, 0.0).xy, vec4(_842 * _3318, 0.0, 0.0).w);
        }
        float _3505 = float(_3004.w < 0.0);
        _3365 = mix(_3365, vec4(1.0, 1.0, 1.0, _3365.x), vec4(_3505));
        _3365.w *= min(1.0, _3001.x * pow(2.0 * _876, _3001.y));
        _3365.w *= abs(_2998.w);
        vec4 _3539 = _3365;
        vec3 _3541 = _3539.xyz * _2998.xyz;
        _3365.x = _3541.x;
        _3365.y = _3541.y;
        _3365.z = _3541.z;
        float _3548 = abs(_3004.w);
        vec4 _3553 = _3365;
        vec3 _3555 = _3553.xyz * _3548;
        _3365.x = _3555.x;
        _3365.y = _3555.y;
        _3365.z = _3555.z;
        vec3 _3562 = _3365.xyz * _3365.w;
        bool _3568 = _3004.z != 0.0;
        SPIRV_CROSS_BRANCH
        if (_3568)
        {
            _3365.w *= _2721.w;
            _3562 *= _2721.xyz;
        }
        float _3585 = 1.0 - (float(_2998.w > 0.0) * _3365.w);
        _1178 = (_1178 * _3585) + _3562;
    }
    _2998 = _864._m19;
    _3001 = _864._m20;
    _3004 = _864._m21;
    SPIRV_CROSS_BRANCH
    if (_2998.w != 0.0)
    {
        float _3613 = _3001.z;
        float _3616 = _3001.w;
        vec2 _3619 = _3004.xy;
        vec4 _3666;
        SPIRV_CROSS_BRANCH
        if (_3616 != 0.0)
        {
            SPIRV_CROSS_BRANCH
            if (_3613 < 0.0)
            {
                vec3 _3630 = textureLod(sampler2D(_3631, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _3647 = vec2(_3616 * _3630.z) * ((_3630.xy * vec2(2.0)) - vec2(1.0));
                vec2 _3664 = (_842 + _3647) * _3619;
                vec2 _3658 = _16(_3664);
                _3666 = textureLod(sampler2D(_3667, _3669), vec4(_3658, 0.0, 0.0).xy, vec4(_3658, 0.0, 0.0).w);
            }
            else
            {
                float _3684 = fract(_864._m66 / _3613);
                float _3690 = fract(0.5 + (_864._m66 / _3613));
                float _3697 = abs(1.0 - (2.0 * _3684));
                vec3 _3702 = textureLod(sampler2D(_3631, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _3718 = ((_3702.xy * 2.0) - vec2(1.0)) * (_3616 * _3702.z);
                _3718.x *= _869;
                vec2 _3734 = _842 - (_3718 * (_3684 - 0.5));
                vec2 _3741 = _842 - (_3718 * (_3690 - 0.5));
                _3666 = mix(textureLod(sampler2D(_3667, _3669), vec4(_3734 * _3619, 0.0, 0.0).xy, vec4(_3734 * _3619, 0.0, 0.0).w), textureLod(sampler2D(_3667, _3669), vec4(_3741 * _3619, 0.0, 0.0).xy, vec4(_3741 * _3619, 0.0, 0.0).w), vec4(_3697));
            }
        }
        else
        {
            _3666 = textureLod(sampler2D(_3667, _3669), vec4(_842 * _3619, 0.0, 0.0).xy, vec4(_842 * _3619, 0.0, 0.0).w);
        }
        float _3806 = float(_3004.w < 0.0);
        _3666 = mix(_3666, vec4(1.0, 1.0, 1.0, _3666.x), vec4(_3806));
        _3666.w *= min(1.0, _3001.x * pow(2.0 * _876, _3001.y));
        _3666.w *= abs(_2998.w);
        vec4 _3840 = _3666;
        vec3 _3842 = _3840.xyz * _2998.xyz;
        _3666.x = _3842.x;
        _3666.y = _3842.y;
        _3666.z = _3842.z;
        float _3849 = abs(_3004.w);
        vec4 _3854 = _3666;
        vec3 _3856 = _3854.xyz * _3849;
        _3666.x = _3856.x;
        _3666.y = _3856.y;
        _3666.z = _3856.z;
        vec3 _3863 = _3666.xyz * _3666.w;
        bool _3869 = _3004.z != 0.0;
        SPIRV_CROSS_BRANCH
        if (_3869)
        {
            _3666.w *= _2721.w;
            _3863 *= _2721.xyz;
        }
        float _3886 = 1.0 - (float(_2998.w > 0.0) * _3666.w);
        _1178 = (_1178 * _3886) + _3863;
    }
    _2998 = _864._m22;
    _3001 = _864._m23;
    _3004 = _864._m24;
    SPIRV_CROSS_BRANCH
    if (_2998.w != 0.0)
    {
        float _3913 = _3001.z;
        float _3916 = _3001.w;
        vec2 _3919 = _3004.xy;
        vec4 _3966;
        SPIRV_CROSS_BRANCH
        if (_3916 != 0.0)
        {
            SPIRV_CROSS_BRANCH
            if (_3913 < 0.0)
            {
                vec3 _3930 = textureLod(sampler2D(_3931, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _3947 = vec2(_3916 * _3930.z) * ((_3930.xy * vec2(2.0)) - vec2(1.0));
                vec2 _3964 = (_842 + _3947) * _3919;
                vec2 _3958 = _16(_3964);
                _3966 = textureLod(sampler2D(_3967, _3969), vec4(_3958, 0.0, 0.0).xy, vec4(_3958, 0.0, 0.0).w);
            }
            else
            {
                float _3984 = fract(_864._m66 / _3913);
                float _3990 = fract(0.5 + (_864._m66 / _3913));
                float _3997 = abs(1.0 - (2.0 * _3984));
                vec3 _4002 = textureLod(sampler2D(_3931, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
                vec2 _4018 = ((_4002.xy * 2.0) - vec2(1.0)) * (_3916 * _4002.z);
                _4018.x *= _869;
                vec2 _4034 = _842 - (_4018 * (_3984 - 0.5));
                vec2 _4041 = _842 - (_4018 * (_3990 - 0.5));
                _3966 = mix(textureLod(sampler2D(_3967, _3969), vec4(_4034 * _3919, 0.0, 0.0).xy, vec4(_4034 * _3919, 0.0, 0.0).w), textureLod(sampler2D(_3967, _3969), vec4(_4041 * _3919, 0.0, 0.0).xy, vec4(_4041 * _3919, 0.0, 0.0).w), vec4(_3997));
            }
        }
        else
        {
            _3966 = textureLod(sampler2D(_3967, _3969), vec4(_842 * _3919, 0.0, 0.0).xy, vec4(_842 * _3919, 0.0, 0.0).w);
        }
        float _4106 = float(_3004.w < 0.0);
        _3966 = mix(_3966, vec4(1.0, 1.0, 1.0, _3966.x), vec4(_4106));
        _3966.w *= min(1.0, _3001.x * pow(2.0 * _876, _3001.y));
        _3966.w *= abs(_2998.w);
        vec4 _4140 = _3966;
        vec3 _4142 = _4140.xyz * _2998.xyz;
        _3966.x = _4142.x;
        _3966.y = _4142.y;
        _3966.z = _4142.z;
        float _4149 = abs(_3004.w);
        vec4 _4154 = _3966;
        vec3 _4156 = _4154.xyz * _4149;
        _3966.x = _4156.x;
        _3966.y = _4156.y;
        _3966.z = _4156.z;
        vec3 _4163 = _3966.xyz * _3966.w;
        bool _4169 = _3004.z != 0.0;
        SPIRV_CROSS_BRANCH
        if (_4169)
        {
            _3966.w *= _2721.w;
            _4163 *= _2721.xyz;
        }
        float _4186 = 1.0 - (float(_2998.w > 0.0) * _3966.w);
        _1178 = (_1178 * _4186) + _4163;
    }
    _1178 = (_1178 * (1.0 - _2723.w)) + _2723.xyz;
    int _4208 = int(_852._m0._m18);
    SPIRV_CROSS_LOOP
    for (int _4214 = 0; _4214 < _4208; _4214++)
    {
        vec4 _4223 = _4227._m0[_4214];
        float _4239 = pow(_876, _4223.z) * _4223.y;
        float _4231 = _10(_4239);
        float _4242 = _4223.x;
        uint _4246 = _27(_4242);
        vec3 _4241 = _82(_4246).xyz;
        vec3 _4250 = _4241;
        vec3 _4249 = _39(_4250);
        _1178 = mix(_1178, _4249, vec3(_4231));
    }
    SPIRV_CROSS_BRANCH
    if (_852._m0._m9.w > 0.0)
    {
        float _4275 = _852._m0._m9.w;
        _1178 = mix(_1178, _852._m0._m9.xyz, vec3(_10(_4275)));
    }
    _1178 = max(_1178, vec3(0.0));
    bool _4289 = ((_852._m0._m24 & 1u) != 0u) == false;
    bool _4297;
    if (_4289)
    {
        _4297 = _864._m73 > 0;
    }
    else
    {
        _4297 = _4289;
    }
    SPIRV_CROSS_BRANCH
    if (_4297)
    {
        bool _4300 = false;
        vec2 _4301 = (_842 - _864._m25.xy) * _864._m25.zw;
        vec2 _4313 = _4301;
        if (all(equal(_4301, _16(_4313))))
        {
            _1178 = textureLod(sampler2D(_4321, _887), vec4(_4301, 0.0, 0.0).xy, vec4(_4301, 0.0, 0.0).w).xyz;
            _4300 = true;
        }
        _4301 = (_842 - _864._m26.xy) * _864._m26.zw;
        bool _4350 = _864._m73 > 1;
        bool _4359;
        if (_4350)
        {
            vec2 _4354 = _4301;
            _4359 = all(equal(_4301, _16(_4354)));
        }
        else
        {
            _4359 = _4350;
        }
        if (_4359)
        {
            _1178 = textureLod(sampler2D(_4362, _887), vec4(_4301, 0.0, 0.0).xy, vec4(_4301, 0.0, 0.0).w).xyz;
            _4300 = true;
        }
        _4301 = (_842 - _864._m27.xy) * _864._m27.zw;
        bool _4390 = _864._m73 > 2;
        bool _4399;
        if (_4390)
        {
            vec2 _4394 = _4301;
            _4399 = all(equal(_4301, _16(_4394)));
        }
        else
        {
            _4399 = _4390;
        }
        if (_4399)
        {
            _1178 = textureLod(sampler2D(_4402, _887), vec4(_4301, 0.0, 0.0).xy, vec4(_4301, 0.0, 0.0).w).xyz;
            _4300 = true;
        }
        if (_4300 == true)
        {
            vec3 _4422 = _1178;
            _1178 = _132(_4422);
            vec3 _4425 = _1178;
            _1178 = _143(_4425);
        }
    }
    vec3 _4428 = _1178;
    SPIRV_CROSS_BRANCH
    if ((_1832 & 1u) == 0u)
    {
        vec3 _4436 = _1178;
        float _4435 = _86(_4436);
        float _4439 = _864._m28.w;
        _1178 = mix(vec3(_4435), _1178 * _864._m28.xyz, vec3(_4439));
        float _4456 = _852._m0._m14;
        uint _4453 = _27(_4456);
        float _4463 = float(_4453 & 1u);
        if (_27(_4463) != 0u)
        {
            vec3 _4468 = _1178;
            _1178 = max(vec3(0.0), mix(vec3(_86(_4468)), _1178, vec3(_852._m0._m19)));
        }
        vec3 _4482 = _1178;
        float _4484 = _864._m74;
        // log lut encode
        vec3 _4480 = _137(_4482, _4484);
        // sample tonemapping LUT?
        _4428 = textureLod(sampler3D(_4488, _887), vec4(_4480, 0.0).xyz, vec4(_4480, 0.0).w).xyz;
        vec3 _4506 = _4428;
        _4428 = _45(_4506);
    }
    else
    {
        vec3 _4511 = _1178;
        float _4510 = _86(_4511);
        float _4514 = _864._m28.w;
        _1178 = mix(vec3(_4510), _1178 * _864._m28.xyz, vec3(_4514));
        float _4530 = _852._m0._m14;
        uint _4527 = _27(_4530);
        float _4537 = float(_4527 & 1u);
        if (_27(_4537) != 0u)
        {
            vec3 _4542 = _1178;
            _1178 = max(vec3(0.0), mix(vec3(_86(_4542)), _1178, vec3(_852._m0._m19)));
        }
        vec3 _4555 = _1178;
        float _4557 = _864._m74;
        // log lut encode
        vec3 _4554 = _137(_4555, _4557);
        // sample tonemapping LUT?
        _4428 = textureLod(sampler3D(_4488, _887), vec4(_4554, 0.0).xyz, vec4(_4554, 0.0).w).xyz;
    }
    float _4583;
    if (_864._m75 == 0.0)
    {
        uvec2 _4591 = uvec2(_835);
        uint _4592 = uint(_864._m3.x);
        _4583 = ((_93(_4591, _4592) * 2.0) - 1.0) / 255.0;
    }
    else
    {
        _4583 = 0.0;
    }
    float _4578 = _4583;
    _4428 = max(vec3(0.0), _4428 + vec3(_4578));
    SPIRV_CROSS_BRANCH
    if (_852._m0._m20 == 1u)
    {
        uint _4611 = uint(textureLod(sampler2D(_4612, _4614), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).x * 255.0);
        uint _4631 = (_4611 >> uint(4)) & 15u;
        vec4 _4639;
        SPIRV_CROSS_FLATTEN
        if (_4631 > 0u)
        {
            _4639 = _4647._m0[_4631] * _852._m0._m21;
        }
        else
        {
            _4639 = vec4(0.0);
        }
        vec3 _4654 = _4639.xyz;
        float _4660 = _852._m0._m14;
        uint _4657 = _27(_4660);
        SPIRV_CROSS_BRANCH
        if ((_4657 & 1u) == 1u)
        {
            vec3 _4669 = _58(_4654, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
            _4669 *= _852._m0._m22;
            _4428 = mix(_4428, _4669, vec3((_4639.w * _852._m0._m21) * float(clamp(_4631, 0u, 1u))));
        }
        else
        {
            _4428 = mix(_4428, _4654, vec3((_4639.w * _852._m0._m21) * float(clamp(_4631, 0u, 1u))));
        }
    }
    else
    {
        SPIRV_CROSS_BRANCH
        if (_852._m0._m20 == 2u)
        {
            uint _4730 = uint(texelFetch(sampler2D(_4731, _887), _835, 0).x * 255.0) >> uint(4);
            SPIRV_CROSS_BRANCH
            if (_4730 == 0u)
            {
                float _4746 = 0.0;
                for (int _4747 = 0; _4747 < 8; _4747++)
                {
                    _4746 = max(_4746, texelFetch(sampler2D(_4731, _2492), _835 + (ivec2(_852._m0._m23) * _4776[_4747]), 0).x);
                }
                SPIRV_CROSS_BRANCH
                if (_4746 > 0.0)
                {
                    vec4 _4802;
                    SPIRV_CROSS_FLATTEN
                    if ((uint(_4746 * 255.0) >> uint(4)) > 0u)
                    {
                        _4802 = _4647._m0[uint(_4746 * 255.0) >> uint(4)] * _852._m0._m21;
                    }
                    else
                    {
                        _4802 = vec4(0.0);
                    }
                    SPIRV_CROSS_BRANCH
                    if ((_1832 & 1u) == 1u)
                    {
                        vec3 _4822 = _58(_4802.xyz, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
                        _4802.x = _4822.x;
                        _4802.y = _4822.y;
                        _4802.z = _4822.z;
                        vec4 _4833 = _4802;
                        vec3 _4835 = _4833.xyz * _852._m0._m22;
                        _4802.x = _4835.x;
                        _4802.y = _4835.y;
                        _4802.z = _4835.z;
                    }
                    _4428 = _4802.xyz;
                }
            }
        }
        else
        {
            SPIRV_CROSS_BRANCH
            if (_852._m0._m20 == 3u)
            {
                vec4 _4852 = textureLod(sampler2D(_4853, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w);
                uint _4868 = uint(textureLod(sampler2D(_4731, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).x * 255.0) >> uint(4);
                vec3 _4887 = _4852.xyz * (float(1u - clamp(_4868, 0u, 1u)) * _4852.w);
                vec3 _4898 = _4887;
                float _4903 = _852._m0._m14;
                uint _4900 = _27(_4903);
                SPIRV_CROSS_BRANCH
                if ((_4900 & 1u) == 1u)
                {
                    vec3 _4912 = _58(_4898, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
                    _4912 *= _852._m0._m22;
                    _4428 += _4912;
                }
                else
                {
                    _4428 += _4898;
                }
            }
        }
    }
    imageStore(_4930, _835, vec4(_4428.x, _4428.y, _4428.z, 1.0));
}

