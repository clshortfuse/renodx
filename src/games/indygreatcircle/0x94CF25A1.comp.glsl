
// Color Grade

#version 450

#extension GL_GOOGLE_include_directive : require
#include "./include/common.glsl"

#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#if defined(GL_EXT_control_flow_attributes)
#extension GL_EXT_control_flow_attributes : require
#define SPIRV_CROSS_FLATTEN [[flatten]]
#define SPIRV_CROSS_BRANCH  [[dont_flatten]]
#define SPIRV_CROSS_UNROLL  [[unroll]]
#define SPIRV_CROSS_LOOP    [[dont_unroll]]
#else
#define SPIRV_CROSS_FLATTEN
#define SPIRV_CROSS_BRANCH
#define SPIRV_CROSS_UNROLL
#define SPIRV_CROSS_LOOP
#endif
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(buffer_reference) buffer _850;

const ivec2 _4762[8] = ivec2[](ivec2(-1), ivec2(-1, 1), ivec2(1, -1), ivec2(1), ivec2(-1, 0), ivec2(1, 0), ivec2(0, -1), ivec2(0, 1));

struct _5057 {
  float _m0;
  float _m1;
};

struct _5058 {
  float _m0[6];
  float _m1[6];
  _5057 _m2;
  _5057 _m3;
  _5057 _m4;
  float _m5;
  float _m6;
};

layout(buffer_reference, buffer_reference_align = 16, std430) buffer _850 {
  uvec4 _m0;
  vec4 _m1;
  vec4 _m2;
  vec4 _m3;
  vec4 _m4;
  vec4 _m5;
  vec4 _m6;
  vec4 _m7;
  vec4 _m8;
  vec4 _m9;
  uint _m10;
  float _m11;
  float _m12;
  float _m13;
  uint _m14;
  float _m15;
  float _m16;
  float _m17;
  float _m18;
  float _m19;
  uint _m20;
  float _m21;
  float _m22;
  int _m23;
  uint _m24;
};

layout(set = 0, binding = 0, std140) uniform _862_864 {
  uvec4 _m0;
  vec4 _m1;
  vec4 _m2;
  vec4 _m3;
  vec4 _m4;
  vec4 _m5;
  vec4 _m6;
  vec4 _m7;
  vec4 _m8;
  vec4 _m9;
  vec4 _m10;
  vec4 _m11;
  vec4 _m12;
  vec4 _m13;
  vec4 _m14;
  vec4 _m15;
  vec4 _m16;
  vec4 _m17;
  vec4 _m18;
  vec4 _m19;
  vec4 _m20;
  vec4 _m21;
  vec4 _m22;
  vec4 _m23;
  vec4 _m24;
  vec4 _m25;
  vec4 _m26;
  vec4 _m27;
  vec4 _m28;
  uint _m29;
  float _m30;
  float _m31;
  float _m32;
  float _m33;
  float _m34;
  float _m35;
  float _m36;
  float _m37;
  float _m38;
  float _m39;
  float _m40;
  float _m41;
  float _m42;
  float _m43;
  float _m44;
  float _m45;
  float _m46;
  float _m47;
  float _m48;
  float _m49;
  float _m50;
  float _m51;
  float _m52;
  float _m53;
  float _m54;
  float _m55;
  float _m56;
  float _m57;
  float _m58;
  uint _m59;
  uint _m60;
  uint _m61;
  float _m62;
  uint _m63;
  uint _m64;
  float _m65;
  float _m66;
  float _m67;
  float _m68;
  float _m69;
  float _m70;
  float _m71;
  float _m72;
  int _m73;
  float _m74;
  float _m75;
  uint _m76;
}
_864;

layout(set = 1, binding = 8, std140) uniform _2764_2766 {
  vec4 _m0[4];
}
_2766;

layout(set = 1, binding = 9, std140) uniform _4223_4225 {
  vec4 _m0[3];
}
_4225;

layout(set = 0, binding = 31, std430) restrict readonly buffer _4633_4635 {
  vec4 _m0[];
}
_4635;

layout(set = 0, binding = 1, std140) uniform _5015_5017 {
  vec4 _m0[1024];
}
_5017;

layout(set = 0, binding = 2, std430) restrict readonly buffer _5019_5021 {
  uvec4 _m0[];
}
_5021;

layout(set = 0, binding = 3, std430) restrict readonly buffer _5023_5025 {
  uvec4 _m0[];
}
_5025;

layout(push_constant, std430) uniform _848_852 {
  _850 _m0;
}
_852;

layout(set = 0, binding = 9) uniform texture2D _883;
layout(set = 0, binding = 6) uniform sampler _887;
layout(set = 0, binding = 10) uniform texture2D _1162;
layout(set = 1, binding = 2) uniform texture2D _1188;
layout(set = 1, binding = 1) uniform texture2D _1356;
layout(set = 1, binding = 3) uniform texture2D _1846;
layout(set = 0, binding = 5) uniform texture2D _1885;
layout(set = 0, binding = 11) uniform texture2D _1903;
layout(set = 1, binding = 4) uniform texture2D _1920;
layout(set = 0, binding = 12) uniform texture2D _1937;
layout(set = 0, binding = 7) uniform sampler _1939;
layout(set = 1, binding = 5) uniform texture3D _2047;
layout(set = 0, binding = 8) uniform texture2D _2259;
layout(set = 0, binding = 13) uniform texture2D _2488;
layout(set = 0, binding = 4) uniform sampler _2490;
layout(set = 1, binding = 6, r8) uniform readonly image2D _2550;
layout(set = 1, binding = 7) uniform texture2D _2625;
layout(set = 0, binding = 14) uniform texture2D _3028;
layout(set = 0, binding = 15) uniform texture2D _3065;
layout(set = 0, binding = 16) uniform sampler _3067;
layout(set = 0, binding = 17) uniform texture2D _3328;
layout(set = 0, binding = 18) uniform texture2D _3364;
layout(set = 0, binding = 19) uniform sampler _3366;
layout(set = 0, binding = 20) uniform texture2D _3629;
layout(set = 0, binding = 21) uniform texture2D _3665;
layout(set = 0, binding = 22) uniform sampler _3667;
layout(set = 0, binding = 23) uniform texture2D _3929;
layout(set = 0, binding = 24) uniform texture2D _3965;
layout(set = 0, binding = 25) uniform sampler _3967;
layout(set = 0, binding = 26) uniform texture2D _4319;
layout(set = 0, binding = 27) uniform texture2D _4360;
layout(set = 0, binding = 28) uniform texture2D _4400;
layout(set = 0, binding = 29) uniform texture3D _4481;
layout(set = 1, binding = 10) uniform texture2D _4600;
layout(set = 0, binding = 30) uniform sampler _4602;
layout(set = 1, binding = 11) uniform texture2D _4717;
layout(set = 0, binding = 32, r32ui) uniform uimage2D _4860;
layout(set = 1, binding = 12) uniform texture2D _4877;
layout(set = 1, binding = 13, r11f_g11f_b10f) uniform writeonly image2D _4993;
layout(set = 2, binding = 0) uniform texture2D _5005[];
layout(set = 2, binding = 1) uniform textureCube _5009[1];
layout(set = 2, binding = 2) uniform texture3D _5012[1];

uint _149;
uint _151;
uint _5032;

float _65(float _62, float _63, float _64) {
  return max(_62, max(_63, _64));
}

vec3 _146(vec3 _145) {
  float _817 = _145.x;
  float _820 = _145.y;
  float _823 = _145.z;
  return _145 * (1.0 / (1.0 - (0.9900000095367431640625 * _65(_817, _820, _823))));
}

vec3 _41(vec3 _39, mat3 _40) {
  return _39 * _40;
}

vec3 _54(vec3 _50, mat3 _51, mat3 _52, mat3 _53) {
  vec3 _256 = _50;
  mat3 _257 = _51;
  vec3 _259 = _41(_256, _257);
  mat3 _260 = _52;
  vec3 _262 = _41(_259, _260);
  mat3 _263 = _53;
  return _41(_262, _263);
}

vec3 _140(vec3 _139) {
  return _54(_139, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875)), mat3(vec3(1.04981100559234619140625, 0.0, -9.74845024757087230682373046875e-05), vec3(-0.49590301513671875, 1.37331306934356689453125, 0.09824003279209136962890625), vec3(3.9999999756901161163114011287689e-08, 0.0, 0.991252005100250244140625)));
}

float _129(float _125, float _126, float _127, float _128) {
  float _555;
  if (_125 < _127) {
    _555 = _125;
  } else {
    float _558 = (_126 - _127) / pow(pow((1.0 - _127) / (_126 - _127), -_128) - 1.0, 1.0 / _128);
    float _576 = (_125 - _127) / _558;
    float _582 = pow(_576, _128);
    _555 = _127 + ((_558 * _576) / pow(1.0 + _582, 1.0 / _128));
  }
  return _555;
}

vec3 _132(vec3 _131) {
  vec3 _614 = _131;
  mat3 _616 = mat3(vec3(1.45143926143646240234375, -0.236510753631591796875, -0.214928567409515380859375), vec3(-0.07655377686023712158203125, 1.1762297153472900390625, -0.0996759235858917236328125), vec3(0.0083161480724811553955078125, -0.0060324496589601039886474609375, 0.99771630764007568359375));
  vec3 _600 = _41(_614, _616);
  float _619 = _600.x;
  float _622 = _600.y;
  float _625 = _600.z;
  float _618 = _65(_619, _622, _625);
  vec3 _633;
  if (_618 == 0.0) {
    _633 = vec3(0.0);
  } else {
    _633 = (vec3(_618) - _600) / vec3(abs(_618));
  }
  float _648 = _633.x;
  float _651 = 1.14699995517730712890625;
  float _652 = 0.814999997615814208984375;
  float _653 = 1.2000000476837158203125;
  vec3 _644;
  _644.x = _129(_648, _651, _652, _653);
  float _658 = _633.y;
  float _661 = 1.26400005817413330078125;
  float _662 = 0.802999973297119140625;
  float _663 = 1.2000000476837158203125;
  _644.y = _129(_658, _661, _662, _663);
  float _668 = _633.z;
  float _671 = 1.3120000362396240234375;
  float _672 = 0.87999999523162841796875;
  float _673 = 1.2000000476837158203125;
  _644.z = _129(_668, _671, _672, _673);
  vec3 _676 = vec3(_618) - (_644 * abs(_618));
  vec3 _698 = _676;
  mat3 _700 = mat3(vec3(0.695452213287353515625, 0.140678703784942626953125, 0.16386906802654266357421875), vec3(0.0447945632040500640869140625, 0.859671115875244140625, 0.095534317195415496826171875), vec3(-0.0055258828215301036834716796875, 0.0040252101607620716094970703125, 1.00150072574615478515625));
  vec3 _684 = _41(_698, _700);
  return _684;
}

vec3 _143(vec3 _142) {
  return _54(_142, mat3(vec3(0.952552378177642822265625, 0.0, 9.3678601842839270830154418945312e-05), vec3(0.3439664542675018310546875, 0.728166103363037109375, -0.07213254272937774658203125), vec3(0.0, 0.0, 1.00882518291473388671875)), mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125)), mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875)));
}

float _122(float _121) {
  if (_121 <= 0.0078125) {
    return (10.5402374267578125 * _121) + 0.072905533015727996826171875;
  } else {
    return (log2(_121) + 9.72000026702880859375) / 17.520000457763671875;
  }
}

float _119(float _118) {
  if (_118 > 0.15525114536285400390625) {
    return exp2((_118 * 17.520000457763671875) - 9.72000026702880859375);
  } else {
    return (_118 - 0.072905533015727996826171875) / 10.5402374267578125;
  }
}

vec2 _16(vec2 _15) {
  return clamp(_15, vec2(0.0), vec2(1.0));
}

float _10(float _9) {
  return clamp(_9, 0.0, 1.0);
}

float _86(vec3 _85) {
  return dot(_85, vec3(0.2125999927520751953125, 0.715200006961822509765625, 0.072200000286102294921875));
}

float _68(float _67) {
  float _281;
  if (_67 < 1.0) {
    _281 = _67;
  } else {
    _281 = 1.0 / _67;
  }
  float _278 = _281;
  float _289 = _278 * _278;
  float _293 = 0.087292902171611785888671875;
  _293 = (-0.3018949925899505615234375) + (_293 * _289);
  _293 = 1.0 + (_293 * _289);
  _293 *= _278;
  float _309;
  if (_67 < 1.0) {
    _309 = _293;
  } else {
    _309 = 1.57079637050628662109375 - _293;
  }
  return _309;
}

float _71(float _70) {
  float _323 = abs(_70);
  float _320 = _68(_323);
  float _327;
  if (_70 < 0.0) {
    _327 = -_320;
  } else {
    _327 = _320;
  }
  return _327;
}

float _76(float _74, float _75) {
  float _341 = _74 / _75;
  float _337 = _71(_341);
  SPIRV_CROSS_FLATTEN
  if (_75 < 0.0) {
    _337 += ((_74 >= 0.0) ? 3.1415927410125732421875 : (-3.1415927410125732421875));
  }
  return _337;
}

float _96(float _95) {
  return fract(sin(_95) * 158.545318603515625);
}

float _101(float _98, float _99, float _100) {
  float _414 = _98;
  float _420 = _98 + _99;
  return mix(_96(_414), _96(_420), _100);
}

float _107(float _104, vec2 _105, vec2 _106) {
  float _427 = _104;
  float _429 = _105.x;
  float _432 = _106.x;
  float _426 = _101(_427, _429, _432);
  float _441 = _104 + _105.y;
  float _442 = _105.x;
  float _445 = _106.x;
  float _436 = _101(_441, _442, _445);
  return mix(_426, _436, _106.y);
}

float _116(inout vec2 _112, inout vec2 _113, float _114, int _115) {
  float _456 = 0.0;
  float _457 = _114;
  SPIRV_CROSS_LOOP
  for (int _459 = 0; _459 < _115; _459++) {
    vec2 _469 = _112 + _113;
    vec2 _473 = floor(_469);
    _469 = fract(_469);
    _469 = (_469 * _469) * (vec2(3.0) - (_469 * 2.0));
    float _492 = dot(_473, vec2(1.0, 157.0));
    vec2 _493 = vec2(1.0, 157.0);
    vec2 _494 = _469;
    _456 += (_107(_492, _493, _494) * _457);
    _457 *= _114;
    _112 *= 2.0;
    _113 *= 0.60000002384185791015625;
  }
  return _456;
}

float _93(uvec2 _91, uint _92) {
  uvec2 _370 = _91 & uvec2(3u);
  return float(((((2068378560u * (1u - (_370.x >> uint(1)))) + (1500172770u * (_370.x >> uint(1)))) >> ((_370.y + ((_370.x & 1u) << uint(2))) << uint(2))) + _92) & 15u) / 16.0;
}

float _31(float _30) {
  float _213;
  if (_30 > 0.003130800090730190277099609375) {
    _213 = (pow(_30, 0.4166666567325592041015625) * 1.05499994754791259765625) - 0.054999999701976776123046875;
  } else {
    _213 = _30 * 12.9200000762939453125;
  }
  return _213;
}

uint _59(float _58) {
  return floatBitsToUint(_58);
}

vec4 _82(uint _81) {
  return unpackUnorm4x8(_81).wzyx;
}

float _25(float _24) {
  float _175;
  if (_24 <= 0.040449999272823333740234375) {
    _175 = _24 / 12.9200000762939453125;
  } else {
    _175 = pow((_24 / 1.05499994754791259765625) + 0.0521326996386051177978515625, 2.400000095367431640625);
  }
  return _175;
}

vec3 _28(vec3 _27) {
  float _192 = _27.x;
  float _197 = _27.y;
  float _202 = _27.z;
  return vec3(_25(_192), _25(_197), _25(_202));
}

vec3 _22(vec3 _21) {
  return clamp(_21, vec3(0.0), vec3(1.0));
}

vec3 _137(vec3 _135, float _136) {
  vec3 _705 = (log(_135 + vec3(0.00999999977648258209228515625)) + vec3(4.60517024993896484375)) / vec3(9.21035003662109375);
  _705 *= ((_136 - 1.0) / _136);
  _705 += vec3(0.5 / _136);
  vec3 _729 = _705;
  return _22(_729);
}

vec3 _34(vec3 _33) {
  float _228 = _33.x;
  float _232 = _33.y;
  float _236 = _33.z;
  return vec3(_31(_228), _31(_232), _31(_236));
}

vec3 _47(vec3 _44, mat3 _45, mat3 _46) {
  vec3 _248 = _44;
  mat3 _249 = _45;
  vec3 _251 = _41(_248, _249);
  mat3 _252 = _46;
  return _41(_251, _252);
}

void main() {
  _149 = 2147483648u;
  _151 = 1073741824u;
  ivec2 _835 = ivec2(gl_GlobalInvocationID.xy);
  vec2 _842 = (vec2(_835) + vec2(0.5)) * _852._m0._m2.zw;
  float _861 = _864._m65;
  float _869 = 1.0 / _861;
  vec2 _872 = _842 - vec2(0.5);
  float _876 = length(_872);
  vec2 _879 = (textureLod(sampler2D(_883, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xy - vec2(0.4980392158031463623046875)) * 0.0199999995529651641845703125;
  _879.x *= _869;
  float _912 = textureLod(sampler2D(_883, _887), vec4(_842 + _879, 0.0, 0.0).xy, vec4(_842 + _879, 0.0, 0.0).w).z;
  vec2 _932 = _842 + (_879 * _912);
  float _938 = _852._m0._m11;
  SPIRV_CROSS_BRANCH
  if (_938 > 0.0) {
    float _949 = float(_938 < 1.0);
    vec2 _953 = _842;
    _953.x *= _861;
    _953.x *= (1.0 + (0.4000000059604644775390625 * _949));
    _953.y -= ((_949 * _864._m66) * 2.0);
    _953 *= 6.0;
    _953 += vec2(_864._m66 * 1.5);
    vec2 _988 = vec2(sin(_953.x - _953.y) * sin(_953.y), cos(_953.x + _953.y) * cos(_953.y)) * 0.0040000001899898052215576171875;
    _988.x *= _869;
    _988 *= (1.0 + ((_949 * 3000.0) * _988.x));
    float _1026 = (_949 * _864._m67) + ((1.0 - _949) * _864._m68);
    _932 += (_988 * (_938 * _1026));
  }
  vec3 _1178;
  SPIRV_CROSS_BRANCH
  if (((_852._m0._m24 & 1u) != 0u) == false) {
    float _1058 = _864._m69;
    bool _1067 = _864._m70 != 0.0;
    bool _1075;
    if (!_1067) {
      _1075 = _864._m8.z != 0.0;
    } else {
      _1075 = _1067;
    }
    bool _1083;
    if (!_1075) {
      _1083 = _864._m71 != 0.0;
    } else {
      _1083 = _1075;
    }
    bool _1063 = _1083;
    float _1084 = 0.0;
    SPIRV_CROSS_BRANCH
    if ((_852._m0._m12 != 0.0) && (_876 > 0.0)) {
      _1084 = _852._m0._m12 * pow(_876, _852._m0._m13 - 1.0);
    }
    vec2 _1109 = _872 * _1084;
    SPIRV_CROSS_BRANCH
    if (_1063 || (_1058 != 0.0)) {
      SPIRV_CROSS_BRANCH
      if (_1058 != 0.0) {
        float _1123 = 1.0 - (0.100000001490116119384765625 * _1058);
        float _1128 = 0.100000001490116119384765625 * _1058;
        float _1131 = (_932.x * _1123) + (0.75 * _1128);
        float _1140 = 0.25 * _1128;
        vec2 _1144 = vec2(_1131 + _1140, _932.y);
        vec2 _1151 = vec2(_1131 - _1140, _932.y);
        float _1158 = 0.0;
        SPIRV_CROSS_BRANCH
        if (_1063) {
          _1158 = textureLod(sampler2D(_1162, _887), vec4(_1131, _932.y, 0.0, 0.0).xy, vec4(_1131, _932.y, 0.0, 0.0).w).w;
        }
        _1178 = vec3(0.0);
        SPIRV_CROSS_BRANCH
        if (_1158 != 0.0) {
          SPIRV_CROSS_BRANCH
          if (_1084 != 0.0) {
            vec3 _1187 = vec3(textureLod(sampler2D(_1188, _887), vec4(_1144 - _1109, 0.0, 0.0).xy, vec4(_1144 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1188, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).y, textureLod(sampler2D(_1188, _887), vec4(_1144 + _1109, 0.0, 0.0).xy, vec4(_1144 + _1109, 0.0, 0.0).w).z);
            vec3 _1243 = vec3(textureLod(sampler2D(_1188, _887), vec4(_1151 - _1109, 0.0, 0.0).xy, vec4(_1151 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1188, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).y, textureLod(sampler2D(_1188, _887), vec4(_1151 + _1109, 0.0, 0.0).xy, vec4(_1151 + _1109, 0.0, 0.0).w).z);
            _1178 += ((_1187 + _1243) * (_1158 * 0.5));
          } else {
            vec3 _1307 = textureLod(sampler2D(_1188, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).xyz;
            vec3 _1323 = textureLod(sampler2D(_1188, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).xyz;
            _1178 += ((_1307 + _1323) * (_1158 * 0.5));
          }
        }
        SPIRV_CROSS_BRANCH
        if (_1158 != 1.0) {
          SPIRV_CROSS_BRANCH
          if (_1084 != 0.0) {
            vec3 _1355 = vec3(textureLod(sampler2D(_1356, _887), vec4(_1144 - _1109, 0.0, 0.0).xy, vec4(_1144 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1356, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).y, textureLod(sampler2D(_1356, _887), vec4(_1144 + _1109, 0.0, 0.0).xy, vec4(_1144 + _1109, 0.0, 0.0).w).z);
            vec3 _1411 = vec3(textureLod(sampler2D(_1356, _887), vec4(_1151 - _1109, 0.0, 0.0).xy, vec4(_1151 - _1109, 0.0, 0.0).w).x, textureLod(sampler2D(_1356, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).y, textureLod(sampler2D(_1356, _887), vec4(_1151 + _1109, 0.0, 0.0).xy, vec4(_1151 + _1109, 0.0, 0.0).w).z);
            _1178 += ((_1355 + _1411) * ((1.0 - _1158) * 0.5));
          } else {
            vec3 _1476 = textureLod(sampler2D(_1356, _887), vec4(_1144, 0.0, 0.0).xy, vec4(_1144, 0.0, 0.0).w).xyz;
            vec3 _1492 = textureLod(sampler2D(_1356, _887), vec4(_1151, 0.0, 0.0).xy, vec4(_1151, 0.0, 0.0).w).xyz;
            _1178 += ((_1476 + _1492) * ((1.0 - _1158) * 0.5));
          }
        }
      } else {
        float _1518 = 0.0;
        SPIRV_CROSS_BRANCH
        if (_1063) {
          _1518 = textureLod(sampler2D(_1162, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).w;
        }
        _1178 = vec3(0.0);
        SPIRV_CROSS_BRANCH
        if (_1518 != 0.0) {
          SPIRV_CROSS_BRANCH
          if (_1084 != 0.0) {
            _1178.x += (_1518 * textureLod(sampler2D(_1188, _887), vec4(_932 - _1109, 0.0, 0.0).xy, vec4(_932 - _1109, 0.0, 0.0).w).x);
            _1178.y += (_1518 * textureLod(sampler2D(_1188, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).y);
            _1178.z += (_1518 * textureLod(sampler2D(_1188, _887), vec4(_932 + _1109, 0.0, 0.0).xy, vec4(_932 + _1109, 0.0, 0.0).w).z);
          } else {
            _1178 += (textureLod(sampler2D(_1188, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz * _1518);
          }
        }
        SPIRV_CROSS_BRANCH
        if (_1518 != 1.0) {
          SPIRV_CROSS_BRANCH
          if (_1084 != 0.0) {
            _1178.x += ((1.0 - _1518) * textureLod(sampler2D(_1356, _887), vec4(_932 - _1109, 0.0, 0.0).xy, vec4(_932 - _1109, 0.0, 0.0).w).x);
            _1178.y += ((1.0 - _1518) * textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).y);
            _1178.z += ((1.0 - _1518) * textureLod(sampler2D(_1356, _887), vec4(_932 + _1109, 0.0, 0.0).xy, vec4(_932 + _1109, 0.0, 0.0).w).z);
          } else {
            _1178 += (textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz * (1.0 - _1518));
          }
        }
      }
    } else {
      SPIRV_CROSS_BRANCH
      if (_1084 != 0.0) {
        _1178.x = textureLod(sampler2D(_1356, _887), vec4(_932 - _1109, 0.0, 0.0).xy, vec4(_932 - _1109, 0.0, 0.0).w).x;
        _1178.y = textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).y;
        _1178.z = textureLod(sampler2D(_1356, _887), vec4(_932 + _1109, 0.0, 0.0).xy, vec4(_932 + _1109, 0.0, 0.0).w).z;
      } else {
        _1178 = textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
      }
    }
  } else {
    _1178 = textureLod(sampler2D(_1356, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
  }
  uint _1832 = _852._m0._m14;
  SPIRV_CROSS_BRANCH
  if ((_1832 & 16u) != 0u) {
    vec4 _1845 = textureLod(sampler2D(_1846, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w);
    vec3 _1861 = _1845.xyz;
    vec3 _1864 = _146(_1861);
    _1845.x = _1864.x;
    _1845.y = _1864.y;
    _1845.z = _1864.z;
    _1178 = (_1178 * (1.0 - _1845.w)) + _1845.xyz;
  }
  vec4 _1879 = _852._m0._m1;
  float _1884 = textureLod(sampler2D(_1885, _887), vec2(0.5), 0.0).x;
  float _1891 = _852._m0._m1.w;
  float _1896 = (_1891 != 0.0) ? _1891 : _1884;
  vec3 _1902 = textureLod(sampler2D(_1903, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
  vec3 _1919 = textureLod(sampler2D(_1920, _887), vec4(_932, 0.0, 0.0).xy, vec4(_932, 0.0, 0.0).w).xyz;
  vec3 _1936 = textureLod(sampler2D(_1937, _1939), vec4((_842 * 1.39999997615814208984375) * vec2(1.0, _869), 0.0, 0.0).xy, vec4((_842 * 1.39999997615814208984375) * vec2(1.0, _869), 0.0, 0.0).w).xyz;
  _1178 += ((_1902 * _1936) * _1879.z);
  _1178 += ((_1919 * ((_1936 * 0.5) + vec3(0.5))) * 0.100000001490116119384765625);
  _1178 = ((_1178 * _1879.x) + (_1902 * _1879.y)) * _1896;
  bool _1991 = _852._m0._m15 > 0.0;
  vec3 _1999 = _1178;
  vec3 _1998 = _140(_1999);
  vec3 _2002 = _1998;
  _1998 = _132(_2002);
  vec3 _2005 = _1998;
  _1178 = _143(_2005);
  SPIRV_CROSS_BRANCH
  if (_852._m0._m15 > 0.0) {
    vec3 _2015 = _54(_1178, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875)), mat3(vec3(1.6410233974456787109375, -0.324803292751312255859375, -0.23642469942569732666015625), vec3(-0.663662850856781005859375, 1.6153316497802734375, 0.016756348311901092529296875), vec3(0.01172189414501190185546875, -0.008284442126750946044921875, 0.98839485645294189453125)));
    float _2032 = _2015.x;
    float _2036 = _2015.y;
    float _2040 = _2015.z;
    vec3 _2031 = vec3(_122(_2032), _122(_2036), _122(_2040));
    _1178 = textureLod(sampler3D(_2047, _887), vec4(_2031, 0.0).xyz, vec4(_2031, 0.0).w).xyz;
    float _2066 = _1178.x;
    float _2070 = _1178.y;
    float _2074 = _1178.z;
    _1178 = vec3(_119(_2066), _119(_2070), _119(_2074));
    _1178 = _54(_1178, mat3(vec3(0.662454187870025634765625, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.674081742763519287109375, 0.053689517080783843994140625), vec3(-0.0055746496655046939849853515625, 0.0040607335977256298065185546875, 1.01033914089202880859375)), mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125)), mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875)));
  }
  float _2094 = 0.0;
  SPIRV_CROSS_BRANCH
  if (_852._m0._m3.x > 0.0) {
    vec2 _2103 = _842;
    vec2 _2105 = ((_2103 * 2.0) - vec2(1.0)) * vec2(_852._m0._m3.y, 1.0);
    vec2 _2116 = _2105 * vec2(_852._m0._m4.y);
    vec2 _2125 = clamp(_2105 * vec2(_852._m0._m4.y), vec2(-1.0), vec2(1.0));
    vec2 _2140 = (_2125 * vec2(0.5)) + vec2(0.5);
    _2125 = _16(_2140);
    _2125 *= (vec2(1.0) - _2125.yx);
    float _2147 = 1.0 - length(_2116);
    float _2151 = (_2125.x * _2125.y) * 16.0;
    _2094 = mix(_2151, _2147, _852._m0._m4.x);
    float _2172 = pow(1.0 - _2094, _852._m0._m4.z);
    _2094 = 1.0 - _10(_2172);
    float _2181 = pow(_2094, _852._m0._m4.w);
    _2094 = _10(_2181);
    vec3 _2184 = _1178;
    float _2193 = 1.0 - (_86(_2184) * _852._m0._m3.z);
    float _2183 = _10(_2193);
    float _2198 = _2183 - _2094;
    _2094 = mix(0.0, _10(_2198), _852._m0._m3.x);
  }
  bool _2208 = _864._m72 > 0.0;
  bool _2216;
  if (!_2208) {
    _2216 = _864._m9.w > 0.0;
  } else {
    _2216 = _2208;
  }
  SPIRV_CROSS_BRANCH
  if (_2216) {
    float _2222 = _876 - 0.25;
    float _2219 = _10(_2222) * 2.0;
    vec3 _2226 = _1178;
    float _2225 = _86(_2226);
    SPIRV_CROSS_BRANCH
    if (_864._m9.w > 0.0) {
      float _2234 = mod(_864._m66 * 0.0500000007450580596923828125, 10.0);
      float _2242 = _872.y;
      float _2245 = _872.x;
      float _2241 = _76(_2242, _2245) * 0.3183098733425140380859375;
      vec2 _2251 = vec2((_876 - _2234) * 0.100000001490116119384765625, _2241);
      float _2258 = textureLod(sampler2D(_2259, _1939), vec4(_2251.x, _2251.y, 0.0, 0.0).xy, vec4(_2251.x, _2251.y, 0.0, 0.0).w).x;
      float _2277 = (_2258 + 0.20000000298023223876953125) * 0.833333313465118408203125;
      float _2283 = min((_2219 * 1.75) * _864._m9.w, 1.0);
      float _2291 = min(1.0, _2283 * 2.0) * max(0.0, _2283 - _2277);
      float _2300 = max(0.0, (_2283 * 2.0) - 1.0);
      float _2305 = mix(_2291, _2283, _2300);
      _1178 = mix(_1178, vec3(_2225), vec3(_2305 * _864._m9.y));
      _2094 = max(_2094, min(1.0, (_2219 * _864._m9.x) * _864._m9.w));
    }
    SPIRV_CROSS_BRANCH
    if (_864._m72 > 0.0) {
      vec2 _2348 = _842 * vec2(16.0);
      vec2 _2349 = vec2(1.7599999904632568359375 * _864._m66, (-0.75) * _864._m66);
      float _2350 = 0.550000011920928955078125;
      int _2351 = 3;
      float _2352 = _116(_2348, _2349, _2350, _2351);
      vec2 _2363 = _842 * vec2(16.0);
      vec2 _2364 = vec2((-1.2599999904632568359375) * _864._m66, 0.550000011920928955078125 * _864._m66);
      float _2365 = 0.550000011920928955078125;
      int _2366 = 3;
      float _2367 = _116(_2363, _2364, _2365, _2366);
      float _2334 = _2352 * _2367;
      float _2369 = _2219 * _864._m72;
      float _2376 = _2369;
      float _2374 = mix(_2334, 1.0, _10(_2376));
      _2094 = max(_2094, _2374 * _2369);
      vec3 _2385 = vec3(_2225, 0.0, 0.0);
      float _2389 = _2369;
      float _2388 = _10(_2389) * _2374;
      _1178 = mix(_1178, _2385, vec3(_2388));
    }
  }
  float _2399 = 1.0;
  SPIRV_CROSS_BRANCH
  if (_852._m0._m5.w > 0.0) {
    vec2 _2408 = _842 * _864._m10.xy;
    vec2 _2416 = vec2(_2408.x, 1.0 - _2408.y);
    vec2 _2423 = (_2416 * 2.0) - vec2(1.0);
    vec2 _2428 = vec2(cos(_852._m0._m5.x), sin(_852._m0._m5.x));
    vec2 _2440 = _2423 + (_2428 * _852._m0._m5.z);
    float _2449 = (clamp(dot(_2440, _2428) * _852._m0._m5.y, -1.0, 1.0) * 0.5) + 0.5;
    float _2461 = _852._m0._m6.x * 0.5;
    uvec2 _2471 = uvec2(_835);
    uint _2472 = 0u;
    float _2468 = ((_93(_2471, _2472) * 2.0) - 1.0) / 255.0;
    float _2478 = min(max(_2461, _2449 + _2468), 1.0 - _2461);
    float _2487 = textureLod(sampler2D(_2488, _2490), vec4(_2478, 0.5, 0.0, 0.0).xy, vec4(_2478, 0.5, 0.0, 0.0).w).x;
    float _2504 = _852._m0._m5.w;
    _2399 = mix(1.0, _2487, _31(_2504));
  }
  _1178 = mix(_864._m11.xyz, _1178, vec3(_2399));
  _1178 = mix(_1178, _864._m12.xyz, vec3(_2094));
  float _2527 = _852._m0._m16;
  uint _2523 = _59(_2527);
  vec2 _2531 = _842;
  uint _2533 = 0u;
  uint _2534 = 0u;
  SPIRV_CROSS_BRANCH
  if ((_2523 & 15u) != 0u) {
    ivec2 _2540 = ivec2(_835.x >> 1, _835.y);
    uint _2547 = uint(imageLoad(_2550, _2540).x * 255.0);
    _2533 = (_2547 >> uint((_835.x & 1) * 4)) & 15u;
    _2534 = _2533;
  }
  uint _2565 = _2534 & 3u;
  bool _2568 = (_2523 & 1u) != 0u;
  SPIRV_CROSS_BRANCH
  if (_2568) {
    vec4 _2575 = _852._m0._m7;
    _2575.w *= float(_2565 == 0u);
    vec3 _2589 = _1178;
    float _2588 = _86(_2589);
    _1178 = mix(_1178, vec3(_2588), vec3(_2575.w));
    _1178 *= _2575.xyz;
  }
  SPIRV_CROSS_BRANCH
  if (_852._m0._m8.w != 0.0) {
    float _2610 = fract(_864._m66);
    float _2614 = fract(_864._m66 + 0.5);
    float _2619 = abs(1.0 - (_2610 / 0.5));
    vec2 _2624 = textureLod(sampler2D(_2625, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xy;
    _2624 = (_2624 * 2.0) - vec2(1.0);
    float _2645 = textureLod(sampler2D(_2625, _887), vec4(_842 + (_2624 * _2610), 0.0, 0.0).xy, vec4(_842 + (_2624 * _2610), 0.0, 0.0).w).z;
    float _2669 = textureLod(sampler2D(_2625, _887), vec4(_842 + (_2624 * _2614), 0.0, 0.0).xy, vec4(_842 + (_2624 * _2614), 0.0, 0.0).w).z;
    float _2695 = _2619;
    _2619 = mix(_2645, _2669, _10(_2695));
    vec3 _2699 = vec3(_2619);
    _2699 *= _852._m0._m8.xyz;
    float _2713 = _852._m0._m8.w;
    _1178 = mix(_1178, _2699, vec3(_10(_2713)));
  }
  vec4 _2719 = vec4(0.0);
  vec4 _2721 = vec4(0.0);
  SPIRV_CROSS_BRANCH
  if (_852._m0._m17 > 0.0) {
    vec2 _2730 = abs((_842 * 2.0) - vec2(1.0));
    _2730.x = max(0.0, 1.0 - ((1.0 - _2730.x) / _869));
    vec2 _2744 = (floor(_2730 / vec2(0.0416666679084300994873046875)) + vec2(0.5)) * 0.0416666679084300994873046875;
    _2719 = vec4(0.0);
    _2721 = vec4(0.0);
    SPIRV_CROSS_UNROLL
    for (int _2753 = 0; _2753 < 4; _2753++) {
      vec4 _2761 = _2766._m0[_2753];
      float _2771 = _2761.x;
      uint _2770 = _59(_2771);
      SPIRV_CROSS_FLATTEN
      if (_2770 == 0u) {
        break;
      }
      float _2780 = _2761.y;
      float _2783 = _2761.z;
      float _2786 = _2761.w;
      float _2789 = pow(pow(_2730.x, _2780) + pow(_2730.y * _2786, _2780), 1.0 / _2780);
      uint _2805 = _2770;
      vec4 _2804 = _82(_2805);
      vec3 _2808 = _2804.xyz;
      vec3 _2811 = _28(_2808);
      _2804.x = _2811.x;
      _2804.y = _2811.y;
      _2804.z = _2811.z;
      float _2818 = min(1.0, _2789 * 5.0);
      _2804.w *= _2818;
      float _2831 = 2.0 - _2780;
      float _2828 = 1.0 + (_10(_2831) * 0.4142135679721832275390625);
      float _2836 = (_2789 - _2783) / _2828;
      float _2842 = max(0.0, 1.0 - max(_2836 / 0.300000011920928955078125, (-_2836) / 0.4000000059604644775390625));
      _2842 *= _2842;
      _2842 *= _2842;
      _2842 *= 0.5;
      float _2866 = 1.2000000476837158203125 - (abs(_2836) * 50.0);
      float _2860 = _10(_2866);
      float _2868 = (_2842 + _2860) * _2804.w;
      _2721.w = ((1.0 - _2868) * _2721.w) + _2868;
      vec4 _2885 = _2721;
      vec3 _2892 = (_2885.xyz * (1.0 - _2868)) + (_2804.xyz * _2868);
      _2721.x = _2892.x;
      _2721.y = _2892.y;
      _2721.z = _2892.z;
      float _2899 = pow(pow(_2744.x, _2780) + pow(_2744.y * _2786, _2780), 1.0 / _2780);
      float _2914 = (_2899 - _2783) / _2828;
      float _2920 = max(0.0, 1.0 - (abs(_2914) / 0.054999999701976776123046875)) * _2804.w;
      vec4 _2933 = _2721;
      vec3 _2935 = _2933.xyz + (_2804.xyz * _2920);
      _2721.x = _2935.x;
      _2721.y = _2935.y;
      _2721.z = _2935.z;
      float _2942 = 0.60000002384185791015625 + (max(0.0, _2780 - 8.0) * 0.25);
      float _2949 = max(0.0, 1.0 - max(_2836 / 0.0199999995529651641845703125, (-_2836) / _2942));
      _2949 *= _2949;
      _2949 *= _2949;
      float _2965 = _2949 * _2804.w;
      _2719.w = ((1.0 - _2965) * _2719.w) + _2965;
      vec4 _2980 = _2719;
      vec3 _2987 = (_2980.xyz * (1.0 - _2965)) + (_2804.xyz * _2965);
      _2719.x = _2987.x;
      _2719.y = _2987.y;
      _2719.z = _2987.z;
    }
  }
  vec4 _2996 = _864._m13;
  vec4 _2999 = _864._m14;
  vec4 _3002 = _864._m15;
  SPIRV_CROSS_BRANCH
  if (_2996.w != 0.0) {
    float _3010 = _2999.z;
    float _3013 = _2999.w;
    vec2 _3016 = _3002.xy;
    vec4 _3064;
    SPIRV_CROSS_BRANCH
    if (_3013 != 0.0) {
      SPIRV_CROSS_BRANCH
      if (_3010 < 0.0) {
        vec3 _3027 = textureLod(sampler2D(_3028, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _3044 = vec2(_3013 * _3027.z) * ((_3027.xy * vec2(2.0)) - vec2(1.0));
        vec2 _3062 = (_842 + _3044) * _3016;
        vec2 _3056 = _16(_3062);
        _3064 = textureLod(sampler2D(_3065, _3067), vec4(_3056, 0.0, 0.0).xy, vec4(_3056, 0.0, 0.0).w);
      } else {
        float _3082 = fract(_864._m66 / _3010);
        float _3088 = fract(0.5 + (_864._m66 / _3010));
        float _3095 = abs(1.0 - (2.0 * _3082));
        vec3 _3100 = textureLod(sampler2D(_3028, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _3116 = ((_3100.xy * 2.0) - vec2(1.0)) * (_3013 * _3100.z);
        _3116.x *= _869;
        vec2 _3132 = _842 - (_3116 * (_3082 - 0.5));
        vec2 _3139 = _842 - (_3116 * (_3088 - 0.5));
        _3064 = mix(textureLod(sampler2D(_3065, _3067), vec4(_3132 * _3016, 0.0, 0.0).xy, vec4(_3132 * _3016, 0.0, 0.0).w), textureLod(sampler2D(_3065, _3067), vec4(_3139 * _3016, 0.0, 0.0).xy, vec4(_3139 * _3016, 0.0, 0.0).w), vec4(_3095));
      }
    } else {
      _3064 = textureLod(sampler2D(_3065, _3067), vec4(_842 * _3016, 0.0, 0.0).xy, vec4(_842 * _3016, 0.0, 0.0).w);
    }
    float _3204 = float(_3002.w < 0.0);
    _3064 = mix(_3064, vec4(1.0, 1.0, 1.0, _3064.x), vec4(_3204));
    _3064.w *= min(1.0, _2999.x * pow(2.0 * _876, _2999.y));
    _3064.w *= abs(_2996.w);
    vec4 _3238 = _3064;
    vec3 _3240 = _3238.xyz * _2996.xyz;
    _3064.x = _3240.x;
    _3064.y = _3240.y;
    _3064.z = _3240.z;
    float _3247 = abs(_3002.w);
    vec4 _3252 = _3064;
    vec3 _3254 = _3252.xyz * _3247;
    _3064.x = _3254.x;
    _3064.y = _3254.y;
    _3064.z = _3254.z;
    vec3 _3261 = _3064.xyz * _3064.w;
    bool _3267 = _3002.z != 0.0;
    SPIRV_CROSS_BRANCH
    if (_3267) {
      _3064.w *= _2719.w;
      _3261 *= _2719.xyz;
    }
    float _3284 = 1.0 - (float(_2996.w > 0.0) * _3064.w);
    _1178 = (_1178 * _3284) + _3261;
  }
  _2996 = _864._m16;
  _2999 = _864._m17;
  _3002 = _864._m18;
  SPIRV_CROSS_BRANCH
  if (_2996.w != 0.0) {
    float _3310 = _2999.z;
    float _3313 = _2999.w;
    vec2 _3316 = _3002.xy;
    vec4 _3363;
    SPIRV_CROSS_BRANCH
    if (_3313 != 0.0) {
      SPIRV_CROSS_BRANCH
      if (_3310 < 0.0) {
        vec3 _3327 = textureLod(sampler2D(_3328, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _3344 = vec2(_3313 * _3327.z) * ((_3327.xy * vec2(2.0)) - vec2(1.0));
        vec2 _3361 = (_842 + _3344) * _3316;
        vec2 _3355 = _16(_3361);
        _3363 = textureLod(sampler2D(_3364, _3366), vec4(_3355, 0.0, 0.0).xy, vec4(_3355, 0.0, 0.0).w);
      } else {
        float _3381 = fract(_864._m66 / _3310);
        float _3387 = fract(0.5 + (_864._m66 / _3310));
        float _3394 = abs(1.0 - (2.0 * _3381));
        vec3 _3399 = textureLod(sampler2D(_3328, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _3415 = ((_3399.xy * 2.0) - vec2(1.0)) * (_3313 * _3399.z);
        _3415.x *= _869;
        vec2 _3431 = _842 - (_3415 * (_3381 - 0.5));
        vec2 _3438 = _842 - (_3415 * (_3387 - 0.5));
        _3363 = mix(textureLod(sampler2D(_3364, _3366), vec4(_3431 * _3316, 0.0, 0.0).xy, vec4(_3431 * _3316, 0.0, 0.0).w), textureLod(sampler2D(_3364, _3366), vec4(_3438 * _3316, 0.0, 0.0).xy, vec4(_3438 * _3316, 0.0, 0.0).w), vec4(_3394));
      }
    } else {
      _3363 = textureLod(sampler2D(_3364, _3366), vec4(_842 * _3316, 0.0, 0.0).xy, vec4(_842 * _3316, 0.0, 0.0).w);
    }
    float _3503 = float(_3002.w < 0.0);
    _3363 = mix(_3363, vec4(1.0, 1.0, 1.0, _3363.x), vec4(_3503));
    _3363.w *= min(1.0, _2999.x * pow(2.0 * _876, _2999.y));
    _3363.w *= abs(_2996.w);
    vec4 _3537 = _3363;
    vec3 _3539 = _3537.xyz * _2996.xyz;
    _3363.x = _3539.x;
    _3363.y = _3539.y;
    _3363.z = _3539.z;
    float _3546 = abs(_3002.w);
    vec4 _3551 = _3363;
    vec3 _3553 = _3551.xyz * _3546;
    _3363.x = _3553.x;
    _3363.y = _3553.y;
    _3363.z = _3553.z;
    vec3 _3560 = _3363.xyz * _3363.w;
    bool _3566 = _3002.z != 0.0;
    SPIRV_CROSS_BRANCH
    if (_3566) {
      _3363.w *= _2719.w;
      _3560 *= _2719.xyz;
    }
    float _3583 = 1.0 - (float(_2996.w > 0.0) * _3363.w);
    _1178 = (_1178 * _3583) + _3560;
  }
  _2996 = _864._m19;
  _2999 = _864._m20;
  _3002 = _864._m21;
  SPIRV_CROSS_BRANCH
  if (_2996.w != 0.0) {
    float _3611 = _2999.z;
    float _3614 = _2999.w;
    vec2 _3617 = _3002.xy;
    vec4 _3664;
    SPIRV_CROSS_BRANCH
    if (_3614 != 0.0) {
      SPIRV_CROSS_BRANCH
      if (_3611 < 0.0) {
        vec3 _3628 = textureLod(sampler2D(_3629, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _3645 = vec2(_3614 * _3628.z) * ((_3628.xy * vec2(2.0)) - vec2(1.0));
        vec2 _3662 = (_842 + _3645) * _3617;
        vec2 _3656 = _16(_3662);
        _3664 = textureLod(sampler2D(_3665, _3667), vec4(_3656, 0.0, 0.0).xy, vec4(_3656, 0.0, 0.0).w);
      } else {
        float _3682 = fract(_864._m66 / _3611);
        float _3688 = fract(0.5 + (_864._m66 / _3611));
        float _3695 = abs(1.0 - (2.0 * _3682));
        vec3 _3700 = textureLod(sampler2D(_3629, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _3716 = ((_3700.xy * 2.0) - vec2(1.0)) * (_3614 * _3700.z);
        _3716.x *= _869;
        vec2 _3732 = _842 - (_3716 * (_3682 - 0.5));
        vec2 _3739 = _842 - (_3716 * (_3688 - 0.5));
        _3664 = mix(textureLod(sampler2D(_3665, _3667), vec4(_3732 * _3617, 0.0, 0.0).xy, vec4(_3732 * _3617, 0.0, 0.0).w), textureLod(sampler2D(_3665, _3667), vec4(_3739 * _3617, 0.0, 0.0).xy, vec4(_3739 * _3617, 0.0, 0.0).w), vec4(_3695));
      }
    } else {
      _3664 = textureLod(sampler2D(_3665, _3667), vec4(_842 * _3617, 0.0, 0.0).xy, vec4(_842 * _3617, 0.0, 0.0).w);
    }
    float _3804 = float(_3002.w < 0.0);
    _3664 = mix(_3664, vec4(1.0, 1.0, 1.0, _3664.x), vec4(_3804));
    _3664.w *= min(1.0, _2999.x * pow(2.0 * _876, _2999.y));
    _3664.w *= abs(_2996.w);
    vec4 _3838 = _3664;
    vec3 _3840 = _3838.xyz * _2996.xyz;
    _3664.x = _3840.x;
    _3664.y = _3840.y;
    _3664.z = _3840.z;
    float _3847 = abs(_3002.w);
    vec4 _3852 = _3664;
    vec3 _3854 = _3852.xyz * _3847;
    _3664.x = _3854.x;
    _3664.y = _3854.y;
    _3664.z = _3854.z;
    vec3 _3861 = _3664.xyz * _3664.w;
    bool _3867 = _3002.z != 0.0;
    SPIRV_CROSS_BRANCH
    if (_3867) {
      _3664.w *= _2719.w;
      _3861 *= _2719.xyz;
    }
    float _3884 = 1.0 - (float(_2996.w > 0.0) * _3664.w);
    _1178 = (_1178 * _3884) + _3861;
  }
  _2996 = _864._m22;
  _2999 = _864._m23;
  _3002 = _864._m24;
  SPIRV_CROSS_BRANCH
  if (_2996.w != 0.0) {
    float _3911 = _2999.z;
    float _3914 = _2999.w;
    vec2 _3917 = _3002.xy;
    vec4 _3964;
    SPIRV_CROSS_BRANCH
    if (_3914 != 0.0) {
      SPIRV_CROSS_BRANCH
      if (_3911 < 0.0) {
        vec3 _3928 = textureLod(sampler2D(_3929, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _3945 = vec2(_3914 * _3928.z) * ((_3928.xy * vec2(2.0)) - vec2(1.0));
        vec2 _3962 = (_842 + _3945) * _3917;
        vec2 _3956 = _16(_3962);
        _3964 = textureLod(sampler2D(_3965, _3967), vec4(_3956, 0.0, 0.0).xy, vec4(_3956, 0.0, 0.0).w);
      } else {
        float _3982 = fract(_864._m66 / _3911);
        float _3988 = fract(0.5 + (_864._m66 / _3911));
        float _3995 = abs(1.0 - (2.0 * _3982));
        vec3 _4000 = textureLod(sampler2D(_3929, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).xyw;
        vec2 _4016 = ((_4000.xy * 2.0) - vec2(1.0)) * (_3914 * _4000.z);
        _4016.x *= _869;
        vec2 _4032 = _842 - (_4016 * (_3982 - 0.5));
        vec2 _4039 = _842 - (_4016 * (_3988 - 0.5));
        _3964 = mix(textureLod(sampler2D(_3965, _3967), vec4(_4032 * _3917, 0.0, 0.0).xy, vec4(_4032 * _3917, 0.0, 0.0).w), textureLod(sampler2D(_3965, _3967), vec4(_4039 * _3917, 0.0, 0.0).xy, vec4(_4039 * _3917, 0.0, 0.0).w), vec4(_3995));
      }
    } else {
      _3964 = textureLod(sampler2D(_3965, _3967), vec4(_842 * _3917, 0.0, 0.0).xy, vec4(_842 * _3917, 0.0, 0.0).w);
    }
    float _4104 = float(_3002.w < 0.0);
    _3964 = mix(_3964, vec4(1.0, 1.0, 1.0, _3964.x), vec4(_4104));
    _3964.w *= min(1.0, _2999.x * pow(2.0 * _876, _2999.y));
    _3964.w *= abs(_2996.w);
    vec4 _4138 = _3964;
    vec3 _4140 = _4138.xyz * _2996.xyz;
    _3964.x = _4140.x;
    _3964.y = _4140.y;
    _3964.z = _4140.z;
    float _4147 = abs(_3002.w);
    vec4 _4152 = _3964;
    vec3 _4154 = _4152.xyz * _4147;
    _3964.x = _4154.x;
    _3964.y = _4154.y;
    _3964.z = _4154.z;
    vec3 _4161 = _3964.xyz * _3964.w;
    bool _4167 = _3002.z != 0.0;
    SPIRV_CROSS_BRANCH
    if (_4167) {
      _3964.w *= _2719.w;
      _4161 *= _2719.xyz;
    }
    float _4184 = 1.0 - (float(_2996.w > 0.0) * _3964.w);
    _1178 = (_1178 * _4184) + _4161;
  }
  _1178 = (_1178 * (1.0 - _2721.w)) + _2721.xyz;
  int _4206 = int(_852._m0._m18);
  SPIRV_CROSS_LOOP
  for (int _4212 = 0; _4212 < _4206; _4212++) {
    vec4 _4221 = _4225._m0[_4212];
    float _4237 = pow(_876, _4221.z) * _4221.y;
    float _4229 = _10(_4237);
    float _4240 = _4221.x;
    uint _4244 = _59(_4240);
    vec3 _4239 = _82(_4244).xyz;
    vec3 _4248 = _4239;
    vec3 _4247 = _28(_4248);
    _1178 = mix(_1178, _4247, vec3(_4229));
  }
  SPIRV_CROSS_BRANCH
  if (_852._m0._m9.w > 0.0) {
    float _4273 = _852._m0._m9.w;
    _1178 = mix(_1178, _852._m0._m9.xyz, vec3(_10(_4273)));
  }
  _1178 = max(_1178, vec3(0.0));
  bool _4287 = ((_852._m0._m24 & 1u) != 0u) == false;
  bool _4295;
  if (_4287) {
    _4295 = _864._m73 > 0;
  } else {
    _4295 = _4287;
  }
  SPIRV_CROSS_BRANCH
  if (_4295) {
    bool _4298 = false;
    vec2 _4299 = (_842 - _864._m25.xy) * _864._m25.zw;
    vec2 _4311 = _4299;
    if (all(equal(_4299, _16(_4311)))) {
      _1178 = textureLod(sampler2D(_4319, _887), vec4(_4299, 0.0, 0.0).xy, vec4(_4299, 0.0, 0.0).w).xyz;
      _4298 = true;
    }
    _4299 = (_842 - _864._m26.xy) * _864._m26.zw;
    bool _4348 = _864._m73 > 1;
    bool _4357;
    if (_4348) {
      vec2 _4352 = _4299;
      _4357 = all(equal(_4299, _16(_4352)));
    } else {
      _4357 = _4348;
    }
    if (_4357) {
      _1178 = textureLod(sampler2D(_4360, _887), vec4(_4299, 0.0, 0.0).xy, vec4(_4299, 0.0, 0.0).w).xyz;
      _4298 = true;
    }
    _4299 = (_842 - _864._m27.xy) * _864._m27.zw;
    bool _4388 = _864._m73 > 2;
    bool _4397;
    if (_4388) {
      vec2 _4392 = _4299;
      _4397 = all(equal(_4299, _16(_4392)));
    } else {
      _4397 = _4388;
    }
    if (_4397) {
      _1178 = textureLod(sampler2D(_4400, _887), vec4(_4299, 0.0, 0.0).xy, vec4(_4299, 0.0, 0.0).w).xyz;
      _4298 = true;
    }
    if (_4298 == true) {
      vec3 _4420 = _1178;
      _1178 = _132(_4420);
      vec3 _4423 = _1178;
      _1178 = _143(_4423);
    }
  }
  vec3 _4426 = _1178;
  SPIRV_CROSS_BRANCH
  if ((_1832 & 1u) == 0u) {
    vec3 _4434 = _1178;
    float _4433 = _86(_4434);
    float _4437 = _864._m28.w;
    _1178 = mix(vec3(_4433), _1178 * _864._m28.xyz, vec3(_4437));
    uint _4451 = _852._m0._m14;
    if ((_4451 & 1u) != 0u) {
      vec3 _4461 = _1178;
      _1178 = max(vec3(0.0), mix(vec3(_86(_4461)), _1178, vec3(_852._m0._m19)));
    }
    vec3 _4475 = _1178;
    float _4477 = _864._m74;
    vec3 _4473 = _137(_4475, _4477);
    _4426 = textureLod(sampler3D(_4481, _887), vec4(_4473, 0.0).xyz, vec4(_4473, 0.0).w).xyz;
    vec3 _4499 = _4426;
    _4426 = _34(_4499);
  } else {
    vec3 _4504 = _1178;
    float _4503 = _86(_4504);
    float _4507 = _864._m28.w;
    _1178 = mix(vec3(_4503), _1178 * _864._m28.xyz, vec3(_4507));
    uint _4520 = _852._m0._m14;
    if ((_4520 & 1u) != 0u) {
      vec3 _4530 = _1178;
      _1178 = max(vec3(0.0), mix(vec3(_86(_4530)), _1178, vec3(_852._m0._m19)));
    }
    vec3 _4543 = _1178;
    float _4545 = _864._m74;
    vec3 _4542 = _137(_4543, _4545);
    _4426 = textureLod(sampler3D(_4481, _887), vec4(_4542, 0.0).xyz, vec4(_4542, 0.0).w).xyz;
  }
  float _4571;
  if (_864._m75 == 0.0) {
    uvec2 _4579 = uvec2(_835);
    uint _4580 = uint(_864._m3.x);
    _4571 = ((_93(_4579, _4580) * 2.0) - 1.0) / 255.0;
  } else {
    _4571 = 0.0;
  }
  float _4566 = _4571;
  _4426 = max(vec3(0.0), _4426 + vec3(_4566));
  SPIRV_CROSS_BRANCH
  if (_852._m0._m20 == 1u) {
    uint _4599 = uint(textureLod(sampler2D(_4600, _4602), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).x * 255.0);
    uint _4619 = (_4599 >> uint(4)) & 15u;
    vec4 _4627;
    SPIRV_CROSS_FLATTEN
    if (_4619 > 0u) {
      _4627 = _4635._m0[_4619] * _852._m0._m21;
    } else {
      _4627 = vec4(0.0);
    }
    vec3 _4642 = _4627.xyz;
    uint _4645 = _852._m0._m14;
    SPIRV_CROSS_BRANCH
    if ((_4645 & 1u) == 1u) {
      vec3 _4655 = _47(_4642, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
      _4655 *= _852._m0._m22;
      _4426 = mix(_4426, _4655, vec3((_4627.w * _852._m0._m21) * float(clamp(_4619, 0u, 1u))));
    } else {
      _4426 = mix(_4426, _4642, vec3((_4627.w * _852._m0._m21) * float(clamp(_4619, 0u, 1u))));
    }
  } else {
    SPIRV_CROSS_BRANCH
    if (_852._m0._m20 == 2u) {
      uint _4716 = uint(texelFetch(sampler2D(_4717, _887), _835, 0).x * 255.0) >> uint(4);
      SPIRV_CROSS_BRANCH
      if (_4716 == 0u) {
        float _4732 = 0.0;
        for (int _4733 = 0; _4733 < 8; _4733++) {
          _4732 = max(_4732, texelFetch(sampler2D(_4717, _2490), _835 + (ivec2(_852._m0._m23) * _4762[_4733]), 0).x);
        }
        SPIRV_CROSS_BRANCH
        if (_4732 > 0.0) {
          vec4 _4788;
          SPIRV_CROSS_FLATTEN
          if ((uint(_4732 * 255.0) >> uint(4)) > 0u) {
            _4788 = _4635._m0[uint(_4732 * 255.0) >> uint(4)] * _852._m0._m21;
          } else {
            _4788 = vec4(0.0);
          }
          SPIRV_CROSS_BRANCH
          if ((_1832 & 1u) == 1u) {
            vec3 _4808 = _47(_4788.xyz, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
            _4788.x = _4808.x;
            _4788.y = _4808.y;
            _4788.z = _4808.z;
            vec4 _4819 = _4788;
            vec3 _4821 = _4819.xyz * _852._m0._m22;
            _4788.x = _4821.x;
            _4788.y = _4821.y;
            _4788.z = _4821.z;
          }
          _4426 = _4788.xyz;
          if (((_852._m0._m24 & 1u) != 0u) == true) {
            ivec2 _4839 = ivec2(_835);
            ivec2 _4844 = _4839 >> ivec2(2);
            int _4848 = ((_4839.y & 3) << 3) + ((_4839.x & 3) << 1);
            uint _4867 = imageAtomicOr(_4860, _4844, uint(2 << _4848));
          }
        }
      }
    } else {
      SPIRV_CROSS_BRANCH
      if (_852._m0._m20 == 3u) {
        vec4 _4876 = textureLod(sampler2D(_4877, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w);
        uint _4892 = uint(textureLod(sampler2D(_4717, _887), vec4(_842, 0.0, 0.0).xy, vec4(_842, 0.0, 0.0).w).x * 255.0) >> uint(4);
        vec3 _4911 = _4876.xyz * (float(1u - clamp(_4892, 0u, 1u)) * _4876.w);
        vec3 _4922 = _4911;
        uint _4924 = _852._m0._m14;
        SPIRV_CROSS_BRANCH
        if ((_4924 & 1u) == 1u) {
          vec3 _4934 = _47(_4922, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
          _4934 *= _852._m0._m22;
          _4426 += _4934;
        } else {
          _4426 += _4922;
        }
        bool _4956 = ((_852._m0._m24 & 1u) != 0u) == true;
        bool _4963;
        if (_4956) {
          _4963 = dot(_4911, _4911) > 0.0;
        } else {
          _4963 = _4956;
        }
        if (_4963) {
          ivec2 _4966 = ivec2(_835);
          ivec2 _4971 = _4966 >> ivec2(2);
          int _4975 = ((_4966.y & 3) << 3) + ((_4966.x & 3) << 1);
          uint _4990 = imageAtomicOr(_4860, _4971, uint(2 << _4975));
        }
      }
    }
  }
  imageStore(_4993, _835, vec4(_4426.x, _4426.y, _4426.z, 1.0));
}
