// ACES ToneMap
#version 450

#extension GL_GOOGLE_include_directive : require
#include "./include/common.glsl"

#extension GL_EXT_buffer_reference2 : require
#if defined(GL_EXT_control_flow_attributes)
#extension GL_EXT_control_flow_attributes : require
#define SPIRV_CROSS_FLATTEN [[flatten]]
#define SPIRV_CROSS_BRANCH  [[dont_flatten]]
#define SPIRV_CROSS_UNROLL  [[unroll]]
#define SPIRV_CROSS_LOOP    [[dont_unroll]]
#else
#define SPIRV_CROSS_FLATTEN
#define SPIRV_CROSS_BRANCH
#define SPIRV_CROSS_UNROLL
#define SPIRV_CROSS_LOOP
#endif
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(buffer_reference) buffer _2930;

struct _113 {
  float _m0;
  float _m1;
};

struct _114 {
  float _m0[10];
  float _m1[10];
  _113 _m2;
  _113 _m3;
  _113 _m4;
  float _m5;
  float _m6;
};

struct _155 {
  float _m0;
  float _m1;
  float _m2;
};

struct _159 {
  float _m0[5];
};

struct _175 {
  _155 _m0;
  _155 _m1;
  _155 _m2;
  float _m3[6];
  float _m4[6];
};

struct _211 {
  float _m0;
  float _m1;
  float _m2;
};

struct _740 {
  float _m0[6];
  float _m1[6];
  _113 _m2;
  _113 _m3;
  _113 _m4;
  float _m5;
  float _m6;
};

const float _1627[2][2] = float[][](float[](-15.0, 0.180000007152557373046875), float[](-6.5, 0.3499999940395355224609375));
const float _1770[2][2] = float[][](float[](6.5, 0.88999998569488525390625), float[](18.0, 0.89999997615814208984375));

layout(buffer_reference, buffer_reference_align = 16, std430) buffer _2930 {
  uvec4 _m0;
  uint _m1;
  float _m2;
  float _m3;
};

layout(set = 0, binding = 0, std140) uniform _2885_2887 {
  uvec4 _m0;
  vec4 _m1;
  vec4 _m2;
  vec4 _m3;
  vec4 _m4;
  vec4 _m5;
  vec4 _m6;
  vec4 _m7;
  uint _m8;
  float _m9;
  float _m10;
  float _m11;
  float _m12;
  float _m13;
  float _m14;
  float _m15;
  float _m16;
  float _m17;
  float _m18;
  float _m19;
  float _m20;
  float _m21;
  float _m22;
  float _m23;
  float _m24;
  float _m25;
  float _m26;
  float _m27;
  float _m28;
  float _m29;
  float _m30;
  float _m31;
  float _m32;
  float _m33;
  float _m34;
  float _m35;
  float _m36;
  float _m37;
  uint _m38;
  uint _m39;
  uint _m40;
  float _m41;
  uint _m42;
  uint _m43;
  float _m44;
  float _m45;
  uint _m46;
}
_2887;

layout(set = 0, binding = 1, std140) uniform _2983_2985 {
  vec4 _m0[1024];
}
_2985;

layout(set = 0, binding = 2, std430) restrict readonly buffer _2987_2989 {
  uvec4 _m0[];
}
_2989;

layout(set = 0, binding = 3, std430) restrict readonly buffer _2991_2993 {
  uvec4 _m0[];
}
_2993;

layout(push_constant, std430) uniform _2929_2932 {
  _2930 _m0;
}
_2932;

layout(set = 1, binding = 1, rgba16f) uniform writeonly image3D _2969;

uint _220;
uint _222;
uint _3001;

vec3 _204(vec3 _203) {
  vec3 _2625 = (_203 * 9.21035003662109375) - vec3(4.60517024993896484375);
  return max(vec3(0.0), exp(_2625) - vec3(0.00999999977648258209228515625));
}

vec3 _23(vec3 _21, mat3 _22) {
  return _21 * _22;
}

vec3 _30(vec3 _26, mat3 _27, mat3 _28, mat3 _29) {
  vec3 _242 = _26;
  mat3 _243 = _27;
  vec3 _245 = _23(_242, _243);
  mat3 _246 = _28;
  vec3 _248 = _23(_245, _246);
  mat3 _249 = _29;
  return _23(_248, _249);
}

vec3 _207(vec3 _206) {
  return _30(_206, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875)), mat3(vec3(1.04981100559234619140625, 0.0, -9.74845024757087230682373046875e-05), vec3(-0.49590301513671875, 1.37331306934356689453125, 0.09824003279209136962890625), vec3(3.9999999756901161163114011287689e-08, 0.0, 0.991252005100250244140625)));
}

float _37(float _34, float _35, float _36) {
  return max(_34, max(_35, _36));
}

float _42(float _39, float _40, float _41) {
  return min(_39, min(_40, _41));
}

float _64(vec3 _63) {
  float _358 = _63.x;
  float _362 = _63.y;
  float _366 = _63.z;
  float _357 = _37(_358, _362, _366);
  float _371 = _63.x;
  float _374 = _63.y;
  float _377 = _63.z;
  float _370 = _42(_371, _374, _377);
  return (max(_357, 1.0000000133514319600180897396058e-10) - max(_370, 1.0000000133514319600180897396058e-10)) / max(_357, 0.00999999977648258209228515625);
}

float _70(vec3 _69) {
  float _442 = 1.75;
  float _444 = _69.x;
  float _447 = _69.y;
  float _450 = _69.z;
  float _453 = sqrt(((_450 * (_450 - _447)) + (_447 * (_447 - _444))) + (_444 * (_444 - _450)));
  return (((_450 + _447) + _444) + (_442 * _453)) / 3.0;
}

float _134(float _133) {
  float _1343 = max(1.0 - abs(_133 / 2.0), 0.0);
  float _1349 = 1.0 + (sign(_133) * (1.0 - (_1343 * _1343)));
  return _1349 / 2.0;
}

float _127(float _124, float _125, float _126) {
  float _1179;
  if (_124 <= (0.666666686534881591796875 * _126)) {
    _1179 = _125;
  } else {
    if (_124 >= (2.0 * _126)) {
      _1179 = 0.0;
    } else {
      _1179 = _125 * ((_126 / _124) - 0.5);
    }
  }
  return _1179;
}

float _46(float _45) {
  float _270;
  if (_45 < 1.0) {
    _270 = _45;
  } else {
    _270 = 1.0 / _45;
  }
  float _267 = _270;
  float _278 = _267 * _267;
  float _282 = 0.087292902171611785888671875;
  _282 = (-0.3018949925899505615234375) + (_282 * _278);
  _282 = 1.0 + (_282 * _278);
  _282 *= _267;
  float _298;
  if (_45 < 1.0) {
    _298 = _282;
  } else {
    _298 = 1.57079637050628662109375 - _282;
  }
  return _298;
}

float _49(float _48) {
  float _312 = abs(_48);
  float _309 = _46(_312);
  float _316;
  if (_48 < 0.0) {
    _316 = -_309;
  } else {
    _316 = _309;
  }
  return _316;
}

float _54(float _52, float _53) {
  float _330 = _52 / _53;
  float _326 = _49(_330);
  SPIRV_CROSS_FLATTEN
  if (_53 < 0.0) {
    _326 += ((_52 >= 0.0) ? 3.1415927410125732421875 : (-3.1415927410125732421875));
  }
  return _326;
}

float _67(vec3 _66) {
  bool _397 = _66.x == _66.y;
  bool _405;
  if (_397) {
    _405 = _66.y == _66.z;
  } else {
    _405 = _397;
  }
  float _408;
  if (_405) {
    _408 = 0.0;
  } else {
    float _428 = 1.73205077648162841796875 * (_66.y - _66.z);
    float _429 = ((2.0 * _66.x) - _66.y) - _66.z;
    _408 = 57.295780181884765625 * _54(_428, _429);
  }
  if (_408 < 0.0) {
    _408 += 360.0;
  }
  return _408;
}

float _138(float _136, float _137) {
  float _1362 = _136 - _137;
  if (_1362 < (-180.0)) {
    _1362 += 360.0;
  } else {
    if (_1362 > 180.0) {
      _1362 -= 360.0;
    }
  }
  return _1362;
}

float _131(float _129, float _130) {
  float _1199[5] = float[]((-_130) / 2.0, (-_130) / 4.0, 0.0, _130 / 4.0, _130 / 2.0);
  float _1211 = 0.0;
  bool _1215 = _129 > _1199[0];
  bool _1222;
  if (_1215) {
    _1222 = _129 < _1199[4];
  } else {
    _1222 = _1215;
  }
  if (_1222) {
    float _1225 = ((_129 - _1199[0]) * 4.0) / _130;
    int _1233 = int(_1225);
    float _1236 = _1225 - float(_1233);
    float _1244[4] = float[]((_1236 * _1236) * _1236, _1236 * _1236, _1236, 1.0);
    if (_1233 == 3) {
      _1211 = (((_1244[0] * (-0.16666667163372039794921875)) + (_1244[1] * 0.5)) + (_1244[2] * (-0.5))) + (_1244[3] * 0.16666667163372039794921875);
    } else {
      if (_1233 == 2) {
        _1211 = (((_1244[0] * 0.5) + (_1244[1] * (-1.0))) + (_1244[2] * 0.0)) + (_1244[3] * 0.666666686534881591796875);
      } else {
        if (_1233 == 1) {
          _1211 = (((_1244[0] * (-0.5)) + (_1244[1] * 0.5)) + (_1244[2] * 0.5)) + (_1244[3] * 0.16666667163372039794921875);
        } else {
          if (_1233 == 0) {
            _1211 = (((_1244[0] * 0.16666667163372039794921875) + (_1244[1] * 0.0)) + (_1244[2] * 0.0)) + (_1244[3] * 0.0);
          } else {
            _1211 = 0.0;
          }
        }
      }
    }
  }
  return (_1211 * 3.0) / 2.0;
}

mat3 _105(float _103, vec3 _104) {
  mat3 _672;
  _672[0].x = ((1.0 - _103) * _104.x) + _103;
  _672[1].x = (1.0 - _103) * _104.x;
  _672[2].x = (1.0 - _103) * _104.x;
  _672[0].y = (1.0 - _103) * _104.y;
  _672[1].y = ((1.0 - _103) * _104.y) + _103;
  _672[2].y = (1.0 - _103) * _104.y;
  _672[0].z = (1.0 - _103) * _104.z;
  _672[1].z = (1.0 - _103) * _104.z;
  _672[2].z = ((1.0 - _103) * _104.z) + _103;
  return _672;
}

vec3 _198(vec3 _197) {
  vec3 _2488 = _197;
  float _2487 = _64(_2488);
  vec3 _2492 = _197;
  float _2491 = _70(_2492);
  float _2501 = (_2487 - 0.4000000059604644775390625) / 0.20000000298023223876953125;
  float _2495 = _134(_2501);
  float _2508 = _2491;
  float _2510 = 0.0500000007450580596923828125 * _2495;
  float _2511 = 0.07999999821186065673828125;
  float _2503 = 1.0 + _127(_2508, _2510, _2511);
  vec3 _2514 = _197 * _2503;
  vec3 _2519 = _2514;
  float _2518 = _67(_2519);
  float _2523 = _2518;
  float _2525 = 0.0;
  float _2522 = _138(_2523, _2525);
  float _2529 = _2522;
  float _2531 = 135.0;
  float _2527 = _131(_2529, _2531);
  _2514.x += (((_2527 * _2487) * (0.02999999932944774627685546875 - _2514.x)) * 0.180000007152557373046875);
  _2514 = max(_2514, vec3(0.0));
  vec3 _2563 = _2514;
  mat3 _2565 = mat3(vec3(1.45143926143646240234375, -0.236510753631591796875, -0.214928567409515380859375), vec3(-0.07655377686023712158203125, 1.1762297153472900390625, -0.0996759235858917236328125), vec3(0.0083161480724811553955078125, -0.0060324496589601039886474609375, 0.99771630764007568359375));
  vec3 _2549 = _23(_2563, _2565);
  _2549 = clamp(_2549, vec3(0.0), vec3(65504.0));
  float _2573 = 0.959999978542327880859375;
  vec3 _2574 = vec3(0.272228717803955078125, 0.674081742763519287109375, 0.053689517080783843994140625);
  mat3 _2571 = _105(_2573, _2574);
  vec3 _2576 = _2549;
  mat3 _2578 = _2571;
  _2549 = _23(_2576, _2578);
  return _2549;
}

float _57(float _56) {
  return log2(_56) / 3.3219280242919921875;
}

vec3 _18(mat3 _16, vec3 _17) {
  return _16 * _17;
}

float _60(float _59) {
  return pow(10.0, _59);
}

float _108(float _107) {
  _740 _742 = _740(float[](-4.0, -4.0, -3.1573765277862548828125, -0.485249996185302734375, 1.84773242473602294921875, 1.84773242473602294921875), float[](-0.718548238277435302734375, 2.0810306072235107421875, 3.66812419891357421875, 4.0, 4.0, 4.0), _113(5.4931642807787284255027770996094e-06, 9.9999997473787516355514526367188e-05), _113(0.180000007152557373046875, 4.80000019073486328125), _113(47185.921875, 10000.0), 0.0, 0.0);
  float _767 = max(_107, 6.1035199905745685100555419921875e-05);
  float _763 = _57(_767);
  float _770 = _742._m2._m0;
  float _777;
  if (_763 <= _57(_770)) {
    float _778 = _742._m2._m1;
    _777 = _57(_778);
  } else {
    float _784 = _742._m2._m0;
    bool _788 = _763 > _57(_784);
    bool _798;
    if (_788) {
      float _793 = _742._m3._m0;
      _798 = _763 < _57(_793);
    } else {
      _798 = _788;
    }
    if (_798) {
      float _803 = _742._m2._m0;
      float _809 = _742._m3._m0;
      float _813 = _742._m2._m0;
      float _801 = (3.0 * (_763 - _57(_803))) / (_57(_809) - _57(_813));
      int _820 = int(_801);
      float _823 = _801 - float(_820);
      vec3 _828 = vec3(_742._m0[_820], _742._m0[_820 + 1], _742._m0[_820 + 2]);
      vec3 _841 = vec3(_823 * _823, _823, 1.0);
      mat3 _854 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _855 = _828;
      _777 = dot(_841, _18(_854, _855));
    } else {
      float _861 = _742._m3._m0;
      bool _865 = _763 >= _57(_861);
      bool _875;
      if (_865) {
        float _870 = _742._m4._m0;
        _875 = _763 < _57(_870);
      } else {
        _875 = _865;
      }
      if (_875) {
        float _880 = _742._m3._m0;
        float _886 = _742._m4._m0;
        float _890 = _742._m3._m0;
        float _878 = (3.0 * (_763 - _57(_880))) / (_57(_886) - _57(_890));
        int _896 = int(_878);
        float _899 = _878 - float(_896);
        vec3 _904 = vec3(_742._m1[_896], _742._m1[_896 + 1], _742._m1[_896 + 2]);
        vec3 _917 = vec3(_899 * _899, _899, 1.0);
        mat3 _924 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _925 = _904;
        _777 = dot(_917, _18(_924, _925));
      } else {
        float _930 = _742._m4._m1;
        _777 = _57(_930);
      }
    }
  }
  float _934 = _777;
  return _60(_934);
}

vec3 _201(vec3 _200) {
  vec3 _2585 = _200;
  vec3 _2584 = _198(_2585);
  float _2589 = _2584.x;
  vec3 _2588;
  _2588.x = _108(_2589);
  float _2594 = _2584.y;
  _2588.y = _108(_2594);
  float _2599 = _2584.z;
  _2588.z = _108(_2599);
  vec3 _2618 = _2588;
  mat3 _2620 = mat3(vec3(0.695452213287353515625, 0.140678703784942626953125, 0.16386906802654266357421875), vec3(0.0447945632040500640869140625, 0.859671115875244140625, 0.095534317195415496826171875), vec3(-0.0055258828215301036834716796875, 0.0040252101607620716094970703125, 1.00150072574615478515625));
  vec3 _2604 = _23(_2618, _2620);
  return _2604;
}

_114 _116() {
  float _960 = 0.001988737843930721282958984375;
  float _964 = 0.180000007152557373046875;
  float _968 = 16.29174041748046875;
  _114 _939 = _114(float[](-1.69896996021270751953125, -1.69896996021270751953125, -1.477900028228759765625, -1.2290999889373779296875, -0.864799976348876953125, -0.448000013828277587890625, 0.0051799998618662357330322265625, 0.451108038425445556640625, 0.91137444972991943359375, 0.91137444972991943359375), float[](0.51543867588043212890625, 0.8470437526702880859375, 1.13580000400543212890625, 1.38020002841949462890625, 1.51970005035400390625, 1.5985000133514404296875, 1.64670002460479736328125, 1.67460918426513671875, 1.687873363494873046875, 1.687873363494873046875), _113(_108(_960), 0.0199999995529651641845703125), _113(_108(_964), 4.80000019073486328125), _113(_108(_968), 48.0), 0.0, 0.039999999105930328369140625);
  return _939;
}

float _122(float _120, _114 _121) {
  float _980 = max(_120, 6.1035199905745685100555419921875e-05);
  float _977 = _57(_980);
  float _983 = _121._m2._m0;
  float _990;
  if (_977 <= _57(_983)) {
    float _996 = _121._m2._m1;
    float _1002 = _121._m2._m0;
    _990 = (_977 * _121._m5) + (_57(_996) - (_121._m5 * _57(_1002)));
  } else {
    float _1011 = _121._m2._m0;
    bool _1015 = _977 > _57(_1011);
    bool _1024;
    if (_1015) {
      float _1019 = _121._m3._m0;
      _1024 = _977 < _57(_1019);
    } else {
      _1024 = _1015;
    }
    if (_1024) {
      float _1030 = _121._m2._m0;
      float _1036 = _121._m3._m0;
      float _1040 = _121._m2._m0;
      float _1027 = (7.0 * (_977 - _57(_1030))) / (_57(_1036) - _57(_1040));
      int _1046 = int(_1027);
      float _1049 = _1027 - float(_1046);
      vec3 _1054 = vec3(_121._m0[_1046], _121._m0[_1046 + 1], _121._m0[_1046 + 2]);
      vec3 _1067 = vec3(_1049 * _1049, _1049, 1.0);
      mat3 _1074 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _1075 = _1054;
      _990 = dot(_1067, _18(_1074, _1075));
    } else {
      float _1081 = _121._m3._m0;
      bool _1085 = _977 >= _57(_1081);
      bool _1094;
      if (_1085) {
        float _1089 = _121._m4._m0;
        _1094 = _977 < _57(_1089);
      } else {
        _1094 = _1085;
      }
      if (_1094) {
        float _1099 = _121._m3._m0;
        float _1105 = _121._m4._m0;
        float _1109 = _121._m3._m0;
        float _1097 = (7.0 * (_977 - _57(_1099))) / (_57(_1105) - _57(_1109));
        int _1115 = int(_1097);
        float _1118 = _1097 - float(_1115);
        vec3 _1123 = vec3(_121._m1[_1115], _121._m1[_1115 + 1], _121._m1[_1115 + 2]);
        vec3 _1136 = vec3(_1118 * _1118, _1118, 1.0);
        mat3 _1143 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _1144 = _1123;
        _990 = dot(_1136, _18(_1143, _1144));
      } else {
        float _1154 = _121._m4._m1;
        float _1160 = _121._m4._m0;
        _990 = (_977 * _121._m6) + (_57(_1154) - (_121._m6 * _57(_1160)));
      }
    }
  }
  float _1167 = _990;
  return _60(_1167);
}

float _81(float _78, float _79, float _80) {
  return (_78 - _80) / (_79 - _80);
}

vec3 _87(vec3 _84, float _85, float _86) {
  float _555 = _84.x;
  float _558 = _85;
  float _560 = _86;
  float _563 = _84.y;
  float _566 = _85;
  float _568 = _86;
  float _571 = _84.z;
  float _574 = _85;
  float _576 = _86;
  return vec3(_81(_555, _558, _560), _81(_563, _566, _568), _81(_571, _574, _576));
}

vec3 _73(vec3 _72) {
  float _485 = (_72.x + _72.y) + _72.z;
  if (_485 == 0.0) {
    _485 = 1.0000000133514319600180897396058e-10;
  }
  vec3 _498;
  _498.x = _72.x / _485;
  _498.y = _72.y / _485;
  _498.z = _72.y;
  return _498;
}

vec3 _76(vec3 _75) {
  vec3 _515;
  _515.x = (_75.x * _75.z) / max(_75.y, 1.0000000133514319600180897396058e-10);
  _515.y = _75.z;
  _515.z = (((1.0 - _75.x) - _75.y) * _75.z) / max(_75.y, 1.0000000133514319600180897396058e-10);
  return _515;
}

vec3 _100(vec3 _99) {
  vec3 _632 = _99;
  mat3 _634 = mat3(vec3(0.662454187870025634765625, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.674081742763519287109375, 0.053689517080783843994140625), vec3(-0.0055746496655046939849853515625, 0.0040607335977256298065185546875, 1.01033914089202880859375));
  vec3 _618 = _23(_632, _634);
  vec3 _637 = _618;
  vec3 _636 = _73(_637);
  _636.z = clamp(_636.z, 0.0, 65504.0);
  _636.z = pow(_636.z, 0.981100022792816162109375);
  vec3 _650 = _636;
  _618 = _76(_650);
  vec3 _666 = _618;
  mat3 _668 = mat3(vec3(1.6410233974456787109375, -0.324803292751312255859375, -0.23642469942569732666015625), vec3(-0.663662850856781005859375, 1.6153316497802734375, 0.016756348311901092529296875), vec3(0.01172189414501190185546875, -0.008284442126750946044921875, 0.98839485645294189453125));
  return _23(_666, _668);
}

vec3 _11(vec3 _10) {
  return clamp(_10, vec3(0.0), vec3(1.0));
}

float _147(float _145[2][2], float _146) {
  if (_146 < _145[0][0]) {
    return _145[0][1];
  }
  if (_146 >= _145[1][0]) {
    return _145[1][1];
  }
  int _1402 = 0;
  int _1403 = 1;
  while (_1402 < (_1403 - 1)) {
    int _1413 = (_1402 + _1403) / 2;
    if (_145[_1413][0] == _146) {
      return _145[_1413][1];
    } else {
      if (_145[_1413][0] < _146) {
        _1402 = _1413;
      } else {
        _1403 = _1413;
      }
    }
  }
  float _1440 = (_146 - _145[_1402][0]) / (_145[_1402 + 1][0] - _145[_1402][0]);
  float _1455 = 1.0 - _1440;
  return (_1455 * _145[_1402][1]) + (_1440 * _145[_1402 + 1][1]);
}

float _150(float _149) {
  float _1473 = 9.9999997473787516355514526367188e-05;
  float _1477 = 0.0199999995529651641845703125;
  float _1472[2][2] = float[][](float[](_57(_1473), -15.0), float[](_57(_1477), -6.5));
  float _1482 = _149;
  float _1485[2][2] = _1472;
  float _1487 = _57(_1482);
  return 0.180000007152557373046875 * pow(2.0, _147(_1485, _1487));
}

float _153(float _152) {
  float _1494 = 48.0;
  float _1498 = 10000.0;
  float _1493[2][2] = float[][](float[](_57(_1494), 6.5), float[](_57(_1498), 18.0));
  float _1503 = _152;
  float _1506[2][2] = _1493;
  float _1508 = _57(_1503);
  return 0.180000007152557373046875 * pow(2.0, _147(_1506, _1508));
}

_159 _163(_155 _161, _155 _162) {
  float _1515 = _162._m0;
  float _1519 = _161._m0;
  float _1514 = (_57(_1515) - _57(_1519)) / 3.0;
  float _1529 = _161._m0;
  float _1537 = _161._m1;
  float _1543 = _161._m0;
  _159 _1526;
  _1526._m0[0] = (_161._m2 * (_57(_1529) - (0.5 * _1514))) + (_57(_1537) - (_161._m2 * _57(_1543)));
  float _1553 = _161._m0;
  float _1561 = _161._m1;
  float _1567 = _161._m0;
  _1526._m0[1] = (_161._m2 * (_57(_1553) + (0.5 * _1514))) + (_57(_1561) - (_161._m2 * _57(_1567)));
  float _1577 = _162._m0;
  float _1585 = _162._m1;
  float _1591 = _162._m0;
  _1526._m0[3] = (_162._m2 * (_57(_1577) - (0.5 * _1514))) + (_57(_1585) - (_162._m2 * _57(_1591)));
  float _1601 = _162._m0;
  float _1609 = _162._m1;
  float _1615 = _162._m0;
  _1526._m0[4] = (_162._m2 * (_57(_1601) + (0.5 * _1514))) + (_57(_1609) - (_162._m2 * _57(_1615)));
  float _1633[2][2] = _1627;
  float _1635 = log2(_161._m0 / 0.180000007152557373046875);
  float _1628 = _147(_1633, _1635);
  float _1637 = _161._m1;
  float _1642 = _162._m1;
  float _1646 = _161._m1;
  _1526._m0[2] = _57(_1637) + (_1628 * (_57(_1642) - _57(_1646)));
  return _1526;
}

_159 _167(_155 _165, _155 _166) {
  float _1658 = _166._m0;
  float _1662 = _165._m0;
  float _1657 = (_57(_1658) - _57(_1662)) / 3.0;
  float _1671 = _165._m0;
  float _1679 = _165._m1;
  float _1685 = _165._m0;
  _159 _1668;
  _1668._m0[0] = (_165._m2 * (_57(_1671) - (0.5 * _1657))) + (_57(_1679) - (_165._m2 * _57(_1685)));
  float _1695 = _165._m0;
  float _1703 = _165._m1;
  float _1709 = _165._m0;
  _1668._m0[1] = (_165._m2 * (_57(_1695) + (0.5 * _1657))) + (_57(_1703) - (_165._m2 * _57(_1709)));
  float _1719 = _166._m0;
  float _1727 = _166._m1;
  float _1733 = _166._m0;
  _1668._m0[3] = (_166._m2 * (_57(_1719) - (0.5 * _1657))) + (_57(_1727) - (_166._m2 * _57(_1733)));
  float _1743 = _166._m0;
  float _1751 = _166._m1;
  float _1757 = _166._m0;
  _1668._m0[4] = (_166._m2 * (_57(_1743) + (0.5 * _1657))) + (_57(_1751) - (_166._m2 * _57(_1757)));
  float _1776[2][2] = _1770;
  float _1778 = log2(_166._m0 / 0.180000007152557373046875);
  float _1771 = _147(_1776, _1778);
  float _1780 = _165._m1;
  float _1785 = _166._m1;
  float _1789 = _165._m1;
  _1668._m0[2] = _57(_1780) + (_1771 * (_57(_1785) - _57(_1789)));
  return _1668;
}

float _171(float _169, float _170) {
  return pow(2.0, log2(_169) - _170);
}

_175 _180(float _177, float _178, float _179) {
  float _1808 = _177;
  _155 _1807 = _155(_150(_1808), _177, 0.0);
  _155 _1813 = _155(0.180000007152557373046875, 4.80000019073486328125, 1.5499999523162841796875);
  float _1817 = _178;
  _155 _1816 = _155(_153(_1817), _178, 0.0);
  _155 _1823 = _1807;
  _155 _1825 = _1813;
  _159 _1822 = _163(_1823, _1825);
  _155 _1829 = _1813;
  _155 _1831 = _1816;
  _159 _1828 = _167(_1829, _1831);
  float _1834 = _177;
  float _1837 = _150(_1834);
  float _1838 = _179;
  _1807._m0 = _171(_1837, _1838);
  float _1842 = 0.180000007152557373046875;
  float _1843 = _179;
  _1813._m0 = _171(_1842, _1843);
  float _1847 = _178;
  float _1850 = _153(_1847);
  float _1851 = _179;
  _1816._m0 = _171(_1850, _1851);
  _175 _1855 = _175(_155(_1807._m0, _1807._m1, _1807._m2), _155(_1813._m0, _1813._m1, _1813._m2), _155(_1816._m0, _1816._m1, _1816._m2), float[](_1822._m0[0], _1822._m0[1], _1822._m0[2], _1822._m0[3], _1822._m0[4], _1822._m0[4]), float[](_1828._m0[0], _1828._m0[1], _1828._m0[2], _1828._m0[3], _1828._m0[4], _1828._m0[4]));
  return _1855;
}

float _195(float _193, _175 _194) {
  float _2125 = _194._m1._m0;
  float _2129 = _194._m0._m0;
  float _2124 = (_57(_2125) - _57(_2129)) / 3.0;
  float _2136 = _194._m2._m0;
  float _2140 = _194._m1._m0;
  float _2135 = (_57(_2136) - _57(_2140)) / 3.0;
  float _2154[4];
  for (int _2146 = 0; _2146 < 4; _2146++) {
    _2154[_2146] = (_194._m3[_2146] + _194._m3[_2146 + 1]) / 2.0;
  }
  float _2176[4];
  for (int _2168 = 0; _2168 < 4; _2168++) {
    _2176[_2168] = (_194._m4[_2168] + _194._m4[_2168 + 1]) / 2.0;
  }
  float _2193 = max(_193, 1.0000000133514319600180897396058e-10);
  float _2190 = _57(_2193);
  float _2196 = _194._m0._m1;
  float _2203;
  if (_2190 <= _57(_2196)) {
    float _2204 = _194._m0._m0;
    _2203 = _57(_2204);
  } else {
    float _2210 = _194._m0._m1;
    bool _2214 = _2190 > _57(_2210);
    bool _2223;
    if (_2214) {
      float _2218 = _194._m1._m1;
      _2223 = _2190 <= _57(_2218);
    } else {
      _2223 = _2214;
    }
    if (_2223) {
      bool _2229 = _2190 > _2154[0];
      bool _2236;
      if (_2229) {
        _2236 = _2190 <= _2154[1];
      } else {
        _2236 = _2229;
      }
      vec3 _2239;
      uint _2250;
      if (_2236) {
        _2239.x = _194._m3[0];
        _2239.y = _194._m3[1];
        _2239.z = _194._m3[2];
        _2250 = 0u;
      } else {
        bool _2255 = _2190 > _2154[1];
        bool _2262;
        if (_2255) {
          _2262 = _2190 <= _2154[2];
        } else {
          _2262 = _2255;
        }
        if (_2262) {
          _2239.x = _194._m3[1];
          _2239.y = _194._m3[2];
          _2239.z = _194._m3[3];
          _2250 = 1u;
        } else {
          bool _2278 = _2190 > _2154[2];
          bool _2285;
          if (_2278) {
            _2285 = _2190 <= _2154[3];
          } else {
            _2285 = _2278;
          }
          if (_2285) {
            _2239.x = _194._m3[2];
            _2239.y = _194._m3[3];
            _2239.z = _194._m3[4];
            _2250 = 2u;
          }
        }
      }
      mat3 _2298 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _2299 = _2239;
      vec3 _2297 = _18(_2298, _2299);
      float _2302 = _2297.x;
      float _2305 = _2297.y;
      float _2308 = _2297.z;
      _2308 -= _2190;
      float _2314 = sqrt((_2305 * _2305) - ((4.0 * _2302) * _2308));
      float _2324 = (2.0 * _2308) / ((-_2314) - _2305);
      float _2332 = _194._m0._m0;
      _2203 = _57(_2332) + ((_2324 + float(_2250)) * _2124);
    } else {
      float _2345 = _194._m1._m1;
      bool _2349 = _2190 > _57(_2345);
      bool _2358;
      if (_2349) {
        float _2353 = _194._m2._m1;
        _2358 = _2190 < _57(_2353);
      } else {
        _2358 = _2349;
      }
      if (_2358) {
        bool _2364 = _2190 >= _2176[0];
        bool _2371;
        if (_2364) {
          _2371 = _2190 <= _2176[1];
        } else {
          _2371 = _2364;
        }
        vec3 _2374;
        uint _2384;
        if (_2371) {
          _2374.x = _194._m4[0];
          _2374.y = _194._m4[1];
          _2374.z = _194._m4[2];
          _2384 = 0u;
        } else {
          bool _2389 = _2190 > _2176[1];
          bool _2396;
          if (_2389) {
            _2396 = _2190 <= _2176[2];
          } else {
            _2396 = _2389;
          }
          if (_2396) {
            _2374.x = _194._m4[1];
            _2374.y = _194._m4[2];
            _2374.z = _194._m4[3];
            _2384 = 1u;
          } else {
            bool _2412 = _2190 > _2176[2];
            bool _2419;
            if (_2412) {
              _2419 = _2190 <= _2176[3];
            } else {
              _2419 = _2412;
            }
            if (_2419) {
              _2374.x = _194._m4[2];
              _2374.y = _194._m4[3];
              _2374.z = _194._m4[4];
              _2384 = 2u;
            }
          }
        }
        mat3 _2432 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _2433 = _2374;
        vec3 _2431 = _18(_2432, _2433);
        float _2436 = _2431.x;
        float _2439 = _2431.y;
        float _2442 = _2431.z;
        _2442 -= _2190;
        float _2448 = sqrt((_2439 * _2439) - ((4.0 * _2436) * _2442));
        float _2458 = (2.0 * _2442) / ((-_2448) - _2439);
        float _2466 = _194._m1._m0;
        _2203 = _57(_2466) + ((_2458 + float(_2384)) * _2135);
      } else {
        float _2478 = _194._m2._m0;
        _2203 = _57(_2478);
      }
    }
  }
  float _2482 = _2203;
  return _60(_2482);
}

float _186(float _184, _175 _185) {
  float _1910 = max(_184, 6.1035199905745685100555419921875e-05);
  float _1907 = _57(_1910);
  float _1913 = _185._m0._m0;
  float _1920;
  if (_1907 <= _57(_1913)) {
    float _1925 = _185._m0._m1;
    float _1931 = _185._m0._m0;
    _1920 = (_1907 * _185._m0._m2) + (_57(_1925) - (_185._m0._m2 * _57(_1931)));
  } else {
    float _1940 = _185._m0._m0;
    bool _1944 = _1907 > _57(_1940);
    bool _1953;
    if (_1944) {
      float _1948 = _185._m1._m0;
      _1953 = _1907 < _57(_1948);
    } else {
      _1953 = _1944;
    }
    if (_1953) {
      float _1958 = _185._m0._m0;
      float _1964 = _185._m1._m0;
      float _1968 = _185._m0._m0;
      float _1956 = (3.0 * (_1907 - _57(_1958))) / (_57(_1964) - _57(_1968));
      int _1974 = int(_1956);
      float _1977 = _1956 - float(_1974);
      vec3 _1982 = vec3(_185._m3[_1974], _185._m3[_1974 + 1], _185._m3[_1974 + 2]);
      vec3 _1995 = vec3(_1977 * _1977, _1977, 1.0);
      mat3 _2002 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _2003 = _1982;
      _1920 = dot(_1995, _18(_2002, _2003));
    } else {
      float _2009 = _185._m1._m0;
      bool _2013 = _1907 >= _57(_2009);
      bool _2022;
      if (_2013) {
        float _2017 = _185._m2._m0;
        _2022 = _1907 < _57(_2017);
      } else {
        _2022 = _2013;
      }
      if (_2022) {
        float _2027 = _185._m1._m0;
        float _2033 = _185._m2._m0;
        float _2037 = _185._m1._m0;
        float _2025 = (3.0 * (_1907 - _57(_2027))) / (_57(_2033) - _57(_2037));
        int _2043 = int(_2025);
        float _2046 = _2025 - float(_2043);
        vec3 _2051 = vec3(_185._m4[_2043], _185._m4[_2043 + 1], _185._m4[_2043 + 2]);
        vec3 _2064 = vec3(_2046 * _2046, _2046, 1.0);
        mat3 _2071 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _2072 = _2051;
        _1920 = dot(_2064, _18(_2071, _2072));
      } else {
        float _2081 = _185._m2._m1;
        float _2087 = _185._m2._m0;
        _1920 = (_1907 * _185._m2._m2) + (_57(_2081) - (_185._m2._m2 * _57(_2087)));
      }
    }
  }
  float _2094 = _1920;
  return _60(_2094);
}

vec3 _191(vec3 _189, _175 _190) {
  float _2100 = _189.x;
  _175 _2103 = _190;
  vec3 _2099;
  _2099.x = _186(_2100, _2103);
  float _2107 = _189.y;
  _175 _2110 = _190;
  _2099.y = _186(_2107, _2110);
  float _2114 = _189.z;
  _175 _2117 = _190;
  _2099.z = _186(_2114, _2117);
  return _2099;
}

float _92(float _89, float _90, float _91) {
  return (_89 * (_90 - _91)) + _91;
}

vec3 _97(vec3 _94, float _95, float _96) {
  float _591 = _94.x;
  float _594 = _95;
  float _596 = _96;
  float _599 = _94.y;
  float _602 = _95;
  float _604 = _96;
  float _607 = _94.z;
  float _610 = _95;
  float _612 = _96;
  return vec3(_92(_591, _594, _596), _92(_599, _602, _604), _92(_607, _610, _612));
}

vec3 _217(vec3 _214, bool _215, _211 _216, float paper_white) {
  vec3 _2682 = _214;  // untonemapped
  vec3 _2681 = _207(_2682);
  vec3 _2685 = vec3(0.0);
  float _2686 = 0.0;
  float _2687 = 0.0;
  vec3 _2688 = vec3(0.0);
  if (_215 == false) {
    vec3 _2695 = _2681;
    vec3 _2694 = _201(_2695);
    vec3 _2699 = _2694;
    mat3 _2701 = mat3(vec3(1.45143926143646240234375, -0.236510753631591796875, -0.214928567409515380859375), vec3(-0.07655377686023712158203125, 1.1762297153472900390625, -0.0996759235858917236328125), vec3(0.0083161480724811553955078125, -0.0060324496589601039886474609375, 0.99771630764007568359375));
    vec3 _2698 = _23(_2699, _2701);
    _2686 = 0.0199999995529651641845703125;
    _2687 = 48.0;
    float _2704 = _2698.x;
    _114 _2707 = _116();
    _2685.x = _122(_2704, _2707);
    float _2711 = _2698.y;
    _114 _2714 = _116();
    _2685.y = _122(_2711, _2714);
    float _2718 = _2698.z;
    _114 _2721 = _116();
    _2685.z = _122(_2718, _2721);
    vec3 _2724 = _2685;
    float _2726 = _2687;
    float _2728 = _2686;
    _2688 = _87(_2724, _2726, _2728);
    vec3 _2731 = _2688;
    _2688 = _100(_2731);
    float _2736 = 0.930000007152557373046875;
    vec3 _2737 = vec3(0.272228717803955078125, 0.674081742763519287109375, 0.053689517080783843994140625);
    mat3 _2734 = _105(_2736, _2737);
    vec3 _2739 = _2688;
    mat3 _2741 = _2734;
    _2688 = _23(_2739, _2741);
    vec3 _2745 = _2688;
    mat3 _2747 = mat3(vec3(0.662454187870025634765625, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.674081742763519287109375, 0.053689517080783843994140625), vec3(-0.0055746496655046939849853515625, 0.0040607335977256298065185546875, 1.01033914089202880859375));
    vec3 _2744 = _23(_2745, _2747);
    vec3 _2762 = _2744;
    mat3 _2764 = mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125));
    _2688 = _23(_2762, _2764);
    vec3 _2779 = _2688;
    mat3 _2781 = mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875));
    _2688 = _23(_2779, _2781);
    vec3 _2783 = _2688;
    _2688 = _11(_2783);
  } else {
    // fix paper white
    float _2787;
#if 0
        _2787 = 10.f;  // brightness
        const float mid_gray_ratio = _220._m2 / 10.f;
#else
    _2787 = _216._m2;  // brightness
    const float mid_gray_ratio = 1.f;
#endif

    // float _2787 = _216._m2;
    _2686 = max(9.9999997473787516355514526367188e-05, _216._m0) / mid_gray_ratio;  // min nits
    _2687 = _216._m1 / mid_gray_ratio;                                              // max nits

    float _2796 = _2686;
    float _2798 = _2687;
    float _2800 = 0.0;
    _175 _2795 = _180(_2796, _2798, _2800);
    float _2803 = _2787;
    _175 _2805 = _2795;
    float _2802 = log2(_195(_2803, _2805)) - (-2.4739310741424560546875);
    float _2812 = _2686;
    float _2814 = _2687;
    float _2816 = _2802;
    _175 _2811 = _180(_2812, _2814, _2816);
    vec3 _2820 = _2681;
    vec3 _2819 = _198(_2820);
    vec3 _2823 = _2819;
    _175 _2825 = _2811;
    _2685 = _191(_2823, _2825);
    vec3 _2828 = _2685;
    float _2830 = _2687;
    float _2832 = _2686;
    _2688 = _87(_2828, _2830, _2832);
    vec3 _2836 = _2688;
    mat3 _2838 = mat3(vec3(0.662454187870025634765625, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.674081742763519287109375, 0.053689517080783843994140625), vec3(-0.0055746496655046939849853515625, 0.0040607335977256298065185546875, 1.01033914089202880859375));
    vec3 _2835 = _23(_2836, _2838);
    vec3 _2840 = _2835;
    mat3 _2842 = mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125));
    _2688 = _23(_2840, _2842);
    vec3 _2857 = _2688;
    mat3 _2859 = mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875));
    _2688 = _23(_2857, _2859);
    _2688 = max(vec3(0.0), _2688);
    vec3 _2863 = _2688;

    float _2865 = _2687;
    float _2867 = _2686;
    _2688 = max(vec3(0.0), _97(_2863, _2865, _2867));
  }
  return _2688;
}

void main() {
  _220 = 2147483648u;
  _222 = 1073741824u;
  ivec3 _2876 = ivec3(gl_GlobalInvocationID);
  int _2882 = int(_2887._m44);
  bool _2896 = _2876.x >= _2882;
  bool _2904;
  if (!_2896) {
    _2904 = _2876.y >= _2882;
  } else {
    _2904 = _2896;
  }
  bool _2912;
  if (!_2904) {
    _2912 = _2876.z >= _2882;
  } else {
    _2912 = _2904;
  }
  SPIRV_CROSS_BRANCH
  if (_2912) {
    return;
  }
  vec3 _2916 = vec3(_2876) / vec3(_2887._m44 - 1.0);
  vec3 _2924 = _2916;
  _2916 = _204(_2924);
  uint _2927 = _2932._m0._m1;
  _211 _2939;
  _2939._m0 = _2932._m0._m2;  // min nits
  _2939._m1 = _2887._m45;     // max nits
  _2939._m2 = _2932._m0._m3;  // mid point slider

  float paper_white = _2932._m0._m3 * 10.0;

  bool _2955 = (_2927 & 1u) != 0u;
  bool useHDR = _2955;  // true = HDR, false = SDR

  vec3 _2960 = _2916;
  bool _2962 = _2955;
  _211 _2964 = _2939;
  // vec3 _2959 = _217(_2960, _2962, _2964);

  // CUSTOM
  uint GAMMA_CORRECTION_TYPE = 1u;  // 0 - sRGB -> 2.2 Correction, 1 - ACES minimum nits
  bool USE_SHORTFUSE_ACES = true;
  bool USE_PER_CHANNEL_CORRECTION = true;

  vec3 _2959;
  if (!USE_SHORTFUSE_ACES || !useHDR) {
    _2959 = _217(_2960, useHDR, _2964, paper_white);
  } else {
    const float ACES_MIN = 0.0001f;
    const float ACES_EXPOSURE = 48.f;
    float aces_min = ACES_MIN / paper_white;
    float aces_max = (_2939._m1 / paper_white);

    if (GAMMA_CORRECTION_TYPE == 0u) {
      aces_max = CorrectGammaMismatch(aces_max, true);
      aces_min = CorrectGammaMismatch(aces_min, true);
    } else {
      aces_min /= 5.f;
    }

    // Apply ACES ToneMap
    vec3 untonemapped_ap0 = BT709_TO_AP0_MAT * _2960;
    vec3 untonemapped_graded_ap1 = max(vec3(0.0), RRT(untonemapped_ap0));  // do max(0, ) just in case for the by luminance tonemap

    vec3 tonemapped_ap1;
    if (USE_PER_CHANNEL_CORRECTION) {
      float y_in = dot(untonemapped_graded_ap1, vec3(0.2722287168, 0.6740817658, 0.0536895174));
      vec4 tonemapped_ap1_combined = max(vec4(0.0), ODT(vec4(untonemapped_graded_ap1, y_in), aces_min * ACES_EXPOSURE, aces_max * ACES_EXPOSURE, mat3(1.0)) / ACES_EXPOSURE);
      tonemapped_ap1 = tonemapped_ap1_combined.rgb;
      float y_out = tonemapped_ap1_combined.a;

      // ODT by luminance
      vec3 luminance_tonemapped_ap1 = untonemapped_graded_ap1 * (y_out / y_in);

      // luminance_tonemapped_ap1 = SaturationBlowoutAP1(luminance_tonemapped_ap1, y_in, 9.0, 0.975f);
      luminance_tonemapped_ap1 = SaturationBlowoutAP1ICtCp(luminance_tonemapped_ap1, y_in, 9.25, 0.975f);
      //   luminance_tonemapped_ap1 = ChrominanceICtCp(luminance_tonemapped_ap1, tonemapped_ap1, 1.f);
      //   luminance_tonemapped_ap1 = ChrominanceOKLab(luminance_tonemapped_ap1, tonemapped_ap1, 1.f);

      // blend it in only on shadows / mid-tones
      float tonemapped_lum = dot(luminance_tonemapped_ap1, vec3(0.2722287168, 0.6740817658, 0.0536895174));
      tonemapped_ap1 = mix(luminance_tonemapped_ap1, tonemapped_ap1, clamp(tonemapped_lum / 0.6, 0.0, 1.0));

      //   tonemapped_ap1 = luminance_tonemapped_ap1;
    } else {
      tonemapped_ap1 = max(vec3(0.0), ODT(untonemapped_graded_ap1, aces_min * ACES_EXPOSURE, aces_max * ACES_EXPOSURE, mat3(1.0)) / ACES_EXPOSURE);
    }

    vec3 tonemapped_bt709 = AP1_TO_BT709_MAT * tonemapped_ap1;

    if (GAMMA_CORRECTION_TYPE == 0u) {
      tonemapped_bt709 = CorrectGammaMismatch(tonemapped_bt709, false);
    }

    vec3 tonemapped_bt2020 = BT709_TO_BT2020_MAT * tonemapped_bt709;
    tonemapped_bt2020 *= paper_white;
    _2959 = tonemapped_bt2020;
  }
  // END CUSTOM

  imageStore(_2969, ivec3(_2876), vec4(_2959, 1.0));
}
