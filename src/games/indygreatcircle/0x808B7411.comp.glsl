// Final
#version 450
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#if defined(GL_EXT_control_flow_attributes)
#extension GL_EXT_control_flow_attributes : require
#define SPIRV_CROSS_FLATTEN [[flatten]]
#define SPIRV_CROSS_BRANCH [[dont_flatten]]
#define SPIRV_CROSS_UNROLL [[unroll]]
#define SPIRV_CROSS_LOOP [[dont_unroll]]
#else
#define SPIRV_CROSS_FLATTEN
#define SPIRV_CROSS_BRANCH
#define SPIRV_CROSS_UNROLL
#define SPIRV_CROSS_LOOP
#endif
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// START INCLUDES

// --- sRGB ENCODING ---
float EncodeSRGB(float x) {
  return mix(
      x * 12.92,
      1.055 * pow(x, 1.0 / 2.4) - 0.055,
      step(0.0031308, x)
      );
}

vec3 EncodeSRGB(vec3 x) {
  return mix(
      x * 12.92,
      1.055 * pow(x, vec3(1.0 / 2.4)) - 0.055,
      step(vec3(0.0031308), x)
      );
}

// --- sRGB DECODING ---
float DecodeSRGB(float x) {
  return mix(
      x / 12.92,
      pow((x + 0.055) / 1.055, 2.4),
      step(0.04045, x)
      );
}

vec3 DecodeSRGB(vec3 x) {
  return mix(
      x / 12.92,
      pow((x + 0.055) / 1.055, vec3(2.4)),
      step(vec3(0.04045), x)
      );
}

// --- GAMMA ENCODING ---
float EncodeGamma(float x, float gamma) {
  return pow(x, 1.0 / gamma);
}

vec3 EncodeGamma(vec3 x, float gamma) {
  return pow(x, vec3(1.0 / gamma));
}

// --- GAMMA DECODING ---
float DecodeGamma(float x, float gamma) {
  return pow(x, gamma);
}

vec3 DecodeGamma(vec3 x, float gamma) {
  return pow(x, vec3(gamma));
}

// Fix or undo gamma mismatch by converting between sRGB and gamma 2.2
float CorrectGammaMismatch(float x, bool inverse) {
  return inverse
             ? DecodeSRGB(EncodeGamma(x, 2.2))   // undo fix
             : DecodeGamma(EncodeSRGB(x), 2.2);  // apply fix
}

vec3 CorrectGammaMismatch(vec3 x, bool inverse) {
  vec3 s = sign(x);
  vec3 a = abs(x);

  vec3 result = inverse
                    ? DecodeSRGB(EncodeGamma(a, 2.2))
                    : DecodeGamma(EncodeSRGB(a), 2.2);

  return s * result;
}

struct _2280
{
    float _m0;
    float _m1;
};

struct _2281
{
    float _m0[6];
    float _m1[6];
    _2280 _m2;
    _2280 _m3;
    _2280 _m4;
    float _m5;
    float _m6;
};

layout(buffer_reference) buffer _385;
layout(buffer_reference, buffer_reference_align = 16, std430) buffer _385
{
    uvec4 _m0;
    vec4 _m1;
    vec4 _m2;
    vec4 _m3;
    vec4 _m4;
    vec4 _m5;
    vec4 _m6;
    vec4 _m7;
    vec4 _m8;
    uint _m9;
    float _m10;
    float _m11;
    float _m12;
    float _m13;
    float _m14;
    float _m15;
    float _m16;
    float _m17;
    uint _m18;
};

layout(set = 0, binding = 0, std140) uniform _696_698
{
    uvec4 _m0;
    vec4 _m1;
    vec4 _m2;
    vec4 _m3;
    vec4 _m4;
    vec4 _m5;
    vec4 _m6;
    vec4 _m7;
    vec4 _m8;
    vec4 _m9;
    vec4 _m10;
    float _m11;
    float _m12;
    float _m13;
    float _m14;
    float _m15;
    float _m16;
    float _m17;
    float _m18;
    float _m19;
    float _m20;
    float _m21;
    float _m22;
    float _m23;
    float _m24;
    float _m25;
    float _m26;
    float _m27;
    float _m28;
    float _m29;
    float _m30;
    float _m31;
    float _m32;
    float _m33;
    float _m34;
    float _m35;
    float _m36;
    float _m37;
    float _m38;
    float _m39;
    uint _m40;
    uint _m41;
    uint _m42;
    float _m43;
    uint _m44;
    uint _m45;
    uint _m46;
    int _m47;
    float _m48;
    uint _m49;
} _698;

layout(set = 0, binding = 1, std140) uniform _2182_2184
{
    vec4 _m0[1024];
} _2184;

layout(set = 0, binding = 2, std430) restrict readonly buffer _2186_2188
{
    uvec4 _m0[];
} _2188;

layout(set = 0, binding = 3, std430) restrict readonly buffer _2190_2192
{
    uvec4 _m0[];
} _2192;

layout(push_constant, std430) uniform _382_387
{
    _385 _m0;
} _387;

layout(set = 1, binding = 1) uniform texture2D _438;    // main tex
layout(set = 0, binding = 6) uniform sampler _442;      // point sampler
layout(set = 0, binding = 7) uniform sampler _581;      // linear sampler
layout(set = 1, binding = 2) uniform texture2D _1093;   // UI Texture
layout(set = 0, binding = 8) uniform sampler _1095;     // UI Sampler
layout(set = 0, binding = 9) uniform texture2D _1216;   // film grain texture
layout(set = 0, binding = 4) uniform sampler _1218;     // grain sampler 
layout(set = 1, binding = 3, rgba8) uniform writeonly image2D _1476;
layout(set = 1, binding = 4, rgb10_a2) uniform writeonly image2D _2136;
layout(set = 1, binding = 5, r11f_g11f_b10f) uniform writeonly image2D _2151;
layout(set = 2, binding = 0) uniform texture2D _2171[];
layout(set = 2, binding = 1) uniform textureCube _2175[1];
layout(set = 2, binding = 2) uniform texture3D _2179[1];
layout(set = 0, binding = 5) uniform texture2D _2193;

uint _101;
uint _103;
uint _2200;

float _71(float _70)
{
    return 0.16666667163372039794921875 * ((_70 * ((_70 * ((-_70) + 3.0)) - 3.0)) + 1.0);
}

float _74(float _73)
{
    return 0.16666667163372039794921875 * (((_73 * _73) * ((3.0 * _73) - 6.0)) + 4.0);
}

float _83(float _82)
{
    float _284 = _82;
    float _287 = _82;
    return _71(_284) + _74(_287);
}

float _77(float _76)
{
    return 0.16666667163372039794921875 * ((_76 * ((_76 * (((-3.0) * _76) + 3.0)) + 3.0)) + 1.0);
}

float _80(float _79)
{
    return 0.16666667163372039794921875 * ((_79 * _79) * _79);
}

float _86(float _85)
{
    float _293 = _85;
    float _296 = _85;
    return _77(_293) + _80(_296);
}

float _89(float _88)
{
    float _303 = _88;
    float _306 = _88;
    float _309 = _88;
    return (-1.0) + (_74(_303) / (_71(_306) + _74(_309)));
}

float _92(float _91)
{
    float _317 = _91;
    float _320 = _91;
    float _323 = _91;
    return 1.0 + (_80(_317) / (_77(_320) + _80(_323)));
}

vec2 _16(vec2 _15)
{
    return clamp(_15, vec2(0.0), vec2(1.0));
}

uint _27(float _26)
{
    return floatBitsToUint(_26);
}

vec3 _51(vec3 _49, mat3 _50)
{
    return _49 * _50;
}

vec3 _64(vec3 _60, mat3 _61, mat3 _62, mat3 _63)
{
    vec3 _217 = _60;
    mat3 _218 = _61;
    vec3 _220 = _51(_217, _218);
    mat3 _221 = _62;
    vec3 _223 = _51(_220, _221);
    mat3 _224 = _63;
    return _51(_223, _224);
}

vec3 _22(vec3 _21)
{
    return clamp(_21, vec3(0.0), vec3(1.0));
}

// sRGB decode
float _30(float _29)
{
    float _131;
    if (_29 <= 0.040449999272823333740234375)
    {
        _131 = _29 / 12.9200000762939453125;
    }
    else
    {
        _131 = pow((_29 / 1.05499994754791259765625) + 0.0521326996386051177978515625, 2.400000095367431640625);
    }
    return _131;
}

vec3 _33(vec3 _32)
{
    float _148 = _32.x;
    float _153 = _32.y;
    float _158 = _32.z;

    vec3 gamma_color = _32.rgb;
    // return sign(gamma_color) * pow(abs(gamma_color.rgb), vec3(2.2));    // decode UI using 2.2 gamma
    return vec3(_30(_148), _30(_153), _30(_158));
}

vec3 _46(mat3 _44, vec3 _45)
{
    return _44 * _45;
}

float _36(float _35)
{
    float _169;
    if (_35 > 0.003130800090730190277099609375)
    {
        _169 = (pow(_35, 0.4166666567325592041015625) * 1.05499994754791259765625) - 0.054999999701976776123046875;
    }
    else
    {
        _169 = _35 * 12.9200000762939453125;
    }
    return _169;
}

vec3 _39(vec3 _38)
{
    float _184 = _38.x;
    float _188 = _38.y;
    float _192 = _38.z;
    return vec3(_36(_184), _36(_188), _36(_192));
}

float _68(vec3 _67)
{
    return dot(_67, vec3(0.2125999927520751953125, 0.715200006961822509765625, 0.072200000286102294921875));
}

float _10(float _9)
{
    return clamp(_9, 0.0, 1.0);
}

vec3 _57(vec3 _54, mat3 _55, mat3 _56)
{
    vec3 _209 = _54;
    mat3 _210 = _55;
    vec3 _212 = _51(_209, _210);
    mat3 _213 = _56;
    return _51(_212, _213);
}

float _95(float _94)
{
    float _331 = _94 / 10000.0;
    float _335 = pow(_331, 0.1593017578125);
    float _339 = (0.8359375 + (18.8515625 * _335)) / (1.0 + (18.6875 * _335));
    _339 = pow(_339, 78.84375);
    return _339;
}

vec3 _98(vec3 _97)
{
    float _356 = _97.x;
    float _360 = _97.y;
    float _364 = _97.z;
    return vec3(_95(_356), _95(_360), _95(_364));
}

void main()
{
    _101 = 2147483648u;
    _103 = 1073741824u;
    ivec3 _374 = ivec3(gl_GlobalInvocationID);
    vec2 _380 = _387._m0._m1.xy + (_387._m0._m1.zw * (vec2(_374.xy) + vec2(0.5)));
    vec2 _411 = _387._m0._m2.zw * (vec2(_374.xy) + vec2(0.5));
    vec2 _424 = _380;
    vec3 _435;
    SPIRV_CROSS_BRANCH
    if (_387._m0._m3.x < 0.0)
    {
        _435 = textureLod(sampler2D(_438, _442), vec4(_424, 0.0, 0.0).xy, vec4(_424, 0.0, 0.0).w).xyz;
    }
    else
    {
        vec2 _460 = (_424 * _387._m0._m3.xy) + vec2(0.5);
        vec2 _470 = floor(_460);
        vec2 _473 = fract(_460);
        float _477 = _473.x;
        float _476 = _83(_477);
        float _482 = _473.x;
        float _481 = _86(_482);
        float _487 = _473.x;
        float _486 = _89(_487);
        float _492 = _473.x;
        float _491 = _92(_492);
        float _497 = _473.y;
        float _496 = _89(_497);
        float _502 = _473.y;
        float _501 = _92(_502);
        vec2 _506 = (vec2(_470.x + _486, _470.y + _496) - vec2(0.5)) / _387._m0._m3.xy;
        vec2 _524 = (vec2(_470.x + _491, _470.y + _496) - vec2(0.5)) / _387._m0._m3.xy;
        vec2 _542 = (vec2(_470.x + _486, _470.y + _501) - vec2(0.5)) / _387._m0._m3.xy;
        vec2 _560 = (vec2(_470.x + _491, _470.y + _501) - vec2(0.5)) / _387._m0._m3.xy;
        vec4 _579 = textureLod(sampler2D(_438, _581), vec4(_506, 0.0, 0.0).xy, vec4(_506, 0.0, 0.0).w);
        vec4 _595 = textureLod(sampler2D(_438, _581), vec4(_524, 0.0, 0.0).xy, vec4(_524, 0.0, 0.0).w);
        vec4 _610 = textureLod(sampler2D(_438, _581), vec4(_542, 0.0, 0.0).xy, vec4(_542, 0.0, 0.0).w);
        vec4 _625 = textureLod(sampler2D(_438, _581), vec4(_560, 0.0, 0.0).xy, vec4(_560, 0.0, 0.0).w);
        float _641 = _473.y;
        float _653 = _473.y;
        vec4 _640 = (((_579 * _476) + (_595 * _481)) * _83(_641)) + (((_610 * _476) + (_625 * _481)) * _86(_653));
        _435 = mix(_640.xyz, textureLod(sampler2D(_438, _581), vec4(_424, 0.0, 0.0).xy, vec4(_424, 0.0, 0.0).w).xyz, _387._m0._m4.zzz);
        _435 = max(vec3(0.0), _435);
    }
    bool _694 = false;
    SPIRV_CROSS_BRANCH
    if (_698._m47 > 0)
    {
        vec2 _706 = (_380 - _698._m8.xy) * _698._m8.zw;
        vec2 _719 = _706;
        if (all(equal(_706, _16(_719))))
        {
            _694 = true;
        }
        _706 = (_380 - _698._m9.xy) * _698._m9.zw;
        bool _740 = _698._m47 > 1;
        bool _749;
        if (_740)
        {
            vec2 _744 = _706;
            _749 = all(equal(_706, _16(_744)));
        }
        else
        {
            _749 = _740;
        }
        if (_749)
        {
            _694 = true;
        }
        _706 = (_380 - _698._m10.xy) * _698._m10.zw;
        bool _764 = _698._m47 > 2;
        bool _773;
        if (_764)
        {
            vec2 _768 = _706;
            _773 = all(equal(_706, _16(_768)));
        }
        else
        {
            _773 = _764;
        }
        if (_773)
        {
            _694 = true;
        }
    }
    float _780 = _387._m0._m10;
    uint _777 = _27(_780);
    vec4 _1128;
    SPIRV_CROSS_BRANCH
    if ((_777 & 1u) == 0u)
    {
        SPIRV_CROSS_BRANCH
        if ((_777 & 4u) != 0u)
        {
            _435 = max(vec3(0.0), _435);
            _435 /= vec3(_387._m0._m11);
            _435 = _64(_435, mat3(vec3(0.63695812225341796875, 0.14461691677570343017578125, 0.168880939483642578125), vec3(0.2627002298831939697265625, 0.677998065948486328125, 0.059301711618900299072265625), vec3(0.0, 0.02807269059121608734130859375, 1.0609848499298095703125)), mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125)), mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875)));
        }
        else
        {
            vec3 _846 = _435;
            vec3 _849 = _22(_846);
            _435 = _33(_849);
        }
        vec3 _851 = _435;
        SPIRV_CROSS_BRANCH
        if (_387._m0._m4.x > 0.0)
        {
            float _860 = _387._m0._m12;
            float _866 = _387._m0._m13;
            float _872 = mix(0.75, 1.5, _387._m0._m14);
            float _881 = mix(0.0, 1.0, _387._m0._m15);
            _851 = ((_851 - vec3(0.5)) * vec3(_872)) + vec3(_881);
            vec3 _897 = vec3(0.0);
            vec3 _923;
            vec3 _936;
            SPIRV_CROSS_BRANCH
            if (_387._m0._m4.x == 1.0)
            {
                mat3 _919 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
                vec3 _920 = _851;
                vec3 _905 = _46(_919, _920);
                _923.x = dot(_905, vec3(0.0, 1.0511829853057861328125, -0.051160991191864013671875));
                _923.y = _905.y;
                _923.z = _905.z;
                mat3 _950 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
                vec3 _951 = _923;
                _936 = _46(_950, _951);
                vec3 _954 = _851 - _936;
                _897.x = 0.0;
                _897.y = (_954.x * _860) + _954.y;
                _897.z = (_954.x * _860) + _954.z;
            }
            else
            {
                SPIRV_CROSS_BRANCH
                if (_387._m0._m4.x == 2.0)
                {
                    mat3 _985 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
                    vec3 _986 = _851;
                    vec3 _984 = _46(_985, _986);
                    _923.x = _984.x;
                    _923.y = dot(_984, vec3(0.9513092041015625, 0.0, 0.04866991937160491943359375));
                    _923.z = _984.z;
                    mat3 _1001 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
                    vec3 _1002 = _923;
                    _936 = _46(_1001, _1002);
                    vec3 _1005 = _851 - _936;
                    _897.x = (_1005.y * _860) + _1005.x;
                    _897.y = 0.0;
                    _897.z = (_1005.y * _860) + _1005.z;
                }
                else
                {
                    SPIRV_CROSS_BRANCH
                    if (_387._m0._m4.x == 3.0)
                    {
                        mat3 _1035 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
                        vec3 _1036 = _851;
                        vec3 _1034 = _46(_1035, _1036);
                        _923.x = _1034.x;
                        _923.y = _1034.y;
                        _923.z = dot(_1034, vec3(-0.867447376251220703125, 1.867270946502685546875, 0.0));
                        mat3 _1051 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
                        vec3 _1052 = _923;
                        _936 = _46(_1051, _1052);
                        vec3 _1055 = _851 - _936;
                        _897.x = (_1055.z * _860) + _1055.x;
                        _897.y = (_1055.z * _860) + _1055.y;
                        _897.z = 0.0;
                    }
                }
            }
            vec3 _1080 = _851 + _897;
            vec3 _1076 = _22(_1080);
            _435 = mix(_851, _1076, vec3(_866));
        }
        vec4 _1087 = vec4(0.0);
        if (_694 == false)
        {
            _1087 = textureLod(sampler2D(_1093, _1095), vec4(_411, 0.0, 0.0).xy, vec4(_411, 0.0, 0.0).w);
            vec3 _1109 = _1087.xyz;
            vec3 _1112 = _33(_1109);
            _1087.x = _1112.x;
            _1087.y = _1112.y;
            _1087.z = _1112.z;
        }
        vec3 _1119 = (_435 * (1.0 - _1087.w)) + _1087.xyz;
        vec3 _1129 = _1119;
        vec3 _1131 = _39(_1129);
        _1128.x = _1131.x;
        _1128.y = _1131.y;
        _1128.z = _1131.z;
        SPIRV_CROSS_FLATTEN
        if (_387._m0._m16 != 1.0)
        {
            vec4 _1146 = _1128;
            vec3 _1153 = pow(_1146.xyz, vec3(_387._m0._m16));
            _1128.x = _1153.x;
            _1128.y = _1153.y;
            _1128.z = _1153.z;
        }
        bool _1165 = _387._m0._m5.x > 0.0;
        bool _1174;
        if (!_1165)
        {
            _1174 = _387._m0._m5.y > 0.0;
        }
        else
        {
            _1174 = _1165;
        }
        bool _1183;
        if (!_1174)
        {
            _1183 = _387._m0._m5.z > 0.0;
        }
        else
        {
            _1183 = _1174;
        }
        bool _1191;
        if (_1183)
        {
            _1191 = _698._m48 == 0.0;
        }
        else
        {
            _1191 = _1183;
        }
        SPIRV_CROSS_BRANCH
        if (_1191)
        {
            vec2 _1194 = (vec2(ivec2(_374.xy)) + _387._m0._m6.xy) * _387._m0._m7.xy;
            vec3 _1215 = textureLod(sampler2D(_1216, _1218), vec4(_1194, 0.0, 0.0).xy, vec4(_1194, 0.0, 0.0).w).xyz;
            vec3 _1233 = (_1215 * 2.0) - vec3(1.0);
            vec3 _1238 = _1128.xyz;
            vec3 _1242 = _1238;
            float _1241 = _68(_1242);
            float _1252;
            if (_1241 < _387._m0._m5.w)
            {
                float _1269 = _1241 / _387._m0._m5.w;
                _1252 = mix(_387._m0._m5.x, _387._m0._m5.y, _10(_1269));
            }
            else
            {
                float _1293 = (_1241 - _387._m0._m5.w) / (1.0 - _387._m0._m5.w);
                _1252 = mix(_387._m0._m5.y, _387._m0._m5.z, _10(_1293));
            }
            float _1245 = _1252;
            vec3 _1302 = _1238 + (_1233 * _1245);
            vec3 _1303 = _22(_1302);
            _1128.x = _1303.x;
            _1128.y = _1303.y;
            _1128.z = _1303.z;
        }
        if ((_387._m0._m18 & 1u) != 0u)
        {
            vec3 _1321 = _435;
            vec3 _1320 = _39(_1321);
            SPIRV_CROSS_FLATTEN
            if (_387._m0._m16 != 1.0)
            {
                _1320 = pow(_1320, vec3(_387._m0._m16));
            }
            bool _1342 = _387._m0._m5.x > 0.0;
            bool _1351;
            if (!_1342)
            {
                _1351 = _387._m0._m5.y > 0.0;
            }
            else
            {
                _1351 = _1342;
            }
            bool _1360;
            if (!_1351)
            {
                _1360 = _387._m0._m5.z > 0.0;
            }
            else
            {
                _1360 = _1351;
            }
            bool _1366;
            if (_1360)
            {
                _1366 = _698._m48 == 0.0;
            }
            else
            {
                _1366 = _1360;
            }
            SPIRV_CROSS_BRANCH
            if (_1366)
            {
                vec2 _1369 = (vec2(ivec2(_374.xy)) + _387._m0._m6.xy) * _387._m0._m7.xy;
                vec3 _1388 = textureLod(sampler2D(_1216, _1218), vec4(_1369, 0.0, 0.0).xy, vec4(_1369, 0.0, 0.0).w).xyz;
                vec3 _1404 = (_1388 * 2.0) - vec3(1.0);
                vec3 _1409 = _1320;
                vec3 _1412 = _1409;
                float _1411 = _68(_1412);
                float _1422;
                if (_1411 < _387._m0._m5.w)
                {
                    float _1439 = _1411 / _387._m0._m5.w;
                    _1422 = mix(_387._m0._m5.x, _387._m0._m5.y, _10(_1439));
                }
                else
                {
                    float _1463 = (_1411 - _387._m0._m5.w) / (1.0 - _387._m0._m5.w);
                    _1422 = mix(_387._m0._m5.y, _387._m0._m5.z, _10(_1463));
                }
                float _1415 = _1422;
                vec3 _1472 = _1409 + (_1404 * _1415);
                _1320 = _22(_1472);
            }
            imageStore(_1476, ivec2(_374.xy), vec4(_1320, 1.0));
        }
    }
    else
    {
        _435 = max(vec3(0.0), _435);
        vec3 _1491 = _435;
        SPIRV_CROSS_BRANCH
        if (_387._m0._m4.x > 0.0)
        {
            float _1500 = _387._m0._m12;
            float _1505 = _387._m0._m13;
            _1491 = _64(_1491, mat3(vec3(0.63695812225341796875, 0.14461691677570343017578125, 0.168880939483642578125), vec3(0.2627002298831939697265625, 0.677998065948486328125, 0.059301711618900299072265625), vec3(0.0, 0.02807269059121608734130859375, 1.0609848499298095703125)), mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125)), mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875)));
            float _1512 = mix(0.75, 2.5, _387._m0._m14);
            float _1519 = mix(0.0, 10.0, _387._m0._m15);
            _1491 = ((_1491 - vec3(5.0)) * vec3(_1512)) + vec3(_1519);
            vec3 _1536 = vec3(0.0);
            vec3 _1549;
            vec3 _1559;
            SPIRV_CROSS_BRANCH
            if (_387._m0._m4.x == 1.0)
            {
                mat3 _1545 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
                vec3 _1546 = _1491;
                vec3 _1544 = _46(_1545, _1546);
                _1549.x = dot(_1544, vec3(0.0, 1.0511829853057861328125, -0.051160991191864013671875));
                _1549.y = _1544.y;
                _1549.z = _1544.z;
                mat3 _1560 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
                vec3 _1561 = _1549;
                _1559 = _46(_1560, _1561);
                vec3 _1564 = _1491 - _1559;
                _1536.x = 0.0;
                _1536.y = (_1564.x * _1500) + _1564.y;
                _1536.z = (_1564.x * _1500) + _1564.z;
            }
            else
            {
                SPIRV_CROSS_BRANCH
                if (_387._m0._m4.x == 2.0)
                {
                    mat3 _1594 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
                    vec3 _1595 = _1491;
                    vec3 _1593 = _46(_1594, _1595);
                    _1549.x = _1593.x;
                    _1549.y = dot(_1593, vec3(0.9513092041015625, 0.0, 0.04866991937160491943359375));
                    _1549.z = _1593.z;
                    mat3 _1607 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
                    vec3 _1608 = _1549;
                    _1559 = _46(_1607, _1608);
                    vec3 _1611 = _1491 - _1559;
                    _1536.x = (_1611.y * _1500) + _1611.x;
                    _1536.y = 0.0;
                    _1536.z = (_1611.y * _1500) + _1611.z;
                }
                else
                {
                    SPIRV_CROSS_BRANCH
                    if (_387._m0._m4.x == 3.0)
                    {
                        mat3 _1641 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
                        vec3 _1642 = _1491;
                        vec3 _1640 = _46(_1641, _1642);
                        _1549.x = _1640.x;
                        _1549.y = _1640.y;
                        _1549.z = dot(_1640, vec3(-0.867447376251220703125, 1.867270946502685546875, 0.0));
                        mat3 _1654 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
                        vec3 _1655 = _1549;
                        _1559 = _46(_1654, _1655);
                        vec3 _1658 = _1491 - _1559;
                        _1536.x = (_1658.z * _1500) + _1658.x;
                        _1536.y = (_1658.z * _1500) + _1658.y;
                        _1536.z = 0.0;
                    }
                }
            }
            vec3 _1679 = _1491 + _1536;
            _435 = mix(_1491, _1679, vec3(_1505));
            _435 = _64(_435, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
        }
        vec4 _1729 = vec4(0.0);
        if (_694 == false)
        {
            _1729 = textureLod(sampler2D(_1093, _1095), vec4(_411, 0.0, 0.0).xy, vec4(_411, 0.0, 0.0).w);
            vec3 _1748 = _1729.xyz;
            
            // use 2.2 gamma instead of sRGB
            vec3 _1751 = pow(_1748, vec3(2.2)); // vec3 _1751 = _33(_1748);
            
            _1729.x = _1751.x;
            _1729.y = _1751.y;
            _1729.z = _1751.z;
            vec3 _1760 = _57(_1729.xyz, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
            _1729.x = _1760.x;
            _1729.y = _1760.y;
            _1729.z = _1760.z;
            vec4 _1771 = _1729;
            vec3 _1773 = _1771.xyz * _387._m0._m11;  // UI Nits slider
            _1729.x = _1773.x;
            _1729.y = _1773.y;
            _1729.z = _1773.z;
        }
        SPIRV_CROSS_BRANCH
        if ((_777 & 8u) != 0u)
        {
          vec3 _1786 = pow(_435, vec3(2.2)); // vec3 _1786 = _435;

          // use 2.2 gamma instead of sRGB
          _435 = _33(_1786);
            // BT709 -> XYZ -> BT.2020
            _435 = _57(_435, mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375)), mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875)));
            _435 *= _387._m0._m11;  // UI Nits slider _387._m0._m11
        }

        _435 *= _387._m0._m17;  // _387._m0._m17        
        
        
        vec3 _1811 = (_435 * (1.0 - _1729.w)) + _1729.xyz;
        _1128.x = _1811.x;
        _1128.y = _1811.y;
        _1128.z = _1811.z;
        bool _1822 = _387._m0._m5.x > 0.0;
        bool _1831;
        if (!_1822)
        {
            _1831 = _387._m0._m5.y > 0.0;
        }
        else
        {
            _1831 = _1822;
        }
        bool _1840;
        if (!_1831)
        {
            _1840 = _387._m0._m5.z > 0.0;
        }
        else
        {
            _1840 = _1831;
        }
        bool _1846;
        if (_1840)
        {
            _1846 = _698._m48 == 0.0;
        }
        else
        {
            _1846 = _1840;
        }
        SPIRV_CROSS_BRANCH
        if (_1846)
        {
            vec2 _1849 = (vec2(ivec2(_374.xy)) + _387._m0._m6.xy) * _387._m0._m7.xy;
            vec3 _1868 = textureLod(sampler2D(_1216, _1218), vec4(_1849, 0.0, 0.0).xy, vec4(_1849, 0.0, 0.0).w).xyz;
            vec3 _1884 = (_1868 * 2.0) - vec3(1.0);
            vec3 _1889 = _1128.xyz;
            _1889 = pow(_1128.xyz / vec3(200.0), vec3(0.4166666567325592041015625));
            vec3 _1900 = _1889;
            float _1899 = _68(_1900);
            float _1910;
            if (_1899 < _387._m0._m5.w)
            {
                float _1927 = _1899 / _387._m0._m5.w;
                _1910 = mix(_387._m0._m5.x, _387._m0._m5.y, _10(_1927));
            }
            else
            {
                float _1951 = (_1899 - _387._m0._m5.w) / (1.0 - _387._m0._m5.w);
                _1910 = mix(_387._m0._m5.y, _387._m0._m5.z, _10(_1951));
            }
            float _1903 = _1910;
            vec3 _1963 = pow(max(vec3(0.0), _1889 + (_1884 * _1903)), vec3(2.400000095367431640625)) * 200.0;
            _1128.x = _1963.x;
            _1128.y = _1963.y;
            _1128.z = _1963.z;
        }
        vec3 _1970 = _1128.xyz;
        vec3 _1973 = _98(_1970);
        _1128.x = _1973.x;
        _1128.y = _1973.y;
        _1128.z = _1973.z;
        if ((_387._m0._m18 & 1u) != 0u) // SDR?
        {
            vec3 _1988 = _435;
            bool _1994 = _387._m0._m5.x > 0.0;
            bool _2003;
            if (!_1994)
            {
                _2003 = _387._m0._m5.y > 0.0;
            }
            else
            {
                _2003 = _1994;
            }
            bool _2012;
            if (!_2003)
            {
                _2012 = _387._m0._m5.z > 0.0;
            }
            else
            {
                _2012 = _2003;
            }
            bool _2018;
            if (_2012)
            {
                _2018 = _698._m48 == 0.0;
            }
            else
            {
                _2018 = _2012;
            }
            SPIRV_CROSS_BRANCH
            if (_2018)
            {
                vec2 _2021 = (vec2(ivec2(_374.xy)) + _387._m0._m6.xy) * _387._m0._m7.xy;
                vec3 _2040 = textureLod(sampler2D(_1216, _1218), vec4(_2021, 0.0, 0.0).xy, vec4(_2021, 0.0, 0.0).w).xyz;
                vec3 _2056 = (_2040 * 2.0) - vec3(1.0);
                vec3 _2061 = _1988;
                _2061 = pow(_1988 / vec3(200.0), vec3(0.4166666567325592041015625));
                vec3 _2068 = _2061;
                float _2067 = _68(_2068);
                float _2078;
                if (_2067 < _387._m0._m5.w)
                {
                    float _2095 = _2067 / _387._m0._m5.w;
                    _2078 = mix(_387._m0._m5.x, _387._m0._m5.y, _10(_2095));
                }
                else
                {
                    float _2119 = (_2067 - _387._m0._m5.w) / (1.0 - _387._m0._m5.w);
                    _2078 = mix(_387._m0._m5.y, _387._m0._m5.z, _10(_2119));
                }
                float _2071 = _2078;
                _1988 = pow(max(vec3(0.0), _2061 + (_2056 * _2071)), vec3(2.400000095367431640625)) * 200.0;
            }
            vec3 _2131 = _1988;
            _1988 = _98(_2131);
            imageStore(_2136, ivec2(_374.xy), vec4(_1988, 1.0));
        }
    }
    _1128.w = 1.0;
    imageStore(_2151, ivec2(_387._m0._m8.xy / _387._m0._m8.zw) + _374.xy, _1128);
}

