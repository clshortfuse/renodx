#include "./shared.h"
#include "./LUTBlackCorrection.hlsl"

Texture2D<float4> RE_POSTPROCESS_Color : register(t0);

struct _ComputeResultSRV {
  float data[1];
};
StructuredBuffer<_ComputeResultSRV> ComputeResultSRV : register(t1);

Texture3D<float4> tTextureMap0 : register(t2);

Texture3D<float4> tTextureMap1 : register(t3);

Texture3D<float4> tTextureMap2 : register(t4);

Texture2D<float4> ImagePlameBase : register(t5);

Texture2D<float> ImagePlameAlpha : register(t6);

cbuffer SceneInfo : register(b0) {
  float SceneInfo_023x : packoffset(c023.x);
  float SceneInfo_023y : packoffset(c023.y);
  float SceneInfo_023z : packoffset(c023.z);
  float SceneInfo_023w : packoffset(c023.w);
};

cbuffer TonemapParam : register(b1) {
  float TonemapParam_000x : packoffset(c000.x);
  float TonemapParam_000y : packoffset(c000.y);
  float TonemapParam_000w : packoffset(c000.w);
  float maxNit            : packoffset(c001.x);       // float TonemapParam_001x
  float linearStart       : packoffset(c001.y);       // float TonemapParam_001y
  float TonemapParam_001z : packoffset(c001.z);
  float TonemapParam_001w : packoffset(c001.w);
  float TonemapParam_002x : packoffset(c002.x);
  float TonemapParam_002y : packoffset(c002.y);
  float TonemapParam_002z : packoffset(c002.z);
};

cbuffer LensDistortionParam : register(b2) {
  float LensDistortionParam_000x : packoffset(c000.x);
  float LensDistortionParam_000y : packoffset(c000.y);
  uint LensDistortionParam_000z : packoffset(c000.z);
  uint LensDistortionParam_000w : packoffset(c000.w);
  float LensDistortionParam_001x : packoffset(c001.x);
};

cbuffer PaniniProjectionParam : register(b3) {
  float PaniniProjectionParam_000x : packoffset(c000.x);
  float PaniniProjectionParam_000y : packoffset(c000.y);
  float PaniniProjectionParam_000z : packoffset(c000.z);
  float PaniniProjectionParam_000w : packoffset(c000.w);
};

cbuffer RadialBlurRenderParam : register(b4) {
  float RadialBlurRenderParam_000x : packoffset(c000.x);
  float RadialBlurRenderParam_000y : packoffset(c000.y);
  float RadialBlurRenderParam_000z : packoffset(c000.z);
  float RadialBlurRenderParam_000w : packoffset(c000.w);
  float RadialBlurRenderParam_001x : packoffset(c001.x);
  float RadialBlurRenderParam_001y : packoffset(c001.y);
  float RadialBlurRenderParam_001z : packoffset(c001.z);
  float RadialBlurRenderParam_001w : packoffset(c001.w);
  float RadialBlurRenderParam_002x : packoffset(c002.x);
  float RadialBlurRenderParam_002y : packoffset(c002.y);
  float RadialBlurRenderParam_002z : packoffset(c002.z);
  float RadialBlurRenderParam_002w : packoffset(c002.w);
  uint RadialBlurRenderParam_003x : packoffset(c003.x);
};

cbuffer FilmGrainParam : register(b5) {
  float FilmGrainParam_000x : packoffset(c000.x);
  float FilmGrainParam_000y : packoffset(c000.y);
  float FilmGrainParam_000z : packoffset(c000.z);
  float FilmGrainParam_000w : packoffset(c000.w);
  float FilmGrainParam_001x : packoffset(c001.x);
  float FilmGrainParam_001y : packoffset(c001.y);
  float FilmGrainParam_001z : packoffset(c001.z);
  float FilmGrainParam_001w : packoffset(c001.w);
};

cbuffer ColorCorrectTexture : register(b6) {
  float ColorCorrectTexture_000y : packoffset(c000.y);
  float ColorCorrectTexture_000z : packoffset(c000.z);
  float ColorCorrectTexture_000w : packoffset(c000.w);
  float ColorCorrectTexture_001x : packoffset(c001.x);
  float ColorCorrectTexture_001y : packoffset(c001.y);
  float ColorCorrectTexture_001z : packoffset(c001.z);
  float ColorCorrectTexture_002x : packoffset(c002.x);
  float ColorCorrectTexture_002y : packoffset(c002.y);
  float ColorCorrectTexture_002z : packoffset(c002.z);
  float ColorCorrectTexture_003x : packoffset(c003.x);
  float ColorCorrectTexture_003y : packoffset(c003.y);
  float ColorCorrectTexture_003z : packoffset(c003.z);
  float ColorCorrectTexture_004x : packoffset(c004.x);
  float ColorCorrectTexture_004y : packoffset(c004.y);
  float ColorCorrectTexture_004z : packoffset(c004.z);
};

cbuffer ColorDeficientTable : register(b7) {
  float ColorDeficientTable_000x : packoffset(c000.x);
  float ColorDeficientTable_000y : packoffset(c000.y);
  float ColorDeficientTable_000z : packoffset(c000.z);
  float ColorDeficientTable_001x : packoffset(c001.x);
  float ColorDeficientTable_001y : packoffset(c001.y);
  float ColorDeficientTable_001z : packoffset(c001.z);
  float ColorDeficientTable_002x : packoffset(c002.x);
  float ColorDeficientTable_002y : packoffset(c002.y);
  float ColorDeficientTable_002z : packoffset(c002.z);
};

cbuffer ImagePlaneParam : register(b8) {
  float ImagePlaneParam_000x : packoffset(c000.x);
  float ImagePlaneParam_000y : packoffset(c000.y);
  float ImagePlaneParam_000z : packoffset(c000.z);
  float ImagePlaneParam_000w : packoffset(c000.w);
  float ImagePlaneParam_001x : packoffset(c001.x);
  float ImagePlaneParam_001y : packoffset(c001.y);
};

cbuffer CBControl : register(b9) {
  uint CBControl_000x : packoffset(c000.x);
};

SamplerState BilinearClamp : register(s5, space32);

SamplerState BilinearBorder : register(s6, space32);

SamplerState TrilinearClamp : register(s9, space32);

float4 main(
  noperspective float4 SV_Position : SV_Position,
  linear float4 Kerare : Kerare,
  linear float Exposure : Exposure
) : SV_Target {
  
  // custom code
  // set vanilla tonemapper to 10k
  float TonemapParam_001x = 125;
  float TonemapParam_001y = 125;
  
  // declare lut config for use with lut black correction
  renodx::lut::Config lut_config = renodx::lut::config::Create(
    TrilinearClamp,
    1.f,
    1.f,
    renodx::lut::config::type::SRGB,
    renodx::lut::config::type::LINEAR,
    1 / ColorCorrectTexture_000w);
  
    
  float4 SV_Target;
  float _21 = Exposure;
  float _22 = SV_Position.x;
  float _23 = SV_Position.y;
  uint _25 = CBControl_000x;
  int _26 = _25 & 1;
  bool _27 = (_26 != 0);
  uint _29 = LensDistortionParam_000w;
  bool _30 = (_29 == 0);
  bool _31 = _27 && _30;
  bool _32 = (_29 == 1);
  bool _33 = _27 && _32;
  float _35 = TonemapParam_000y;
  float _37 = TonemapParam_002y;
  float _39 = TonemapParam_001y;
  float _40 = TonemapParam_000w;
  float _41 = TonemapParam_000x;
  float _42 = TonemapParam_002z;
  float _43 = TonemapParam_001x;
  float _44 = TonemapParam_001z;
  float _45 = TonemapParam_001w;
  float _46 = TonemapParam_002x;
  float _465;
  float _466;
  float _467;
  float _468;
  float _469;
  float _470;
  float _471;
  float _472;
  float _473;
  float _1435;
  float _1436;
  float _1437;
  float _1463;
  float _1464;
  float _1465;
  float _1476;
  float _1477;
  float _1478;
  float _1520;
  float _1536;
  float _1552;
  float _1577;
  float _1578;
  float _1579;
  float _1611;
  float _1612;
  float _1613;
  float _1625;
  float _1636;
  float _1647;
  float _1686;
  float _1697;
  float _1708;
  float _1733;
  float _1744;
  float _1755;
  float _1770;
  float _1771;
  float _1772;
  float _1790;
  float _1791;
  float _1792;
  float _1827;
  float _1828;
  float _1829;
  float _1898;
  float _1899;
  float _1900;
  if (_31) {
    float _49 = LensDistortionParam_000x;
    float _50 = LensDistortionParam_000y;
    uint _51 = LensDistortionParam_000z;
    float _53 = LensDistortionParam_001x;
    float _55 = SceneInfo_023z;
    float _56 = SceneInfo_023w;
    float _57 = _55 * _22;
    float _58 = _56 * _23;
    float _59 = _57 + -0.5f;
    float _60 = _58 + -0.5f;
    float _61 = dot(float2(_59, _60), float2(_59, _60));
    float _62 = _61 * _49;
    float _63 = _62 + 1.0f;
    float _64 = _63 * _53;
    float _65 = _64 * _59;
    float _66 = _64 * _60;
    float _67 = _65 + 0.5f;
    float _68 = _66 + 0.5f;
    bool _69 = (_51 == 0);
    float4 _70 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_67, _68));
    float _71 = _70.x;
    float _72 = _71 * _21;
    float _73 = _37 * _72;
    bool _74 = (_72 >= _35);
    float _75 = _73 * _73;
    float _76 = _73 * 2.0f;
    float _77 = 3.0f - _76;
    float _78 = _75 * _77;
    float _79 = 1.0f - _78;
    float _80 = _74 ? 0.0f : _79;
    bool _81 = (_72 < _39);
    float _82 = _81 ? 0.0f : 1.0f;
    float _83 = 1.0f - _82;
    float _84 = _83 - _80;
    float _85 = log2(_73);
    float _86 = _85 * _40;
    float _87 = exp2(_86);
    float _88 = _41 * _72;
    float _89 = _88 + _42;
    float _90 = _89 * _84;
    float _91 = _45 * _72;
    float _92 = _91 + _46;
    float _93 = exp2(_92);
    float _94 = _93 * _44;
    float _95 = _43 - _94;
    float _96 = _95 * _82;
    if (_69) {
      float _98 = _70.y;
      float _99 = _70.z;
      float _100 = _98 * _21;
      float _101 = _99 * _21;
      float _102 = _37 * _100;
      bool _103 = (_100 >= _35);
      float _104 = _102 * _102;
      float _105 = _102 * 2.0f;
      float _106 = 3.0f - _105;
      float _107 = _104 * _106;
      float _108 = _37 * _101;
      bool _109 = (_101 >= _35);
      float _110 = _108 * _108;
      float _111 = _108 * 2.0f;
      float _112 = 3.0f - _111;
      float _113 = _110 * _112;
      float _114 = 1.0f - _107;
      float _115 = _103 ? 0.0f : _114;
      float _116 = 1.0f - _113;
      float _117 = _109 ? 0.0f : _116;
      bool _118 = (_100 < _39);
      bool _119 = (_101 < _39);
      float _120 = _118 ? 0.0f : 1.0f;
      float _121 = _119 ? 0.0f : 1.0f;
      float _122 = 1.0f - _120;
      float _123 = _122 - _115;
      float _124 = 1.0f - _121;
      float _125 = _124 - _117;
      float _126 = log2(_102);
      float _127 = log2(_108);
      float _128 = _126 * _40;
      float _129 = _127 * _40;
      float _130 = exp2(_128);
      float _131 = exp2(_129);
      float _132 = _87 * _80;
      float _133 = _132 * _35;
      float _134 = _130 * _115;
      float _135 = _134 * _35;
      float _136 = _131 * _117;
      float _137 = _136 * _35;
      float _138 = _41 * _100;
      float _139 = _41 * _101;
      float _140 = _138 + _42;
      float _141 = _139 + _42;
      float _142 = _140 * _123;
      float _143 = _141 * _125;
      float _144 = _90 + _133;
      float _145 = _142 + _135;
      float _146 = _143 + _137;
      float _147 = _45 * _100;
      float _148 = _45 * _101;
      float _149 = _147 + _46;
      float _150 = _148 + _46;
      float _151 = exp2(_149);
      float _152 = exp2(_150);
      float _153 = _151 * _44;
      float _154 = _152 * _44;
      float _155 = _43 - _153;
      float _156 = _43 - _154;
      float _157 = _155 * _120;
      float _158 = _156 * _121;
      float _159 = _144 + _96;
      float _160 = _145 + _157;
      float _161 = _146 + _158;
      _465 = _159;
      _466 = _160;
      _467 = _161;
      _468 = _49;
      _469 = 0.0f;
      _470 = 0.0f;
      _471 = 0.0f;
      _472 = 0.0f;
      _473 = _53;
    } else {
      float _163 = _61 + _50;
      float _164 = _163 * _49;
      float _165 = _164 + 1.0f;
      float _166 = _59 * _53;
      float _167 = _166 * _165;
      float _168 = _60 * _53;
      float _169 = _168 * _165;
      float _170 = _167 + 0.5f;
      float _171 = _169 + 0.5f;
      float _172 = _163 + _50;
      float _173 = _172 * _49;
      float _174 = _173 + 1.0f;
      float _175 = _166 * _174;
      float _176 = _168 * _174;
      float _177 = _175 + 0.5f;
      float _178 = _176 + 0.5f;
      float _179 = _35 * _87;
      float _180 = _179 * _80;
      float _181 = _90 + _180;
      float _182 = _181 + _96;
      float4 _183 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_170, _171));
      float _184 = _183.y;
      float _185 = _184 * _21;
      float _186 = _37 * _185;
      bool _187 = (_185 >= _35);
      float _188 = _186 * _186;
      float _189 = _186 * 2.0f;
      float _190 = 3.0f - _189;
      float _191 = _188 * _190;
      float _192 = 1.0f - _191;
      float _193 = _187 ? 0.0f : _192;
      bool _194 = (_185 < _39);
      float _195 = _194 ? 0.0f : 1.0f;
      float _196 = 1.0f - _195;
      float _197 = _196 - _193;
      float _198 = log2(_186);
      float _199 = _198 * _40;
      float _200 = exp2(_199);
      float _201 = _35 * _200;
      float _202 = _201 * _193;
      float _203 = _41 * _185;
      float _204 = _203 + _42;
      float _205 = _204 * _197;
      float _206 = _205 + _202;
      float _207 = _45 * _185;
      float _208 = _207 + _46;
      float _209 = exp2(_208);
      float _210 = _209 * _44;
      float _211 = _43 - _210;
      float _212 = _211 * _195;
      float _213 = _206 + _212;
      float4 _214 = RE_POSTPROCESS_Color.Sample(BilinearClamp, float2(_177, _178));
      float _215 = _214.z;
      float _216 = _215 * _21;
      float _217 = _37 * _216;
      bool _218 = (_216 >= _35);
      float _219 = _217 * _217;
      float _220 = _217 * 2.0f;
      float _221 = 3.0f - _220;
      float _222 = _219 * _221;
      float _223 = 1.0f - _222;
      float _224 = _218 ? 0.0f : _223;
      bool _225 = (_216 < _39);
      float _226 = _225 ? 0.0f : 1.0f;
      float _227 = 1.0f - _226;
      float _228 = _227 - _224;
      float _229 = log2(_217);
      float _230 = _229 * _40;
      float _231 = exp2(_230);
      float _232 = _35 * _231;
      float _233 = _232 * _224;
      float _234 = _41 * _216;
      float _235 = _234 + _42;
      float _236 = _235 * _228;
      float _237 = _236 + _233;
      float _238 = _45 * _216;
      float _239 = _238 + _46;
      float _240 = exp2(_239);
      float _241 = _240 * _44;
      float _242 = _43 - _241;
      float _243 = _242 * _226;
      float _244 = _237 + _243;
      _465 = _182;
      _466 = _213;
      _467 = _244;
      _468 = _49;
      _469 = 0.0f;
      _470 = 0.0f;
      _471 = 0.0f;
      _472 = 0.0f;
      _473 = _53;
    }
  } else {
    if (_33) {
      float _248 = PaniniProjectionParam_000x;
      float _249 = PaniniProjectionParam_000y;
      float _250 = PaniniProjectionParam_000z;
      float _251 = PaniniProjectionParam_000w;
      float _253 = SceneInfo_023z;
      float _254 = SceneInfo_023w;
      float _255 = _22 * 2.0f;
      float _256 = _255 * _253;
      float _257 = _23 * 2.0f;
      float _258 = _257 * _254;
      float _259 = _256 + -1.0f;
      float _260 = _258 + -1.0f;
      float _261 = _259 * _259;
      float _262 = _261 + 1.0f;
      float _263 = sqrt(_262);
      float _264 = 1.0f / _263;
      float _265 = _264 + _248;
      float _266 = _263 * _250;
      float _267 = _266 * _265;
      float _268 = _264 + -1.0f;
      float _269 = _268 * _249;
      float _270 = _269 + 1.0f;
      float _271 = _251 * 0.5f;
      float _272 = _271 * _259;
      float _273 = _272 * _267;
      float _274 = _271 * _260;
      float _275 = _274 * _270;
      float _276 = _275 * _267;
      float _277 = _273 + 0.5f;
      float _278 = _276 + 0.5f;
      float4 _279 = RE_POSTPROCESS_Color.Sample(BilinearBorder, float2(_277, _278));
      float _280 = _279.x;
      float _281 = _279.y;
      float _282 = _279.z;
      float _283 = _280 * _21;
      float _284 = _281 * _21;
      float _285 = _282 * _21;
      float _286 = _37 * _283;
      bool _287 = (_283 >= _35);
      float _288 = _286 * _286;
      float _289 = _286 * 2.0f;
      float _290 = 3.0f - _289;
      float _291 = _288 * _290;
      float _292 = _37 * _284;
      bool _293 = (_284 >= _35);
      float _294 = _292 * _292;
      float _295 = _292 * 2.0f;
      float _296 = 3.0f - _295;
      float _297 = _294 * _296;
      float _298 = _37 * _285;
      bool _299 = (_285 >= _35);
      float _300 = _298 * _298;
      float _301 = _298 * 2.0f;
      float _302 = 3.0f - _301;
      float _303 = _300 * _302;
      float _304 = 1.0f - _291;
      float _305 = _287 ? 0.0f : _304;
      float _306 = 1.0f - _297;
      float _307 = _293 ? 0.0f : _306;
      float _308 = 1.0f - _303;
      float _309 = _299 ? 0.0f : _308;
      bool _310 = (_283 < _39);
      bool _311 = (_284 < _39);
      bool _312 = (_285 < _39);
      float _313 = _310 ? 0.0f : 1.0f;
      float _314 = _311 ? 0.0f : 1.0f;
      float _315 = _312 ? 0.0f : 1.0f;
      float _316 = 1.0f - _313;
      float _317 = _316 - _305;
      float _318 = 1.0f - _314;
      float _319 = _318 - _307;
      float _320 = 1.0f - _315;
      float _321 = _320 - _309;
      float _322 = log2(_286);
      float _323 = log2(_292);
      float _324 = log2(_298);
      float _325 = _322 * _40;
      float _326 = _323 * _40;
      float _327 = _324 * _40;
      float _328 = exp2(_325);
      float _329 = exp2(_326);
      float _330 = exp2(_327);
      float _331 = _328 * _305;
      float _332 = _331 * _35;
      float _333 = _329 * _307;
      float _334 = _333 * _35;
      float _335 = _330 * _309;
      float _336 = _335 * _35;
      float _337 = _41 * _283;
      float _338 = _41 * _284;
      float _339 = _41 * _285;
      float _340 = _337 + _42;
      float _341 = _338 + _42;
      float _342 = _339 + _42;
      float _343 = _340 * _317;
      float _344 = _341 * _319;
      float _345 = _342 * _321;
      float _346 = _343 + _332;
      float _347 = _344 + _334;
      float _348 = _345 + _336;
      float _349 = _45 * _283;
      float _350 = _45 * _284;
      float _351 = _45 * _285;
      float _352 = _349 + _46;
      float _353 = _350 + _46;
      float _354 = _351 + _46;
      float _355 = exp2(_352);
      float _356 = exp2(_353);
      float _357 = exp2(_354);
      float _358 = _355 * _44;
      float _359 = _356 * _44;
      float _360 = _357 * _44;
      float _361 = _43 - _358;
      float _362 = _43 - _359;
      float _363 = _43 - _360;
      float _364 = _361 * _313;
      float _365 = _362 * _314;
      float _366 = _363 * _315;
      float _367 = _346 + _364;
      float _368 = _347 + _365;
      float _369 = _348 + _366;
      _465 = _367;
      _466 = _368;
      _467 = _369;
      _468 = 0.0f;
      _469 = _248;
      _470 = _249;
      _471 = _250;
      _472 = _251;
      _473 = 1.0f;
    } else {
      uint _371 = uint(_22);
      uint _372 = uint(_23);
      float4 _373 = RE_POSTPROCESS_Color.Load(int3(_371, _372, 0));
      float _374 = _373.x;
      float _375 = _373.y;
      float _376 = _373.z;
      float _377 = _374 * _21;
      float _378 = _375 * _21;
      float _379 = _376 * _21;
      float _380 = _37 * _377;
      bool _381 = (_377 >= _35);
      float _382 = _380 * _380;
      float _383 = _380 * 2.0f;
      float _384 = 3.0f - _383;
      float _385 = _382 * _384;
      float _386 = _37 * _378;
      bool _387 = (_378 >= _35);
      float _388 = _386 * _386;
      float _389 = _386 * 2.0f;
      float _390 = 3.0f - _389;
      float _391 = _388 * _390;
      float _392 = _37 * _379;
      bool _393 = (_379 >= _35);
      float _394 = _392 * _392;
      float _395 = _392 * 2.0f;
      float _396 = 3.0f - _395;
      float _397 = _394 * _396;
      float _398 = 1.0f - _385;
      float _399 = _381 ? 0.0f : _398;
      float _400 = 1.0f - _391;
      float _401 = _387 ? 0.0f : _400;
      float _402 = 1.0f - _397;
      float _403 = _393 ? 0.0f : _402;
      bool _404 = (_377 < _39);
      bool _405 = (_378 < _39);
      bool _406 = (_379 < _39);
      float _407 = _404 ? 0.0f : 1.0f;
      float _408 = _405 ? 0.0f : 1.0f;
      float _409 = _406 ? 0.0f : 1.0f;
      float _410 = 1.0f - _407;
      float _411 = _410 - _399;
      float _412 = 1.0f - _408;
      float _413 = _412 - _401;
      float _414 = 1.0f - _409;
      float _415 = _414 - _403;
      float _416 = log2(_380);
      float _417 = log2(_386);
      float _418 = log2(_392);
      float _419 = _416 * _40;
      float _420 = _417 * _40;
      float _421 = _418 * _40;
      float _422 = exp2(_419);
      float _423 = exp2(_420);
      float _424 = exp2(_421);
      float _425 = _422 * _399;
      float _426 = _425 * _35;
      float _427 = _423 * _401;
      float _428 = _427 * _35;
      float _429 = _424 * _403;
      float _430 = _429 * _35;
      float _431 = _41 * _377;
      float _432 = _41 * _378;
      float _433 = _41 * _379;
      float _434 = _431 + _42;
      float _435 = _432 + _42;
      float _436 = _433 + _42;
      float _437 = _434 * _411;
      float _438 = _435 * _413;
      float _439 = _436 * _415;
      float _440 = _437 + _426;
      float _441 = _438 + _428;
      float _442 = _439 + _430;
      float _443 = _45 * _377;
      float _444 = _45 * _378;
      float _445 = _45 * _379;
      float _446 = _443 + _46;
      float _447 = _444 + _46;
      float _448 = _445 + _46;
      float _449 = exp2(_446);
      float _450 = exp2(_447);
      float _451 = exp2(_448);
      float _452 = _449 * _44;
      float _453 = _450 * _44;
      float _454 = _451 * _44;
      float _455 = _43 - _452;
      float _456 = _43 - _453;
      float _457 = _43 - _454;
      float _458 = _455 * _407;
      float _459 = _456 * _408;
      float _460 = _457 * _409;
      float _461 = _440 + _458;
      float _462 = _441 + _459;
      float _463 = _442 + _460;
      _465 = _461;
      _466 = _462;
      _467 = _463;
      _468 = 0.0f;
      _469 = 0.0f;
      _470 = 0.0f;
      _471 = 0.0f;
      _472 = 0.0f;
      _473 = 1.0f;
    }
  }
  int _474 = _25 & 32;
  bool _475 = (_474 == 0);
  _1476 = _465;
  _1477 = _466;
  _1478 = _467;
  if (!_475) {
    float _478 = RadialBlurRenderParam_000x;
    float _479 = RadialBlurRenderParam_000y;
    float _480 = RadialBlurRenderParam_000z;
    float _481 = RadialBlurRenderParam_000w;
    float _483 = RadialBlurRenderParam_001x;
    float _484 = RadialBlurRenderParam_001y;
    float _485 = RadialBlurRenderParam_001z;
    float _486 = RadialBlurRenderParam_001w;
    float _488 = RadialBlurRenderParam_002x;
    float _489 = RadialBlurRenderParam_002y;
    float _490 = RadialBlurRenderParam_002z;
    uint _492 = RadialBlurRenderParam_003x;
    int _493 = _492 & 2;
    bool _494 = (_493 != 0);
    float _495 = float(_494);
    float _496 = 1.0f - _495;
    float4 _497 = ComputeResultSRV[0].data[0 / 4];
    float _498 = _497.x;
    float _499 = _498 * _495;
    float _500 = _496 + _499;
    float _501 = _500 * _481;
    bool _502 = (_501 == 0.0f);
    _1476 = _465;
    _1477 = _466;
    _1478 = _467;
    if (!_502) {
      float _504 = RadialBlurRenderParam_002w;
      float _506 = SceneInfo_023z;
      float _507 = SceneInfo_023w;
      float _508 = _506 * _22;
      float _509 = _507 * _23;
      float _510 = -0.5f - _483;
      float _511 = _510 + _508;
      float _512 = -0.5f - _484;
      float _513 = _512 + _509;
      bool _514 = (_511 < 0.0f);
      float _515 = 1.0f - _508;
      float _516 = _514 ? _515 : _508;
      bool _517 = (_513 < 0.0f);
      float _518 = 1.0f - _509;
      float _519 = _517 ? _518 : _509;
      int _520 = _492 & 1;
      bool _521 = (_520 != 0);
      float _522 = dot(float2(_511, _513), float2(_511, _513));
      float _523 = rsqrt(_522);
      float _524 = _523 * _504;
      float _525 = _524 * _511;
      float _526 = _524 * _513;
      float _527 = abs(_525);
      float _528 = abs(_526);
      uint _529 = uint(_527);
      uint _530 = uint(_528);
      uint _531 = _530 + _529;
      uint _532 = _531 ^ 61;
      uint _533 = _531 >> 16;
      uint _534 = _532 ^ _533;
      uint _535 = _534 * 9;
      uint _536 = _535 >> 4;
      uint _537 = _536 ^ _535;
      uint _538 = _537 * 668265261;
      uint _539 = _538 >> 15;
      uint _540 = _539 ^ _538;
      float _541 = float(_540);
      float _542 = _541 * 2.3283064365386963e-10f;
      float _543 = _521 ? _542 : 1.0f;
      float _544 = _511 * _511;
      float _545 = _513 * _513;
      float _546 = _544 + _545;
      float _547 = sqrt(_546);
      float _548 = max(1.0f, _547);
      float _549 = 1.0f / _548;
      float _550 = _490 * -0.0011111111380159855f;
      float _551 = _550 * _516;
      float _552 = _551 * _543;
      float _553 = _552 * _549;
      float _554 = _550 * _519;
      float _555 = _554 * _543;
      float _556 = _555 * _549;
      float _557 = _553 + 1.0f;
      float _558 = _556 + 1.0f;
      float _559 = _557 * _511;
      float _560 = _558 * _513;
      float _561 = _490 * -0.002222222276031971f;
      float _562 = _561 * _516;
      float _563 = _562 * _543;
      float _564 = _563 * _549;
      float _565 = _561 * _519;
      float _566 = _565 * _543;
      float _567 = _566 * _549;
      float _568 = _564 + 1.0f;
      float _569 = _567 + 1.0f;
      float _570 = _568 * _511;
      float _571 = _569 * _513;
      float _572 = _490 * -0.0033333334140479565f;
      float _573 = _572 * _516;
      float _574 = _573 * _543;
      float _575 = _574 * _549;
      float _576 = _572 * _519;
      float _577 = _576 * _543;
      float _578 = _577 * _549;
      float _579 = _575 + 1.0f;
      float _580 = _578 + 1.0f;
      float _581 = _579 * _511;
      float _582 = _580 * _513;
      float _583 = _490 * -0.004444444552063942f;
      float _584 = _583 * _516;
      float _585 = _584 * _543;
      float _586 = _585 * _549;
      float _587 = _583 * _519;
      float _588 = _587 * _543;
      float _589 = _588 * _549;
      float _590 = _586 + 1.0f;
      float _591 = _589 + 1.0f;
      float _592 = _590 * _511;
      float _593 = _591 * _513;
      float _594 = _490 * -0.0055555556900799274f;
      float _595 = _594 * _516;
      float _596 = _595 * _543;
      float _597 = _596 * _549;
      float _598 = _594 * _519;
      float _599 = _598 * _543;
      float _600 = _599 * _549;
      float _601 = _597 + 1.0f;
      float _602 = _600 + 1.0f;
      float _603 = _601 * _511;
      float _604 = _602 * _513;
      float _605 = _490 * -0.006666666828095913f;
      float _606 = _605 * _516;
      float _607 = _606 * _543;
      float _608 = _607 * _549;
      float _609 = _605 * _519;
      float _610 = _609 * _543;
      float _611 = _610 * _549;
      float _612 = _608 + 1.0f;
      float _613 = _611 + 1.0f;
      float _614 = _612 * _511;
      float _615 = _613 * _513;
      float _616 = _490 * -0.007777777966111898f;
      float _617 = _616 * _516;
      float _618 = _617 * _543;
      float _619 = _618 * _549;
      float _620 = _616 * _519;
      float _621 = _620 * _543;
      float _622 = _621 * _549;
      float _623 = _619 + 1.0f;
      float _624 = _622 + 1.0f;
      float _625 = _623 * _511;
      float _626 = _624 * _513;
      float _627 = _490 * -0.008888889104127884f;
      float _628 = _627 * _516;
      float _629 = _628 * _543;
      float _630 = _629 * _549;
      float _631 = _627 * _519;
      float _632 = _631 * _543;
      float _633 = _632 * _549;
      float _634 = _630 + 1.0f;
      float _635 = _633 + 1.0f;
      float _636 = _634 * _511;
      float _637 = _635 * _513;
      float _638 = _490 * -0.009999999776482582f;
      float _639 = _638 * _516;
      float _640 = _639 * _543;
      float _641 = _640 * _549;
      float _642 = _638 * _519;
      float _643 = _642 * _543;
      float _644 = _643 * _549;
      float _645 = _641 + 1.0f;
      float _646 = _644 + 1.0f;
      float _647 = _645 * _511;
      float _648 = _646 * _513;
      float _649 = _21 * 0.10000000149011612f;
      float _650 = _649 * _478;
      float _651 = _649 * _479;
      float _652 = _649 * _480;
      float _654 = TonemapParam_000y;
      float _656 = TonemapParam_002y;
      float _658 = TonemapParam_001y;
      float _659 = TonemapParam_000w;
      float _660 = TonemapParam_000x;
      float _661 = TonemapParam_002z;
      float _662 = TonemapParam_001x;
      float _663 = TonemapParam_001z;
      float _664 = TonemapParam_001w;
      float _665 = TonemapParam_002x;
      float _666 = _465 * 0.10000000149011612f;
      float _667 = _666 * _478;
      float _668 = _466 * 0.10000000149011612f;
      float _669 = _668 * _479;
      float _670 = _467 * 0.10000000149011612f;
      float _671 = _670 * _480;
      do {
        if (_31) {
          float _673 = _559 + _483;
          float _674 = _560 + _484;
          float _675 = dot(float2(_673, _674), float2(_673, _674));
          float _676 = _675 * _468;
          float _677 = _676 + 1.0f;
          float _678 = _677 * _473;
          float _679 = _678 * _673;
          float _680 = _678 * _674;
          float _681 = _679 + 0.5f;
          float _682 = _680 + 0.5f;
          float4 _683 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_681, _682), 0.0f);
          float _684 = _683.x;
          float _685 = _683.y;
          float _686 = _683.z;
          float _687 = _570 + _483;
          float _688 = _571 + _484;
          float _689 = dot(float2(_687, _688), float2(_687, _688));
          float _690 = _689 * _468;
          float _691 = _690 + 1.0f;
          float _692 = _687 * _473;
          float _693 = _692 * _691;
          float _694 = _688 * _473;
          float _695 = _694 * _691;
          float _696 = _693 + 0.5f;
          float _697 = _695 + 0.5f;
          float4 _698 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_696, _697), 0.0f);
          float _699 = _698.x;
          float _700 = _698.y;
          float _701 = _698.z;
          float _702 = _699 + _684;
          float _703 = _700 + _685;
          float _704 = _701 + _686;
          float _705 = _581 + _483;
          float _706 = _582 + _484;
          float _707 = dot(float2(_705, _706), float2(_705, _706));
          float _708 = _707 * _468;
          float _709 = _708 + 1.0f;
          float _710 = _705 * _473;
          float _711 = _710 * _709;
          float _712 = _706 * _473;
          float _713 = _712 * _709;
          float _714 = _711 + 0.5f;
          float _715 = _713 + 0.5f;
          float4 _716 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_714, _715), 0.0f);
          float _717 = _716.x;
          float _718 = _716.y;
          float _719 = _716.z;
          float _720 = _702 + _717;
          float _721 = _703 + _718;
          float _722 = _704 + _719;
          float _723 = _592 + _483;
          float _724 = _593 + _484;
          float _725 = dot(float2(_723, _724), float2(_723, _724));
          float _726 = _725 * _468;
          float _727 = _726 + 1.0f;
          float _728 = _723 * _473;
          float _729 = _728 * _727;
          float _730 = _724 * _473;
          float _731 = _730 * _727;
          float _732 = _729 + 0.5f;
          float _733 = _731 + 0.5f;
          float4 _734 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_732, _733), 0.0f);
          float _735 = _734.x;
          float _736 = _734.y;
          float _737 = _734.z;
          float _738 = _720 + _735;
          float _739 = _721 + _736;
          float _740 = _722 + _737;
          float _741 = _603 + _483;
          float _742 = _604 + _484;
          float _743 = dot(float2(_741, _742), float2(_741, _742));
          float _744 = _743 * _468;
          float _745 = _744 + 1.0f;
          float _746 = _741 * _473;
          float _747 = _746 * _745;
          float _748 = _742 * _473;
          float _749 = _748 * _745;
          float _750 = _747 + 0.5f;
          float _751 = _749 + 0.5f;
          float4 _752 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_750, _751), 0.0f);
          float _753 = _752.x;
          float _754 = _752.y;
          float _755 = _752.z;
          float _756 = _738 + _753;
          float _757 = _739 + _754;
          float _758 = _740 + _755;
          float _759 = _614 + _483;
          float _760 = _615 + _484;
          float _761 = dot(float2(_759, _760), float2(_759, _760));
          float _762 = _761 * _468;
          float _763 = _762 + 1.0f;
          float _764 = _759 * _473;
          float _765 = _764 * _763;
          float _766 = _760 * _473;
          float _767 = _766 * _763;
          float _768 = _765 + 0.5f;
          float _769 = _767 + 0.5f;
          float4 _770 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_768, _769), 0.0f);
          float _771 = _770.x;
          float _772 = _770.y;
          float _773 = _770.z;
          float _774 = _756 + _771;
          float _775 = _757 + _772;
          float _776 = _758 + _773;
          float _777 = _625 + _483;
          float _778 = _626 + _484;
          float _779 = dot(float2(_777, _778), float2(_777, _778));
          float _780 = _779 * _468;
          float _781 = _780 + 1.0f;
          float _782 = _777 * _473;
          float _783 = _782 * _781;
          float _784 = _778 * _473;
          float _785 = _784 * _781;
          float _786 = _783 + 0.5f;
          float _787 = _785 + 0.5f;
          float4 _788 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_786, _787), 0.0f);
          float _789 = _788.x;
          float _790 = _788.y;
          float _791 = _788.z;
          float _792 = _774 + _789;
          float _793 = _775 + _790;
          float _794 = _776 + _791;
          float _795 = _636 + _483;
          float _796 = _637 + _484;
          float _797 = dot(float2(_795, _796), float2(_795, _796));
          float _798 = _797 * _468;
          float _799 = _798 + 1.0f;
          float _800 = _795 * _473;
          float _801 = _800 * _799;
          float _802 = _796 * _473;
          float _803 = _802 * _799;
          float _804 = _801 + 0.5f;
          float _805 = _803 + 0.5f;
          float4 _806 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_804, _805), 0.0f);
          float _807 = _806.x;
          float _808 = _806.y;
          float _809 = _806.z;
          float _810 = _792 + _807;
          float _811 = _793 + _808;
          float _812 = _794 + _809;
          float _813 = _647 + _483;
          float _814 = _648 + _484;
          float _815 = dot(float2(_813, _814), float2(_813, _814));
          float _816 = _815 * _468;
          float _817 = _816 + 1.0f;
          float _818 = _813 * _473;
          float _819 = _818 * _817;
          float _820 = _814 * _473;
          float _821 = _820 * _817;
          float _822 = _819 + 0.5f;
          float _823 = _821 + 0.5f;
          float4 _824 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_822, _823), 0.0f);
          float _825 = _824.x;
          float _826 = _824.y;
          float _827 = _824.z;
          float _828 = _810 + _825;
          float _829 = _811 + _826;
          float _830 = _812 + _827;
          float _831 = _650 * _828;
          float _832 = _651 * _829;
          float _833 = _652 * _830;
          float _834 = _831 * _656;
          bool _835 = (_831 >= _654);
          float _836 = _834 * _834;
          float _837 = _834 * 2.0f;
          float _838 = 3.0f - _837;
          float _839 = _836 * _838;
          float _840 = _832 * _656;
          bool _841 = (_832 >= _654);
          float _842 = _840 * _840;
          float _843 = _840 * 2.0f;
          float _844 = 3.0f - _843;
          float _845 = _842 * _844;
          float _846 = _833 * _656;
          bool _847 = (_833 >= _654);
          float _848 = _846 * _846;
          float _849 = _846 * 2.0f;
          float _850 = 3.0f - _849;
          float _851 = _848 * _850;
          float _852 = 1.0f - _839;
          float _853 = _835 ? 0.0f : _852;
          float _854 = 1.0f - _845;
          float _855 = _841 ? 0.0f : _854;
          float _856 = 1.0f - _851;
          float _857 = _847 ? 0.0f : _856;
          bool _858 = (_831 < _658);
          bool _859 = (_832 < _658);
          bool _860 = (_833 < _658);
          float _861 = _858 ? 0.0f : 1.0f;
          float _862 = _859 ? 0.0f : 1.0f;
          float _863 = _860 ? 0.0f : 1.0f;
          float _864 = 1.0f - _861;
          float _865 = _864 - _853;
          float _866 = 1.0f - _862;
          float _867 = _866 - _855;
          float _868 = 1.0f - _863;
          float _869 = _868 - _857;
          float _870 = log2(_834);
          float _871 = log2(_840);
          float _872 = log2(_846);
          float _873 = _870 * _659;
          float _874 = _871 * _659;
          float _875 = _872 * _659;
          float _876 = exp2(_873);
          float _877 = exp2(_874);
          float _878 = exp2(_875);
          float _879 = _853 * _876;
          float _880 = _879 * _654;
          float _881 = _877 * _855;
          float _882 = _881 * _654;
          float _883 = _878 * _857;
          float _884 = _883 * _654;
          float _885 = _660 * _831;
          float _886 = _660 * _832;
          float _887 = _660 * _833;
          float _888 = _885 + _661;
          float _889 = _886 + _661;
          float _890 = _887 + _661;
          float _891 = _888 * _865;
          float _892 = _889 * _867;
          float _893 = _890 * _869;
          float _894 = _664 * _831;
          float _895 = _664 * _832;
          float _896 = _664 * _833;
          float _897 = _894 + _665;
          float _898 = _895 + _665;
          float _899 = _896 + _665;
          float _900 = exp2(_897);
          float _901 = exp2(_898);
          float _902 = exp2(_899);
          float _903 = _900 * _663;
          float _904 = _901 * _663;
          float _905 = _902 * _663;
          float _906 = _662 - _903;
          float _907 = _662 - _904;
          float _908 = _662 - _905;
          float _909 = _906 * _861;
          float _910 = _907 * _862;
          float _911 = _908 * _863;
          float _912 = _880 + _667;
          float _913 = _912 + _891;
          float _914 = _913 + _909;
          float _915 = _882 + _669;
          float _916 = _915 + _892;
          float _917 = _916 + _910;
          float _918 = _884 + _671;
          float _919 = _918 + _893;
          float _920 = _919 + _911;
          _1435 = _914;
          _1436 = _917;
          _1437 = _920;
        } else {
          float _922 = _483 + 0.5f;
          float _923 = _922 + _559;
          float _924 = _484 + 0.5f;
          float _925 = _924 + _560;
          float _926 = _922 + _570;
          float _927 = _924 + _571;
          float _928 = _922 + _581;
          float _929 = _924 + _582;
          float _930 = _922 + _592;
          float _931 = _924 + _593;
          float _932 = _922 + _603;
          float _933 = _924 + _604;
          float _934 = _922 + _614;
          float _935 = _924 + _615;
          float _936 = _922 + _625;
          float _937 = _924 + _626;
          float _938 = _922 + _636;
          float _939 = _924 + _637;
          float _940 = _922 + _647;
          float _941 = _924 + _648;
          if (_33) {
            float _943 = _923 * 2.0f;
            float _944 = _925 * 2.0f;
            float _945 = _943 + -1.0f;
            float _946 = _944 + -1.0f;
            float _947 = _945 * _945;
            float _948 = _947 + 1.0f;
            float _949 = sqrt(_948);
            float _950 = 1.0f / _949;
            float _951 = _950 + _469;
            float _952 = _949 * _471;
            float _953 = _952 * _951;
            float _954 = _950 + -1.0f;
            float _955 = _954 * _470;
            float _956 = _955 + 1.0f;
            float _957 = _472 * 0.5f;
            float _958 = _957 * _953;
            float _959 = _958 * _945;
            float _960 = _957 * _956;
            float _961 = _960 * _953;
            float _962 = _961 * _946;
            float _963 = _959 + 0.5f;
            float _964 = _962 + 0.5f;
            float4 _965 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_963, _964), 0.0f);
            float _966 = _965.x;
            float _967 = _965.y;
            float _968 = _965.z;
            float _969 = _926 * 2.0f;
            float _970 = _927 * 2.0f;
            float _971 = _969 + -1.0f;
            float _972 = _970 + -1.0f;
            float _973 = _971 * _971;
            float _974 = _973 + 1.0f;
            float _975 = sqrt(_974);
            float _976 = 1.0f / _975;
            float _977 = _976 + _469;
            float _978 = _975 * _471;
            float _979 = _978 * _977;
            float _980 = _976 + -1.0f;
            float _981 = _980 * _470;
            float _982 = _981 + 1.0f;
            float _983 = _957 * _971;
            float _984 = _983 * _979;
            float _985 = _957 * _972;
            float _986 = _985 * _982;
            float _987 = _986 * _979;
            float _988 = _984 + 0.5f;
            float _989 = _987 + 0.5f;
            float4 _990 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_988, _989), 0.0f);
            float _991 = _990.x;
            float _992 = _990.y;
            float _993 = _990.z;
            float _994 = _991 + _966;
            float _995 = _992 + _967;
            float _996 = _993 + _968;
            float _997 = _928 * 2.0f;
            float _998 = _929 * 2.0f;
            float _999 = _997 + -1.0f;
            float _1000 = _998 + -1.0f;
            float _1001 = _999 * _999;
            float _1002 = _1001 + 1.0f;
            float _1003 = sqrt(_1002);
            float _1004 = 1.0f / _1003;
            float _1005 = _1004 + _469;
            float _1006 = _1003 * _471;
            float _1007 = _1006 * _1005;
            float _1008 = _1004 + -1.0f;
            float _1009 = _1008 * _470;
            float _1010 = _1009 + 1.0f;
            float _1011 = _957 * _999;
            float _1012 = _1011 * _1007;
            float _1013 = _957 * _1000;
            float _1014 = _1013 * _1010;
            float _1015 = _1014 * _1007;
            float _1016 = _1012 + 0.5f;
            float _1017 = _1015 + 0.5f;
            float4 _1018 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1016, _1017), 0.0f);
            float _1019 = _1018.x;
            float _1020 = _1018.y;
            float _1021 = _1018.z;
            float _1022 = _994 + _1019;
            float _1023 = _995 + _1020;
            float _1024 = _996 + _1021;
            float _1025 = _930 * 2.0f;
            float _1026 = _931 * 2.0f;
            float _1027 = _1025 + -1.0f;
            float _1028 = _1026 + -1.0f;
            float _1029 = _1027 * _1027;
            float _1030 = _1029 + 1.0f;
            float _1031 = sqrt(_1030);
            float _1032 = 1.0f / _1031;
            float _1033 = _1032 + _469;
            float _1034 = _1031 * _471;
            float _1035 = _1034 * _1033;
            float _1036 = _1032 + -1.0f;
            float _1037 = _1036 * _470;
            float _1038 = _1037 + 1.0f;
            float _1039 = _957 * _1027;
            float _1040 = _1039 * _1035;
            float _1041 = _957 * _1028;
            float _1042 = _1041 * _1038;
            float _1043 = _1042 * _1035;
            float _1044 = _1040 + 0.5f;
            float _1045 = _1043 + 0.5f;
            float4 _1046 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1044, _1045), 0.0f);
            float _1047 = _1046.x;
            float _1048 = _1046.y;
            float _1049 = _1046.z;
            float _1050 = _1022 + _1047;
            float _1051 = _1023 + _1048;
            float _1052 = _1024 + _1049;
            float _1053 = _932 * 2.0f;
            float _1054 = _933 * 2.0f;
            float _1055 = _1053 + -1.0f;
            float _1056 = _1054 + -1.0f;
            float _1057 = _1055 * _1055;
            float _1058 = _1057 + 1.0f;
            float _1059 = sqrt(_1058);
            float _1060 = 1.0f / _1059;
            float _1061 = _1060 + _469;
            float _1062 = _1059 * _471;
            float _1063 = _1062 * _1061;
            float _1064 = _1060 + -1.0f;
            float _1065 = _1064 * _470;
            float _1066 = _1065 + 1.0f;
            float _1067 = _957 * _1055;
            float _1068 = _1067 * _1063;
            float _1069 = _957 * _1056;
            float _1070 = _1069 * _1066;
            float _1071 = _1070 * _1063;
            float _1072 = _1068 + 0.5f;
            float _1073 = _1071 + 0.5f;
            float4 _1074 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1072, _1073), 0.0f);
            float _1075 = _1074.x;
            float _1076 = _1074.y;
            float _1077 = _1074.z;
            float _1078 = _1050 + _1075;
            float _1079 = _1051 + _1076;
            float _1080 = _1052 + _1077;
            float _1081 = _934 * 2.0f;
            float _1082 = _935 * 2.0f;
            float _1083 = _1081 + -1.0f;
            float _1084 = _1082 + -1.0f;
            float _1085 = _1083 * _1083;
            float _1086 = _1085 + 1.0f;
            float _1087 = sqrt(_1086);
            float _1088 = 1.0f / _1087;
            float _1089 = _1088 + _469;
            float _1090 = _1087 * _471;
            float _1091 = _1090 * _1089;
            float _1092 = _1088 + -1.0f;
            float _1093 = _1092 * _470;
            float _1094 = _1093 + 1.0f;
            float _1095 = _957 * _1083;
            float _1096 = _1095 * _1091;
            float _1097 = _957 * _1084;
            float _1098 = _1097 * _1094;
            float _1099 = _1098 * _1091;
            float _1100 = _1096 + 0.5f;
            float _1101 = _1099 + 0.5f;
            float4 _1102 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1100, _1101), 0.0f);
            float _1103 = _1102.x;
            float _1104 = _1102.y;
            float _1105 = _1102.z;
            float _1106 = _1078 + _1103;
            float _1107 = _1079 + _1104;
            float _1108 = _1080 + _1105;
            float _1109 = _936 * 2.0f;
            float _1110 = _937 * 2.0f;
            float _1111 = _1109 + -1.0f;
            float _1112 = _1110 + -1.0f;
            float _1113 = _1111 * _1111;
            float _1114 = _1113 + 1.0f;
            float _1115 = sqrt(_1114);
            float _1116 = 1.0f / _1115;
            float _1117 = _1116 + _469;
            float _1118 = _1115 * _471;
            float _1119 = _1118 * _1117;
            float _1120 = _1116 + -1.0f;
            float _1121 = _1120 * _470;
            float _1122 = _1121 + 1.0f;
            float _1123 = _957 * _1111;
            float _1124 = _1123 * _1119;
            float _1125 = _957 * _1112;
            float _1126 = _1125 * _1122;
            float _1127 = _1126 * _1119;
            float _1128 = _1124 + 0.5f;
            float _1129 = _1127 + 0.5f;
            float4 _1130 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1128, _1129), 0.0f);
            float _1131 = _1130.x;
            float _1132 = _1130.y;
            float _1133 = _1130.z;
            float _1134 = _1106 + _1131;
            float _1135 = _1107 + _1132;
            float _1136 = _1108 + _1133;
            float _1137 = _938 * 2.0f;
            float _1138 = _939 * 2.0f;
            float _1139 = _1137 + -1.0f;
            float _1140 = _1138 + -1.0f;
            float _1141 = _1139 * _1139;
            float _1142 = _1141 + 1.0f;
            float _1143 = sqrt(_1142);
            float _1144 = 1.0f / _1143;
            float _1145 = _1144 + _469;
            float _1146 = _1143 * _471;
            float _1147 = _1146 * _1145;
            float _1148 = _1144 + -1.0f;
            float _1149 = _1148 * _470;
            float _1150 = _1149 + 1.0f;
            float _1151 = _957 * _1139;
            float _1152 = _1151 * _1147;
            float _1153 = _957 * _1140;
            float _1154 = _1153 * _1150;
            float _1155 = _1154 * _1147;
            float _1156 = _1152 + 0.5f;
            float _1157 = _1155 + 0.5f;
            float4 _1158 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1156, _1157), 0.0f);
            float _1159 = _1158.x;
            float _1160 = _1158.y;
            float _1161 = _1158.z;
            float _1162 = _1134 + _1159;
            float _1163 = _1135 + _1160;
            float _1164 = _1136 + _1161;
            float _1165 = _940 * 2.0f;
            float _1166 = _941 * 2.0f;
            float _1167 = _1165 + -1.0f;
            float _1168 = _1166 + -1.0f;
            float _1169 = _1167 * _1167;
            float _1170 = _1169 + 1.0f;
            float _1171 = sqrt(_1170);
            float _1172 = 1.0f / _1171;
            float _1173 = _1172 + _469;
            float _1174 = _1171 * _471;
            float _1175 = _1174 * _1173;
            float _1176 = _1172 + -1.0f;
            float _1177 = _1176 * _470;
            float _1178 = _1177 + 1.0f;
            float _1179 = _957 * _1167;
            float _1180 = _1179 * _1175;
            float _1181 = _957 * _1168;
            float _1182 = _1181 * _1178;
            float _1183 = _1182 * _1175;
            float _1184 = _1180 + 0.5f;
            float _1185 = _1183 + 0.5f;
            float4 _1186 = RE_POSTPROCESS_Color.SampleLevel(BilinearBorder, float2(_1184, _1185), 0.0f);
            float _1187 = _1186.x;
            float _1188 = _1186.y;
            float _1189 = _1186.z;
            float _1190 = _1162 + _1187;
            float _1191 = _1163 + _1188;
            float _1192 = _1164 + _1189;
            float _1193 = _650 * _1190;
            float _1194 = _651 * _1191;
            float _1195 = _652 * _1192;
            float _1196 = _1193 * _656;
            bool _1197 = (_1193 >= _654);
            float _1198 = _1196 * _1196;
            float _1199 = _1196 * 2.0f;
            float _1200 = 3.0f - _1199;
            float _1201 = _1198 * _1200;
            float _1202 = _1194 * _656;
            bool _1203 = (_1194 >= _654);
            float _1204 = _1202 * _1202;
            float _1205 = _1202 * 2.0f;
            float _1206 = 3.0f - _1205;
            float _1207 = _1204 * _1206;
            float _1208 = _1195 * _656;
            bool _1209 = (_1195 >= _654);
            float _1210 = _1208 * _1208;
            float _1211 = _1208 * 2.0f;
            float _1212 = 3.0f - _1211;
            float _1213 = _1210 * _1212;
            float _1214 = 1.0f - _1201;
            float _1215 = _1197 ? 0.0f : _1214;
            float _1216 = 1.0f - _1207;
            float _1217 = _1203 ? 0.0f : _1216;
            float _1218 = 1.0f - _1213;
            float _1219 = _1209 ? 0.0f : _1218;
            bool _1220 = (_1193 < _658);
            bool _1221 = (_1194 < _658);
            bool _1222 = (_1195 < _658);
            float _1223 = _1220 ? 0.0f : 1.0f;
            float _1224 = _1221 ? 0.0f : 1.0f;
            float _1225 = _1222 ? 0.0f : 1.0f;
            float _1226 = 1.0f - _1223;
            float _1227 = _1226 - _1215;
            float _1228 = 1.0f - _1224;
            float _1229 = _1228 - _1217;
            float _1230 = 1.0f - _1225;
            float _1231 = _1230 - _1219;
            float _1232 = log2(_1196);
            float _1233 = log2(_1202);
            float _1234 = log2(_1208);
            float _1235 = _1232 * _659;
            float _1236 = _1233 * _659;
            float _1237 = _1234 * _659;
            float _1238 = exp2(_1235);
            float _1239 = exp2(_1236);
            float _1240 = exp2(_1237);
            float _1241 = _1215 * _1238;
            float _1242 = _1241 * _654;
            float _1243 = _1239 * _1217;
            float _1244 = _1243 * _654;
            float _1245 = _1240 * _1219;
            float _1246 = _1245 * _654;
            float _1247 = _660 * _1193;
            float _1248 = _660 * _1194;
            float _1249 = _660 * _1195;
            float _1250 = _1247 + _661;
            float _1251 = _1248 + _661;
            float _1252 = _1249 + _661;
            float _1253 = _1250 * _1227;
            float _1254 = _1251 * _1229;
            float _1255 = _1252 * _1231;
            float _1256 = _664 * _1193;
            float _1257 = _664 * _1194;
            float _1258 = _664 * _1195;
            float _1259 = _1256 + _665;
            float _1260 = _1257 + _665;
            float _1261 = _1258 + _665;
            float _1262 = exp2(_1259);
            float _1263 = exp2(_1260);
            float _1264 = exp2(_1261);
            float _1265 = _1262 * _663;
            float _1266 = _1263 * _663;
            float _1267 = _1264 * _663;
            float _1268 = _662 - _1265;
            float _1269 = _662 - _1266;
            float _1270 = _662 - _1267;
            float _1271 = _1268 * _1223;
            float _1272 = _1269 * _1224;
            float _1273 = _1270 * _1225;
            float _1274 = _1242 + _667;
            float _1275 = _1274 + _1253;
            float _1276 = _1275 + _1271;
            float _1277 = _1244 + _669;
            float _1278 = _1277 + _1254;
            float _1279 = _1278 + _1272;
            float _1280 = _1246 + _671;
            float _1281 = _1280 + _1255;
            float _1282 = _1281 + _1273;
            _1435 = _1276;
            _1436 = _1279;
            _1437 = _1282;
          } else {
            float4 _1284 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_923, _925), 0.0f);
            float _1285 = _1284.x;
            float _1286 = _1284.y;
            float _1287 = _1284.z;
            float4 _1288 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_926, _927), 0.0f);
            float _1289 = _1288.x;
            float _1290 = _1288.y;
            float _1291 = _1288.z;
            float _1292 = _1289 + _1285;
            float _1293 = _1290 + _1286;
            float _1294 = _1291 + _1287;
            float4 _1295 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_928, _929), 0.0f);
            float _1296 = _1295.x;
            float _1297 = _1295.y;
            float _1298 = _1295.z;
            float _1299 = _1292 + _1296;
            float _1300 = _1293 + _1297;
            float _1301 = _1294 + _1298;
            float4 _1302 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_930, _931), 0.0f);
            float _1303 = _1302.x;
            float _1304 = _1302.y;
            float _1305 = _1302.z;
            float _1306 = _1299 + _1303;
            float _1307 = _1300 + _1304;
            float _1308 = _1301 + _1305;
            float4 _1309 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_932, _933), 0.0f);
            float _1310 = _1309.x;
            float _1311 = _1309.y;
            float _1312 = _1309.z;
            float _1313 = _1306 + _1310;
            float _1314 = _1307 + _1311;
            float _1315 = _1308 + _1312;
            float4 _1316 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_934, _935), 0.0f);
            float _1317 = _1316.x;
            float _1318 = _1316.y;
            float _1319 = _1316.z;
            float _1320 = _1313 + _1317;
            float _1321 = _1314 + _1318;
            float _1322 = _1315 + _1319;
            float4 _1323 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_936, _937), 0.0f);
            float _1324 = _1323.x;
            float _1325 = _1323.y;
            float _1326 = _1323.z;
            float _1327 = _1320 + _1324;
            float _1328 = _1321 + _1325;
            float _1329 = _1322 + _1326;
            float4 _1330 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_938, _939), 0.0f);
            float _1331 = _1330.x;
            float _1332 = _1330.y;
            float _1333 = _1330.z;
            float _1334 = _1327 + _1331;
            float _1335 = _1328 + _1332;
            float _1336 = _1329 + _1333;
            float4 _1337 = RE_POSTPROCESS_Color.SampleLevel(BilinearClamp, float2(_940, _941), 0.0f);
            float _1338 = _1337.x;
            float _1339 = _1337.y;
            float _1340 = _1337.z;
            float _1341 = _1334 + _1338;
            float _1342 = _1335 + _1339;
            float _1343 = _1336 + _1340;
            float _1344 = _650 * _1341;
            float _1345 = _651 * _1342;
            float _1346 = _652 * _1343;
            float _1347 = _1344 * _656;
            bool _1348 = (_1344 >= _654);
            float _1349 = _1347 * _1347;
            float _1350 = _1347 * 2.0f;
            float _1351 = 3.0f - _1350;
            float _1352 = _1349 * _1351;
            float _1353 = _1345 * _656;
            bool _1354 = (_1345 >= _654);
            float _1355 = _1353 * _1353;
            float _1356 = _1353 * 2.0f;
            float _1357 = 3.0f - _1356;
            float _1358 = _1355 * _1357;
            float _1359 = _1346 * _656;
            bool _1360 = (_1346 >= _654);
            float _1361 = _1359 * _1359;
            float _1362 = _1359 * 2.0f;
            float _1363 = 3.0f - _1362;
            float _1364 = _1361 * _1363;
            float _1365 = 1.0f - _1352;
            float _1366 = _1348 ? 0.0f : _1365;
            float _1367 = 1.0f - _1358;
            float _1368 = _1354 ? 0.0f : _1367;
            float _1369 = 1.0f - _1364;
            float _1370 = _1360 ? 0.0f : _1369;
            bool _1371 = (_1344 < _658);
            bool _1372 = (_1345 < _658);
            bool _1373 = (_1346 < _658);
            float _1374 = _1371 ? 0.0f : 1.0f;
            float _1375 = _1372 ? 0.0f : 1.0f;
            float _1376 = _1373 ? 0.0f : 1.0f;
            float _1377 = 1.0f - _1374;
            float _1378 = _1377 - _1366;
            float _1379 = 1.0f - _1375;
            float _1380 = _1379 - _1368;
            float _1381 = 1.0f - _1376;
            float _1382 = _1381 - _1370;
            float _1383 = log2(_1347);
            float _1384 = log2(_1353);
            float _1385 = log2(_1359);
            float _1386 = _1383 * _659;
            float _1387 = _1384 * _659;
            float _1388 = _1385 * _659;
            float _1389 = exp2(_1386);
            float _1390 = exp2(_1387);
            float _1391 = exp2(_1388);
            float _1392 = _1366 * _1389;
            float _1393 = _1392 * _654;
            float _1394 = _1390 * _1368;
            float _1395 = _1394 * _654;
            float _1396 = _1391 * _1370;
            float _1397 = _1396 * _654;
            float _1398 = _660 * _1344;
            float _1399 = _660 * _1345;
            float _1400 = _660 * _1346;
            float _1401 = _1398 + _661;
            float _1402 = _1399 + _661;
            float _1403 = _1400 + _661;
            float _1404 = _1401 * _1378;
            float _1405 = _1402 * _1380;
            float _1406 = _1403 * _1382;
            float _1407 = _664 * _1344;
            float _1408 = _664 * _1345;
            float _1409 = _664 * _1346;
            float _1410 = _1407 + _665;
            float _1411 = _1408 + _665;
            float _1412 = _1409 + _665;
            float _1413 = exp2(_1410);
            float _1414 = exp2(_1411);
            float _1415 = exp2(_1412);
            float _1416 = _1413 * _663;
            float _1417 = _1414 * _663;
            float _1418 = _1415 * _663;
            float _1419 = _662 - _1416;
            float _1420 = _662 - _1417;
            float _1421 = _662 - _1418;
            float _1422 = _1419 * _1374;
            float _1423 = _1420 * _1375;
            float _1424 = _1421 * _1376;
            float _1425 = _1393 + _667;
            float _1426 = _1425 + _1404;
            float _1427 = _1426 + _1422;
            float _1428 = _1395 + _669;
            float _1429 = _1428 + _1405;
            float _1430 = _1429 + _1423;
            float _1431 = _1397 + _671;
            float _1432 = _1431 + _1406;
            float _1433 = _1432 + _1424;
            _1435 = _1427;
            _1436 = _1430;
            _1437 = _1433;
          }
        }
        bool _1438 = (_488 > 0.0f);
        _1463 = _1435;
        _1464 = _1436;
        _1465 = _1437;
        do {
          if (_1438) {
            float _1440 = _511 * _511;
            float _1441 = _513 * _513;
            float _1442 = _1440 + _1441;
            float _1443 = sqrt(_1442);
            float _1444 = _1443 * _485;
            float _1445 = _1444 + _486;
            float _1446 = saturate(_1445);
            float _1447 = _1446 * 2.0f;
            float _1448 = 3.0f - _1447;
            float _1449 = _1446 * _1446;
            float _1450 = _1449 * _488;
            float _1451 = _1450 * _1448;
            float _1452 = _1451 + _489;
            float _1453 = _1435 - _465;
            float _1454 = _1436 - _466;
            float _1455 = _1437 - _467;
            float _1456 = _1452 * _1453;
            float _1457 = _1452 * _1454;
            float _1458 = _1452 * _1455;
            float _1459 = _1456 + _465;
            float _1460 = _1457 + _466;
            float _1461 = _1458 + _467;
            _1463 = _1459;
            _1464 = _1460;
            _1465 = _1461;
          }
          float _1466 = _1463 - _465;
          float _1467 = _1464 - _466;
          float _1468 = _1465 - _467;
          float _1469 = _1466 * _501;
          float _1470 = _1467 * _501;
          float _1471 = _1468 * _501;
          float _1472 = _1469 + _465;
          float _1473 = _1470 + _466;
          float _1474 = _1471 + _467;
          _1476 = _1472;
          _1477 = _1473;
          _1478 = _1474;
        } while (false);
      } while (false);
    }
  }
  int _1479 = _25 & 2;
  bool _1480 = (_1479 == 0);
  _1577 = _1476;
  _1578 = _1477;
  _1579 = _1478;
  if (!_1480) {
    float _1483 = FilmGrainParam_000x;
    float _1484 = FilmGrainParam_000y;
    float _1485 = FilmGrainParam_000z;
    float _1486 = FilmGrainParam_000w;
    float _1488 = FilmGrainParam_001x;
    float _1489 = FilmGrainParam_001y;
    float _1490 = FilmGrainParam_001z;
    float _1491 = FilmGrainParam_001w;
    float _1493 = SceneInfo_023x;
    float _1494 = SceneInfo_023y;
    float _1495 = _1493 * _1485;
    float _1496 = _1494 * _1486;
    float _1497 = _1495 + _22;
    float _1498 = _1496 + _23;
    float _1499 = _1497 * _1491;
    float _1500 = floor(_1499);
    float _1501 = _1498 * _1491;
    float _1502 = floor(_1501);
    float _1503 = dot(float2(_1500, _1502), float2(0.0671105608344078f, 0.005837149918079376f));
    float _1504 = frac(_1503);
    float _1505 = _1504 * 52.98291778564453f;
    float _1506 = frac(_1505);
    bool _1507 = (_1506 < _1488);
    _1520 = 0.0f;
    do {
      if (_1507) {
        float _1509 = _1502 * _1500;
        uint _1510 = uint(_1509);
        uint _1511 = _1510 ^ 12345391;
        uint _1512 = _1511 * 3635641;
        uint _1513 = _1511 * 232681024;
        uint _1514 = _1512 >> 26;
        int _1515 = _1514 | _1513;
        uint _1516 = _1515 ^ _1512;
        float _1517 = float(_1516);
        float _1518 = _1517 * 2.3283064365386963e-10f;
        _1520 = _1518;
      }
      float _1521 = _1506 * 757.4846801757812f;
      float _1522 = frac(_1521);
      bool _1523 = (_1522 < _1488);
      _1536 = 0.0f;
      do {
        if (_1523) {
          int _1525 = (int)_1522;
          uint _1526 = _1525 ^ 12345391;
          uint _1527 = _1526 * 3635641;
          uint _1528 = _1526 * 232681024;
          uint _1529 = _1527 >> 26;
          int _1530 = _1529 | _1528;
          uint _1531 = _1530 ^ _1527;
          float _1532 = float(_1531);
          float _1533 = _1532 * 2.3283064365386963e-10f;
          float _1534 = _1533 + -0.5f;
          _1536 = _1534;
        }
        float _1537 = _1522 * 757.4846801757812f;
        float _1538 = frac(_1537);
        bool _1539 = (_1538 < _1488);
        _1552 = 0.0f;
        do {
          if (_1539) {
            int _1541 = (int)_1538;
            uint _1542 = _1541 ^ 12345391;
            uint _1543 = _1542 * 3635641;
            uint _1544 = _1542 * 232681024;
            uint _1545 = _1543 >> 26;
            int _1546 = _1545 | _1544;
            uint _1547 = _1546 ^ _1543;
            float _1548 = float(_1547);
            float _1549 = _1548 * 2.3283064365386963e-10f;
            float _1550 = _1549 + -0.5f;
            _1552 = _1550;
          }
          float _1553 = _1520 * _1483;
          float _1554 = _1552 * _1484;
          float _1555 = _1536 * _1484;
          float _1556 = mad(_1555, 1.4019999504089355f, _1553);
          float _1557 = mad(_1554, -0.3440000116825104f, _1553);
          float _1558 = mad(_1555, -0.7139999866485596f, _1557);
          float _1559 = mad(_1554, 1.7719999551773071f, _1553);
          float _1560 = dot(float3(_1476, _1477, _1478), float3(0.29899999499320984f, -0.16899999976158142f, 0.5f));
          float _1561 = saturate(_1560);
          float _1562 = 1.0f - _1561;
          float _1563 = log2(_1562);
          float _1564 = _1563 * _1489;
          float _1565 = exp2(_1564);
          float _1566 = _1565 * _1490;
          float _1567 = _1556 - _1476;
          float _1568 = _1558 - _1477;
          float _1569 = _1559 - _1478;
          float _1570 = _1566 * _1567;
          float _1571 = _1566 * _1568;
          float _1572 = _1566 * _1569;
          float _1573 = _1570 + _1476;
          float _1574 = _1571 + _1477;
          float _1575 = _1572 + _1478;
          _1577 = _1573;
          _1578 = _1574;
          _1579 = _1575;
        } while (false);
      } while (false);
    } while (false);
  }
  int _1580 = _25 & 4;
  bool _1581 = (_1580 == 0);
  _1790 = _1577;
  _1791 = _1578;
  _1792 = _1579;
  if (!_1581) {
    float _1584 = ColorCorrectTexture_000y;
    float _1585 = ColorCorrectTexture_000z;
    float _1586 = ColorCorrectTexture_000w;
    float _1588 = ColorCorrectTexture_001x;
    float _1589 = ColorCorrectTexture_001y;
    float _1590 = ColorCorrectTexture_001z;
    float _1592 = ColorCorrectTexture_002x;
    float _1593 = ColorCorrectTexture_002y;
    float _1594 = ColorCorrectTexture_002z;
    float _1596 = ColorCorrectTexture_003x;
    float _1597 = ColorCorrectTexture_003y;
    float _1598 = ColorCorrectTexture_003z;
    float _1600 = ColorCorrectTexture_004x;
    float _1601 = ColorCorrectTexture_004y;
    float _1602 = ColorCorrectTexture_004z;
    float _1603 = max(_1577, _1578);
    float _1604 = max(_1603, _1579);
    bool _1605 = (_1604 > 1.0f);
    _1611 = _1577;
    _1612 = _1578;
    _1613 = _1579;
    do {
      if (_1605) {
        float _1607 = _1577 / _1604;
        float _1608 = _1578 / _1604;
        float _1609 = _1579 / _1604;
        _1611 = _1607;
        _1612 = _1608;
        _1613 = _1609;
      }
      float _1614 = _1586 * 0.5f;
      bool _1615 = !(_1611 <= 0.0031308000907301903f);
      do {
        if (!_1615) {
          float _1617 = _1611 * 12.920000076293945f;
          _1625 = _1617;
        } else {
          float _1619 = log2(_1611);
          float _1620 = _1619 * 0.4166666567325592f;
          float _1621 = exp2(_1620);
          float _1622 = _1621 * 1.0549999475479126f;
          float _1623 = _1622 + -0.054999999701976776f;
          _1625 = _1623;
        }
        bool _1626 = !(_1612 <= 0.0031308000907301903f);
        do {
          if (!_1626) {
            float _1628 = _1612 * 12.920000076293945f;
            _1636 = _1628;
          } else {
            float _1630 = log2(_1612);
            float _1631 = _1630 * 0.4166666567325592f;
            float _1632 = exp2(_1631);
            float _1633 = _1632 * 1.0549999475479126f;
            float _1634 = _1633 + -0.054999999701976776f;
            _1636 = _1634;
          }
          bool _1637 = !(_1613 <= 0.0031308000907301903f);
          do {
            if (!_1637) {
              float _1639 = _1613 * 12.920000076293945f;
              _1647 = _1639;
            } else {
              float _1641 = log2(_1613);
              float _1642 = _1641 * 0.4166666567325592f;
              float _1643 = exp2(_1642);
              float _1644 = _1643 * 1.0549999475479126f;
              float _1645 = _1644 + -0.054999999701976776f;
              _1647 = _1645;
            }
            float _1648 = 1.0f - _1586;
            float _1649 = _1625 * _1648;
            float _1650 = _1636 * _1648;
            float _1651 = _1647 * _1648;
            float _1652 = _1649 + _1614;
            float _1653 = _1650 + _1614;
            float _1654 = _1651 + _1614;
#if 0
            float4 _1655 = tTextureMap0.SampleLevel(TrilinearClamp, float3(_1652, _1653, _1654), 0.0f);
#else
            float3 _1655 = LUTBlackCorrection(float3(_1611, _1612, _1613), tTextureMap0, lut_config);
#endif
            float _1656 = _1655.x;
            float _1657 = _1655.y;
            float _1658 = _1655.z;
            bool _1659 = (_1584 > 0.0f);
            do {
              if (_1659) {
#if 0
                float4 _1661 = tTextureMap1.SampleLevel(TrilinearClamp, float3(_1652, _1653, _1654), 0.0f);
#else
                float3 _1661 = LUTBlackCorrection(float3(_1611, _1612, _1613), tTextureMap1, lut_config);
#endif
                float _1662 = _1661.x;
                float _1663 = _1661.y;
                float _1664 = _1661.z;
                float _1665 = _1662 - _1656;
                float _1666 = _1663 - _1657;
                float _1667 = _1664 - _1658;
                float _1668 = _1665 * _1584;
                float _1669 = _1666 * _1584;
                float _1670 = _1667 * _1584;
                float _1671 = _1668 + _1656;
                float _1672 = _1669 + _1657;
                float _1673 = _1670 + _1658;
                bool _1674 = (_1585 > 0.0f);
                _1770 = _1671;
                _1771 = _1672;
                _1772 = _1673;
                if (_1674) {
                  bool _1676 = !(_1671 <= 0.0031308000907301903f);
                  do {
                    if (!_1676) {
                      float _1678 = _1671 * 12.920000076293945f;
                      _1686 = _1678;
                    } else {
                      float _1680 = log2(_1671);
                      float _1681 = _1680 * 0.4166666567325592f;
                      float _1682 = exp2(_1681);
                      float _1683 = _1682 * 1.0549999475479126f;
                      float _1684 = _1683 + -0.054999999701976776f;
                      _1686 = _1684;
                    }
                    bool _1687 = !(_1672 <= 0.0031308000907301903f);
                    do {
                      if (!_1687) {
                        float _1689 = _1672 * 12.920000076293945f;
                        _1697 = _1689;
                      } else {
                        float _1691 = log2(_1672);
                        float _1692 = _1691 * 0.4166666567325592f;
                        float _1693 = exp2(_1692);
                        float _1694 = _1693 * 1.0549999475479126f;
                        float _1695 = _1694 + -0.054999999701976776f;
                        _1697 = _1695;
                      }
                      bool _1698 = !(_1673 <= 0.0031308000907301903f);
                      do {
                        if (!_1698) {
                          float _1700 = _1673 * 12.920000076293945f;
                          _1708 = _1700;
                        } else {
                          float _1702 = log2(_1673);
                          float _1703 = _1702 * 0.4166666567325592f;
                          float _1704 = exp2(_1703);
                          float _1705 = _1704 * 1.0549999475479126f;
                          float _1706 = _1705 + -0.054999999701976776f;
                          _1708 = _1706;
                        }
#if 0
                        float4 _1709 = tTextureMap2.SampleLevel(TrilinearClamp, float3(_1686, _1697, _1708), 0.0f);
#else
                        float3 _1709 = LUTBlackCorrection(float3(_1770, _1771, _1772), tTextureMap2, lut_config);
#endif
                        float _1710 = _1709.x;
                        float _1711 = _1709.y;
                        float _1712 = _1709.z;
                        float _1713 = _1710 - _1671;
                        float _1714 = _1711 - _1672;
                        float _1715 = _1712 - _1673;
                        float _1716 = _1713 * _1585;
                        float _1717 = _1714 * _1585;
                        float _1718 = _1715 * _1585;
                        float _1719 = _1716 + _1671;
                        float _1720 = _1717 + _1672;
                        float _1721 = _1718 + _1673;
                        _1770 = _1719;
                        _1771 = _1720;
                        _1772 = _1721;
                      } while (false);
                    } while (false);
                  } while (false);
                }
              } else {
                bool _1723 = !(_1656 <= 0.0031308000907301903f);
                do {
                  if (!_1723) {
                    float _1725 = _1656 * 12.920000076293945f;
                    _1733 = _1725;
                  } else {
                    float _1727 = log2(_1656);
                    float _1728 = _1727 * 0.4166666567325592f;
                    float _1729 = exp2(_1728);
                    float _1730 = _1729 * 1.0549999475479126f;
                    float _1731 = _1730 + -0.054999999701976776f;
                    _1733 = _1731;
                  }
                  bool _1734 = !(_1657 <= 0.0031308000907301903f);
                  do {
                    if (!_1734) {
                      float _1736 = _1657 * 12.920000076293945f;
                      _1744 = _1736;
                    } else {
                      float _1738 = log2(_1657);
                      float _1739 = _1738 * 0.4166666567325592f;
                      float _1740 = exp2(_1739);
                      float _1741 = _1740 * 1.0549999475479126f;
                      float _1742 = _1741 + -0.054999999701976776f;
                      _1744 = _1742;
                    }
                    bool _1745 = !(_1658 <= 0.0031308000907301903f);
                    do {
                      if (!_1745) {
                        float _1747 = _1658 * 12.920000076293945f;
                        _1755 = _1747;
                      } else {
                        float _1749 = log2(_1658);
                        float _1750 = _1749 * 0.4166666567325592f;
                        float _1751 = exp2(_1750);
                        float _1752 = _1751 * 1.0549999475479126f;
                        float _1753 = _1752 + -0.054999999701976776f;
                        _1755 = _1753;
                      }
#if 0
                      float4 _1756 = tTextureMap2.SampleLevel(TrilinearClamp, float3(_1733, _1744, _1755), 0.0f);
#else
                      float3 _1756 = LUTBlackCorrection(float3(_1656, _1657, _1658), tTextureMap2, lut_config);
#endif
                      float _1757 = _1756.x;
                      float _1758 = _1756.y;
                      float _1759 = _1756.z;
                      float _1760 = _1757 - _1656;
                      float _1761 = _1758 - _1657;
                      float _1762 = _1759 - _1658;
                      float _1763 = _1760 * _1585;
                      float _1764 = _1761 * _1585;
                      float _1765 = _1762 * _1585;
                      float _1766 = _1763 + _1656;
                      float _1767 = _1764 + _1657;
                      float _1768 = _1765 + _1658;
                      _1770 = _1766;
                      _1771 = _1767;
                      _1772 = _1768;
                    } while (false);
                  } while (false);
                } while (false);
              }
              float _1773 = _1770 * _1588;
              float _1774 = mad(_1771, _1592, _1773);
              float _1775 = mad(_1772, _1596, _1774);
              float _1776 = _1775 + _1600;
              float _1777 = _1770 * _1589;
              float _1778 = mad(_1771, _1593, _1777);
              float _1779 = mad(_1772, _1597, _1778);
              float _1780 = _1779 + _1601;
              float _1781 = _1770 * _1590;
              float _1782 = mad(_1771, _1594, _1781);
              float _1783 = mad(_1772, _1598, _1782);
              float _1784 = _1783 + _1602;
              _1790 = _1776;
              _1791 = _1780;
              _1792 = _1784;
              if (_1605) {
                float _1786 = _1776 * _1604;
                float _1787 = _1780 * _1604;
                float _1788 = _1784 * _1604;
                _1790 = _1786;
                _1791 = _1787;
                _1792 = _1788;
              }
            } while (false);
          } while (false);
        } while (false);
      } while (false);
    } while (false);
  }
  int _1793 = _25 & 8;
  bool _1794 = (_1793 == 0);
  _1827 = _1790;
  _1828 = _1791;
  _1829 = _1792;
  if (!_1794) {
    float _1797 = ColorDeficientTable_000x;
    float _1798 = ColorDeficientTable_000y;
    float _1799 = ColorDeficientTable_000z;
    float _1801 = ColorDeficientTable_001x;
    float _1802 = ColorDeficientTable_001y;
    float _1803 = ColorDeficientTable_001z;
    float _1805 = ColorDeficientTable_002x;
    float _1806 = ColorDeficientTable_002y;
    float _1807 = ColorDeficientTable_002z;
    float _1808 = _1797 * _1790;
    float _1809 = _1798 * _1791;
    float _1810 = _1808 + _1809;
    float _1811 = _1799 * _1792;
    float _1812 = _1810 + _1811;
    float _1813 = _1801 * _1790;
    float _1814 = _1802 * _1791;
    float _1815 = _1813 + _1814;
    float _1816 = _1803 * _1792;
    float _1817 = _1815 + _1816;
    float _1818 = _1805 * _1790;
    float _1819 = _1806 * _1791;
    float _1820 = _1818 + _1819;
    float _1821 = _1807 * _1792;
    float _1822 = _1820 + _1821;
    float _1823 = saturate(_1812);
    float _1824 = saturate(_1817);
    float _1825 = saturate(_1822);
    _1827 = _1823;
    _1828 = _1824;
    _1829 = _1825;
  }
  int _1830 = _25 & 16;
  bool _1831 = (_1830 == 0);
  _1898 = _1827;
  _1899 = _1828;
  _1900 = _1829;
  if (!_1831) {
    float _1834 = ImagePlaneParam_000x;
    float _1835 = ImagePlaneParam_000y;
    float _1836 = ImagePlaneParam_000z;
    float _1837 = ImagePlaneParam_000w;
    float _1839 = ImagePlaneParam_001x;
    float _1840 = ImagePlaneParam_001y;
    float _1842 = SceneInfo_023z;
    float _1843 = SceneInfo_023w;
    float _1844 = _1842 * _22;
    float _1845 = _1843 * _23;
    float4 _1846 = ImagePlameBase.SampleLevel(BilinearClamp, float2(_1844, _1845), 0.0f);
    float _1847 = _1846.x;
    float _1848 = _1846.y;
    float _1849 = _1846.z;
    float _1850 = _1846.w;
    float _1851 = _1847 * _1834;
    float _1852 = _1848 * _1835;
    float _1853 = _1849 * _1836;
    float _1854 = _1850 * _1837;
    float _1855 = ImagePlameAlpha.SampleLevel(BilinearClamp, float2(_1844, _1845), 0.0f);
    float _1856 = _1855.x;
    float _1857 = _1856 * _1839;
    float _1858 = _1857 + _1840;
    float _1859 = saturate(_1858);
    float _1860 = _1854 * _1859;
    bool _1861 = (_1851 < 0.5f);
    bool _1862 = (_1852 < 0.5f);
    bool _1863 = (_1853 < 0.5f);
    float _1864 = _1827 * 2.0f;
    float _1865 = _1864 * _1851;
    float _1866 = _1828 * 2.0f;
    float _1867 = _1866 * _1852;
    float _1868 = _1829 * 2.0f;
    float _1869 = _1868 * _1853;
    float _1870 = 1.0f - _1851;
    float _1871 = 1.0f - _1852;
    float _1872 = 1.0f - _1853;
    float _1873 = 1.0f - _1827;
    float _1874 = 1.0f - _1828;
    float _1875 = 1.0f - _1829;
    float _1876 = _1873 * 2.0f;
    float _1877 = _1876 * _1870;
    float _1878 = _1874 * 2.0f;
    float _1879 = _1878 * _1871;
    float _1880 = _1875 * 2.0f;
    float _1881 = _1880 * _1872;
    float _1882 = 1.0f - _1877;
    float _1883 = 1.0f - _1879;
    float _1884 = 1.0f - _1881;
    float _1885 = _1861 ? _1865 : _1882;
    float _1886 = _1862 ? _1867 : _1883;
    float _1887 = _1863 ? _1869 : _1884;
    float _1888 = _1885 - _1827;
    float _1889 = _1886 - _1828;
    float _1890 = _1887 - _1829;
    float _1891 = _1888 * _1860;
    float _1892 = _1889 * _1860;
    float _1893 = _1890 * _1860;
    float _1894 = _1891 + _1827;
    float _1895 = _1892 + _1828;
    float _1896 = _1893 + _1829;
    _1898 = _1894;
    _1899 = _1895;
    _1900 = _1896;
  }
  SV_Target.x = _1898;
  SV_Target.y = _1899;
  SV_Target.z = _1900;
  SV_Target.w = 0.0f;

#if 0  // HDR Gamma boost

  SV_Target.rgb = AdjustGammaOnLuminance(SV_Target.rgb, 1.1);

#endif

  return SV_Target;
}
