#include "../../common.hlsl"

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

float4 main(
    noperspective float2 TEXCOORD: TEXCOORD,
    noperspective float4 SV_Position: SV_Position,
    nointerpolation uint SV_RenderTargetArrayIndex: SV_RenderTargetArrayIndex)
    : SV_Target {
  float4 SV_Target;
  // cbuffer _1 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _2 = _RootShaderParameters;
  // _3 = _1;
  // _4 = _2;
  uint _5 = SV_RenderTargetArrayIndex;
  float _6 = TEXCOORD.x;
  float _7 = TEXCOORD.y;
  float _8[6];
  float _9[6];
  float _10[6];
  float _11[6];
  float _12 = _6 + -0.015625f;
  float _13 = _7 + -0.015625f;
  float _14 = _12 * 1.0322580337524414f;
  float _15 = _13 * 1.0322580337524414f;
  float _16 = float(_5);
  float _17 = _16 * 0.032258063554763794f;
  uint _19 = _RootShaderParameters_041x;
  bool _20 = (_19 == 1);
  float _37 = 1.379158854484558f;
  float _38 = -0.3088507056236267f;
  float _39 = -0.07034677267074585f;
  float _40 = -0.06933528929948807f;
  float _41 = 1.0822921991348267f;
  float _42 = -0.012962047010660172f;
  float _43 = -0.002159259282052517f;
  float _44 = -0.045465391129255295f;
  float _45 = 1.0477596521377563f;
  float _103;
  float _104;
  float _105;
  float _629;
  float _665;
  float _676;
  float _740;
  float _1008;
  float _1009;
  float _1010;
  float _1021;
  float _1032;
  float _1214;
  float _1250;
  float _1261;
  float _1300;
  float _1410;
  float _1484;
  float _1558;
  float _1637;
  float _1638;
  float _1639;
  float _1790;
  float _1826;
  float _1837;
  float _1876;
  float _1986;
  float _2060;
  float _2134;
  float _2213;
  float _2214;
  float _2215;
  float _2392;
  float _2393;
  float _2394;
  if (!_20) {
    bool _22 = (_19 == 2);
    _37 = 1.02579927444458f;
    _38 = -0.020052503794431686f;
    _39 = -0.0057713985443115234f;
    _40 = -0.0022350111976265907f;
    _41 = 1.0045825242996216f;
    _42 = -0.002352306619286537f;
    _43 = -0.005014004185795784f;
    _44 = -0.025293385609984398f;
    _45 = 1.0304402112960815f;
    if (!_22) {
      bool _24 = (_19 == 3);
      _37 = 0.6954522132873535f;
      _38 = 0.14067870378494263f;
      _39 = 0.16386906802654266f;
      _40 = 0.044794563204050064f;
      _41 = 0.8596711158752441f;
      _42 = 0.0955343171954155f;
      _43 = -0.005525882821530104f;
      _44 = 0.004025210160762072f;
      _45 = 1.0015007257461548f;
      if (!_24) {
        bool _26 = (_19 == 4);
        float _27 = _26 ? 1.0f : 1.7050515413284302f;
        float _28 = _26 ? 0.0f : -0.6217905879020691f;
        float _29 = _26 ? 0.0f : -0.0832584798336029f;
        float _30 = _26 ? 0.0f : -0.13025718927383423f;
        float _31 = _26 ? 1.0f : 1.1408027410507202f;
        float _32 = _26 ? 0.0f : -0.010548528283834457f;
        float _33 = _26 ? 0.0f : -0.024003278464078903f;
        float _34 = _26 ? 0.0f : -0.1289687603712082f;
        float _35 = _26 ? 1.0f : 1.152971863746643f;
        _37 = _27;
        _38 = _28;
        _39 = _29;
        _40 = _30;
        _41 = _31;
        _42 = _32;
        _43 = _33;
        _44 = _34;
        _45 = _35;
      }
    }
  }
  uint _47 = _RootShaderParameters_040w;
  bool _48 = (_47 > 2);
  if (_48) {
    float _50 = log2(_14);
    float _51 = log2(_15);
    float _52 = log2(_17);
    float _53 = _50 * 0.012683313339948654f;
    float _54 = _51 * 0.012683313339948654f;
    float _55 = _52 * 0.012683313339948654f;
    float _56 = exp2(_53);
    float _57 = exp2(_54);
    float _58 = exp2(_55);
    float _59 = _56 + -0.8359375f;
    float _60 = _57 + -0.8359375f;
    float _61 = _58 + -0.8359375f;
    float _62 = max(0.0f, _59);
    float _63 = max(0.0f, _60);
    float _64 = max(0.0f, _61);
    float _65 = _56 * 18.6875f;
    float _66 = _57 * 18.6875f;
    float _67 = _58 * 18.6875f;
    float _68 = 18.8515625f - _65;
    float _69 = 18.8515625f - _66;
    float _70 = 18.8515625f - _67;
    float _71 = _62 / _68;
    float _72 = _63 / _69;
    float _73 = _64 / _70;
    float _74 = log2(_71);
    float _75 = log2(_72);
    float _76 = log2(_73);
    float _77 = _74 * 6.277394771575928f;
    float _78 = _75 * 6.277394771575928f;
    float _79 = _76 * 6.277394771575928f;
    float _80 = exp2(_77);
    float _81 = exp2(_78);
    float _82 = exp2(_79);
    float _83 = _80 * 100.0f;
    float _84 = _81 * 100.0f;
    float _85 = _82 * 100.0f;
    _103 = _83;
    _104 = _84;
    _105 = _85;
  } else {
    float _87 = _12 * 14.45161247253418f;
    float _88 = _87 + -6.07624626159668f;
    float _89 = _13 * 14.45161247253418f;
    float _90 = _89 + -6.07624626159668f;
    float _91 = _16 * 0.4516128897666931f;
    float _92 = _91 + -6.07624626159668f;
    float _93 = exp2(_88);
    float _94 = exp2(_90);
    float _95 = exp2(_92);
    float _96 = _93 * 0.18000000715255737f;
    float _97 = _94 * 0.18000000715255737f;
    float _98 = _95 * 0.18000000715255737f;
    float _99 = _96 + -0.002667719265446067f;
    float _100 = _97 + -0.002667719265446067f;
    float _101 = _98 + -0.002667719265446067f;
    _103 = _99;
    _104 = _100;
    _105 = _101;
  }

  float _107 = UniformBufferConstants_WorkingColorSpace_008x;
  float _108 = UniformBufferConstants_WorkingColorSpace_008y;
  float _109 = UniformBufferConstants_WorkingColorSpace_008z;
  float _111 = UniformBufferConstants_WorkingColorSpace_009x;
  float _112 = UniformBufferConstants_WorkingColorSpace_009y;
  float _113 = UniformBufferConstants_WorkingColorSpace_009z;
  float _115 = UniformBufferConstants_WorkingColorSpace_010x;
  float _116 = UniformBufferConstants_WorkingColorSpace_010y;
  float _117 = UniformBufferConstants_WorkingColorSpace_010z;
  float _118 = _107 * _103;
  float _119 = mad(_108, _104, _118);
  float _120 = mad(_109, _105, _119);
  float _121 = _111 * _103;
  float _122 = mad(_112, _104, _121);
  float _123 = mad(_113, _105, _122);
  float _124 = _115 * _103;
  float _125 = mad(_116, _104, _124);
  float _126 = mad(_117, _105, _125);
  float _127 = dot(float3(_120, _123, _126), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));

  SetUngradedAP1(float3(_120, _123, _126));

  float _128 = _120 / _127;
  float _129 = _123 / _127;
  float _130 = _126 / _127;
  float _131 = _128 + -1.0f;
  float _132 = _129 + -1.0f;
  float _133 = _130 + -1.0f;
  float _134 = dot(float3(_131, _132, _133), float3(_131, _132, _133));
  float _135 = _134 * -4.0f;
  float _136 = exp2(_135);
  float _137 = 1.0f - _136;
  float _139 = _RootShaderParameters_036z;
  float _140 = _127 * _127;
  float _141 = _140 * -4.0f;
  float _142 = _141 * _139;
  float _143 = exp2(_142);
  float _144 = 1.0f - _143;
  float _145 = _144 * _137;
  float _146 = _120 * 1.370412826538086f;
  float _147 = mad(-0.32929131388664246f, _123, _146);
  float _148 = mad(-0.06368283927440643f, _126, _147);
  float _149 = _120 * -0.08343426138162613f;
  float _150 = mad(1.0970908403396606f, _123, _149);
  float _151 = mad(-0.010861567221581936f, _126, _150);
  float _152 = _120 * -0.02579325996339321f;
  float _153 = mad(-0.09862564504146576f, _123, _152);
  float _154 = mad(1.203694462776184f, _126, _153);
  float _155 = _148 - _120;
  float _156 = _151 - _123;
  float _157 = _154 - _126;
  float _158 = _155 * _145;
  float _159 = _156 * _145;
  float _160 = _157 * _145;
  float _161 = _158 + _120;
  float _162 = _159 + _123;
  float _163 = _160 + _126;
  float _164 = dot(float3(_161, _162, _163), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _166 = _RootShaderParameters_024x;
  float _167 = _RootShaderParameters_024y;
  float _168 = _RootShaderParameters_024z;
  float _169 = _RootShaderParameters_024w;
  float _171 = _RootShaderParameters_019x;
  float _172 = _RootShaderParameters_019y;
  float _173 = _RootShaderParameters_019z;
  float _174 = _RootShaderParameters_019w;
  float _175 = _171 + _166;
  float _176 = _172 + _167;
  float _177 = _173 + _168;
  float _178 = _174 + _169;
  float _180 = _RootShaderParameters_023x;
  float _181 = _RootShaderParameters_023y;
  float _182 = _RootShaderParameters_023z;
  float _183 = _RootShaderParameters_023w;
  float _185 = _RootShaderParameters_018x;
  float _186 = _RootShaderParameters_018y;
  float _187 = _RootShaderParameters_018z;
  float _188 = _RootShaderParameters_018w;
  float _189 = _185 * _180;
  float _190 = _186 * _181;
  float _191 = _187 * _182;
  float _192 = _188 * _183;
  float _194 = _RootShaderParameters_022x;
  float _195 = _RootShaderParameters_022y;
  float _196 = _RootShaderParameters_022z;
  float _197 = _RootShaderParameters_022w;
  float _199 = _RootShaderParameters_017x;
  float _200 = _RootShaderParameters_017y;
  float _201 = _RootShaderParameters_017z;
  float _202 = _RootShaderParameters_017w;
  float _203 = _199 * _194;
  float _204 = _200 * _195;
  float _205 = _201 * _196;
  float _206 = _202 * _197;
  float _208 = _RootShaderParameters_021x;
  float _209 = _RootShaderParameters_021y;
  float _210 = _RootShaderParameters_021z;
  float _211 = _RootShaderParameters_021w;
  float _213 = _RootShaderParameters_016x;
  float _214 = _RootShaderParameters_016y;
  float _215 = _RootShaderParameters_016z;
  float _216 = _RootShaderParameters_016w;
  float _217 = _213 * _208;
  float _218 = _214 * _209;
  float _219 = _215 * _210;
  float _220 = _216 * _211;
  float _222 = _RootShaderParameters_020x;
  float _223 = _RootShaderParameters_020y;
  float _224 = _RootShaderParameters_020z;
  float _225 = _RootShaderParameters_020w;
  float _227 = _RootShaderParameters_015x;
  float _228 = _RootShaderParameters_015y;
  float _229 = _RootShaderParameters_015z;
  float _230 = _RootShaderParameters_015w;
  float _231 = _227 * _222;
  float _232 = _228 * _223;
  float _233 = _229 * _224;
  float _234 = _230 * _225;
  float _235 = _231 * _234;
  float _236 = _232 * _234;
  float _237 = _233 * _234;
  float _238 = _161 - _164;
  float _239 = _162 - _164;
  float _240 = _163 - _164;
  float _241 = _235 * _238;
  float _242 = _236 * _239;
  float _243 = _237 * _240;
  float _244 = _241 + _164;
  float _245 = _242 + _164;
  float _246 = _243 + _164;
  float _247 = max(0.0f, _244);
  float _248 = max(0.0f, _245);
  float _249 = max(0.0f, _246);
  float _250 = _217 * _220;
  float _251 = _218 * _220;
  float _252 = _219 * _220;
  float _253 = _247 * 5.55555534362793f;
  float _254 = _248 * 5.55555534362793f;
  float _255 = _249 * 5.55555534362793f;
  float _256 = log2(_253);
  float _257 = log2(_254);
  float _258 = log2(_255);
  float _259 = _250 * _256;
  float _260 = _251 * _257;
  float _261 = _252 * _258;
  float _262 = exp2(_259);
  float _263 = exp2(_260);
  float _264 = exp2(_261);
  float _265 = _262 * 0.18000000715255737f;
  float _266 = _263 * 0.18000000715255737f;
  float _267 = _264 * 0.18000000715255737f;
  float _268 = _203 * _206;
  float _269 = _204 * _206;
  float _270 = _205 * _206;
  float _271 = 1.0f / _268;
  float _272 = 1.0f / _269;
  float _273 = 1.0f / _270;
  float _274 = log2(_265);
  float _275 = log2(_266);
  float _276 = log2(_267);
  float _277 = _274 * _271;
  float _278 = _275 * _272;
  float _279 = _276 * _273;
  float _280 = exp2(_277);
  float _281 = exp2(_278);
  float _282 = exp2(_279);
  float _283 = _189 * _192;
  float _284 = _190 * _192;
  float _285 = _191 * _192;
  float _286 = _283 * _280;
  float _287 = _284 * _281;
  float _288 = _285 * _282;
  float _289 = _175 + _178;
  float _290 = _176 + _178;
  float _291 = _177 + _178;
  float _292 = _289 + _286;
  float _293 = _290 + _287;
  float _294 = _291 + _288;
  float _296 = _RootShaderParameters_035z;
  float _297 = _164 / _296;
  float _298 = saturate(_297);
  float _299 = _298 * 2.0f;
  float _300 = 3.0f - _299;
  float _301 = _298 * _298;
  float _302 = _301 * _300;
  float _303 = 1.0f - _302;
  float _305 = _RootShaderParameters_034x;
  float _306 = _RootShaderParameters_034y;
  float _307 = _RootShaderParameters_034z;
  float _308 = _RootShaderParameters_034w;
  float _309 = _171 + _305;
  float _310 = _172 + _306;
  float _311 = _173 + _307;
  float _312 = _174 + _308;
  float _314 = _RootShaderParameters_033x;
  float _315 = _RootShaderParameters_033y;
  float _316 = _RootShaderParameters_033z;
  float _317 = _RootShaderParameters_033w;
  float _318 = _185 * _314;
  float _319 = _186 * _315;
  float _320 = _187 * _316;
  float _321 = _188 * _317;
  float _323 = _RootShaderParameters_032x;
  float _324 = _RootShaderParameters_032y;
  float _325 = _RootShaderParameters_032z;
  float _326 = _RootShaderParameters_032w;
  float _327 = _199 * _323;
  float _328 = _200 * _324;
  float _329 = _201 * _325;
  float _330 = _202 * _326;
  float _332 = _RootShaderParameters_031x;
  float _333 = _RootShaderParameters_031y;
  float _334 = _RootShaderParameters_031z;
  float _335 = _RootShaderParameters_031w;
  float _336 = _213 * _332;
  float _337 = _214 * _333;
  float _338 = _215 * _334;
  float _339 = _216 * _335;
  float _341 = _RootShaderParameters_030x;
  float _342 = _RootShaderParameters_030y;
  float _343 = _RootShaderParameters_030z;
  float _344 = _RootShaderParameters_030w;
  float _345 = _227 * _341;
  float _346 = _228 * _342;
  float _347 = _229 * _343;
  float _348 = _230 * _344;
  float _349 = _345 * _348;
  float _350 = _346 * _348;
  float _351 = _347 * _348;
  float _352 = _349 * _238;
  float _353 = _350 * _239;
  float _354 = _351 * _240;
  float _355 = _352 + _164;
  float _356 = _353 + _164;
  float _357 = _354 + _164;
  float _358 = max(0.0f, _355);
  float _359 = max(0.0f, _356);
  float _360 = max(0.0f, _357);
  float _361 = _336 * _339;
  float _362 = _337 * _339;
  float _363 = _338 * _339;
  float _364 = _358 * 5.55555534362793f;
  float _365 = _359 * 5.55555534362793f;
  float _366 = _360 * 5.55555534362793f;
  float _367 = log2(_364);
  float _368 = log2(_365);
  float _369 = log2(_366);
  float _370 = _361 * _367;
  float _371 = _362 * _368;
  float _372 = _363 * _369;
  float _373 = exp2(_370);
  float _374 = exp2(_371);
  float _375 = exp2(_372);
  float _376 = _373 * 0.18000000715255737f;
  float _377 = _374 * 0.18000000715255737f;
  float _378 = _375 * 0.18000000715255737f;
  float _379 = _327 * _330;
  float _380 = _328 * _330;
  float _381 = _329 * _330;
  float _382 = 1.0f / _379;
  float _383 = 1.0f / _380;
  float _384 = 1.0f / _381;
  float _385 = log2(_376);
  float _386 = log2(_377);
  float _387 = log2(_378);
  float _388 = _385 * _382;
  float _389 = _386 * _383;
  float _390 = _387 * _384;
  float _391 = exp2(_388);
  float _392 = exp2(_389);
  float _393 = exp2(_390);
  float _394 = _318 * _321;
  float _395 = _319 * _321;
  float _396 = _320 * _321;
  float _397 = _394 * _391;
  float _398 = _395 * _392;
  float _399 = _396 * _393;
  float _400 = _309 + _312;
  float _401 = _310 + _312;
  float _402 = _311 + _312;
  float _403 = _400 + _397;
  float _404 = _401 + _398;
  float _405 = _402 + _399;
  float _406 = _RootShaderParameters_036x;
  float _407 = _RootShaderParameters_035w;
  float _408 = _406 - _407;
  float _409 = _164 - _407;
  float _410 = _409 / _408;
  float _411 = saturate(_410);
  float _412 = _411 * 2.0f;
  float _413 = 3.0f - _412;
  float _414 = _411 * _411;
  float _415 = _414 * _413;
  float _417 = _RootShaderParameters_029x;
  float _418 = _RootShaderParameters_029y;
  float _419 = _RootShaderParameters_029z;
  float _420 = _RootShaderParameters_029w;
  float _421 = _171 + _417;
  float _422 = _172 + _418;
  float _423 = _173 + _419;
  float _424 = _174 + _420;
  float _426 = _RootShaderParameters_028x;
  float _427 = _RootShaderParameters_028y;
  float _428 = _RootShaderParameters_028z;
  float _429 = _RootShaderParameters_028w;
  float _430 = _185 * _426;
  float _431 = _186 * _427;
  float _432 = _187 * _428;
  float _433 = _188 * _429;
  float _435 = _RootShaderParameters_027x;
  float _436 = _RootShaderParameters_027y;
  float _437 = _RootShaderParameters_027z;
  float _438 = _RootShaderParameters_027w;
  float _439 = _199 * _435;
  float _440 = _200 * _436;
  float _441 = _201 * _437;
  float _442 = _202 * _438;
  float _444 = _RootShaderParameters_026x;
  float _445 = _RootShaderParameters_026y;
  float _446 = _RootShaderParameters_026z;
  float _447 = _RootShaderParameters_026w;
  float _448 = _213 * _444;
  float _449 = _214 * _445;
  float _450 = _215 * _446;
  float _451 = _216 * _447;
  float _453 = _RootShaderParameters_025x;
  float _454 = _RootShaderParameters_025y;
  float _455 = _RootShaderParameters_025z;
  float _456 = _RootShaderParameters_025w;
  float _457 = _227 * _453;
  float _458 = _228 * _454;
  float _459 = _229 * _455;
  float _460 = _230 * _456;
  float _461 = _457 * _460;
  float _462 = _458 * _460;
  float _463 = _459 * _460;
  float _464 = _461 * _238;
  float _465 = _462 * _239;
  float _466 = _463 * _240;
  float _467 = _464 + _164;
  float _468 = _465 + _164;
  float _469 = _466 + _164;
  float _470 = max(0.0f, _467);
  float _471 = max(0.0f, _468);
  float _472 = max(0.0f, _469);
  float _473 = _448 * _451;
  float _474 = _449 * _451;
  float _475 = _450 * _451;
  float _476 = _470 * 5.55555534362793f;
  float _477 = _471 * 5.55555534362793f;
  float _478 = _472 * 5.55555534362793f;
  float _479 = log2(_476);
  float _480 = log2(_477);
  float _481 = log2(_478);
  float _482 = _473 * _479;
  float _483 = _474 * _480;
  float _484 = _475 * _481;
  float _485 = exp2(_482);
  float _486 = exp2(_483);
  float _487 = exp2(_484);
  float _488 = _485 * 0.18000000715255737f;
  float _489 = _486 * 0.18000000715255737f;
  float _490 = _487 * 0.18000000715255737f;
  float _491 = _439 * _442;
  float _492 = _440 * _442;
  float _493 = _441 * _442;
  float _494 = 1.0f / _491;
  float _495 = 1.0f / _492;
  float _496 = 1.0f / _493;
  float _497 = log2(_488);
  float _498 = log2(_489);
  float _499 = log2(_490);
  float _500 = _497 * _494;
  float _501 = _498 * _495;
  float _502 = _499 * _496;
  float _503 = exp2(_500);
  float _504 = exp2(_501);
  float _505 = exp2(_502);
  float _506 = _430 * _433;
  float _507 = _431 * _433;
  float _508 = _432 * _433;
  float _509 = _506 * _503;
  float _510 = _507 * _504;
  float _511 = _508 * _505;
  float _512 = _421 + _424;
  float _513 = _422 + _424;
  float _514 = _423 + _424;
  float _515 = _512 + _509;
  float _516 = _513 + _510;
  float _517 = _514 + _511;
  float _518 = _302 - _415;
  float _519 = _303 * _292;
  float _520 = _303 * _293;
  float _521 = _303 * _294;
  float _522 = _515 * _518;
  float _523 = _516 * _518;
  float _524 = _517 * _518;
  float _525 = _415 * _403;
  float _526 = _415 * _404;
  float _527 = _415 * _405;
  float _528 = _525 + _519;
  float _529 = _528 + _522;
  float _530 = _526 + _520;
  float _531 = _530 + _523;
  float _532 = _527 + _521;
  float _533 = _532 + _524;
  float _535 = UniformBufferConstants_WorkingColorSpace_012x;
  float _536 = UniformBufferConstants_WorkingColorSpace_012y;
  float _537 = UniformBufferConstants_WorkingColorSpace_012z;
  float _539 = UniformBufferConstants_WorkingColorSpace_013x;
  float _540 = UniformBufferConstants_WorkingColorSpace_013y;
  float _541 = UniformBufferConstants_WorkingColorSpace_013z;
  float _543 = UniformBufferConstants_WorkingColorSpace_014x;
  float _544 = UniformBufferConstants_WorkingColorSpace_014y;
  float _545 = UniformBufferConstants_WorkingColorSpace_014z;
  float _546 = _529 * _535;
  float _547 = mad(_536, _531, _546);
  float _548 = mad(_537, _533, _547);
  float _549 = _539 * _529;
  float _550 = mad(_540, _531, _549);
  float _551 = mad(_541, _533, _550);
  float _552 = _543 * _529;
  float _553 = mad(_544, _531, _552);
  float _554 = mad(_545, _533, _553);
  float _555 = _RootShaderParameters_036y;

  SetUntonemappedAP1(float3(_529, _531, _533));  // CustomEdit

  float _556 = _529 * 0.9386394023895264f;
  float _557 = mad(-4.540197551250458e-09f, _531, _556);
  float _558 = mad(0.061360642313957214f, _533, _557);
  float _559 = _529 * 6.775371730327606e-08f;
  float _560 = mad(0.8307942152023315f, _531, _559);
  float _561 = mad(0.169205904006958f, _533, _560);
  float _562 = _529 * -9.313225746154785e-10f;
  float _563 = mad(-2.3283064365386963e-10f, _531, _562);
  float _564 = _558 - _529;
  float _565 = _561 - _531;
  float _566 = _564 * _555;
  float _567 = _565 * _555;
  float _568 = _563 * _555;
  float _569 = _566 + _529;
  float _570 = _567 + _531;
  float _571 = _568 + _533;

  float _572 = _569 * 0.6954522132873535f;
  float _573 = mad(0.14067868888378143f, _570, _572);
  float _574 = mad(0.16386905312538147f, _571, _573);
  float _575 = _569 * 0.044794581830501556f;
  float _576 = mad(0.8596711158752441f, _570, _575);
  float _577 = mad(0.0955343246459961f, _571, _576);
  float _578 = _569 * -0.005525882821530104f;
  float _579 = mad(0.004025210160762072f, _570, _578);
  float _580 = mad(1.0015007257461548f, _571, _579);
  float _581 = min(_574, _577);
  float _582 = min(_581, _580);
  float _583 = max(_574, _577);
  float _584 = max(_583, _580);
  float _585 = max(_584, 1.000000013351432e-10f);
  float _586 = max(_582, 1.000000013351432e-10f);
  float _587 = _585 - _586;
  float _588 = max(_584, 0.009999999776482582f);
  float _589 = _587 / _588;
  float _590 = _580 - _577;
  float _591 = _590 * _580;
  float _592 = _577 - _574;
  float _593 = _592 * _577;
  float _594 = _591 + _593;
  float _595 = _574 - _580;
  float _596 = _595 * _574;
  float _597 = _594 + _596;
  float _598 = sqrt(_597);
  float _599 = _598 * 1.75f;
  float _600 = _577 + _574;
  float _601 = _600 + _580;
  float _602 = _601 + _599;
  float _603 = _602 * 0.3333333432674408f;
  float _604 = _589 + -0.4000000059604645f;
  float _605 = _604 * 5.0f;
  float _606 = _604 * 2.5f;
  float _607 = abs(_606);
  float _608 = 1.0f - _607;
  float _609 = max(_608, 0.0f);
  bool _610 = (_605 > 0.0f);
  bool _611 = (_605 < 0.0f);
  int _612 = int(_610);
  int _613 = int(_611);
  int _614 = _612 - _613;
  float _615 = float(_614);
  float _616 = _609 * _609;
  float _617 = 1.0f - _616;
  float _618 = _615 * _617;
  float _619 = _618 + 1.0f;
  float _620 = _619 * 0.02500000037252903f;
  bool _621 = !(_603 <= 0.0533333346247673f);
  _629 = _620;
  if (_621) {
    bool _623 = !(_603 >= 0.1599999964237213f);
    _629 = 0.0f;
    if (_623) {
      float _625 = 0.23999999463558197f / _602;
      float _626 = _625 + -0.5f;
      float _627 = _626 * _620;
      _629 = _627;
    }
  }
  float _630 = _629 + 1.0f;
  float _631 = _630 * _574;
  float _632 = _630 * _577;
  float _633 = _630 * _580;
  bool _634 = (_631 == _632);
  bool _635 = (_632 == _633);
  bool _636 = _634 && _635;
  _665 = 0.0f;
  if (!_636) {
    float _638 = _631 * 2.0f;
    float _639 = _638 - _632;
    float _640 = _639 - _633;
    float _641 = _577 - _580;
    float _642 = _641 * 1.7320507764816284f;
    float _643 = _642 * _630;
    float _644 = _643 / _640;
    float _645 = atan(_644);
    float _646 = _645 + 3.1415927410125732f;
    float _647 = _645 + -3.1415927410125732f;
    bool _648 = (_640 < 0.0f);
    bool _649 = (_640 == 0.0f);
    bool _650 = (_643 >= 0.0f);
    bool _651 = (_643 < 0.0f);
    bool _652 = _650 && _648;
    float _653 = _652 ? _646 : _645;
    bool _654 = _651 && _648;
    float _655 = _654 ? _647 : _653;
    bool _656 = _651 && _649;
    bool _657 = _650 && _649;
    float _658 = _655 * 57.2957763671875f;
    float _659 = _656 ? -90.0f : _658;
    float _660 = _657 ? 90.0f : _659;
    bool _661 = (_660 < 0.0f);
    _665 = _660;
    if (_661) {
      float _663 = _660 + 360.0f;
      _665 = _663;
    }
  }
  float _666 = max(_665, 0.0f);
  float _667 = min(_666, 360.0f);
  bool _668 = (_667 < -180.0f);
  if (_668) {
    float _670 = _667 + 360.0f;
    _676 = _670;
  } else {
    bool _672 = (_667 > 180.0f);
    _676 = _667;
    if (_672) {
      float _674 = _667 + -360.0f;
      _676 = _674;
    }
  }
  float _677 = _676 * 0.014814814552664757f;
  float _678 = abs(_677);
  float _679 = 1.0f - _678;
  float _680 = saturate(_679);
  float _681 = _680 * 2.0f;
  float _682 = 3.0f - _681;
  float _683 = _680 * _680;
  float _684 = _683 * _682;
  float _685 = 0.029999999329447746f - _631;
  float _686 = _589 * 0.18000000715255737f;
  float _687 = _686 * _685;
  float _688 = _684 * _684;
  float _689 = _688 * _687;
  float _690 = _689 + _631;
  float _691 = _690 * 1.4514392614364624f;
  float _692 = mad(-0.2365107536315918f, _632, _691);
  float _693 = mad(-0.21492856740951538f, _633, _692);
  float _694 = _690 * -0.07655377686023712f;
  float _695 = mad(1.17622971534729f, _632, _694);
  float _696 = mad(-0.09967592358589172f, _633, _695);
  float _697 = _690 * 0.008316148072481155f;
  float _698 = mad(-0.006032449658960104f, _632, _697);
  float _699 = mad(0.9977163076400757f, _633, _698);
  float _700 = max(0.0f, _693);
  float _701 = max(0.0f, _696);
  float _702 = max(0.0f, _699);
  float _703 = dot(float3(_700, _701, _702), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _704 = _700 - _703;
  float _705 = _701 - _703;
  float _706 = _702 - _703;
  float _707 = _704 * 0.9599999785423279f;
  float _708 = _705 * 0.9599999785423279f;
  float _709 = _706 * 0.9599999785423279f;
  float _710 = _707 + _703;
  float _711 = _708 + _703;
  float _712 = _709 + _703;

  float _714 = _RootShaderParameters_037w;
  float _715 = _714 + 1.0f;
  float _716 = _RootShaderParameters_037y;
  float _717 = _715 - _716;
  float _719 = _RootShaderParameters_038x;
  float _720 = _719 + 1.0f;
  float _721 = _RootShaderParameters_037z;
  float _722 = _720 - _721;

  bool _723 = (_716 > 0.800000011920929f);
  float _724 = _RootShaderParameters_037x;
  if (_723) {
    float _726 = 0.8199999928474426f - _716;
    float _727 = _726 / _724;
    float _728 = _727 + -0.7447274923324585f;
    _740 = _728;
  } else {
    float _730 = _714 + 0.18000000715255737f;
    float _731 = _730 / _717;
    float _732 = 2.0f - _731;
    float _733 = _731 / _732;
    float _734 = log2(_733);
    float _735 = _734 * 0.3465735912322998f;
    float _736 = _717 / _724;
    float _737 = _735 * _736;
    float _738 = -0.7447274923324585f - _737;
    _740 = _738;
  }
  float _741 = 1.0f - _716;
  float _742 = _741 / _724;
  float _743 = _742 - _740;
  float _744 = _721 / _724;
  float _745 = _744 - _743;
  float _746 = log2(_710);
  float _747 = log2(_711);
  float _748 = log2(_712);
  float _749 = _746 * 0.3010300099849701f;
  float _750 = _747 * 0.3010300099849701f;
  float _751 = _748 * 0.3010300099849701f;
  float _752 = _749 + _743;
  float _753 = _750 + _743;
  float _754 = _751 + _743;
  float _755 = _724 * _752;
  float _756 = _724 * _753;
  float _757 = _724 * _754;
  float _758 = _717 * 2.0f;
  float _759 = _724 * -2.0f;
  float _760 = _759 / _717;
  float _761 = _749 - _740;
  float _762 = _750 - _740;
  float _763 = _751 - _740;
  float _764 = _761 * 1.4426950216293335f;
  float _765 = _764 * _760;
  float _766 = _762 * 1.4426950216293335f;
  float _767 = _766 * _760;
  float _768 = _763 * 1.4426950216293335f;
  float _769 = _768 * _760;
  float _770 = exp2(_765);
  float _771 = exp2(_767);
  float _772 = exp2(_769);
  float _773 = _770 + 1.0f;
  float _774 = _771 + 1.0f;
  float _775 = _772 + 1.0f;
  float _776 = _758 / _773;
  float _777 = _758 / _774;
  float _778 = _758 / _775;
  float _779 = _776 - _714;
  float _780 = _777 - _714;
  float _781 = _778 - _714;
  float _782 = _722 * 2.0f;
  float _783 = _724 * 2.0f;
  float _784 = _783 / _722;
  float _785 = _749 - _745;
  float _786 = _750 - _745;
  float _787 = _751 - _745;
  float _788 = _785 * 1.4426950216293335f;
  float _789 = _788 * _784;
  float _790 = _786 * 1.4426950216293335f;
  float _791 = _790 * _784;
  float _792 = _787 * 1.4426950216293335f;
  float _793 = _792 * _784;
  float _794 = exp2(_789);
  float _795 = exp2(_791);
  float _796 = exp2(_793);
  float _797 = _794 + 1.0f;
  float _798 = _795 + 1.0f;
  float _799 = _796 + 1.0f;
  float _800 = _782 / _797;
  float _801 = _782 / _798;
  float _802 = _782 / _799;
  float _803 = _720 - _800;
  float _804 = _720 - _801;
  float _805 = _720 - _802;
  bool _806 = (_749 < _740);
  bool _807 = (_750 < _740);
  bool _808 = (_751 < _740);
  float _809 = _806 ? _779 : _755;
  float _810 = _807 ? _780 : _756;
  float _811 = _808 ? _781 : _757;
  bool _812 = (_749 > _745);
  bool _813 = (_750 > _745);
  bool _814 = (_751 > _745);
  float _815 = _812 ? _803 : _755;
  float _816 = _813 ? _804 : _756;
  float _817 = _814 ? _805 : _757;
  float _818 = _745 - _740;
  float _819 = _761 / _818;
  float _820 = _762 / _818;
  float _821 = _763 / _818;
  float _822 = saturate(_819);
  float _823 = saturate(_820);
  float _824 = saturate(_821);
  bool _825 = (_745 < _740);
  float _826 = 1.0f - _822;
  float _827 = 1.0f - _823;
  float _828 = 1.0f - _824;
  float _829 = _825 ? _826 : _822;
  float _830 = _825 ? _827 : _823;
  float _831 = _825 ? _828 : _824;
  float _832 = _829 * 2.0f;
  float _833 = _830 * 2.0f;
  float _834 = _831 * 2.0f;
  float _835 = 3.0f - _832;
  float _836 = 3.0f - _833;
  float _837 = 3.0f - _834;
  float _838 = _815 - _809;
  float _839 = _816 - _810;
  float _840 = _817 - _811;
  float _841 = _829 * _829;
  float _842 = _841 * _838;
  float _843 = _842 * _835;
  float _844 = _830 * _830;
  float _845 = _844 * _839;
  float _846 = _845 * _836;
  float _847 = _831 * _831;
  float _848 = _847 * _840;
  float _849 = _848 * _837;
  float _850 = _843 + _809;
  float _851 = _846 + _810;
  float _852 = _849 + _811;
  float _853 = dot(float3(_850, _851, _852), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _854 = _850 - _853;
  float _855 = _851 - _853;
  float _856 = _852 - _853;
  float _857 = _854 * 0.9300000071525574f;
  float _858 = _855 * 0.9300000071525574f;
  float _859 = _856 * 0.9300000071525574f;
  float _860 = _857 + _853;
  float _861 = _858 + _853;
  float _862 = _859 + _853;
  float _863 = max(0.0f, _860);
  float _864 = max(0.0f, _861);
  float _865 = max(0.0f, _862);

  float _866 = _RootShaderParameters_036w;
  float _867 = _863 - _569;
  float _868 = _864 - _570;
  float _869 = _865 - _571;

  float _870 = _866 * _867;
  float _871 = _866 * _868;
  float _872 = _866 * _869;
  float _873 = _870 + _569;
  float _874 = _871 + _570;
  float _875 = _872 + _571;
  float _876 = _873 * 1.065374732017517f;
  float _877 = mad(1.451815478503704e-06f, _874, _876);
  float _878 = mad(-0.06537103652954102f, _875, _877);
  float _879 = _873 * -2.57161445915699e-07f;
  float _880 = mad(1.2036634683609009f, _874, _879);
  float _881 = mad(-0.20366770029067993f, _875, _880);
  float _882 = _873 * 1.862645149230957e-08f;
  float _883 = mad(2.0954757928848267e-08f, _874, _882);
  float _884 = mad(0.9999996423721313f, _875, _883);
  float _885 = _878 - _873;
  float _886 = _881 - _874;
  float _887 = _884 - _875;
  float _888 = _885 * _555;
  float _889 = _886 * _555;
  float _890 = _887 * _555;
  float _891 = _888 + _873;
  float _892 = _889 + _874;
  float _893 = _890 + _875;
  float _894 = _535 * _891;
  float _895 = mad(_536, _892, _894);
  float _896 = mad(_537, _893, _895);
  float _897 = _539 * _891;
  float _898 = mad(_540, _892, _897);
  float _899 = mad(_541, _893, _898);
  float _900 = _543 * _891;
  float _901 = mad(_544, _892, _900);
  float _902 = mad(_545, _893, _901);
  float _903 = max(0.0f, _896);
  float _904 = max(0.0f, _899);
  float _905 = max(0.0f, _902);
  float _907 = _RootShaderParameters_039x;
  float _908 = _907 * _903;
  float _909 = _907 * _904;
  float _910 = _907 * _905;
  float _911 = _RootShaderParameters_039y;
  float _912 = _RootShaderParameters_039z;
  float _913 = _911 + _908;
  float _914 = _913 * _903;
  float _915 = _914 + _912;
  float _916 = _911 + _909;
  float _917 = _916 * _904;
  float _918 = _917 + _912;
  float _919 = _911 + _910;
  float _920 = _919 * _905;
  float _921 = _920 + _912;
  float _923 = _RootShaderParameters_013w;
  float _924 = _RootShaderParameters_013x;
  float _925 = _RootShaderParameters_013y;
  float _926 = _RootShaderParameters_013z;
  float _928 = _RootShaderParameters_014x;
  float _929 = _RootShaderParameters_014y;
  float _930 = _RootShaderParameters_014z;
  float _931 = _928 * _915;
  float _932 = _929 * _918;
  float _933 = _930 * _921;
  float _934 = _924 - _931;
  float _935 = _925 - _932;
  float _936 = _926 - _933;
  float _937 = _934 * _923;
  float _938 = _935 * _923;
  float _939 = _936 * _923;
  float _940 = _937 + _931;
  float _941 = _938 + _932;
  float _942 = _939 + _933;
  float _943 = _928 * _548;
  float _944 = _929 * _551;
  float _945 = _930 * _554;
  float _946 = _924 - _943;
  float _947 = _925 - _944;
  float _948 = _926 - _945;
  float _949 = _946 * _923;
  float _950 = _947 * _923;
  float _951 = _948 * _923;
  float _952 = _949 + _943;
  float _953 = _950 + _944;
  float _954 = _951 + _945;
  float _956 = _RootShaderParameters_040y;
  float _957 = max(0.0f, _940);
  float _958 = max(0.0f, _941);
  float _959 = max(0.0f, _942);
  float _960 = log2(_957);
  float _961 = log2(_958);
  float _962 = log2(_959);
  float _963 = _960 * _956;
  float _964 = _961 * _956;
  float _965 = _962 * _956;
  float _966 = exp2(_963);
  float _967 = exp2(_964);
  float _968 = exp2(_965);

  // CustomEdit
  if (RENODX_TONE_MAP_TYPE != 0) {
    return GenerateOutput(float3(_966, _967, _968));
  }

  uint _970 = _RootShaderParameters_040w;
  bool _971 = (_970 == 0);
  if (_971) {
    uint _974 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _975 = (_974 == 0);
    _1008 = _966;
    _1009 = _967;
    _1010 = _968;
    do {
      if (_975) {
        float _978 = UniformBufferConstants_WorkingColorSpace_008x;
        float _979 = UniformBufferConstants_WorkingColorSpace_008y;
        float _980 = UniformBufferConstants_WorkingColorSpace_008z;
        float _982 = UniformBufferConstants_WorkingColorSpace_009x;
        float _983 = UniformBufferConstants_WorkingColorSpace_009y;
        float _984 = UniformBufferConstants_WorkingColorSpace_009z;
        float _986 = UniformBufferConstants_WorkingColorSpace_010x;
        float _987 = UniformBufferConstants_WorkingColorSpace_010y;
        float _988 = UniformBufferConstants_WorkingColorSpace_010z;
        float _989 = _978 * _966;
        float _990 = mad(_979, _967, _989);
        float _991 = mad(_980, _968, _990);
        float _992 = _982 * _966;
        float _993 = mad(_983, _967, _992);
        float _994 = mad(_984, _968, _993);
        float _995 = _986 * _966;
        float _996 = mad(_987, _967, _995);
        float _997 = mad(_988, _968, _996);
        float _998 = _991 * _37;
        float _999 = mad(_38, _994, _998);
        float _1000 = mad(_39, _997, _999);
        float _1001 = _991 * _40;
        float _1002 = mad(_41, _994, _1001);
        float _1003 = mad(_42, _997, _1002);
        float _1004 = _991 * _43;
        float _1005 = mad(_44, _994, _1004);
        float _1006 = mad(_45, _997, _1005);
        _1008 = _1000;
        _1009 = _1003;
        _1010 = _1006;
      }
      bool _1011 = (_1008 < 0.0031306699384003878f);
      do {
        if (_1011) {
          float _1013 = _1008 * 12.920000076293945f;
          _1021 = _1013;
        } else {
          float _1015 = log2(_1008);
          float _1016 = _1015 * 0.4166666567325592f;
          float _1017 = exp2(_1016);
          float _1018 = _1017 * 1.0549999475479126f;
          float _1019 = _1018 + -0.054999999701976776f;
          _1021 = _1019;
        }
        bool _1022 = (_1009 < 0.0031306699384003878f);
        do {
          if (_1022) {
            float _1024 = _1009 * 12.920000076293945f;
            _1032 = _1024;
          } else {
            float _1026 = log2(_1009);
            float _1027 = _1026 * 0.4166666567325592f;
            float _1028 = exp2(_1027);
            float _1029 = _1028 * 1.0549999475479126f;
            float _1030 = _1029 + -0.054999999701976776f;
            _1032 = _1030;
          }
          bool _1033 = (_1010 < 0.0031306699384003878f);
          if (_1033) {
            float _1035 = _1010 * 12.920000076293945f;
            _2392 = _1021;
            _2393 = _1032;
            _2394 = _1035;
          } else {
            float _1037 = log2(_1010);
            float _1038 = _1037 * 0.4166666567325592f;
            float _1039 = exp2(_1038);
            float _1040 = _1039 * 1.0549999475479126f;
            float _1041 = _1040 + -0.054999999701976776f;
            _2392 = _1021;
            _2393 = _1032;
            _2394 = _1041;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1043 = (_970 == 1);
    if (_1043) {
      float _1046 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1047 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1048 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1050 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1051 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1052 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1054 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1055 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1056 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1057 = _1046 * _966;
      float _1058 = mad(_1047, _967, _1057);
      float _1059 = mad(_1048, _968, _1058);
      float _1060 = _1050 * _966;
      float _1061 = mad(_1051, _967, _1060);
      float _1062 = mad(_1052, _968, _1061);
      float _1063 = _1054 * _966;
      float _1064 = mad(_1055, _967, _1063);
      float _1065 = mad(_1056, _968, _1064);
      float _1066 = _1059 * _37;
      float _1067 = mad(_38, _1062, _1066);
      float _1068 = mad(_39, _1065, _1067);
      float _1069 = _1059 * _40;
      float _1070 = mad(_41, _1062, _1069);
      float _1071 = mad(_42, _1065, _1070);
      float _1072 = _1059 * _43;
      float _1073 = mad(_44, _1062, _1072);
      float _1074 = mad(_45, _1065, _1073);
      float _1075 = max(6.103519990574569e-05f, _1068);
      float _1076 = max(6.103519990574569e-05f, _1071);
      float _1077 = max(6.103519990574569e-05f, _1074);
      float _1078 = max(_1075, 0.017999999225139618f);
      float _1079 = max(_1076, 0.017999999225139618f);
      float _1080 = max(_1077, 0.017999999225139618f);
      float _1081 = log2(_1078);
      float _1082 = log2(_1079);
      float _1083 = log2(_1080);
      float _1084 = _1081 * 0.44999998807907104f;
      float _1085 = _1082 * 0.44999998807907104f;
      float _1086 = _1083 * 0.44999998807907104f;
      float _1087 = exp2(_1084);
      float _1088 = exp2(_1085);
      float _1089 = exp2(_1086);
      float _1090 = _1087 * 1.0989999771118164f;
      float _1091 = _1088 * 1.0989999771118164f;
      float _1092 = _1089 * 1.0989999771118164f;
      float _1093 = _1090 + -0.0989999994635582f;
      float _1094 = _1091 + -0.0989999994635582f;
      float _1095 = _1092 + -0.0989999994635582f;
      float _1096 = _1075 * 4.5f;
      float _1097 = _1076 * 4.5f;
      float _1098 = _1077 * 4.5f;
      float _1099 = min(_1096, _1093);
      float _1100 = min(_1097, _1094);
      float _1101 = min(_1098, _1095);
      _2392 = _1099;
      _2393 = _1100;
      _2394 = _1101;
    } else {
      bool _1103 = (_970 == 3);
      bool _1104 = (_970 == 5);
      bool _1105 = _1103 || _1104;
      if (_1105) {
        //   %1107 = bitcast [6 x float]* %10 to i8*
        //   %1108 = bitcast [6 x float]* %11 to i8*
        float _1110 = _RootShaderParameters_012z;
        float _1111 = _RootShaderParameters_012y;
        float _1112 = _RootShaderParameters_012x;
        float _1114 = _RootShaderParameters_011x;
        float _1115 = _RootShaderParameters_011y;
        float _1116 = _RootShaderParameters_011z;
        float _1117 = _RootShaderParameters_011w;
        float _1119 = _RootShaderParameters_010x;
        float _1120 = _RootShaderParameters_010y;
        float _1121 = _RootShaderParameters_010z;
        float _1122 = _RootShaderParameters_010w;
        float _1124 = _RootShaderParameters_009x;
        float _1126 = _RootShaderParameters_008x;
        float _1127 = _RootShaderParameters_008y;
        float _1128 = _RootShaderParameters_008z;
        float _1129 = _RootShaderParameters_008w;
        _10[0] = _1119;
        _10[1] = _1120;
        _10[2] = _1121;
        _10[3] = _1122;
        _10[4] = _1112;
        _10[5] = _1112;
        _11[0] = _1114;
        _11[1] = _1115;
        _11[2] = _1116;
        _11[3] = _1117;
        _11[4] = _1111;
        _11[5] = _1111;
        float _1143 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1144 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1145 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1147 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1148 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1149 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1151 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1152 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1153 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1154 = _1110 * _952;
        float _1155 = _1110 * _953;
        float _1156 = _1110 * _954;
        float _1157 = _1143 * _1154;
        float _1158 = mad(_1144, _1155, _1157);
        float _1159 = mad(_1145, _1156, _1158);
        float _1160 = _1147 * _1154;
        float _1161 = mad(_1148, _1155, _1160);
        float _1162 = mad(_1149, _1156, _1161);
        float _1163 = _1151 * _1154;
        float _1164 = mad(_1152, _1155, _1163);
        float _1165 = mad(_1153, _1156, _1164);
        float _1166 = min(_1159, _1162);
        float _1167 = min(_1166, _1165);
        float _1168 = max(_1159, _1162);
        float _1169 = max(_1168, _1165);
        float _1170 = max(_1169, 1.000000013351432e-10f);
        float _1171 = max(_1167, 1.000000013351432e-10f);
        float _1172 = _1170 - _1171;
        float _1173 = max(_1169, 0.009999999776482582f);
        float _1174 = _1172 / _1173;
        float _1175 = _1165 - _1162;
        float _1176 = _1175 * _1165;
        float _1177 = _1162 - _1159;
        float _1178 = _1177 * _1162;
        float _1179 = _1176 + _1178;
        float _1180 = _1159 - _1165;
        float _1181 = _1180 * _1159;
        float _1182 = _1179 + _1181;
        float _1183 = sqrt(_1182);
        float _1184 = _1183 * 1.75f;
        float _1185 = _1162 + _1159;
        float _1186 = _1185 + _1165;
        float _1187 = _1186 + _1184;
        float _1188 = _1187 * 0.3333333432674408f;
        float _1189 = _1174 + -0.4000000059604645f;
        float _1190 = _1189 * 5.0f;
        float _1191 = _1189 * 2.5f;
        float _1192 = abs(_1191);
        float _1193 = 1.0f - _1192;
        float _1194 = max(_1193, 0.0f);
        bool _1195 = (_1190 > 0.0f);
        bool _1196 = (_1190 < 0.0f);
        int _1197 = int(_1195);
        int _1198 = int(_1196);
        int _1199 = _1197 - _1198;
        float _1200 = float(_1199);
        float _1201 = _1194 * _1194;
        float _1202 = 1.0f - _1201;
        float _1203 = _1200 * _1202;
        float _1204 = _1203 + 1.0f;
        float _1205 = _1204 * 0.02500000037252903f;
        bool _1206 = !(_1188 <= 0.0533333346247673f);
        _1214 = _1205;
        do {
          if (_1206) {
            bool _1208 = !(_1188 >= 0.1599999964237213f);
            _1214 = 0.0f;
            if (_1208) {
              float _1210 = 0.23999999463558197f / _1187;
              float _1211 = _1210 + -0.5f;
              float _1212 = _1211 * _1205;
              _1214 = _1212;
            }
          }
          float _1215 = _1214 + 1.0f;
          float _1216 = _1215 * _1159;
          float _1217 = _1215 * _1162;
          float _1218 = _1215 * _1165;
          bool _1219 = (_1216 == _1217);
          bool _1220 = (_1217 == _1218);
          bool _1221 = _1219 && _1220;
          _1250 = 0.0f;
          do {
            if (!_1221) {
              float _1223 = _1216 * 2.0f;
              float _1224 = _1223 - _1217;
              float _1225 = _1224 - _1218;
              float _1226 = _1162 - _1165;
              float _1227 = _1226 * 1.7320507764816284f;
              float _1228 = _1227 * _1215;
              float _1229 = _1228 / _1225;
              float _1230 = atan(_1229);
              float _1231 = _1230 + 3.1415927410125732f;
              float _1232 = _1230 + -3.1415927410125732f;
              bool _1233 = (_1225 < 0.0f);
              bool _1234 = (_1225 == 0.0f);
              bool _1235 = (_1228 >= 0.0f);
              bool _1236 = (_1228 < 0.0f);
              bool _1237 = _1235 && _1233;
              float _1238 = _1237 ? _1231 : _1230;
              bool _1239 = _1236 && _1233;
              float _1240 = _1239 ? _1232 : _1238;
              bool _1241 = _1236 && _1234;
              bool _1242 = _1235 && _1234;
              float _1243 = _1240 * 57.2957763671875f;
              float _1244 = _1241 ? -90.0f : _1243;
              float _1245 = _1242 ? 90.0f : _1244;
              bool _1246 = (_1245 < 0.0f);
              _1250 = _1245;
              if (_1246) {
                float _1248 = _1245 + 360.0f;
                _1250 = _1248;
              }
            }
            float _1251 = max(_1250, 0.0f);
            float _1252 = min(_1251, 360.0f);
            bool _1253 = (_1252 < -180.0f);
            do {
              if (_1253) {
                float _1255 = _1252 + 360.0f;
                _1261 = _1255;
              } else {
                bool _1257 = (_1252 > 180.0f);
                _1261 = _1252;
                if (_1257) {
                  float _1259 = _1252 + -360.0f;
                  _1261 = _1259;
                }
              }
              bool _1262 = (_1261 > -67.5f);
              bool _1263 = (_1261 < 67.5f);
              bool _1264 = _1262 && _1263;
              _1300 = 0.0f;
              do {
                if (_1264) {
                  float _1266 = _1261 + 67.5f;
                  float _1267 = _1266 * 0.029629629105329514f;
                  int _1268 = int(_1267);
                  float _1269 = float(_1268);
                  float _1270 = _1267 - _1269;
                  float _1271 = _1270 * _1270;
                  float _1272 = _1271 * _1270;
                  bool _1273 = (_1268 == 3);
                  if (_1273) {
                    float _1275 = _1272 * 0.1666666716337204f;
                    float _1276 = _1271 * 0.5f;
                    float _1277 = _1270 * 0.5f;
                    float _1278 = 0.1666666716337204f - _1277;
                    float _1279 = _1278 + _1276;
                    float _1280 = _1279 - _1275;
                    _1300 = _1280;
                  } else {
                    bool _1282 = (_1268 == 2);
                    if (_1282) {
                      float _1284 = _1272 * 0.5f;
                      float _1285 = 0.6666666865348816f - _1271;
                      float _1286 = _1285 + _1284;
                      _1300 = _1286;
                    } else {
                      bool _1288 = (_1268 == 1);
                      if (_1288) {
                        float _1290 = _1272 * -0.5f;
                        float _1291 = _1271 + _1270;
                        float _1292 = _1291 * 0.5f;
                        float _1293 = _1290 + 0.1666666716337204f;
                        float _1294 = _1293 + _1292;
                        _1300 = _1294;
                      } else {
                        bool _1296 = (_1268 == 0);
                        float _1297 = _1272 * 0.1666666716337204f;
                        float _1298 = _1296 ? _1297 : 0.0f;
                        _1300 = _1298;
                      }
                    }
                  }
                }
                float _1301 = 0.029999999329447746f - _1216;
                float _1302 = _1174 * 0.27000001072883606f;
                float _1303 = _1302 * _1301;
                float _1304 = _1303 * _1300;
                float _1305 = _1304 + _1216;
                float _1306 = max(_1305, 0.0f);
                float _1307 = max(_1217, 0.0f);
                float _1308 = max(_1218, 0.0f);
                float _1309 = min(_1306, 65535.0f);
                float _1310 = min(_1307, 65535.0f);
                float _1311 = min(_1308, 65535.0f);
                float _1312 = _1309 * 1.4514392614364624f;
                float _1313 = mad(-0.2365107536315918f, _1310, _1312);
                float _1314 = mad(-0.21492856740951538f, _1311, _1313);
                float _1315 = _1309 * -0.07655377686023712f;
                float _1316 = mad(1.17622971534729f, _1310, _1315);
                float _1317 = mad(-0.09967592358589172f, _1311, _1316);
                float _1318 = _1309 * 0.008316148072481155f;
                float _1319 = mad(-0.006032449658960104f, _1310, _1318);
                float _1320 = mad(0.9977163076400757f, _1311, _1319);
                float _1321 = max(_1314, 0.0f);
                float _1322 = max(_1317, 0.0f);
                float _1323 = max(_1320, 0.0f);
                float _1324 = min(_1321, 65504.0f);
                float _1325 = min(_1322, 65504.0f);
                float _1326 = min(_1323, 65504.0f);
                float _1327 = dot(float3(_1324, _1325, _1326), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1328 = _1324 - _1327;
                float _1329 = _1325 - _1327;
                float _1330 = _1326 - _1327;
                float _1331 = _1328 * 0.9599999785423279f;
                float _1332 = _1329 * 0.9599999785423279f;
                float _1333 = _1330 * 0.9599999785423279f;
                float _1334 = _1331 + _1327;
                float _1335 = _1332 + _1327;
                float _1336 = _1333 + _1327;
                float _1337 = max(_1334, 1.000000013351432e-10f);
                float _1338 = log2(_1337);
                float _1339 = _1338 * 0.3010300099849701f;
                float _1340 = log2(_1126);
                float _1341 = _1340 * 0.3010300099849701f;
                bool _1342 = !(_1339 <= _1341);
                do {
                  if (!_1342) {
                    float _1344 = log2(_1127);
                    float _1345 = _1344 * 0.3010300099849701f;
                    _1410 = _1345;
                  } else {
                    bool _1347 = (_1339 > _1341);
                    float _1348 = log2(_1124);
                    float _1349 = _1348 * 0.3010300099849701f;
                    bool _1350 = (_1339 < _1349);
                    bool _1351 = _1347 && _1350;
                    if (_1351) {
                      float _1353 = _1338 - _1340;
                      float _1354 = _1353 * 0.9030900001525879f;
                      float _1355 = _1348 - _1340;
                      float _1356 = _1355 * 0.3010300099849701f;
                      float _1357 = _1354 / _1356;
                      int _1358 = int(_1357);
                      float _1359 = float(_1358);
                      float _1360 = _1357 - _1359;
                      float _1362 = _10[_1358];
                      int _1363 = _1358 + 1;
                      float _1365 = _10[_1363];
                      int _1366 = _1358 + 2;
                      float _1368 = _10[_1366];
                      float _1369 = _1360 * _1360;
                      float _1370 = _1362 * 0.5f;
                      float _1371 = mad(_1365, -1.0f, _1370);
                      float _1372 = mad(_1368, 0.5f, _1371);
                      float _1373 = _1365 - _1362;
                      float _1374 = mad(_1365, 0.5f, _1370);
                      float _1375 = dot(float3(_1369, _1360, 1.0f), float3(_1372, _1373, _1374));
                      _1410 = _1375;
                    } else {
                      bool _1377 = !(_1339 >= _1349);
                      do {
                        if (!_1377) {
                          float _1379 = log2(_1128);
                          float _1380 = _1379 * 0.3010300099849701f;
                          bool _1381 = (_1339 < _1380);
                          if (_1381) {
                            float _1383 = _1338 - _1348;
                            float _1384 = _1383 * 0.9030900001525879f;
                            float _1385 = _1379 - _1348;
                            float _1386 = _1385 * 0.3010300099849701f;
                            float _1387 = _1384 / _1386;
                            int _1388 = int(_1387);
                            float _1389 = float(_1388);
                            float _1390 = _1387 - _1389;
                            float _1392 = _11[_1388];
                            int _1393 = _1388 + 1;
                            float _1395 = _11[_1393];
                            int _1396 = _1388 + 2;
                            float _1398 = _11[_1396];
                            float _1399 = _1390 * _1390;
                            float _1400 = _1392 * 0.5f;
                            float _1401 = mad(_1395, -1.0f, _1400);
                            float _1402 = mad(_1398, 0.5f, _1401);
                            float _1403 = _1395 - _1392;
                            float _1404 = mad(_1395, 0.5f, _1400);
                            float _1405 = dot(float3(_1399, _1390, 1.0f), float3(_1402, _1403, _1404));
                            _1410 = _1405;
                            break;
                          }
                        }
                        float _1407 = log2(_1129);
                        float _1408 = _1407 * 0.3010300099849701f;
                        _1410 = _1408;
                      } while (false);
                    }
                  }
                  float _1411 = _1410 * 3.321928024291992f;
                  float _1412 = exp2(_1411);
                  float _1413 = max(_1335, 1.000000013351432e-10f);
                  float _1414 = log2(_1413);
                  float _1415 = _1414 * 0.3010300099849701f;
                  bool _1416 = !(_1415 <= _1341);
                  do {
                    if (!_1416) {
                      float _1418 = log2(_1127);
                      float _1419 = _1418 * 0.3010300099849701f;
                      _1484 = _1419;
                    } else {
                      bool _1421 = (_1415 > _1341);
                      float _1422 = log2(_1124);
                      float _1423 = _1422 * 0.3010300099849701f;
                      bool _1424 = (_1415 < _1423);
                      bool _1425 = _1421 && _1424;
                      if (_1425) {
                        float _1427 = _1414 - _1340;
                        float _1428 = _1427 * 0.9030900001525879f;
                        float _1429 = _1422 - _1340;
                        float _1430 = _1429 * 0.3010300099849701f;
                        float _1431 = _1428 / _1430;
                        int _1432 = int(_1431);
                        float _1433 = float(_1432);
                        float _1434 = _1431 - _1433;
                        float _1436 = _10[_1432];
                        int _1437 = _1432 + 1;
                        float _1439 = _10[_1437];
                        int _1440 = _1432 + 2;
                        float _1442 = _10[_1440];
                        float _1443 = _1434 * _1434;
                        float _1444 = _1436 * 0.5f;
                        float _1445 = mad(_1439, -1.0f, _1444);
                        float _1446 = mad(_1442, 0.5f, _1445);
                        float _1447 = _1439 - _1436;
                        float _1448 = mad(_1439, 0.5f, _1444);
                        float _1449 = dot(float3(_1443, _1434, 1.0f), float3(_1446, _1447, _1448));
                        _1484 = _1449;
                      } else {
                        bool _1451 = !(_1415 >= _1423);
                        do {
                          if (!_1451) {
                            float _1453 = log2(_1128);
                            float _1454 = _1453 * 0.3010300099849701f;
                            bool _1455 = (_1415 < _1454);
                            if (_1455) {
                              float _1457 = _1414 - _1422;
                              float _1458 = _1457 * 0.9030900001525879f;
                              float _1459 = _1453 - _1422;
                              float _1460 = _1459 * 0.3010300099849701f;
                              float _1461 = _1458 / _1460;
                              int _1462 = int(_1461);
                              float _1463 = float(_1462);
                              float _1464 = _1461 - _1463;
                              float _1466 = _11[_1462];
                              int _1467 = _1462 + 1;
                              float _1469 = _11[_1467];
                              int _1470 = _1462 + 2;
                              float _1472 = _11[_1470];
                              float _1473 = _1464 * _1464;
                              float _1474 = _1466 * 0.5f;
                              float _1475 = mad(_1469, -1.0f, _1474);
                              float _1476 = mad(_1472, 0.5f, _1475);
                              float _1477 = _1469 - _1466;
                              float _1478 = mad(_1469, 0.5f, _1474);
                              float _1479 = dot(float3(_1473, _1464, 1.0f), float3(_1476, _1477, _1478));
                              _1484 = _1479;
                              break;
                            }
                          }
                          float _1481 = log2(_1129);
                          float _1482 = _1481 * 0.3010300099849701f;
                          _1484 = _1482;
                        } while (false);
                      }
                    }
                    float _1485 = _1484 * 3.321928024291992f;
                    float _1486 = exp2(_1485);
                    float _1487 = max(_1336, 1.000000013351432e-10f);
                    float _1488 = log2(_1487);
                    float _1489 = _1488 * 0.3010300099849701f;
                    bool _1490 = !(_1489 <= _1341);
                    do {
                      if (!_1490) {
                        float _1492 = log2(_1127);
                        float _1493 = _1492 * 0.3010300099849701f;
                        _1558 = _1493;
                      } else {
                        bool _1495 = (_1489 > _1341);
                        float _1496 = log2(_1124);
                        float _1497 = _1496 * 0.3010300099849701f;
                        bool _1498 = (_1489 < _1497);
                        bool _1499 = _1495 && _1498;
                        if (_1499) {
                          float _1501 = _1488 - _1340;
                          float _1502 = _1501 * 0.9030900001525879f;
                          float _1503 = _1496 - _1340;
                          float _1504 = _1503 * 0.3010300099849701f;
                          float _1505 = _1502 / _1504;
                          int _1506 = int(_1505);
                          float _1507 = float(_1506);
                          float _1508 = _1505 - _1507;
                          float _1510 = _10[_1506];
                          int _1511 = _1506 + 1;
                          float _1513 = _10[_1511];
                          int _1514 = _1506 + 2;
                          float _1516 = _10[_1514];
                          float _1517 = _1508 * _1508;
                          float _1518 = _1510 * 0.5f;
                          float _1519 = mad(_1513, -1.0f, _1518);
                          float _1520 = mad(_1516, 0.5f, _1519);
                          float _1521 = _1513 - _1510;
                          float _1522 = mad(_1513, 0.5f, _1518);
                          float _1523 = dot(float3(_1517, _1508, 1.0f), float3(_1520, _1521, _1522));
                          _1558 = _1523;
                        } else {
                          bool _1525 = !(_1489 >= _1497);
                          do {
                            if (!_1525) {
                              float _1527 = log2(_1128);
                              float _1528 = _1527 * 0.3010300099849701f;
                              bool _1529 = (_1489 < _1528);
                              if (_1529) {
                                float _1531 = _1488 - _1496;
                                float _1532 = _1531 * 0.9030900001525879f;
                                float _1533 = _1527 - _1496;
                                float _1534 = _1533 * 0.3010300099849701f;
                                float _1535 = _1532 / _1534;
                                int _1536 = int(_1535);
                                float _1537 = float(_1536);
                                float _1538 = _1535 - _1537;
                                float _1540 = _11[_1536];
                                int _1541 = _1536 + 1;
                                float _1543 = _11[_1541];
                                int _1544 = _1536 + 2;
                                float _1546 = _11[_1544];
                                float _1547 = _1538 * _1538;
                                float _1548 = _1540 * 0.5f;
                                float _1549 = mad(_1543, -1.0f, _1548);
                                float _1550 = mad(_1546, 0.5f, _1549);
                                float _1551 = _1543 - _1540;
                                float _1552 = mad(_1543, 0.5f, _1548);
                                float _1553 = dot(float3(_1547, _1538, 1.0f), float3(_1550, _1551, _1552));
                                _1558 = _1553;
                                break;
                              }
                            }
                            float _1555 = log2(_1129);
                            float _1556 = _1555 * 0.3010300099849701f;
                            _1558 = _1556;
                          } while (false);
                        }
                      }
                      float _1559 = _1558 * 3.321928024291992f;
                      float _1560 = exp2(_1559);
                      float _1561 = _1412 - _1127;
                      float _1562 = _1129 - _1127;
                      float _1563 = _1561 / _1562;
                      float _1564 = _1486 - _1127;
                      float _1565 = _1564 / _1562;
                      float _1566 = _1560 - _1127;
                      float _1567 = _1566 / _1562;
                      float _1568 = _1563 * 0.6624541878700256f;
                      float _1569 = mad(0.13400420546531677f, _1565, _1568);
                      float _1570 = mad(0.15618768334388733f, _1567, _1569);
                      float _1571 = _1563 * 0.2722287178039551f;
                      float _1572 = mad(0.6740817427635193f, _1565, _1571);
                      float _1573 = mad(0.053689517080783844f, _1567, _1572);
                      float _1574 = _1563 * -0.005574649665504694f;
                      float _1575 = mad(0.00406073359772563f, _1565, _1574);
                      float _1576 = mad(1.0103391408920288f, _1567, _1575);
                      float _1577 = _1570 * 1.6410233974456787f;
                      float _1578 = mad(-0.32480329275131226f, _1573, _1577);
                      float _1579 = mad(-0.23642469942569733f, _1576, _1578);
                      float _1580 = _1570 * -0.663662850856781f;
                      float _1581 = mad(1.6153316497802734f, _1573, _1580);
                      float _1582 = mad(0.016756348311901093f, _1576, _1581);
                      float _1583 = _1570 * 0.011721894145011902f;
                      float _1584 = mad(-0.008284442126750946f, _1573, _1583);
                      float _1585 = mad(0.9883948564529419f, _1576, _1584);
                      float _1586 = max(_1579, 0.0f);
                      float _1587 = max(_1582, 0.0f);
                      float _1588 = max(_1585, 0.0f);
                      float _1589 = min(_1586, 1.0f);
                      float _1590 = min(_1587, 1.0f);
                      float _1591 = min(_1588, 1.0f);
                      float _1592 = _1589 * 0.6624541878700256f;
                      float _1593 = mad(0.13400420546531677f, _1590, _1592);
                      float _1594 = mad(0.15618768334388733f, _1591, _1593);
                      float _1595 = _1589 * 0.2722287178039551f;
                      float _1596 = mad(0.6740817427635193f, _1590, _1595);
                      float _1597 = mad(0.053689517080783844f, _1591, _1596);
                      float _1598 = _1589 * -0.005574649665504694f;
                      float _1599 = mad(0.00406073359772563f, _1590, _1598);
                      float _1600 = mad(1.0103391408920288f, _1591, _1599);
                      float _1601 = _1594 * 1.6410233974456787f;
                      float _1602 = mad(-0.32480329275131226f, _1597, _1601);
                      float _1603 = mad(-0.23642469942569733f, _1600, _1602);
                      float _1604 = _1594 * -0.663662850856781f;
                      float _1605 = mad(1.6153316497802734f, _1597, _1604);
                      float _1606 = mad(0.016756348311901093f, _1600, _1605);
                      float _1607 = _1594 * 0.011721894145011902f;
                      float _1608 = mad(-0.008284442126750946f, _1597, _1607);
                      float _1609 = mad(0.9883948564529419f, _1600, _1608);
                      float _1610 = max(_1603, 0.0f);
                      float _1611 = max(_1606, 0.0f);
                      float _1612 = max(_1609, 0.0f);
                      float _1613 = min(_1610, 65535.0f);
                      float _1614 = min(_1611, 65535.0f);
                      float _1615 = min(_1612, 65535.0f);
                      float _1616 = _1613 * _1129;
                      float _1617 = _1614 * _1129;
                      float _1618 = _1615 * _1129;
                      float _1619 = max(_1616, 0.0f);
                      float _1620 = max(_1617, 0.0f);
                      float _1621 = max(_1618, 0.0f);
                      float _1622 = min(_1619, 65535.0f);
                      float _1623 = min(_1620, 65535.0f);
                      float _1624 = min(_1621, 65535.0f);
                      bool _1625 = (_970 == 5);
                      _1637 = _1622;
                      _1638 = _1623;
                      _1639 = _1624;
                      do {
                        if (!_1625) {
                          float _1627 = _1622 * _37;
                          float _1628 = mad(_38, _1623, _1627);
                          float _1629 = mad(_39, _1624, _1628);
                          float _1630 = _1622 * _40;
                          float _1631 = mad(_41, _1623, _1630);
                          float _1632 = mad(_42, _1624, _1631);
                          float _1633 = _1622 * _43;
                          float _1634 = mad(_44, _1623, _1633);
                          float _1635 = mad(_45, _1624, _1634);
                          _1637 = _1629;
                          _1638 = _1632;
                          _1639 = _1635;
                        }
                        float _1640 = _1637 * 9.999999747378752e-05f;
                        float _1641 = _1638 * 9.999999747378752e-05f;
                        float _1642 = _1639 * 9.999999747378752e-05f;
                        float _1643 = log2(_1640);
                        float _1644 = log2(_1641);
                        float _1645 = log2(_1642);
                        float _1646 = _1643 * 0.1593017578125f;
                        float _1647 = _1644 * 0.1593017578125f;
                        float _1648 = _1645 * 0.1593017578125f;
                        float _1649 = exp2(_1646);
                        float _1650 = exp2(_1647);
                        float _1651 = exp2(_1648);
                        float _1652 = _1649 * 18.8515625f;
                        float _1653 = _1650 * 18.8515625f;
                        float _1654 = _1651 * 18.8515625f;
                        float _1655 = _1652 + 0.8359375f;
                        float _1656 = _1653 + 0.8359375f;
                        float _1657 = _1654 + 0.8359375f;
                        float _1658 = _1649 * 18.6875f;
                        float _1659 = _1650 * 18.6875f;
                        float _1660 = _1651 * 18.6875f;
                        float _1661 = _1658 + 1.0f;
                        float _1662 = _1659 + 1.0f;
                        float _1663 = _1660 + 1.0f;
                        float _1664 = 1.0f / _1661;
                        float _1665 = 1.0f / _1662;
                        float _1666 = 1.0f / _1663;
                        float _1667 = _1664 * _1655;
                        float _1668 = _1665 * _1656;
                        float _1669 = _1666 * _1657;
                        float _1670 = log2(_1667);
                        float _1671 = log2(_1668);
                        float _1672 = log2(_1669);
                        float _1673 = _1670 * 78.84375f;
                        float _1674 = _1671 * 78.84375f;
                        float _1675 = _1672 * 78.84375f;
                        float _1676 = exp2(_1673);
                        float _1677 = exp2(_1674);
                        float _1678 = exp2(_1675);
                        _2392 = _1676;
                        _2393 = _1677;
                        _2394 = _1678;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _1680 = _970 & -3;
        bool _1681 = (_1680 == 4);
        if (_1681) {
          //   %1683 = bitcast [6 x float]* %8 to i8*
          //   %1684 = bitcast [6 x float]* %9 to i8*
          float _1686 = _RootShaderParameters_012z;
          float _1687 = _RootShaderParameters_012y;
          float _1688 = _RootShaderParameters_012x;
          float _1690 = _RootShaderParameters_011x;
          float _1691 = _RootShaderParameters_011y;
          float _1692 = _RootShaderParameters_011z;
          float _1693 = _RootShaderParameters_011w;
          float _1695 = _RootShaderParameters_010x;
          float _1696 = _RootShaderParameters_010y;
          float _1697 = _RootShaderParameters_010z;
          float _1698 = _RootShaderParameters_010w;
          float _1700 = _RootShaderParameters_009x;
          float _1702 = _RootShaderParameters_008x;
          float _1703 = _RootShaderParameters_008y;
          float _1704 = _RootShaderParameters_008z;
          float _1705 = _RootShaderParameters_008w;
          _8[0] = _1695;
          _8[1] = _1696;
          _8[2] = _1697;
          _8[3] = _1698;
          _8[4] = _1688;
          _8[5] = _1688;
          _9[0] = _1690;
          _9[1] = _1691;
          _9[2] = _1692;
          _9[3] = _1693;
          _9[4] = _1687;
          _9[5] = _1687;
          float _1719 = UniformBufferConstants_WorkingColorSpace_016x;
          float _1720 = UniformBufferConstants_WorkingColorSpace_016y;
          float _1721 = UniformBufferConstants_WorkingColorSpace_016z;
          float _1723 = UniformBufferConstants_WorkingColorSpace_017x;
          float _1724 = UniformBufferConstants_WorkingColorSpace_017y;
          float _1725 = UniformBufferConstants_WorkingColorSpace_017z;
          float _1727 = UniformBufferConstants_WorkingColorSpace_018x;
          float _1728 = UniformBufferConstants_WorkingColorSpace_018y;
          float _1729 = UniformBufferConstants_WorkingColorSpace_018z;
          float _1730 = _1686 * _952;
          float _1731 = _1686 * _953;
          float _1732 = _1686 * _954;
          float _1733 = _1719 * _1730;
          float _1734 = mad(_1720, _1731, _1733);
          float _1735 = mad(_1721, _1732, _1734);
          float _1736 = _1723 * _1730;
          float _1737 = mad(_1724, _1731, _1736);
          float _1738 = mad(_1725, _1732, _1737);
          float _1739 = _1727 * _1730;
          float _1740 = mad(_1728, _1731, _1739);
          float _1741 = mad(_1729, _1732, _1740);
          float _1742 = min(_1735, _1738);
          float _1743 = min(_1742, _1741);
          float _1744 = max(_1735, _1738);
          float _1745 = max(_1744, _1741);
          float _1746 = max(_1745, 1.000000013351432e-10f);
          float _1747 = max(_1743, 1.000000013351432e-10f);
          float _1748 = _1746 - _1747;
          float _1749 = max(_1745, 0.009999999776482582f);
          float _1750 = _1748 / _1749;
          float _1751 = _1741 - _1738;
          float _1752 = _1751 * _1741;
          float _1753 = _1738 - _1735;
          float _1754 = _1753 * _1738;
          float _1755 = _1752 + _1754;
          float _1756 = _1735 - _1741;
          float _1757 = _1756 * _1735;
          float _1758 = _1755 + _1757;
          float _1759 = sqrt(_1758);
          float _1760 = _1759 * 1.75f;
          float _1761 = _1738 + _1735;
          float _1762 = _1761 + _1741;
          float _1763 = _1762 + _1760;
          float _1764 = _1763 * 0.3333333432674408f;
          float _1765 = _1750 + -0.4000000059604645f;
          float _1766 = _1765 * 5.0f;
          float _1767 = _1765 * 2.5f;
          float _1768 = abs(_1767);
          float _1769 = 1.0f - _1768;
          float _1770 = max(_1769, 0.0f);
          bool _1771 = (_1766 > 0.0f);
          bool _1772 = (_1766 < 0.0f);
          int _1773 = int(_1771);
          int _1774 = int(_1772);
          int _1775 = _1773 - _1774;
          float _1776 = float(_1775);
          float _1777 = _1770 * _1770;
          float _1778 = 1.0f - _1777;
          float _1779 = _1776 * _1778;
          float _1780 = _1779 + 1.0f;
          float _1781 = _1780 * 0.02500000037252903f;
          bool _1782 = !(_1764 <= 0.0533333346247673f);
          _1790 = _1781;
          do {
            if (_1782) {
              bool _1784 = !(_1764 >= 0.1599999964237213f);
              _1790 = 0.0f;
              if (_1784) {
                float _1786 = 0.23999999463558197f / _1763;
                float _1787 = _1786 + -0.5f;
                float _1788 = _1787 * _1781;
                _1790 = _1788;
              }
            }
            float _1791 = _1790 + 1.0f;
            float _1792 = _1791 * _1735;
            float _1793 = _1791 * _1738;
            float _1794 = _1791 * _1741;
            bool _1795 = (_1792 == _1793);
            bool _1796 = (_1793 == _1794);
            bool _1797 = _1795 && _1796;
            _1826 = 0.0f;
            do {
              if (!_1797) {
                float _1799 = _1792 * 2.0f;
                float _1800 = _1799 - _1793;
                float _1801 = _1800 - _1794;
                float _1802 = _1738 - _1741;
                float _1803 = _1802 * 1.7320507764816284f;
                float _1804 = _1803 * _1791;
                float _1805 = _1804 / _1801;
                float _1806 = atan(_1805);
                float _1807 = _1806 + 3.1415927410125732f;
                float _1808 = _1806 + -3.1415927410125732f;
                bool _1809 = (_1801 < 0.0f);
                bool _1810 = (_1801 == 0.0f);
                bool _1811 = (_1804 >= 0.0f);
                bool _1812 = (_1804 < 0.0f);
                bool _1813 = _1811 && _1809;
                float _1814 = _1813 ? _1807 : _1806;
                bool _1815 = _1812 && _1809;
                float _1816 = _1815 ? _1808 : _1814;
                bool _1817 = _1812 && _1810;
                bool _1818 = _1811 && _1810;
                float _1819 = _1816 * 57.2957763671875f;
                float _1820 = _1817 ? -90.0f : _1819;
                float _1821 = _1818 ? 90.0f : _1820;
                bool _1822 = (_1821 < 0.0f);
                _1826 = _1821;
                if (_1822) {
                  float _1824 = _1821 + 360.0f;
                  _1826 = _1824;
                }
              }
              float _1827 = max(_1826, 0.0f);
              float _1828 = min(_1827, 360.0f);
              bool _1829 = (_1828 < -180.0f);
              do {
                if (_1829) {
                  float _1831 = _1828 + 360.0f;
                  _1837 = _1831;
                } else {
                  bool _1833 = (_1828 > 180.0f);
                  _1837 = _1828;
                  if (_1833) {
                    float _1835 = _1828 + -360.0f;
                    _1837 = _1835;
                  }
                }
                bool _1838 = (_1837 > -67.5f);
                bool _1839 = (_1837 < 67.5f);
                bool _1840 = _1838 && _1839;
                _1876 = 0.0f;
                do {
                  if (_1840) {
                    float _1842 = _1837 + 67.5f;
                    float _1843 = _1842 * 0.029629629105329514f;
                    int _1844 = int(_1843);
                    float _1845 = float(_1844);
                    float _1846 = _1843 - _1845;
                    float _1847 = _1846 * _1846;
                    float _1848 = _1847 * _1846;
                    bool _1849 = (_1844 == 3);
                    if (_1849) {
                      float _1851 = _1848 * 0.1666666716337204f;
                      float _1852 = _1847 * 0.5f;
                      float _1853 = _1846 * 0.5f;
                      float _1854 = 0.1666666716337204f - _1853;
                      float _1855 = _1854 + _1852;
                      float _1856 = _1855 - _1851;
                      _1876 = _1856;
                    } else {
                      bool _1858 = (_1844 == 2);
                      if (_1858) {
                        float _1860 = _1848 * 0.5f;
                        float _1861 = 0.6666666865348816f - _1847;
                        float _1862 = _1861 + _1860;
                        _1876 = _1862;
                      } else {
                        bool _1864 = (_1844 == 1);
                        if (_1864) {
                          float _1866 = _1848 * -0.5f;
                          float _1867 = _1847 + _1846;
                          float _1868 = _1867 * 0.5f;
                          float _1869 = _1866 + 0.1666666716337204f;
                          float _1870 = _1869 + _1868;
                          _1876 = _1870;
                        } else {
                          bool _1872 = (_1844 == 0);
                          float _1873 = _1848 * 0.1666666716337204f;
                          float _1874 = _1872 ? _1873 : 0.0f;
                          _1876 = _1874;
                        }
                      }
                    }
                  }
                  float _1877 = 0.029999999329447746f - _1792;
                  float _1878 = _1750 * 0.27000001072883606f;
                  float _1879 = _1878 * _1877;
                  float _1880 = _1879 * _1876;
                  float _1881 = _1880 + _1792;
                  float _1882 = max(_1881, 0.0f);
                  float _1883 = max(_1793, 0.0f);
                  float _1884 = max(_1794, 0.0f);
                  float _1885 = min(_1882, 65535.0f);
                  float _1886 = min(_1883, 65535.0f);
                  float _1887 = min(_1884, 65535.0f);
                  float _1888 = _1885 * 1.4514392614364624f;
                  float _1889 = mad(-0.2365107536315918f, _1886, _1888);
                  float _1890 = mad(-0.21492856740951538f, _1887, _1889);
                  float _1891 = _1885 * -0.07655377686023712f;
                  float _1892 = mad(1.17622971534729f, _1886, _1891);
                  float _1893 = mad(-0.09967592358589172f, _1887, _1892);
                  float _1894 = _1885 * 0.008316148072481155f;
                  float _1895 = mad(-0.006032449658960104f, _1886, _1894);
                  float _1896 = mad(0.9977163076400757f, _1887, _1895);
                  float _1897 = max(_1890, 0.0f);
                  float _1898 = max(_1893, 0.0f);
                  float _1899 = max(_1896, 0.0f);
                  float _1900 = min(_1897, 65504.0f);
                  float _1901 = min(_1898, 65504.0f);
                  float _1902 = min(_1899, 65504.0f);
                  float _1903 = dot(float3(_1900, _1901, _1902), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _1904 = _1900 - _1903;
                  float _1905 = _1901 - _1903;
                  float _1906 = _1902 - _1903;
                  float _1907 = _1904 * 0.9599999785423279f;
                  float _1908 = _1905 * 0.9599999785423279f;
                  float _1909 = _1906 * 0.9599999785423279f;
                  float _1910 = _1907 + _1903;
                  float _1911 = _1908 + _1903;
                  float _1912 = _1909 + _1903;
                  float _1913 = max(_1910, 1.000000013351432e-10f);
                  float _1914 = log2(_1913);
                  float _1915 = _1914 * 0.3010300099849701f;
                  float _1916 = log2(_1702);
                  float _1917 = _1916 * 0.3010300099849701f;
                  bool _1918 = !(_1915 <= _1917);
                  do {
                    if (!_1918) {
                      float _1920 = log2(_1703);
                      float _1921 = _1920 * 0.3010300099849701f;
                      _1986 = _1921;
                    } else {
                      bool _1923 = (_1915 > _1917);
                      float _1924 = log2(_1700);
                      float _1925 = _1924 * 0.3010300099849701f;
                      bool _1926 = (_1915 < _1925);
                      bool _1927 = _1923 && _1926;
                      if (_1927) {
                        float _1929 = _1914 - _1916;
                        float _1930 = _1929 * 0.9030900001525879f;
                        float _1931 = _1924 - _1916;
                        float _1932 = _1931 * 0.3010300099849701f;
                        float _1933 = _1930 / _1932;
                        int _1934 = int(_1933);
                        float _1935 = float(_1934);
                        float _1936 = _1933 - _1935;
                        float _1938 = _8[_1934];
                        int _1939 = _1934 + 1;
                        float _1941 = _8[_1939];
                        int _1942 = _1934 + 2;
                        float _1944 = _8[_1942];
                        float _1945 = _1936 * _1936;
                        float _1946 = _1938 * 0.5f;
                        float _1947 = mad(_1941, -1.0f, _1946);
                        float _1948 = mad(_1944, 0.5f, _1947);
                        float _1949 = _1941 - _1938;
                        float _1950 = mad(_1941, 0.5f, _1946);
                        float _1951 = dot(float3(_1945, _1936, 1.0f), float3(_1948, _1949, _1950));
                        _1986 = _1951;
                      } else {
                        bool _1953 = !(_1915 >= _1925);
                        do {
                          if (!_1953) {
                            float _1955 = log2(_1704);
                            float _1956 = _1955 * 0.3010300099849701f;
                            bool _1957 = (_1915 < _1956);
                            if (_1957) {
                              float _1959 = _1914 - _1924;
                              float _1960 = _1959 * 0.9030900001525879f;
                              float _1961 = _1955 - _1924;
                              float _1962 = _1961 * 0.3010300099849701f;
                              float _1963 = _1960 / _1962;
                              int _1964 = int(_1963);
                              float _1965 = float(_1964);
                              float _1966 = _1963 - _1965;
                              float _1968 = _9[_1964];
                              int _1969 = _1964 + 1;
                              float _1971 = _9[_1969];
                              int _1972 = _1964 + 2;
                              float _1974 = _9[_1972];
                              float _1975 = _1966 * _1966;
                              float _1976 = _1968 * 0.5f;
                              float _1977 = mad(_1971, -1.0f, _1976);
                              float _1978 = mad(_1974, 0.5f, _1977);
                              float _1979 = _1971 - _1968;
                              float _1980 = mad(_1971, 0.5f, _1976);
                              float _1981 = dot(float3(_1975, _1966, 1.0f), float3(_1978, _1979, _1980));
                              _1986 = _1981;
                              break;
                            }
                          }
                          float _1983 = log2(_1705);
                          float _1984 = _1983 * 0.3010300099849701f;
                          _1986 = _1984;
                        } while (false);
                      }
                    }
                    float _1987 = _1986 * 3.321928024291992f;
                    float _1988 = exp2(_1987);
                    float _1989 = max(_1911, 1.000000013351432e-10f);
                    float _1990 = log2(_1989);
                    float _1991 = _1990 * 0.3010300099849701f;
                    bool _1992 = !(_1991 <= _1917);
                    do {
                      if (!_1992) {
                        float _1994 = log2(_1703);
                        float _1995 = _1994 * 0.3010300099849701f;
                        _2060 = _1995;
                      } else {
                        bool _1997 = (_1991 > _1917);
                        float _1998 = log2(_1700);
                        float _1999 = _1998 * 0.3010300099849701f;
                        bool _2000 = (_1991 < _1999);
                        bool _2001 = _1997 && _2000;
                        if (_2001) {
                          float _2003 = _1990 - _1916;
                          float _2004 = _2003 * 0.9030900001525879f;
                          float _2005 = _1998 - _1916;
                          float _2006 = _2005 * 0.3010300099849701f;
                          float _2007 = _2004 / _2006;
                          int _2008 = int(_2007);
                          float _2009 = float(_2008);
                          float _2010 = _2007 - _2009;
                          float _2012 = _8[_2008];
                          int _2013 = _2008 + 1;
                          float _2015 = _8[_2013];
                          int _2016 = _2008 + 2;
                          float _2018 = _8[_2016];
                          float _2019 = _2010 * _2010;
                          float _2020 = _2012 * 0.5f;
                          float _2021 = mad(_2015, -1.0f, _2020);
                          float _2022 = mad(_2018, 0.5f, _2021);
                          float _2023 = _2015 - _2012;
                          float _2024 = mad(_2015, 0.5f, _2020);
                          float _2025 = dot(float3(_2019, _2010, 1.0f), float3(_2022, _2023, _2024));
                          _2060 = _2025;
                        } else {
                          bool _2027 = !(_1991 >= _1999);
                          do {
                            if (!_2027) {
                              float _2029 = log2(_1704);
                              float _2030 = _2029 * 0.3010300099849701f;
                              bool _2031 = (_1991 < _2030);
                              if (_2031) {
                                float _2033 = _1990 - _1998;
                                float _2034 = _2033 * 0.9030900001525879f;
                                float _2035 = _2029 - _1998;
                                float _2036 = _2035 * 0.3010300099849701f;
                                float _2037 = _2034 / _2036;
                                int _2038 = int(_2037);
                                float _2039 = float(_2038);
                                float _2040 = _2037 - _2039;
                                float _2042 = _9[_2038];
                                int _2043 = _2038 + 1;
                                float _2045 = _9[_2043];
                                int _2046 = _2038 + 2;
                                float _2048 = _9[_2046];
                                float _2049 = _2040 * _2040;
                                float _2050 = _2042 * 0.5f;
                                float _2051 = mad(_2045, -1.0f, _2050);
                                float _2052 = mad(_2048, 0.5f, _2051);
                                float _2053 = _2045 - _2042;
                                float _2054 = mad(_2045, 0.5f, _2050);
                                float _2055 = dot(float3(_2049, _2040, 1.0f), float3(_2052, _2053, _2054));
                                _2060 = _2055;
                                break;
                              }
                            }
                            float _2057 = log2(_1705);
                            float _2058 = _2057 * 0.3010300099849701f;
                            _2060 = _2058;
                          } while (false);
                        }
                      }
                      float _2061 = _2060 * 3.321928024291992f;
                      float _2062 = exp2(_2061);
                      float _2063 = max(_1912, 1.000000013351432e-10f);
                      float _2064 = log2(_2063);
                      float _2065 = _2064 * 0.3010300099849701f;
                      bool _2066 = !(_2065 <= _1917);
                      do {
                        if (!_2066) {
                          float _2068 = log2(_1703);
                          float _2069 = _2068 * 0.3010300099849701f;
                          _2134 = _2069;
                        } else {
                          bool _2071 = (_2065 > _1917);
                          float _2072 = log2(_1700);
                          float _2073 = _2072 * 0.3010300099849701f;
                          bool _2074 = (_2065 < _2073);
                          bool _2075 = _2071 && _2074;
                          if (_2075) {
                            float _2077 = _2064 - _1916;
                            float _2078 = _2077 * 0.9030900001525879f;
                            float _2079 = _2072 - _1916;
                            float _2080 = _2079 * 0.3010300099849701f;
                            float _2081 = _2078 / _2080;
                            int _2082 = int(_2081);
                            float _2083 = float(_2082);
                            float _2084 = _2081 - _2083;
                            float _2086 = _8[_2082];
                            int _2087 = _2082 + 1;
                            float _2089 = _8[_2087];
                            int _2090 = _2082 + 2;
                            float _2092 = _8[_2090];
                            float _2093 = _2084 * _2084;
                            float _2094 = _2086 * 0.5f;
                            float _2095 = mad(_2089, -1.0f, _2094);
                            float _2096 = mad(_2092, 0.5f, _2095);
                            float _2097 = _2089 - _2086;
                            float _2098 = mad(_2089, 0.5f, _2094);
                            float _2099 = dot(float3(_2093, _2084, 1.0f), float3(_2096, _2097, _2098));
                            _2134 = _2099;
                          } else {
                            bool _2101 = !(_2065 >= _2073);
                            do {
                              if (!_2101) {
                                float _2103 = log2(_1704);
                                float _2104 = _2103 * 0.3010300099849701f;
                                bool _2105 = (_2065 < _2104);
                                if (_2105) {
                                  float _2107 = _2064 - _2072;
                                  float _2108 = _2107 * 0.9030900001525879f;
                                  float _2109 = _2103 - _2072;
                                  float _2110 = _2109 * 0.3010300099849701f;
                                  float _2111 = _2108 / _2110;
                                  int _2112 = int(_2111);
                                  float _2113 = float(_2112);
                                  float _2114 = _2111 - _2113;
                                  float _2116 = _9[_2112];
                                  int _2117 = _2112 + 1;
                                  float _2119 = _9[_2117];
                                  int _2120 = _2112 + 2;
                                  float _2122 = _9[_2120];
                                  float _2123 = _2114 * _2114;
                                  float _2124 = _2116 * 0.5f;
                                  float _2125 = mad(_2119, -1.0f, _2124);
                                  float _2126 = mad(_2122, 0.5f, _2125);
                                  float _2127 = _2119 - _2116;
                                  float _2128 = mad(_2119, 0.5f, _2124);
                                  float _2129 = dot(float3(_2123, _2114, 1.0f), float3(_2126, _2127, _2128));
                                  _2134 = _2129;
                                  break;
                                }
                              }
                              float _2131 = log2(_1705);
                              float _2132 = _2131 * 0.3010300099849701f;
                              _2134 = _2132;
                            } while (false);
                          }
                        }
                        float _2135 = _2134 * 3.321928024291992f;
                        float _2136 = exp2(_2135);
                        float _2137 = _1988 - _1703;
                        float _2138 = _1705 - _1703;
                        float _2139 = _2137 / _2138;
                        float _2140 = _2062 - _1703;
                        float _2141 = _2140 / _2138;
                        float _2142 = _2136 - _1703;
                        float _2143 = _2142 / _2138;
                        float _2144 = _2139 * 0.6624541878700256f;
                        float _2145 = mad(0.13400420546531677f, _2141, _2144);
                        float _2146 = mad(0.15618768334388733f, _2143, _2145);
                        float _2147 = _2139 * 0.2722287178039551f;
                        float _2148 = mad(0.6740817427635193f, _2141, _2147);
                        float _2149 = mad(0.053689517080783844f, _2143, _2148);
                        float _2150 = _2139 * -0.005574649665504694f;
                        float _2151 = mad(0.00406073359772563f, _2141, _2150);
                        float _2152 = mad(1.0103391408920288f, _2143, _2151);
                        float _2153 = _2146 * 1.6410233974456787f;
                        float _2154 = mad(-0.32480329275131226f, _2149, _2153);
                        float _2155 = mad(-0.23642469942569733f, _2152, _2154);
                        float _2156 = _2146 * -0.663662850856781f;
                        float _2157 = mad(1.6153316497802734f, _2149, _2156);
                        float _2158 = mad(0.016756348311901093f, _2152, _2157);
                        float _2159 = _2146 * 0.011721894145011902f;
                        float _2160 = mad(-0.008284442126750946f, _2149, _2159);
                        float _2161 = mad(0.9883948564529419f, _2152, _2160);
                        float _2162 = max(_2155, 0.0f);
                        float _2163 = max(_2158, 0.0f);
                        float _2164 = max(_2161, 0.0f);
                        float _2165 = min(_2162, 1.0f);
                        float _2166 = min(_2163, 1.0f);
                        float _2167 = min(_2164, 1.0f);
                        float _2168 = _2165 * 0.6624541878700256f;
                        float _2169 = mad(0.13400420546531677f, _2166, _2168);
                        float _2170 = mad(0.15618768334388733f, _2167, _2169);
                        float _2171 = _2165 * 0.2722287178039551f;
                        float _2172 = mad(0.6740817427635193f, _2166, _2171);
                        float _2173 = mad(0.053689517080783844f, _2167, _2172);
                        float _2174 = _2165 * -0.005574649665504694f;
                        float _2175 = mad(0.00406073359772563f, _2166, _2174);
                        float _2176 = mad(1.0103391408920288f, _2167, _2175);
                        float _2177 = _2170 * 1.6410233974456787f;
                        float _2178 = mad(-0.32480329275131226f, _2173, _2177);
                        float _2179 = mad(-0.23642469942569733f, _2176, _2178);
                        float _2180 = _2170 * -0.663662850856781f;
                        float _2181 = mad(1.6153316497802734f, _2173, _2180);
                        float _2182 = mad(0.016756348311901093f, _2176, _2181);
                        float _2183 = _2170 * 0.011721894145011902f;
                        float _2184 = mad(-0.008284442126750946f, _2173, _2183);
                        float _2185 = mad(0.9883948564529419f, _2176, _2184);
                        float _2186 = max(_2179, 0.0f);
                        float _2187 = max(_2182, 0.0f);
                        float _2188 = max(_2185, 0.0f);
                        float _2189 = min(_2186, 65535.0f);
                        float _2190 = min(_2187, 65535.0f);
                        float _2191 = min(_2188, 65535.0f);
                        float _2192 = _2189 * _1705;
                        float _2193 = _2190 * _1705;
                        float _2194 = _2191 * _1705;
                        float _2195 = max(_2192, 0.0f);
                        float _2196 = max(_2193, 0.0f);
                        float _2197 = max(_2194, 0.0f);
                        float _2198 = min(_2195, 65535.0f);
                        float _2199 = min(_2196, 65535.0f);
                        float _2200 = min(_2197, 65535.0f);
                        bool _2201 = (_970 == 6);
                        _2213 = _2198;
                        _2214 = _2199;
                        _2215 = _2200;
                        do {
                          if (!_2201) {
                            float _2203 = _2198 * _37;
                            float _2204 = mad(_38, _2199, _2203);
                            float _2205 = mad(_39, _2200, _2204);
                            float _2206 = _2198 * _40;
                            float _2207 = mad(_41, _2199, _2206);
                            float _2208 = mad(_42, _2200, _2207);
                            float _2209 = _2198 * _43;
                            float _2210 = mad(_44, _2199, _2209);
                            float _2211 = mad(_45, _2200, _2210);
                            _2213 = _2205;
                            _2214 = _2208;
                            _2215 = _2211;
                          }
                          float _2216 = _2213 * 9.999999747378752e-05f;
                          float _2217 = _2214 * 9.999999747378752e-05f;
                          float _2218 = _2215 * 9.999999747378752e-05f;
                          float _2219 = log2(_2216);
                          float _2220 = log2(_2217);
                          float _2221 = log2(_2218);
                          float _2222 = _2219 * 0.1593017578125f;
                          float _2223 = _2220 * 0.1593017578125f;
                          float _2224 = _2221 * 0.1593017578125f;
                          float _2225 = exp2(_2222);
                          float _2226 = exp2(_2223);
                          float _2227 = exp2(_2224);
                          float _2228 = _2225 * 18.8515625f;
                          float _2229 = _2226 * 18.8515625f;
                          float _2230 = _2227 * 18.8515625f;
                          float _2231 = _2228 + 0.8359375f;
                          float _2232 = _2229 + 0.8359375f;
                          float _2233 = _2230 + 0.8359375f;
                          float _2234 = _2225 * 18.6875f;
                          float _2235 = _2226 * 18.6875f;
                          float _2236 = _2227 * 18.6875f;
                          float _2237 = _2234 + 1.0f;
                          float _2238 = _2235 + 1.0f;
                          float _2239 = _2236 + 1.0f;
                          float _2240 = 1.0f / _2237;
                          float _2241 = 1.0f / _2238;
                          float _2242 = 1.0f / _2239;
                          float _2243 = _2240 * _2231;
                          float _2244 = _2241 * _2232;
                          float _2245 = _2242 * _2233;
                          float _2246 = log2(_2243);
                          float _2247 = log2(_2244);
                          float _2248 = log2(_2245);
                          float _2249 = _2246 * 78.84375f;
                          float _2250 = _2247 * 78.84375f;
                          float _2251 = _2248 * 78.84375f;
                          float _2252 = exp2(_2249);
                          float _2253 = exp2(_2250);
                          float _2254 = exp2(_2251);
                          _2392 = _2252;
                          _2393 = _2253;
                          _2394 = _2254;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2256 = (_970 == 7);
          if (_2256) {
            float _2259 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2260 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2261 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2263 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2264 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2265 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2267 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2268 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2269 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2270 = _2259 * _952;
            float _2271 = mad(_2260, _953, _2270);
            float _2272 = mad(_2261, _954, _2271);
            float _2273 = _2263 * _952;
            float _2274 = mad(_2264, _953, _2273);
            float _2275 = mad(_2265, _954, _2274);
            float _2276 = _2267 * _952;
            float _2277 = mad(_2268, _953, _2276);
            float _2278 = mad(_2269, _954, _2277);
            float _2279 = _2272 * _37;
            float _2280 = mad(_38, _2275, _2279);
            float _2281 = mad(_39, _2278, _2280);
            float _2282 = _2272 * _40;
            float _2283 = mad(_41, _2275, _2282);
            float _2284 = mad(_42, _2278, _2283);
            float _2285 = _2272 * _43;
            float _2286 = mad(_44, _2275, _2285);
            float _2287 = mad(_45, _2278, _2286);
            float _2288 = _2281 * 9.999999747378752e-05f;
            float _2289 = _2284 * 9.999999747378752e-05f;
            float _2290 = _2287 * 9.999999747378752e-05f;
            float _2291 = log2(_2288);
            float _2292 = log2(_2289);
            float _2293 = log2(_2290);
            float _2294 = _2291 * 0.1593017578125f;
            float _2295 = _2292 * 0.1593017578125f;
            float _2296 = _2293 * 0.1593017578125f;
            float _2297 = exp2(_2294);
            float _2298 = exp2(_2295);
            float _2299 = exp2(_2296);
            float _2300 = _2297 * 18.8515625f;
            float _2301 = _2298 * 18.8515625f;
            float _2302 = _2299 * 18.8515625f;
            float _2303 = _2300 + 0.8359375f;
            float _2304 = _2301 + 0.8359375f;
            float _2305 = _2302 + 0.8359375f;
            float _2306 = _2297 * 18.6875f;
            float _2307 = _2298 * 18.6875f;
            float _2308 = _2299 * 18.6875f;
            float _2309 = _2306 + 1.0f;
            float _2310 = _2307 + 1.0f;
            float _2311 = _2308 + 1.0f;
            float _2312 = 1.0f / _2309;
            float _2313 = 1.0f / _2310;
            float _2314 = 1.0f / _2311;
            float _2315 = _2312 * _2303;
            float _2316 = _2313 * _2304;
            float _2317 = _2314 * _2305;
            float _2318 = log2(_2315);
            float _2319 = log2(_2316);
            float _2320 = log2(_2317);
            float _2321 = _2318 * 78.84375f;
            float _2322 = _2319 * 78.84375f;
            float _2323 = _2320 * 78.84375f;
            float _2324 = exp2(_2321);
            float _2325 = exp2(_2322);
            float _2326 = exp2(_2323);
            _2392 = _2324;
            _2393 = _2325;
            _2394 = _2326;
          } else {
            bool _2328 = (_970 == 8);
            _2392 = _952;
            _2393 = _953;
            _2394 = _954;
            if (!_2328) {
              bool _2330 = (_970 == 9);
              float _2332 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2333 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2334 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2336 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2337 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2338 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2340 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2341 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2342 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2330) {
                float _2344 = _2332 * _940;
                float _2345 = mad(_2333, _941, _2344);
                float _2346 = mad(_2334, _942, _2345);
                float _2347 = _2336 * _940;
                float _2348 = mad(_2337, _941, _2347);
                float _2349 = mad(_2338, _942, _2348);
                float _2350 = _2340 * _940;
                float _2351 = mad(_2341, _941, _2350);
                float _2352 = mad(_2342, _942, _2351);
                float _2353 = _2346 * _37;
                float _2354 = mad(_38, _2349, _2353);
                float _2355 = mad(_39, _2352, _2354);
                float _2356 = _2346 * _40;
                float _2357 = mad(_41, _2349, _2356);
                float _2358 = mad(_42, _2352, _2357);
                float _2359 = _2346 * _43;
                float _2360 = mad(_44, _2349, _2359);
                float _2361 = mad(_45, _2352, _2360);
                _2392 = _2355;
                _2393 = _2358;
                _2394 = _2361;
              } else {
                float _2363 = _2332 * _966;
                float _2364 = mad(_2333, _967, _2363);
                float _2365 = mad(_2334, _968, _2364);
                float _2366 = _2336 * _966;
                float _2367 = mad(_2337, _967, _2366);
                float _2368 = mad(_2338, _968, _2367);
                float _2369 = _2340 * _966;
                float _2370 = mad(_2341, _967, _2369);
                float _2371 = mad(_2342, _968, _2370);
                float _2372 = _2365 * _37;
                float _2373 = mad(_38, _2368, _2372);
                float _2374 = mad(_39, _2371, _2373);
                float _2375 = _2365 * _40;
                float _2376 = mad(_41, _2368, _2375);
                float _2377 = mad(_42, _2371, _2376);
                float _2378 = _2365 * _43;
                float _2379 = mad(_44, _2368, _2378);
                float _2380 = mad(_45, _2371, _2379);
                float _2381 = _RootShaderParameters_040z;
                float _2382 = log2(_2374);
                float _2383 = log2(_2377);
                float _2384 = log2(_2380);
                float _2385 = _2382 * _2381;
                float _2386 = _2383 * _2381;
                float _2387 = _2384 * _2381;
                float _2388 = exp2(_2385);
                float _2389 = exp2(_2386);
                float _2390 = exp2(_2387);
                _2392 = _2388;
                _2393 = _2389;
                _2394 = _2390;
              }
            }
          }
        }
      }
    }
  }
  float _2395 = _2392 * 0.9523810148239136f;
  float _2396 = _2393 * 0.9523810148239136f;
  float _2397 = _2394 * 0.9523810148239136f;
  SV_Target.x = _2395;
  SV_Target.y = _2396;
  SV_Target.z = _2397;
  SV_Target.w = 0.0f;
  return SV_Target;
}
