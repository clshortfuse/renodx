#include "../../common.hlsl"

Texture2D<float4> Textures_1 : register(t0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035x : packoffset(c035.x);
  float _RootShaderParameters_035y : packoffset(c035.y);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  uint _RootShaderParameters_038z : packoffset(c038.z);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_000x : packoffset(c000.x);
  float UniformBufferConstants_WorkingColorSpace_000y : packoffset(c000.y);
  float UniformBufferConstants_WorkingColorSpace_000z : packoffset(c000.z);
  float UniformBufferConstants_WorkingColorSpace_001x : packoffset(c001.x);
  float UniformBufferConstants_WorkingColorSpace_001y : packoffset(c001.y);
  float UniformBufferConstants_WorkingColorSpace_001z : packoffset(c001.z);
  float UniformBufferConstants_WorkingColorSpace_002x : packoffset(c002.x);
  float UniformBufferConstants_WorkingColorSpace_002y : packoffset(c002.y);
  float UniformBufferConstants_WorkingColorSpace_002z : packoffset(c002.z);
  float UniformBufferConstants_WorkingColorSpace_004x : packoffset(c004.x);
  float UniformBufferConstants_WorkingColorSpace_004y : packoffset(c004.y);
  float UniformBufferConstants_WorkingColorSpace_004z : packoffset(c004.z);
  float UniformBufferConstants_WorkingColorSpace_005x : packoffset(c005.x);
  float UniformBufferConstants_WorkingColorSpace_005y : packoffset(c005.y);
  float UniformBufferConstants_WorkingColorSpace_005z : packoffset(c005.z);
  float UniformBufferConstants_WorkingColorSpace_006x : packoffset(c006.x);
  float UniformBufferConstants_WorkingColorSpace_006y : packoffset(c006.y);
  float UniformBufferConstants_WorkingColorSpace_006z : packoffset(c006.z);
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

float4 main(
    noperspective float2 TEXCOORD: TEXCOORD,
    noperspective float4 SV_Position: SV_Position,
    nointerpolation uint SV_RenderTargetArrayIndex: SV_RenderTargetArrayIndex)
    : SV_Target {
  float4 SV_Target;
  // texture _1 = Textures_1;
  // SamplerState _2 = Samplers_1;
  // cbuffer _3 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _4 = _RootShaderParameters;
  // _5 = _3;
  // _6 = _4;
  uint _7 = SV_RenderTargetArrayIndex;
  float _8 = TEXCOORD.x;
  float _9 = TEXCOORD.y;
  float _10[6];
  float _11[6];
  float _12[6];
  float _13[6];
  float _14 = _8 + -0.015625f;
  float _15 = _9 + -0.015625f;
  float _16 = _14 * 1.0322580337524414f;
  float _17 = _15 * 1.0322580337524414f;
  float _18 = float(_7);
  float _19 = _18 * 0.032258063554763794f;
  uint _21 = _RootShaderParameters_041x;
  bool _22 = (_21 == 1);
  float _39 = 1.379158854484558f;
  float _40 = -0.3088507056236267f;
  float _41 = -0.07034677267074585f;
  float _42 = -0.06933528929948807f;
  float _43 = 1.0822921991348267f;
  float _44 = -0.012962047010660172f;
  float _45 = -0.002159259282052517f;
  float _46 = -0.045465391129255295f;
  float _47 = 1.0477596521377563f;
  float _105;
  float _106;
  float _107;
  float _156;
  float _885;
  float _921;
  float _932;
  float _996;
  float _1175;
  float _1186;
  float _1197;
  float _1370;
  float _1371;
  float _1372;
  float _1383;
  float _1394;
  float _1576;
  float _1612;
  float _1623;
  float _1662;
  float _1772;
  float _1846;
  float _1920;
  float _1999;
  float _2000;
  float _2001;
  float _2152;
  float _2188;
  float _2199;
  float _2238;
  float _2348;
  float _2422;
  float _2496;
  float _2575;
  float _2576;
  float _2577;
  float _2754;
  float _2755;
  float _2756;
  if (!_22) {
    bool _24 = (_21 == 2);
    _39 = 1.02579927444458f;
    _40 = -0.020052503794431686f;
    _41 = -0.0057713985443115234f;
    _42 = -0.0022350111976265907f;
    _43 = 1.0045825242996216f;
    _44 = -0.002352306619286537f;
    _45 = -0.005014004185795784f;
    _46 = -0.025293385609984398f;
    _47 = 1.0304402112960815f;
    if (!_24) {
      bool _26 = (_21 == 3);
      _39 = 0.6954522132873535f;
      _40 = 0.14067870378494263f;
      _41 = 0.16386906802654266f;
      _42 = 0.044794563204050064f;
      _43 = 0.8596711158752441f;
      _44 = 0.0955343171954155f;
      _45 = -0.005525882821530104f;
      _46 = 0.004025210160762072f;
      _47 = 1.0015007257461548f;
      if (!_26) {
        bool _28 = (_21 == 4);
        float _29 = _28 ? 1.0f : 1.7050515413284302f;
        float _30 = _28 ? 0.0f : -0.6217905879020691f;
        float _31 = _28 ? 0.0f : -0.0832584798336029f;
        float _32 = _28 ? 0.0f : -0.13025718927383423f;
        float _33 = _28 ? 1.0f : 1.1408027410507202f;
        float _34 = _28 ? 0.0f : -0.010548528283834457f;
        float _35 = _28 ? 0.0f : -0.024003278464078903f;
        float _36 = _28 ? 0.0f : -0.1289687603712082f;
        float _37 = _28 ? 1.0f : 1.152971863746643f;
        _39 = _29;
        _40 = _30;
        _41 = _31;
        _42 = _32;
        _43 = _33;
        _44 = _34;
        _45 = _35;
        _46 = _36;
        _47 = _37;
      }
    }
  }
  uint _49 = _RootShaderParameters_040w;
  bool _50 = (_49 > 2);
  if (_50) {
    float _52 = log2(_16);
    float _53 = log2(_17);
    float _54 = log2(_19);
    float _55 = _52 * 0.012683313339948654f;
    float _56 = _53 * 0.012683313339948654f;
    float _57 = _54 * 0.012683313339948654f;
    float _58 = exp2(_55);
    float _59 = exp2(_56);
    float _60 = exp2(_57);
    float _61 = _58 + -0.8359375f;
    float _62 = _59 + -0.8359375f;
    float _63 = _60 + -0.8359375f;
    float _64 = max(0.0f, _61);
    float _65 = max(0.0f, _62);
    float _66 = max(0.0f, _63);
    float _67 = _58 * 18.6875f;
    float _68 = _59 * 18.6875f;
    float _69 = _60 * 18.6875f;
    float _70 = 18.8515625f - _67;
    float _71 = 18.8515625f - _68;
    float _72 = 18.8515625f - _69;
    float _73 = _64 / _70;
    float _74 = _65 / _71;
    float _75 = _66 / _72;
    float _76 = log2(_73);
    float _77 = log2(_74);
    float _78 = log2(_75);
    float _79 = _76 * 6.277394771575928f;
    float _80 = _77 * 6.277394771575928f;
    float _81 = _78 * 6.277394771575928f;
    float _82 = exp2(_79);
    float _83 = exp2(_80);
    float _84 = exp2(_81);
    float _85 = _82 * 100.0f;
    float _86 = _83 * 100.0f;
    float _87 = _84 * 100.0f;
    _105 = _85;
    _106 = _86;
    _107 = _87;
  } else {
    float _89 = _14 * 14.45161247253418f;
    float _90 = _89 + -6.07624626159668f;
    float _91 = _15 * 14.45161247253418f;
    float _92 = _91 + -6.07624626159668f;
    float _93 = _18 * 0.4516128897666931f;
    float _94 = _93 + -6.07624626159668f;
    float _95 = exp2(_90);
    float _96 = exp2(_92);
    float _97 = exp2(_94);
    float _98 = _95 * 0.18000000715255737f;
    float _99 = _96 * 0.18000000715255737f;
    float _100 = _97 * 0.18000000715255737f;
    float _101 = _98 + -0.002667719265446067f;
    float _102 = _99 + -0.002667719265446067f;
    float _103 = _100 + -0.002667719265446067f;
    _105 = _101;
    _106 = _102;
    _107 = _103;
  }

  float _109 = UniformBufferConstants_WorkingColorSpace_004x;
  float _110 = UniformBufferConstants_WorkingColorSpace_004y;
  float _111 = UniformBufferConstants_WorkingColorSpace_004z;
  float _113 = UniformBufferConstants_WorkingColorSpace_005x;
  float _114 = UniformBufferConstants_WorkingColorSpace_005y;
  float _115 = UniformBufferConstants_WorkingColorSpace_005z;
  float _117 = UniformBufferConstants_WorkingColorSpace_006x;
  float _118 = UniformBufferConstants_WorkingColorSpace_006y;
  float _119 = UniformBufferConstants_WorkingColorSpace_006z;
  float _121 = UniformBufferConstants_WorkingColorSpace_000x;
  float _122 = UniformBufferConstants_WorkingColorSpace_000y;
  float _123 = UniformBufferConstants_WorkingColorSpace_000z;
  float _125 = UniformBufferConstants_WorkingColorSpace_001x;
  float _126 = UniformBufferConstants_WorkingColorSpace_001y;
  float _127 = UniformBufferConstants_WorkingColorSpace_001z;
  float _129 = UniformBufferConstants_WorkingColorSpace_002x;
  float _130 = UniformBufferConstants_WorkingColorSpace_002y;
  float _131 = UniformBufferConstants_WorkingColorSpace_002z;
  uint _133 = _RootShaderParameters_038z;
  bool _134 = (_133 != 0);
  float _136 = _RootShaderParameters_035y;
  float _137 = _RootShaderParameters_035x;
  float _138 = _137 * 1.0005563497543335f;
  float _139 = 0.9994439482688904f / _137;
  bool _140 = !(_138 <= 7000.0f);
  if (!_140) {
    float _142 = _139 * 4607000064.0f;
    float _143 = 2967800.0f - _142;
    float _144 = _143 * _139;
    float _145 = _144 + 99.11000061035156f;
    float _146 = _145 * _139;
    float _147 = _146 + 0.24406300485134125f;
    _156 = _147;
  } else {
    float _149 = _139 * 2006400000.0f;
    float _150 = 1901800.0f - _149;
    float _151 = _150 * _139;
    float _152 = _151 + 247.47999572753906f;
    float _153 = _152 * _139;
    float _154 = _153 + 0.23703999817371368f;
    _156 = _154;
  }
  float _157 = _156 * _156;
  float _158 = _157 * 3.0f;
  float _159 = _156 * 2.869999885559082f;
  float _160 = _159 + -0.2750000059604645f;
  float _161 = _160 - _158;
  float _162 = _137 * 1.2864121856637212e-07f;
  float _163 = _162 + 0.00015411825734190643f;
  float _164 = _163 * _137;
  float _165 = _164 + 0.8601177334785461f;
  float _166 = _137 * 7.081451371959702e-07f;
  float _167 = _166 + 0.0008424202096648514f;
  float _168 = _167 * _137;
  float _169 = _168 + 1.0f;
  float _170 = _165 / _169;
  float _171 = _137 * 4.204816761443908e-08f;
  float _172 = _171 + 4.228062607580796e-05f;
  float _173 = _172 * _137;
  float _174 = _173 + 0.31739872694015503f;
  float _175 = _137 * 2.8974181986995973e-05f;
  float _176 = 1.0f - _175;
  float _177 = _137 * _137;
  float _178 = _177 * 1.6145605741257896e-07f;
  float _179 = _176 + _178;
  float _180 = _174 / _179;
  float _181 = _170 * 3.0f;
  float _182 = _170 * 2.0f;
  float _183 = _180 * 8.0f;
  float _184 = _182 + 4.0f;
  float _185 = _184 - _183;
  float _186 = _181 / _185;
  float _187 = _180 * 2.0f;
  float _188 = _187 / _185;
  bool _189 = (_137 < 4000.0f);
  float _190 = _189 ? _186 : _156;
  float _191 = _189 ? _188 : _161;
  float _192 = _137 * 1916156.25f;
  float _193 = -1137581184.0f - _192;
  float _194 = _177 * 1.5317699909210205f;
  float _195 = _193 - _194;
  float _196 = _137 + 1189.6199951171875f;
  float _197 = _196 * _137;
  float _198 = _197 + 1412139.875f;
  float _199 = _198 * _198;
  float _200 = _195 / _199;
  float _201 = _137 * 705674.0f;
  float _202 = 1974715392.0f - _201;
  float _203 = _177 * 308.60699462890625f;
  float _204 = _202 - _203;
  float _205 = _137 * 179.45599365234375f;
  float _206 = 6193636.0f - _205;
  float _207 = _206 + _177;
  float _208 = _207 * _207;
  float _209 = _204 / _208;
  float _210 = dot(float2(_200, _209), float2(_200, _209));
  float _211 = rsqrt(_210);
  float _212 = _136 * 0.05000000074505806f;
  float _213 = _212 * _209;
  float _214 = _213 * _211;
  float _215 = _214 + _170;
  float _216 = _212 * _200;
  float _217 = _216 * _211;
  float _218 = _180 - _217;
  float _219 = _215 * 3.0f;
  float _220 = _215 * 2.0f;
  float _221 = _218 * 8.0f;
  float _222 = 4.0f - _221;
  float _223 = _222 + _220;
  float _224 = _219 / _223;
  float _225 = _218 * 2.0f;
  float _226 = _225 / _223;
  float _227 = _224 - _186;
  float _228 = _226 - _188;
  float _229 = _227 + _190;
  float _230 = _228 + _191;
  float _231 = _134 ? _229 : 0.3127000033855438f;
  float _232 = _134 ? _230 : 0.32899999618530273f;
  float _233 = _134 ? 0.3127000033855438f : _229;
  float _234 = _134 ? 0.32899999618530273f : _230;
  float _235 = max(_232, 1.000000013351432e-10f);
  float _236 = _231 / _235;
  float _237 = 1.0f - _231;
  float _238 = _237 - _232;
  float _239 = _238 / _235;
  float _240 = max(_234, 1.000000013351432e-10f);
  float _241 = _233 / _240;
  float _242 = 1.0f - _233;
  float _243 = _242 - _234;
  float _244 = _243 / _240;
  float _245 = _236 * 0.8950999975204468f;
  float _246 = _245 + 0.266400009393692f;
  float _247 = mad(-0.16140000522136688f, _239, _246);
  float _248 = _236 * 0.7501999735832214f;
  float _249 = 1.7135000228881836f - _248;
  float _250 = mad(0.03669999912381172f, _239, _249);
  float _251 = _236 * 0.03889999911189079f;
  float _252 = _251 + -0.06849999725818634f;
  float _253 = mad(1.0296000242233276f, _239, _252);
  float _254 = _241 * 0.8950999975204468f;
  float _255 = _254 + 0.266400009393692f;
  float _256 = mad(-0.16140000522136688f, _244, _255);
  float _257 = _241 * 0.7501999735832214f;
  float _258 = 1.7135000228881836f - _257;
  float _259 = mad(0.03669999912381172f, _244, _258);
  float _260 = _241 * 0.03889999911189079f;
  float _261 = _260 + -0.06849999725818634f;
  float _262 = mad(1.0296000242233276f, _244, _261);
  float _263 = _256 / _247;
  float _264 = _259 / _250;
  float _265 = _262 / _253;
  float _266 = mad(_264, -0.7501999735832214f, 0.0f);
  float _267 = mad(_264, 1.7135000228881836f, 0.0f);
  float _268 = mad(_264, 0.03669999912381172f, -0.0f);
  float _269 = mad(_265, 0.03889999911189079f, 0.0f);
  float _270 = mad(_265, -0.06849999725818634f, 0.0f);
  float _271 = mad(_265, 1.0296000242233276f, 0.0f);
  float _272 = _263 * 0.883457362651825f;
  float _273 = mad(-0.1470542997121811f, _266, _272);
  float _274 = mad(0.1599626988172531f, _269, _273);
  float _275 = _263 * 0.26293492317199707f;
  float _276 = mad(-0.1470542997121811f, _267, _275);
  float _277 = mad(0.1599626988172531f, _270, _276);
  float _278 = _263 * -0.15930065512657166f;
  float _279 = mad(-0.1470542997121811f, _268, _278);
  float _280 = mad(0.1599626988172531f, _271, _279);
  float _281 = _263 * 0.38695648312568665f;
  float _282 = mad(0.5183603167533875f, _266, _281);
  float _283 = mad(0.04929120093584061f, _269, _282);
  float _284 = _263 * 0.11516613513231277f;
  float _285 = mad(0.5183603167533875f, _267, _284);
  float _286 = mad(0.04929120093584061f, _270, _285);
  float _287 = _263 * -0.0697740763425827f;
  float _288 = mad(0.5183603167533875f, _268, _287);
  float _289 = mad(0.04929120093584061f, _271, _288);
  float _290 = _263 * -0.007634039502590895f;
  float _291 = mad(0.04004279896616936f, _266, _290);
  float _292 = mad(0.9684867262840271f, _269, _291);
  float _293 = _263 * -0.0022720457054674625f;
  float _294 = mad(0.04004279896616936f, _267, _293);
  float _295 = mad(0.9684867262840271f, _270, _294);
  float _296 = _263 * 0.0013765322510153055f;
  float _297 = mad(0.04004279896616936f, _268, _296);
  float _298 = mad(0.9684867262840271f, _271, _297);
  float _299 = _274 * _121;
  float _300 = mad(_277, _125, _299);
  float _301 = mad(_280, _129, _300);
  float _302 = _274 * _122;
  float _303 = mad(_277, _126, _302);
  float _304 = mad(_280, _130, _303);
  float _305 = _274 * _123;
  float _306 = mad(_277, _127, _305);
  float _307 = mad(_280, _131, _306);
  float _308 = _283 * _121;
  float _309 = mad(_286, _125, _308);
  float _310 = mad(_289, _129, _309);
  float _311 = _283 * _122;
  float _312 = mad(_286, _126, _311);
  float _313 = mad(_289, _130, _312);
  float _314 = _283 * _123;
  float _315 = mad(_286, _127, _314);
  float _316 = mad(_289, _131, _315);
  float _317 = _292 * _121;
  float _318 = mad(_295, _125, _317);
  float _319 = mad(_298, _129, _318);
  float _320 = _292 * _122;
  float _321 = mad(_295, _126, _320);
  float _322 = mad(_298, _130, _321);
  float _323 = _292 * _123;
  float _324 = mad(_295, _127, _323);
  float _325 = mad(_298, _131, _324);
  float _326 = _301 * _109;
  float _327 = mad(_110, _310, _326);
  float _328 = mad(_111, _319, _327);
  float _329 = _304 * _109;
  float _330 = mad(_110, _313, _329);
  float _331 = mad(_111, _322, _330);
  float _332 = _307 * _109;
  float _333 = mad(_110, _316, _332);
  float _334 = mad(_111, _325, _333);
  float _335 = _301 * _113;
  float _336 = mad(_114, _310, _335);
  float _337 = mad(_115, _319, _336);
  float _338 = _304 * _113;
  float _339 = mad(_114, _313, _338);
  float _340 = mad(_115, _322, _339);
  float _341 = _307 * _113;
  float _342 = mad(_114, _316, _341);
  float _343 = mad(_115, _325, _342);
  float _344 = _301 * _117;
  float _345 = mad(_118, _310, _344);
  float _346 = mad(_119, _319, _345);
  float _347 = _304 * _117;
  float _348 = mad(_118, _313, _347);
  float _349 = mad(_119, _322, _348);
  float _350 = _307 * _117;
  float _351 = mad(_118, _316, _350);
  float _352 = mad(_119, _325, _351);
  float _353 = _328 * _105;
  float _354 = mad(_331, _106, _353);
  float _355 = mad(_334, _107, _354);
  float _356 = _337 * _105;
  float _357 = mad(_340, _106, _356);
  float _358 = mad(_343, _107, _357);
  float _359 = _346 * _105;
  float _360 = mad(_349, _106, _359);
  float _361 = mad(_352, _107, _360);

  float _363 = UniformBufferConstants_WorkingColorSpace_008x;
  float _364 = UniformBufferConstants_WorkingColorSpace_008y;
  float _365 = UniformBufferConstants_WorkingColorSpace_008z;
  float _367 = UniformBufferConstants_WorkingColorSpace_009x;
  float _368 = UniformBufferConstants_WorkingColorSpace_009y;
  float _369 = UniformBufferConstants_WorkingColorSpace_009z;
  float _371 = UniformBufferConstants_WorkingColorSpace_010x;
  float _372 = UniformBufferConstants_WorkingColorSpace_010y;
  float _373 = UniformBufferConstants_WorkingColorSpace_010z;
  float _374 = _363 * _355;
  float _375 = mad(_364, _358, _374);
  float _376 = mad(_365, _361, _375);
  float _377 = _367 * _355;
  float _378 = mad(_368, _358, _377);
  float _379 = mad(_369, _361, _378);
  float _380 = _371 * _355;
  float _381 = mad(_372, _358, _380);
  float _382 = mad(_373, _361, _381);

  // Gamut Expansion
  float _383 = dot(float3(_376, _379, _382), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));

  SetUngradedAP1(float3(_376, _379, _382));

  float _384 = _376 / _383;
  float _385 = _379 / _383;
  float _386 = _382 / _383;
  float _387 = _384 + -1.0f;
  float _388 = _385 + -1.0f;
  float _389 = _386 + -1.0f;
  float _390 = dot(float3(_387, _388, _389), float3(_387, _388, _389));
  float _391 = _390 * -4.0f;
  float _392 = exp2(_391);
  float _393 = 1.0f - _392;
  float _395 = _RootShaderParameters_036z;
  float _396 = _383 * _383;
  float _397 = _396 * -4.0f;
  float _398 = _397 * _395;
  float _399 = exp2(_398);
  float _400 = 1.0f - _399;
  float _401 = _400 * _393;
  float _402 = _376 * 1.370412826538086f;
  float _403 = mad(-0.32929131388664246f, _379, _402);
  float _404 = mad(-0.06368283927440643f, _382, _403);
  float _405 = _376 * -0.08343426138162613f;
  float _406 = mad(1.0970908403396606f, _379, _405);
  float _407 = mad(-0.010861567221581936f, _382, _406);
  float _408 = _376 * -0.02579325996339321f;
  float _409 = mad(-0.09862564504146576f, _379, _408);
  float _410 = mad(1.203694462776184f, _382, _409);
  float _411 = _404 - _376;
  float _412 = _407 - _379;
  float _413 = _410 - _382;
  float _414 = _411 * _401;
  float _415 = _412 * _401;
  float _416 = _413 * _401;
  float _417 = _414 + _376;
  float _418 = _415 + _379;
  float _419 = _416 + _382;

  // AP1_RGB2Y
  float _420 = dot(float3(_376, _379, _382), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _422 = _RootShaderParameters_024x;
  float _423 = _RootShaderParameters_024y;
  float _424 = _RootShaderParameters_024z;
  float _425 = _RootShaderParameters_024w;
  float _427 = _RootShaderParameters_019x;
  float _428 = _RootShaderParameters_019y;
  float _429 = _RootShaderParameters_019z;
  float _430 = _RootShaderParameters_019w;
  float _431 = _427 + _422;
  float _432 = _428 + _423;
  float _433 = _429 + _424;
  float _434 = _430 + _425;
  float _436 = _RootShaderParameters_023x;
  float _437 = _RootShaderParameters_023y;
  float _438 = _RootShaderParameters_023z;
  float _439 = _RootShaderParameters_023w;
  float _441 = _RootShaderParameters_018x;
  float _442 = _RootShaderParameters_018y;
  float _443 = _RootShaderParameters_018z;
  float _444 = _RootShaderParameters_018w;
  float _445 = _441 * _436;
  float _446 = _442 * _437;
  float _447 = _443 * _438;
  float _448 = _444 * _439;
  float _450 = _RootShaderParameters_022x;
  float _451 = _RootShaderParameters_022y;
  float _452 = _RootShaderParameters_022z;
  float _453 = _RootShaderParameters_022w;
  float _455 = _RootShaderParameters_017x;
  float _456 = _RootShaderParameters_017y;
  float _457 = _RootShaderParameters_017z;
  float _458 = _RootShaderParameters_017w;
  float _459 = _455 * _450;
  float _460 = _456 * _451;
  float _461 = _457 * _452;
  float _462 = _458 * _453;
  float _464 = _RootShaderParameters_021x;
  float _465 = _RootShaderParameters_021y;
  float _466 = _RootShaderParameters_021z;
  float _467 = _RootShaderParameters_021w;
  float _469 = _RootShaderParameters_016x;
  float _470 = _RootShaderParameters_016y;
  float _471 = _RootShaderParameters_016z;
  float _472 = _RootShaderParameters_016w;
  float _473 = _469 * _464;
  float _474 = _470 * _465;
  float _475 = _471 * _466;
  float _476 = _472 * _467;
  float _478 = _RootShaderParameters_020x;
  float _479 = _RootShaderParameters_020y;
  float _480 = _RootShaderParameters_020z;
  float _481 = _RootShaderParameters_020w;
  float _483 = _RootShaderParameters_015x;
  float _484 = _RootShaderParameters_015y;
  float _485 = _RootShaderParameters_015z;
  float _486 = _RootShaderParameters_015w;
  float _487 = _483 * _478;
  float _488 = _484 * _479;
  float _489 = _485 * _480;
  float _490 = _486 * _481;
  float _491 = _487 * _490;
  float _492 = _488 * _490;
  float _493 = _489 * _490;
  float _494 = _417 - _420;
  float _495 = _418 - _420;
  float _496 = _419 - _420;
  float _497 = _491 * _494;
  float _498 = _492 * _495;
  float _499 = _493 * _496;
  float _500 = _497 + _420;
  float _501 = _498 + _420;
  float _502 = _499 + _420;
  float _503 = max(0.0f, _500);
  float _504 = max(0.0f, _501);
  float _505 = max(0.0f, _502);
  float _506 = _473 * _476;
  float _507 = _474 * _476;
  float _508 = _475 * _476;
  float _509 = _503 * 5.55555534362793f;
  float _510 = _504 * 5.55555534362793f;
  float _511 = _505 * 5.55555534362793f;
  float _512 = log2(_509);
  float _513 = log2(_510);
  float _514 = log2(_511);
  float _515 = _506 * _512;
  float _516 = _507 * _513;
  float _517 = _508 * _514;
  float _518 = exp2(_515);
  float _519 = exp2(_516);
  float _520 = exp2(_517);
  float _521 = _518 * 0.18000000715255737f;
  float _522 = _519 * 0.18000000715255737f;
  float _523 = _520 * 0.18000000715255737f;
  float _524 = _459 * _462;
  float _525 = _460 * _462;
  float _526 = _461 * _462;
  float _527 = 1.0f / _524;
  float _528 = 1.0f / _525;
  float _529 = 1.0f / _526;
  float _530 = log2(_521);
  float _531 = log2(_522);
  float _532 = log2(_523);
  float _533 = _530 * _527;
  float _534 = _531 * _528;
  float _535 = _532 * _529;
  float _536 = exp2(_533);
  float _537 = exp2(_534);
  float _538 = exp2(_535);
  float _539 = _445 * _448;
  float _540 = _446 * _448;
  float _541 = _447 * _448;
  float _542 = _539 * _536;
  float _543 = _540 * _537;
  float _544 = _541 * _538;
  float _545 = _431 + _434;
  float _546 = _432 + _434;
  float _547 = _433 + _434;
  float _548 = _545 + _542;
  float _549 = _546 + _543;
  float _550 = _547 + _544;
  float _551 = _RootShaderParameters_035z;
  float _552 = _420 / _551;
  float _553 = saturate(_552);
  float _554 = _553 * 2.0f;
  float _555 = 3.0f - _554;
  float _556 = _553 * _553;
  float _557 = _556 * _555;
  float _558 = 1.0f - _557;
  float _560 = _RootShaderParameters_034x;
  float _561 = _RootShaderParameters_034y;
  float _562 = _RootShaderParameters_034z;
  float _563 = _RootShaderParameters_034w;
  float _564 = _427 + _560;
  float _565 = _428 + _561;
  float _566 = _429 + _562;
  float _567 = _430 + _563;
  float _569 = _RootShaderParameters_033x;
  float _570 = _RootShaderParameters_033y;
  float _571 = _RootShaderParameters_033z;
  float _572 = _RootShaderParameters_033w;
  float _573 = _441 * _569;
  float _574 = _442 * _570;
  float _575 = _443 * _571;
  float _576 = _444 * _572;
  float _578 = _RootShaderParameters_032x;
  float _579 = _RootShaderParameters_032y;
  float _580 = _RootShaderParameters_032z;
  float _581 = _RootShaderParameters_032w;
  float _582 = _455 * _578;
  float _583 = _456 * _579;
  float _584 = _457 * _580;
  float _585 = _458 * _581;
  float _587 = _RootShaderParameters_031x;
  float _588 = _RootShaderParameters_031y;
  float _589 = _RootShaderParameters_031z;
  float _590 = _RootShaderParameters_031w;
  float _591 = _469 * _587;
  float _592 = _470 * _588;
  float _593 = _471 * _589;
  float _594 = _472 * _590;
  float _596 = _RootShaderParameters_030x;
  float _597 = _RootShaderParameters_030y;
  float _598 = _RootShaderParameters_030z;
  float _599 = _RootShaderParameters_030w;
  float _600 = _483 * _596;
  float _601 = _484 * _597;
  float _602 = _485 * _598;
  float _603 = _486 * _599;
  float _604 = _600 * _603;
  float _605 = _601 * _603;
  float _606 = _602 * _603;
  float _607 = _604 * _494;
  float _608 = _605 * _495;
  float _609 = _606 * _496;
  float _610 = _607 + _420;
  float _611 = _608 + _420;
  float _612 = _609 + _420;
  float _613 = max(0.0f, _610);
  float _614 = max(0.0f, _611);
  float _615 = max(0.0f, _612);
  float _616 = _591 * _594;
  float _617 = _592 * _594;
  float _618 = _593 * _594;
  float _619 = _613 * 5.55555534362793f;
  float _620 = _614 * 5.55555534362793f;
  float _621 = _615 * 5.55555534362793f;
  float _622 = log2(_619);
  float _623 = log2(_620);
  float _624 = log2(_621);
  float _625 = _616 * _622;
  float _626 = _617 * _623;
  float _627 = _618 * _624;
  float _628 = exp2(_625);
  float _629 = exp2(_626);
  float _630 = exp2(_627);
  float _631 = _628 * 0.18000000715255737f;
  float _632 = _629 * 0.18000000715255737f;
  float _633 = _630 * 0.18000000715255737f;
  float _634 = _582 * _585;
  float _635 = _583 * _585;
  float _636 = _584 * _585;
  float _637 = 1.0f / _634;
  float _638 = 1.0f / _635;
  float _639 = 1.0f / _636;
  float _640 = log2(_631);
  float _641 = log2(_632);
  float _642 = log2(_633);
  float _643 = _640 * _637;
  float _644 = _641 * _638;
  float _645 = _642 * _639;
  float _646 = exp2(_643);
  float _647 = exp2(_644);
  float _648 = exp2(_645);
  float _649 = _573 * _576;
  float _650 = _574 * _576;
  float _651 = _575 * _576;
  float _652 = _649 * _646;
  float _653 = _650 * _647;
  float _654 = _651 * _648;
  float _655 = _564 + _567;
  float _656 = _565 + _567;
  float _657 = _566 + _567;
  float _658 = _655 + _652;
  float _659 = _656 + _653;
  float _660 = _657 + _654;
  float _661 = _RootShaderParameters_036x;
  float _663 = _RootShaderParameters_035w;
  float _664 = _661 - _663;
  float _665 = _420 - _663;
  float _666 = _665 / _664;
  float _667 = saturate(_666);
  float _668 = _667 * 2.0f;
  float _669 = 3.0f - _668;
  float _670 = _667 * _667;
  float _671 = _670 * _669;
  float _673 = _RootShaderParameters_029x;
  float _674 = _RootShaderParameters_029y;
  float _675 = _RootShaderParameters_029z;
  float _676 = _RootShaderParameters_029w;
  float _677 = _427 + _673;
  float _678 = _428 + _674;
  float _679 = _429 + _675;
  float _680 = _430 + _676;
  float _682 = _RootShaderParameters_028x;
  float _683 = _RootShaderParameters_028y;
  float _684 = _RootShaderParameters_028z;
  float _685 = _RootShaderParameters_028w;
  float _686 = _441 * _682;
  float _687 = _442 * _683;
  float _688 = _443 * _684;
  float _689 = _444 * _685;
  float _691 = _RootShaderParameters_027x;
  float _692 = _RootShaderParameters_027y;
  float _693 = _RootShaderParameters_027z;
  float _694 = _RootShaderParameters_027w;
  float _695 = _455 * _691;
  float _696 = _456 * _692;
  float _697 = _457 * _693;
  float _698 = _458 * _694;
  float _700 = _RootShaderParameters_026x;
  float _701 = _RootShaderParameters_026y;
  float _702 = _RootShaderParameters_026z;
  float _703 = _RootShaderParameters_026w;
  float _704 = _469 * _700;
  float _705 = _470 * _701;
  float _706 = _471 * _702;
  float _707 = _472 * _703;
  float _709 = _RootShaderParameters_025x;
  float _710 = _RootShaderParameters_025y;
  float _711 = _RootShaderParameters_025z;
  float _712 = _RootShaderParameters_025w;
  float _713 = _483 * _709;
  float _714 = _484 * _710;
  float _715 = _485 * _711;
  float _716 = _486 * _712;
  float _717 = _713 * _716;
  float _718 = _714 * _716;
  float _719 = _715 * _716;
  float _720 = _717 * _494;
  float _721 = _718 * _495;
  float _722 = _719 * _496;
  float _723 = _720 + _420;
  float _724 = _721 + _420;
  float _725 = _722 + _420;
  float _726 = max(0.0f, _723);
  float _727 = max(0.0f, _724);
  float _728 = max(0.0f, _725);
  float _729 = _704 * _707;
  float _730 = _705 * _707;
  float _731 = _706 * _707;
  float _732 = _726 * 5.55555534362793f;
  float _733 = _727 * 5.55555534362793f;
  float _734 = _728 * 5.55555534362793f;
  float _735 = log2(_732);
  float _736 = log2(_733);
  float _737 = log2(_734);
  float _738 = _729 * _735;
  float _739 = _730 * _736;
  float _740 = _731 * _737;
  float _741 = exp2(_738);
  float _742 = exp2(_739);
  float _743 = exp2(_740);
  float _744 = _741 * 0.18000000715255737f;
  float _745 = _742 * 0.18000000715255737f;
  float _746 = _743 * 0.18000000715255737f;
  float _747 = _695 * _698;
  float _748 = _696 * _698;
  float _749 = _697 * _698;
  float _750 = 1.0f / _747;
  float _751 = 1.0f / _748;
  float _752 = 1.0f / _749;
  float _753 = log2(_744);
  float _754 = log2(_745);
  float _755 = log2(_746);
  float _756 = _753 * _750;
  float _757 = _754 * _751;
  float _758 = _755 * _752;
  float _759 = exp2(_756);
  float _760 = exp2(_757);
  float _761 = exp2(_758);
  float _762 = _686 * _689;
  float _763 = _687 * _689;
  float _764 = _688 * _689;
  float _765 = _762 * _759;
  float _766 = _763 * _760;
  float _767 = _764 * _761;
  float _768 = _677 + _680;
  float _769 = _678 + _680;
  float _770 = _679 + _680;
  float _771 = _768 + _765;
  float _772 = _769 + _766;
  float _773 = _770 + _767;
  float _774 = _557 - _671;
  float _775 = _558 * _548;
  float _776 = _558 * _549;
  float _777 = _558 * _550;
  float _778 = _771 * _774;
  float _779 = _772 * _774;
  float _780 = _773 * _774;
  float _781 = _671 * _658;
  float _782 = _671 * _659;
  float _783 = _671 * _660;
  float _784 = _781 + _775;
  float _785 = _784 + _778;
  float _786 = _782 + _776;
  float _787 = _786 + _779;
  float _788 = _783 + _777;
  float _789 = _788 + _780;
  float _791 = UniformBufferConstants_WorkingColorSpace_012x;
  float _792 = UniformBufferConstants_WorkingColorSpace_012y;
  float _793 = UniformBufferConstants_WorkingColorSpace_012z;
  float _795 = UniformBufferConstants_WorkingColorSpace_013x;
  float _796 = UniformBufferConstants_WorkingColorSpace_013y;
  float _797 = UniformBufferConstants_WorkingColorSpace_013z;
  float _799 = UniformBufferConstants_WorkingColorSpace_014x;
  float _800 = UniformBufferConstants_WorkingColorSpace_014y;
  float _801 = UniformBufferConstants_WorkingColorSpace_014z;
  float _802 = _785 * _791;
  float _803 = mad(_792, _787, _802);
  float _804 = mad(_793, _789, _803);
  float _805 = _795 * _785;
  float _806 = mad(_796, _787, _805);
  float _807 = mad(_797, _789, _806);
  float _808 = _799 * _785;
  float _809 = mad(_800, _787, _808);
  float _810 = mad(_801, _789, _809);
  float _811 = _RootShaderParameters_036y;

  SetUntonemappedAP1(float3(_785, _787, _789));  // CustomEdit

  float _812 = _785 * 0.9386394023895264f;
  float _813 = mad(-4.540197551250458e-09f, _787, _812);
  float _814 = mad(0.061360642313957214f, _789, _813);
  float _815 = _785 * 6.775371730327606e-08f;
  float _816 = mad(0.8307942152023315f, _787, _815);
  float _817 = mad(0.169205904006958f, _789, _816);
  float _818 = _785 * -9.313225746154785e-10f;
  float _819 = mad(-2.3283064365386963e-10f, _787, _818);
  float _820 = _814 - _785;
  float _821 = _817 - _787;
  float _822 = _820 * _811;
  float _823 = _821 * _811;
  float _824 = _819 * _811;
  float _825 = _822 + _785;
  float _826 = _823 + _787;
  float _827 = _824 + _789;

  float _828 = _825 * 0.6954522132873535f;
  float _829 = mad(0.14067868888378143f, _826, _828);
  float _830 = mad(0.16386905312538147f, _827, _829);
  float _831 = _825 * 0.044794581830501556f;
  float _832 = mad(0.8596711158752441f, _826, _831);
  float _833 = mad(0.0955343246459961f, _827, _832);
  float _834 = _825 * -0.005525882821530104f;
  float _835 = mad(0.004025210160762072f, _826, _834);
  float _836 = mad(1.0015007257461548f, _827, _835);
  float _837 = min(_830, _833);
  float _838 = min(_837, _836);
  float _839 = max(_830, _833);
  float _840 = max(_839, _836);
  float _841 = max(_840, 1.000000013351432e-10f);
  float _842 = max(_838, 1.000000013351432e-10f);
  float _843 = _841 - _842;
  float _844 = max(_840, 0.009999999776482582f);
  float _845 = _843 / _844;
  float _846 = _836 - _833;
  float _847 = _846 * _836;
  float _848 = _833 - _830;
  float _849 = _848 * _833;
  float _850 = _847 + _849;
  float _851 = _830 - _836;
  float _852 = _851 * _830;
  float _853 = _850 + _852;
  float _854 = sqrt(_853);
  float _855 = _854 * 1.75f;
  float _856 = _833 + _830;
  float _857 = _856 + _836;
  float _858 = _857 + _855;
  float _859 = _858 * 0.3333333432674408f;
  float _860 = _845 + -0.4000000059604645f;
  float _861 = _860 * 5.0f;
  float _862 = _860 * 2.5f;
  float _863 = abs(_862);
  float _864 = 1.0f - _863;
  float _865 = max(_864, 0.0f);
  bool _866 = (_861 > 0.0f);
  bool _867 = (_861 < 0.0f);
  int _868 = int(_866);
  int _869 = int(_867);
  int _870 = _868 - _869;
  float _871 = float(_870);
  float _872 = _865 * _865;
  float _873 = 1.0f - _872;
  float _874 = _871 * _873;
  float _875 = _874 + 1.0f;
  float _876 = _875 * 0.02500000037252903f;
  bool _877 = !(_859 <= 0.0533333346247673f);
  _885 = _876;
  if (_877) {
    bool _879 = !(_859 >= 0.1599999964237213f);
    _885 = 0.0f;
    if (_879) {
      float _881 = 0.23999999463558197f / _858;
      float _882 = _881 + -0.5f;
      float _883 = _882 * _876;
      _885 = _883;
    }
  }
  float _886 = _885 + 1.0f;
  float _887 = _886 * _830;
  float _888 = _886 * _833;
  float _889 = _886 * _836;
  bool _890 = (_887 == _888);
  bool _891 = (_888 == _889);
  bool _892 = _890 && _891;
  _921 = 0.0f;
  if (!_892) {
    float _894 = _887 * 2.0f;
    float _895 = _894 - _888;
    float _896 = _895 - _889;
    float _897 = _833 - _836;
    float _898 = _897 * 1.7320507764816284f;
    float _899 = _898 * _886;
    float _900 = _899 / _896;
    float _901 = atan(_900);
    float _902 = _901 + 3.1415927410125732f;
    float _903 = _901 + -3.1415927410125732f;
    bool _904 = (_896 < 0.0f);
    bool _905 = (_896 == 0.0f);
    bool _906 = (_899 >= 0.0f);
    bool _907 = (_899 < 0.0f);
    bool _908 = _906 && _904;
    float _909 = _908 ? _902 : _901;
    bool _910 = _907 && _904;
    float _911 = _910 ? _903 : _909;
    bool _912 = _907 && _905;
    bool _913 = _906 && _905;
    float _914 = _911 * 57.2957763671875f;
    float _915 = _912 ? -90.0f : _914;
    float _916 = _913 ? 90.0f : _915;
    bool _917 = (_916 < 0.0f);
    _921 = _916;
    if (_917) {
      float _919 = _916 + 360.0f;
      _921 = _919;
    }
  }
  float _922 = max(_921, 0.0f);
  float _923 = min(_922, 360.0f);
  bool _924 = (_923 < -180.0f);
  if (_924) {
    float _926 = _923 + 360.0f;
    _932 = _926;
  } else {
    bool _928 = (_923 > 180.0f);
    _932 = _923;
    if (_928) {
      float _930 = _923 + -360.0f;
      _932 = _930;
    }
  }
  float _933 = _932 * 0.014814814552664757f;
  float _934 = abs(_933);
  float _935 = 1.0f - _934;
  float _936 = saturate(_935);
  float _937 = _936 * 2.0f;
  float _938 = 3.0f - _937;
  float _939 = _936 * _936;
  float _940 = _939 * _938;
  float _941 = 0.029999999329447746f - _887;
  float _942 = _845 * 0.18000000715255737f;
  float _943 = _942 * _941;
  float _944 = _940 * _940;
  float _945 = _944 * _943;
  float _946 = _945 + _887;
  float _947 = _946 * 1.4514392614364624f;
  float _948 = mad(-0.2365107536315918f, _888, _947);
  float _949 = mad(-0.21492856740951538f, _889, _948);
  float _950 = _946 * -0.07655377686023712f;
  float _951 = mad(1.17622971534729f, _888, _950);
  float _952 = mad(-0.09967592358589172f, _889, _951);
  float _953 = _946 * 0.008316148072481155f;
  float _954 = mad(-0.006032449658960104f, _888, _953);
  float _955 = mad(0.9977163076400757f, _889, _954);
  float _956 = max(0.0f, _949);
  float _957 = max(0.0f, _952);
  float _958 = max(0.0f, _955);
  float _959 = dot(float3(_956, _957, _958), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _960 = _956 - _959;
  float _961 = _957 - _959;
  float _962 = _958 - _959;
  float _963 = _960 * 0.9599999785423279f;
  float _964 = _961 * 0.9599999785423279f;
  float _965 = _962 * 0.9599999785423279f;
  float _966 = _963 + _959;
  float _967 = _964 + _959;
  float _968 = _965 + _959;

  float _970 = _RootShaderParameters_037w;
  float _971 = _970 + 1.0f;
  float _972 = _RootShaderParameters_037y;
  float _973 = _971 - _972;
  float _975 = _RootShaderParameters_038x;
  float _976 = _975 + 1.0f;
  float _977 = _RootShaderParameters_037z;
  float _978 = _976 - _977;
  bool _979 = (_972 > 0.800000011920929f);
  float _980 = _RootShaderParameters_037x;
  if (_979) {
    float _982 = 0.8199999928474426f - _972;
    float _983 = _982 / _980;
    float _984 = _983 + -0.7447274923324585f;
    _996 = _984;
  } else {
    float _986 = _970 + 0.18000000715255737f;
    float _987 = _986 / _973;
    float _988 = 2.0f - _987;
    float _989 = _987 / _988;
    float _990 = log2(_989);
    float _991 = _990 * 0.3465735912322998f;
    float _992 = _973 / _980;
    float _993 = _991 * _992;
    float _994 = -0.7447274923324585f - _993;
    _996 = _994;
  }
  float _997 = 1.0f - _972;
  float _998 = _997 / _980;
  float _999 = _998 - _996;
  float _1000 = _977 / _980;
  float _1001 = _1000 - _999;
  float _1002 = log2(_966);
  float _1003 = log2(_967);
  float _1004 = log2(_968);
  float _1005 = _1002 * 0.3010300099849701f;
  float _1006 = _1003 * 0.3010300099849701f;
  float _1007 = _1004 * 0.3010300099849701f;
  float _1008 = _1005 + _999;
  float _1009 = _1006 + _999;
  float _1010 = _1007 + _999;
  float _1011 = _980 * _1008;
  float _1012 = _980 * _1009;
  float _1013 = _980 * _1010;
  float _1014 = _973 * 2.0f;
  float _1015 = _980 * -2.0f;
  float _1016 = _1015 / _973;
  float _1017 = _1005 - _996;
  float _1018 = _1006 - _996;
  float _1019 = _1007 - _996;
  float _1020 = _1017 * 1.4426950216293335f;
  float _1021 = _1020 * _1016;
  float _1022 = _1018 * 1.4426950216293335f;
  float _1023 = _1022 * _1016;
  float _1024 = _1019 * 1.4426950216293335f;
  float _1025 = _1024 * _1016;
  float _1026 = exp2(_1021);
  float _1027 = exp2(_1023);
  float _1028 = exp2(_1025);
  float _1029 = _1026 + 1.0f;
  float _1030 = _1027 + 1.0f;
  float _1031 = _1028 + 1.0f;
  float _1032 = _1014 / _1029;
  float _1033 = _1014 / _1030;
  float _1034 = _1014 / _1031;
  float _1035 = _1032 - _970;
  float _1036 = _1033 - _970;
  float _1037 = _1034 - _970;
  float _1038 = _978 * 2.0f;
  float _1039 = _980 * 2.0f;
  float _1040 = _1039 / _978;
  float _1041 = _1005 - _1001;
  float _1042 = _1006 - _1001;
  float _1043 = _1007 - _1001;
  float _1044 = _1041 * 1.4426950216293335f;
  float _1045 = _1044 * _1040;
  float _1046 = _1042 * 1.4426950216293335f;
  float _1047 = _1046 * _1040;
  float _1048 = _1043 * 1.4426950216293335f;
  float _1049 = _1048 * _1040;
  float _1050 = exp2(_1045);
  float _1051 = exp2(_1047);
  float _1052 = exp2(_1049);
  float _1053 = _1050 + 1.0f;
  float _1054 = _1051 + 1.0f;
  float _1055 = _1052 + 1.0f;
  float _1056 = _1038 / _1053;
  float _1057 = _1038 / _1054;
  float _1058 = _1038 / _1055;
  float _1059 = _976 - _1056;
  float _1060 = _976 - _1057;
  float _1061 = _976 - _1058;
  bool _1062 = (_1005 < _996);
  bool _1063 = (_1006 < _996);
  bool _1064 = (_1007 < _996);
  float _1065 = _1062 ? _1035 : _1011;
  float _1066 = _1063 ? _1036 : _1012;
  float _1067 = _1064 ? _1037 : _1013;
  bool _1068 = (_1005 > _1001);
  bool _1069 = (_1006 > _1001);
  bool _1070 = (_1007 > _1001);
  float _1071 = _1068 ? _1059 : _1011;
  float _1072 = _1069 ? _1060 : _1012;
  float _1073 = _1070 ? _1061 : _1013;
  float _1074 = _1001 - _996;
  float _1075 = _1017 / _1074;
  float _1076 = _1018 / _1074;
  float _1077 = _1019 / _1074;
  float _1078 = saturate(_1075);
  float _1079 = saturate(_1076);
  float _1080 = saturate(_1077);
  bool _1081 = (_1001 < _996);
  float _1082 = 1.0f - _1078;
  float _1083 = 1.0f - _1079;
  float _1084 = 1.0f - _1080;
  float _1085 = _1081 ? _1082 : _1078;
  float _1086 = _1081 ? _1083 : _1079;
  float _1087 = _1081 ? _1084 : _1080;
  float _1088 = _1085 * 2.0f;
  float _1089 = _1086 * 2.0f;
  float _1090 = _1087 * 2.0f;
  float _1091 = 3.0f - _1088;
  float _1092 = 3.0f - _1089;
  float _1093 = 3.0f - _1090;
  float _1094 = _1071 - _1065;
  float _1095 = _1072 - _1066;
  float _1096 = _1073 - _1067;
  float _1097 = _1085 * _1085;
  float _1098 = _1097 * _1094;
  float _1099 = _1098 * _1091;
  float _1100 = _1086 * _1086;
  float _1101 = _1100 * _1095;
  float _1102 = _1101 * _1092;
  float _1103 = _1087 * _1087;
  float _1104 = _1103 * _1096;
  float _1105 = _1104 * _1093;
  float _1106 = _1099 + _1065;
  float _1107 = _1102 + _1066;
  float _1108 = _1105 + _1067;
  float _1109 = dot(float3(_1106, _1107, _1108), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _1110 = _1106 - _1109;
  float _1111 = _1107 - _1109;
  float _1112 = _1108 - _1109;
  float _1113 = _1110 * 0.9300000071525574f;
  float _1114 = _1111 * 0.9300000071525574f;
  float _1115 = _1112 * 0.9300000071525574f;
  float _1116 = _1113 + _1109;
  float _1117 = _1114 + _1109;
  float _1118 = _1115 + _1109;
  float _1119 = max(0.0f, _1116);
  float _1120 = max(0.0f, _1117);
  float _1121 = max(0.0f, _1118);

  float _1122 = _RootShaderParameters_036w;
  float _1123 = _1119 - _825;
  float _1124 = _1120 - _826;
  float _1125 = _1121 - _827;

  float _1126 = _1122 * _1123;
  float _1127 = _1122 * _1124;
  float _1128 = _1122 * _1125;
  float _1129 = _1126 + _825;
  float _1130 = _1127 + _826;
  float _1131 = _1128 + _827;
  float _1132 = _1129 * 1.065374732017517f;
  float _1133 = mad(1.451815478503704e-06f, _1130, _1132);
  float _1134 = mad(-0.06537103652954102f, _1131, _1133);
  float _1135 = _1129 * -2.57161445915699e-07f;
  float _1136 = mad(1.2036634683609009f, _1130, _1135);
  float _1137 = mad(-0.20366770029067993f, _1131, _1136);
  float _1138 = _1129 * 1.862645149230957e-08f;
  float _1139 = mad(2.0954757928848267e-08f, _1130, _1138);
  float _1140 = mad(0.9999996423721313f, _1131, _1139);
  float _1141 = _1134 - _1129;
  float _1142 = _1137 - _1130;
  float _1143 = _1140 - _1131;
  float _1144 = _1141 * _811;
  float _1145 = _1142 * _811;
  float _1146 = _1143 * _811;
  float _1147 = _1144 + _1129;
  float _1148 = _1145 + _1130;
  float _1149 = _1146 + _1131;
  float _1150 = _791 * _1147;
  float _1151 = mad(_792, _1148, _1150);
  float _1152 = mad(_793, _1149, _1151);
  float _1153 = _795 * _1147;
  float _1154 = mad(_796, _1148, _1153);
  float _1155 = mad(_797, _1149, _1154);
  float _1156 = _799 * _1147;
  float _1157 = mad(_800, _1148, _1156);
  float _1158 = mad(_801, _1149, _1157);
  float _1159 = max(0.0f, _1152);
  float _1160 = max(0.0f, _1155);
  float _1161 = max(0.0f, _1158);

  float _1162 = saturate(_1159);
  float _1163 = saturate(_1160);
  float _1164 = saturate(_1161);
  bool _1165 = (_1162 < 0.0031306699384003878f);
  if (_1165) {
    float _1167 = _1162 * 12.920000076293945f;
    _1175 = _1167;
  } else {
    float _1169 = log2(_1162);
    float _1170 = _1169 * 0.4166666567325592f;
    float _1171 = exp2(_1170);
    float _1172 = _1171 * 1.0549999475479126f;
    float _1173 = _1172 + -0.054999999701976776f;
    _1175 = _1173;
  }
  bool _1176 = (_1163 < 0.0031306699384003878f);
  if (_1176) {
    float _1178 = _1163 * 12.920000076293945f;
    _1186 = _1178;
  } else {
    float _1180 = log2(_1163);
    float _1181 = _1180 * 0.4166666567325592f;
    float _1182 = exp2(_1181);
    float _1183 = _1182 * 1.0549999475479126f;
    float _1184 = _1183 + -0.054999999701976776f;
    _1186 = _1184;
  }
  bool _1187 = (_1164 < 0.0031306699384003878f);
  if (_1187) {
    float _1189 = _1164 * 12.920000076293945f;
    _1197 = _1189;
  } else {
    float _1191 = log2(_1164);
    float _1192 = _1191 * 0.4166666567325592f;
    float _1193 = exp2(_1192);
    float _1194 = _1193 * 1.0549999475479126f;
    float _1195 = _1194 + -0.054999999701976776f;
    _1197 = _1195;
  }
  float _1198 = _1175 * 0.9375f;
  float _1199 = _1186 * 0.9375f;
  float _1200 = _1198 + 0.03125f;
  float _1201 = _1199 + 0.03125f;
  float _1203 = _RootShaderParameters_005x;
  float _1204 = _1203 * _1175;
  float _1205 = _1203 * _1186;
  float _1206 = _1203 * _1197;
  float _1207 = _RootShaderParameters_005y;
  float _1208 = _1197 * 15.0f;
  float _1209 = floor(_1208);
  float _1210 = _1208 - _1209;
  float _1211 = _1200 + _1209;
  float _1212 = _1211 * 0.0625f;
  // _1213 = _1;
  // _1214 = _2;
  float4 _1215 = Textures_1.Sample(Samplers_1, float2(_1212, _1201));
  float _1216 = _1215.x;
  float _1217 = _1215.y;
  float _1218 = _1215.z;
  float _1219 = _1212 + 0.0625f;
  // _1220 = _1;
  // _1221 = _2;
  float4 _1222 = Textures_1.Sample(Samplers_1, float2(_1219, _1201));
  float _1223 = _1222.x;
  float _1224 = _1222.y;
  float _1225 = _1222.z;
  float _1226 = _1223 - _1216;
  float _1227 = _1224 - _1217;
  float _1228 = _1225 - _1218;
  float _1229 = _1226 * _1210;
  float _1230 = _1227 * _1210;
  float _1231 = _1228 * _1210;
  float _1232 = _1229 + _1216;
  float _1233 = _1230 + _1217;
  float _1234 = _1231 + _1218;
  float _1235 = _1232 * _1207;
  float _1236 = _1233 * _1207;
  float _1237 = _1234 * _1207;
  float _1238 = _1235 + _1204;
  float _1239 = _1236 + _1205;
  float _1240 = _1237 + _1206;
  float _1241 = max(6.103519990574569e-05f, _1238);
  float _1242 = max(6.103519990574569e-05f, _1239);
  float _1243 = max(6.103519990574569e-05f, _1240);
  float _1244 = _1241 * 0.07739938050508499f;
  float _1245 = _1242 * 0.07739938050508499f;
  float _1246 = _1243 * 0.07739938050508499f;
  float _1247 = _1241 * 0.9478672742843628f;
  float _1248 = _1242 * 0.9478672742843628f;
  float _1249 = _1243 * 0.9478672742843628f;
  float _1250 = _1247 + 0.05213269963860512f;
  float _1251 = _1248 + 0.05213269963860512f;
  float _1252 = _1249 + 0.05213269963860512f;
  float _1253 = log2(_1250);
  float _1254 = log2(_1251);
  float _1255 = log2(_1252);
  float _1256 = _1253 * 2.4000000953674316f;
  float _1257 = _1254 * 2.4000000953674316f;
  float _1258 = _1255 * 2.4000000953674316f;
  float _1259 = exp2(_1256);
  float _1260 = exp2(_1257);
  float _1261 = exp2(_1258);
  bool _1262 = (_1241 > 0.040449999272823334f);
  bool _1263 = (_1242 > 0.040449999272823334f);
  bool _1264 = (_1243 > 0.040449999272823334f);
  float _1265 = _1262 ? _1259 : _1244;
  float _1266 = _1263 ? _1260 : _1245;
  float _1267 = _1264 ? _1261 : _1246;

  float _1269 = _RootShaderParameters_039x;
  float _1270 = _1269 * _1265;
  float _1271 = _1269 * _1266;
  float _1272 = _1269 * _1267;
  float _1273 = _RootShaderParameters_039y;
  float _1274 = _RootShaderParameters_039z;
  float _1275 = _1273 + _1270;
  float _1276 = _1275 * _1265;
  float _1277 = _1276 + _1274;
  float _1278 = _1273 + _1271;
  float _1279 = _1278 * _1266;
  float _1280 = _1279 + _1274;
  float _1281 = _1273 + _1272;
  float _1282 = _1281 * _1267;
  float _1283 = _1282 + _1274;
  float _1285 = _RootShaderParameters_013w;
  float _1286 = _RootShaderParameters_013x;
  float _1287 = _RootShaderParameters_013y;
  float _1288 = _RootShaderParameters_013z;
  float _1290 = _RootShaderParameters_014x;
  float _1291 = _RootShaderParameters_014y;
  float _1292 = _RootShaderParameters_014z;
  float _1293 = _1290 * _1277;
  float _1294 = _1291 * _1280;
  float _1295 = _1292 * _1283;
  float _1296 = _1286 - _1293;
  float _1297 = _1287 - _1294;
  float _1298 = _1288 - _1295;
  float _1299 = _1296 * _1285;
  float _1300 = _1297 * _1285;
  float _1301 = _1298 * _1285;
  float _1302 = _1299 + _1293;
  float _1303 = _1300 + _1294;
  float _1304 = _1301 + _1295;
  float _1305 = _1290 * _804;
  float _1306 = _1291 * _807;
  float _1307 = _1292 * _810;
  float _1308 = _1286 - _1305;
  float _1309 = _1287 - _1306;
  float _1310 = _1288 - _1307;
  float _1311 = _1308 * _1285;
  float _1312 = _1309 * _1285;
  float _1313 = _1310 * _1285;
  float _1314 = _1311 + _1305;
  float _1315 = _1312 + _1306;
  float _1316 = _1313 + _1307;
  float _1318 = _RootShaderParameters_040y;
  float _1319 = max(0.0f, _1302);
  float _1320 = max(0.0f, _1303);
  float _1321 = max(0.0f, _1304);
  float _1322 = log2(_1319);
  float _1323 = log2(_1320);
  float _1324 = log2(_1321);
  float _1325 = _1322 * _1318;
  float _1326 = _1323 * _1318;
  float _1327 = _1324 * _1318;
  float _1328 = exp2(_1325);
  float _1329 = exp2(_1326);
  float _1330 = exp2(_1327);

  // CustomEdit
  if (RENODX_TONE_MAP_TYPE != 0) {
    return GenerateOutput(float3(_1328, _1329, _1330));
  }

  uint _1332 = _RootShaderParameters_040w;
  bool _1333 = (_1332 == 0);
  if (_1333) {
    uint _1336 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1337 = (_1336 == 0);
    _1370 = _1328;
    _1371 = _1329;
    _1372 = _1330;
    do {
      if (_1337) {
        float _1340 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1341 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1342 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1344 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1345 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1346 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1348 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1349 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1350 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1351 = _1340 * _1328;
        float _1352 = mad(_1341, _1329, _1351);
        float _1353 = mad(_1342, _1330, _1352);
        float _1354 = _1344 * _1328;
        float _1355 = mad(_1345, _1329, _1354);
        float _1356 = mad(_1346, _1330, _1355);
        float _1357 = _1348 * _1328;
        float _1358 = mad(_1349, _1329, _1357);
        float _1359 = mad(_1350, _1330, _1358);
        float _1360 = _1353 * _39;
        float _1361 = mad(_40, _1356, _1360);
        float _1362 = mad(_41, _1359, _1361);
        float _1363 = _1353 * _42;
        float _1364 = mad(_43, _1356, _1363);
        float _1365 = mad(_44, _1359, _1364);
        float _1366 = _1353 * _45;
        float _1367 = mad(_46, _1356, _1366);
        float _1368 = mad(_47, _1359, _1367);
        _1370 = _1362;
        _1371 = _1365;
        _1372 = _1368;
      }
      bool _1373 = (_1370 < 0.0031306699384003878f);
      do {
        if (_1373) {
          float _1375 = _1370 * 12.920000076293945f;
          _1383 = _1375;
        } else {
          float _1377 = log2(_1370);
          float _1378 = _1377 * 0.4166666567325592f;
          float _1379 = exp2(_1378);
          float _1380 = _1379 * 1.0549999475479126f;
          float _1381 = _1380 + -0.054999999701976776f;
          _1383 = _1381;
        }
        bool _1384 = (_1371 < 0.0031306699384003878f);
        do {
          if (_1384) {
            float _1386 = _1371 * 12.920000076293945f;
            _1394 = _1386;
          } else {
            float _1388 = log2(_1371);
            float _1389 = _1388 * 0.4166666567325592f;
            float _1390 = exp2(_1389);
            float _1391 = _1390 * 1.0549999475479126f;
            float _1392 = _1391 + -0.054999999701976776f;
            _1394 = _1392;
          }
          bool _1395 = (_1372 < 0.0031306699384003878f);
          if (_1395) {
            float _1397 = _1372 * 12.920000076293945f;
            _2754 = _1383;
            _2755 = _1394;
            _2756 = _1397;
          } else {
            float _1399 = log2(_1372);
            float _1400 = _1399 * 0.4166666567325592f;
            float _1401 = exp2(_1400);
            float _1402 = _1401 * 1.0549999475479126f;
            float _1403 = _1402 + -0.054999999701976776f;
            _2754 = _1383;
            _2755 = _1394;
            _2756 = _1403;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1405 = (_1332 == 1);
    if (_1405) {
      float _1408 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1409 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1410 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1412 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1413 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1414 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1416 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1417 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1418 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1419 = _1408 * _1328;
      float _1420 = mad(_1409, _1329, _1419);
      float _1421 = mad(_1410, _1330, _1420);
      float _1422 = _1412 * _1328;
      float _1423 = mad(_1413, _1329, _1422);
      float _1424 = mad(_1414, _1330, _1423);
      float _1425 = _1416 * _1328;
      float _1426 = mad(_1417, _1329, _1425);
      float _1427 = mad(_1418, _1330, _1426);
      float _1428 = _1421 * _39;
      float _1429 = mad(_40, _1424, _1428);
      float _1430 = mad(_41, _1427, _1429);
      float _1431 = _1421 * _42;
      float _1432 = mad(_43, _1424, _1431);
      float _1433 = mad(_44, _1427, _1432);
      float _1434 = _1421 * _45;
      float _1435 = mad(_46, _1424, _1434);
      float _1436 = mad(_47, _1427, _1435);
      float _1437 = max(6.103519990574569e-05f, _1430);
      float _1438 = max(6.103519990574569e-05f, _1433);
      float _1439 = max(6.103519990574569e-05f, _1436);
      float _1440 = max(_1437, 0.017999999225139618f);
      float _1441 = max(_1438, 0.017999999225139618f);
      float _1442 = max(_1439, 0.017999999225139618f);
      float _1443 = log2(_1440);
      float _1444 = log2(_1441);
      float _1445 = log2(_1442);
      float _1446 = _1443 * 0.44999998807907104f;
      float _1447 = _1444 * 0.44999998807907104f;
      float _1448 = _1445 * 0.44999998807907104f;
      float _1449 = exp2(_1446);
      float _1450 = exp2(_1447);
      float _1451 = exp2(_1448);
      float _1452 = _1449 * 1.0989999771118164f;
      float _1453 = _1450 * 1.0989999771118164f;
      float _1454 = _1451 * 1.0989999771118164f;
      float _1455 = _1452 + -0.0989999994635582f;
      float _1456 = _1453 + -0.0989999994635582f;
      float _1457 = _1454 + -0.0989999994635582f;
      float _1458 = _1437 * 4.5f;
      float _1459 = _1438 * 4.5f;
      float _1460 = _1439 * 4.5f;
      float _1461 = min(_1458, _1455);
      float _1462 = min(_1459, _1456);
      float _1463 = min(_1460, _1457);
      _2754 = _1461;
      _2755 = _1462;
      _2756 = _1463;
    } else {
      bool _1465 = (_1332 == 3);
      bool _1466 = (_1332 == 5);
      bool _1467 = _1465 || _1466;
      if (_1467) {
        // Goes in here
        //   %1469 = bitcast [6 x float]* %12 to i8*
        //   %1470 = bitcast [6 x float]* %13 to i8*
        float _1472 = _RootShaderParameters_012z;
        float _1473 = _RootShaderParameters_012y;
        float _1474 = _RootShaderParameters_012x;
        float _1476 = _RootShaderParameters_011x;
        float _1477 = _RootShaderParameters_011y;
        float _1478 = _RootShaderParameters_011z;
        float _1479 = _RootShaderParameters_011w;
        float _1481 = _RootShaderParameters_010x;
        float _1482 = _RootShaderParameters_010y;
        float _1483 = _RootShaderParameters_010z;
        float _1484 = _RootShaderParameters_010w;
        float _1486 = _RootShaderParameters_009x;
        float _1488 = _RootShaderParameters_008x;
        float _1489 = _RootShaderParameters_008y;
        float _1490 = _RootShaderParameters_008z;
        float _1491 = _RootShaderParameters_008w;
        _12[0] = _1481;
        _12[1] = _1482;
        _12[2] = _1483;
        _12[3] = _1484;
        _12[4] = _1474;
        _12[5] = _1474;
        _13[0] = _1476;
        _13[1] = _1477;
        _13[2] = _1478;
        _13[3] = _1479;
        _13[4] = _1473;
        _13[5] = _1473;
        float _1505 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1506 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1507 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1509 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1510 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1511 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1513 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1514 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1515 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1516 = _1472 * _1314;
        float _1517 = _1472 * _1315;
        float _1518 = _1472 * _1316;
        float _1519 = _1505 * _1516;
        float _1520 = mad(_1506, _1517, _1519);
        float _1521 = mad(_1507, _1518, _1520);
        float _1522 = _1509 * _1516;
        float _1523 = mad(_1510, _1517, _1522);
        float _1524 = mad(_1511, _1518, _1523);
        float _1525 = _1513 * _1516;
        float _1526 = mad(_1514, _1517, _1525);
        float _1527 = mad(_1515, _1518, _1526);
        float _1528 = min(_1521, _1524);
        float _1529 = min(_1528, _1527);
        float _1530 = max(_1521, _1524);
        float _1531 = max(_1530, _1527);
        float _1532 = max(_1531, 1.000000013351432e-10f);
        float _1533 = max(_1529, 1.000000013351432e-10f);
        float _1534 = _1532 - _1533;
        float _1535 = max(_1531, 0.009999999776482582f);
        float _1536 = _1534 / _1535;
        float _1537 = _1527 - _1524;
        float _1538 = _1537 * _1527;
        float _1539 = _1524 - _1521;
        float _1540 = _1539 * _1524;
        float _1541 = _1538 + _1540;
        float _1542 = _1521 - _1527;
        float _1543 = _1542 * _1521;
        float _1544 = _1541 + _1543;
        float _1545 = sqrt(_1544);
        float _1546 = _1545 * 1.75f;
        float _1547 = _1524 + _1521;
        float _1548 = _1547 + _1527;
        float _1549 = _1548 + _1546;
        float _1550 = _1549 * 0.3333333432674408f;
        float _1551 = _1536 + -0.4000000059604645f;
        float _1552 = _1551 * 5.0f;
        float _1553 = _1551 * 2.5f;
        float _1554 = abs(_1553);
        float _1555 = 1.0f - _1554;
        float _1556 = max(_1555, 0.0f);
        bool _1557 = (_1552 > 0.0f);
        bool _1558 = (_1552 < 0.0f);
        int _1559 = int(_1557);
        int _1560 = int(_1558);
        int _1561 = _1559 - _1560;
        float _1562 = float(_1561);
        float _1563 = _1556 * _1556;
        float _1564 = 1.0f - _1563;
        float _1565 = _1562 * _1564;
        float _1566 = _1565 + 1.0f;
        float _1567 = _1566 * 0.02500000037252903f;
        bool _1568 = !(_1550 <= 0.0533333346247673f);
        _1576 = _1567;
        do {
          if (_1568) {
            bool _1570 = !(_1550 >= 0.1599999964237213f);
            _1576 = 0.0f;
            if (_1570) {
              float _1572 = 0.23999999463558197f / _1549;
              float _1573 = _1572 + -0.5f;
              float _1574 = _1573 * _1567;
              _1576 = _1574;
            }
          }
          float _1577 = _1576 + 1.0f;
          float _1578 = _1577 * _1521;
          float _1579 = _1577 * _1524;
          float _1580 = _1577 * _1527;
          bool _1581 = (_1578 == _1579);
          bool _1582 = (_1579 == _1580);
          bool _1583 = _1581 && _1582;
          _1612 = 0.0f;
          do {
            if (!_1583) {
              float _1585 = _1578 * 2.0f;
              float _1586 = _1585 - _1579;
              float _1587 = _1586 - _1580;
              float _1588 = _1524 - _1527;
              float _1589 = _1588 * 1.7320507764816284f;
              float _1590 = _1589 * _1577;
              float _1591 = _1590 / _1587;
              float _1592 = atan(_1591);
              float _1593 = _1592 + 3.1415927410125732f;
              float _1594 = _1592 + -3.1415927410125732f;
              bool _1595 = (_1587 < 0.0f);
              bool _1596 = (_1587 == 0.0f);
              bool _1597 = (_1590 >= 0.0f);
              bool _1598 = (_1590 < 0.0f);
              bool _1599 = _1597 && _1595;
              float _1600 = _1599 ? _1593 : _1592;
              bool _1601 = _1598 && _1595;
              float _1602 = _1601 ? _1594 : _1600;
              bool _1603 = _1598 && _1596;
              bool _1604 = _1597 && _1596;
              float _1605 = _1602 * 57.2957763671875f;
              float _1606 = _1603 ? -90.0f : _1605;
              float _1607 = _1604 ? 90.0f : _1606;
              bool _1608 = (_1607 < 0.0f);
              _1612 = _1607;
              if (_1608) {
                float _1610 = _1607 + 360.0f;
                _1612 = _1610;
              }
            }
            float _1613 = max(_1612, 0.0f);
            float _1614 = min(_1613, 360.0f);
            bool _1615 = (_1614 < -180.0f);
            do {
              if (_1615) {
                float _1617 = _1614 + 360.0f;
                _1623 = _1617;
              } else {
                bool _1619 = (_1614 > 180.0f);
                _1623 = _1614;
                if (_1619) {
                  float _1621 = _1614 + -360.0f;
                  _1623 = _1621;
                }
              }
              bool _1624 = (_1623 > -67.5f);
              bool _1625 = (_1623 < 67.5f);
              bool _1626 = _1624 && _1625;
              _1662 = 0.0f;
              do {
                if (_1626) {
                  float _1628 = _1623 + 67.5f;
                  float _1629 = _1628 * 0.029629629105329514f;
                  int _1630 = int(_1629);
                  float _1631 = float(_1630);
                  float _1632 = _1629 - _1631;
                  float _1633 = _1632 * _1632;
                  float _1634 = _1633 * _1632;
                  bool _1635 = (_1630 == 3);
                  if (_1635) {
                    float _1637 = _1634 * 0.1666666716337204f;
                    float _1638 = _1633 * 0.5f;
                    float _1639 = _1632 * 0.5f;
                    float _1640 = 0.1666666716337204f - _1639;
                    float _1641 = _1640 + _1638;
                    float _1642 = _1641 - _1637;
                    _1662 = _1642;
                  } else {
                    bool _1644 = (_1630 == 2);
                    if (_1644) {
                      float _1646 = _1634 * 0.5f;
                      float _1647 = 0.6666666865348816f - _1633;
                      float _1648 = _1647 + _1646;
                      _1662 = _1648;
                    } else {
                      bool _1650 = (_1630 == 1);
                      if (_1650) {
                        float _1652 = _1634 * -0.5f;
                        float _1653 = _1633 + _1632;
                        float _1654 = _1653 * 0.5f;
                        float _1655 = _1652 + 0.1666666716337204f;
                        float _1656 = _1655 + _1654;
                        _1662 = _1656;
                      } else {
                        bool _1658 = (_1630 == 0);
                        float _1659 = _1634 * 0.1666666716337204f;
                        float _1660 = _1658 ? _1659 : 0.0f;
                        _1662 = _1660;
                      }
                    }
                  }
                }
                float _1663 = 0.029999999329447746f - _1578;
                float _1664 = _1536 * 0.27000001072883606f;
                float _1665 = _1664 * _1663;
                float _1666 = _1665 * _1662;
                float _1667 = _1666 + _1578;
                float _1668 = max(_1667, 0.0f);
                float _1669 = max(_1579, 0.0f);
                float _1670 = max(_1580, 0.0f);
                float _1671 = min(_1668, 65535.0f);
                float _1672 = min(_1669, 65535.0f);
                float _1673 = min(_1670, 65535.0f);
                float _1674 = _1671 * 1.4514392614364624f;
                float _1675 = mad(-0.2365107536315918f, _1672, _1674);
                float _1676 = mad(-0.21492856740951538f, _1673, _1675);
                float _1677 = _1671 * -0.07655377686023712f;
                float _1678 = mad(1.17622971534729f, _1672, _1677);
                float _1679 = mad(-0.09967592358589172f, _1673, _1678);
                float _1680 = _1671 * 0.008316148072481155f;
                float _1681 = mad(-0.006032449658960104f, _1672, _1680);
                float _1682 = mad(0.9977163076400757f, _1673, _1681);
                float _1683 = max(_1676, 0.0f);
                float _1684 = max(_1679, 0.0f);
                float _1685 = max(_1682, 0.0f);
                float _1686 = min(_1683, 65504.0f);
                float _1687 = min(_1684, 65504.0f);
                float _1688 = min(_1685, 65504.0f);
                float _1689 = dot(float3(_1686, _1687, _1688), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1690 = _1686 - _1689;
                float _1691 = _1687 - _1689;
                float _1692 = _1688 - _1689;
                float _1693 = _1690 * 0.9599999785423279f;
                float _1694 = _1691 * 0.9599999785423279f;
                float _1695 = _1692 * 0.9599999785423279f;
                float _1696 = _1693 + _1689;
                float _1697 = _1694 + _1689;
                float _1698 = _1695 + _1689;
                float _1699 = max(_1696, 1.000000013351432e-10f);
                float _1700 = log2(_1699);
                float _1701 = _1700 * 0.3010300099849701f;
                float _1702 = log2(_1488);
                float _1703 = _1702 * 0.3010300099849701f;
                bool _1704 = !(_1701 <= _1703);
                do {
                  if (!_1704) {
                    float _1706 = log2(_1489);
                    float _1707 = _1706 * 0.3010300099849701f;
                    _1772 = _1707;
                  } else {
                    bool _1709 = (_1701 > _1703);
                    float _1710 = log2(_1486);
                    float _1711 = _1710 * 0.3010300099849701f;
                    bool _1712 = (_1701 < _1711);
                    bool _1713 = _1709 && _1712;
                    if (_1713) {
                      float _1715 = _1700 - _1702;
                      float _1716 = _1715 * 0.9030900001525879f;
                      float _1717 = _1710 - _1702;
                      float _1718 = _1717 * 0.3010300099849701f;
                      float _1719 = _1716 / _1718;
                      int _1720 = int(_1719);
                      float _1721 = float(_1720);
                      float _1722 = _1719 - _1721;
                      float _1724 = _12[_1720];
                      int _1725 = _1720 + 1;
                      float _1727 = _12[_1725];
                      int _1728 = _1720 + 2;
                      float _1730 = _12[_1728];
                      float _1731 = _1722 * _1722;
                      float _1732 = _1724 * 0.5f;
                      float _1733 = mad(_1727, -1.0f, _1732);
                      float _1734 = mad(_1730, 0.5f, _1733);
                      float _1735 = _1727 - _1724;
                      float _1736 = mad(_1727, 0.5f, _1732);
                      float _1737 = dot(float3(_1731, _1722, 1.0f), float3(_1734, _1735, _1736));
                      _1772 = _1737;
                    } else {
                      bool _1739 = !(_1701 >= _1711);
                      do {
                        if (!_1739) {
                          float _1741 = log2(_1490);
                          float _1742 = _1741 * 0.3010300099849701f;
                          bool _1743 = (_1701 < _1742);
                          if (_1743) {
                            float _1745 = _1700 - _1710;
                            float _1746 = _1745 * 0.9030900001525879f;
                            float _1747 = _1741 - _1710;
                            float _1748 = _1747 * 0.3010300099849701f;
                            float _1749 = _1746 / _1748;
                            int _1750 = int(_1749);
                            float _1751 = float(_1750);
                            float _1752 = _1749 - _1751;
                            float _1754 = _13[_1750];
                            int _1755 = _1750 + 1;
                            float _1757 = _13[_1755];
                            int _1758 = _1750 + 2;
                            float _1760 = _13[_1758];
                            float _1761 = _1752 * _1752;
                            float _1762 = _1754 * 0.5f;
                            float _1763 = mad(_1757, -1.0f, _1762);
                            float _1764 = mad(_1760, 0.5f, _1763);
                            float _1765 = _1757 - _1754;
                            float _1766 = mad(_1757, 0.5f, _1762);
                            float _1767 = dot(float3(_1761, _1752, 1.0f), float3(_1764, _1765, _1766));
                            _1772 = _1767;
                            break;
                          }
                        }
                        float _1769 = log2(_1491);
                        float _1770 = _1769 * 0.3010300099849701f;
                        _1772 = _1770;
                      } while (false);
                    }
                  }
                  float _1773 = _1772 * 3.321928024291992f;
                  float _1774 = exp2(_1773);
                  float _1775 = max(_1697, 1.000000013351432e-10f);
                  float _1776 = log2(_1775);
                  float _1777 = _1776 * 0.3010300099849701f;
                  bool _1778 = !(_1777 <= _1703);
                  do {
                    if (!_1778) {
                      float _1780 = log2(_1489);
                      float _1781 = _1780 * 0.3010300099849701f;
                      _1846 = _1781;
                    } else {
                      bool _1783 = (_1777 > _1703);
                      float _1784 = log2(_1486);
                      float _1785 = _1784 * 0.3010300099849701f;
                      bool _1786 = (_1777 < _1785);
                      bool _1787 = _1783 && _1786;
                      if (_1787) {
                        float _1789 = _1776 - _1702;
                        float _1790 = _1789 * 0.9030900001525879f;
                        float _1791 = _1784 - _1702;
                        float _1792 = _1791 * 0.3010300099849701f;
                        float _1793 = _1790 / _1792;
                        int _1794 = int(_1793);
                        float _1795 = float(_1794);
                        float _1796 = _1793 - _1795;
                        float _1798 = _12[_1794];
                        int _1799 = _1794 + 1;
                        float _1801 = _12[_1799];
                        int _1802 = _1794 + 2;
                        float _1804 = _12[_1802];
                        float _1805 = _1796 * _1796;
                        float _1806 = _1798 * 0.5f;
                        float _1807 = mad(_1801, -1.0f, _1806);
                        float _1808 = mad(_1804, 0.5f, _1807);
                        float _1809 = _1801 - _1798;
                        float _1810 = mad(_1801, 0.5f, _1806);
                        float _1811 = dot(float3(_1805, _1796, 1.0f), float3(_1808, _1809, _1810));
                        _1846 = _1811;
                      } else {
                        bool _1813 = !(_1777 >= _1785);
                        do {
                          if (!_1813) {
                            float _1815 = log2(_1490);
                            float _1816 = _1815 * 0.3010300099849701f;
                            bool _1817 = (_1777 < _1816);
                            if (_1817) {
                              float _1819 = _1776 - _1784;
                              float _1820 = _1819 * 0.9030900001525879f;
                              float _1821 = _1815 - _1784;
                              float _1822 = _1821 * 0.3010300099849701f;
                              float _1823 = _1820 / _1822;
                              int _1824 = int(_1823);
                              float _1825 = float(_1824);
                              float _1826 = _1823 - _1825;
                              float _1828 = _13[_1824];
                              int _1829 = _1824 + 1;
                              float _1831 = _13[_1829];
                              int _1832 = _1824 + 2;
                              float _1834 = _13[_1832];
                              float _1835 = _1826 * _1826;
                              float _1836 = _1828 * 0.5f;
                              float _1837 = mad(_1831, -1.0f, _1836);
                              float _1838 = mad(_1834, 0.5f, _1837);
                              float _1839 = _1831 - _1828;
                              float _1840 = mad(_1831, 0.5f, _1836);
                              float _1841 = dot(float3(_1835, _1826, 1.0f), float3(_1838, _1839, _1840));
                              _1846 = _1841;
                              break;
                            }
                          }
                          float _1843 = log2(_1491);
                          float _1844 = _1843 * 0.3010300099849701f;
                          _1846 = _1844;
                        } while (false);
                      }
                    }
                    float _1847 = _1846 * 3.321928024291992f;
                    float _1848 = exp2(_1847);
                    float _1849 = max(_1698, 1.000000013351432e-10f);
                    float _1850 = log2(_1849);
                    float _1851 = _1850 * 0.3010300099849701f;
                    bool _1852 = !(_1851 <= _1703);
                    do {
                      if (!_1852) {
                        float _1854 = log2(_1489);
                        float _1855 = _1854 * 0.3010300099849701f;
                        _1920 = _1855;
                      } else {
                        bool _1857 = (_1851 > _1703);
                        float _1858 = log2(_1486);
                        float _1859 = _1858 * 0.3010300099849701f;
                        bool _1860 = (_1851 < _1859);
                        bool _1861 = _1857 && _1860;
                        if (_1861) {
                          float _1863 = _1850 - _1702;
                          float _1864 = _1863 * 0.9030900001525879f;
                          float _1865 = _1858 - _1702;
                          float _1866 = _1865 * 0.3010300099849701f;
                          float _1867 = _1864 / _1866;
                          int _1868 = int(_1867);
                          float _1869 = float(_1868);
                          float _1870 = _1867 - _1869;
                          float _1872 = _12[_1868];
                          int _1873 = _1868 + 1;
                          float _1875 = _12[_1873];
                          int _1876 = _1868 + 2;
                          float _1878 = _12[_1876];
                          float _1879 = _1870 * _1870;
                          float _1880 = _1872 * 0.5f;
                          float _1881 = mad(_1875, -1.0f, _1880);
                          float _1882 = mad(_1878, 0.5f, _1881);
                          float _1883 = _1875 - _1872;
                          float _1884 = mad(_1875, 0.5f, _1880);
                          float _1885 = dot(float3(_1879, _1870, 1.0f), float3(_1882, _1883, _1884));
                          _1920 = _1885;
                        } else {
                          bool _1887 = !(_1851 >= _1859);
                          do {
                            if (!_1887) {
                              float _1889 = log2(_1490);
                              float _1890 = _1889 * 0.3010300099849701f;
                              bool _1891 = (_1851 < _1890);
                              if (_1891) {
                                float _1893 = _1850 - _1858;
                                float _1894 = _1893 * 0.9030900001525879f;
                                float _1895 = _1889 - _1858;
                                float _1896 = _1895 * 0.3010300099849701f;
                                float _1897 = _1894 / _1896;
                                int _1898 = int(_1897);
                                float _1899 = float(_1898);
                                float _1900 = _1897 - _1899;
                                float _1902 = _13[_1898];
                                int _1903 = _1898 + 1;
                                float _1905 = _13[_1903];
                                int _1906 = _1898 + 2;
                                float _1908 = _13[_1906];
                                float _1909 = _1900 * _1900;
                                float _1910 = _1902 * 0.5f;
                                float _1911 = mad(_1905, -1.0f, _1910);
                                float _1912 = mad(_1908, 0.5f, _1911);
                                float _1913 = _1905 - _1902;
                                float _1914 = mad(_1905, 0.5f, _1910);
                                float _1915 = dot(float3(_1909, _1900, 1.0f), float3(_1912, _1913, _1914));
                                _1920 = _1915;
                                break;
                              }
                            }
                            float _1917 = log2(_1491);
                            float _1918 = _1917 * 0.3010300099849701f;
                            _1920 = _1918;
                          } while (false);
                        }
                      }
                      float _1921 = _1920 * 3.321928024291992f;
                      float _1922 = exp2(_1921);
                      float _1923 = _1774 - _1489;
                      float _1924 = _1491 - _1489;
                      float _1925 = _1923 / _1924;
                      float _1926 = _1848 - _1489;
                      float _1927 = _1926 / _1924;
                      float _1928 = _1922 - _1489;
                      float _1929 = _1928 / _1924;
                      float _1930 = _1925 * 0.6624541878700256f;
                      float _1931 = mad(0.13400420546531677f, _1927, _1930);
                      float _1932 = mad(0.15618768334388733f, _1929, _1931);
                      float _1933 = _1925 * 0.2722287178039551f;
                      float _1934 = mad(0.6740817427635193f, _1927, _1933);
                      float _1935 = mad(0.053689517080783844f, _1929, _1934);
                      float _1936 = _1925 * -0.005574649665504694f;
                      float _1937 = mad(0.00406073359772563f, _1927, _1936);
                      float _1938 = mad(1.0103391408920288f, _1929, _1937);
                      float _1939 = _1932 * 1.6410233974456787f;
                      float _1940 = mad(-0.32480329275131226f, _1935, _1939);
                      float _1941 = mad(-0.23642469942569733f, _1938, _1940);
                      float _1942 = _1932 * -0.663662850856781f;
                      float _1943 = mad(1.6153316497802734f, _1935, _1942);
                      float _1944 = mad(0.016756348311901093f, _1938, _1943);
                      float _1945 = _1932 * 0.011721894145011902f;
                      float _1946 = mad(-0.008284442126750946f, _1935, _1945);
                      float _1947 = mad(0.9883948564529419f, _1938, _1946);
                      float _1948 = max(_1941, 0.0f);
                      float _1949 = max(_1944, 0.0f);
                      float _1950 = max(_1947, 0.0f);
                      float _1951 = min(_1948, 1.0f);
                      float _1952 = min(_1949, 1.0f);
                      float _1953 = min(_1950, 1.0f);
                      float _1954 = _1951 * 0.6624541878700256f;
                      float _1955 = mad(0.13400420546531677f, _1952, _1954);
                      float _1956 = mad(0.15618768334388733f, _1953, _1955);
                      float _1957 = _1951 * 0.2722287178039551f;
                      float _1958 = mad(0.6740817427635193f, _1952, _1957);
                      float _1959 = mad(0.053689517080783844f, _1953, _1958);
                      float _1960 = _1951 * -0.005574649665504694f;
                      float _1961 = mad(0.00406073359772563f, _1952, _1960);
                      float _1962 = mad(1.0103391408920288f, _1953, _1961);
                      float _1963 = _1956 * 1.6410233974456787f;
                      float _1964 = mad(-0.32480329275131226f, _1959, _1963);
                      float _1965 = mad(-0.23642469942569733f, _1962, _1964);
                      float _1966 = _1956 * -0.663662850856781f;
                      float _1967 = mad(1.6153316497802734f, _1959, _1966);
                      float _1968 = mad(0.016756348311901093f, _1962, _1967);
                      float _1969 = _1956 * 0.011721894145011902f;
                      float _1970 = mad(-0.008284442126750946f, _1959, _1969);
                      float _1971 = mad(0.9883948564529419f, _1962, _1970);
                      float _1972 = max(_1965, 0.0f);
                      float _1973 = max(_1968, 0.0f);
                      float _1974 = max(_1971, 0.0f);
                      float _1975 = min(_1972, 65535.0f);
                      float _1976 = min(_1973, 65535.0f);
                      float _1977 = min(_1974, 65535.0f);
                      float _1978 = _1975 * _1491;
                      float _1979 = _1976 * _1491;
                      float _1980 = _1977 * _1491;
                      float _1981 = max(_1978, 0.0f);
                      float _1982 = max(_1979, 0.0f);
                      float _1983 = max(_1980, 0.0f);
                      float _1984 = min(_1981, 65535.0f);
                      float _1985 = min(_1982, 65535.0f);
                      float _1986 = min(_1983, 65535.0f);
                      bool _1987 = (_1332 == 5);
                      _1999 = _1984;
                      _2000 = _1985;
                      _2001 = _1986;
                      do {
                        float3 test;
                        if (!_1987) {
                          float _1989 = _1984 * _39;
                          float _1990 = mad(_40, _1985, _1989);
                          float _1991 = mad(_41, _1986, _1990);
                          float _1992 = _1984 * _42;
                          float _1993 = mad(_43, _1985, _1992);
                          float _1994 = mad(_44, _1986, _1993);
                          float _1995 = _1984 * _45;
                          float _1996 = mad(_46, _1985, _1995);
                          float _1997 = mad(_47, _1986, _1996);
                          _1999 = _1991;
                          _2000 = _1994;
                          _2001 = _1997;
                        }

                        float _2002 = _1999 * 9.999999747378752e-05f;
                        float _2003 = _2000 * 9.999999747378752e-05f;
                        float _2004 = _2001 * 9.999999747378752e-05f;
                        float _2005 = log2(_2002);
                        float _2006 = log2(_2003);
                        float _2007 = log2(_2004);
                        float _2008 = _2005 * 0.1593017578125f;
                        float _2009 = _2006 * 0.1593017578125f;
                        float _2010 = _2007 * 0.1593017578125f;
                        float _2011 = exp2(_2008);
                        float _2012 = exp2(_2009);
                        float _2013 = exp2(_2010);
                        float _2014 = _2011 * 18.8515625f;
                        float _2015 = _2012 * 18.8515625f;
                        float _2016 = _2013 * 18.8515625f;
                        float _2017 = _2014 + 0.8359375f;
                        float _2018 = _2015 + 0.8359375f;
                        float _2019 = _2016 + 0.8359375f;
                        float _2020 = _2011 * 18.6875f;
                        float _2021 = _2012 * 18.6875f;
                        float _2022 = _2013 * 18.6875f;
                        float _2023 = _2020 + 1.0f;
                        float _2024 = _2021 + 1.0f;
                        float _2025 = _2022 + 1.0f;
                        float _2026 = 1.0f / _2023;
                        float _2027 = 1.0f / _2024;
                        float _2028 = 1.0f / _2025;
                        float _2029 = _2026 * _2017;
                        float _2030 = _2027 * _2018;
                        float _2031 = _2028 * _2019;
                        float _2032 = log2(_2029);
                        float _2033 = log2(_2030);
                        float _2034 = log2(_2031);
                        float _2035 = _2032 * 78.84375f;
                        float _2036 = _2033 * 78.84375f;
                        float _2037 = _2034 * 78.84375f;
                        float _2038 = exp2(_2035);
                        float _2039 = exp2(_2036);
                        float _2040 = exp2(_2037);
                        _2754 = _2038;
                        _2755 = _2039;
                        _2756 = _2040;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _2042 = _1332 & -3;
        bool _2043 = (_2042 == 4);
        if (_2043) {
          //   %2045 = bitcast [6 x float]* %10 to i8*
          //   %2046 = bitcast [6 x float]* %11 to i8*
          float _2048 = _RootShaderParameters_012z;
          float _2049 = _RootShaderParameters_012y;
          float _2050 = _RootShaderParameters_012x;
          float _2052 = _RootShaderParameters_011x;
          float _2053 = _RootShaderParameters_011y;
          float _2054 = _RootShaderParameters_011z;
          float _2055 = _RootShaderParameters_011w;
          float _2057 = _RootShaderParameters_010x;
          float _2058 = _RootShaderParameters_010y;
          float _2059 = _RootShaderParameters_010z;
          float _2060 = _RootShaderParameters_010w;
          float _2062 = _RootShaderParameters_009x;
          float _2064 = _RootShaderParameters_008x;
          float _2065 = _RootShaderParameters_008y;
          float _2066 = _RootShaderParameters_008z;
          float _2067 = _RootShaderParameters_008w;
          _10[0] = _2057;
          _10[1] = _2058;
          _10[2] = _2059;
          _10[3] = _2060;
          _10[4] = _2050;
          _10[5] = _2050;
          _11[0] = _2052;
          _11[1] = _2053;
          _11[2] = _2054;
          _11[3] = _2055;
          _11[4] = _2049;
          _11[5] = _2049;
          float _2081 = UniformBufferConstants_WorkingColorSpace_016x;
          float _2082 = UniformBufferConstants_WorkingColorSpace_016y;
          float _2083 = UniformBufferConstants_WorkingColorSpace_016z;
          float _2085 = UniformBufferConstants_WorkingColorSpace_017x;
          float _2086 = UniformBufferConstants_WorkingColorSpace_017y;
          float _2087 = UniformBufferConstants_WorkingColorSpace_017z;
          float _2089 = UniformBufferConstants_WorkingColorSpace_018x;
          float _2090 = UniformBufferConstants_WorkingColorSpace_018y;
          float _2091 = UniformBufferConstants_WorkingColorSpace_018z;
          float _2092 = _2048 * _1314;
          float _2093 = _2048 * _1315;
          float _2094 = _2048 * _1316;
          float _2095 = _2081 * _2092;
          float _2096 = mad(_2082, _2093, _2095);
          float _2097 = mad(_2083, _2094, _2096);
          float _2098 = _2085 * _2092;
          float _2099 = mad(_2086, _2093, _2098);
          float _2100 = mad(_2087, _2094, _2099);
          float _2101 = _2089 * _2092;
          float _2102 = mad(_2090, _2093, _2101);
          float _2103 = mad(_2091, _2094, _2102);
          float _2104 = min(_2097, _2100);
          float _2105 = min(_2104, _2103);
          float _2106 = max(_2097, _2100);
          float _2107 = max(_2106, _2103);
          float _2108 = max(_2107, 1.000000013351432e-10f);
          float _2109 = max(_2105, 1.000000013351432e-10f);
          float _2110 = _2108 - _2109;
          float _2111 = max(_2107, 0.009999999776482582f);
          float _2112 = _2110 / _2111;
          float _2113 = _2103 - _2100;
          float _2114 = _2113 * _2103;
          float _2115 = _2100 - _2097;
          float _2116 = _2115 * _2100;
          float _2117 = _2114 + _2116;
          float _2118 = _2097 - _2103;
          float _2119 = _2118 * _2097;
          float _2120 = _2117 + _2119;
          float _2121 = sqrt(_2120);
          float _2122 = _2121 * 1.75f;
          float _2123 = _2100 + _2097;
          float _2124 = _2123 + _2103;
          float _2125 = _2124 + _2122;
          float _2126 = _2125 * 0.3333333432674408f;
          float _2127 = _2112 + -0.4000000059604645f;
          float _2128 = _2127 * 5.0f;
          float _2129 = _2127 * 2.5f;
          float _2130 = abs(_2129);
          float _2131 = 1.0f - _2130;
          float _2132 = max(_2131, 0.0f);
          bool _2133 = (_2128 > 0.0f);
          bool _2134 = (_2128 < 0.0f);
          int _2135 = int(_2133);
          int _2136 = int(_2134);
          int _2137 = _2135 - _2136;
          float _2138 = float(_2137);
          float _2139 = _2132 * _2132;
          float _2140 = 1.0f - _2139;
          float _2141 = _2138 * _2140;
          float _2142 = _2141 + 1.0f;
          float _2143 = _2142 * 0.02500000037252903f;
          bool _2144 = !(_2126 <= 0.0533333346247673f);
          _2152 = _2143;
          do {
            if (_2144) {
              bool _2146 = !(_2126 >= 0.1599999964237213f);
              _2152 = 0.0f;
              if (_2146) {
                float _2148 = 0.23999999463558197f / _2125;
                float _2149 = _2148 + -0.5f;
                float _2150 = _2149 * _2143;
                _2152 = _2150;
              }
            }
            float _2153 = _2152 + 1.0f;
            float _2154 = _2153 * _2097;
            float _2155 = _2153 * _2100;
            float _2156 = _2153 * _2103;
            bool _2157 = (_2154 == _2155);
            bool _2158 = (_2155 == _2156);
            bool _2159 = _2157 && _2158;
            _2188 = 0.0f;
            do {
              if (!_2159) {
                float _2161 = _2154 * 2.0f;
                float _2162 = _2161 - _2155;
                float _2163 = _2162 - _2156;
                float _2164 = _2100 - _2103;
                float _2165 = _2164 * 1.7320507764816284f;
                float _2166 = _2165 * _2153;
                float _2167 = _2166 / _2163;
                float _2168 = atan(_2167);
                float _2169 = _2168 + 3.1415927410125732f;
                float _2170 = _2168 + -3.1415927410125732f;
                bool _2171 = (_2163 < 0.0f);
                bool _2172 = (_2163 == 0.0f);
                bool _2173 = (_2166 >= 0.0f);
                bool _2174 = (_2166 < 0.0f);
                bool _2175 = _2173 && _2171;
                float _2176 = _2175 ? _2169 : _2168;
                bool _2177 = _2174 && _2171;
                float _2178 = _2177 ? _2170 : _2176;
                bool _2179 = _2174 && _2172;
                bool _2180 = _2173 && _2172;
                float _2181 = _2178 * 57.2957763671875f;
                float _2182 = _2179 ? -90.0f : _2181;
                float _2183 = _2180 ? 90.0f : _2182;
                bool _2184 = (_2183 < 0.0f);
                _2188 = _2183;
                if (_2184) {
                  float _2186 = _2183 + 360.0f;
                  _2188 = _2186;
                }
              }
              float _2189 = max(_2188, 0.0f);
              float _2190 = min(_2189, 360.0f);
              bool _2191 = (_2190 < -180.0f);
              do {
                if (_2191) {
                  float _2193 = _2190 + 360.0f;
                  _2199 = _2193;
                } else {
                  bool _2195 = (_2190 > 180.0f);
                  _2199 = _2190;
                  if (_2195) {
                    float _2197 = _2190 + -360.0f;
                    _2199 = _2197;
                  }
                }
                bool _2200 = (_2199 > -67.5f);
                bool _2201 = (_2199 < 67.5f);
                bool _2202 = _2200 && _2201;
                _2238 = 0.0f;
                do {
                  if (_2202) {
                    float _2204 = _2199 + 67.5f;
                    float _2205 = _2204 * 0.029629629105329514f;
                    int _2206 = int(_2205);
                    float _2207 = float(_2206);
                    float _2208 = _2205 - _2207;
                    float _2209 = _2208 * _2208;
                    float _2210 = _2209 * _2208;
                    bool _2211 = (_2206 == 3);
                    if (_2211) {
                      float _2213 = _2210 * 0.1666666716337204f;
                      float _2214 = _2209 * 0.5f;
                      float _2215 = _2208 * 0.5f;
                      float _2216 = 0.1666666716337204f - _2215;
                      float _2217 = _2216 + _2214;
                      float _2218 = _2217 - _2213;
                      _2238 = _2218;
                    } else {
                      bool _2220 = (_2206 == 2);
                      if (_2220) {
                        float _2222 = _2210 * 0.5f;
                        float _2223 = 0.6666666865348816f - _2209;
                        float _2224 = _2223 + _2222;
                        _2238 = _2224;
                      } else {
                        bool _2226 = (_2206 == 1);
                        if (_2226) {
                          float _2228 = _2210 * -0.5f;
                          float _2229 = _2209 + _2208;
                          float _2230 = _2229 * 0.5f;
                          float _2231 = _2228 + 0.1666666716337204f;
                          float _2232 = _2231 + _2230;
                          _2238 = _2232;
                        } else {
                          bool _2234 = (_2206 == 0);
                          float _2235 = _2210 * 0.1666666716337204f;
                          float _2236 = _2234 ? _2235 : 0.0f;
                          _2238 = _2236;
                        }
                      }
                    }
                  }
                  float _2239 = 0.029999999329447746f - _2154;
                  float _2240 = _2112 * 0.27000001072883606f;
                  float _2241 = _2240 * _2239;
                  float _2242 = _2241 * _2238;
                  float _2243 = _2242 + _2154;
                  float _2244 = max(_2243, 0.0f);
                  float _2245 = max(_2155, 0.0f);
                  float _2246 = max(_2156, 0.0f);
                  float _2247 = min(_2244, 65535.0f);
                  float _2248 = min(_2245, 65535.0f);
                  float _2249 = min(_2246, 65535.0f);
                  float _2250 = _2247 * 1.4514392614364624f;
                  float _2251 = mad(-0.2365107536315918f, _2248, _2250);
                  float _2252 = mad(-0.21492856740951538f, _2249, _2251);
                  float _2253 = _2247 * -0.07655377686023712f;
                  float _2254 = mad(1.17622971534729f, _2248, _2253);
                  float _2255 = mad(-0.09967592358589172f, _2249, _2254);
                  float _2256 = _2247 * 0.008316148072481155f;
                  float _2257 = mad(-0.006032449658960104f, _2248, _2256);
                  float _2258 = mad(0.9977163076400757f, _2249, _2257);
                  float _2259 = max(_2252, 0.0f);
                  float _2260 = max(_2255, 0.0f);
                  float _2261 = max(_2258, 0.0f);
                  float _2262 = min(_2259, 65504.0f);
                  float _2263 = min(_2260, 65504.0f);
                  float _2264 = min(_2261, 65504.0f);
                  float _2265 = dot(float3(_2262, _2263, _2264), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2266 = _2262 - _2265;
                  float _2267 = _2263 - _2265;
                  float _2268 = _2264 - _2265;
                  float _2269 = _2266 * 0.9599999785423279f;
                  float _2270 = _2267 * 0.9599999785423279f;
                  float _2271 = _2268 * 0.9599999785423279f;
                  float _2272 = _2269 + _2265;
                  float _2273 = _2270 + _2265;
                  float _2274 = _2271 + _2265;
                  float _2275 = max(_2272, 1.000000013351432e-10f);
                  float _2276 = log2(_2275);
                  float _2277 = _2276 * 0.3010300099849701f;
                  float _2278 = log2(_2064);
                  float _2279 = _2278 * 0.3010300099849701f;
                  bool _2280 = !(_2277 <= _2279);
                  do {
                    if (!_2280) {
                      float _2282 = log2(_2065);
                      float _2283 = _2282 * 0.3010300099849701f;
                      _2348 = _2283;
                    } else {
                      bool _2285 = (_2277 > _2279);
                      float _2286 = log2(_2062);
                      float _2287 = _2286 * 0.3010300099849701f;
                      bool _2288 = (_2277 < _2287);
                      bool _2289 = _2285 && _2288;
                      if (_2289) {
                        float _2291 = _2276 - _2278;
                        float _2292 = _2291 * 0.9030900001525879f;
                        float _2293 = _2286 - _2278;
                        float _2294 = _2293 * 0.3010300099849701f;
                        float _2295 = _2292 / _2294;
                        int _2296 = int(_2295);
                        float _2297 = float(_2296);
                        float _2298 = _2295 - _2297;
                        float _2300 = _10[_2296];
                        int _2301 = _2296 + 1;
                        float _2303 = _10[_2301];
                        int _2304 = _2296 + 2;
                        float _2306 = _10[_2304];
                        float _2307 = _2298 * _2298;
                        float _2308 = _2300 * 0.5f;
                        float _2309 = mad(_2303, -1.0f, _2308);
                        float _2310 = mad(_2306, 0.5f, _2309);
                        float _2311 = _2303 - _2300;
                        float _2312 = mad(_2303, 0.5f, _2308);
                        float _2313 = dot(float3(_2307, _2298, 1.0f), float3(_2310, _2311, _2312));
                        _2348 = _2313;
                      } else {
                        bool _2315 = !(_2277 >= _2287);
                        do {
                          if (!_2315) {
                            float _2317 = log2(_2066);
                            float _2318 = _2317 * 0.3010300099849701f;
                            bool _2319 = (_2277 < _2318);
                            if (_2319) {
                              float _2321 = _2276 - _2286;
                              float _2322 = _2321 * 0.9030900001525879f;
                              float _2323 = _2317 - _2286;
                              float _2324 = _2323 * 0.3010300099849701f;
                              float _2325 = _2322 / _2324;
                              int _2326 = int(_2325);
                              float _2327 = float(_2326);
                              float _2328 = _2325 - _2327;
                              float _2330 = _11[_2326];
                              int _2331 = _2326 + 1;
                              float _2333 = _11[_2331];
                              int _2334 = _2326 + 2;
                              float _2336 = _11[_2334];
                              float _2337 = _2328 * _2328;
                              float _2338 = _2330 * 0.5f;
                              float _2339 = mad(_2333, -1.0f, _2338);
                              float _2340 = mad(_2336, 0.5f, _2339);
                              float _2341 = _2333 - _2330;
                              float _2342 = mad(_2333, 0.5f, _2338);
                              float _2343 = dot(float3(_2337, _2328, 1.0f), float3(_2340, _2341, _2342));
                              _2348 = _2343;
                              break;
                            }
                          }
                          float _2345 = log2(_2067);
                          float _2346 = _2345 * 0.3010300099849701f;
                          _2348 = _2346;
                        } while (false);
                      }
                    }
                    float _2349 = _2348 * 3.321928024291992f;
                    float _2350 = exp2(_2349);
                    float _2351 = max(_2273, 1.000000013351432e-10f);
                    float _2352 = log2(_2351);
                    float _2353 = _2352 * 0.3010300099849701f;
                    bool _2354 = !(_2353 <= _2279);
                    do {
                      if (!_2354) {
                        float _2356 = log2(_2065);
                        float _2357 = _2356 * 0.3010300099849701f;
                        _2422 = _2357;
                      } else {
                        bool _2359 = (_2353 > _2279);
                        float _2360 = log2(_2062);
                        float _2361 = _2360 * 0.3010300099849701f;
                        bool _2362 = (_2353 < _2361);
                        bool _2363 = _2359 && _2362;
                        if (_2363) {
                          float _2365 = _2352 - _2278;
                          float _2366 = _2365 * 0.9030900001525879f;
                          float _2367 = _2360 - _2278;
                          float _2368 = _2367 * 0.3010300099849701f;
                          float _2369 = _2366 / _2368;
                          int _2370 = int(_2369);
                          float _2371 = float(_2370);
                          float _2372 = _2369 - _2371;
                          float _2374 = _10[_2370];
                          int _2375 = _2370 + 1;
                          float _2377 = _10[_2375];
                          int _2378 = _2370 + 2;
                          float _2380 = _10[_2378];
                          float _2381 = _2372 * _2372;
                          float _2382 = _2374 * 0.5f;
                          float _2383 = mad(_2377, -1.0f, _2382);
                          float _2384 = mad(_2380, 0.5f, _2383);
                          float _2385 = _2377 - _2374;
                          float _2386 = mad(_2377, 0.5f, _2382);
                          float _2387 = dot(float3(_2381, _2372, 1.0f), float3(_2384, _2385, _2386));
                          _2422 = _2387;
                        } else {
                          bool _2389 = !(_2353 >= _2361);
                          do {
                            if (!_2389) {
                              float _2391 = log2(_2066);
                              float _2392 = _2391 * 0.3010300099849701f;
                              bool _2393 = (_2353 < _2392);
                              if (_2393) {
                                float _2395 = _2352 - _2360;
                                float _2396 = _2395 * 0.9030900001525879f;
                                float _2397 = _2391 - _2360;
                                float _2398 = _2397 * 0.3010300099849701f;
                                float _2399 = _2396 / _2398;
                                int _2400 = int(_2399);
                                float _2401 = float(_2400);
                                float _2402 = _2399 - _2401;
                                float _2404 = _11[_2400];
                                int _2405 = _2400 + 1;
                                float _2407 = _11[_2405];
                                int _2408 = _2400 + 2;
                                float _2410 = _11[_2408];
                                float _2411 = _2402 * _2402;
                                float _2412 = _2404 * 0.5f;
                                float _2413 = mad(_2407, -1.0f, _2412);
                                float _2414 = mad(_2410, 0.5f, _2413);
                                float _2415 = _2407 - _2404;
                                float _2416 = mad(_2407, 0.5f, _2412);
                                float _2417 = dot(float3(_2411, _2402, 1.0f), float3(_2414, _2415, _2416));
                                _2422 = _2417;
                                break;
                              }
                            }
                            float _2419 = log2(_2067);
                            float _2420 = _2419 * 0.3010300099849701f;
                            _2422 = _2420;
                          } while (false);
                        }
                      }
                      float _2423 = _2422 * 3.321928024291992f;
                      float _2424 = exp2(_2423);
                      float _2425 = max(_2274, 1.000000013351432e-10f);
                      float _2426 = log2(_2425);
                      float _2427 = _2426 * 0.3010300099849701f;
                      bool _2428 = !(_2427 <= _2279);
                      do {
                        if (!_2428) {
                          float _2430 = log2(_2065);
                          float _2431 = _2430 * 0.3010300099849701f;
                          _2496 = _2431;
                        } else {
                          bool _2433 = (_2427 > _2279);
                          float _2434 = log2(_2062);
                          float _2435 = _2434 * 0.3010300099849701f;
                          bool _2436 = (_2427 < _2435);
                          bool _2437 = _2433 && _2436;
                          if (_2437) {
                            float _2439 = _2426 - _2278;
                            float _2440 = _2439 * 0.9030900001525879f;
                            float _2441 = _2434 - _2278;
                            float _2442 = _2441 * 0.3010300099849701f;
                            float _2443 = _2440 / _2442;
                            int _2444 = int(_2443);
                            float _2445 = float(_2444);
                            float _2446 = _2443 - _2445;
                            float _2448 = _10[_2444];
                            int _2449 = _2444 + 1;
                            float _2451 = _10[_2449];
                            int _2452 = _2444 + 2;
                            float _2454 = _10[_2452];
                            float _2455 = _2446 * _2446;
                            float _2456 = _2448 * 0.5f;
                            float _2457 = mad(_2451, -1.0f, _2456);
                            float _2458 = mad(_2454, 0.5f, _2457);
                            float _2459 = _2451 - _2448;
                            float _2460 = mad(_2451, 0.5f, _2456);
                            float _2461 = dot(float3(_2455, _2446, 1.0f), float3(_2458, _2459, _2460));
                            _2496 = _2461;
                          } else {
                            bool _2463 = !(_2427 >= _2435);
                            do {
                              if (!_2463) {
                                float _2465 = log2(_2066);
                                float _2466 = _2465 * 0.3010300099849701f;
                                bool _2467 = (_2427 < _2466);
                                if (_2467) {
                                  float _2469 = _2426 - _2434;
                                  float _2470 = _2469 * 0.9030900001525879f;
                                  float _2471 = _2465 - _2434;
                                  float _2472 = _2471 * 0.3010300099849701f;
                                  float _2473 = _2470 / _2472;
                                  int _2474 = int(_2473);
                                  float _2475 = float(_2474);
                                  float _2476 = _2473 - _2475;
                                  float _2478 = _11[_2474];
                                  int _2479 = _2474 + 1;
                                  float _2481 = _11[_2479];
                                  int _2482 = _2474 + 2;
                                  float _2484 = _11[_2482];
                                  float _2485 = _2476 * _2476;
                                  float _2486 = _2478 * 0.5f;
                                  float _2487 = mad(_2481, -1.0f, _2486);
                                  float _2488 = mad(_2484, 0.5f, _2487);
                                  float _2489 = _2481 - _2478;
                                  float _2490 = mad(_2481, 0.5f, _2486);
                                  float _2491 = dot(float3(_2485, _2476, 1.0f), float3(_2488, _2489, _2490));
                                  _2496 = _2491;
                                  break;
                                }
                              }
                              float _2493 = log2(_2067);
                              float _2494 = _2493 * 0.3010300099849701f;
                              _2496 = _2494;
                            } while (false);
                          }
                        }
                        float _2497 = _2496 * 3.321928024291992f;
                        float _2498 = exp2(_2497);
                        float _2499 = _2350 - _2065;
                        float _2500 = _2067 - _2065;
                        float _2501 = _2499 / _2500;
                        float _2502 = _2424 - _2065;
                        float _2503 = _2502 / _2500;
                        float _2504 = _2498 - _2065;
                        float _2505 = _2504 / _2500;
                        float _2506 = _2501 * 0.6624541878700256f;
                        float _2507 = mad(0.13400420546531677f, _2503, _2506);
                        float _2508 = mad(0.15618768334388733f, _2505, _2507);
                        float _2509 = _2501 * 0.2722287178039551f;
                        float _2510 = mad(0.6740817427635193f, _2503, _2509);
                        float _2511 = mad(0.053689517080783844f, _2505, _2510);
                        float _2512 = _2501 * -0.005574649665504694f;
                        float _2513 = mad(0.00406073359772563f, _2503, _2512);
                        float _2514 = mad(1.0103391408920288f, _2505, _2513);
                        float _2515 = _2508 * 1.6410233974456787f;
                        float _2516 = mad(-0.32480329275131226f, _2511, _2515);
                        float _2517 = mad(-0.23642469942569733f, _2514, _2516);
                        float _2518 = _2508 * -0.663662850856781f;
                        float _2519 = mad(1.6153316497802734f, _2511, _2518);
                        float _2520 = mad(0.016756348311901093f, _2514, _2519);
                        float _2521 = _2508 * 0.011721894145011902f;
                        float _2522 = mad(-0.008284442126750946f, _2511, _2521);
                        float _2523 = mad(0.9883948564529419f, _2514, _2522);
                        float _2524 = max(_2517, 0.0f);
                        float _2525 = max(_2520, 0.0f);
                        float _2526 = max(_2523, 0.0f);
                        float _2527 = min(_2524, 1.0f);
                        float _2528 = min(_2525, 1.0f);
                        float _2529 = min(_2526, 1.0f);
                        float _2530 = _2527 * 0.6624541878700256f;
                        float _2531 = mad(0.13400420546531677f, _2528, _2530);
                        float _2532 = mad(0.15618768334388733f, _2529, _2531);
                        float _2533 = _2527 * 0.2722287178039551f;
                        float _2534 = mad(0.6740817427635193f, _2528, _2533);
                        float _2535 = mad(0.053689517080783844f, _2529, _2534);
                        float _2536 = _2527 * -0.005574649665504694f;
                        float _2537 = mad(0.00406073359772563f, _2528, _2536);
                        float _2538 = mad(1.0103391408920288f, _2529, _2537);
                        float _2539 = _2532 * 1.6410233974456787f;
                        float _2540 = mad(-0.32480329275131226f, _2535, _2539);
                        float _2541 = mad(-0.23642469942569733f, _2538, _2540);
                        float _2542 = _2532 * -0.663662850856781f;
                        float _2543 = mad(1.6153316497802734f, _2535, _2542);
                        float _2544 = mad(0.016756348311901093f, _2538, _2543);
                        float _2545 = _2532 * 0.011721894145011902f;
                        float _2546 = mad(-0.008284442126750946f, _2535, _2545);
                        float _2547 = mad(0.9883948564529419f, _2538, _2546);
                        float _2548 = max(_2541, 0.0f);
                        float _2549 = max(_2544, 0.0f);
                        float _2550 = max(_2547, 0.0f);
                        float _2551 = min(_2548, 65535.0f);
                        float _2552 = min(_2549, 65535.0f);
                        float _2553 = min(_2550, 65535.0f);
                        float _2554 = _2551 * _2067;
                        float _2555 = _2552 * _2067;
                        float _2556 = _2553 * _2067;
                        float _2557 = max(_2554, 0.0f);
                        float _2558 = max(_2555, 0.0f);
                        float _2559 = max(_2556, 0.0f);
                        float _2560 = min(_2557, 65535.0f);
                        float _2561 = min(_2558, 65535.0f);
                        float _2562 = min(_2559, 65535.0f);
                        bool _2563 = (_1332 == 6);
                        _2575 = _2560;
                        _2576 = _2561;
                        _2577 = _2562;
                        do {
                          if (!_2563) {
                            float _2565 = _2560 * _39;
                            float _2566 = mad(_40, _2561, _2565);
                            float _2567 = mad(_41, _2562, _2566);
                            float _2568 = _2560 * _42;
                            float _2569 = mad(_43, _2561, _2568);
                            float _2570 = mad(_44, _2562, _2569);
                            float _2571 = _2560 * _45;
                            float _2572 = mad(_46, _2561, _2571);
                            float _2573 = mad(_47, _2562, _2572);
                            _2575 = _2567;
                            _2576 = _2570;
                            _2577 = _2573;
                          }
                          float _2578 = _2575 * 9.999999747378752e-05f;
                          float _2579 = _2576 * 9.999999747378752e-05f;
                          float _2580 = _2577 * 9.999999747378752e-05f;
                          float _2581 = log2(_2578);
                          float _2582 = log2(_2579);
                          float _2583 = log2(_2580);
                          float _2584 = _2581 * 0.1593017578125f;
                          float _2585 = _2582 * 0.1593017578125f;
                          float _2586 = _2583 * 0.1593017578125f;
                          float _2587 = exp2(_2584);
                          float _2588 = exp2(_2585);
                          float _2589 = exp2(_2586);
                          float _2590 = _2587 * 18.8515625f;
                          float _2591 = _2588 * 18.8515625f;
                          float _2592 = _2589 * 18.8515625f;
                          float _2593 = _2590 + 0.8359375f;
                          float _2594 = _2591 + 0.8359375f;
                          float _2595 = _2592 + 0.8359375f;
                          float _2596 = _2587 * 18.6875f;
                          float _2597 = _2588 * 18.6875f;
                          float _2598 = _2589 * 18.6875f;
                          float _2599 = _2596 + 1.0f;
                          float _2600 = _2597 + 1.0f;
                          float _2601 = _2598 + 1.0f;
                          float _2602 = 1.0f / _2599;
                          float _2603 = 1.0f / _2600;
                          float _2604 = 1.0f / _2601;
                          float _2605 = _2602 * _2593;
                          float _2606 = _2603 * _2594;
                          float _2607 = _2604 * _2595;
                          float _2608 = log2(_2605);
                          float _2609 = log2(_2606);
                          float _2610 = log2(_2607);
                          float _2611 = _2608 * 78.84375f;
                          float _2612 = _2609 * 78.84375f;
                          float _2613 = _2610 * 78.84375f;
                          float _2614 = exp2(_2611);
                          float _2615 = exp2(_2612);
                          float _2616 = exp2(_2613);
                          _2754 = _2614;
                          _2755 = _2615;
                          _2756 = _2616;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2618 = (_1332 == 7);
          if (_2618) {
            float _2621 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2622 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2623 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2625 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2626 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2627 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2629 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2630 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2631 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2632 = _2621 * _1314;
            float _2633 = mad(_2622, _1315, _2632);
            float _2634 = mad(_2623, _1316, _2633);
            float _2635 = _2625 * _1314;
            float _2636 = mad(_2626, _1315, _2635);
            float _2637 = mad(_2627, _1316, _2636);
            float _2638 = _2629 * _1314;
            float _2639 = mad(_2630, _1315, _2638);
            float _2640 = mad(_2631, _1316, _2639);
            float _2641 = _2634 * _39;
            float _2642 = mad(_40, _2637, _2641);
            float _2643 = mad(_41, _2640, _2642);
            float _2644 = _2634 * _42;
            float _2645 = mad(_43, _2637, _2644);
            float _2646 = mad(_44, _2640, _2645);
            float _2647 = _2634 * _45;
            float _2648 = mad(_46, _2637, _2647);
            float _2649 = mad(_47, _2640, _2648);
            float _2650 = _2643 * 9.999999747378752e-05f;
            float _2651 = _2646 * 9.999999747378752e-05f;
            float _2652 = _2649 * 9.999999747378752e-05f;
            float _2653 = log2(_2650);
            float _2654 = log2(_2651);
            float _2655 = log2(_2652);
            float _2656 = _2653 * 0.1593017578125f;
            float _2657 = _2654 * 0.1593017578125f;
            float _2658 = _2655 * 0.1593017578125f;
            float _2659 = exp2(_2656);
            float _2660 = exp2(_2657);
            float _2661 = exp2(_2658);
            float _2662 = _2659 * 18.8515625f;
            float _2663 = _2660 * 18.8515625f;
            float _2664 = _2661 * 18.8515625f;
            float _2665 = _2662 + 0.8359375f;
            float _2666 = _2663 + 0.8359375f;
            float _2667 = _2664 + 0.8359375f;
            float _2668 = _2659 * 18.6875f;
            float _2669 = _2660 * 18.6875f;
            float _2670 = _2661 * 18.6875f;
            float _2671 = _2668 + 1.0f;
            float _2672 = _2669 + 1.0f;
            float _2673 = _2670 + 1.0f;
            float _2674 = 1.0f / _2671;
            float _2675 = 1.0f / _2672;
            float _2676 = 1.0f / _2673;
            float _2677 = _2674 * _2665;
            float _2678 = _2675 * _2666;
            float _2679 = _2676 * _2667;
            float _2680 = log2(_2677);
            float _2681 = log2(_2678);
            float _2682 = log2(_2679);
            float _2683 = _2680 * 78.84375f;
            float _2684 = _2681 * 78.84375f;
            float _2685 = _2682 * 78.84375f;
            float _2686 = exp2(_2683);
            float _2687 = exp2(_2684);
            float _2688 = exp2(_2685);
            _2754 = _2686;
            _2755 = _2687;
            _2756 = _2688;
          } else {
            bool _2690 = (_1332 == 8);
            _2754 = _1314;
            _2755 = _1315;
            _2756 = _1316;
            if (!_2690) {
              bool _2692 = (_1332 == 9);
              float _2694 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2695 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2696 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2698 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2699 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2700 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2702 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2703 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2704 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2692) {
                float _2706 = _2694 * _1302;
                float _2707 = mad(_2695, _1303, _2706);
                float _2708 = mad(_2696, _1304, _2707);
                float _2709 = _2698 * _1302;
                float _2710 = mad(_2699, _1303, _2709);
                float _2711 = mad(_2700, _1304, _2710);
                float _2712 = _2702 * _1302;
                float _2713 = mad(_2703, _1303, _2712);
                float _2714 = mad(_2704, _1304, _2713);
                float _2715 = _2708 * _39;
                float _2716 = mad(_40, _2711, _2715);
                float _2717 = mad(_41, _2714, _2716);
                float _2718 = _2708 * _42;
                float _2719 = mad(_43, _2711, _2718);
                float _2720 = mad(_44, _2714, _2719);
                float _2721 = _2708 * _45;
                float _2722 = mad(_46, _2711, _2721);
                float _2723 = mad(_47, _2714, _2722);
                _2754 = _2717;
                _2755 = _2720;
                _2756 = _2723;
              } else {
                float _2725 = _2694 * _1328;
                float _2726 = mad(_2695, _1329, _2725);
                float _2727 = mad(_2696, _1330, _2726);
                float _2728 = _2698 * _1328;
                float _2729 = mad(_2699, _1329, _2728);
                float _2730 = mad(_2700, _1330, _2729);
                float _2731 = _2702 * _1328;
                float _2732 = mad(_2703, _1329, _2731);
                float _2733 = mad(_2704, _1330, _2732);
                float _2734 = _2727 * _39;
                float _2735 = mad(_40, _2730, _2734);
                float _2736 = mad(_41, _2733, _2735);
                float _2737 = _2727 * _42;
                float _2738 = mad(_43, _2730, _2737);
                float _2739 = mad(_44, _2733, _2738);
                float _2740 = _2727 * _45;
                float _2741 = mad(_46, _2730, _2740);
                float _2742 = mad(_47, _2733, _2741);
                float _2743 = _RootShaderParameters_040z;
                float _2744 = log2(_2736);
                float _2745 = log2(_2739);
                float _2746 = log2(_2742);
                float _2747 = _2744 * _2743;
                float _2748 = _2745 * _2743;
                float _2749 = _2746 * _2743;
                float _2750 = exp2(_2747);
                float _2751 = exp2(_2748);
                float _2752 = exp2(_2749);
                _2754 = _2750;
                _2755 = _2751;
                _2756 = _2752;
              }
            }
          }
        }
      }
    }
  }
  float _2757 = _2754 * 0.9523810148239136f;
  float _2758 = _2755 * 0.9523810148239136f;
  float _2759 = _2756 * 0.9523810148239136f;
  SV_Target.x = _2757;
  SV_Target.y = _2758;
  SV_Target.z = _2759;
  SV_Target.w = 0.0f;
  return SV_Target;
}
