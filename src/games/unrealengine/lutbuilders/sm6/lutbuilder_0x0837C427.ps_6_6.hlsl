#include "../../common.hlsl"

// Tokyo Xtreme Racer

cbuffer cb0 : register(b0) {
  float cb0_015x : packoffset(c015.x);
  float cb0_015y : packoffset(c015.y);
  float cb0_015z : packoffset(c015.z);
  float cb0_015w : packoffset(c015.w);
  float cb0_016x : packoffset(c016.x);
  float cb0_016y : packoffset(c016.y);
  float cb0_016z : packoffset(c016.z);
  float cb0_017x : packoffset(c017.x);
  float cb0_017y : packoffset(c017.y);
  float cb0_017z : packoffset(c017.z);
  float cb0_017w : packoffset(c017.w);
  float cb0_018x : packoffset(c018.x);
  float cb0_018y : packoffset(c018.y);
  float cb0_018z : packoffset(c018.z);
  float cb0_018w : packoffset(c018.w);
  float cb0_019x : packoffset(c019.x);
  float cb0_019y : packoffset(c019.y);
  float cb0_019z : packoffset(c019.z);
  float cb0_019w : packoffset(c019.w);
  float cb0_020x : packoffset(c020.x);
  float cb0_020y : packoffset(c020.y);
  float cb0_020z : packoffset(c020.z);
  float cb0_020w : packoffset(c020.w);
  float cb0_021x : packoffset(c021.x);
  float cb0_021y : packoffset(c021.y);
  float cb0_021z : packoffset(c021.z);
  float cb0_021w : packoffset(c021.w);
  float cb0_022x : packoffset(c022.x);
  float cb0_022y : packoffset(c022.y);
  float cb0_022z : packoffset(c022.z);
  float cb0_022w : packoffset(c022.w);
  float cb0_023x : packoffset(c023.x);
  float cb0_023y : packoffset(c023.y);
  float cb0_023z : packoffset(c023.z);
  float cb0_023w : packoffset(c023.w);
  float cb0_024x : packoffset(c024.x);
  float cb0_024y : packoffset(c024.y);
  float cb0_024z : packoffset(c024.z);
  float cb0_024w : packoffset(c024.w);
  float cb0_025x : packoffset(c025.x);
  float cb0_025y : packoffset(c025.y);
  float cb0_025z : packoffset(c025.z);
  float cb0_025w : packoffset(c025.w);
  float cb0_026x : packoffset(c026.x);
  float cb0_026y : packoffset(c026.y);
  float cb0_026z : packoffset(c026.z);
  float cb0_026w : packoffset(c026.w);
  float cb0_027x : packoffset(c027.x);
  float cb0_027y : packoffset(c027.y);
  float cb0_027z : packoffset(c027.z);
  float cb0_027w : packoffset(c027.w);
  float cb0_028x : packoffset(c028.x);
  float cb0_028y : packoffset(c028.y);
  float cb0_028z : packoffset(c028.z);
  float cb0_028w : packoffset(c028.w);
  float cb0_029x : packoffset(c029.x);
  float cb0_029y : packoffset(c029.y);
  float cb0_029z : packoffset(c029.z);
  float cb0_029w : packoffset(c029.w);
  float cb0_030x : packoffset(c030.x);
  float cb0_030y : packoffset(c030.y);
  float cb0_030z : packoffset(c030.z);
  float cb0_030w : packoffset(c030.w);
  float cb0_031x : packoffset(c031.x);
  float cb0_031y : packoffset(c031.y);
  float cb0_031z : packoffset(c031.z);
  float cb0_031w : packoffset(c031.w);
  float cb0_032x : packoffset(c032.x);
  float cb0_032y : packoffset(c032.y);
  float cb0_032z : packoffset(c032.z);
  float cb0_032w : packoffset(c032.w);
  float cb0_033x : packoffset(c033.x);
  float cb0_033y : packoffset(c033.y);
  float cb0_033z : packoffset(c033.z);
  float cb0_033w : packoffset(c033.w);
  float cb0_034x : packoffset(c034.x);
  float cb0_034y : packoffset(c034.y);
  float cb0_034z : packoffset(c034.z);
  float cb0_034w : packoffset(c034.w);
  float cb0_035x : packoffset(c035.x);
  float cb0_035y : packoffset(c035.y);
  float cb0_035z : packoffset(c035.z);
  float cb0_035w : packoffset(c035.w);
  float cb0_036x : packoffset(c036.x);
  float cb0_036y : packoffset(c036.y);
  float cb0_036z : packoffset(c036.z);
  float cb0_036w : packoffset(c036.w);
  float cb0_037x : packoffset(c037.x);
  float cb0_037y : packoffset(c037.y);
  float cb0_037z : packoffset(c037.z);
  float cb0_037w : packoffset(c037.w);
  float cb0_038x : packoffset(c038.x);
  float cb0_038y : packoffset(c038.y);
  float cb0_038z : packoffset(c038.z);
  float cb0_038w : packoffset(c038.w);
  float cb0_039x : packoffset(c039.x);
  float cb0_039y : packoffset(c039.y);
  float cb0_039z : packoffset(c039.z);
  float cb0_039w : packoffset(c039.w);
  float cb0_040x : packoffset(c040.x);
  float cb0_040y : packoffset(c040.y);
  int cb0_040w : packoffset(c040.w);
  float cb0_041x : packoffset(c041.x);
  float cb0_041y : packoffset(c041.y);
  float cb0_041z : packoffset(c041.z);
  float cb0_042y : packoffset(c042.y);
  int cb0_043x : packoffset(c043.x);
};

cbuffer cb1 : register(b1) {
  float4 WorkingColorSpace_000[4] : packoffset(c000.x);
  float4 WorkingColorSpace_064[4] : packoffset(c004.x);
  float4 WorkingColorSpace_128[4] : packoffset(c008.x);
  float4 WorkingColorSpace_192[4] : packoffset(c012.x);
  float4 WorkingColorSpace_256[4] : packoffset(c016.x);
  float4 WorkingColorSpace_320[4] : packoffset(c020.x);
  int WorkingColorSpace_384 : packoffset(c024.x);
};

float4 main(
  noperspective float2 TEXCOORD : TEXCOORD,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_RenderTargetArrayIndex : SV_RenderTargetArrayIndex
) : SV_Target {
  float4 SV_Target;
  float _10 = 0.5f / cb0_037x;
  float _15 = cb0_037x + -1.0f;
  float _39;
  float _40;
  float _41;
  float _42;
  float _43;
  float _44;
  float _45;
  float _46;
  float _47;
  float _117;
  float _324;
  float _325;
  float _326;
  float _828;
  float _861;
  float _875;
  float _939;
  float _1191;
  float _1192;
  float _1193;
  float _1204;
  float _1215;
  float _1226;
  if (!(cb0_043x == 1)) {
    if (!(cb0_043x == 2)) {
      if (!(cb0_043x == 3)) {
        bool _28 = (cb0_043x == 4);
        _39 = select(_28, 1.0f, 1.705051064491272f);
        _40 = select(_28, 0.0f, -0.6217921376228333f);
        _41 = select(_28, 0.0f, -0.0832589864730835f);
        _42 = select(_28, 0.0f, -0.13025647401809692f);
        _43 = select(_28, 1.0f, 1.140804648399353f);
        _44 = select(_28, 0.0f, -0.010548308491706848f);
        _45 = select(_28, 0.0f, -0.024003351107239723f);
        _46 = select(_28, 0.0f, -0.1289689838886261f);
        _47 = select(_28, 1.0f, 1.1529725790023804f);
      } else {
        _39 = 0.6954522132873535f;
        _40 = 0.14067870378494263f;
        _41 = 0.16386906802654266f;
        _42 = 0.044794563204050064f;
        _43 = 0.8596711158752441f;
        _44 = 0.0955343171954155f;
        _45 = -0.005525882821530104f;
        _46 = 0.004025210160762072f;
        _47 = 1.0015007257461548f;
      }
    } else {
      _39 = 1.0258246660232544f;
      _40 = -0.020053181797266006f;
      _41 = -0.005771636962890625f;
      _42 = -0.002234415616840124f;
      _43 = 1.0045864582061768f;
      _44 = -0.002352118492126465f;
      _45 = -0.005013350863009691f;
      _46 = -0.025290070101618767f;
      _47 = 1.0303035974502563f;
    }
  } else {
    _39 = 1.3792141675949097f;
    _40 = -0.30886411666870117f;
    _41 = -0.0703500509262085f;
    _42 = -0.06933490186929703f;
    _43 = 1.08229660987854f;
    _44 = -0.012961871922016144f;
    _45 = -0.0021590073592960835f;
    _46 = -0.0454593189060688f;
    _47 = 1.0476183891296387f;
  }
  float _60 = (exp2((((cb0_037x * (TEXCOORD.x - _10)) / _15) + -0.4340175986289978f) * 14.0f) * 0.18000000715255737f) + -0.002667719265446067f;
  float _61 = (exp2((((cb0_037x * (TEXCOORD.y - _10)) / _15) + -0.4340175986289978f) * 14.0f) * 0.18000000715255737f) + -0.002667719265446067f;
  float _62 = (exp2(((float((uint)(int)(SV_RenderTargetArrayIndex)) / _15) + -0.4340175986289978f) * 14.0f) * 0.18000000715255737f) + -0.002667719265446067f;

  bool set_colors = false;

  if (!(abs(cb0_037y + -6500.0f) > 9.99999993922529e-09f)) {
    [branch]
    if (!(abs(cb0_037z) > 9.99999993922529e-09f)) {
      _324 = _60;
      _325 = _61;
      _326 = _62;
      float _341 = mad((WorkingColorSpace_128[0].z), _326, mad((WorkingColorSpace_128[0].y), _325, ((WorkingColorSpace_128[0].x) * _324)));
      float _344 = mad((WorkingColorSpace_128[1].z), _326, mad((WorkingColorSpace_128[1].y), _325, ((WorkingColorSpace_128[1].x) * _324)));
      float _347 = mad((WorkingColorSpace_128[2].z), _326, mad((WorkingColorSpace_128[2].y), _325, ((WorkingColorSpace_128[2].x) * _324)));

      SetUngradedAP1(float3(_341, _344, _347));

      float _348 = dot(float3(_341, _344, _347), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
      float _352 = (_341 / _348) + -1.0f;
      float _353 = (_344 / _348) + -1.0f;
      float _354 = (_347 / _348) + -1.0f;
      float _366 = (1.0f - exp2(((_348 * _348) * -4.0f) * cb0_038w)) * (1.0f - exp2(dot(float3(_352, _353, _354), float3(_352, _353, _354)) * -4.0f));
      float _382 = ((mad(-0.06368321925401688f, _347, mad(-0.3292922377586365f, _344, (_341 * 1.3704125881195068f))) - _341) * _366) + _341;
      float _383 = ((mad(-0.010861365124583244f, _347, mad(1.0970927476882935f, _344, (_341 * -0.08343357592821121f))) - _344) * _366) + _344;
      float _384 = ((mad(1.2036951780319214f, _347, mad(-0.09862580895423889f, _344, (_341 * -0.02579331398010254f))) - _347) * _366) + _347;
      float _385 = dot(float3(_382, _383, _384), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
      float _399 = cb0_021w + cb0_026w;
      float _413 = cb0_020w * cb0_025w;
      float _427 = cb0_019w * cb0_024w;
      float _441 = cb0_018w * cb0_023w;
      float _455 = cb0_017w * cb0_022w;
      float _459 = _382 - _385;
      float _460 = _383 - _385;
      float _461 = _384 - _385;
      float _518 = saturate(_385 / cb0_037w);
      float _522 = (_518 * _518) * (3.0f - (_518 * 2.0f));
      float _523 = 1.0f - _522;
      float _532 = cb0_021w + cb0_036w;
      float _541 = cb0_020w * cb0_035w;
      float _550 = cb0_019w * cb0_034w;
      float _559 = cb0_018w * cb0_033w;
      float _568 = cb0_017w * cb0_032w;
      float _631 = saturate((_385 - cb0_038x) / (cb0_038y - cb0_038x));
      float _635 = (_631 * _631) * (3.0f - (_631 * 2.0f));
      float _644 = cb0_021w + cb0_031w;
      float _653 = cb0_020w * cb0_030w;
      float _662 = cb0_019w * cb0_029w;
      float _671 = cb0_018w * cb0_028w;
      float _680 = cb0_017w * cb0_027w;
      float _738 = _522 - _635;
      float _749 = ((_635 * (((cb0_021x + cb0_036x) + _532) + (((cb0_020x * cb0_035x) * _541) * exp2(log2(exp2(((cb0_018x * cb0_033x) * _559) * log2(max(0.0f, ((((cb0_017x * cb0_032x) * _568) * _459) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019x * cb0_034x) * _550)))))) + (_523 * (((cb0_021x + cb0_026x) + _399) + (((cb0_020x * cb0_025x) * _413) * exp2(log2(exp2(((cb0_018x * cb0_023x) * _441) * log2(max(0.0f, ((((cb0_017x * cb0_022x) * _455) * _459) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019x * cb0_024x) * _427))))))) + ((((cb0_021x + cb0_031x) + _644) + (((cb0_020x * cb0_030x) * _653) * exp2(log2(exp2(((cb0_018x * cb0_028x) * _671) * log2(max(0.0f, ((((cb0_017x * cb0_027x) * _680) * _459) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019x * cb0_029x) * _662))))) * _738);
      float _751 = ((_635 * (((cb0_021y + cb0_036y) + _532) + (((cb0_020y * cb0_035y) * _541) * exp2(log2(exp2(((cb0_018y * cb0_033y) * _559) * log2(max(0.0f, ((((cb0_017y * cb0_032y) * _568) * _460) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019y * cb0_034y) * _550)))))) + (_523 * (((cb0_021y + cb0_026y) + _399) + (((cb0_020y * cb0_025y) * _413) * exp2(log2(exp2(((cb0_018y * cb0_023y) * _441) * log2(max(0.0f, ((((cb0_017y * cb0_022y) * _455) * _460) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019y * cb0_024y) * _427))))))) + ((((cb0_021y + cb0_031y) + _644) + (((cb0_020y * cb0_030y) * _653) * exp2(log2(exp2(((cb0_018y * cb0_028y) * _671) * log2(max(0.0f, ((((cb0_017y * cb0_027y) * _680) * _460) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019y * cb0_029y) * _662))))) * _738);
      float _753 = ((_635 * (((cb0_021z + cb0_036z) + _532) + (((cb0_020z * cb0_035z) * _541) * exp2(log2(exp2(((cb0_018z * cb0_033z) * _559) * log2(max(0.0f, ((((cb0_017z * cb0_032z) * _568) * _461) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019z * cb0_034z) * _550)))))) + (_523 * (((cb0_021z + cb0_026z) + _399) + (((cb0_020z * cb0_025z) * _413) * exp2(log2(exp2(((cb0_018z * cb0_023z) * _441) * log2(max(0.0f, ((((cb0_017z * cb0_022z) * _455) * _461) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019z * cb0_024z) * _427))))))) + ((((cb0_021z + cb0_031z) + _644) + (((cb0_020z * cb0_030z) * _653) * exp2(log2(exp2(((cb0_018z * cb0_028z) * _671) * log2(max(0.0f, ((((cb0_017z * cb0_027z) * _680) * _461) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019z * cb0_029z) * _662))))) * _738);

      SetUntonemappedAP1(float3(_749, _751, _753));
      set_colors = true;

      float _768 = ((mad(0.061360642313957214f, _753, mad(-4.540197551250458e-09f, _751, (_749 * 0.9386394023895264f))) - _749) * cb0_038z) + _749;
      float _769 = ((mad(0.169205904006958f, _753, mad(0.8307942152023315f, _751, (_749 * 6.775371730327606e-08f))) - _751) * cb0_038z) + _751;
      float _770 = (mad(-2.3283064365386963e-10f, _751, (_749 * -9.313225746154785e-10f)) * cb0_038z) + _753;
      float _773 = mad(0.16386905312538147f, _770, mad(0.14067868888378143f, _769, (_768 * 0.6954522132873535f)));
      float _776 = mad(0.0955343246459961f, _770, mad(0.8596711158752441f, _769, (_768 * 0.044794581830501556f)));
      float _779 = mad(1.0015007257461548f, _770, mad(0.004025210160762072f, _769, (_768 * -0.005525882821530104f)));
      float _783 = max(max(_773, _776), _779);
      float _788 = (max(_783, 1.000000013351432e-10f) - max(min(min(_773, _776), _779), 1.000000013351432e-10f)) / max(_783, 0.009999999776482582f);
      float _801 = ((_776 + _773) + _779) + (sqrt((((_779 - _776) * _779) + ((_776 - _773) * _776)) + ((_773 - _779) * _773)) * 1.75f);
      float _802 = _801 * 0.3333333432674408f;
      float _803 = _788 + -0.4000000059604645f;
      float _804 = _803 * 5.0f;
      float _808 = max((1.0f - abs(_803 * 2.5f)), 0.0f);
      float _819 = ((float((int)(((int)(uint)((bool)(_804 > 0.0f))) - ((int)(uint)((bool)(_804 < 0.0f))))) * (1.0f - (_808 * _808))) + 1.0f) * 0.02500000037252903f;
      do {
        if (!(_802 <= 0.0533333346247673f)) {
          if (!(_802 >= 0.1599999964237213f)) {
            _828 = (((0.23999999463558197f / _801) + -0.5f) * _819);
          } else {
            _828 = 0.0f;
          }
        } else {
          _828 = _819;
        }
        float _829 = _828 + 1.0f;
        float _830 = _829 * _773;
        float _831 = _829 * _776;
        float _832 = _829 * _779;
        do {
          if (!((bool)(_830 == _831) && (bool)(_831 == _832))) {
            float _839 = ((_830 * 2.0f) - _831) - _832;
            float _842 = ((_776 - _779) * 1.7320507764816284f) * _829;
            float _844 = atan(_842 / _839);
            bool _847 = (_839 < 0.0f);
            bool _848 = (_839 == 0.0f);
            bool _849 = (_842 >= 0.0f);
            bool _850 = (_842 < 0.0f);
            _861 = select((_849 && _848), 90.0f, select((_850 && _848), -90.0f, (select((_850 && _847), (_844 + -3.1415927410125732f), select((_849 && _847), (_844 + 3.1415927410125732f), _844)) * 57.2957763671875f)));
          } else {
            _861 = 0.0f;
          }
          float _866 = min(max(select((_861 < 0.0f), (_861 + 360.0f), _861), 0.0f), 360.0f);
          do {
            if (_866 < -180.0f) {
              _875 = (_866 + 360.0f);
            } else {
              if (_866 > 180.0f) {
                _875 = (_866 + -360.0f);
              } else {
                _875 = _866;
              }
            }
            float _879 = saturate(1.0f - abs(_875 * 0.014814814552664757f));
            float _883 = (_879 * _879) * (3.0f - (_879 * 2.0f));
            float _889 = ((_883 * _883) * ((_788 * 0.18000000715255737f) * (0.029999999329447746f - _830))) + _830;
            float _899 = max(0.0f, mad(-0.21492856740951538f, _832, mad(-0.2365107536315918f, _831, (_889 * 1.4514392614364624f))));
            float _900 = max(0.0f, mad(-0.09967592358589172f, _832, mad(1.17622971534729f, _831, (_889 * -0.07655377686023712f))));
            float _901 = max(0.0f, mad(0.9977163076400757f, _832, mad(-0.006032449658960104f, _831, (_889 * 0.008316148072481155f))));
            float _902 = dot(float3(_899, _900, _901), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
            float _917 = (cb0_040x + 1.0f) - cb0_039z;
            float _919 = cb0_040y + 1.0f;
            float _921 = _919 - cb0_039w;
            do {
              if (cb0_039z > 0.800000011920929f) {
                _939 = (((0.8199999928474426f - cb0_039z) / cb0_039y) + -0.7447274923324585f);
              } else {
                float _930 = (cb0_040x + 0.18000000715255737f) / _917;
                _939 = (-0.7447274923324585f - ((log2(_930 / (2.0f - _930)) * 0.3465735912322998f) * (_917 / cb0_039y)));
              }
              float _942 = ((1.0f - cb0_039z) / cb0_039y) - _939;
              float _944 = (cb0_039w / cb0_039y) - _942;
              float _948 = log2(lerp(_902, _899, 0.9599999785423279f)) * 0.3010300099849701f;
              float _949 = log2(lerp(_902, _900, 0.9599999785423279f)) * 0.3010300099849701f;
              float _950 = log2(lerp(_902, _901, 0.9599999785423279f)) * 0.3010300099849701f;
              float _954 = cb0_039y * (_948 + _942);
              float _955 = cb0_039y * (_949 + _942);
              float _956 = cb0_039y * (_950 + _942);
              float _957 = _917 * 2.0f;
              float _959 = (cb0_039y * -2.0f) / _917;
              float _960 = _948 - _939;
              float _961 = _949 - _939;
              float _962 = _950 - _939;
              float _981 = _921 * 2.0f;
              float _983 = (cb0_039y * 2.0f) / _921;
              float _1008 = select((_948 < _939), ((_957 / (exp2((_960 * 1.4426950216293335f) * _959) + 1.0f)) - cb0_040x), _954);
              float _1009 = select((_949 < _939), ((_957 / (exp2((_961 * 1.4426950216293335f) * _959) + 1.0f)) - cb0_040x), _955);
              float _1010 = select((_950 < _939), ((_957 / (exp2((_962 * 1.4426950216293335f) * _959) + 1.0f)) - cb0_040x), _956);
              float _1017 = _944 - _939;
              float _1021 = saturate(_960 / _1017);
              float _1022 = saturate(_961 / _1017);
              float _1023 = saturate(_962 / _1017);
              bool _1024 = (_944 < _939);
              float _1028 = select(_1024, (1.0f - _1021), _1021);
              float _1029 = select(_1024, (1.0f - _1022), _1022);
              float _1030 = select(_1024, (1.0f - _1023), _1023);
              float _1049 = (((_1028 * _1028) * (select((_948 > _944), (_919 - (_981 / (exp2(((_948 - _944) * 1.4426950216293335f) * _983) + 1.0f))), _954) - _1008)) * (3.0f - (_1028 * 2.0f))) + _1008;
              float _1050 = (((_1029 * _1029) * (select((_949 > _944), (_919 - (_981 / (exp2(((_949 - _944) * 1.4426950216293335f) * _983) + 1.0f))), _955) - _1009)) * (3.0f - (_1029 * 2.0f))) + _1009;
              float _1051 = (((_1030 * _1030) * (select((_950 > _944), (_919 - (_981 / (exp2(((_950 - _944) * 1.4426950216293335f) * _983) + 1.0f))), _956) - _1010)) * (3.0f - (_1030 * 2.0f))) + _1010;
              float _1052 = dot(float3(_1049, _1050, _1051), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
              float _1072 = (cb0_039x * (max(0.0f, (lerp(_1052, _1049, 0.9300000071525574f))) - _768)) + _768;
              float _1073 = (cb0_039x * (max(0.0f, (lerp(_1052, _1050, 0.9300000071525574f))) - _769)) + _769;
              float _1074 = (cb0_039x * (max(0.0f, (lerp(_1052, _1051, 0.9300000071525574f))) - _770)) + _770;
              float _1090 = ((mad(-0.06537103652954102f, _1074, mad(1.451815478503704e-06f, _1073, (_1072 * 1.065374732017517f))) - _1072) * cb0_038z) + _1072;
              float _1091 = ((mad(-0.20366770029067993f, _1074, mad(1.2036634683609009f, _1073, (_1072 * -2.57161445915699e-07f))) - _1073) * cb0_038z) + _1073;
              float _1092 = ((mad(0.9999996423721313f, _1074, mad(2.0954757928848267e-08f, _1073, (_1072 * 1.862645149230957e-08f))) - _1074) * cb0_038z) + _1074;
              float _1114 = max(0.0f, mad((WorkingColorSpace_192[0].z), _1092, mad((WorkingColorSpace_192[0].y), _1091, ((WorkingColorSpace_192[0].x) * _1090))));
              float _1115 = max(0.0f, mad((WorkingColorSpace_192[1].z), _1092, mad((WorkingColorSpace_192[1].y), _1091, ((WorkingColorSpace_192[1].x) * _1090))));
              float _1116 = max(0.0f, mad((WorkingColorSpace_192[2].z), _1092, mad((WorkingColorSpace_192[2].y), _1091, ((WorkingColorSpace_192[2].x) * _1090))));
              float _1142 = cb0_016x * (((cb0_041y + (cb0_041x * _1114)) * _1114) + cb0_041z);
              float _1143 = cb0_016y * (((cb0_041y + (cb0_041x * _1115)) * _1115) + cb0_041z);
              float _1144 = cb0_016z * (((cb0_041y + (cb0_041x * _1116)) * _1116) + cb0_041z);
              float _1165 = exp2(log2(max(0.0f, (lerp(_1142, cb0_015x, cb0_015w)))) * cb0_042y);
              float _1166 = exp2(log2(max(0.0f, (lerp(_1143, cb0_015y, cb0_015w)))) * cb0_042y);
              float _1167 = exp2(log2(max(0.0f, (lerp(_1144, cb0_015z, cb0_015w)))) * cb0_042y);
              do {
                if (WorkingColorSpace_384 == 0) {
                  float _1174 = mad((WorkingColorSpace_128[0].z), _1167, mad((WorkingColorSpace_128[0].y), _1166, ((WorkingColorSpace_128[0].x) * _1165)));
                  float _1177 = mad((WorkingColorSpace_128[1].z), _1167, mad((WorkingColorSpace_128[1].y), _1166, ((WorkingColorSpace_128[1].x) * _1165)));
                  float _1180 = mad((WorkingColorSpace_128[2].z), _1167, mad((WorkingColorSpace_128[2].y), _1166, ((WorkingColorSpace_128[2].x) * _1165)));
                  _1191 = mad(_41, _1180, mad(_40, _1177, (_1174 * _39)));
                  _1192 = mad(_44, _1180, mad(_43, _1177, (_1174 * _42)));
                  _1193 = mad(_47, _1180, mad(_46, _1177, (_1174 * _45)));
                } else {
                  _1191 = _1165;
                  _1192 = _1166;
                  _1193 = _1167;
                }
                do {
                  if (_1191 < 0.0031306699384003878f) {
                    _1204 = (_1191 * 12.920000076293945f);
                  } else {
                    _1204 = (((pow(_1191, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
                  }
                  do {
                    if (_1192 < 0.0031306699384003878f) {
                      _1215 = (_1192 * 12.920000076293945f);
                    } else {
                      _1215 = (((pow(_1192, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
                    }
                    do {
                      if (_1193 < 0.0031306699384003878f) {
                        _1226 = (_1193 * 12.920000076293945f);
                      } else {
                        _1226 = (((pow(_1193, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
                      }
                      SV_Target.x = (_1204 * 0.9523810148239136f);
                      SV_Target.y = (_1215 * 0.9523810148239136f);
                      SV_Target.z = (_1226 * 0.9523810148239136f);
                      SV_Target.w = 0.0f;
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } while (false);
    }
  }
  bool _98 = (cb0_040w != 0);
  float _100 = 0.9994439482688904f / cb0_037y;
  if (!(!((cb0_037y * 1.0005563497543335f) <= 7000.0f))) {
    _117 = (((((2967800.0f - (_100 * 4607000064.0f)) * _100) + 99.11000061035156f) * _100) + 0.24406300485134125f);
  } else {
    _117 = (((((1901800.0f - (_100 * 2006400000.0f)) * _100) + 247.47999572753906f) * _100) + 0.23703999817371368f);
  }
  float _131 = ((((cb0_037y * 1.2864121856637212e-07f) + 0.00015411825734190643f) * cb0_037y) + 0.8601177334785461f) / ((((cb0_037y * 7.081451371959702e-07f) + 0.0008424202096648514f) * cb0_037y) + 1.0f);
  float _138 = cb0_037y * cb0_037y;
  float _141 = ((((cb0_037y * 4.204816761443908e-08f) + 4.228062607580796e-05f) * cb0_037y) + 0.31739872694015503f) / ((1.0f - (cb0_037y * 2.8974181986995973e-05f)) + (_138 * 1.6145605741257896e-07f));
  float _146 = ((_131 * 2.0f) + 4.0f) - (_141 * 8.0f);
  float _147 = (_131 * 3.0f) / _146;
  float _149 = (_141 * 2.0f) / _146;
  bool _150 = (cb0_037y < 4000.0f);
  float _159 = ((cb0_037y + 1189.6199951171875f) * cb0_037y) + 1412139.875f;
  float _161 = ((-1137581184.0f - (cb0_037y * 1916156.25f)) - (_138 * 1.5317699909210205f)) / (_159 * _159);
  float _168 = (6193636.0f - (cb0_037y * 179.45599365234375f)) + _138;
  float _170 = ((1974715392.0f - (cb0_037y * 705674.0f)) - (_138 * 308.60699462890625f)) / (_168 * _168);
  float _172 = rsqrt(dot(float2(_161, _170), float2(_161, _170)));
  float _173 = cb0_037z * 0.05000000074505806f;
  float _176 = ((_173 * _170) * _172) + _131;
  float _179 = _141 - ((_173 * _161) * _172);
  float _184 = (4.0f - (_179 * 8.0f)) + (_176 * 2.0f);
  float _190 = (((_176 * 3.0f) / _184) - _147) + select(_150, _147, _117);
  float _191 = (((_179 * 2.0f) / _184) - _149) + select(_150, _149, (((_117 * 2.869999885559082f) + -0.2750000059604645f) - ((_117 * _117) * 3.0f)));
  float _192 = select(_98, _190, 0.3127000033855438f);
  float _193 = select(_98, _191, 0.32899999618530273f);
  float _194 = select(_98, 0.3127000033855438f, _190);
  float _195 = select(_98, 0.32899999618530273f, _191);
  float _196 = max(_193, 1.000000013351432e-10f);
  float _197 = _192 / _196;
  float _200 = ((1.0f - _192) - _193) / _196;
  float _201 = max(_195, 1.000000013351432e-10f);
  float _202 = _194 / _201;
  float _205 = ((1.0f - _194) - _195) / _201;
  float _224 = mad(-0.16140000522136688f, _205, ((_202 * 0.8950999975204468f) + 0.266400009393692f)) / mad(-0.16140000522136688f, _200, ((_197 * 0.8950999975204468f) + 0.266400009393692f));
  float _225 = mad(0.03669999912381172f, _205, (1.7135000228881836f - (_202 * 0.7501999735832214f))) / mad(0.03669999912381172f, _200, (1.7135000228881836f - (_197 * 0.7501999735832214f)));
  float _226 = mad(1.0296000242233276f, _205, ((_202 * 0.03889999911189079f) + -0.06849999725818634f)) / mad(1.0296000242233276f, _200, ((_197 * 0.03889999911189079f) + -0.06849999725818634f));
  float _227 = mad(_225, -0.7501999735832214f, 0.0f);
  float _228 = mad(_225, 1.7135000228881836f, 0.0f);
  float _229 = mad(_225, 0.03669999912381172f, -0.0f);
  float _230 = mad(_226, 0.03889999911189079f, 0.0f);
  float _231 = mad(_226, -0.06849999725818634f, 0.0f);
  float _232 = mad(_226, 1.0296000242233276f, 0.0f);
  float _235 = mad(0.1599626988172531f, _230, mad(-0.1470542997121811f, _227, (_224 * 0.883457362651825f)));
  float _238 = mad(0.1599626988172531f, _231, mad(-0.1470542997121811f, _228, (_224 * 0.26293492317199707f)));
  float _241 = mad(0.1599626988172531f, _232, mad(-0.1470542997121811f, _229, (_224 * -0.15930065512657166f)));
  float _244 = mad(0.04929120093584061f, _230, mad(0.5183603167533875f, _227, (_224 * 0.38695648312568665f)));
  float _247 = mad(0.04929120093584061f, _231, mad(0.5183603167533875f, _228, (_224 * 0.11516613513231277f)));
  float _250 = mad(0.04929120093584061f, _232, mad(0.5183603167533875f, _229, (_224 * -0.0697740763425827f)));
  float _253 = mad(0.9684867262840271f, _230, mad(0.04004279896616936f, _227, (_224 * -0.007634039502590895f)));
  float _256 = mad(0.9684867262840271f, _231, mad(0.04004279896616936f, _228, (_224 * -0.0022720457054674625f)));
  float _259 = mad(0.9684867262840271f, _232, mad(0.04004279896616936f, _229, (_224 * 0.0013765322510153055f)));
  float _262 = mad(_241, (WorkingColorSpace_000[2].x), mad(_238, (WorkingColorSpace_000[1].x), (_235 * (WorkingColorSpace_000[0].x))));
  float _265 = mad(_241, (WorkingColorSpace_000[2].y), mad(_238, (WorkingColorSpace_000[1].y), (_235 * (WorkingColorSpace_000[0].y))));
  float _268 = mad(_241, (WorkingColorSpace_000[2].z), mad(_238, (WorkingColorSpace_000[1].z), (_235 * (WorkingColorSpace_000[0].z))));
  float _271 = mad(_250, (WorkingColorSpace_000[2].x), mad(_247, (WorkingColorSpace_000[1].x), (_244 * (WorkingColorSpace_000[0].x))));
  float _274 = mad(_250, (WorkingColorSpace_000[2].y), mad(_247, (WorkingColorSpace_000[1].y), (_244 * (WorkingColorSpace_000[0].y))));
  float _277 = mad(_250, (WorkingColorSpace_000[2].z), mad(_247, (WorkingColorSpace_000[1].z), (_244 * (WorkingColorSpace_000[0].z))));
  float _280 = mad(_259, (WorkingColorSpace_000[2].x), mad(_256, (WorkingColorSpace_000[1].x), (_253 * (WorkingColorSpace_000[0].x))));
  float _283 = mad(_259, (WorkingColorSpace_000[2].y), mad(_256, (WorkingColorSpace_000[1].y), (_253 * (WorkingColorSpace_000[0].y))));
  float _286 = mad(_259, (WorkingColorSpace_000[2].z), mad(_256, (WorkingColorSpace_000[1].z), (_253 * (WorkingColorSpace_000[0].z))));
  _324 = mad(mad((WorkingColorSpace_064[0].z), _286, mad((WorkingColorSpace_064[0].y), _277, (_268 * (WorkingColorSpace_064[0].x)))), _62, mad(mad((WorkingColorSpace_064[0].z), _283, mad((WorkingColorSpace_064[0].y), _274, (_265 * (WorkingColorSpace_064[0].x)))), _61, (mad((WorkingColorSpace_064[0].z), _280, mad((WorkingColorSpace_064[0].y), _271, (_262 * (WorkingColorSpace_064[0].x)))) * _60)));
  _325 = mad(mad((WorkingColorSpace_064[1].z), _286, mad((WorkingColorSpace_064[1].y), _277, (_268 * (WorkingColorSpace_064[1].x)))), _62, mad(mad((WorkingColorSpace_064[1].z), _283, mad((WorkingColorSpace_064[1].y), _274, (_265 * (WorkingColorSpace_064[1].x)))), _61, (mad((WorkingColorSpace_064[1].z), _280, mad((WorkingColorSpace_064[1].y), _271, (_262 * (WorkingColorSpace_064[1].x)))) * _60)));
  _326 = mad(mad((WorkingColorSpace_064[2].z), _286, mad((WorkingColorSpace_064[2].y), _277, (_268 * (WorkingColorSpace_064[2].x)))), _62, mad(mad((WorkingColorSpace_064[2].z), _283, mad((WorkingColorSpace_064[2].y), _274, (_265 * (WorkingColorSpace_064[2].x)))), _61, (mad((WorkingColorSpace_064[2].z), _280, mad((WorkingColorSpace_064[2].y), _271, (_262 * (WorkingColorSpace_064[2].x)))) * _60)));
  float _341 = mad((WorkingColorSpace_128[0].z), _326, mad((WorkingColorSpace_128[0].y), _325, ((WorkingColorSpace_128[0].x) * _324)));
  float _344 = mad((WorkingColorSpace_128[1].z), _326, mad((WorkingColorSpace_128[1].y), _325, ((WorkingColorSpace_128[1].x) * _324)));
  float _347 = mad((WorkingColorSpace_128[2].z), _326, mad((WorkingColorSpace_128[2].y), _325, ((WorkingColorSpace_128[2].x) * _324)));
  float _348 = dot(float3(_341, _344, _347), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _352 = (_341 / _348) + -1.0f;
  float _353 = (_344 / _348) + -1.0f;
  float _354 = (_347 / _348) + -1.0f;
  float _366 = (1.0f - exp2(((_348 * _348) * -4.0f) * cb0_038w)) * (1.0f - exp2(dot(float3(_352, _353, _354), float3(_352, _353, _354)) * -4.0f));
  float _382 = ((mad(-0.06368321925401688f, _347, mad(-0.3292922377586365f, _344, (_341 * 1.3704125881195068f))) - _341) * _366) + _341;
  float _383 = ((mad(-0.010861365124583244f, _347, mad(1.0970927476882935f, _344, (_341 * -0.08343357592821121f))) - _344) * _366) + _344;
  float _384 = ((mad(1.2036951780319214f, _347, mad(-0.09862580895423889f, _344, (_341 * -0.02579331398010254f))) - _347) * _366) + _347;
  float _385 = dot(float3(_382, _383, _384), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _399 = cb0_021w + cb0_026w;
  float _413 = cb0_020w * cb0_025w;
  float _427 = cb0_019w * cb0_024w;
  float _441 = cb0_018w * cb0_023w;
  float _455 = cb0_017w * cb0_022w;
  float _459 = _382 - _385;
  float _460 = _383 - _385;
  float _461 = _384 - _385;
  float _518 = saturate(_385 / cb0_037w);
  float _522 = (_518 * _518) * (3.0f - (_518 * 2.0f));
  float _523 = 1.0f - _522;
  float _532 = cb0_021w + cb0_036w;
  float _541 = cb0_020w * cb0_035w;
  float _550 = cb0_019w * cb0_034w;
  float _559 = cb0_018w * cb0_033w;
  float _568 = cb0_017w * cb0_032w;
  float _631 = saturate((_385 - cb0_038x) / (cb0_038y - cb0_038x));
  float _635 = (_631 * _631) * (3.0f - (_631 * 2.0f));
  float _644 = cb0_021w + cb0_031w;
  float _653 = cb0_020w * cb0_030w;
  float _662 = cb0_019w * cb0_029w;
  float _671 = cb0_018w * cb0_028w;
  float _680 = cb0_017w * cb0_027w;
  float _738 = _522 - _635;
  float _749 = ((_635 * (((cb0_021x + cb0_036x) + _532) + (((cb0_020x * cb0_035x) * _541) * exp2(log2(exp2(((cb0_018x * cb0_033x) * _559) * log2(max(0.0f, ((((cb0_017x * cb0_032x) * _568) * _459) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019x * cb0_034x) * _550)))))) + (_523 * (((cb0_021x + cb0_026x) + _399) + (((cb0_020x * cb0_025x) * _413) * exp2(log2(exp2(((cb0_018x * cb0_023x) * _441) * log2(max(0.0f, ((((cb0_017x * cb0_022x) * _455) * _459) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019x * cb0_024x) * _427))))))) + ((((cb0_021x + cb0_031x) + _644) + (((cb0_020x * cb0_030x) * _653) * exp2(log2(exp2(((cb0_018x * cb0_028x) * _671) * log2(max(0.0f, ((((cb0_017x * cb0_027x) * _680) * _459) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019x * cb0_029x) * _662))))) * _738);
  float _751 = ((_635 * (((cb0_021y + cb0_036y) + _532) + (((cb0_020y * cb0_035y) * _541) * exp2(log2(exp2(((cb0_018y * cb0_033y) * _559) * log2(max(0.0f, ((((cb0_017y * cb0_032y) * _568) * _460) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019y * cb0_034y) * _550)))))) + (_523 * (((cb0_021y + cb0_026y) + _399) + (((cb0_020y * cb0_025y) * _413) * exp2(log2(exp2(((cb0_018y * cb0_023y) * _441) * log2(max(0.0f, ((((cb0_017y * cb0_022y) * _455) * _460) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019y * cb0_024y) * _427))))))) + ((((cb0_021y + cb0_031y) + _644) + (((cb0_020y * cb0_030y) * _653) * exp2(log2(exp2(((cb0_018y * cb0_028y) * _671) * log2(max(0.0f, ((((cb0_017y * cb0_027y) * _680) * _460) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019y * cb0_029y) * _662))))) * _738);
  float _753 = ((_635 * (((cb0_021z + cb0_036z) + _532) + (((cb0_020z * cb0_035z) * _541) * exp2(log2(exp2(((cb0_018z * cb0_033z) * _559) * log2(max(0.0f, ((((cb0_017z * cb0_032z) * _568) * _461) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019z * cb0_034z) * _550)))))) + (_523 * (((cb0_021z + cb0_026z) + _399) + (((cb0_020z * cb0_025z) * _413) * exp2(log2(exp2(((cb0_018z * cb0_023z) * _441) * log2(max(0.0f, ((((cb0_017z * cb0_022z) * _455) * _461) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019z * cb0_024z) * _427))))))) + ((((cb0_021z + cb0_031z) + _644) + (((cb0_020z * cb0_030z) * _653) * exp2(log2(exp2(((cb0_018z * cb0_028z) * _671) * log2(max(0.0f, ((((cb0_017z * cb0_027z) * _680) * _461) + _385)) * 5.55555534362793f)) * 0.18000000715255737f) * (1.0f / ((cb0_019z * cb0_029z) * _662))))) * _738);
  float _768 = ((mad(0.061360642313957214f, _753, mad(-4.540197551250458e-09f, _751, (_749 * 0.9386394023895264f))) - _749) * cb0_038z) + _749;
  float _769 = ((mad(0.169205904006958f, _753, mad(0.8307942152023315f, _751, (_749 * 6.775371730327606e-08f))) - _751) * cb0_038z) + _751;
  float _770 = (mad(-2.3283064365386963e-10f, _751, (_749 * -9.313225746154785e-10f)) * cb0_038z) + _753;
  float _773 = mad(0.16386905312538147f, _770, mad(0.14067868888378143f, _769, (_768 * 0.6954522132873535f)));
  float _776 = mad(0.0955343246459961f, _770, mad(0.8596711158752441f, _769, (_768 * 0.044794581830501556f)));
  float _779 = mad(1.0015007257461548f, _770, mad(0.004025210160762072f, _769, (_768 * -0.005525882821530104f)));
  float _783 = max(max(_773, _776), _779);
  float _788 = (max(_783, 1.000000013351432e-10f) - max(min(min(_773, _776), _779), 1.000000013351432e-10f)) / max(_783, 0.009999999776482582f);
  float _801 = ((_776 + _773) + _779) + (sqrt((((_779 - _776) * _779) + ((_776 - _773) * _776)) + ((_773 - _779) * _773)) * 1.75f);
  float _802 = _801 * 0.3333333432674408f;
  float _803 = _788 + -0.4000000059604645f;
  float _804 = _803 * 5.0f;
  float _808 = max((1.0f - abs(_803 * 2.5f)), 0.0f);
  float _819 = ((float((int)(((int)(uint)((bool)(_804 > 0.0f))) - ((int)(uint)((bool)(_804 < 0.0f))))) * (1.0f - (_808 * _808))) + 1.0f) * 0.02500000037252903f;
  if (!(_802 <= 0.0533333346247673f)) {
    if (!(_802 >= 0.1599999964237213f)) {
      _828 = (((0.23999999463558197f / _801) + -0.5f) * _819);
    } else {
      _828 = 0.0f;
    }
  } else {
    _828 = _819;
  }
  float _829 = _828 + 1.0f;
  float _830 = _829 * _773;
  float _831 = _829 * _776;
  float _832 = _829 * _779;
  if (!((bool)(_830 == _831) && (bool)(_831 == _832))) {
    float _839 = ((_830 * 2.0f) - _831) - _832;
    float _842 = ((_776 - _779) * 1.7320507764816284f) * _829;
    float _844 = atan(_842 / _839);
    bool _847 = (_839 < 0.0f);
    bool _848 = (_839 == 0.0f);
    bool _849 = (_842 >= 0.0f);
    bool _850 = (_842 < 0.0f);
    _861 = select((_849 && _848), 90.0f, select((_850 && _848), -90.0f, (select((_850 && _847), (_844 + -3.1415927410125732f), select((_849 && _847), (_844 + 3.1415927410125732f), _844)) * 57.2957763671875f)));
  } else {
    _861 = 0.0f;
  }
  float _866 = min(max(select((_861 < 0.0f), (_861 + 360.0f), _861), 0.0f), 360.0f);
  if (_866 < -180.0f) {
    _875 = (_866 + 360.0f);
  } else {
    if (_866 > 180.0f) {
      _875 = (_866 + -360.0f);
    } else {
      _875 = _866;
    }
  }
  float _879 = saturate(1.0f - abs(_875 * 0.014814814552664757f));
  float _883 = (_879 * _879) * (3.0f - (_879 * 2.0f));
  float _889 = ((_883 * _883) * ((_788 * 0.18000000715255737f) * (0.029999999329447746f - _830))) + _830;
  float _899 = max(0.0f, mad(-0.21492856740951538f, _832, mad(-0.2365107536315918f, _831, (_889 * 1.4514392614364624f))));
  float _900 = max(0.0f, mad(-0.09967592358589172f, _832, mad(1.17622971534729f, _831, (_889 * -0.07655377686023712f))));
  float _901 = max(0.0f, mad(0.9977163076400757f, _832, mad(-0.006032449658960104f, _831, (_889 * 0.008316148072481155f))));
  float _902 = dot(float3(_899, _900, _901), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _917 = (cb0_040x + 1.0f) - cb0_039z;
  float _919 = cb0_040y + 1.0f;
  float _921 = _919 - cb0_039w;
  if (cb0_039z > 0.800000011920929f) {
    _939 = (((0.8199999928474426f - cb0_039z) / cb0_039y) + -0.7447274923324585f);
  } else {
    float _930 = (cb0_040x + 0.18000000715255737f) / _917;
    _939 = (-0.7447274923324585f - ((log2(_930 / (2.0f - _930)) * 0.3465735912322998f) * (_917 / cb0_039y)));
  }
  float _942 = ((1.0f - cb0_039z) / cb0_039y) - _939;
  float _944 = (cb0_039w / cb0_039y) - _942;
  float _948 = log2(lerp(_902, _899, 0.9599999785423279f)) * 0.3010300099849701f;
  float _949 = log2(lerp(_902, _900, 0.9599999785423279f)) * 0.3010300099849701f;
  float _950 = log2(lerp(_902, _901, 0.9599999785423279f)) * 0.3010300099849701f;
  float _954 = cb0_039y * (_948 + _942);
  float _955 = cb0_039y * (_949 + _942);
  float _956 = cb0_039y * (_950 + _942);
  float _957 = _917 * 2.0f;
  float _959 = (cb0_039y * -2.0f) / _917;
  float _960 = _948 - _939;
  float _961 = _949 - _939;
  float _962 = _950 - _939;
  float _981 = _921 * 2.0f;
  float _983 = (cb0_039y * 2.0f) / _921;
  float _1008 = select((_948 < _939), ((_957 / (exp2((_960 * 1.4426950216293335f) * _959) + 1.0f)) - cb0_040x), _954);
  float _1009 = select((_949 < _939), ((_957 / (exp2((_961 * 1.4426950216293335f) * _959) + 1.0f)) - cb0_040x), _955);
  float _1010 = select((_950 < _939), ((_957 / (exp2((_962 * 1.4426950216293335f) * _959) + 1.0f)) - cb0_040x), _956);
  float _1017 = _944 - _939;
  float _1021 = saturate(_960 / _1017);
  float _1022 = saturate(_961 / _1017);
  float _1023 = saturate(_962 / _1017);
  bool _1024 = (_944 < _939);
  float _1028 = select(_1024, (1.0f - _1021), _1021);
  float _1029 = select(_1024, (1.0f - _1022), _1022);
  float _1030 = select(_1024, (1.0f - _1023), _1023);
  float _1049 = (((_1028 * _1028) * (select((_948 > _944), (_919 - (_981 / (exp2(((_948 - _944) * 1.4426950216293335f) * _983) + 1.0f))), _954) - _1008)) * (3.0f - (_1028 * 2.0f))) + _1008;
  float _1050 = (((_1029 * _1029) * (select((_949 > _944), (_919 - (_981 / (exp2(((_949 - _944) * 1.4426950216293335f) * _983) + 1.0f))), _955) - _1009)) * (3.0f - (_1029 * 2.0f))) + _1009;
  float _1051 = (((_1030 * _1030) * (select((_950 > _944), (_919 - (_981 / (exp2(((_950 - _944) * 1.4426950216293335f) * _983) + 1.0f))), _956) - _1010)) * (3.0f - (_1030 * 2.0f))) + _1010;
  float _1052 = dot(float3(_1049, _1050, _1051), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _1072 = (cb0_039x * (max(0.0f, (lerp(_1052, _1049, 0.9300000071525574f))) - _768)) + _768;
  float _1073 = (cb0_039x * (max(0.0f, (lerp(_1052, _1050, 0.9300000071525574f))) - _769)) + _769;
  float _1074 = (cb0_039x * (max(0.0f, (lerp(_1052, _1051, 0.9300000071525574f))) - _770)) + _770;
  float _1090 = ((mad(-0.06537103652954102f, _1074, mad(1.451815478503704e-06f, _1073, (_1072 * 1.065374732017517f))) - _1072) * cb0_038z) + _1072;
  float _1091 = ((mad(-0.20366770029067993f, _1074, mad(1.2036634683609009f, _1073, (_1072 * -2.57161445915699e-07f))) - _1073) * cb0_038z) + _1073;
  float _1092 = ((mad(0.9999996423721313f, _1074, mad(2.0954757928848267e-08f, _1073, (_1072 * 1.862645149230957e-08f))) - _1074) * cb0_038z) + _1074;

  SetTonemappedAP1(_1090, _1091, _1092);

  float _1114 = max(0.0f, mad((WorkingColorSpace_192[0].z), _1092, mad((WorkingColorSpace_192[0].y), _1091, ((WorkingColorSpace_192[0].x) * _1090))));
  float _1115 = max(0.0f, mad((WorkingColorSpace_192[1].z), _1092, mad((WorkingColorSpace_192[1].y), _1091, ((WorkingColorSpace_192[1].x) * _1090))));
  float _1116 = max(0.0f, mad((WorkingColorSpace_192[2].z), _1092, mad((WorkingColorSpace_192[2].y), _1091, ((WorkingColorSpace_192[2].x) * _1090))));
  float _1142 = cb0_016x * (((cb0_041y + (cb0_041x * _1114)) * _1114) + cb0_041z);
  float _1143 = cb0_016y * (((cb0_041y + (cb0_041x * _1115)) * _1115) + cb0_041z);
  float _1144 = cb0_016z * (((cb0_041y + (cb0_041x * _1116)) * _1116) + cb0_041z);
  float _1165 = exp2(log2(max(0.0f, (lerp(_1142, cb0_015x, cb0_015w)))) * cb0_042y);
  float _1166 = exp2(log2(max(0.0f, (lerp(_1143, cb0_015y, cb0_015w)))) * cb0_042y);
  float _1167 = exp2(log2(max(0.0f, (lerp(_1144, cb0_015z, cb0_015w)))) * cb0_042y);

  if (set_colors && RENODX_TONE_MAP_TYPE != 0) {
    return GenerateOutput(float3(_1165, _1166, _1167));
  }

  if (WorkingColorSpace_384 == 0) {
    float _1174 = mad((WorkingColorSpace_128[0].z), _1167, mad((WorkingColorSpace_128[0].y), _1166, ((WorkingColorSpace_128[0].x) * _1165)));
    float _1177 = mad((WorkingColorSpace_128[1].z), _1167, mad((WorkingColorSpace_128[1].y), _1166, ((WorkingColorSpace_128[1].x) * _1165)));
    float _1180 = mad((WorkingColorSpace_128[2].z), _1167, mad((WorkingColorSpace_128[2].y), _1166, ((WorkingColorSpace_128[2].x) * _1165)));
    _1191 = mad(_41, _1180, mad(_40, _1177, (_1174 * _39)));
    _1192 = mad(_44, _1180, mad(_43, _1177, (_1174 * _42)));
    _1193 = mad(_47, _1180, mad(_46, _1177, (_1174 * _45)));
  } else {
    _1191 = _1165;
    _1192 = _1166;
    _1193 = _1167;
  }
  if (_1191 < 0.0031306699384003878f) {
    _1204 = (_1191 * 12.920000076293945f);
  } else {
    _1204 = (((pow(_1191, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
  }
  if (_1192 < 0.0031306699384003878f) {
    _1215 = (_1192 * 12.920000076293945f);
  } else {
    _1215 = (((pow(_1192, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
  }
  if (_1193 < 0.0031306699384003878f) {
    _1226 = (_1193 * 12.920000076293945f);
  } else {
    _1226 = (((pow(_1193, 0.4166666567325592f)) * 1.0549999475479126f) + -0.054999999701976776f);
  }
  SV_Target.x = (_1204 * 0.9523810148239136f);
  SV_Target.y = (_1215 * 0.9523810148239136f);
  SV_Target.z = (_1226 * 0.9523810148239136f);
  SV_Target.w = 0.0f;
  return SV_Target;
}
