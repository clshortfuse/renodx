// Generic UE 5.3 - HDR - No Grading
#include "../../common.hlsl"

// Ninja Gaiden Black
// Mafia: The Old Country

cbuffer $Globals : register(b0) {
  uint OutputDevice : packoffset(c000.x);
  uint OutputGamut : packoffset(c000.y);
  float4 ACESMinMaxData : packoffset(c001.x);
  float4 ACESMidData : packoffset(c002.x);
  float4 ACESCoefsLow_0 : packoffset(c003.x);
  float4 ACESCoefsHigh_0 : packoffset(c004.x);
  float ACESCoefsLow_4 : packoffset(c005.x);
  float ACESCoefsHigh_4 : packoffset(c005.y);
};

float4 main(
    noperspective float2 TEXCOORD: TEXCOORD,
    noperspective float4 SV_Position: SV_Position,
    nointerpolation uint SV_RenderTargetArrayIndex: SV_RenderTargetArrayIndex) : SV_Target {
  float4 SV_Target;
  float _6[6];
  float _7[6];
  float _10 = (TEXCOORD.x + -0.015625f) * 1.0322580337524414f;
  float _11 = (TEXCOORD.y + -0.015625f) * 1.0322580337524414f;
  float _13 = float((uint)(int)(SV_RenderTargetArrayIndex)) * 0.032258063554763794f;
  float _33;
  float _34;
  float _35;
  float _36;
  float _37;
  float _38;
  float _39;
  float _40;
  float _41;
  float _164;
  float _179;
  float _194;
  float _202;
  float _203;
  float _204;
  float _262;
  float _295;
  float _309;
  float _348;
  float _458;
  float _532;
  float _606;
  float _687;
  float _688;
  float _689;
  float _782;
  float _797;
  float _812;
  float _820;
  float _821;
  float _822;
  float _880;
  float _913;
  float _927;
  float _966;
  float _1076;
  float _1150;
  float _1224;
  float _1305;
  float _1306;
  float _1307;
  float _1348;
  float _1349;
  float _1350;
  if (!(OutputGamut == 1)) {
    if (!(OutputGamut == 2)) {
      if (!(OutputGamut == 3)) {
        bool _22 = (OutputGamut == 4);
        _33 = select(_22, 1.0f, 1.705051064491272f);
        _34 = select(_22, 0.0f, -0.6217921376228333f);
        _35 = select(_22, 0.0f, -0.0832589864730835f);
        _36 = select(_22, 0.0f, -0.13025647401809692f);
        _37 = select(_22, 1.0f, 1.140804648399353f);
        _38 = select(_22, 0.0f, -0.010548308491706848f);
        _39 = select(_22, 0.0f, -0.024003351107239723f);
        _40 = select(_22, 0.0f, -0.1289689838886261f);
        _41 = select(_22, 1.0f, 1.1529725790023804f);
      } else {
        _33 = 0.6954522132873535f;
        _34 = 0.14067870378494263f;
        _35 = 0.16386906802654266f;
        _36 = 0.044794563204050064f;
        _37 = 0.8596711158752441f;
        _38 = 0.0955343171954155f;
        _39 = -0.005525882821530104f;
        _40 = 0.004025210160762072f;
        _41 = 1.0015007257461548f;
      }
    } else {
      _33 = 1.0258246660232544f;
      _34 = -0.020053181797266006f;
      _35 = -0.005771636962890625f;
      _36 = -0.002234415616840124f;
      _37 = 1.0045864582061768f;
      _38 = -0.002352118492126465f;
      _39 = -0.005013350863009691f;
      _40 = -0.025290070101618767f;
      _41 = 1.0303035974502563f;
    }
  } else {
    _33 = 1.3792141675949097f;
    _34 = -0.30886411666870117f;
    _35 = -0.0703500509262085f;
    _36 = -0.06933490186929703f;
    _37 = 1.08229660987854f;
    _38 = -0.012961871922016144f;
    _39 = -0.0021590073592960835f;
    _40 = -0.0454593189060688f;
    _41 = 1.0476183891296387f;
  }
  float _48 = (pow(_10, 0.012683313339948654f));
  float _49 = (pow(_11, 0.012683313339948654f));
  float _50 = (pow(_13, 0.012683313339948654f));
  float _72 = exp2(log2(max(0.0f, (_48 + -0.8359375f)) / (18.8515625f - (_48 * 18.6875f))) * 6.277394771575928f);
  float _75 = exp2(log2(max(0.0f, (_49 + -0.8359375f)) / (18.8515625f - (_49 * 18.6875f))) * 6.277394771575928f) * 10000.0f;
  float _76 = exp2(log2(max(0.0f, (_50 + -0.8359375f)) / (18.8515625f - (_50 * 18.6875f))) * 6.277394771575928f) * 10000.0f;

  if (RENODX_TONE_MAP_TYPE != 0.f) {
    renodx::draw::Config config = GetOutputConfig(OutputDevice);

    float3 color = float3(_72 * 10000.f, _75, _76);

    if (CUSTOM_LUT_OPTIMIZATION == 0.f) {
      config.gamma_correction = 0.f;
    } else {
      color = renodx::draw::ToneMapPass(color, config);
    }

    color = renodx::draw::RenderIntermediatePass(color, config);
    color *= 1.f / 1.05f;
    return float4(color, 1.f);
  }

  _6[0] = ACESCoefsLow_0.x;
  _6[1] = ACESCoefsLow_0.y;
  _6[2] = ACESCoefsLow_0.z;
  _6[3] = ACESCoefsLow_0.w;
  _6[4] = ACESCoefsLow_4;
  _6[5] = ACESCoefsLow_4;
  _7[0] = ACESCoefsHigh_0.x;
  _7[1] = ACESCoefsHigh_0.y;
  _7[2] = ACESCoefsHigh_0.z;
  _7[3] = ACESCoefsHigh_0.w;
  _7[4] = ACESCoefsHigh_4;
  _7[5] = ACESCoefsHigh_4;
  if ((bool)(OutputDevice == 3) || (bool)(OutputDevice == 5)) {
    float _117 = mad(0.177378311753273f, _76, mad(0.38298869132995605f, _75, (_72 * 4396.32958984375f)));
    float _120 = mad(0.09678413718938828f, _76, mad(0.8134394288063049f, _75, (_72 * 897.7644653320312f)));
    float _123 = mad(0.8709122538566589f, _76, mad(0.11154655367136002f, _75, (_72 * 175.4116973876953f)));
    float _126 = mad(-0.21492856740951538f, _123, mad(-0.2365107536315918f, _120, (_117 * 1.4514392614364624f)));
    float _129 = mad(-0.09967592358589172f, _123, mad(1.17622971534729f, _120, (_117 * -0.07655377686023712f)));
    float _132 = mad(0.9977163076400757f, _123, mad(-0.006032449658960104f, _120, (_117 * 0.008316148072481155f)));
    float _134 = max(_126, max(_129, _132));
    do {
      if (!(_134 < 1.000000013351432e-10f)) {
        if (!(((bool)((bool)(_117 < 0.0f) || (bool)(_120 < 0.0f))) || (bool)(_123 < 0.0f))) {
          float _144 = abs(_134);
          float _145 = (_134 - _126) / _144;
          float _147 = (_134 - _129) / _144;
          float _149 = (_134 - _132) / _144;
          do {
            if (!(_145 < 0.8149999976158142f)) {
              float _152 = _145 + -0.8149999976158142f;
              _164 = ((_152 / exp2(log2(exp2(log2(_152 * 3.0552830696105957f) * 1.2000000476837158f) + 1.0f) * 0.8333333134651184f)) + 0.8149999976158142f);
            } else {
              _164 = _145;
            }
            do {
              if (!(_147 < 0.8029999732971191f)) {
                float _167 = _147 + -0.8029999732971191f;
                _179 = ((_167 / exp2(log2(exp2(log2(_167 * 3.4972610473632812f) * 1.2000000476837158f) + 1.0f) * 0.8333333134651184f)) + 0.8029999732971191f);
              } else {
                _179 = _147;
              }
              do {
                if (!(_149 < 0.8799999952316284f)) {
                  float _182 = _149 + -0.8799999952316284f;
                  _194 = ((_182 / exp2(log2(exp2(log2(_182 * 6.810994625091553f) * 1.2000000476837158f) + 1.0f) * 0.8333333134651184f)) + 0.8799999952316284f);
                } else {
                  _194 = _149;
                }
                _202 = (_134 - (_144 * _164));
                _203 = (_134 - (_144 * _179));
                _204 = (_134 - (_144 * _194));
              } while (false);
            } while (false);
          } while (false);
        } else {
          _202 = _126;
          _203 = _129;
          _204 = _132;
        }
      } else {
        _202 = _126;
        _203 = _129;
        _204 = _132;
      }
      float _207 = mad(0.16386906802654266f, _204, mad(0.14067870378494263f, _203, (_202 * 0.6954522132873535f)));
      float _210 = mad(0.0955343171954155f, _204, mad(0.8596711158752441f, _203, (_202 * 0.044794563204050064f)));
      float _213 = mad(1.0015007257461548f, _204, mad(0.004025210160762072f, _203, (_202 * -0.005525882821530104f)));
      float _217 = max(max(_207, _210), _213);
      float _222 = (max(_217, 1.000000013351432e-10f) - max(min(min(_207, _210), _213), 1.000000013351432e-10f)) / max(_217, 0.009999999776482582f);
      float _235 = ((_210 + _207) + _213) + (sqrt((((_213 - _210) * _213) + ((_210 - _207) * _210)) + ((_207 - _213) * _207)) * 1.75f);
      float _236 = _235 * 0.3333333432674408f;
      float _237 = _222 + -0.4000000059604645f;
      float _238 = _237 * 5.0f;
      float _242 = max((1.0f - abs(_237 * 2.5f)), 0.0f);
      float _253 = ((float((int)(((int)(uint)((bool)(_238 > 0.0f))) - ((int)(uint)((bool)(_238 < 0.0f))))) * (1.0f - (_242 * _242))) + 1.0f) * 0.02500000037252903f;
      do {
        if (!(_236 <= 0.0533333346247673f)) {
          if (!(_236 >= 0.1599999964237213f)) {
            _262 = (((0.23999999463558197f / _235) + -0.5f) * _253);
          } else {
            _262 = 0.0f;
          }
        } else {
          _262 = _253;
        }
        float _263 = _262 + 1.0f;
        float _264 = _263 * _207;
        float _265 = _263 * _210;
        float _266 = _263 * _213;
        do {
          if (!((bool)(_264 == _265) && (bool)(_265 == _266))) {
            float _273 = ((_264 * 2.0f) - _265) - _266;
            float _276 = ((_210 - _213) * 1.7320507764816284f) * _263;
            float _278 = atan(_276 / _273);
            bool _281 = (_273 < 0.0f);
            bool _282 = (_273 == 0.0f);
            bool _283 = (_276 >= 0.0f);
            bool _284 = (_276 < 0.0f);
            _295 = select((_283 && _282), 90.0f, select((_284 && _282), -90.0f, (select((_284 && _281), (_278 + -3.1415927410125732f), select((_283 && _281), (_278 + 3.1415927410125732f), _278)) * 57.2957763671875f)));
          } else {
            _295 = 0.0f;
          }
          float _300 = min(max(select((_295 < 0.0f), (_295 + 360.0f), _295), 0.0f), 360.0f);
          do {
            if (_300 < -180.0f) {
              _309 = (_300 + 360.0f);
            } else {
              if (_300 > 180.0f) {
                _309 = (_300 + -360.0f);
              } else {
                _309 = _300;
              }
            }
            do {
              if ((bool)(_309 > -67.5f) && (bool)(_309 < 67.5f)) {
                float _315 = (_309 + 67.5f) * 0.029629629105329514f;
                int _316 = int(_315);
                float _318 = _315 - float((int)(_316));
                float _319 = _318 * _318;
                float _320 = _319 * _318;
                if (_316 == 3) {
                  _348 = (((0.1666666716337204f - (_318 * 0.5f)) + (_319 * 0.5f)) - (_320 * 0.1666666716337204f));
                } else {
                  if (_316 == 2) {
                    _348 = ((0.6666666865348816f - _319) + (_320 * 0.5f));
                  } else {
                    if (_316 == 1) {
                      _348 = (((_320 * -0.5f) + 0.1666666716337204f) + ((_319 + _318) * 0.5f));
                    } else {
                      _348 = select((_316 == 0), (_320 * 0.1666666716337204f), 0.0f);
                    }
                  }
                }
              } else {
                _348 = 0.0f;
              }
              float _357 = min(max(((((_222 * 0.27000001072883606f) * (0.029999999329447746f - _264)) * _348) + _264), 0.0f), 65535.0f);
              float _358 = min(max(_265, 0.0f), 65535.0f);
              float _359 = min(max(_266, 0.0f), 65535.0f);
              float _372 = min(max(mad(-0.21492856740951538f, _359, mad(-0.2365107536315918f, _358, (_357 * 1.4514392614364624f))), 0.0f), 65504.0f);
              float _373 = min(max(mad(-0.09967592358589172f, _359, mad(1.17622971534729f, _358, (_357 * -0.07655377686023712f))), 0.0f), 65504.0f);
              float _374 = min(max(mad(0.9977163076400757f, _359, mad(-0.006032449658960104f, _358, (_357 * 0.008316148072481155f))), 0.0f), 65504.0f);
              float _375 = dot(float3(_372, _373, _374), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
              float _386 = log2(max((lerp(_375, _372, 0.9599999785423279f)), 1.000000013351432e-10f));
              float _387 = _386 * 0.3010300099849701f;
              float _388 = log2(ACESMinMaxData.x);
              float _389 = _388 * 0.3010300099849701f;
              do {
                if (!(!(_387 <= _389))) {
                  _458 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                } else {
                  float _396 = log2(ACESMidData.x);
                  float _397 = _396 * 0.3010300099849701f;
                  if ((bool)(_387 > _389) && (bool)(_387 < _397)) {
                    float _405 = ((_386 - _388) * 0.9030900001525879f) / ((_396 - _388) * 0.3010300099849701f);
                    int _406 = int(_405);
                    float _408 = _405 - float((int)(_406));
                    float _410 = _6[_406];
                    float _413 = _6[(_406 + 1)];
                    float _418 = _410 * 0.5f;
                    _458 = dot(float3((_408 * _408), _408, 1.0f), float3(mad((_6[(_406 + 2)]), 0.5f, mad(_413, -1.0f, _418)), (_413 - _410), mad(_413, 0.5f, _418)));
                  } else {
                    do {
                      if (!(!(_387 >= _397))) {
                        float _427 = log2(ACESMinMaxData.z);
                        if (_387 < (_427 * 0.3010300099849701f)) {
                          float _435 = ((_386 - _396) * 0.9030900001525879f) / ((_427 - _396) * 0.3010300099849701f);
                          int _436 = int(_435);
                          float _438 = _435 - float((int)(_436));
                          float _440 = _7[_436];
                          float _443 = _7[(_436 + 1)];
                          float _448 = _440 * 0.5f;
                          _458 = dot(float3((_438 * _438), _438, 1.0f), float3(mad((_7[(_436 + 2)]), 0.5f, mad(_443, -1.0f, _448)), (_443 - _440), mad(_443, 0.5f, _448)));
                          break;
                        }
                      }
                      _458 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                    } while (false);
                  }
                }
                float _462 = log2(max((lerp(_375, _373, 0.9599999785423279f)), 1.000000013351432e-10f));
                float _463 = _462 * 0.3010300099849701f;
                do {
                  if (!(!(_463 <= _389))) {
                    _532 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                  } else {
                    float _470 = log2(ACESMidData.x);
                    float _471 = _470 * 0.3010300099849701f;
                    if ((bool)(_463 > _389) && (bool)(_463 < _471)) {
                      float _479 = ((_462 - _388) * 0.9030900001525879f) / ((_470 - _388) * 0.3010300099849701f);
                      int _480 = int(_479);
                      float _482 = _479 - float((int)(_480));
                      float _484 = _6[_480];
                      float _487 = _6[(_480 + 1)];
                      float _492 = _484 * 0.5f;
                      _532 = dot(float3((_482 * _482), _482, 1.0f), float3(mad((_6[(_480 + 2)]), 0.5f, mad(_487, -1.0f, _492)), (_487 - _484), mad(_487, 0.5f, _492)));
                    } else {
                      do {
                        if (!(!(_463 >= _471))) {
                          float _501 = log2(ACESMinMaxData.z);
                          if (_463 < (_501 * 0.3010300099849701f)) {
                            float _509 = ((_462 - _470) * 0.9030900001525879f) / ((_501 - _470) * 0.3010300099849701f);
                            int _510 = int(_509);
                            float _512 = _509 - float((int)(_510));
                            float _514 = _7[_510];
                            float _517 = _7[(_510 + 1)];
                            float _522 = _514 * 0.5f;
                            _532 = dot(float3((_512 * _512), _512, 1.0f), float3(mad((_7[(_510 + 2)]), 0.5f, mad(_517, -1.0f, _522)), (_517 - _514), mad(_517, 0.5f, _522)));
                            break;
                          }
                        }
                        _532 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                      } while (false);
                    }
                  }
                  float _536 = log2(max((lerp(_375, _374, 0.9599999785423279f)), 1.000000013351432e-10f));
                  float _537 = _536 * 0.3010300099849701f;
                  do {
                    if (!(!(_537 <= _389))) {
                      _606 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                    } else {
                      float _544 = log2(ACESMidData.x);
                      float _545 = _544 * 0.3010300099849701f;
                      if ((bool)(_537 > _389) && (bool)(_537 < _545)) {
                        float _553 = ((_536 - _388) * 0.9030900001525879f) / ((_544 - _388) * 0.3010300099849701f);
                        int _554 = int(_553);
                        float _556 = _553 - float((int)(_554));
                        float _558 = _6[_554];
                        float _561 = _6[(_554 + 1)];
                        float _566 = _558 * 0.5f;
                        _606 = dot(float3((_556 * _556), _556, 1.0f), float3(mad((_6[(_554 + 2)]), 0.5f, mad(_561, -1.0f, _566)), (_561 - _558), mad(_561, 0.5f, _566)));
                      } else {
                        do {
                          if (!(!(_537 >= _545))) {
                            float _575 = log2(ACESMinMaxData.z);
                            if (_537 < (_575 * 0.3010300099849701f)) {
                              float _583 = ((_536 - _544) * 0.9030900001525879f) / ((_575 - _544) * 0.3010300099849701f);
                              int _584 = int(_583);
                              float _586 = _583 - float((int)(_584));
                              float _588 = _7[_584];
                              float _591 = _7[(_584 + 1)];
                              float _596 = _588 * 0.5f;
                              _606 = dot(float3((_586 * _586), _586, 1.0f), float3(mad((_7[(_584 + 2)]), 0.5f, mad(_591, -1.0f, _596)), (_591 - _588), mad(_591, 0.5f, _596)));
                              break;
                            }
                          }
                          _606 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                        } while (false);
                      }
                    }
                    float _610 = ACESMinMaxData.w - ACESMinMaxData.y;
                    float _611 = (exp2(_458 * 3.321928024291992f) - ACESMinMaxData.y) / _610;
                    float _613 = (exp2(_532 * 3.321928024291992f) - ACESMinMaxData.y) / _610;
                    float _615 = (exp2(_606 * 3.321928024291992f) - ACESMinMaxData.y) / _610;
                    float _618 = mad(0.15618768334388733f, _615, mad(0.13400420546531677f, _613, (_611 * 0.6624541878700256f)));
                    float _621 = mad(0.053689517080783844f, _615, mad(0.6740817427635193f, _613, (_611 * 0.2722287178039551f)));
                    float _624 = mad(1.0103391408920288f, _615, mad(0.00406073359772563f, _613, (_611 * -0.005574649665504694f)));
                    float _637 = min(max(mad(-0.23642469942569733f, _624, mad(-0.32480329275131226f, _621, (_618 * 1.6410233974456787f))), 0.0f), 1.0f);
                    float _638 = min(max(mad(0.016756348311901093f, _624, mad(1.6153316497802734f, _621, (_618 * -0.663662850856781f))), 0.0f), 1.0f);
                    float _639 = min(max(mad(0.9883948564529419f, _624, mad(-0.008284442126750946f, _621, (_618 * 0.011721894145011902f))), 0.0f), 1.0f);
                    float _642 = mad(0.15618768334388733f, _639, mad(0.13400420546531677f, _638, (_637 * 0.6624541878700256f)));
                    float _645 = mad(0.053689517080783844f, _639, mad(0.6740817427635193f, _638, (_637 * 0.2722287178039551f)));
                    float _648 = mad(1.0103391408920288f, _639, mad(0.00406073359772563f, _638, (_637 * -0.005574649665504694f)));
                    float _670 = min(max((min(max(mad(-0.23642469942569733f, _648, mad(-0.32480329275131226f, _645, (_642 * 1.6410233974456787f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                    float _671 = min(max((min(max(mad(0.016756348311901093f, _648, mad(1.6153316497802734f, _645, (_642 * -0.663662850856781f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                    float _672 = min(max((min(max(mad(0.9883948564529419f, _648, mad(-0.008284442126750946f, _645, (_642 * 0.011721894145011902f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                    do {
                      if (!(OutputDevice == 5)) {
                        _687 = mad(_35, _672, mad(_34, _671, (_670 * _33)));
                        _688 = mad(_38, _672, mad(_37, _671, (_670 * _36)));
                        _689 = mad(_41, _672, mad(_40, _671, (_670 * _39)));
                      } else {
                        _687 = _670;
                        _688 = _671;
                        _689 = _672;
                      }
                      float _699 = exp2(log2(_687 * 9.999999747378752e-05f) * 0.1593017578125f);
                      float _700 = exp2(log2(_688 * 9.999999747378752e-05f) * 0.1593017578125f);
                      float _701 = exp2(log2(_689 * 9.999999747378752e-05f) * 0.1593017578125f);
                      _1348 = exp2(log2((1.0f / ((_699 * 18.6875f) + 1.0f)) * ((_699 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                      _1349 = exp2(log2((1.0f / ((_700 * 18.6875f) + 1.0f)) * ((_700 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                      _1350 = exp2(log2((1.0f / ((_701 * 18.6875f) + 1.0f)) * ((_701 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } while (false);
    } while (false);
  } else {
    if ((OutputDevice & -3) == 4) {
      float _735 = mad(0.177378311753273f, _76, mad(0.38298869132995605f, _75, (_72 * 4396.32958984375f)));
      float _738 = mad(0.09678413718938828f, _76, mad(0.8134394288063049f, _75, (_72 * 897.7644653320312f)));
      float _741 = mad(0.8709122538566589f, _76, mad(0.11154655367136002f, _75, (_72 * 175.4116973876953f)));
      float _744 = mad(-0.21492856740951538f, _741, mad(-0.2365107536315918f, _738, (_735 * 1.4514392614364624f)));
      float _747 = mad(-0.09967592358589172f, _741, mad(1.17622971534729f, _738, (_735 * -0.07655377686023712f)));
      float _750 = mad(0.9977163076400757f, _741, mad(-0.006032449658960104f, _738, (_735 * 0.008316148072481155f)));
      float _752 = max(_744, max(_747, _750));
      do {
        if (!(_752 < 1.000000013351432e-10f)) {
          if (!(((bool)((bool)(_735 < 0.0f) || (bool)(_738 < 0.0f))) || (bool)(_741 < 0.0f))) {
            float _762 = abs(_752);
            float _763 = (_752 - _744) / _762;
            float _765 = (_752 - _747) / _762;
            float _767 = (_752 - _750) / _762;
            do {
              if (!(_763 < 0.8149999976158142f)) {
                float _770 = _763 + -0.8149999976158142f;
                _782 = ((_770 / exp2(log2(exp2(log2(_770 * 3.0552830696105957f) * 1.2000000476837158f) + 1.0f) * 0.8333333134651184f)) + 0.8149999976158142f);
              } else {
                _782 = _763;
              }
              do {
                if (!(_765 < 0.8029999732971191f)) {
                  float _785 = _765 + -0.8029999732971191f;
                  _797 = ((_785 / exp2(log2(exp2(log2(_785 * 3.4972610473632812f) * 1.2000000476837158f) + 1.0f) * 0.8333333134651184f)) + 0.8029999732971191f);
                } else {
                  _797 = _765;
                }
                do {
                  if (!(_767 < 0.8799999952316284f)) {
                    float _800 = _767 + -0.8799999952316284f;
                    _812 = ((_800 / exp2(log2(exp2(log2(_800 * 6.810994625091553f) * 1.2000000476837158f) + 1.0f) * 0.8333333134651184f)) + 0.8799999952316284f);
                  } else {
                    _812 = _767;
                  }
                  _820 = (_752 - (_762 * _782));
                  _821 = (_752 - (_762 * _797));
                  _822 = (_752 - (_762 * _812));
                } while (false);
              } while (false);
            } while (false);
          } else {
            _820 = _744;
            _821 = _747;
            _822 = _750;
          }
        } else {
          _820 = _744;
          _821 = _747;
          _822 = _750;
        }
        float _825 = mad(0.16386906802654266f, _822, mad(0.14067870378494263f, _821, (_820 * 0.6954522132873535f)));
        float _828 = mad(0.0955343171954155f, _822, mad(0.8596711158752441f, _821, (_820 * 0.044794563204050064f)));
        float _831 = mad(1.0015007257461548f, _822, mad(0.004025210160762072f, _821, (_820 * -0.005525882821530104f)));
        float _835 = max(max(_825, _828), _831);
        float _840 = (max(_835, 1.000000013351432e-10f) - max(min(min(_825, _828), _831), 1.000000013351432e-10f)) / max(_835, 0.009999999776482582f);
        float _853 = ((_828 + _825) + _831) + (sqrt((((_831 - _828) * _831) + ((_828 - _825) * _828)) + ((_825 - _831) * _825)) * 1.75f);
        float _854 = _853 * 0.3333333432674408f;
        float _855 = _840 + -0.4000000059604645f;
        float _856 = _855 * 5.0f;
        float _860 = max((1.0f - abs(_855 * 2.5f)), 0.0f);
        float _871 = ((float((int)(((int)(uint)((bool)(_856 > 0.0f))) - ((int)(uint)((bool)(_856 < 0.0f))))) * (1.0f - (_860 * _860))) + 1.0f) * 0.02500000037252903f;
        do {
          if (!(_854 <= 0.0533333346247673f)) {
            if (!(_854 >= 0.1599999964237213f)) {
              _880 = (((0.23999999463558197f / _853) + -0.5f) * _871);
            } else {
              _880 = 0.0f;
            }
          } else {
            _880 = _871;
          }
          float _881 = _880 + 1.0f;
          float _882 = _881 * _825;
          float _883 = _881 * _828;
          float _884 = _881 * _831;
          do {
            if (!((bool)(_882 == _883) && (bool)(_883 == _884))) {
              float _891 = ((_882 * 2.0f) - _883) - _884;
              float _894 = ((_828 - _831) * 1.7320507764816284f) * _881;
              float _896 = atan(_894 / _891);
              bool _899 = (_891 < 0.0f);
              bool _900 = (_891 == 0.0f);
              bool _901 = (_894 >= 0.0f);
              bool _902 = (_894 < 0.0f);
              _913 = select((_901 && _900), 90.0f, select((_902 && _900), -90.0f, (select((_902 && _899), (_896 + -3.1415927410125732f), select((_901 && _899), (_896 + 3.1415927410125732f), _896)) * 57.2957763671875f)));
            } else {
              _913 = 0.0f;
            }
            float _918 = min(max(select((_913 < 0.0f), (_913 + 360.0f), _913), 0.0f), 360.0f);
            do {
              if (_918 < -180.0f) {
                _927 = (_918 + 360.0f);
              } else {
                if (_918 > 180.0f) {
                  _927 = (_918 + -360.0f);
                } else {
                  _927 = _918;
                }
              }
              do {
                if ((bool)(_927 > -67.5f) && (bool)(_927 < 67.5f)) {
                  float _933 = (_927 + 67.5f) * 0.029629629105329514f;
                  int _934 = int(_933);
                  float _936 = _933 - float((int)(_934));
                  float _937 = _936 * _936;
                  float _938 = _937 * _936;
                  if (_934 == 3) {
                    _966 = (((0.1666666716337204f - (_936 * 0.5f)) + (_937 * 0.5f)) - (_938 * 0.1666666716337204f));
                  } else {
                    if (_934 == 2) {
                      _966 = ((0.6666666865348816f - _937) + (_938 * 0.5f));
                    } else {
                      if (_934 == 1) {
                        _966 = (((_938 * -0.5f) + 0.1666666716337204f) + ((_937 + _936) * 0.5f));
                      } else {
                        _966 = select((_934 == 0), (_938 * 0.1666666716337204f), 0.0f);
                      }
                    }
                  }
                } else {
                  _966 = 0.0f;
                }
                float _975 = min(max(((((_840 * 0.27000001072883606f) * (0.029999999329447746f - _882)) * _966) + _882), 0.0f), 65535.0f);
                float _976 = min(max(_883, 0.0f), 65535.0f);
                float _977 = min(max(_884, 0.0f), 65535.0f);
                float _990 = min(max(mad(-0.21492856740951538f, _977, mad(-0.2365107536315918f, _976, (_975 * 1.4514392614364624f))), 0.0f), 65504.0f);
                float _991 = min(max(mad(-0.09967592358589172f, _977, mad(1.17622971534729f, _976, (_975 * -0.07655377686023712f))), 0.0f), 65504.0f);
                float _992 = min(max(mad(0.9977163076400757f, _977, mad(-0.006032449658960104f, _976, (_975 * 0.008316148072481155f))), 0.0f), 65504.0f);
                float _993 = dot(float3(_990, _991, _992), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1004 = log2(max((lerp(_993, _990, 0.9599999785423279f)), 1.000000013351432e-10f));
                float _1005 = _1004 * 0.3010300099849701f;
                float _1006 = log2(ACESMinMaxData.x);
                float _1007 = _1006 * 0.3010300099849701f;
                do {
                  if (!(!(_1005 <= _1007))) {
                    _1076 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                  } else {
                    float _1014 = log2(ACESMidData.x);
                    float _1015 = _1014 * 0.3010300099849701f;
                    if ((bool)(_1005 > _1007) && (bool)(_1005 < _1015)) {
                      float _1023 = ((_1004 - _1006) * 0.9030900001525879f) / ((_1014 - _1006) * 0.3010300099849701f);
                      int _1024 = int(_1023);
                      float _1026 = _1023 - float((int)(_1024));
                      float _1028 = _6[_1024];
                      float _1031 = _6[(_1024 + 1)];
                      float _1036 = _1028 * 0.5f;
                      _1076 = dot(float3((_1026 * _1026), _1026, 1.0f), float3(mad((_6[(_1024 + 2)]), 0.5f, mad(_1031, -1.0f, _1036)), (_1031 - _1028), mad(_1031, 0.5f, _1036)));
                    } else {
                      do {
                        if (!(!(_1005 >= _1015))) {
                          float _1045 = log2(ACESMinMaxData.z);
                          if (_1005 < (_1045 * 0.3010300099849701f)) {
                            float _1053 = ((_1004 - _1014) * 0.9030900001525879f) / ((_1045 - _1014) * 0.3010300099849701f);
                            int _1054 = int(_1053);
                            float _1056 = _1053 - float((int)(_1054));
                            float _1058 = _7[_1054];
                            float _1061 = _7[(_1054 + 1)];
                            float _1066 = _1058 * 0.5f;
                            _1076 = dot(float3((_1056 * _1056), _1056, 1.0f), float3(mad((_7[(_1054 + 2)]), 0.5f, mad(_1061, -1.0f, _1066)), (_1061 - _1058), mad(_1061, 0.5f, _1066)));
                            break;
                          }
                        }
                        _1076 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                      } while (false);
                    }
                  }
                  float _1080 = log2(max((lerp(_993, _991, 0.9599999785423279f)), 1.000000013351432e-10f));
                  float _1081 = _1080 * 0.3010300099849701f;
                  do {
                    if (!(!(_1081 <= _1007))) {
                      _1150 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                    } else {
                      float _1088 = log2(ACESMidData.x);
                      float _1089 = _1088 * 0.3010300099849701f;
                      if ((bool)(_1081 > _1007) && (bool)(_1081 < _1089)) {
                        float _1097 = ((_1080 - _1006) * 0.9030900001525879f) / ((_1088 - _1006) * 0.3010300099849701f);
                        int _1098 = int(_1097);
                        float _1100 = _1097 - float((int)(_1098));
                        float _1102 = _6[_1098];
                        float _1105 = _6[(_1098 + 1)];
                        float _1110 = _1102 * 0.5f;
                        _1150 = dot(float3((_1100 * _1100), _1100, 1.0f), float3(mad((_6[(_1098 + 2)]), 0.5f, mad(_1105, -1.0f, _1110)), (_1105 - _1102), mad(_1105, 0.5f, _1110)));
                      } else {
                        do {
                          if (!(!(_1081 >= _1089))) {
                            float _1119 = log2(ACESMinMaxData.z);
                            if (_1081 < (_1119 * 0.3010300099849701f)) {
                              float _1127 = ((_1080 - _1088) * 0.9030900001525879f) / ((_1119 - _1088) * 0.3010300099849701f);
                              int _1128 = int(_1127);
                              float _1130 = _1127 - float((int)(_1128));
                              float _1132 = _7[_1128];
                              float _1135 = _7[(_1128 + 1)];
                              float _1140 = _1132 * 0.5f;
                              _1150 = dot(float3((_1130 * _1130), _1130, 1.0f), float3(mad((_7[(_1128 + 2)]), 0.5f, mad(_1135, -1.0f, _1140)), (_1135 - _1132), mad(_1135, 0.5f, _1140)));
                              break;
                            }
                          }
                          _1150 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                        } while (false);
                      }
                    }
                    float _1154 = log2(max((lerp(_993, _992, 0.9599999785423279f)), 1.000000013351432e-10f));
                    float _1155 = _1154 * 0.3010300099849701f;
                    do {
                      if (!(!(_1155 <= _1007))) {
                        _1224 = (log2(ACESMinMaxData.y) * 0.3010300099849701f);
                      } else {
                        float _1162 = log2(ACESMidData.x);
                        float _1163 = _1162 * 0.3010300099849701f;
                        if ((bool)(_1155 > _1007) && (bool)(_1155 < _1163)) {
                          float _1171 = ((_1154 - _1006) * 0.9030900001525879f) / ((_1162 - _1006) * 0.3010300099849701f);
                          int _1172 = int(_1171);
                          float _1174 = _1171 - float((int)(_1172));
                          float _1176 = _6[_1172];
                          float _1179 = _6[(_1172 + 1)];
                          float _1184 = _1176 * 0.5f;
                          _1224 = dot(float3((_1174 * _1174), _1174, 1.0f), float3(mad((_6[(_1172 + 2)]), 0.5f, mad(_1179, -1.0f, _1184)), (_1179 - _1176), mad(_1179, 0.5f, _1184)));
                        } else {
                          do {
                            if (!(!(_1155 >= _1163))) {
                              float _1193 = log2(ACESMinMaxData.z);
                              if (_1155 < (_1193 * 0.3010300099849701f)) {
                                float _1201 = ((_1154 - _1162) * 0.9030900001525879f) / ((_1193 - _1162) * 0.3010300099849701f);
                                int _1202 = int(_1201);
                                float _1204 = _1201 - float((int)(_1202));
                                float _1206 = _7[_1202];
                                float _1209 = _7[(_1202 + 1)];
                                float _1214 = _1206 * 0.5f;
                                _1224 = dot(float3((_1204 * _1204), _1204, 1.0f), float3(mad((_7[(_1202 + 2)]), 0.5f, mad(_1209, -1.0f, _1214)), (_1209 - _1206), mad(_1209, 0.5f, _1214)));
                                break;
                              }
                            }
                            _1224 = (log2(ACESMinMaxData.w) * 0.3010300099849701f);
                          } while (false);
                        }
                      }
                      float _1228 = ACESMinMaxData.w - ACESMinMaxData.y;
                      float _1229 = (exp2(_1076 * 3.321928024291992f) - ACESMinMaxData.y) / _1228;
                      float _1231 = (exp2(_1150 * 3.321928024291992f) - ACESMinMaxData.y) / _1228;
                      float _1233 = (exp2(_1224 * 3.321928024291992f) - ACESMinMaxData.y) / _1228;
                      float _1236 = mad(0.15618768334388733f, _1233, mad(0.13400420546531677f, _1231, (_1229 * 0.6624541878700256f)));
                      float _1239 = mad(0.053689517080783844f, _1233, mad(0.6740817427635193f, _1231, (_1229 * 0.2722287178039551f)));
                      float _1242 = mad(1.0103391408920288f, _1233, mad(0.00406073359772563f, _1231, (_1229 * -0.005574649665504694f)));
                      float _1255 = min(max(mad(-0.23642469942569733f, _1242, mad(-0.32480329275131226f, _1239, (_1236 * 1.6410233974456787f))), 0.0f), 1.0f);
                      float _1256 = min(max(mad(0.016756348311901093f, _1242, mad(1.6153316497802734f, _1239, (_1236 * -0.663662850856781f))), 0.0f), 1.0f);
                      float _1257 = min(max(mad(0.9883948564529419f, _1242, mad(-0.008284442126750946f, _1239, (_1236 * 0.011721894145011902f))), 0.0f), 1.0f);
                      float _1260 = mad(0.15618768334388733f, _1257, mad(0.13400420546531677f, _1256, (_1255 * 0.6624541878700256f)));
                      float _1263 = mad(0.053689517080783844f, _1257, mad(0.6740817427635193f, _1256, (_1255 * 0.2722287178039551f)));
                      float _1266 = mad(1.0103391408920288f, _1257, mad(0.00406073359772563f, _1256, (_1255 * -0.005574649665504694f)));
                      float _1288 = min(max((min(max(mad(-0.23642469942569733f, _1266, mad(-0.32480329275131226f, _1263, (_1260 * 1.6410233974456787f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                      float _1289 = min(max((min(max(mad(0.016756348311901093f, _1266, mad(1.6153316497802734f, _1263, (_1260 * -0.663662850856781f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                      float _1290 = min(max((min(max(mad(0.9883948564529419f, _1266, mad(-0.008284442126750946f, _1263, (_1260 * 0.011721894145011902f))), 0.0f), 65535.0f) * ACESMinMaxData.w), 0.0f), 65535.0f);
                      do {
                        if (!(OutputDevice == 6)) {
                          _1305 = mad(_35, _1290, mad(_34, _1289, (_1288 * _33)));
                          _1306 = mad(_38, _1290, mad(_37, _1289, (_1288 * _36)));
                          _1307 = mad(_41, _1290, mad(_40, _1289, (_1288 * _39)));
                        } else {
                          _1305 = _1288;
                          _1306 = _1289;
                          _1307 = _1290;
                        }
                        float _1317 = exp2(log2(_1305 * 9.999999747378752e-05f) * 0.1593017578125f);
                        float _1318 = exp2(log2(_1306 * 9.999999747378752e-05f) * 0.1593017578125f);
                        float _1319 = exp2(log2(_1307 * 9.999999747378752e-05f) * 0.1593017578125f);
                        _1348 = exp2(log2((1.0f / ((_1317 * 18.6875f) + 1.0f)) * ((_1317 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                        _1349 = exp2(log2((1.0f / ((_1318 * 18.6875f) + 1.0f)) * ((_1318 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                        _1350 = exp2(log2((1.0f / ((_1319 * 18.6875f) + 1.0f)) * ((_1319 * 18.8515625f) + 0.8359375f)) * 78.84375f);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } while (false);
    } else {
      _1348 = _10;
      _1349 = _11;
      _1350 = _13;
    }
  }
  SV_Target.x = (_1348 * 0.9523810148239136f);
  SV_Target.y = (_1349 * 0.9523810148239136f);
  SV_Target.z = (_1350 * 0.9523810148239136f);
  SV_Target.w = 0.0f;

  SV_Target = saturate(SV_Target);

  return SV_Target;
}
