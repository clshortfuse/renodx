//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions:
//
// cbuffer ConstBuf__passData
// {
//
//   struct GammaAdjustPassData
//   {
//
//       float gamma;                   // Offset:    0
//
//   } resourceTables__passData;        // Offset:    0 Size:     4
//                                      // Texture:   t0
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// resourceTables__passData.inputTexture    texture  float4          2d             t0      1
// ConstBuf__passData                cbuffer      NA          NA            cb0      1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//

// clang-format off
cbuffer ConstBuf__passData : register(b0) {
  struct GammaAdjustPassData {
    float gamma;
  } resourceTables__passData;
}
// clang-format on

Texture2D<float4> inputTexture : register(t0);

void main(
    in float4 SV_POSITION: SV_POSITION,
    in float2 TEXCOORD0: TEXCOORD0,
    in float2 TEXCOORD1: TEXCOORD1,
    out float4 SV_TARGET0: SV_TARGET0) {
  uint3 position_as_uint = uint3(uint2(SV_POSITION.xy), 0u);

  float4 input_color = inputTexture.Load(position_as_uint);

  SV_TARGET0 = float4(pow(input_color.rgb, resourceTables__passData.gamma), input_color.a);
}
