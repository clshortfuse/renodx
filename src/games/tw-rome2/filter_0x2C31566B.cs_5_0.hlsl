// Multi-tap HDR filter captured from Rome 2. The compute shader rebuilds the
// game's wide-kernel blur/upscale by staging pixels in groupshared memory,
// expanding them back to linear colour, then evaluating a long list of
// pre-weighted taps. The final values are written to the swap-chain UAV (the
// dcl_uav instruction needs to be restored by hand when reassembling).
// ---- Created with 3Dmigoto v1.4.1 on Sat Oct 25 22:51:15 2025
groupshared struct { float val[156]; } g0[2];

cbuffer camera_VS_PS : register(b0)
{
  float3 camera_position : packoffset(c0);
  float4x4 view : packoffset(c1);
  float4x4 projection : packoffset(c5);
  float4x4 view_projection : packoffset(c9);
  float4x4 inv_view : packoffset(c13);
  float4x4 inv_projection : packoffset(c17);
  float4x4 inv_view_projection : packoffset(c21);
  float4 camera_near_far : packoffset(c25);
  float time_in_sec : packoffset(c26);
  float2 g_inverse_focal_length : packoffset(c26.y);
  float g_vertical_fov : packoffset(c26.w);
  float4 g_screen_size : packoffset(c27);
  float g_vpos_texel_offset : packoffset(c28);
  float4 g_viewport_dimensions : packoffset(c29);
  float4 g_camera_temp0 : packoffset(c30);
  float4 g_camera_temp1 : packoffset(c31);
  float4 g_camera_temp2 : packoffset(c32);
  float4 g_clip_rect : packoffset(c33);
  float g_hide_foliage : packoffset(c34);
}

Texture2D<float4> input_texture_SM5 : register(t0);
RWTexture2D<float4> output_texture : register(u0);


// 3Dmigoto declarations
#define cmp -


[numthreads(32, 2, 1)]
void main(uint3 vThreadIDInGroup : SV_GroupThreadID, uint3 vThreadGroupID : SV_GroupID)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

// Needs manual fix for instruction:
// unknown dcl_: dcl_thread_group 32, 2, 1
  // Resolve the dispatch footprint: convert the flattened thread id into the
  // source texture tile this thread is responsible for and clamp to screen bounds.
  r0.x = (uint)vThreadIDInGroup.x << 2;
  r1.yz = (uint2)vThreadGroupID.xy << int2(7,1);
  r1.x = (int)r1.y + (int)r0.x;
  r0.yzw = (int3)r1.xxx + int3(-14,-12,-11);
  r2.xyz = (int3)r0.yzw;
  r0.z = -1 + g_screen_size.x;
  r2.xyz = max(float3(0,0,0), r2.xyz);
  r2.xyz = min(r2.xyz, r0.zzz);
  r3.z = (int)r1.z + (int)vThreadIDInGroup.y;
  r3.y = (int)r2.x;
  r3.w = 0;
  r4.xyzw = input_texture_SM5.Load(r3.yzw).xyzw;
  r4.xyz = saturate(r4.zyx);
  r4.xyz = r4.xyz * r4.www;
  r0.w = (uint)r0.x << 2;
  r1.w = 255 * r4.w;
  r1.w = (uint)r1.w;
  r1.w = (uint)r1.w << 24;
  r4.xyz = float3(255,255,255) * r4.xyz;
  r4.xyz = (uint3)r4.xyz;
  r2.xw = (uint2)r4.xy << int2(16,8);
  r1.w = (int)r1.w | (int)r2.x;
  r1.w = (int)r2.w | (int)r1.w;
  r1.w = (int)r4.z | (int)r1.w;
  g0[vThreadIDInGroup.y].val[r0.w/4] = r1.w;
  r0.y = (int)r0.y | 3;
  r0.y = (int)r0.y;
  r0.y = max(0, r0.y);
  r0.y = min(r0.y, r0.z);
  r3.x = (int)r0.y;
  r4.xyzw = input_texture_SM5.Load(r3.xzw).xyzw;
  r4.xyz = saturate(r4.zyx);
  r4.xyz = r4.xyz * r4.www;
  bitmask.x = ((~(-1 << 4)) << 0) & 0xffffffff;  r5.x = (((uint)4 << 0) & bitmask.x) | ((uint)r0.w & ~bitmask.x);
  bitmask.y = ((~(-1 << 4)) << 0) & 0xffffffff;  r5.y = (((uint)8 << 0) & bitmask.y) | ((uint)r0.w & ~bitmask.y);
  bitmask.z = ((~(-1 << 4)) << 0) & 0xffffffff;  r5.z = (((uint)12 << 0) & bitmask.z) | ((uint)r0.w & ~bitmask.z);
  r0.y = 255 * r4.w;
  r0.y = (uint)r0.y;
  r0.y = (uint)r0.y << 24;
  r4.xyz = float3(255,255,255) * r4.xyz;
  r4.xyz = (uint3)r4.xyz;
  r2.xw = (uint2)r4.xy << int2(16,8);
  r0.y = (int)r0.y | (int)r2.x;
  r0.y = (int)r2.w | (int)r0.y;
  r0.y = (int)r4.z | (int)r0.y;
  g0[vThreadIDInGroup.y].val[r5.x/4] = r0.y;
  // Sample the four vertically adjacent pixels, pack them into shared memory,
  // and keep repeating until the full 32x2 group has the neighbourhood cached.
  r3.xy = (int2)r2.zy;
  r2.xyzw = input_texture_SM5.Load(r3.yzw).xyzw;
  r2.xyz = saturate(r2.zyx);
  r2.xyz = r2.xyz * r2.www;
  r0.y = 255 * r2.w;
  r0.y = (uint)r0.y;
  r0.y = (uint)r0.y << 24;
  r2.xyz = float3(255,255,255) * r2.xyz;
  r2.xyz = (uint3)r2.xyz;
  r2.xy = (uint2)r2.xy << int2(16,8);
  r0.y = (int)r0.y | (int)r2.x;
  r0.y = (int)r2.y | (int)r0.y;
  r0.y = (int)r2.z | (int)r0.y;
  g0[vThreadIDInGroup.y].val[r5.y/4] = r0.y;
  r2.xyzw = input_texture_SM5.Load(r3.xzw).xyzw;
  r2.xyz = saturate(r2.zyx);
  r2.xyz = r2.xyz * r2.www;
  r0.y = 255 * r2.w;
  r0.y = (uint)r0.y;
  r0.y = (uint)r0.y << 24;
  r2.xyz = float3(255,255,255) * r2.xyz;
  r2.xyz = (uint3)r2.xyz;
  r2.xy = (uint2)r2.xy << int2(16,8);
  r0.y = (int)r0.y | (int)r2.x;
  r0.y = (int)r2.y | (int)r0.y;
  r0.y = (int)r2.z | (int)r0.y;
  g0[vThreadIDInGroup.y].val[r5.z/4] = r0.y;
  r0.y = cmp((uint)vThreadIDInGroup.x < 28);
  if (r0.y != 0) {
    r0.y = (int)r1.y + (int)vThreadIDInGroup.x;
    r0.y = (int)r0.y + 114;
    r0.y = (uint)r0.y;
    r0.y = min(r0.y, r0.z);
    r2.x = (int)r0.y;
    r2.yzw = r3.zww;
    r2.xyzw = input_texture_SM5.Load(r2.xyz).xyzw;
    r2.xyz = saturate(r2.zyx);
    r2.xyz = r2.xyz * r2.www;
    r0.x = (int)r0.x + 512;
    r0.y = 255 * r2.w;
    r0.y = (uint)r0.y;
    r0.y = (uint)r0.y << 24;
    r2.xyz = float3(255,255,255) * r2.xyz;
    r2.xyz = (uint3)r2.xyz;
    r1.yw = (uint2)r2.xy << int2(16,8);
    r0.y = (int)r0.y | (int)r1.y;
    r0.y = (int)r1.w | (int)r0.y;
    r0.y = (int)r2.z | (int)r0.y;
    g0[vThreadIDInGroup.y].val[r0.x/4] = r0.y;
  }
  // Ensure the entire threadgroup finished populating g0 before reading back.
  GroupMemoryBarrierWithGroupSync();
  r0.x = (int)r1.x;
  r0.x = cmp(r0.x < g_screen_size.x);
  if (r0.x != 0) {
    // Reconstruct the 8-bit channels from shared memory and convert them to
    // linear floats using the game's scale factors (3Dmigoto emitted the
    // original integer bitfield ops).
    r0.x = g0[vThreadIDInGroup.y].val[r0.w/4];
    r0.y = r0.x ? 0.000000 : 0;
    r2.x = (uint)r0.y;
    if (8 == 0) r0.y = 0; else if (8+8 < 32) {     r0.y = (uint)r0.x << (32-(8 + 8)); r0.y = (uint)r0.y >> (32-8);    } else r0.y = (uint)r0.x >> 8;
    if (8 == 0) r0.z = 0; else if (8+16 < 32) {     r0.z = (uint)r0.x << (32-(8 + 16)); r0.z = (uint)r0.z >> (32-8);    } else r0.z = (uint)r0.x >> 16;
    r2.yz = (uint2)r0.yz;
    r0.x = (uint)r0.x >> 24;
    r0.y = g0[vThreadIDInGroup.y].val[r5.x/4];
    r0.z = (int)r0.y & 255;
    r3.x = (uint)r0.z;
    if (8 == 0) r1.y = 0; else if (8+8 < 32) {     r1.y = (uint)r0.y << (32-(8 + 8)); r1.y = (uint)r1.y >> (32-8);    } else r1.y = (uint)r0.y >> 8;
    if (8 == 0) r1.w = 0; else if (8+16 < 32) {     r1.w = (uint)r0.y << (32-(8 + 16)); r1.w = (uint)r1.w >> (32-8);    } else r1.w = (uint)r0.y >> 16;
    r3.yz = (uint2)r1.yw;
    r0.y = (uint)r0.y >> 24;
    r0.z = g0[vThreadIDInGroup.y].val[r5.y/4];
    r1.y = (int)r0.z & 255;
    r4.x = (uint)r1.y;
    if (8 == 0) r1.y = 0; else if (8+8 < 32) {     r1.y = (uint)r0.z << (32-(8 + 8)); r1.y = (uint)r1.y >> (32-8);    } else r1.y = (uint)r0.z >> 8;
    if (8 == 0) r1.w = 0; else if (8+16 < 32) {     r1.w = (uint)r0.z << (32-(8 + 16)); r1.w = (uint)r1.w >> (32-8);    } else r1.w = (uint)r0.z >> 16;
    r4.yz = (uint2)r1.yw;
    r0.z = (uint)r0.z >> 24;
    r0.xyz = (uint3)r0.xyz;
    r1.y = g0[vThreadIDInGroup.y].val[r5.z/4];
    r1.w = (int)r1.y & 255;
    r5.x = (uint)r1.w;
    if (8 == 0) r6.x = 0; else if (8+8 < 32) {     r6.x = (uint)r1.y << (32-(8 + 8)); r6.x = (uint)r6.x >> (32-8);    } else r6.x = (uint)r1.y >> 8;
    if (8 == 0) r6.y = 0; else if (8+16 < 32) {     r6.y = (uint)r1.y << (32-(8 + 16)); r6.y = (uint)r6.y >> (32-8);    } else r6.y = (uint)r1.y >> 16;
    r5.yz = (uint2)r6.xy;
    r1.y = (uint)r1.y >> 24;
    r6.xyzw = (int4)r0.wwww + int4(16,20,24,28);
    r1.w = g0[vThreadIDInGroup.y].val[r6.x/4];
    r2.w = (int)r1.w & 255;
    r7.x = (uint)r2.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r1.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r1.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r1.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r1.w >> 16;
    r7.yz = (uint2)r8.xy;
    r1.w = (uint)r1.w >> 24;
    r1.yw = (uint2)r1.yw;
    r8.xyz = float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) * r3.xyz;
    r2.xyz = r2.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r8.xyz;
    r2.w = 3.98414777e-05 * r0.y;
    r0.x = r0.x * 3.02470398e-05 + r2.w;
    r8.xyz = float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) * r4.xyz;
    r3.xyz = r3.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r8.xyz;
    r2.w = 3.98414777e-05 * r0.z;
    r0.y = r0.y * 3.02470398e-05 + r2.w;
    r8.xyz = float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) * r5.xyz;
    r8.xyz = r4.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r8.xyz;
    r2.w = 3.98414777e-05 * r1.y;
    r2.w = r0.z * 3.02470398e-05 + r2.w;
    r9.xyz = float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) * r7.xyz;
    r9.xyz = r5.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r9.xyz;
    r3.w = 3.98414777e-05 * r1.w;
    r3.w = r1.y * 3.02470398e-05 + r3.w;
    r4.w = g0[vThreadIDInGroup.y].val[r6.y/4];
    r5.w = (int)r4.w & 255;
    r10.x = (uint)r5.w;
    if (8 == 0) r6.x = 0; else if (8+8 < 32) {     r6.x = (uint)r4.w << (32-(8 + 8)); r6.x = (uint)r6.x >> (32-8);    } else r6.x = (uint)r4.w >> 8;
    if (8 == 0) r6.y = 0; else if (8+16 < 32) {     r6.y = (uint)r4.w << (32-(8 + 16)); r6.y = (uint)r6.y >> (32-8);    } else r6.y = (uint)r4.w >> 16;
    r10.yz = (uint2)r6.xy;
    r4.w = (uint)r4.w >> 24;
    r4.w = (uint)r4.w;
    r2.xyz = r4.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r2.xyz;
    r0.x = r0.z * 5.14191452e-05 + r0.x;
    r3.xyz = r5.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r3.xyz;
    r0.y = r1.y * 5.14191452e-05 + r0.y;
    r4.xyz = r7.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r8.xyz;
    r0.z = r1.w * 5.14191452e-05 + r2.w;
    r8.xyz = r10.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r9.xyz;
    r2.w = r4.w * 5.14191452e-05 + r3.w;
    r3.w = g0[vThreadIDInGroup.y].val[r6.z/4];
    r5.w = (int)r3.w & 255;
    r6.x = (uint)r5.w;
    if (8 == 0) r9.x = 0; else if (8+8 < 32) {     r9.x = (uint)r3.w << (32-(8 + 8)); r9.x = (uint)r9.x >> (32-8);    } else r9.x = (uint)r3.w >> 8;
    if (8 == 0) r9.y = 0; else if (8+16 < 32) {     r9.y = (uint)r3.w << (32-(8 + 16)); r9.y = (uint)r9.y >> (32-8);    } else r9.y = (uint)r3.w >> 16;
    r6.yz = (uint2)r9.xy;
    r3.w = (uint)r3.w >> 24;
    r3.w = (uint)r3.w;
    r2.xyz = r5.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r2.xyz;
    r0.x = r1.y * 6.50206202e-05 + r0.x;
    r3.xyz = r7.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r3.xyz;
    r0.y = r1.w * 6.50206202e-05 + r0.y;
    r4.xyz = r10.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r4.xyz;
    r0.z = r4.w * 6.50206202e-05 + r0.z;
    r5.xyz = r6.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r8.xyz;
    r1.y = r3.w * 6.50206202e-05 + r2.w;
    r2.w = g0[vThreadIDInGroup.y].val[r6.w/4];
    r5.w = (int)r2.w & 255;
    r8.x = (uint)r5.w;
    if (8 == 0) r9.x = 0; else if (8+8 < 32) {     r9.x = (uint)r2.w << (32-(8 + 8)); r9.x = (uint)r9.x >> (32-8);    } else r9.x = (uint)r2.w >> 8;
    if (8 == 0) r9.y = 0; else if (8+16 < 32) {     r9.y = (uint)r2.w << (32-(8 + 16)); r9.y = (uint)r9.y >> (32-8);    } else r9.y = (uint)r2.w >> 16;
    r8.yz = (uint2)r9.xy;
    r2.w = (uint)r2.w >> 24;
    r2.w = (uint)r2.w;
    r2.xyz = r7.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r2.xyz;
    r0.x = r1.w * 8.05590244e-05 + r0.x;
    r3.xyz = r10.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r3.xyz;
    r0.y = r4.w * 8.05590244e-05 + r0.y;
    r4.xyz = r6.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r4.xyz;
    r0.z = r3.w * 8.05590244e-05 + r0.z;
    r5.xyz = r8.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r5.xyz;
    r1.y = r2.w * 8.05590244e-05 + r1.y;
  // From here on the shader walks through the long filter kernel. Every new
  // read from g0 advances deeper into the pre-recorded tap list, accumulating
  // the weighted contribution of neighbouring pixels into r2-r5 while keeping
  // track of the normalisation factors in r0.x/r0.y/r0.z/r0.w.
    r7.xyzw = (int4)r0.wwww + int4(32,36,40,44);
    r1.w = g0[vThreadIDInGroup.y].val[r7.x/4];
    r5.w = (int)r1.w & 255;
    r9.x = (uint)r5.w;
    if (8 == 0) r11.x = 0; else if (8+8 < 32) {     r11.x = (uint)r1.w << (32-(8 + 8)); r11.x = (uint)r11.x >> (32-8);    } else r11.x = (uint)r1.w >> 8;
    if (8 == 0) r11.y = 0; else if (8+16 < 32) {     r11.y = (uint)r1.w << (32-(8 + 16)); r11.y = (uint)r11.y >> (32-8);    } else r11.y = (uint)r1.w >> 16;
    r9.yz = (uint2)r11.xy;
    r1.w = (uint)r1.w >> 24;
    r1.w = (uint)r1.w;
    r2.xyz = r10.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r2.xyz;
    r0.x = r4.w * 9.77944364e-05 + r0.x;
    r3.xyz = r6.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r3.xyz;
    r0.y = r3.w * 9.77944364e-05 + r0.y;
    r4.xyz = r8.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r4.xyz;
    r0.z = r2.w * 9.77944364e-05 + r0.z;
    r5.xyz = r9.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r5.xyz;
    r1.y = r1.w * 9.77944364e-05 + r1.y;
    r4.w = g0[vThreadIDInGroup.y].val[r7.y/4];
    r5.w = (int)r4.w & 255;
    r10.x = (uint)r5.w;
    if (8 == 0) r7.x = 0; else if (8+8 < 32) {     r7.x = (uint)r4.w << (32-(8 + 8)); r7.x = (uint)r7.x >> (32-8);    } else r7.x = (uint)r4.w >> 8;
    if (8 == 0) r7.y = 0; else if (8+16 < 32) {     r7.y = (uint)r4.w << (32-(8 + 16)); r7.y = (uint)r7.y >> (32-8);    } else r7.y = (uint)r4.w >> 16;
    r10.yz = (uint2)r7.xy;
    r4.w = (uint)r4.w >> 24;
    r4.w = (uint)r4.w;
    r2.xyz = r6.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r2.xyz;
    r0.x = r3.w * 0.000116319083 + r0.x;
    r3.xyz = r8.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r3.xyz;
    r0.y = r2.w * 0.000116319083 + r0.y;
    r4.xyz = r9.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r4.xyz;
    r0.z = r1.w * 0.000116319083 + r0.z;
    r5.xyz = r10.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r5.xyz;
    r1.y = r4.w * 0.000116319083 + r1.y;
    r3.w = g0[vThreadIDInGroup.y].val[r7.z/4];
    r5.w = (int)r3.w & 255;
    r6.x = (uint)r5.w;
    if (8 == 0) r7.x = 0; else if (8+8 < 32) {     r7.x = (uint)r3.w << (32-(8 + 8)); r7.x = (uint)r7.x >> (32-8);    } else r7.x = (uint)r3.w >> 8;
    if (8 == 0) r7.y = 0; else if (8+16 < 32) {     r7.y = (uint)r3.w << (32-(8 + 16)); r7.y = (uint)r7.y >> (32-8);    } else r7.y = (uint)r3.w >> 16;
    r6.yz = (uint2)r7.xy;
    r3.w = (uint)r3.w >> 24;
    r3.w = (uint)r3.w;
    r2.xyz = r8.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r2.xyz;
    r0.x = r2.w * 0.000135557828 + r0.x;
    r3.xyz = r9.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r3.xyz;
    r0.y = r1.w * 0.000135557828 + r0.y;
    r4.xyz = r10.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r4.xyz;
    r0.z = r4.w * 0.000135557828 + r0.z;
    r5.xyz = r6.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r5.xyz;
    r1.y = r3.w * 0.000135557828 + r1.y;
    r2.w = g0[vThreadIDInGroup.y].val[r7.w/4];
    r5.w = (int)r2.w & 255;
    r7.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r2.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r2.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r2.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r2.w >> 16;
    r7.yz = (uint2)r8.xy;
    r2.w = (uint)r2.w >> 24;
    r2.w = (uint)r2.w;
    r2.xyz = r9.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r2.xyz;
    r0.x = r1.w * 0.000154787223 + r0.x;
    r3.xyz = r10.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r3.xyz;
    r0.y = r4.w * 0.000154787223 + r0.y;
    r4.xyz = r6.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r4.xyz;
    r0.z = r3.w * 0.000154787223 + r0.z;
    r5.xyz = r7.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r5.xyz;
    r1.y = r2.w * 0.000154787223 + r1.y;
    r8.xyzw = (int4)r0.wwww + int4(48,52,56,60);
    r1.w = g0[vThreadIDInGroup.y].val[r8.x/4];
    r5.w = (int)r1.w & 255;
    r9.x = (uint)r5.w;
    if (8 == 0) r11.x = 0; else if (8+8 < 32) {     r11.x = (uint)r1.w << (32-(8 + 8)); r11.x = (uint)r11.x >> (32-8);    } else r11.x = (uint)r1.w >> 8;
    if (8 == 0) r11.y = 0; else if (8+16 < 32) {     r11.y = (uint)r1.w << (32-(8 + 16)); r11.y = (uint)r11.y >> (32-8);    } else r11.y = (uint)r1.w >> 16;
    r9.yz = (uint2)r11.xy;
    r1.w = (uint)r1.w >> 24;
    r1.w = (uint)r1.w;
    r2.xyz = r10.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r2.xyz;
    r0.x = r4.w * 0.000173173903 + r0.x;
    r3.xyz = r6.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r3.xyz;
    r0.y = r3.w * 0.000173173903 + r0.y;
    r4.xyz = r7.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r4.xyz;
    r0.z = r2.w * 0.000173173903 + r0.z;
    r5.xyz = r9.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r5.xyz;
    r1.y = r1.w * 0.000173173903 + r1.y;
    r4.w = g0[vThreadIDInGroup.y].val[r8.y/4];
    r5.w = (int)r4.w & 255;
    r10.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r4.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r4.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r4.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r4.w >> 16;
    r10.yz = (uint2)r8.xy;
    r4.w = (uint)r4.w >> 24;
    r4.w = (uint)r4.w;
    r2.xyz = r6.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r2.xyz;
    r0.x = r3.w * 0.000189830782 + r0.x;
    r3.xyz = r7.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r3.xyz;
    r0.y = r2.w * 0.000189830782 + r0.y;
    r4.xyz = r9.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r4.xyz;
    r0.z = r1.w * 0.000189830782 + r0.z;
    r5.xyz = r10.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r5.xyz;
    r1.y = r4.w * 0.000189830782 + r1.y;
    r3.w = g0[vThreadIDInGroup.y].val[r8.z/4];
    r5.w = (int)r3.w & 255;
    r6.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r3.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r3.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r3.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r3.w >> 16;
    r6.yz = (uint2)r8.xy;
    r3.w = (uint)r3.w >> 24;
    r3.w = (uint)r3.w;
    r2.xyz = r7.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r2.xyz;
    r0.x = r2.w * 0.000203886113 + r0.x;
    r3.xyz = r9.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r3.xyz;
    r0.y = r1.w * 0.000203886113 + r0.y;
    r4.xyz = r10.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r4.xyz;
    r0.z = r4.w * 0.000203886113 + r0.z;
    r5.xyz = r6.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r5.xyz;
    r1.y = r3.w * 0.000203886113 + r1.y;
    r2.w = g0[vThreadIDInGroup.y].val[r8.w/4];
    r5.w = (int)r2.w & 255;
    r7.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r2.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r2.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r2.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r2.w >> 16;
    r7.yz = (uint2)r8.xy;
    r2.w = (uint)r2.w >> 24;
    r2.w = (uint)r2.w;
    r2.xyz = r9.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r2.xyz;
    r0.x = r1.w * 0.000214558415 + r0.x;
    r3.xyz = r10.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r3.xyz;
    r0.y = r4.w * 0.000214558415 + r0.y;
    r4.xyz = r6.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r4.xyz;
    r0.z = r3.w * 0.000214558415 + r0.z;
    r5.xyz = r7.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r5.xyz;
    r1.y = r2.w * 0.000214558415 + r1.y;
    r8.xyzw = (int4)r0.wwww + int4(64,68,72,76);
    r1.w = g0[vThreadIDInGroup.y].val[r8.x/4];
    r5.w = (int)r1.w & 255;
    r9.x = (uint)r5.w;
    if (8 == 0) r11.x = 0; else if (8+8 < 32) {     r11.x = (uint)r1.w << (32-(8 + 8)); r11.x = (uint)r11.x >> (32-8);    } else r11.x = (uint)r1.w >> 8;
    if (8 == 0) r11.y = 0; else if (8+16 < 32) {     r11.y = (uint)r1.w << (32-(8 + 16)); r11.y = (uint)r11.y >> (32-8);    } else r11.y = (uint)r1.w >> 16;
    r9.yz = (uint2)r11.xy;
    r1.w = (uint)r1.w >> 24;
    r1.w = (uint)r1.w;
    r2.xyz = r10.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r2.xyz;
    r0.x = r4.w * 0.000221228096 + r0.x;
    r3.xyz = r6.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r3.xyz;
    r0.y = r3.w * 0.000221228096 + r0.y;
    r4.xyz = r7.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r4.xyz;
    r0.z = r2.w * 0.000221228096 + r0.z;
    r5.xyz = r9.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r5.xyz;
    r1.y = r1.w * 0.000221228096 + r1.y;
    r4.w = g0[vThreadIDInGroup.y].val[r8.y/4];
    r5.w = (int)r4.w & 255;
    r10.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r4.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r4.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r4.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r4.w >> 16;
    r10.yz = (uint2)r8.xy;
    r4.w = (uint)r4.w >> 24;
    r4.w = (uint)r4.w;
    r2.xyz = r6.xyz * float3(0.000223497074,0.000223497074,0.000223497074) + r2.xyz;
    r0.x = r3.w * 0.000223497074 + r0.x;
    r3.xyz = r7.xyz * float3(0.000223497074,0.000223497074,0.000223497074) + r3.xyz;
    r0.y = r2.w * 0.000223497074 + r0.y;
    r4.xyz = r9.xyz * float3(0.000223497074,0.000223497074,0.000223497074) + r4.xyz;
    r0.z = r1.w * 0.000223497074 + r0.z;
    r5.xyz = r10.xyz * float3(0.000223497074,0.000223497074,0.000223497074) + r5.xyz;
    r1.y = r4.w * 0.000223497074 + r1.y;
    r3.w = g0[vThreadIDInGroup.y].val[r8.z/4];
    r5.w = (int)r3.w & 255;
    r6.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r3.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r3.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r3.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r3.w >> 16;
    r6.yz = (uint2)r8.xy;
    r3.w = (uint)r3.w >> 24;
    r3.w = (uint)r3.w;
    r2.xyz = r7.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r2.xyz;
    r0.x = r2.w * 0.000221228096 + r0.x;
    r3.xyz = r9.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r3.xyz;
    r0.y = r1.w * 0.000221228096 + r0.y;
    r4.xyz = r10.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r4.xyz;
    r0.z = r4.w * 0.000221228096 + r0.z;
    r5.xyz = r6.xyz * float3(0.000221228096,0.000221228096,0.000221228096) + r5.xyz;
    r1.y = r3.w * 0.000221228096 + r1.y;
    r2.w = g0[vThreadIDInGroup.y].val[r8.w/4];
    r5.w = (int)r2.w & 255;
    r7.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r2.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r2.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r2.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r2.w >> 16;
    r7.yz = (uint2)r8.xy;
    r2.w = (uint)r2.w >> 24;
    r2.w = (uint)r2.w;
    r2.xyz = r9.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r2.xyz;
    r0.x = r1.w * 0.000214558415 + r0.x;
    r3.xyz = r10.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r3.xyz;
    r0.y = r4.w * 0.000214558415 + r0.y;
    r4.xyz = r6.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r4.xyz;
    r0.z = r3.w * 0.000214558415 + r0.z;
    r5.xyz = r7.xyz * float3(0.000214558415,0.000214558415,0.000214558415) + r5.xyz;
    r1.y = r2.w * 0.000214558415 + r1.y;
    r8.xyzw = (int4)r0.wwww + int4(80,84,88,92);
    r1.w = g0[vThreadIDInGroup.y].val[r8.x/4];
    r5.w = (int)r1.w & 255;
    r9.x = (uint)r5.w;
    if (8 == 0) r11.x = 0; else if (8+8 < 32) {     r11.x = (uint)r1.w << (32-(8 + 8)); r11.x = (uint)r11.x >> (32-8);    } else r11.x = (uint)r1.w >> 8;
    if (8 == 0) r11.y = 0; else if (8+16 < 32) {     r11.y = (uint)r1.w << (32-(8 + 16)); r11.y = (uint)r11.y >> (32-8);    } else r11.y = (uint)r1.w >> 16;
    r9.yz = (uint2)r11.xy;
    r1.w = (uint)r1.w >> 24;
    r1.w = (uint)r1.w;
    r2.xyz = r10.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r2.xyz;
    r0.x = r4.w * 0.000203886113 + r0.x;
    r3.xyz = r6.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r3.xyz;
    r0.y = r3.w * 0.000203886113 + r0.y;
    r4.xyz = r7.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r4.xyz;
    r0.z = r2.w * 0.000203886113 + r0.z;
    r5.xyz = r9.xyz * float3(0.000203886113,0.000203886113,0.000203886113) + r5.xyz;
    r1.y = r1.w * 0.000203886113 + r1.y;
    r4.w = g0[vThreadIDInGroup.y].val[r8.y/4];
    r5.w = (int)r4.w & 255;
    r10.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r4.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r4.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r4.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r4.w >> 16;
    r10.yz = (uint2)r8.xy;
    r4.w = (uint)r4.w >> 24;
    r4.w = (uint)r4.w;
    r2.xyz = r6.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r2.xyz;
    r0.x = r3.w * 0.000189830782 + r0.x;
    r3.xyz = r7.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r3.xyz;
    r0.y = r2.w * 0.000189830782 + r0.y;
    r4.xyz = r9.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r4.xyz;
    r0.z = r1.w * 0.000189830782 + r0.z;
    r5.xyz = r10.xyz * float3(0.000189830782,0.000189830782,0.000189830782) + r5.xyz;
    r1.y = r4.w * 0.000189830782 + r1.y;
    r3.w = g0[vThreadIDInGroup.y].val[r8.z/4];
    r5.w = (int)r3.w & 255;
    r6.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r3.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r3.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r3.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r3.w >> 16;
    r6.yz = (uint2)r8.xy;
    r3.w = (uint)r3.w >> 24;
    r3.w = (uint)r3.w;
    r2.xyz = r7.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r2.xyz;
    r0.x = r2.w * 0.000173173903 + r0.x;
    r3.xyz = r9.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r3.xyz;
    r0.y = r1.w * 0.000173173903 + r0.y;
    r4.xyz = r10.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r4.xyz;
    r0.z = r4.w * 0.000173173903 + r0.z;
    r5.xyz = r6.xyz * float3(0.000173173903,0.000173173903,0.000173173903) + r5.xyz;
    r1.y = r3.w * 0.000173173903 + r1.y;
    r2.w = g0[vThreadIDInGroup.y].val[r8.w/4];
    r5.w = (int)r2.w & 255;
    r7.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r2.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r2.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r2.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r2.w >> 16;
    r7.yz = (uint2)r8.xy;
    r2.w = (uint)r2.w >> 24;
    r2.w = (uint)r2.w;
    r2.xyz = r9.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r2.xyz;
    r0.x = r1.w * 0.000154787223 + r0.x;
    r3.xyz = r10.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r3.xyz;
    r0.y = r4.w * 0.000154787223 + r0.y;
    r4.xyz = r6.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r4.xyz;
    r0.z = r3.w * 0.000154787223 + r0.z;
    r5.xyz = r7.xyz * float3(0.000154787223,0.000154787223,0.000154787223) + r5.xyz;
    r1.y = r2.w * 0.000154787223 + r1.y;
    r8.xyzw = (int4)r0.wwww + int4(96,100,104,108);
    r1.w = g0[vThreadIDInGroup.y].val[r8.x/4];
    r5.w = (int)r1.w & 255;
    r9.x = (uint)r5.w;
    if (8 == 0) r11.x = 0; else if (8+8 < 32) {     r11.x = (uint)r1.w << (32-(8 + 8)); r11.x = (uint)r11.x >> (32-8);    } else r11.x = (uint)r1.w >> 8;
    if (8 == 0) r11.y = 0; else if (8+16 < 32) {     r11.y = (uint)r1.w << (32-(8 + 16)); r11.y = (uint)r11.y >> (32-8);    } else r11.y = (uint)r1.w >> 16;
    r9.yz = (uint2)r11.xy;
    r1.w = (uint)r1.w >> 24;
    r1.w = (uint)r1.w;
    r2.xyz = r10.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r2.xyz;
    r0.x = r4.w * 0.000135557828 + r0.x;
    r3.xyz = r6.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r3.xyz;
    r0.y = r3.w * 0.000135557828 + r0.y;
    r4.xyz = r7.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r4.xyz;
    r0.z = r2.w * 0.000135557828 + r0.z;
    r5.xyz = r9.xyz * float3(0.000135557828,0.000135557828,0.000135557828) + r5.xyz;
    r1.y = r1.w * 0.000135557828 + r1.y;
    r4.w = g0[vThreadIDInGroup.y].val[r8.y/4];
    r5.w = (int)r4.w & 255;
    r10.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r4.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r4.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r4.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r4.w >> 16;
    r10.yz = (uint2)r8.xy;
    r4.w = (uint)r4.w >> 24;
    r4.w = (uint)r4.w;
    r2.xyz = r6.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r2.xyz;
    r0.x = r3.w * 0.000116319083 + r0.x;
    r3.xyz = r7.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r3.xyz;
    r0.y = r2.w * 0.000116319083 + r0.y;
    r4.xyz = r9.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r4.xyz;
    r0.z = r1.w * 0.000116319083 + r0.z;
    r5.xyz = r10.xyz * float3(0.000116319083,0.000116319083,0.000116319083) + r5.xyz;
    r1.y = r4.w * 0.000116319083 + r1.y;
    r3.w = g0[vThreadIDInGroup.y].val[r8.z/4];
    r5.w = (int)r3.w & 255;
    r6.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r3.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r3.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r3.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r3.w >> 16;
    r6.yz = (uint2)r8.xy;
    r3.w = (uint)r3.w >> 24;
    r3.w = (uint)r3.w;
    r2.xyz = r7.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r2.xyz;
    r0.x = r2.w * 9.77944364e-05 + r0.x;
    r3.xyz = r9.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r3.xyz;
    r0.y = r1.w * 9.77944364e-05 + r0.y;
    r4.xyz = r10.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r4.xyz;
    r0.z = r4.w * 9.77944364e-05 + r0.z;
    r5.xyz = r6.xyz * float3(9.77944364e-05,9.77944364e-05,9.77944364e-05) + r5.xyz;
    r1.y = r3.w * 9.77944364e-05 + r1.y;
    r2.w = g0[vThreadIDInGroup.y].val[r8.w/4];
    r5.w = (int)r2.w & 255;
    r7.x = (uint)r5.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r2.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r2.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r2.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r2.w >> 16;
    r7.yz = (uint2)r8.xy;
    r2.w = (uint)r2.w >> 24;
    r2.w = (uint)r2.w;
    r2.xyz = r9.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r2.xyz;
    r0.x = r1.w * 8.05590244e-05 + r0.x;
    r3.xyz = r10.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r3.xyz;
    r0.y = r4.w * 8.05590244e-05 + r0.y;
    r4.xyz = r6.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r4.xyz;
    r0.z = r3.w * 8.05590244e-05 + r0.z;
    r5.xyz = r7.xyz * float3(8.05590244e-05,8.05590244e-05,8.05590244e-05) + r5.xyz;
    r1.y = r2.w * 8.05590244e-05 + r1.y;
    r8.xyzw = (int4)r0.wwww + int4(112,116,120,124);
    r0.w = g0[vThreadIDInGroup.y].val[r8.x/4];
    r1.w = (int)r0.w & 255;
    r9.x = (uint)r1.w;
    if (8 == 0) r11.x = 0; else if (8+8 < 32) {     r11.x = (uint)r0.w << (32-(8 + 8)); r11.x = (uint)r11.x >> (32-8);    } else r11.x = (uint)r0.w >> 8;
    if (8 == 0) r11.y = 0; else if (8+16 < 32) {     r11.y = (uint)r0.w << (32-(8 + 16)); r11.y = (uint)r11.y >> (32-8);    } else r11.y = (uint)r0.w >> 16;
    r9.yz = (uint2)r11.xy;
    r0.w = (uint)r0.w >> 24;
    r0.w = (uint)r0.w;
    r2.xyz = r10.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r2.xyz;
    r0.x = r4.w * 6.50206202e-05 + r0.x;
    r3.xyz = r6.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r3.xyz;
    r0.y = r3.w * 6.50206202e-05 + r0.y;
    r4.xyz = r7.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r4.xyz;
    r0.z = r2.w * 6.50206202e-05 + r0.z;
    r5.xyz = r9.xyz * float3(6.50206202e-05,6.50206202e-05,6.50206202e-05) + r5.xyz;
    r1.y = r0.w * 6.50206202e-05 + r1.y;
    r1.w = g0[vThreadIDInGroup.y].val[r8.y/4];
    r4.w = (int)r1.w & 255;
    r10.x = (uint)r4.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r1.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r1.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r1.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r1.w >> 16;
    r10.yz = (uint2)r8.xy;
    r1.w = (uint)r1.w >> 24;
    r1.w = (uint)r1.w;
    r2.xyz = r6.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r2.xyz;
    r0.x = r3.w * 5.14191452e-05 + r0.x;
    r3.xyz = r7.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r3.xyz;
    r0.y = r2.w * 5.14191452e-05 + r0.y;
    r4.xyz = r9.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r4.xyz;
    r0.z = r0.w * 5.14191452e-05 + r0.z;
    r5.xyz = r10.xyz * float3(5.14191452e-05,5.14191452e-05,5.14191452e-05) + r5.xyz;
    r1.y = r1.w * 5.14191452e-05 + r1.y;
    r3.w = g0[vThreadIDInGroup.y].val[r8.z/4];
    r4.w = (int)r3.w & 255;
    r6.x = (uint)r4.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r3.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r3.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r3.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r3.w >> 16;
    r6.yz = (uint2)r8.xy;
    r3.w = (uint)r3.w >> 24;
    r3.w = (uint)r3.w;
    r2.xyz = r7.xyz * float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) + r2.xyz;
    r0.x = r2.w * 3.98414777e-05 + r0.x;
    r3.xyz = r9.xyz * float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) + r3.xyz;
    r0.y = r0.w * 3.98414777e-05 + r0.y;
    r4.xyz = r10.xyz * float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) + r4.xyz;
    r0.z = r1.w * 3.98414777e-05 + r0.z;
    r5.xyz = r6.xyz * float3(3.98414777e-05,3.98414777e-05,3.98414777e-05) + r5.xyz;
    r1.y = r3.w * 3.98414777e-05 + r1.y;
    r2.w = g0[vThreadIDInGroup.y].val[r8.w/4];
    r4.w = (int)r2.w & 255;
    r7.x = (uint)r4.w;
    if (8 == 0) r8.x = 0; else if (8+8 < 32) {     r8.x = (uint)r2.w << (32-(8 + 8)); r8.x = (uint)r8.x >> (32-8);    } else r8.x = (uint)r2.w >> 8;
    if (8 == 0) r8.y = 0; else if (8+16 < 32) {     r8.y = (uint)r2.w << (32-(8 + 16)); r8.y = (uint)r8.y >> (32-8);    } else r8.y = (uint)r2.w >> 16;
    r7.yz = (uint2)r8.xy;
    r2.w = (uint)r2.w >> 24;
    r2.w = (uint)r2.w;
    r2.xyz = r9.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r2.xyz;
    r0.x = r0.w * 3.02470398e-05 + r0.x;
    r3.xyz = r10.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r3.xyz;
    r0.y = r1.w * 3.02470398e-05 + r0.y;
    r4.xyz = r6.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r4.xyz;
    r0.z = r3.w * 3.02470398e-05 + r0.z;
    r5.xyz = r7.xyz * float3(3.02470398e-05,3.02470398e-05,3.02470398e-05) + r5.xyz;
    r0.w = r2.w * 3.02470398e-05 + r1.y;
    r0.xw = float2(1.00000001e-07,1.00000001e-07) + r0.xw;
    r2.xyz = r2.xyz / r0.xxx;
    r0.x = 1.00000001e-07 + r0.y;
    r3.xyz = r3.xyz / r0.xxx;
    r0.x = 1.00000001e-07 + r0.z;
    r0.xyz = r4.xyz / r0.xxx;
    r4.xyz = r5.xyz / r0.www;
  // Fetch the four destination pixels, combine them with the filtered values
  // using their alpha as a lerp weight, and write everything back to the UAV.
    r5.xz = float2(0,1.40129846e-45);
    r5.yw = vThreadIDInGroup.yy;
    r6.xy = (int2)r1.xz + (int2)r5.xy;
    r6.zw = float2(0,0);
    r7.xyzw = input_texture_SM5.Load(r6.xyz).xyzw;
    r2.xyz = -r7.xyz + r2.xyz;
    r7.xyz = r7.www * r2.xyz + r7.xyz;
    output_texture[r6.xy] = r7.xyzw;
    store_uav_typed u0.xyzw, r6.xyyy, r7.xyzw
    r2.xy = (int2)r1.xz + (int2)r5.zw;
    r2.zw = float2(0,0);
    r5.xyzw = input_texture_SM5.Load(r2.xyz).xyzw;
    r3.xyz = -r5.xyz + r3.xyz;
    r5.xyz = r5.www * r3.xyz + r5.xyz;
    output_texture[r2.xy] = r5.xyzw;
    store_uav_typed u0.xyzw, r2.xyyy, r5.xyzw
    r2.xz = float2(2,3);
    r2.yw = vThreadIDInGroup.yy;
    r3.xy = (int2)r1.xz + (int2)r2.xy;
    r3.zw = float2(0,0);
    r5.xyzw = input_texture_SM5.Load(r3.xyz).xyzw;
    r0.xyz = -r5.xyz + r0.xyz;
    r5.xyz = r5.www * r0.xyz + r5.xyz;
    output_texture[r3.xy] = r5.xyzw;
    store_uav_typed u0.xyzw, r3.xyyy, r5.xyzw
    r0.xy = (int2)r1.xz + (int2)r2.zw;
    r0.zw = float2(0,0);
    r1.xyzw = input_texture_SM5.Load(r0.xyz).xyzw;
    r2.xyz = r4.xyz + -r1.xyz;
    r1.xyz = r1.www * r2.xyz + r1.xyz;
    output_texture[r0.xy] = r1.xyzw;
    store_uav_typed u0.xyzw, r0.xyyy, r1.xyzw
  }
  return;
}