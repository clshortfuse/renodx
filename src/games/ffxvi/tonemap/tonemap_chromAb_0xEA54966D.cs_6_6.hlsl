#include "../common.hlsli"

// clang-format off
struct cCommon_Struct {
  float4 cCommon_Struct_000[3];
  int2 cCommon_Struct_048;
  float2 cCommon_Struct_056;
  int2 cCommon_Struct_064;
  float2 cCommon_Struct_072;
  int2 cCommon_Struct_080;
  float2 cCommon_Struct_088;
  float2 cCommon_Struct_096;
  float2 cCommon_Struct_104;
  float2 cCommon_Struct_112;
  float2 cCommon_Struct_120;
  float cCommon_Struct_128;
  float cCommon_Struct_132;
  float cCommon_Struct_136;
  int cCommon_Struct_140;
  int cCommon_Struct_144;
  int cCommon_Struct_148;
  float cCommon_Struct_152;
  float cCommon_Struct_156;
  float cCommon_Struct_160;
  float3 cCommon_Struct_164;
  float3 cCommon_Struct_176;
  float cCommon_Struct_188;
  float cCommon_Struct_192;
  float cCommon_Struct_196;
  int cCommon_Struct_200;
  float cCommon_Struct_204;
  float cCommon_Struct_208;
  float cCommon_Struct_212;
  float cCommon_Struct_216;
  float cCommon_Struct_220;
  float cCommon_Struct_224;
  int cCommon_Struct_228;
  int cCommon_Struct_232;
  float cCommon_Struct_236;
  float cCommon_Struct_240;
  float3 cCommon_Struct_244;
  struct CharaLight {
    float3 CharaLight_000;
    float CharaLight_012;
    float3 CharaLight_016;
    float CharaLight_028;
  } cCommon_Struct_256[4];
  float4 cCommon_Struct_384;
  float3 cCommon_Struct_400;
  float cCommon_Struct_412;
  float4 cCommon_Struct_416;
  float4 cCommon_Struct_432;
  float3 cCommon_Struct_448;
  float cCommon_Struct_460;
  float cCommon_Struct_464;
  int cCommon_Struct_468;
  int cCommon_Struct_472;
  int cCommon_Struct_476;
  int2 cCommon_Struct_480;
  int2 cCommon_Struct_488;
  float cCommon_Struct_496;
  float cCommon_Struct_500;
  float cCommon_Struct_504;
  int cCommon_Struct_508;
  int cCommon_Struct_512;
  int cCommon_Struct_516;
  int cCommon_Struct_520;
  float cCommon_Struct_524;
  struct TranslucentApproximateDepthParameter {
    int TranslucentApproximateDepthParameter_000;
    float TranslucentApproximateDepthParameter_004;
    int TranslucentApproximateDepthParameter_008;
    int TranslucentApproximateDepthParameter_012;
  } cCommon_Struct_528;
  int4 cCommon_Struct_544[1];
  float cCommon_Struct_560;
  int cCommon_Struct_564;
  float2 cCommon_Struct_568;
};
// clang-format on


Texture2D<float4> t0 : register(t0);

Texture3D<float4> t1 : register(t1);

RWTexture2D<float4> u0 : register(u0);

cbuffer cb0 : register(b0) {
  cCommon_Struct cCommon_000 : packoffset(c000.x);
};
// clang-format off
cbuffer cb1 : register(b1) {
  struct cConstant0_Struct {
    struct ChromaticAberrationParameter {
      float4 ChromaticAberrationParameter_000[3];
      float ChromaticAberrationParameter_048;
      int ChromaticAberrationParameter_052;
      int2 ChromaticAberrationParameter_056;
    } cConstant0_Struct_000;
    struct VignetteParameter {
      struct VignetteMechanicalParameter {
        float VignetteMechanicalParameter_000;
        float VignetteMechanicalParameter_004;
        int2 VignetteMechanicalParameter_008;
      } VignetteParameter_000;
      struct VignetteNaturalParameter {
        float VignetteNaturalParameter_000;
        float VignetteNaturalParameter_004;
        float VignetteNaturalParameter_008;
        int VignetteNaturalParameter_012;
      } VignetteParameter_016;
      float3 VignetteParameter_032;
      float VignetteParameter_044;
    } cConstant0_Struct_064;
    struct NightFilterParameter {
      float4 NightFilterParameter_000[30];
    } cConstant0_Struct_112;
    struct FilmGrainParameter {
      float2 FilmGrainParameter_000;
      float2 FilmGrainParameter_008;
      float FilmGrainParameter_016;
      int3 FilmGrainParameter_020;
    } cConstant0_Struct_592;
    struct ColorGradingLutParameter {
      int ColorGradingLutParameter_000;
      float ColorGradingLutParameter_004;
      int2 ColorGradingLutParameter_008;
    } cConstant0_Struct_624;
    struct ColorGradingRuntimeParameter {
      float4 ColorGradingRuntimeParameter_000;
      float4 ColorGradingRuntimeParameter_016;
      float4 ColorGradingRuntimeParameter_032;
      float4 ColorGradingRuntimeParameter_048;
      float4 ColorGradingRuntimeParameter_064;
    } cConstant0_Struct_640;
    struct ColorGradingRuntime2Parameter {
      float4 ColorGradingRuntime2Parameter_000;
      float4 ColorGradingRuntime2Parameter_016;
      float4 ColorGradingRuntime2Parameter_032;
    } cConstant0_Struct_720;
    struct ToneMappingParameter {
      struct TripleSectionToneMappingParams {
        float TripleSectionToneMappingParams_000;
        float TripleSectionToneMappingParams_004;
        float TripleSectionToneMappingParams_008;
        float TripleSectionToneMappingParams_012;
        float TripleSectionToneMappingParams_016;
        float TripleSectionToneMappingParams_020;
        int2 TripleSectionToneMappingParams_024;
        float4 TripleSectionToneMappingParams_032;
      } ToneMappingParameter_000;
      float ToneMappingParameter_048;
      float ToneMappingParameter_052;
      int2 ToneMappingParameter_056;
    } cConstant0_Struct_768;
    float cConstant0_Struct_832;
    int3 cConstant0_Struct_836;
  } cConstant0_000 : packoffset(c000.x);
};
// clang-format on
SamplerState s0 : register(s0);

[numthreads(8, 8, 1)]
void main(
  uint3 SV_DispatchThreadID : SV_DispatchThreadID,
  uint3 SV_GroupID : SV_GroupID,
  uint3 SV_GroupThreadID : SV_GroupThreadID,
  uint SV_GroupIndex : SV_GroupIndex
) {
  float peak_ratio = cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_000;
  AdjustPeak(peak_ratio);

  float _11 = float((uint)(SV_DispatchThreadID.x));
  float _12 = float((uint)(SV_DispatchThreadID.y));
  float _13 = _11 + 0.5f;
  float _14 = _12 + 0.5f;
  float _18 = cCommon_000.cCommon_Struct_088.x * _13;
  float _19 = _14 * cCommon_000.cCommon_Struct_088.y;
  bool _23 = ((uint)cCommon_000.cCommon_Struct_064.x <= (uint)(uint)(SV_DispatchThreadID.x));
  bool _24 = ((uint)cCommon_000.cCommon_Struct_064.y <= (uint)(uint)(SV_DispatchThreadID.y));
  bool _25 = _23 || _24;
  float _65;
  float _66;
  float _67;
  float _68;
  int _69;
  float _165;
  float _166;
  float _167;
  float _168;
  if (!_25) {
    float _30 = cCommon_000.cCommon_Struct_104.x * _18;
    float _31 = cCommon_000.cCommon_Struct_104.y * _19;
    float _34 = _30 + -0.5f;
    float _35 = _31 + -0.5f;
    float _36 = 1.0f / cConstant0_000.cConstant0_Struct_832;
    float _37 = _35 * _36;
    float _38 = _34 * _34;
    float _39 = _37 * _37;
    float _40 = _39 + _38;
    float _41 = sqrt(_40);
    float _42 = _41 * 1.4142135381698608f;
    float _43 = saturate(_42);
    float _45 = cCommon_000.cCommon_Struct_096.y - _19;
    float _46 = _18 * 2.0f;
    float _47 = _45 * 2.0f;
    float _49 = _46 - cCommon_000.cCommon_Struct_096.x;
    float _50 = _47 - cCommon_000.cCommon_Struct_096.y;
    float _53 = float((uint)(int)(cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052));
    float _54 = 1.0f / _53;
    float _59 = cCommon_000.cCommon_Struct_072.y * _43;
    float _60 = _59 * cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_048;
    float _61 = _60 * cCommon_000.cCommon_Struct_096.x;
    bool _62 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052 == 0);
    if (!_62) {
      _65 = 0.0f;
      _66 = 0.0f;
      _67 = 0.0f;
      _68 = 0.0f;
      _69 = 0;
      while(true) {
        uint _70 = _69 + 1u;
        float _71 = float((uint)_70);
        float _72 = _61 * 0.3333333432674408f;
        float _73 = _72 * _71;
        float _74 = 1.0f - _73;
        float _75 = _74 * _49;
        float _76 = _74 * _50;
        float _80 = _75 + cCommon_000.cCommon_Struct_096.x;
        float _81 = cCommon_000.cCommon_Struct_096.y - _76;
        float _82 = _80 * 0.5f;
        float _83 = _81 * 0.5f;
        float4 _86 = t0.SampleLevel(s0, float2(_82, _83), 0.0f);
        float _95 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].x) * _86.x;
        float _96 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].y) * _86.y;
        float _97 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].z) * _86.z;
        uint _98 = _69 + 2u;
        float _99 = float((uint)_98);
        float _100 = _72 * _99;
        float _101 = 1.0f - _100;
        float _102 = _101 * _49;
        float _103 = _101 * _50;
        float _104 = cCommon_000.cCommon_Struct_096.x + _102;
        float _105 = cCommon_000.cCommon_Struct_096.y - _103;
        float _106 = _104 * 0.5f;
        float _107 = _105 * 0.5f;
        float4 _108 = t0.SampleLevel(s0, float2(_106, _107), 0.0f);
        float _117 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].x) * _108.x;
        float _118 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].y) * _108.y;
        float _119 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].z) * _108.z;
        uint _120 = _69 + 3u;
        float _121 = float((uint)_120);
        float _122 = _72 * _121;
        float _123 = 1.0f - _122;
        float _124 = _123 * _49;
        float _125 = _123 * _50;
        float _126 = cCommon_000.cCommon_Struct_096.x + _124;
        float _127 = cCommon_000.cCommon_Struct_096.y - _125;
        float _128 = _126 * 0.5f;
        float _129 = _127 * 0.5f;
        float4 _130 = t0.SampleLevel(s0, float2(_128, _129), 0.0f);
        float _139 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].x) * _130.x;
        float _140 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].y) * _130.y;
        float _141 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].z) * _130.z;
        float _142 = _117 + _95;
        float _143 = _142 + _139;
        float _144 = _143 * _54;
        float _145 = _144 + _65;
        float _146 = _118 + _96;
        float _147 = _146 + _140;
        float _148 = _147 * _54;
        float _149 = _148 + _66;
        float _150 = _119 + _97;
        float _151 = _150 + _141;
        float _152 = _151 * _54;
        float _153 = _152 + _67;
        float _154 = _108.w + _86.w;
        float _155 = _154 + _130.w;
        float _156 = _155 * _54;
        float _157 = _156 + _68;
        bool _158 = (_70 == cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052);
        if (!_158) {
          _65 = _145;
          _66 = _149;
          _67 = _153;
          _68 = _157;
          _69 = _70;
          continue;
        }
        float _160 = _157 * 0.3333333432674408f;
        float _161 = _145 * 0.009999999776482582f;
        float _162 = _149 * 0.009999999776482582f;
        float _163 = _153 * 0.009999999776482582f;
        _165 = _161;
        _166 = _162;
        _167 = _163;
        _168 = _160;
        break;
      }
    } else {
      _165 = 0.0f;
      _166 = 0.0f;
      _167 = 0.0f;
      _168 = 0.0f;
    }
    float _169 = float((uint)SV_DispatchThreadID.x);
    float _170 = float((uint)SV_DispatchThreadID.y);
    float _173 = 1.0f / cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_016;
    float _174 = _173 * _169;
    float _175 = _173 * _170;
    float _176 = ceil(_174);
    float _177 = ceil(_175);
    uint _178 = uint(_176);
    uint _179 = uint(_177);
    float _180 = float((uint)_178);
    float _181 = float((uint)_179);
    float _182 = cCommon_000.cCommon_Struct_088.x * _180;
    float _183 = _181 * cCommon_000.cCommon_Struct_088.y;
    float _187 = _182 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_008.x;
    float _188 = _183 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_008.y;
    float _189 = _188 * 543.3099975585938f;
    float _190 = _187 + _189;
    float _191 = sin(_190);
    float _192 = _191 * 493013.0f;
    float _193 = frac(_192);
    float _195 = cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_000.x * _193;
    float _197 = _195 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_000.y;
    float _198 = _165 * _197;
    float _199 = _166 * _197;
    float _200 = _167 * _197;
    float _201 = abs(_198);
    float _202 = abs(_199);
    float _203 = abs(_200);
    float _204 = log2(_201);
    float _205 = log2(_202);
    float _206 = log2(_203);
    float _207 = _204 * 0.1593017578125f;
    float _208 = _205 * 0.1593017578125f;
    float _209 = _206 * 0.1593017578125f;
    float _210 = exp2(_207);
    float _211 = exp2(_208);
    float _212 = exp2(_209);
    float _213 = _210 * 2.05784010887146f;
    float _214 = _211 * 2.05784010887146f;
    float _215 = _212 * 2.05784010887146f;
    float _216 = _213 + -0.10128399729728699f;
    float _217 = _214 + -0.10128399729728699f;
    float _218 = _215 + -0.10128399729728699f;
    float _219 = _216 * _210;
    float _220 = _217 * _211;
    float _221 = _218 * _212;
    float _222 = _219 + 0.001028590020723641f;
    float _223 = _220 + 0.001028590020723641f;
    float _224 = _221 + 0.001028590020723641f;
    float _225 = _222 * _210;
    float _226 = _223 * _211;
    float _227 = _224 * _212;
    float _228 = _225 + 3.6197199904108857e-08f;
    float _229 = _226 + 3.6197199904108857e-08f;
    float _230 = _227 + 3.6197199904108857e-08f;
    float _231 = _210 + 0.7726690173149109f;
    float _232 = _211 + 0.7726690173149109f;
    float _233 = _212 + 0.7726690173149109f;
    float _234 = _231 * _210;
    float _235 = _232 * _211;
    float _236 = _233 * _212;
    float _237 = _234 + 0.13521400094032288f;
    float _238 = _235 + 0.13521400094032288f;
    float _239 = _236 + 0.13521400094032288f;
    float _240 = _237 * _210;
    float _241 = _238 * _211;
    float _242 = _239 * _212;
    float _243 = _240 + 0.04952450096607208f;
    float _244 = _241 + 0.04952450096607208f;
    float _245 = _242 + 0.04952450096607208f;
    float _246 = _228 / _243;
    float _247 = _229 / _244;
    float _248 = _230 / _245;
    float _251 = float((uint)(int)(cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_000));
    float _252 = 1.0f / _251;
    uint _253 = (int)(cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_000) + -1u;
    float _254 = float((uint)_253);
    float _255 = _254 * _252;
    float _256 = _252 * 0.5f;
    float _257 = _255 * _246;
    float _258 = _255 * _247;
    float _259 = _255 * _248;
    float _260 = _257 + _256;
    float _261 = _258 + _256;
    float _262 = _259 + _256;
    float4 _265 = t1.SampleLevel(s0, float3(_260, _261, _262), 0.0f);
    float _271 = _265.x - _246;
    float _272 = _265.y - _247;
    float _273 = _265.z - _248;
    float _274 = RENODX_COLOR_GRADE_STRENGTH * cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_004 * _271;
    float _275 = RENODX_COLOR_GRADE_STRENGTH * cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_004 * _272;
    float _276 = RENODX_COLOR_GRADE_STRENGTH * cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_004 * _273;
    float _277 = _274 + _246;
    float _278 = _275 + _247;
    float _279 = _276 + _248;
    float _280 = abs(_277);
    float _281 = abs(_278);
    float _282 = abs(_279);
    float _283 = log2(_280);
    float _284 = log2(_281);
    float _285 = log2(_282);
    float _286 = _283 * 0.012683313339948654f;
    float _287 = _284 * 0.012683313339948654f;
    float _288 = _285 * 0.012683313339948654f;
    float _289 = exp2(_286);
    float _290 = exp2(_287);
    float _291 = exp2(_288);
    float _292 = _289 * 18.6875f;
    float _293 = _290 * 18.6875f;
    float _294 = _291 * 18.6875f;
    float _295 = 18.8515625f - _292;
    float _296 = 18.8515625f - _293;
    float _297 = 18.8515625f - _294;
    float _298 = _289 + -0.8359375f;
    float _299 = _290 + -0.8359375f;
    float _300 = _291 + -0.8359375f;
    float _301 = max(_298, 0.0f);
    float _302 = max(_299, 0.0f);
    float _303 = max(_300, 0.0f);
    float _304 = _301 / _295;
    float _305 = _302 / _296;
    float _306 = _303 / _297;
    float _307 = abs(_304);
    float _308 = abs(_305);
    float _309 = abs(_306);
    float _310 = log2(_307);
    float _311 = log2(_308);
    float _312 = log2(_309);
    float _313 = _310 * 6.277394771575928f;
    float _314 = _311 * 6.277394771575928f;
    float _315 = _312 * 6.277394771575928f;
    float _316 = exp2(_313);
    float _317 = exp2(_314);
    float _318 = exp2(_315);
    float _319 = _316 * 100.0f;
    float _320 = _317 * 100.0f;
    float _321 = _318 * 100.0f;
    float _325 = cCommon_000.cCommon_Struct_104.x * _18;
    float _326 = _19 * 543.3099975585938f;
    float _327 = _326 * cCommon_000.cCommon_Struct_104.y;
    float _328 = _327 + _325;
    float _329 = sin(_328);
    float _330 = _329 * 493013.0f;
    float _331 = frac(_330);
    float _332 = _331 * 0.0009765625f;
    float _333 = _332 + -0.00048828125f;
    float _334 = _333 + _319;
    float _335 = _333 + _320;
    float _336 = _333 + _321;

    float y_in;
    float3 untonemapped = ApplySliders(_334, _335, _336, y_in);

    float _339 = _334 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _340 = _335 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _341 = _336 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _353 = _339 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _354 = _340 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _355 = _341 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _356 = _353 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _357 = _354 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _358 = _355 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _359 = _356 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _360 = _357 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _361 = _358 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _362 = _339 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _363 = _340 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _364 = _341 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _365 = abs(_362);
    float _366 = abs(_363);
    float _367 = abs(_364);
    float _368 = log2(_365);
    float _369 = log2(_366);
    float _370 = log2(_367);
    float _371 = _368 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _372 = _369 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _373 = _370 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _374 = exp2(_371);
    float _375 = exp2(_372);
    float _376 = exp2(_373);
    float _377 = _374 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _378 = _375 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _379 = _376 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _380 = _377 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _381 = _378 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _382 = _379 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _383 = peak_ratio - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.y;
    float _384 = -0.0f - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.z;
    float _385 = _339 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _386 = _340 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _387 = _341 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _388 = _385 * _384;
    float _389 = _386 * _384;
    float _390 = _387 * _384;
    float _391 = _388 / peak_ratio;
    float _392 = _389 / peak_ratio;
    float _393 = _390 / peak_ratio;
    float _394 = _391 * 1.4426950216293335f;
    float _395 = _392 * 1.4426950216293335f;
    float _396 = _393 * 1.4426950216293335f;
    float _397 = exp2(_394);
    float _398 = exp2(_395);
    float _399 = exp2(_396);
    float _400 = _397 * _383;
    float _401 = _398 * _383;
    float _402 = _399 * _383;
    float _403 = peak_ratio - _400;
    float _404 = peak_ratio - _401;
    float _405 = peak_ratio - _402;
    float _406 = saturate(_362);
    float _407 = saturate(_363);
    float _408 = saturate(_364);
    float _409 = _406 * 2.0f;
    float _410 = _407 * 2.0f;
    float _411 = _408 * 2.0f;
    float _412 = 3.0f - _409;
    float _413 = 3.0f - _410;
    float _414 = 3.0f - _411;
    float _415 = _406 * _406;
    float _416 = _415 * _412;
    float _417 = _407 * _407;
    float _418 = _417 * _413;
    float _419 = _408 * _408;
    float _420 = _419 * _414;
    float _421 = 1.0f - _416;
    float _422 = 1.0f - _418;
    float _423 = 1.0f - _420;
    bool _424 = (_339 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _425 = (_340 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _426 = (_341 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    float _427 = select(_424, 0.0f, 1.0f);
    float _428 = select(_425, 0.0f, 1.0f);
    float _429 = select(_426, 0.0f, 1.0f);
    float _430 = _416 - _427;
    float _431 = _418 - _428;
    float _432 = _420 - _429;
    float _433 = _421 * _380;
    float _434 = _422 * _381;
    float _435 = _423 * _382;
    float _436 = _430 * _359;
    float _437 = _431 * _360;
    float _438 = _432 * _361;
    float _439 = _403 * _427;
    float _440 = _404 * _428;
    float _441 = _405 * _429;
    float _442 = _436 + _439;
    float _443 = _442 + _433;
    float _444 = _437 + _440;
    float _445 = _444 + _434;
    float _446 = _438 + _441;
    float _447 = _446 + _435;

    FinalizeToneMap(_443, _445, _447, untonemapped, y_in);

    float _449 = _443 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _450 = _445 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _451 = _447 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _452 = _449 * 0.6274039149284363f;
    float _453 = mad(0.3292830288410187f, _450, _452);
    float _454 = mad(0.04331306740641594f, _451, _453);
    float _455 = _449 * 0.06909728795289993f;
    float _456 = mad(0.9195404052734375f, _450, _455);
    float _457 = mad(0.011362315155565739f, _451, _456);
    float _458 = _449 * 0.016391439363360405f;
    float _459 = mad(0.08801330626010895f, _450, _458);
    float _460 = mad(0.8955952525138855f, _451, _459);
    float _461 = _454 * 0.009999999776482582f;
    float _462 = _457 * 0.009999999776482582f;
    float _463 = _460 * 0.009999999776482582f;
    float _464 = abs(_461);
    float _465 = abs(_462);
    float _466 = abs(_463);
    float _467 = log2(_464);
    float _468 = log2(_465);
    float _469 = log2(_466);
    float _470 = _467 * 0.1593017578125f;
    float _471 = _468 * 0.1593017578125f;
    float _472 = _469 * 0.1593017578125f;
    float _473 = exp2(_470);
    float _474 = exp2(_471);
    float _475 = exp2(_472);
    float _476 = _473 * 2.05784010887146f;
    float _477 = _474 * 2.05784010887146f;
    float _478 = _475 * 2.05784010887146f;
    float _479 = _476 + -0.10128399729728699f;
    float _480 = _477 + -0.10128399729728699f;
    float _481 = _478 + -0.10128399729728699f;
    float _482 = _479 * _473;
    float _483 = _480 * _474;
    float _484 = _481 * _475;
    float _485 = _482 + 0.001028590020723641f;
    float _486 = _483 + 0.001028590020723641f;
    float _487 = _484 + 0.001028590020723641f;
    float _488 = _485 * _473;
    float _489 = _486 * _474;
    float _490 = _487 * _475;
    float _491 = _488 + 3.6197199904108857e-08f;
    float _492 = _489 + 3.6197199904108857e-08f;
    float _493 = _490 + 3.6197199904108857e-08f;
    float _494 = _473 + 0.7726690173149109f;
    float _495 = _474 + 0.7726690173149109f;
    float _496 = _475 + 0.7726690173149109f;
    float _497 = _494 * _473;
    float _498 = _495 * _474;
    float _499 = _496 * _475;
    float _500 = _497 + 0.13521400094032288f;
    float _501 = _498 + 0.13521400094032288f;
    float _502 = _499 + 0.13521400094032288f;
    float _503 = _500 * _473;
    float _504 = _501 * _474;
    float _505 = _502 * _475;
    float _506 = _503 + 0.04952450096607208f;
    float _507 = _504 + 0.04952450096607208f;
    float _508 = _505 + 0.04952450096607208f;
    float _509 = _491 / _506;
    float _510 = _492 / _507;
    float _511 = _493 / _508;
    float _512 = saturate(_509);
    float _513 = saturate(_510);
    float _514 = saturate(_511);
    u0[int2((uint)(SV_DispatchThreadID.x), (uint)(SV_DispatchThreadID.y))] = float4(_512, _513, _514, _168);
  }
}
