#include "../common.hlsli"

// clang-format off
struct cCommon_Struct {
  float4 cCommon_Struct_000[3];
  int2 cCommon_Struct_048;
  float2 cCommon_Struct_056;
  int2 cCommon_Struct_064;
  float2 cCommon_Struct_072;
  int2 cCommon_Struct_080;
  float2 cCommon_Struct_088;
  float2 cCommon_Struct_096;
  float2 cCommon_Struct_104;
  float2 cCommon_Struct_112;
  float2 cCommon_Struct_120;
  float cCommon_Struct_128;
  float cCommon_Struct_132;
  float cCommon_Struct_136;
  int cCommon_Struct_140;
  int cCommon_Struct_144;
  int cCommon_Struct_148;
  float cCommon_Struct_152;
  float cCommon_Struct_156;
  float cCommon_Struct_160;
  float3 cCommon_Struct_164;
  float3 cCommon_Struct_176;
  float cCommon_Struct_188;
  float cCommon_Struct_192;
  float cCommon_Struct_196;
  int cCommon_Struct_200;
  float cCommon_Struct_204;
  float cCommon_Struct_208;
  float cCommon_Struct_212;
  float cCommon_Struct_216;
  float cCommon_Struct_220;
  float cCommon_Struct_224;
  int cCommon_Struct_228;
  int cCommon_Struct_232;
  float cCommon_Struct_236;
  float cCommon_Struct_240;
  float3 cCommon_Struct_244;
  struct CharaLight {
    float3 CharaLight_000;
    float CharaLight_012;
    float3 CharaLight_016;
    float CharaLight_028;
  } cCommon_Struct_256[4];
  float4 cCommon_Struct_384;
  float3 cCommon_Struct_400;
  float cCommon_Struct_412;
  float4 cCommon_Struct_416;
  float4 cCommon_Struct_432;
  float3 cCommon_Struct_448;
  float cCommon_Struct_460;
  float cCommon_Struct_464;
  int cCommon_Struct_468;
  int cCommon_Struct_472;
  int cCommon_Struct_476;
  int2 cCommon_Struct_480;
  int2 cCommon_Struct_488;
  float cCommon_Struct_496;
  float cCommon_Struct_500;
  float cCommon_Struct_504;
  int cCommon_Struct_508;
  int cCommon_Struct_512;
  int cCommon_Struct_516;
  int cCommon_Struct_520;
  float cCommon_Struct_524;
  struct TranslucentApproximateDepthParameter {
    int TranslucentApproximateDepthParameter_000;
    float TranslucentApproximateDepthParameter_004;
    int TranslucentApproximateDepthParameter_008;
    int TranslucentApproximateDepthParameter_012;
  } cCommon_Struct_528;
  int4 cCommon_Struct_544[1];
  float cCommon_Struct_560;
  int cCommon_Struct_564;
  float2 cCommon_Struct_568;
};
// clang-format on


Texture2D<float4> t0 : register(t0);

RWTexture2D<float4> u0 : register(u0);

cbuffer cb0 : register(b0) {
  cCommon_Struct cCommon_000 : packoffset(c000.x);
};
// clang-format off
cbuffer cb1 : register(b1) {
  struct cConstant0_Struct {
    struct ChromaticAberrationParameter {
      float4 ChromaticAberrationParameter_000[3];
      float ChromaticAberrationParameter_048;
      int ChromaticAberrationParameter_052;
      int2 ChromaticAberrationParameter_056;
    } cConstant0_Struct_000;
    struct VignetteParameter {
      struct VignetteMechanicalParameter {
        float VignetteMechanicalParameter_000;
        float VignetteMechanicalParameter_004;
        int2 VignetteMechanicalParameter_008;
      } VignetteParameter_000;
      struct VignetteNaturalParameter {
        float VignetteNaturalParameter_000;
        float VignetteNaturalParameter_004;
        float VignetteNaturalParameter_008;
        int VignetteNaturalParameter_012;
      } VignetteParameter_016;
      float3 VignetteParameter_032;
      float VignetteParameter_044;
    } cConstant0_Struct_064;
    struct NightFilterParameter {
      float4 NightFilterParameter_000[30];
    } cConstant0_Struct_112;
    struct FilmGrainParameter {
      float2 FilmGrainParameter_000;
      float2 FilmGrainParameter_008;
      float FilmGrainParameter_016;
      int3 FilmGrainParameter_020;
    } cConstant0_Struct_592;
    struct ColorGradingLutParameter {
      int ColorGradingLutParameter_000;
      float ColorGradingLutParameter_004;
      int2 ColorGradingLutParameter_008;
    } cConstant0_Struct_624;
    struct ColorGradingRuntimeParameter {
      float4 ColorGradingRuntimeParameter_000;
      float4 ColorGradingRuntimeParameter_016;
      float4 ColorGradingRuntimeParameter_032;
      float4 ColorGradingRuntimeParameter_048;
      float4 ColorGradingRuntimeParameter_064;
    } cConstant0_Struct_640;
    struct ColorGradingRuntime2Parameter {
      float4 ColorGradingRuntime2Parameter_000;
      float4 ColorGradingRuntime2Parameter_016;
      float4 ColorGradingRuntime2Parameter_032;
    } cConstant0_Struct_720;
    struct ToneMappingParameter {
      struct TripleSectionToneMappingParams {
        float TripleSectionToneMappingParams_000;
        float TripleSectionToneMappingParams_004;
        float TripleSectionToneMappingParams_008;
        float TripleSectionToneMappingParams_012;
        float TripleSectionToneMappingParams_016;
        float TripleSectionToneMappingParams_020;
        int2 TripleSectionToneMappingParams_024;
        float4 TripleSectionToneMappingParams_032;
      } ToneMappingParameter_000;
      float ToneMappingParameter_048;
      float ToneMappingParameter_052;
      int2 ToneMappingParameter_056;
    } cConstant0_Struct_768;
    float cConstant0_Struct_832;
    int3 cConstant0_Struct_836;
  } cConstant0_000 : packoffset(c000.x);
};
// clang-format on
[numthreads(8, 8, 1)]
void main(
  uint3 SV_DispatchThreadID : SV_DispatchThreadID,
  uint3 SV_GroupID : SV_GroupID,
  uint3 SV_GroupThreadID : SV_GroupThreadID,
  uint SV_GroupIndex : SV_GroupIndex
) {
  float peak_ratio = cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_000;
  AdjustPeak(peak_ratio);

  bool _13 = ((uint)cCommon_000.cCommon_Struct_064.x <= (uint)(uint)(SV_DispatchThreadID.x));
  bool _14 = ((uint)cCommon_000.cCommon_Struct_064.y <= (uint)(uint)(SV_DispatchThreadID.y));
  bool _15 = _13 || _14;
  if (!_15) {
    float _17 = float((uint)(SV_DispatchThreadID.y));
    float _18 = _17 + 0.5f;
    float _20 = float((uint)(SV_DispatchThreadID.x));
    float _21 = _20 + 0.5f;
    float _23 = cCommon_000.cCommon_Struct_088.x * _21;
    float4 _25 = t0.Load(int3((uint)(SV_DispatchThreadID.x), (uint)(SV_DispatchThreadID.y), 0));
    float _30 = float((uint)SV_DispatchThreadID.x);
    float _31 = float((uint)SV_DispatchThreadID.y);
    float _34 = 1.0f / cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_016;
    float _35 = _34 * _30;
    float _36 = _34 * _31;
    float _37 = ceil(_35);
    float _38 = ceil(_36);
    uint _39 = uint(_37);
    uint _40 = uint(_38);
    float _41 = float((uint)_39);
    float _42 = float((uint)_40);
    float _46 = cCommon_000.cCommon_Struct_088.x * _41;
    float _47 = _42 * cCommon_000.cCommon_Struct_088.y;
    float _51 = _46 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_008.x;
    float _52 = _47 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_008.y;
    float _53 = _52 * 543.3099975585938f;
    float _54 = _51 + _53;
    float _55 = sin(_54);
    float _56 = _55 * 493013.0f;
    float _57 = frac(_56);
    float _59 = cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_000.x * _57;
    float _61 = _59 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_000.y;
    float _62 = _61 * _25.x;
    float _63 = _61 * _25.y;
    float _64 = _61 * _25.z;
    float _65 = dot(float3(_62, _63, _64), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
    float _70 = _62 - _65;
    float _71 = _63 - _65;
    float _72 = _64 - _65;
    float _73 = _70 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_000.x;
    float _74 = _71 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_000.y;
    float _75 = _72 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_000.z;
    float _76 = _73 + _65;
    float _77 = _74 + _65;
    float _78 = _75 + _65;
    float _79 = max(0.0f, _76);
    float _80 = max(0.0f, _77);
    float _81 = max(0.0f, _78);
    float _86 = _79 * 0.0005555555690079927f;
    float _87 = _80 * 0.0005555555690079927f;
    float _88 = _81 * 0.0005555555690079927f;
    float _89 = abs(_86);
    float _90 = abs(_87);
    float _91 = abs(_88);
    float _92 = log2(_89);
    float _93 = log2(_90);
    float _94 = log2(_91);
    float _95 = _92 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_016.x;
    float _96 = _93 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_016.y;
    float _97 = _94 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_016.z;
    float _98 = exp2(_95);
    float _99 = exp2(_96);
    float _100 = exp2(_97);
    float _101 = _98 * 1800.0f;
    float _102 = _99 * 1800.0f;
    float _103 = _100 * 1800.0f;
    float _108 = _101 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_048.x;
    float _109 = _102 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_048.y;
    float _110 = _103 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_048.z;
    float _115 = _108 + cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_064.x;
    float _116 = _109 + cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_064.y;
    float _117 = _110 + cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_064.z;
    float _122 = _115 * 9.999999747378752e-05f;
    float _123 = _116 * 9.999999747378752e-05f;
    float _124 = _117 * 9.999999747378752e-05f;
    float _125 = abs(_122);
    float _126 = abs(_123);
    float _127 = abs(_124);
    float _128 = log2(_125);
    float _129 = log2(_126);
    float _130 = log2(_127);
    float _131 = _128 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_032.x;
    float _132 = _129 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_032.y;
    float _133 = _130 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_032.z;
    float _134 = exp2(_131);
    float _135 = exp2(_132);
    float _136 = exp2(_133);
    float _137 = _134 * 10000.0f;
    float _138 = _135 * 10000.0f;
    float _139 = _136 * 10000.0f;
    float _140 = dot(float3(_137, _138, _139), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
    float _145 = _137 - _140;
    float _146 = _138 - _140;
    float _147 = _139 - _140;
    float _148 = cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_000.x * _145;
    float _149 = cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_000.y * _146;
    float _150 = cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_000.z * _147;
    float _151 = _148 + _140;
    float _152 = _149 + _140;
    float _153 = _150 + _140;
    float _154 = max(0.0f, _151);
    float _155 = max(0.0f, _152);
    float _156 = max(0.0f, _153);
    float _161 = _154 * 5.55555534362793f;
    float _162 = _155 * 5.55555534362793f;
    float _163 = _156 * 5.55555534362793f;
    float _164 = abs(_161);
    float _165 = abs(_162);
    float _166 = abs(_163);
    float _167 = log2(_164);
    float _168 = log2(_165);
    float _169 = log2(_166);
    float _170 = _167 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_016.x;
    float _171 = _168 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_016.y;
    float _172 = _169 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_016.z;
    float _173 = exp2(_170);
    float _174 = exp2(_171);
    float _175 = exp2(_172);
    float _180 = _173 * 0.0018000000854954123f;
    float _181 = _174 * 0.0018000000854954123f;
    float _182 = _175 * 0.0018000000854954123f;
    float _183 = abs(_180);
    float _184 = abs(_181);
    float _185 = abs(_182);
    float _186 = log2(_183);
    float _187 = log2(_184);
    float _188 = log2(_185);
    float _189 = _186 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_032.x;
    float _190 = _187 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_032.y;
    float _191 = _188 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_032.z;
    float _192 = exp2(_189);
    float _193 = exp2(_190);
    float _194 = exp2(_191);
    float _195 = _192 * 100.0f;
    float _196 = _193 * 100.0f;
    float _197 = _194 * 100.0f;
    float _201 = _23 * cCommon_000.cCommon_Struct_104.x;
    float _202 = cCommon_000.cCommon_Struct_088.y * 543.3099975585938f;
    float _203 = _202 * _18;
    float _204 = _203 * cCommon_000.cCommon_Struct_104.y;
    float _205 = _204 + _201;
    float _206 = sin(_205);
    float _207 = _206 * 493013.0f;
    float _208 = frac(_207);
    float _209 = _208 * 0.0009765625f;
    float _210 = _209 + -0.00048828125f;
    float _211 = _210 + _195;
    float _212 = _210 + _196;
    float _213 = _210 + _197;

    float y_in;
    float3 untonemapped = ApplySliders(_211, _212, _213, y_in);

    float _216 = _211 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _217 = _212 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _218 = _213 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _230 = _216 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _231 = _217 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _232 = _218 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _233 = _230 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _234 = _231 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _235 = _232 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _236 = _233 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _237 = _234 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _238 = _235 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _239 = _216 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _240 = _217 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _241 = _218 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _242 = abs(_239);
    float _243 = abs(_240);
    float _244 = abs(_241);
    float _245 = log2(_242);
    float _246 = log2(_243);
    float _247 = log2(_244);
    float _248 = _245 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _249 = _246 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _250 = _247 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _251 = exp2(_248);
    float _252 = exp2(_249);
    float _253 = exp2(_250);
    float _254 = _251 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _255 = _252 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _256 = _253 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _257 = _254 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _258 = _255 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _259 = _256 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _260 = peak_ratio - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.y;
    float _261 = -0.0f - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.z;
    float _262 = _216 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _263 = _217 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _264 = _218 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _265 = _262 * _261;
    float _266 = _263 * _261;
    float _267 = _264 * _261;
    float _268 = _265 / peak_ratio;
    float _269 = _266 / peak_ratio;
    float _270 = _267 / peak_ratio;
    float _271 = _268 * 1.4426950216293335f;
    float _272 = _269 * 1.4426950216293335f;
    float _273 = _270 * 1.4426950216293335f;
    float _274 = exp2(_271);
    float _275 = exp2(_272);
    float _276 = exp2(_273);
    float _277 = _274 * _260;
    float _278 = _275 * _260;
    float _279 = _276 * _260;
    float _280 = peak_ratio - _277;
    float _281 = peak_ratio - _278;
    float _282 = peak_ratio - _279;
    float _283 = saturate(_239);
    float _284 = saturate(_240);
    float _285 = saturate(_241);
    float _286 = _283 * 2.0f;
    float _287 = _284 * 2.0f;
    float _288 = _285 * 2.0f;
    float _289 = 3.0f - _286;
    float _290 = 3.0f - _287;
    float _291 = 3.0f - _288;
    float _292 = _283 * _283;
    float _293 = _292 * _289;
    float _294 = _284 * _284;
    float _295 = _294 * _290;
    float _296 = _285 * _285;
    float _297 = _296 * _291;
    float _298 = 1.0f - _293;
    float _299 = 1.0f - _295;
    float _300 = 1.0f - _297;
    bool _301 = (_216 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _302 = (_217 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _303 = (_218 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    float _304 = select(_301, 0.0f, 1.0f);
    float _305 = select(_302, 0.0f, 1.0f);
    float _306 = select(_303, 0.0f, 1.0f);
    float _307 = _293 - _304;
    float _308 = _295 - _305;
    float _309 = _297 - _306;
    float _310 = _298 * _257;
    float _311 = _299 * _258;
    float _312 = _300 * _259;
    float _313 = _307 * _236;
    float _314 = _308 * _237;
    float _315 = _309 * _238;
    float _316 = _280 * _304;
    float _317 = _281 * _305;
    float _318 = _282 * _306;
    float _319 = _313 + _316;
    float _320 = _319 + _310;
    float _321 = _314 + _317;
    float _322 = _321 + _311;
    float _323 = _315 + _318;
    float _324 = _323 + _312;

    FinalizeToneMap(_320, _322, _324, untonemapped, y_in);

    float _326 = _320 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _327 = _322 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _328 = _324 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _329 = _326 * 0.6274039149284363f;
    float _330 = mad(0.3292830288410187f, _327, _329);
    float _331 = mad(0.04331306740641594f, _328, _330);
    float _332 = _326 * 0.06909728795289993f;
    float _333 = mad(0.9195404052734375f, _327, _332);
    float _334 = mad(0.011362315155565739f, _328, _333);
    float _335 = _326 * 0.016391439363360405f;
    float _336 = mad(0.08801330626010895f, _327, _335);
    float _337 = mad(0.8955952525138855f, _328, _336);
    float _338 = _331 * 0.009999999776482582f;
    float _339 = _334 * 0.009999999776482582f;
    float _340 = _337 * 0.009999999776482582f;
    float _341 = abs(_338);
    float _342 = abs(_339);
    float _343 = abs(_340);
    float _344 = log2(_341);
    float _345 = log2(_342);
    float _346 = log2(_343);
    float _347 = _344 * 0.1593017578125f;
    float _348 = _345 * 0.1593017578125f;
    float _349 = _346 * 0.1593017578125f;
    float _350 = exp2(_347);
    float _351 = exp2(_348);
    float _352 = exp2(_349);
    float _353 = _350 * 2.05784010887146f;
    float _354 = _351 * 2.05784010887146f;
    float _355 = _352 * 2.05784010887146f;
    float _356 = _353 + -0.10128399729728699f;
    float _357 = _354 + -0.10128399729728699f;
    float _358 = _355 + -0.10128399729728699f;
    float _359 = _356 * _350;
    float _360 = _357 * _351;
    float _361 = _358 * _352;
    float _362 = _359 + 0.001028590020723641f;
    float _363 = _360 + 0.001028590020723641f;
    float _364 = _361 + 0.001028590020723641f;
    float _365 = _362 * _350;
    float _366 = _363 * _351;
    float _367 = _364 * _352;
    float _368 = _365 + 3.6197199904108857e-08f;
    float _369 = _366 + 3.6197199904108857e-08f;
    float _370 = _367 + 3.6197199904108857e-08f;
    float _371 = _350 + 0.7726690173149109f;
    float _372 = _351 + 0.7726690173149109f;
    float _373 = _352 + 0.7726690173149109f;
    float _374 = _371 * _350;
    float _375 = _372 * _351;
    float _376 = _373 * _352;
    float _377 = _374 + 0.13521400094032288f;
    float _378 = _375 + 0.13521400094032288f;
    float _379 = _376 + 0.13521400094032288f;
    float _380 = _377 * _350;
    float _381 = _378 * _351;
    float _382 = _379 * _352;
    float _383 = _380 + 0.04952450096607208f;
    float _384 = _381 + 0.04952450096607208f;
    float _385 = _382 + 0.04952450096607208f;
    float _386 = _368 / _383;
    float _387 = _369 / _384;
    float _388 = _370 / _385;
    float _389 = saturate(_386);
    float _390 = saturate(_387);
    float _391 = saturate(_388);
    u0[int2((uint)(SV_DispatchThreadID.x), (uint)(SV_DispatchThreadID.y))] = float4(_389, _390, _391, _25.w);
  }
}
