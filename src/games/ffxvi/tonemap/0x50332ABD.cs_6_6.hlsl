#include "../common.hlsli"

// clang-format off
struct cCommon_Struct {
  float4 cCommon_Struct_000[3];
  int2 cCommon_Struct_048;
  float2 cCommon_Struct_056;
  int2 cCommon_Struct_064;
  float2 cCommon_Struct_072;
  int2 cCommon_Struct_080;
  float2 cCommon_Struct_088;
  float2 cCommon_Struct_096;
  float2 cCommon_Struct_104;
  float2 cCommon_Struct_112;
  float2 cCommon_Struct_120;
  float cCommon_Struct_128;
  float cCommon_Struct_132;
  float cCommon_Struct_136;
  int cCommon_Struct_140;
  int cCommon_Struct_144;
  int cCommon_Struct_148;
  float cCommon_Struct_152;
  float cCommon_Struct_156;
  float cCommon_Struct_160;
  float3 cCommon_Struct_164;
  float3 cCommon_Struct_176;
  float cCommon_Struct_188;
  float cCommon_Struct_192;
  float cCommon_Struct_196;
  int cCommon_Struct_200;
  float cCommon_Struct_204;
  float cCommon_Struct_208;
  float cCommon_Struct_212;
  float cCommon_Struct_216;
  float cCommon_Struct_220;
  float cCommon_Struct_224;
  int cCommon_Struct_228;
  int cCommon_Struct_232;
  float cCommon_Struct_236;
  float cCommon_Struct_240;
  float3 cCommon_Struct_244;
  struct CharaLight {
    float3 CharaLight_000;
    float CharaLight_012;
    float3 CharaLight_016;
    float CharaLight_028;
  } cCommon_Struct_256[4];
  float4 cCommon_Struct_384;
  float3 cCommon_Struct_400;
  float cCommon_Struct_412;
  float4 cCommon_Struct_416;
  float4 cCommon_Struct_432;
  float3 cCommon_Struct_448;
  float cCommon_Struct_460;
  float cCommon_Struct_464;
  int cCommon_Struct_468;
  int cCommon_Struct_472;
  int cCommon_Struct_476;
  int2 cCommon_Struct_480;
  int2 cCommon_Struct_488;
  float cCommon_Struct_496;
  float cCommon_Struct_500;
  float cCommon_Struct_504;
  int cCommon_Struct_508;
  int cCommon_Struct_512;
  int cCommon_Struct_516;
  int cCommon_Struct_520;
  float cCommon_Struct_524;
  struct TranslucentApproximateDepthParameter {
    int TranslucentApproximateDepthParameter_000;
    float TranslucentApproximateDepthParameter_004;
    int TranslucentApproximateDepthParameter_008;
    int TranslucentApproximateDepthParameter_012;
  } cCommon_Struct_528;
  int4 cCommon_Struct_544[1];
  float cCommon_Struct_560;
  int cCommon_Struct_564;
  float2 cCommon_Struct_568;
};
// clang-format on


Texture2D<float4> t0 : register(t0);

RWTexture2D<float4> u0 : register(u0);

cbuffer cb0 : register(b0) {
  cCommon_Struct cCommon_000 : packoffset(c000.x);
};
// clang-format off
cbuffer cb1 : register(b1) {
  struct cConstant0_Struct {
    struct ChromaticAberrationParameter {
      float4 ChromaticAberrationParameter_000[3];
      float ChromaticAberrationParameter_048;
      int ChromaticAberrationParameter_052;
      int2 ChromaticAberrationParameter_056;
    } cConstant0_Struct_000;
    struct VignetteParameter {
      struct VignetteMechanicalParameter {
        float VignetteMechanicalParameter_000;
        float VignetteMechanicalParameter_004;
        int2 VignetteMechanicalParameter_008;
      } VignetteParameter_000;
      struct VignetteNaturalParameter {
        float VignetteNaturalParameter_000;
        float VignetteNaturalParameter_004;
        float VignetteNaturalParameter_008;
        int VignetteNaturalParameter_012;
      } VignetteParameter_016;
      float3 VignetteParameter_032;
      float VignetteParameter_044;
    } cConstant0_Struct_064;
    struct NightFilterParameter {
      float4 NightFilterParameter_000[30];
    } cConstant0_Struct_112;
    struct FilmGrainParameter {
      float2 FilmGrainParameter_000;
      float2 FilmGrainParameter_008;
      float FilmGrainParameter_016;
      int3 FilmGrainParameter_020;
    } cConstant0_Struct_592;
    struct ColorGradingLutParameter {
      int ColorGradingLutParameter_000;
      float ColorGradingLutParameter_004;
      int2 ColorGradingLutParameter_008;
    } cConstant0_Struct_624;
    struct ColorGradingRuntimeParameter {
      float4 ColorGradingRuntimeParameter_000;
      float4 ColorGradingRuntimeParameter_016;
      float4 ColorGradingRuntimeParameter_032;
      float4 ColorGradingRuntimeParameter_048;
      float4 ColorGradingRuntimeParameter_064;
    } cConstant0_Struct_640;
    struct ColorGradingRuntime2Parameter {
      float4 ColorGradingRuntime2Parameter_000;
      float4 ColorGradingRuntime2Parameter_016;
      float4 ColorGradingRuntime2Parameter_032;
    } cConstant0_Struct_720;
    struct ToneMappingParameter {
      struct TripleSectionToneMappingParams {
        float TripleSectionToneMappingParams_000;
        float TripleSectionToneMappingParams_004;
        float TripleSectionToneMappingParams_008;
        float TripleSectionToneMappingParams_012;
        float TripleSectionToneMappingParams_016;
        float TripleSectionToneMappingParams_020;
        int2 TripleSectionToneMappingParams_024;
        float4 TripleSectionToneMappingParams_032;
      } ToneMappingParameter_000;
      float ToneMappingParameter_048;
      float ToneMappingParameter_052;
      int2 ToneMappingParameter_056;
    } cConstant0_Struct_768;
    float cConstant0_Struct_832;
    int3 cConstant0_Struct_836;
  } cConstant0_000 : packoffset(c000.x);
};
// clang-format on
SamplerState s0 : register(s0);

[numthreads(8, 8, 1)]
void main(
  uint3 SV_DispatchThreadID : SV_DispatchThreadID,
  uint3 SV_GroupID : SV_GroupID,
  uint3 SV_GroupThreadID : SV_GroupThreadID,
  uint SV_GroupIndex : SV_GroupIndex
) {
  float peak_ratio = cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_000;
  AdjustPeak(peak_ratio);

  float _10 = float((uint)(SV_DispatchThreadID.x));
  float _11 = float((uint)(SV_DispatchThreadID.y));
  float _12 = _10 + 0.5f;
  float _13 = _11 + 0.5f;
  float _17 = cCommon_000.cCommon_Struct_088.x * _12;
  float _18 = _13 * cCommon_000.cCommon_Struct_088.y;
  bool _22 = ((uint)cCommon_000.cCommon_Struct_064.x <= (uint)(uint)(SV_DispatchThreadID.x));
  bool _23 = ((uint)cCommon_000.cCommon_Struct_064.y <= (uint)(uint)(SV_DispatchThreadID.y));
  bool _24 = _22 || _23;
  float _64;
  float _65;
  float _66;
  float _67;
  int _68;
  float _161;
  float _162;
  float _163;
  float _164;
  if (!_24) {
    float _29 = cCommon_000.cCommon_Struct_104.x * _17;
    float _30 = cCommon_000.cCommon_Struct_104.y * _18;
    float _33 = _29 + -0.5f;
    float _34 = _30 + -0.5f;
    float _35 = 1.0f / cConstant0_000.cConstant0_Struct_832;
    float _36 = _34 * _35;
    float _37 = _33 * _33;
    float _38 = _36 * _36;
    float _39 = _38 + _37;
    float _40 = sqrt(_39);
    float _41 = _40 * 1.4142135381698608f;
    float _42 = saturate(_41);
    float _44 = cCommon_000.cCommon_Struct_096.y - _18;
    float _45 = _17 * 2.0f;
    float _46 = _44 * 2.0f;
    float _48 = _45 - cCommon_000.cCommon_Struct_096.x;
    float _49 = _46 - cCommon_000.cCommon_Struct_096.y;
    float _52 = float((uint)(int)(cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052));
    float _53 = 1.0f / _52;
    float _58 = cCommon_000.cCommon_Struct_072.y * _42;
    float _59 = _58 * cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_048;
    float _60 = _59 * cCommon_000.cCommon_Struct_096.x;
    bool _61 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052 == 0);
    if (!_61) {
      _64 = 0.0f;
      _65 = 0.0f;
      _66 = 0.0f;
      _67 = 0.0f;
      _68 = 0;
      while(true) {
        uint _69 = _68 + 1u;
        float _70 = float((uint)_69);
        float _71 = _60 * 0.3333333432674408f;
        float _72 = _71 * _70;
        float _73 = 1.0f - _72;
        float _74 = _73 * _48;
        float _75 = _73 * _49;
        float _79 = _74 + cCommon_000.cCommon_Struct_096.x;
        float _80 = cCommon_000.cCommon_Struct_096.y - _75;
        float _81 = _79 * 0.5f;
        float _82 = _80 * 0.5f;
        float4 _85 = t0.SampleLevel(s0, float2(_81, _82), 0.0f);
        float _94 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].x) * _85.x;
        float _95 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].y) * _85.y;
        float _96 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].z) * _85.z;
        uint _97 = _68 + 2u;
        float _98 = float((uint)_97);
        float _99 = _71 * _98;
        float _100 = 1.0f - _99;
        float _101 = _100 * _48;
        float _102 = _100 * _49;
        float _103 = cCommon_000.cCommon_Struct_096.x + _101;
        float _104 = cCommon_000.cCommon_Struct_096.y - _102;
        float _105 = _103 * 0.5f;
        float _106 = _104 * 0.5f;
        float4 _107 = t0.SampleLevel(s0, float2(_105, _106), 0.0f);
        float _116 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].x) * _107.x;
        float _117 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].y) * _107.y;
        float _118 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].z) * _107.z;
        uint _119 = _68 + 3u;
        float _120 = float((uint)_119);
        float _121 = _71 * _120;
        float _122 = 1.0f - _121;
        float _123 = _122 * _48;
        float _124 = _122 * _49;
        float _125 = cCommon_000.cCommon_Struct_096.x + _123;
        float _126 = cCommon_000.cCommon_Struct_096.y - _124;
        float _127 = _125 * 0.5f;
        float _128 = _126 * 0.5f;
        float4 _129 = t0.SampleLevel(s0, float2(_127, _128), 0.0f);
        float _138 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].x) * _129.x;
        float _139 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].y) * _129.y;
        float _140 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].z) * _129.z;
        float _141 = _116 + _94;
        float _142 = _141 + _138;
        float _143 = _142 * _53;
        float _144 = _143 + _64;
        float _145 = _117 + _95;
        float _146 = _145 + _139;
        float _147 = _146 * _53;
        float _148 = _147 + _65;
        float _149 = _118 + _96;
        float _150 = _149 + _140;
        float _151 = _150 * _53;
        float _152 = _151 + _66;
        float _153 = _107.w + _85.w;
        float _154 = _153 + _129.w;
        float _155 = _154 * _53;
        float _156 = _155 + _67;
        bool _157 = (_69 == cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052);
        if (!_157) {
          _64 = _144;
          _65 = _148;
          _66 = _152;
          _67 = _156;
          _68 = _69;
          continue;
        }
        float _159 = _156 * 0.3333333432674408f;
        _161 = _144;
        _162 = _148;
        _163 = _152;
        _164 = _159;
        break;
      }
    } else {
      _161 = 0.0f;
      _162 = 0.0f;
      _163 = 0.0f;
      _164 = 0.0f;
    }
    float _165 = float((uint)SV_DispatchThreadID.x);
    float _166 = float((uint)SV_DispatchThreadID.y);
    float _169 = 1.0f / cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_016;
    float _170 = _169 * _165;
    float _171 = _169 * _166;
    float _172 = ceil(_170);
    float _173 = ceil(_171);
    uint _174 = uint(_172);
    uint _175 = uint(_173);
    float _176 = float((uint)_174);
    float _177 = float((uint)_175);
    float _178 = cCommon_000.cCommon_Struct_088.x * _176;
    float _179 = _177 * cCommon_000.cCommon_Struct_088.y;
    float _183 = _178 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_008.x;
    float _184 = _179 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_008.y;
    float _185 = _184 * 543.3099975585938f;
    float _186 = _183 + _185;
    float _187 = sin(_186);
    float _188 = _187 * 493013.0f;
    float _189 = frac(_188);
    float _191 = cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_000.x * _189;
    float _193 = _191 + cConstant0_000.cConstant0_Struct_592.FilmGrainParameter_000.y;
    float _194 = _193 * _161;
    float _195 = _193 * _162;
    float _196 = _193 * _163;
    float _197 = dot(float3(_194, _195, _196), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
    float _202 = _194 - _197;
    float _203 = _195 - _197;
    float _204 = _196 - _197;
    float _205 = _202 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_000.x;
    float _206 = _203 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_000.y;
    float _207 = _204 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_000.z;
    float _208 = _205 + _197;
    float _209 = _206 + _197;
    float _210 = _207 + _197;
    float _211 = max(0.0f, _208);
    float _212 = max(0.0f, _209);
    float _213 = max(0.0f, _210);
    float _218 = _211 * 0.0005555555690079927f;
    float _219 = _212 * 0.0005555555690079927f;
    float _220 = _213 * 0.0005555555690079927f;
    float _221 = abs(_218);
    float _222 = abs(_219);
    float _223 = abs(_220);
    float _224 = log2(_221);
    float _225 = log2(_222);
    float _226 = log2(_223);
    float _227 = _224 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_016.x;
    float _228 = _225 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_016.y;
    float _229 = _226 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_016.z;
    float _230 = exp2(_227);
    float _231 = exp2(_228);
    float _232 = exp2(_229);
    float _233 = _230 * 1800.0f;
    float _234 = _231 * 1800.0f;
    float _235 = _232 * 1800.0f;
    float _240 = _233 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_048.x;
    float _241 = _234 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_048.y;
    float _242 = _235 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_048.z;
    float _247 = _240 + cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_064.x;
    float _248 = _241 + cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_064.y;
    float _249 = _242 + cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_064.z;
    float _254 = _247 * 9.999999747378752e-05f;
    float _255 = _248 * 9.999999747378752e-05f;
    float _256 = _249 * 9.999999747378752e-05f;
    float _257 = abs(_254);
    float _258 = abs(_255);
    float _259 = abs(_256);
    float _260 = log2(_257);
    float _261 = log2(_258);
    float _262 = log2(_259);
    float _263 = _260 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_032.x;
    float _264 = _261 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_032.y;
    float _265 = _262 * cConstant0_000.cConstant0_Struct_640.ColorGradingRuntimeParameter_032.z;
    float _266 = exp2(_263);
    float _267 = exp2(_264);
    float _268 = exp2(_265);
    float _269 = _266 * 10000.0f;
    float _270 = _267 * 10000.0f;
    float _271 = _268 * 10000.0f;
    float _272 = dot(float3(_269, _270, _271), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
    float _277 = _269 - _272;
    float _278 = _270 - _272;
    float _279 = _271 - _272;
    float _280 = cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_000.x * _277;
    float _281 = cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_000.y * _278;
    float _282 = cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_000.z * _279;
    float _283 = _280 + _272;
    float _284 = _281 + _272;
    float _285 = _282 + _272;
    float _286 = max(0.0f, _283);
    float _287 = max(0.0f, _284);
    float _288 = max(0.0f, _285);
    float _293 = _286 * 5.55555534362793f;
    float _294 = _287 * 5.55555534362793f;
    float _295 = _288 * 5.55555534362793f;
    float _296 = abs(_293);
    float _297 = abs(_294);
    float _298 = abs(_295);
    float _299 = log2(_296);
    float _300 = log2(_297);
    float _301 = log2(_298);
    float _302 = _299 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_016.x;
    float _303 = _300 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_016.y;
    float _304 = _301 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_016.z;
    float _305 = exp2(_302);
    float _306 = exp2(_303);
    float _307 = exp2(_304);
    float _312 = _305 * 0.0018000000854954123f;
    float _313 = _306 * 0.0018000000854954123f;
    float _314 = _307 * 0.0018000000854954123f;
    float _315 = abs(_312);
    float _316 = abs(_313);
    float _317 = abs(_314);
    float _318 = log2(_315);
    float _319 = log2(_316);
    float _320 = log2(_317);
    float _321 = _318 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_032.x;
    float _322 = _319 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_032.y;
    float _323 = _320 * cConstant0_000.cConstant0_Struct_720.ColorGradingRuntime2Parameter_032.z;
    float _324 = exp2(_321);
    float _325 = exp2(_322);
    float _326 = exp2(_323);
    float _327 = _324 * 100.0f;
    float _328 = _325 * 100.0f;
    float _329 = _326 * 100.0f;
    float _333 = cCommon_000.cCommon_Struct_104.x * _17;
    float _334 = _18 * 543.3099975585938f;
    float _335 = _334 * cCommon_000.cCommon_Struct_104.y;
    float _336 = _335 + _333;
    float _337 = sin(_336);
    float _338 = _337 * 493013.0f;
    float _339 = frac(_338);
    float _340 = _339 * 0.0009765625f;
    float _341 = _340 + -0.00048828125f;
    float _342 = _341 + _327;
    float _343 = _341 + _328;
    float _344 = _341 + _329;

    float y_in;
    float3 untonemapped = ApplySliders(_342, _343, _344, y_in);

    float _347 = _342 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _348 = _343 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _349 = _344 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _361 = _347 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _362 = _348 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _363 = _349 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _364 = _361 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _365 = _362 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _366 = _363 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _367 = _364 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _368 = _365 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _369 = _366 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _370 = _347 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _371 = _348 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _372 = _349 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _373 = abs(_370);
    float _374 = abs(_371);
    float _375 = abs(_372);
    float _376 = log2(_373);
    float _377 = log2(_374);
    float _378 = log2(_375);
    float _379 = _376 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _380 = _377 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _381 = _378 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _382 = exp2(_379);
    float _383 = exp2(_380);
    float _384 = exp2(_381);
    float _385 = _382 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _386 = _383 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _387 = _384 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _388 = _385 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _389 = _386 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _390 = _387 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _391 = peak_ratio - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.y;
    float _392 = -0.0f - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.z;
    float _393 = _347 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _394 = _348 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _395 = _349 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _396 = _393 * _392;
    float _397 = _394 * _392;
    float _398 = _395 * _392;
    float _399 = _396 / peak_ratio;
    float _400 = _397 / peak_ratio;
    float _401 = _398 / peak_ratio;
    float _402 = _399 * 1.4426950216293335f;
    float _403 = _400 * 1.4426950216293335f;
    float _404 = _401 * 1.4426950216293335f;
    float _405 = exp2(_402);
    float _406 = exp2(_403);
    float _407 = exp2(_404);
    float _408 = _405 * _391;
    float _409 = _406 * _391;
    float _410 = _407 * _391;
    float _411 = peak_ratio - _408;
    float _412 = peak_ratio - _409;
    float _413 = peak_ratio - _410;
    float _414 = saturate(_370);
    float _415 = saturate(_371);
    float _416 = saturate(_372);
    float _417 = _414 * 2.0f;
    float _418 = _415 * 2.0f;
    float _419 = _416 * 2.0f;
    float _420 = 3.0f - _417;
    float _421 = 3.0f - _418;
    float _422 = 3.0f - _419;
    float _423 = _414 * _414;
    float _424 = _423 * _420;
    float _425 = _415 * _415;
    float _426 = _425 * _421;
    float _427 = _416 * _416;
    float _428 = _427 * _422;
    float _429 = 1.0f - _424;
    float _430 = 1.0f - _426;
    float _431 = 1.0f - _428;
    bool _432 = (_347 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _433 = (_348 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _434 = (_349 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    float _435 = select(_432, 0.0f, 1.0f);
    float _436 = select(_433, 0.0f, 1.0f);
    float _437 = select(_434, 0.0f, 1.0f);
    float _438 = _424 - _435;
    float _439 = _426 - _436;
    float _440 = _428 - _437;
    float _441 = _429 * _388;
    float _442 = _430 * _389;
    float _443 = _431 * _390;
    float _444 = _438 * _367;
    float _445 = _439 * _368;
    float _446 = _440 * _369;
    float _447 = _411 * _435;
    float _448 = _412 * _436;
    float _449 = _413 * _437;
    float _450 = _444 + _447;
    float _451 = _450 + _441;
    float _452 = _445 + _448;
    float _453 = _452 + _442;
    float _454 = _446 + _449;
    float _455 = _454 + _443;

    FinalizeToneMap(_451, _453, _455, untonemapped, y_in);

    float _457 = _451 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _458 = _453 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _459 = _455 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _460 = _457 * 0.6274039149284363f;
    float _461 = mad(0.3292830288410187f, _458, _460);
    float _462 = mad(0.04331306740641594f, _459, _461);
    float _463 = _457 * 0.06909728795289993f;
    float _464 = mad(0.9195404052734375f, _458, _463);
    float _465 = mad(0.011362315155565739f, _459, _464);
    float _466 = _457 * 0.016391439363360405f;
    float _467 = mad(0.08801330626010895f, _458, _466);
    float _468 = mad(0.8955952525138855f, _459, _467);
    float _469 = _462 * 0.009999999776482582f;
    float _470 = _465 * 0.009999999776482582f;
    float _471 = _468 * 0.009999999776482582f;
    float _472 = abs(_469);
    float _473 = abs(_470);
    float _474 = abs(_471);
    float _475 = log2(_472);
    float _476 = log2(_473);
    float _477 = log2(_474);
    float _478 = _475 * 0.1593017578125f;
    float _479 = _476 * 0.1593017578125f;
    float _480 = _477 * 0.1593017578125f;
    float _481 = exp2(_478);
    float _482 = exp2(_479);
    float _483 = exp2(_480);
    float _484 = _481 * 2.05784010887146f;
    float _485 = _482 * 2.05784010887146f;
    float _486 = _483 * 2.05784010887146f;
    float _487 = _484 + -0.10128399729728699f;
    float _488 = _485 + -0.10128399729728699f;
    float _489 = _486 + -0.10128399729728699f;
    float _490 = _487 * _481;
    float _491 = _488 * _482;
    float _492 = _489 * _483;
    float _493 = _490 + 0.001028590020723641f;
    float _494 = _491 + 0.001028590020723641f;
    float _495 = _492 + 0.001028590020723641f;
    float _496 = _493 * _481;
    float _497 = _494 * _482;
    float _498 = _495 * _483;
    float _499 = _496 + 3.6197199904108857e-08f;
    float _500 = _497 + 3.6197199904108857e-08f;
    float _501 = _498 + 3.6197199904108857e-08f;
    float _502 = _481 + 0.7726690173149109f;
    float _503 = _482 + 0.7726690173149109f;
    float _504 = _483 + 0.7726690173149109f;
    float _505 = _502 * _481;
    float _506 = _503 * _482;
    float _507 = _504 * _483;
    float _508 = _505 + 0.13521400094032288f;
    float _509 = _506 + 0.13521400094032288f;
    float _510 = _507 + 0.13521400094032288f;
    float _511 = _508 * _481;
    float _512 = _509 * _482;
    float _513 = _510 * _483;
    float _514 = _511 + 0.04952450096607208f;
    float _515 = _512 + 0.04952450096607208f;
    float _516 = _513 + 0.04952450096607208f;
    float _517 = _499 / _514;
    float _518 = _500 / _515;
    float _519 = _501 / _516;
    float _520 = saturate(_517);
    float _521 = saturate(_518);
    float _522 = saturate(_519);
    u0[int2((uint)(SV_DispatchThreadID.x), (uint)(SV_DispatchThreadID.y))] = float4(_520, _521, _522, _164);
  }
}
