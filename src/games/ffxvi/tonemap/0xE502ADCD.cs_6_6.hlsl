#include "../common.hlsli"

// clang-format off
struct cCommon_Struct {
  float4 cCommon_Struct_000[3];
  int2 cCommon_Struct_048;
  float2 cCommon_Struct_056;
  int2 cCommon_Struct_064;
  float2 cCommon_Struct_072;
  int2 cCommon_Struct_080;
  float2 cCommon_Struct_088;
  float2 cCommon_Struct_096;
  float2 cCommon_Struct_104;
  float2 cCommon_Struct_112;
  float2 cCommon_Struct_120;
  float cCommon_Struct_128;
  float cCommon_Struct_132;
  float cCommon_Struct_136;
  int cCommon_Struct_140;
  int cCommon_Struct_144;
  int cCommon_Struct_148;
  float cCommon_Struct_152;
  float cCommon_Struct_156;
  float cCommon_Struct_160;
  float3 cCommon_Struct_164;
  float3 cCommon_Struct_176;
  float cCommon_Struct_188;
  float cCommon_Struct_192;
  float cCommon_Struct_196;
  int cCommon_Struct_200;
  float cCommon_Struct_204;
  float cCommon_Struct_208;
  float cCommon_Struct_212;
  float cCommon_Struct_216;
  float cCommon_Struct_220;
  float cCommon_Struct_224;
  int cCommon_Struct_228;
  int cCommon_Struct_232;
  float cCommon_Struct_236;
  float cCommon_Struct_240;
  float3 cCommon_Struct_244;
  struct CharaLight {
    float3 CharaLight_000;
    float CharaLight_012;
    float3 CharaLight_016;
    float CharaLight_028;
  } cCommon_Struct_256[4];
  float4 cCommon_Struct_384;
  float3 cCommon_Struct_400;
  float cCommon_Struct_412;
  float4 cCommon_Struct_416;
  float4 cCommon_Struct_432;
  float3 cCommon_Struct_448;
  float cCommon_Struct_460;
  float cCommon_Struct_464;
  int cCommon_Struct_468;
  int cCommon_Struct_472;
  int cCommon_Struct_476;
  int2 cCommon_Struct_480;
  int2 cCommon_Struct_488;
  float cCommon_Struct_496;
  float cCommon_Struct_500;
  float cCommon_Struct_504;
  int cCommon_Struct_508;
  int cCommon_Struct_512;
  int cCommon_Struct_516;
  int cCommon_Struct_520;
  float cCommon_Struct_524;
  struct TranslucentApproximateDepthParameter {
    int TranslucentApproximateDepthParameter_000;
    float TranslucentApproximateDepthParameter_004;
    int TranslucentApproximateDepthParameter_008;
    int TranslucentApproximateDepthParameter_012;
  } cCommon_Struct_528;
  int4 cCommon_Struct_544[1];
  float cCommon_Struct_560;
  int cCommon_Struct_564;
  float2 cCommon_Struct_568;
};
// clang-format on


Texture2D<float4> t0 : register(t0);

Texture3D<float4> t1 : register(t1);

RWTexture2D<float4> u0 : register(u0);

cbuffer cb0 : register(b0) {
  cCommon_Struct cCommon_000 : packoffset(c000.x);
};
// clang-format off
cbuffer cb1 : register(b1) {
  struct cConstant0_Struct {
    struct ChromaticAberrationParameter {
      float4 ChromaticAberrationParameter_000[3];
      float ChromaticAberrationParameter_048;
      int ChromaticAberrationParameter_052;
      int2 ChromaticAberrationParameter_056;
    } cConstant0_Struct_000;
    struct VignetteParameter {
      struct VignetteMechanicalParameter {
        float VignetteMechanicalParameter_000;
        float VignetteMechanicalParameter_004;
        int2 VignetteMechanicalParameter_008;
      } VignetteParameter_000;
      struct VignetteNaturalParameter {
        float VignetteNaturalParameter_000;
        float VignetteNaturalParameter_004;
        float VignetteNaturalParameter_008;
        int VignetteNaturalParameter_012;
      } VignetteParameter_016;
      float3 VignetteParameter_032;
      float VignetteParameter_044;
    } cConstant0_Struct_064;
    struct NightFilterParameter {
      float4 NightFilterParameter_000[30];
    } cConstant0_Struct_112;
    struct FilmGrainParameter {
      float2 FilmGrainParameter_000;
      float2 FilmGrainParameter_008;
      float FilmGrainParameter_016;
      int3 FilmGrainParameter_020;
    } cConstant0_Struct_592;
    struct ColorGradingLutParameter {
      int ColorGradingLutParameter_000;
      float ColorGradingLutParameter_004;
      int2 ColorGradingLutParameter_008;
    } cConstant0_Struct_624;
    struct ColorGradingRuntimeParameter {
      float4 ColorGradingRuntimeParameter_000;
      float4 ColorGradingRuntimeParameter_016;
      float4 ColorGradingRuntimeParameter_032;
      float4 ColorGradingRuntimeParameter_048;
      float4 ColorGradingRuntimeParameter_064;
    } cConstant0_Struct_640;
    struct ColorGradingRuntime2Parameter {
      float4 ColorGradingRuntime2Parameter_000;
      float4 ColorGradingRuntime2Parameter_016;
      float4 ColorGradingRuntime2Parameter_032;
    } cConstant0_Struct_720;
    struct ToneMappingParameter {
      struct TripleSectionToneMappingParams {
        float TripleSectionToneMappingParams_000;
        float TripleSectionToneMappingParams_004;
        float TripleSectionToneMappingParams_008;
        float TripleSectionToneMappingParams_012;
        float TripleSectionToneMappingParams_016;
        float TripleSectionToneMappingParams_020;
        int2 TripleSectionToneMappingParams_024;
        float4 TripleSectionToneMappingParams_032;
      } ToneMappingParameter_000;
      float ToneMappingParameter_048;
      float ToneMappingParameter_052;
      int2 ToneMappingParameter_056;
    } cConstant0_Struct_768;
    float cConstant0_Struct_832;
    int3 cConstant0_Struct_836;
  } cConstant0_000 : packoffset(c000.x);
};
// clang-format on
SamplerState s0 : register(s0);

[numthreads(8, 8, 1)]
void main(
  uint3 SV_DispatchThreadID : SV_DispatchThreadID,
  uint3 SV_GroupID : SV_GroupID,
  uint3 SV_GroupThreadID : SV_GroupThreadID,
  uint SV_GroupIndex : SV_GroupIndex
) {
  float peak_ratio = cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_000;
  AdjustPeak(peak_ratio);

  float _11 = float((uint)(SV_DispatchThreadID.x));
  float _12 = float((uint)(SV_DispatchThreadID.y));
  float _13 = _11 + 0.5f;
  float _14 = _12 + 0.5f;
  float _18 = cCommon_000.cCommon_Struct_088.x * _13;
  float _19 = _14 * cCommon_000.cCommon_Struct_088.y;
  bool _23 = ((uint)cCommon_000.cCommon_Struct_064.x <= (uint)(uint)(SV_DispatchThreadID.x));
  bool _24 = ((uint)cCommon_000.cCommon_Struct_064.y <= (uint)(uint)(SV_DispatchThreadID.y));
  bool _25 = _23 || _24;
  float _65;
  float _66;
  float _67;
  float _68;
  int _69;
  float _165;
  float _166;
  float _167;
  float _168;
  if (!_25) {
    float _30 = cCommon_000.cCommon_Struct_104.x * _18;
    float _31 = cCommon_000.cCommon_Struct_104.y * _19;
    float _34 = _30 + -0.5f;
    float _35 = _31 + -0.5f;
    float _36 = 1.0f / cConstant0_000.cConstant0_Struct_832;
    float _37 = _35 * _36;
    float _38 = _34 * _34;
    float _39 = _37 * _37;
    float _40 = _39 + _38;
    float _41 = sqrt(_40);
    float _42 = _41 * 1.4142135381698608f;
    float _43 = saturate(_42);
    float _45 = cCommon_000.cCommon_Struct_096.y - _19;
    float _46 = _18 * 2.0f;
    float _47 = _45 * 2.0f;
    float _49 = _46 - cCommon_000.cCommon_Struct_096.x;
    float _50 = _47 - cCommon_000.cCommon_Struct_096.y;
    float _53 = float((uint)(int)(cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052));
    float _54 = 1.0f / _53;
    float _59 = cCommon_000.cCommon_Struct_072.y * _43;
    float _60 = _59 * cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_048;
    float _61 = _60 * cCommon_000.cCommon_Struct_096.x;
    bool _62 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052 == 0);
    if (!_62) {
      _65 = 0.0f;
      _66 = 0.0f;
      _67 = 0.0f;
      _68 = 0.0f;
      _69 = 0;
      while(true) {
        uint _70 = _69 + 1u;
        float _71 = float((uint)_70);
        float _72 = _61 * 0.3333333432674408f;
        float _73 = _72 * _71;
        float _74 = 1.0f - _73;
        float _75 = _74 * _49;
        float _76 = _74 * _50;
        float _80 = _75 + cCommon_000.cCommon_Struct_096.x;
        float _81 = cCommon_000.cCommon_Struct_096.y - _76;
        float _82 = _80 * 0.5f;
        float _83 = _81 * 0.5f;
        float4 _86 = t0.SampleLevel(s0, float2(_82, _83), 0.0f);
        float _95 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].x) * _86.x;
        float _96 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].y) * _86.y;
        float _97 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[0].z) * _86.z;
        uint _98 = _69 + 2u;
        float _99 = float((uint)_98);
        float _100 = _72 * _99;
        float _101 = 1.0f - _100;
        float _102 = _101 * _49;
        float _103 = _101 * _50;
        float _104 = cCommon_000.cCommon_Struct_096.x + _102;
        float _105 = cCommon_000.cCommon_Struct_096.y - _103;
        float _106 = _104 * 0.5f;
        float _107 = _105 * 0.5f;
        float4 _108 = t0.SampleLevel(s0, float2(_106, _107), 0.0f);
        float _117 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].x) * _108.x;
        float _118 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].y) * _108.y;
        float _119 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[1].z) * _108.z;
        uint _120 = _69 + 3u;
        float _121 = float((uint)_120);
        float _122 = _72 * _121;
        float _123 = 1.0f - _122;
        float _124 = _123 * _49;
        float _125 = _123 * _50;
        float _126 = cCommon_000.cCommon_Struct_096.x + _124;
        float _127 = cCommon_000.cCommon_Struct_096.y - _125;
        float _128 = _126 * 0.5f;
        float _129 = _127 * 0.5f;
        float4 _130 = t0.SampleLevel(s0, float2(_128, _129), 0.0f);
        float _139 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].x) * _130.x;
        float _140 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].y) * _130.y;
        float _141 = (cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_000[2].z) * _130.z;
        float _142 = _117 + _95;
        float _143 = _142 + _139;
        float _144 = _143 * _54;
        float _145 = _144 + _65;
        float _146 = _118 + _96;
        float _147 = _146 + _140;
        float _148 = _147 * _54;
        float _149 = _148 + _66;
        float _150 = _119 + _97;
        float _151 = _150 + _141;
        float _152 = _151 * _54;
        float _153 = _152 + _67;
        float _154 = _108.w + _86.w;
        float _155 = _154 + _130.w;
        float _156 = _155 * _54;
        float _157 = _156 + _68;
        bool _158 = (_70 == cConstant0_000.cConstant0_Struct_000.ChromaticAberrationParameter_052);
        if (!_158) {
          _65 = _145;
          _66 = _149;
          _67 = _153;
          _68 = _157;
          _69 = _70;
          continue;
        }
        float _160 = _157 * 0.3333333432674408f;
        float _161 = _145 * 0.009999999776482582f;
        float _162 = _149 * 0.009999999776482582f;
        float _163 = _153 * 0.009999999776482582f;
        _165 = _161;
        _166 = _162;
        _167 = _163;
        _168 = _160;
        break;
      }
    } else {
      _165 = 0.0f;
      _166 = 0.0f;
      _167 = 0.0f;
      _168 = 0.0f;
    }
    float _169 = abs(_165);
    float _170 = abs(_166);
    float _171 = abs(_167);
    float _172 = log2(_169);
    float _173 = log2(_170);
    float _174 = log2(_171);
    float _175 = _172 * 0.1593017578125f;
    float _176 = _173 * 0.1593017578125f;
    float _177 = _174 * 0.1593017578125f;
    float _178 = exp2(_175);
    float _179 = exp2(_176);
    float _180 = exp2(_177);
    float _181 = _178 * 2.05784010887146f;
    float _182 = _179 * 2.05784010887146f;
    float _183 = _180 * 2.05784010887146f;
    float _184 = _181 + -0.10128399729728699f;
    float _185 = _182 + -0.10128399729728699f;
    float _186 = _183 + -0.10128399729728699f;
    float _187 = _184 * _178;
    float _188 = _185 * _179;
    float _189 = _186 * _180;
    float _190 = _187 + 0.001028590020723641f;
    float _191 = _188 + 0.001028590020723641f;
    float _192 = _189 + 0.001028590020723641f;
    float _193 = _190 * _178;
    float _194 = _191 * _179;
    float _195 = _192 * _180;
    float _196 = _193 + 3.6197199904108857e-08f;
    float _197 = _194 + 3.6197199904108857e-08f;
    float _198 = _195 + 3.6197199904108857e-08f;
    float _199 = _178 + 0.7726690173149109f;
    float _200 = _179 + 0.7726690173149109f;
    float _201 = _180 + 0.7726690173149109f;
    float _202 = _199 * _178;
    float _203 = _200 * _179;
    float _204 = _201 * _180;
    float _205 = _202 + 0.13521400094032288f;
    float _206 = _203 + 0.13521400094032288f;
    float _207 = _204 + 0.13521400094032288f;
    float _208 = _205 * _178;
    float _209 = _206 * _179;
    float _210 = _207 * _180;
    float _211 = _208 + 0.04952450096607208f;
    float _212 = _209 + 0.04952450096607208f;
    float _213 = _210 + 0.04952450096607208f;
    float _214 = _196 / _211;
    float _215 = _197 / _212;
    float _216 = _198 / _213;
    float _219 = float((uint)(int)(cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_000));
    float _220 = 1.0f / _219;
    uint _221 = (int)(cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_000) + -1u;
    float _222 = float((uint)_221);
    float _223 = _222 * _220;
    float _224 = _220 * 0.5f;
    float _225 = _223 * _214;
    float _226 = _223 * _215;
    float _227 = _223 * _216;
    float _228 = _225 + _224;
    float _229 = _226 + _224;
    float _230 = _227 + _224;
    float4 _233 = t1.SampleLevel(s0, float3(_228, _229, _230), 0.0f);
    float _239 = _233.x - _214;
    float _240 = _233.y - _215;
    float _241 = _233.z - _216;
    float _242 = RENODX_COLOR_GRADE_STRENGTH * cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_004 * _239;
    float _243 = RENODX_COLOR_GRADE_STRENGTH * cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_004 * _240;
    float _244 = RENODX_COLOR_GRADE_STRENGTH * cConstant0_000.cConstant0_Struct_624.ColorGradingLutParameter_004 * _241;
    float _245 = _242 + _214;
    float _246 = _243 + _215;
    float _247 = _244 + _216;
    float _248 = abs(_245);
    float _249 = abs(_246);
    float _250 = abs(_247);
    float _251 = log2(_248);
    float _252 = log2(_249);
    float _253 = log2(_250);
    float _254 = _251 * 0.012683313339948654f;
    float _255 = _252 * 0.012683313339948654f;
    float _256 = _253 * 0.012683313339948654f;
    float _257 = exp2(_254);
    float _258 = exp2(_255);
    float _259 = exp2(_256);
    float _260 = _257 * 18.6875f;
    float _261 = _258 * 18.6875f;
    float _262 = _259 * 18.6875f;
    float _263 = 18.8515625f - _260;
    float _264 = 18.8515625f - _261;
    float _265 = 18.8515625f - _262;
    float _266 = _257 + -0.8359375f;
    float _267 = _258 + -0.8359375f;
    float _268 = _259 + -0.8359375f;
    float _269 = max(_266, 0.0f);
    float _270 = max(_267, 0.0f);
    float _271 = max(_268, 0.0f);
    float _272 = _269 / _263;
    float _273 = _270 / _264;
    float _274 = _271 / _265;
    float _275 = abs(_272);
    float _276 = abs(_273);
    float _277 = abs(_274);
    float _278 = log2(_275);
    float _279 = log2(_276);
    float _280 = log2(_277);
    float _281 = _278 * 6.277394771575928f;
    float _282 = _279 * 6.277394771575928f;
    float _283 = _280 * 6.277394771575928f;
    float _284 = exp2(_281);
    float _285 = exp2(_282);
    float _286 = exp2(_283);
    float _287 = _284 * 100.0f;
    float _288 = _285 * 100.0f;
    float _289 = _286 * 100.0f;
    float _293 = cCommon_000.cCommon_Struct_104.x * _18;
    float _294 = _19 * 543.3099975585938f;
    float _295 = _294 * cCommon_000.cCommon_Struct_104.y;
    float _296 = _295 + _293;
    float _297 = sin(_296);
    float _298 = _297 * 493013.0f;
    float _299 = frac(_298);
    float _300 = _299 * 0.0009765625f;
    float _301 = _300 + -0.00048828125f;
    float _302 = _301 + _287;
    float _303 = _301 + _288;
    float _304 = _301 + _289;

    float y_in;
    float3 untonemapped = ApplySliders(_302, _303, _304, y_in);

    float _307 = _302 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _308 = _303 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _309 = _304 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_048;
    float _321 = _307 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _322 = _308 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _323 = _309 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _324 = _321 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _325 = _322 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _326 = _323 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_004;
    float _327 = _324 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _328 = _325 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _329 = _326 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _330 = _307 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _331 = _308 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _332 = _309 / cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _333 = abs(_330);
    float _334 = abs(_331);
    float _335 = abs(_332);
    float _336 = log2(_333);
    float _337 = log2(_334);
    float _338 = log2(_335);
    float _339 = _336 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _340 = _337 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _341 = _338 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_016;
    float _342 = exp2(_339);
    float _343 = exp2(_340);
    float _344 = exp2(_341);
    float _345 = _342 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _346 = _343 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _347 = _344 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_008;
    float _348 = _345 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _349 = _346 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _350 = _347 + cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_020;
    float _351 = peak_ratio - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.y;
    float _352 = -0.0f - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.z;
    float _353 = _307 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _354 = _308 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _355 = _309 - cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x;
    float _356 = _353 * _352;
    float _357 = _354 * _352;
    float _358 = _355 * _352;
    float _359 = _356 / peak_ratio;
    float _360 = _357 / peak_ratio;
    float _361 = _358 / peak_ratio;
    float _362 = _359 * 1.4426950216293335f;
    float _363 = _360 * 1.4426950216293335f;
    float _364 = _361 * 1.4426950216293335f;
    float _365 = exp2(_362);
    float _366 = exp2(_363);
    float _367 = exp2(_364);
    float _368 = _365 * _351;
    float _369 = _366 * _351;
    float _370 = _367 * _351;
    float _371 = peak_ratio - _368;
    float _372 = peak_ratio - _369;
    float _373 = peak_ratio - _370;
    float _374 = saturate(_330);
    float _375 = saturate(_331);
    float _376 = saturate(_332);
    float _377 = _374 * 2.0f;
    float _378 = _375 * 2.0f;
    float _379 = _376 * 2.0f;
    float _380 = 3.0f - _377;
    float _381 = 3.0f - _378;
    float _382 = 3.0f - _379;
    float _383 = _374 * _374;
    float _384 = _383 * _380;
    float _385 = _375 * _375;
    float _386 = _385 * _381;
    float _387 = _376 * _376;
    float _388 = _387 * _382;
    float _389 = 1.0f - _384;
    float _390 = 1.0f - _386;
    float _391 = 1.0f - _388;
    bool _392 = (_307 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _393 = (_308 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    bool _394 = (_309 < cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_000.TripleSectionToneMappingParams_032.x);
    float _395 = select(_392, 0.0f, 1.0f);
    float _396 = select(_393, 0.0f, 1.0f);
    float _397 = select(_394, 0.0f, 1.0f);
    float _398 = _384 - _395;
    float _399 = _386 - _396;
    float _400 = _388 - _397;
    float _401 = _389 * _348;
    float _402 = _390 * _349;
    float _403 = _391 * _350;
    float _404 = _398 * _327;
    float _405 = _399 * _328;
    float _406 = _400 * _329;
    float _407 = _371 * _395;
    float _408 = _372 * _396;
    float _409 = _373 * _397;
    float _410 = _404 + _407;
    float _411 = _410 + _401;
    float _412 = _405 + _408;
    float _413 = _412 + _402;
    float _414 = _406 + _409;
    float _415 = _414 + _403;

    FinalizeToneMap(_411, _413, _415, untonemapped, y_in);

    float _417 = _411 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _418 = _413 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _419 = _415 * cConstant0_000.cConstant0_Struct_768.ToneMappingParameter_052;
    float _420 = _417 * 0.6274039149284363f;
    float _421 = mad(0.3292830288410187f, _418, _420);
    float _422 = mad(0.04331306740641594f, _419, _421);
    float _423 = _417 * 0.06909728795289993f;
    float _424 = mad(0.9195404052734375f, _418, _423);
    float _425 = mad(0.011362315155565739f, _419, _424);
    float _426 = _417 * 0.016391439363360405f;
    float _427 = mad(0.08801330626010895f, _418, _426);
    float _428 = mad(0.8955952525138855f, _419, _427);
    float _429 = _422 * 0.009999999776482582f;
    float _430 = _425 * 0.009999999776482582f;
    float _431 = _428 * 0.009999999776482582f;
    float _432 = abs(_429);
    float _433 = abs(_430);
    float _434 = abs(_431);
    float _435 = log2(_432);
    float _436 = log2(_433);
    float _437 = log2(_434);
    float _438 = _435 * 0.1593017578125f;
    float _439 = _436 * 0.1593017578125f;
    float _440 = _437 * 0.1593017578125f;
    float _441 = exp2(_438);
    float _442 = exp2(_439);
    float _443 = exp2(_440);
    float _444 = _441 * 2.05784010887146f;
    float _445 = _442 * 2.05784010887146f;
    float _446 = _443 * 2.05784010887146f;
    float _447 = _444 + -0.10128399729728699f;
    float _448 = _445 + -0.10128399729728699f;
    float _449 = _446 + -0.10128399729728699f;
    float _450 = _447 * _441;
    float _451 = _448 * _442;
    float _452 = _449 * _443;
    float _453 = _450 + 0.001028590020723641f;
    float _454 = _451 + 0.001028590020723641f;
    float _455 = _452 + 0.001028590020723641f;
    float _456 = _453 * _441;
    float _457 = _454 * _442;
    float _458 = _455 * _443;
    float _459 = _456 + 3.6197199904108857e-08f;
    float _460 = _457 + 3.6197199904108857e-08f;
    float _461 = _458 + 3.6197199904108857e-08f;
    float _462 = _441 + 0.7726690173149109f;
    float _463 = _442 + 0.7726690173149109f;
    float _464 = _443 + 0.7726690173149109f;
    float _465 = _462 * _441;
    float _466 = _463 * _442;
    float _467 = _464 * _443;
    float _468 = _465 + 0.13521400094032288f;
    float _469 = _466 + 0.13521400094032288f;
    float _470 = _467 + 0.13521400094032288f;
    float _471 = _468 * _441;
    float _472 = _469 * _442;
    float _473 = _470 * _443;
    float _474 = _471 + 0.04952450096607208f;
    float _475 = _472 + 0.04952450096607208f;
    float _476 = _473 + 0.04952450096607208f;
    float _477 = _459 / _474;
    float _478 = _460 / _475;
    float _479 = _461 / _476;
    float _480 = saturate(_477);
    float _481 = saturate(_478);
    float _482 = saturate(_479);
    u0[int2((uint)(SV_DispatchThreadID.x), (uint)(SV_DispatchThreadID.y))] = float4(_480, _481, _482, _168);
  }
}
