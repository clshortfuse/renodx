#include "./shared.h"
#include "./tonemapper.hlsl"

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

void main() {
  // rwtexture _1 = RWOutputTexture;
  // cbuffer _2 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _3 = _RootShaderParameters;
  // _4 = _2;
  // _5 = _3;
  float _9[6];
  float _10[6];
  float _11[6];
  float _12[6];
  float _13 = float(_6);
  float _14 = float(_7);
  float _15 = _13 + 0.5f;
  float _16 = _14 + 0.5f;
  float _18 = _RootShaderParameters_042x;
  float _19 = _RootShaderParameters_042y;
  float _20 = _18 * _15;
  float _21 = _19 * _16;
  float _22 = _20 + -0.015625f;
  float _23 = _21 + -0.015625f;
  float _24 = _22 * 1.0322580337524414f;
  float _25 = _23 * 1.0322580337524414f;
  float _26 = float(_8);
  float _27 = _26 * 0.032258063554763794f;
  uint _29 = _RootShaderParameters_041x;
  bool _30 = (_29 == 1);
  float _47 = 1.379158854484558f;
  float _48 = -0.3088507056236267f;
  float _49 = -0.07034677267074585f;
  float _50 = -0.06933528929948807f;
  float _51 = 1.0822921991348267f;
  float _52 = -0.012962047010660172f;
  float _53 = -0.002159259282052517f;
  float _54 = -0.045465391129255295f;
  float _55 = 1.0477596521377563f;
  float _113;
  float _114;
  float _115;
  float _639;
  float _675;
  float _686;
  float _750;
  float _1018;
  float _1019;
  float _1020;
  float _1031;
  float _1042;
  float _1224;
  float _1260;
  float _1271;
  float _1310;
  float _1420;
  float _1494;
  float _1568;
  float _1647;
  float _1648;
  float _1649;
  float _1800;
  float _1836;
  float _1847;
  float _1886;
  float _1996;
  float _2070;
  float _2144;
  float _2223;
  float _2224;
  float _2225;
  float _2402;
  float _2403;
  float _2404;
  if (!_30) {
    bool _32 = (_29 == 2);
    _47 = 1.02579927444458f;
    _48 = -0.020052503794431686f;
    _49 = -0.0057713985443115234f;
    _50 = -0.0022350111976265907f;
    _51 = 1.0045825242996216f;
    _52 = -0.002352306619286537f;
    _53 = -0.005014004185795784f;
    _54 = -0.025293385609984398f;
    _55 = 1.0304402112960815f;
    if (!_32) {
      bool _34 = (_29 == 3);
      _47 = 0.6954522132873535f;
      _48 = 0.14067870378494263f;
      _49 = 0.16386906802654266f;
      _50 = 0.044794563204050064f;
      _51 = 0.8596711158752441f;
      _52 = 0.0955343171954155f;
      _53 = -0.005525882821530104f;
      _54 = 0.004025210160762072f;
      _55 = 1.0015007257461548f;
      if (!_34) {
        bool _36 = (_29 == 4);
        float _37 = _36 ? 1.0f : 1.7050515413284302f;
        float _38 = _36 ? 0.0f : -0.6217905879020691f;
        float _39 = _36 ? 0.0f : -0.0832584798336029f;
        float _40 = _36 ? 0.0f : -0.13025718927383423f;
        float _41 = _36 ? 1.0f : 1.1408027410507202f;
        float _42 = _36 ? 0.0f : -0.010548528283834457f;
        float _43 = _36 ? 0.0f : -0.024003278464078903f;
        float _44 = _36 ? 0.0f : -0.1289687603712082f;
        float _45 = _36 ? 1.0f : 1.152971863746643f;
        _47 = _37;
        _48 = _38;
        _49 = _39;
        _50 = _40;
        _51 = _41;
        _52 = _42;
        _53 = _43;
        _54 = _44;
        _55 = _45;
      }
    }
  }
  uint _57 = _RootShaderParameters_040w;
  bool _58 = (_57 > 2);
  if (_58) {
    float _60 = log2(_24);
    float _61 = log2(_25);
    float _62 = log2(_27);
    float _63 = _60 * 0.012683313339948654f;
    float _64 = _61 * 0.012683313339948654f;
    float _65 = _62 * 0.012683313339948654f;
    float _66 = exp2(_63);
    float _67 = exp2(_64);
    float _68 = exp2(_65);
    float _69 = _66 + -0.8359375f;
    float _70 = _67 + -0.8359375f;
    float _71 = _68 + -0.8359375f;
    float _72 = max(0.0f, _69);
    float _73 = max(0.0f, _70);
    float _74 = max(0.0f, _71);
    float _75 = _66 * 18.6875f;
    float _76 = _67 * 18.6875f;
    float _77 = _68 * 18.6875f;
    float _78 = 18.8515625f - _75;
    float _79 = 18.8515625f - _76;
    float _80 = 18.8515625f - _77;
    float _81 = _72 / _78;
    float _82 = _73 / _79;
    float _83 = _74 / _80;
    float _84 = log2(_81);
    float _85 = log2(_82);
    float _86 = log2(_83);
    float _87 = _84 * 6.277394771575928f;
    float _88 = _85 * 6.277394771575928f;
    float _89 = _86 * 6.277394771575928f;
    float _90 = exp2(_87);
    float _91 = exp2(_88);
    float _92 = exp2(_89);
    float _93 = _90 * 100.0f;
    float _94 = _91 * 100.0f;
    float _95 = _92 * 100.0f;
    _113 = _93;
    _114 = _94;
    _115 = _95;
  } else {
    float _97 = _22 * 14.45161247253418f;
    float _98 = _97 + -6.07624626159668f;
    float _99 = _23 * 14.45161247253418f;
    float _100 = _99 + -6.07624626159668f;
    float _101 = _26 * 0.4516128897666931f;
    float _102 = _101 + -6.07624626159668f;
    float _103 = exp2(_98);
    float _104 = exp2(_100);
    float _105 = exp2(_102);
    float _106 = _103 * 0.18000000715255737f;
    float _107 = _104 * 0.18000000715255737f;
    float _108 = _105 * 0.18000000715255737f;
    float _109 = _106 + -0.002667719265446067f;
    float _110 = _107 + -0.002667719265446067f;
    float _111 = _108 + -0.002667719265446067f;
    _113 = _109;
    _114 = _110;
    _115 = _111;
  }
  float3 input_color = float3(_113, _114, _115);  // CustomEdit

  float _117 = UniformBufferConstants_WorkingColorSpace_008x;
  float _118 = UniformBufferConstants_WorkingColorSpace_008y;
  float _119 = UniformBufferConstants_WorkingColorSpace_008z;
  float _121 = UniformBufferConstants_WorkingColorSpace_009x;
  float _122 = UniformBufferConstants_WorkingColorSpace_009y;
  float _123 = UniformBufferConstants_WorkingColorSpace_009z;
  float _125 = UniformBufferConstants_WorkingColorSpace_010x;
  float _126 = UniformBufferConstants_WorkingColorSpace_010y;
  float _127 = UniformBufferConstants_WorkingColorSpace_010z;
  float _128 = _117 * _113;
  float _129 = mad(_118, _114, _128);
  float _130 = mad(_119, _115, _129);
  float _131 = _121 * _113;
  float _132 = mad(_122, _114, _131);
  float _133 = mad(_123, _115, _132);
  float _134 = _125 * _113;
  float _135 = mad(_126, _114, _134);
  float _136 = mad(_127, _115, _135);
  float _137 = dot(float3(_130, _133, _136), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _138 = _130 / _137;
  float _139 = _133 / _137;
  float _140 = _136 / _137;
  float _141 = _138 + -1.0f;
  float _142 = _139 + -1.0f;
  float _143 = _140 + -1.0f;
  float _144 = dot(float3(_141, _142, _143), float3(_141, _142, _143));
  float _145 = _144 * -4.0f;
  float _146 = exp2(_145);
  float _147 = 1.0f - _146;
  float _149 = _RootShaderParameters_036z;
  float _150 = _137 * _137;
  float _151 = _150 * -4.0f;
  float _152 = _151 * _149;
  float _153 = exp2(_152);
  float _154 = 1.0f - _153;
  float _155 = _154 * _147;
  float _156 = _130 * 1.370412826538086f;
  float _157 = mad(-0.32929131388664246f, _133, _156);
  float _158 = mad(-0.06368283927440643f, _136, _157);
  float _159 = _130 * -0.08343426138162613f;
  float _160 = mad(1.0970908403396606f, _133, _159);
  float _161 = mad(-0.010861567221581936f, _136, _160);
  float _162 = _130 * -0.02579325996339321f;
  float _163 = mad(-0.09862564504146576f, _133, _162);
  float _164 = mad(1.203694462776184f, _136, _163);
  float _165 = _158 - _130;
  float _166 = _161 - _133;
  float _167 = _164 - _136;
  float _168 = _165 * _155;
  float _169 = _166 * _155;
  float _170 = _167 * _155;
  float _171 = _168 + _130;
  float _172 = _169 + _133;
  float _173 = _170 + _136;
  float _174 = dot(float3(_171, _172, _173), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _176 = _RootShaderParameters_024x;
  float _177 = _RootShaderParameters_024y;
  float _178 = _RootShaderParameters_024z;
  float _179 = _RootShaderParameters_024w;
  float _181 = _RootShaderParameters_019x;
  float _182 = _RootShaderParameters_019y;
  float _183 = _RootShaderParameters_019z;
  float _184 = _RootShaderParameters_019w;
  float _185 = _181 + _176;
  float _186 = _182 + _177;
  float _187 = _183 + _178;
  float _188 = _184 + _179;
  float _190 = _RootShaderParameters_023x;
  float _191 = _RootShaderParameters_023y;
  float _192 = _RootShaderParameters_023z;
  float _193 = _RootShaderParameters_023w;
  float _195 = _RootShaderParameters_018x;
  float _196 = _RootShaderParameters_018y;
  float _197 = _RootShaderParameters_018z;
  float _198 = _RootShaderParameters_018w;
  float _199 = _195 * _190;
  float _200 = _196 * _191;
  float _201 = _197 * _192;
  float _202 = _198 * _193;
  float _204 = _RootShaderParameters_022x;
  float _205 = _RootShaderParameters_022y;
  float _206 = _RootShaderParameters_022z;
  float _207 = _RootShaderParameters_022w;
  float _209 = _RootShaderParameters_017x;
  float _210 = _RootShaderParameters_017y;
  float _211 = _RootShaderParameters_017z;
  float _212 = _RootShaderParameters_017w;
  float _213 = _209 * _204;
  float _214 = _210 * _205;
  float _215 = _211 * _206;
  float _216 = _212 * _207;
  float _218 = _RootShaderParameters_021x;
  float _219 = _RootShaderParameters_021y;
  float _220 = _RootShaderParameters_021z;
  float _221 = _RootShaderParameters_021w;
  float _223 = _RootShaderParameters_016x;
  float _224 = _RootShaderParameters_016y;
  float _225 = _RootShaderParameters_016z;
  float _226 = _RootShaderParameters_016w;
  float _227 = _223 * _218;
  float _228 = _224 * _219;
  float _229 = _225 * _220;
  float _230 = _226 * _221;
  float _232 = _RootShaderParameters_020x;
  float _233 = _RootShaderParameters_020y;
  float _234 = _RootShaderParameters_020z;
  float _235 = _RootShaderParameters_020w;
  float _237 = _RootShaderParameters_015x;
  float _238 = _RootShaderParameters_015y;
  float _239 = _RootShaderParameters_015z;
  float _240 = _RootShaderParameters_015w;
  float _241 = _237 * _232;
  float _242 = _238 * _233;
  float _243 = _239 * _234;
  float _244 = _240 * _235;
  float _245 = _241 * _244;
  float _246 = _242 * _244;
  float _247 = _243 * _244;
  float _248 = _171 - _174;
  float _249 = _172 - _174;
  float _250 = _173 - _174;
  float _251 = _245 * _248;
  float _252 = _246 * _249;
  float _253 = _247 * _250;
  float _254 = _251 + _174;
  float _255 = _252 + _174;
  float _256 = _253 + _174;
  float _257 = max(0.0f, _254);
  float _258 = max(0.0f, _255);
  float _259 = max(0.0f, _256);
  float _260 = _227 * _230;
  float _261 = _228 * _230;
  float _262 = _229 * _230;
  float _263 = _257 * 5.55555534362793f;
  float _264 = _258 * 5.55555534362793f;
  float _265 = _259 * 5.55555534362793f;
  float _266 = log2(_263);
  float _267 = log2(_264);
  float _268 = log2(_265);
  float _269 = _260 * _266;
  float _270 = _261 * _267;
  float _271 = _262 * _268;
  float _272 = exp2(_269);
  float _273 = exp2(_270);
  float _274 = exp2(_271);
  float _275 = _272 * 0.18000000715255737f;
  float _276 = _273 * 0.18000000715255737f;
  float _277 = _274 * 0.18000000715255737f;
  float _278 = _213 * _216;
  float _279 = _214 * _216;
  float _280 = _215 * _216;
  float _281 = 1.0f / _278;
  float _282 = 1.0f / _279;
  float _283 = 1.0f / _280;
  float _284 = log2(_275);
  float _285 = log2(_276);
  float _286 = log2(_277);
  float _287 = _284 * _281;
  float _288 = _285 * _282;
  float _289 = _286 * _283;
  float _290 = exp2(_287);
  float _291 = exp2(_288);
  float _292 = exp2(_289);
  float _293 = _199 * _202;
  float _294 = _200 * _202;
  float _295 = _201 * _202;
  float _296 = _293 * _290;
  float _297 = _294 * _291;
  float _298 = _295 * _292;
  float _299 = _185 + _188;
  float _300 = _186 + _188;
  float _301 = _187 + _188;
  float _302 = _299 + _296;
  float _303 = _300 + _297;
  float _304 = _301 + _298;
  float _306 = _RootShaderParameters_035z;
  float _307 = _174 / _306;
  float _308 = saturate(_307);
  float _309 = _308 * 2.0f;
  float _310 = 3.0f - _309;
  float _311 = _308 * _308;
  float _312 = _311 * _310;
  float _313 = 1.0f - _312;
  float _315 = _RootShaderParameters_034x;
  float _316 = _RootShaderParameters_034y;
  float _317 = _RootShaderParameters_034z;
  float _318 = _RootShaderParameters_034w;
  float _319 = _181 + _315;
  float _320 = _182 + _316;
  float _321 = _183 + _317;
  float _322 = _184 + _318;
  float _324 = _RootShaderParameters_033x;
  float _325 = _RootShaderParameters_033y;
  float _326 = _RootShaderParameters_033z;
  float _327 = _RootShaderParameters_033w;
  float _328 = _195 * _324;
  float _329 = _196 * _325;
  float _330 = _197 * _326;
  float _331 = _198 * _327;
  float _333 = _RootShaderParameters_032x;
  float _334 = _RootShaderParameters_032y;
  float _335 = _RootShaderParameters_032z;
  float _336 = _RootShaderParameters_032w;
  float _337 = _209 * _333;
  float _338 = _210 * _334;
  float _339 = _211 * _335;
  float _340 = _212 * _336;
  float _342 = _RootShaderParameters_031x;
  float _343 = _RootShaderParameters_031y;
  float _344 = _RootShaderParameters_031z;
  float _345 = _RootShaderParameters_031w;
  float _346 = _223 * _342;
  float _347 = _224 * _343;
  float _348 = _225 * _344;
  float _349 = _226 * _345;
  float _351 = _RootShaderParameters_030x;
  float _352 = _RootShaderParameters_030y;
  float _353 = _RootShaderParameters_030z;
  float _354 = _RootShaderParameters_030w;
  float _355 = _237 * _351;
  float _356 = _238 * _352;
  float _357 = _239 * _353;
  float _358 = _240 * _354;
  float _359 = _355 * _358;
  float _360 = _356 * _358;
  float _361 = _357 * _358;
  float _362 = _359 * _248;
  float _363 = _360 * _249;
  float _364 = _361 * _250;
  float _365 = _362 + _174;
  float _366 = _363 + _174;
  float _367 = _364 + _174;
  float _368 = max(0.0f, _365);
  float _369 = max(0.0f, _366);
  float _370 = max(0.0f, _367);
  float _371 = _346 * _349;
  float _372 = _347 * _349;
  float _373 = _348 * _349;
  float _374 = _368 * 5.55555534362793f;
  float _375 = _369 * 5.55555534362793f;
  float _376 = _370 * 5.55555534362793f;
  float _377 = log2(_374);
  float _378 = log2(_375);
  float _379 = log2(_376);
  float _380 = _371 * _377;
  float _381 = _372 * _378;
  float _382 = _373 * _379;
  float _383 = exp2(_380);
  float _384 = exp2(_381);
  float _385 = exp2(_382);
  float _386 = _383 * 0.18000000715255737f;
  float _387 = _384 * 0.18000000715255737f;
  float _388 = _385 * 0.18000000715255737f;
  float _389 = _337 * _340;
  float _390 = _338 * _340;
  float _391 = _339 * _340;
  float _392 = 1.0f / _389;
  float _393 = 1.0f / _390;
  float _394 = 1.0f / _391;
  float _395 = log2(_386);
  float _396 = log2(_387);
  float _397 = log2(_388);
  float _398 = _395 * _392;
  float _399 = _396 * _393;
  float _400 = _397 * _394;
  float _401 = exp2(_398);
  float _402 = exp2(_399);
  float _403 = exp2(_400);
  float _404 = _328 * _331;
  float _405 = _329 * _331;
  float _406 = _330 * _331;
  float _407 = _404 * _401;
  float _408 = _405 * _402;
  float _409 = _406 * _403;
  float _410 = _319 + _322;
  float _411 = _320 + _322;
  float _412 = _321 + _322;
  float _413 = _410 + _407;
  float _414 = _411 + _408;
  float _415 = _412 + _409;
  float _416 = _RootShaderParameters_036x;
  float _417 = _RootShaderParameters_035w;
  float _418 = _416 - _417;
  float _419 = _174 - _417;
  float _420 = _419 / _418;
  float _421 = saturate(_420);
  float _422 = _421 * 2.0f;
  float _423 = 3.0f - _422;
  float _424 = _421 * _421;
  float _425 = _424 * _423;
  float _427 = _RootShaderParameters_029x;
  float _428 = _RootShaderParameters_029y;
  float _429 = _RootShaderParameters_029z;
  float _430 = _RootShaderParameters_029w;
  float _431 = _181 + _427;
  float _432 = _182 + _428;
  float _433 = _183 + _429;
  float _434 = _184 + _430;
  float _436 = _RootShaderParameters_028x;
  float _437 = _RootShaderParameters_028y;
  float _438 = _RootShaderParameters_028z;
  float _439 = _RootShaderParameters_028w;
  float _440 = _195 * _436;
  float _441 = _196 * _437;
  float _442 = _197 * _438;
  float _443 = _198 * _439;
  float _445 = _RootShaderParameters_027x;
  float _446 = _RootShaderParameters_027y;
  float _447 = _RootShaderParameters_027z;
  float _448 = _RootShaderParameters_027w;
  float _449 = _209 * _445;
  float _450 = _210 * _446;
  float _451 = _211 * _447;
  float _452 = _212 * _448;
  float _454 = _RootShaderParameters_026x;
  float _455 = _RootShaderParameters_026y;
  float _456 = _RootShaderParameters_026z;
  float _457 = _RootShaderParameters_026w;
  float _458 = _223 * _454;
  float _459 = _224 * _455;
  float _460 = _225 * _456;
  float _461 = _226 * _457;
  float _463 = _RootShaderParameters_025x;
  float _464 = _RootShaderParameters_025y;
  float _465 = _RootShaderParameters_025z;
  float _466 = _RootShaderParameters_025w;
  float _467 = _237 * _463;
  float _468 = _238 * _464;
  float _469 = _239 * _465;
  float _470 = _240 * _466;
  float _471 = _467 * _470;
  float _472 = _468 * _470;
  float _473 = _469 * _470;
  float _474 = _471 * _248;
  float _475 = _472 * _249;
  float _476 = _473 * _250;
  float _477 = _474 + _174;
  float _478 = _475 + _174;
  float _479 = _476 + _174;
  float _480 = max(0.0f, _477);
  float _481 = max(0.0f, _478);
  float _482 = max(0.0f, _479);
  float _483 = _458 * _461;
  float _484 = _459 * _461;
  float _485 = _460 * _461;
  float _486 = _480 * 5.55555534362793f;
  float _487 = _481 * 5.55555534362793f;
  float _488 = _482 * 5.55555534362793f;
  float _489 = log2(_486);
  float _490 = log2(_487);
  float _491 = log2(_488);
  float _492 = _483 * _489;
  float _493 = _484 * _490;
  float _494 = _485 * _491;
  float _495 = exp2(_492);
  float _496 = exp2(_493);
  float _497 = exp2(_494);
  float _498 = _495 * 0.18000000715255737f;
  float _499 = _496 * 0.18000000715255737f;
  float _500 = _497 * 0.18000000715255737f;
  float _501 = _449 * _452;
  float _502 = _450 * _452;
  float _503 = _451 * _452;
  float _504 = 1.0f / _501;
  float _505 = 1.0f / _502;
  float _506 = 1.0f / _503;
  float _507 = log2(_498);
  float _508 = log2(_499);
  float _509 = log2(_500);
  float _510 = _507 * _504;
  float _511 = _508 * _505;
  float _512 = _509 * _506;
  float _513 = exp2(_510);
  float _514 = exp2(_511);
  float _515 = exp2(_512);
  float _516 = _440 * _443;
  float _517 = _441 * _443;
  float _518 = _442 * _443;
  float _519 = _516 * _513;
  float _520 = _517 * _514;
  float _521 = _518 * _515;
  float _522 = _431 + _434;
  float _523 = _432 + _434;
  float _524 = _433 + _434;
  float _525 = _522 + _519;
  float _526 = _523 + _520;
  float _527 = _524 + _521;
  float _528 = _312 - _425;
  float _529 = _313 * _302;
  float _530 = _313 * _303;
  float _531 = _313 * _304;
  float _532 = _525 * _528;
  float _533 = _526 * _528;
  float _534 = _527 * _528;
  float _535 = _425 * _413;
  float _536 = _425 * _414;
  float _537 = _425 * _415;
  float _538 = _535 + _529;
  float _539 = _538 + _532;
  float _540 = _536 + _530;
  float _541 = _540 + _533;
  float _542 = _537 + _531;
  float _543 = _542 + _534;
  float _545 = UniformBufferConstants_WorkingColorSpace_012x;
  float _546 = UniformBufferConstants_WorkingColorSpace_012y;
  float _547 = UniformBufferConstants_WorkingColorSpace_012z;
  float _549 = UniformBufferConstants_WorkingColorSpace_013x;
  float _550 = UniformBufferConstants_WorkingColorSpace_013y;
  float _551 = UniformBufferConstants_WorkingColorSpace_013z;
  float _553 = UniformBufferConstants_WorkingColorSpace_014x;
  float _554 = UniformBufferConstants_WorkingColorSpace_014y;
  float _555 = UniformBufferConstants_WorkingColorSpace_014z;
  float _556 = _539 * _545;
  float _557 = mad(_546, _541, _556);
  float _558 = mad(_547, _543, _557);
  float _559 = _549 * _539;
  float _560 = mad(_550, _541, _559);
  float _561 = mad(_551, _543, _560);
  float _562 = _553 * _539;
  float _563 = mad(_554, _541, _562);
  float _564 = mad(_555, _543, _563);
  float _565 = _RootShaderParameters_036y;
  float _566 = _539 * 0.9386394023895264f;
  float _567 = mad(-4.540197551250458e-09f, _541, _566);
  float _568 = mad(0.061360642313957214f, _543, _567);
  float _569 = _539 * 6.775371730327606e-08f;
  float _570 = mad(0.8307942152023315f, _541, _569);
  float _571 = mad(0.169205904006958f, _543, _570);
  float _572 = _539 * -9.313225746154785e-10f;
  float _573 = mad(-2.3283064365386963e-10f, _541, _572);
  float _574 = _568 - _539;
  float _575 = _571 - _541;
  float _576 = _574 * _565;
  float _577 = _575 * _565;
  float _578 = _573 * _565;
  float _579 = _576 + _539;
  float _580 = _577 + _541;
  float _581 = _578 + _543;
  float3 ap1_graded_color = float3(_579, _580, _581);  // CustomEdit

  float _582 = _579 * 0.6954522132873535f;
  float _583 = mad(0.14067868888378143f, _580, _582);
  float _584 = mad(0.16386905312538147f, _581, _583);
  float _585 = _579 * 0.044794581830501556f;
  float _586 = mad(0.8596711158752441f, _580, _585);
  float _587 = mad(0.0955343246459961f, _581, _586);
  float _588 = _579 * -0.005525882821530104f;
  float _589 = mad(0.004025210160762072f, _580, _588);
  float _590 = mad(1.0015007257461548f, _581, _589);
  float _591 = min(_584, _587);
  float _592 = min(_591, _590);
  float _593 = max(_584, _587);
  float _594 = max(_593, _590);
  float _595 = max(_594, 1.000000013351432e-10f);
  float _596 = max(_592, 1.000000013351432e-10f);
  float _597 = _595 - _596;
  float _598 = max(_594, 0.009999999776482582f);
  float _599 = _597 / _598;
  float _600 = _590 - _587;
  float _601 = _600 * _590;
  float _602 = _587 - _584;
  float _603 = _602 * _587;
  float _604 = _601 + _603;
  float _605 = _584 - _590;
  float _606 = _605 * _584;
  float _607 = _604 + _606;
  float _608 = sqrt(_607);
  float _609 = _608 * 1.75f;
  float _610 = _587 + _584;
  float _611 = _610 + _590;
  float _612 = _611 + _609;
  float _613 = _612 * 0.3333333432674408f;
  float _614 = _599 + -0.4000000059604645f;
  float _615 = _614 * 5.0f;
  float _616 = _614 * 2.5f;
  float _617 = abs(_616);
  float _618 = 1.0f - _617;
  float _619 = max(_618, 0.0f);
  bool _620 = (_615 > 0.0f);
  bool _621 = (_615 < 0.0f);
  int _622 = int(_620);
  int _623 = int(_621);
  int _624 = _622 - _623;
  float _625 = float(_624);
  float _626 = _619 * _619;
  float _627 = 1.0f - _626;
  float _628 = _625 * _627;
  float _629 = _628 + 1.0f;
  float _630 = _629 * 0.02500000037252903f;
  bool _631 = !(_613 <= 0.0533333346247673f);
  _639 = _630;
  if (_631) {
    bool _633 = !(_613 >= 0.1599999964237213f);
    _639 = 0.0f;
    if (_633) {
      float _635 = 0.23999999463558197f / _612;
      float _636 = _635 + -0.5f;
      float _637 = _636 * _630;
      _639 = _637;
    }
  }
  float _640 = _639 + 1.0f;
  float _641 = _640 * _584;
  float _642 = _640 * _587;
  float _643 = _640 * _590;
  bool _644 = (_641 == _642);
  bool _645 = (_642 == _643);
  bool _646 = _644 && _645;
  _675 = 0.0f;
  if (!_646) {
    float _648 = _641 * 2.0f;
    float _649 = _648 - _642;
    float _650 = _649 - _643;
    float _651 = _587 - _590;
    float _652 = _651 * 1.7320507764816284f;
    float _653 = _652 * _640;
    float _654 = _653 / _650;
    float _655 = atan(_654);
    float _656 = _655 + 3.1415927410125732f;
    float _657 = _655 + -3.1415927410125732f;
    bool _658 = (_650 < 0.0f);
    bool _659 = (_650 == 0.0f);
    bool _660 = (_653 >= 0.0f);
    bool _661 = (_653 < 0.0f);
    bool _662 = _660 && _658;
    float _663 = _662 ? _656 : _655;
    bool _664 = _661 && _658;
    float _665 = _664 ? _657 : _663;
    bool _666 = _661 && _659;
    bool _667 = _660 && _659;
    float _668 = _665 * 57.2957763671875f;
    float _669 = _666 ? -90.0f : _668;
    float _670 = _667 ? 90.0f : _669;
    bool _671 = (_670 < 0.0f);
    _675 = _670;
    if (_671) {
      float _673 = _670 + 360.0f;
      _675 = _673;
    }
  }
  float _676 = max(_675, 0.0f);
  float _677 = min(_676, 360.0f);
  bool _678 = (_677 < -180.0f);
  if (_678) {
    float _680 = _677 + 360.0f;
    _686 = _680;
  } else {
    bool _682 = (_677 > 180.0f);
    _686 = _677;
    if (_682) {
      float _684 = _677 + -360.0f;
      _686 = _684;
    }
  }
  float _687 = _686 * 0.014814814552664757f;
  float _688 = abs(_687);
  float _689 = 1.0f - _688;
  float _690 = saturate(_689);
  float _691 = _690 * 2.0f;
  float _692 = 3.0f - _691;
  float _693 = _690 * _690;
  float _694 = _693 * _692;
  float _695 = 0.029999999329447746f - _641;
  float _696 = _599 * 0.18000000715255737f;
  float _697 = _696 * _695;
  float _698 = _694 * _694;
  float _699 = _698 * _697;
  float _700 = _699 + _641;
  float _701 = _700 * 1.4514392614364624f;
  float _702 = mad(-0.2365107536315918f, _642, _701);
  float _703 = mad(-0.21492856740951538f, _643, _702);
  float _704 = _700 * -0.07655377686023712f;
  float _705 = mad(1.17622971534729f, _642, _704);
  float _706 = mad(-0.09967592358589172f, _643, _705);
  float _707 = _700 * 0.008316148072481155f;
  float _708 = mad(-0.006032449658960104f, _642, _707);
  float _709 = mad(0.9977163076400757f, _643, _708);
  float _710 = max(0.0f, _703);
  float _711 = max(0.0f, _706);
  float _712 = max(0.0f, _709);
  float _713 = dot(float3(_710, _711, _712), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _714 = _710 - _713;
  float _715 = _711 - _713;
  float _716 = _712 - _713;
  float _717 = _714 * 0.9599999785423279f;
  float _718 = _715 * 0.9599999785423279f;
  float _719 = _716 * 0.9599999785423279f;
  float _720 = _717 + _713;
  float _721 = _718 + _713;
  float _722 = _719 + _713;

  float3 ap1_aces_colored = float3(_720, _721, _722);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _724 = _RootShaderParameters_037w;
  float _725 = _724 + 1.0f;
  float _726 = _RootShaderParameters_037y;
  float _727 = _725 - _726;
  float _729 = _RootShaderParameters_038x;
  float _730 = _729 + 1.0f;
  float _731 = _RootShaderParameters_037z;
  float _732 = _730 - _731;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _733 = (_726 > 0.800000011920929f);
    float _734 = _RootShaderParameters_037x;
    if (_733) {
      float _736 = 0.8199999928474426f - _726;
      float _737 = _736 / _734;
      float _738 = _737 + -0.7447274923324585f;
      _750 = _738;
    } else {
      float _740 = _724 + 0.18000000715255737f;
      float _741 = _740 / _727;
      float _742 = 2.0f - _741;
      float _743 = _741 / _742;
      float _744 = log2(_743);
      float _745 = _744 * 0.3465735912322998f;
      float _746 = _727 / _734;
      float _747 = _745 * _746;
      float _748 = -0.7447274923324585f - _747;
      _750 = _748;
    }
    float _751 = 1.0f - _726;
    float _752 = _751 / _734;
    float _753 = _752 - _750;
    float _754 = _731 / _734;
    float _755 = _754 - _753;
    float _756 = log2(_720);
    float _757 = log2(_721);
    float _758 = log2(_722);
    float _759 = _756 * 0.3010300099849701f;
    float _760 = _757 * 0.3010300099849701f;
    float _761 = _758 * 0.3010300099849701f;
    float _762 = _759 + _753;
    float _763 = _760 + _753;
    float _764 = _761 + _753;
    float _765 = _734 * _762;
    float _766 = _734 * _763;
    float _767 = _734 * _764;
    float _768 = _727 * 2.0f;
    float _769 = _734 * -2.0f;
    float _770 = _769 / _727;
    float _771 = _759 - _750;
    float _772 = _760 - _750;
    float _773 = _761 - _750;
    float _774 = _771 * 1.4426950216293335f;
    float _775 = _774 * _770;
    float _776 = _772 * 1.4426950216293335f;
    float _777 = _776 * _770;
    float _778 = _773 * 1.4426950216293335f;
    float _779 = _778 * _770;
    float _780 = exp2(_775);
    float _781 = exp2(_777);
    float _782 = exp2(_779);
    float _783 = _780 + 1.0f;
    float _784 = _781 + 1.0f;
    float _785 = _782 + 1.0f;
    float _786 = _768 / _783;
    float _787 = _768 / _784;
    float _788 = _768 / _785;
    float _789 = _786 - _724;
    float _790 = _787 - _724;
    float _791 = _788 - _724;
    float _792 = _732 * 2.0f;
    float _793 = _734 * 2.0f;
    float _794 = _793 / _732;
    float _795 = _759 - _755;
    float _796 = _760 - _755;
    float _797 = _761 - _755;
    float _798 = _795 * 1.4426950216293335f;
    float _799 = _798 * _794;
    float _800 = _796 * 1.4426950216293335f;
    float _801 = _800 * _794;
    float _802 = _797 * 1.4426950216293335f;
    float _803 = _802 * _794;
    float _804 = exp2(_799);
    float _805 = exp2(_801);
    float _806 = exp2(_803);
    float _807 = _804 + 1.0f;
    float _808 = _805 + 1.0f;
    float _809 = _806 + 1.0f;
    float _810 = _792 / _807;
    float _811 = _792 / _808;
    float _812 = _792 / _809;
    float _813 = _730 - _810;
    float _814 = _730 - _811;
    float _815 = _730 - _812;
    bool _816 = (_759 < _750);
    bool _817 = (_760 < _750);
    bool _818 = (_761 < _750);
    float _819 = _816 ? _789 : _765;
    float _820 = _817 ? _790 : _766;
    float _821 = _818 ? _791 : _767;
    bool _822 = (_759 > _755);
    bool _823 = (_760 > _755);
    bool _824 = (_761 > _755);
    float _825 = _822 ? _813 : _765;
    float _826 = _823 ? _814 : _766;
    float _827 = _824 ? _815 : _767;
    float _828 = _755 - _750;
    float _829 = _771 / _828;
    float _830 = _772 / _828;
    float _831 = _773 / _828;
    float _832 = saturate(_829);
    float _833 = saturate(_830);
    float _834 = saturate(_831);
    bool _835 = (_755 < _750);
    float _836 = 1.0f - _832;
    float _837 = 1.0f - _833;
    float _838 = 1.0f - _834;
    float _839 = _835 ? _836 : _832;
    float _840 = _835 ? _837 : _833;
    float _841 = _835 ? _838 : _834;
    float _842 = _839 * 2.0f;
    float _843 = _840 * 2.0f;
    float _844 = _841 * 2.0f;
    float _845 = 3.0f - _842;
    float _846 = 3.0f - _843;
    float _847 = 3.0f - _844;
    float _848 = _825 - _819;
    float _849 = _826 - _820;
    float _850 = _827 - _821;
    float _851 = _839 * _839;
    float _852 = _851 * _848;
    float _853 = _852 * _845;
    float _854 = _840 * _840;
    float _855 = _854 * _849;
    float _856 = _855 * _846;
    float _857 = _841 * _841;
    float _858 = _857 * _850;
    float _859 = _858 * _847;
    float _860 = _853 + _819;
    float _861 = _856 + _820;
    float _862 = _859 + _821;
    float _863 = dot(float3(_860, _861, _862), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _864 = _860 - _863;
    float _865 = _861 - _863;
    float _866 = _862 - _863;
    float _867 = _864 * 0.9300000071525574f;
    float _868 = _865 * 0.9300000071525574f;
    float _869 = _866 * 0.9300000071525574f;
    float _870 = _867 + _863;
    float _871 = _868 + _863;
    float _872 = _869 + _863;
    float _873 = max(0.0f, _870);
    float _874 = max(0.0f, _871);
    float _875 = max(0.0f, _872);
    sdr_ap1_color = float3(_873, _874, _875);
    // end of FilmToneMap
  }

  float _876 = _RootShaderParameters_036w;
  // CustomEdit
  /* float _877 = _873 - _579;
  float _878 = _874 - _580;
  float _879 = _875 - _581; */
  float _877 = sdr_ap1_color.r - _579;
  float _878 = sdr_ap1_color.g - _580;
  float _879 = sdr_ap1_color.b - _581;

  float _880 = _876 * _877;
  float _881 = _876 * _878;
  float _882 = _876 * _879;
  float _883 = _880 + _579;
  float _884 = _881 + _580;
  float _885 = _882 + _581;
  float _886 = _883 * 1.065374732017517f;
  float _887 = mad(1.451815478503704e-06f, _884, _886);
  float _888 = mad(-0.06537103652954102f, _885, _887);
  float _889 = _883 * -2.57161445915699e-07f;
  float _890 = mad(1.2036634683609009f, _884, _889);
  float _891 = mad(-0.20366770029067993f, _885, _890);
  float _892 = _883 * 1.862645149230957e-08f;
  float _893 = mad(2.0954757928848267e-08f, _884, _892);
  float _894 = mad(0.9999996423721313f, _885, _893);
  float _895 = _888 - _883;
  float _896 = _891 - _884;
  float _897 = _894 - _885;
  float _898 = _895 * _565;
  float _899 = _896 * _565;
  float _900 = _897 * _565;
  float _901 = _898 + _883;
  float _902 = _899 + _884;
  float _903 = _900 + _885;
  float _904 = _545 * _901;
  float _905 = mad(_546, _902, _904);
  float _906 = mad(_547, _903, _905);
  float _907 = _549 * _901;
  float _908 = mad(_550, _902, _907);
  float _909 = mad(_551, _903, _908);
  float _910 = _553 * _901;
  float _911 = mad(_554, _902, _910);
  float _912 = mad(_555, _903, _911);
  float _913 = max(0.0f, _906);
  float _914 = max(0.0f, _909);
  float _915 = max(0.0f, _912);

  float _917 = _RootShaderParameters_039x;
  float _918 = _917 * _913;
  float _919 = _917 * _914;
  float _920 = _917 * _915;
  float _921 = _RootShaderParameters_039y;
  float _922 = _RootShaderParameters_039z;
  float _923 = _921 + _918;
  float _924 = _923 * _913;
  float _925 = _924 + _922;
  float _926 = _921 + _919;
  float _927 = _926 * _914;
  float _928 = _927 + _922;
  float _929 = _921 + _920;
  float _930 = _929 * _915;
  float _931 = _930 + _922;
  float _933 = _RootShaderParameters_013w;
  float _934 = _RootShaderParameters_013x;
  float _935 = _RootShaderParameters_013y;
  float _936 = _RootShaderParameters_013z;
  float _938 = _RootShaderParameters_014x;
  float _939 = _RootShaderParameters_014y;
  float _940 = _RootShaderParameters_014z;
  float _941 = _938 * _925;
  float _942 = _939 * _928;
  float _943 = _940 * _931;
  float _944 = _934 - _941;
  float _945 = _935 - _942;
  float _946 = _936 - _943;
  float _947 = _944 * _933;
  float _948 = _945 * _933;
  float _949 = _946 * _933;
  float _950 = _947 + _941;
  float _951 = _948 + _942;
  float _952 = _949 + _943;
  float _953 = _938 * _558;
  float _954 = _939 * _561;
  float _955 = _940 * _564;
  float _956 = _934 - _953;
  float _957 = _935 - _954;
  float _958 = _936 - _955;
  float _959 = _956 * _933;
  float _960 = _957 * _933;
  float _961 = _958 * _933;
  float _962 = _959 + _953;
  float _963 = _960 + _954;
  float _964 = _961 + _955;
  float _966 = _RootShaderParameters_040y;
  float _967 = max(0.0f, _950);
  float _968 = max(0.0f, _951);
  float _969 = max(0.0f, _952);
  float _970 = log2(_967);
  float _971 = log2(_968);
  float _972 = log2(_969);
  float _973 = _970 * _966;
  float _974 = _971 * _966;
  float _975 = _972 * _966;
  float _976 = exp2(_973);
  float _977 = exp2(_974);
  float _978 = exp2(_975);

  // CustomEdit
  float3 film_graded_color = float3(_976, _977, _978);
  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_6, _7, _8)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _980 = _RootShaderParameters_040w;
  bool _981 = (_980 == 0);
  if (_981) {
    uint _984 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _985 = (_984 == 0);
    _1018 = _976;
    _1019 = _977;
    _1020 = _978;
    do {
      if (_985) {
        float _988 = UniformBufferConstants_WorkingColorSpace_008x;
        float _989 = UniformBufferConstants_WorkingColorSpace_008y;
        float _990 = UniformBufferConstants_WorkingColorSpace_008z;
        float _992 = UniformBufferConstants_WorkingColorSpace_009x;
        float _993 = UniformBufferConstants_WorkingColorSpace_009y;
        float _994 = UniformBufferConstants_WorkingColorSpace_009z;
        float _996 = UniformBufferConstants_WorkingColorSpace_010x;
        float _997 = UniformBufferConstants_WorkingColorSpace_010y;
        float _998 = UniformBufferConstants_WorkingColorSpace_010z;
        float _999 = _988 * _976;
        float _1000 = mad(_989, _977, _999);
        float _1001 = mad(_990, _978, _1000);
        float _1002 = _992 * _976;
        float _1003 = mad(_993, _977, _1002);
        float _1004 = mad(_994, _978, _1003);
        float _1005 = _996 * _976;
        float _1006 = mad(_997, _977, _1005);
        float _1007 = mad(_998, _978, _1006);
        float _1008 = _1001 * _47;
        float _1009 = mad(_48, _1004, _1008);
        float _1010 = mad(_49, _1007, _1009);
        float _1011 = _1001 * _50;
        float _1012 = mad(_51, _1004, _1011);
        float _1013 = mad(_52, _1007, _1012);
        float _1014 = _1001 * _53;
        float _1015 = mad(_54, _1004, _1014);
        float _1016 = mad(_55, _1007, _1015);
        _1018 = _1010;
        _1019 = _1013;
        _1020 = _1016;
      }
      bool _1021 = (_1018 < 0.0031306699384003878f);
      do {
        if (_1021) {
          float _1023 = _1018 * 12.920000076293945f;
          _1031 = _1023;
        } else {
          float _1025 = log2(_1018);
          float _1026 = _1025 * 0.4166666567325592f;
          float _1027 = exp2(_1026);
          float _1028 = _1027 * 1.0549999475479126f;
          float _1029 = _1028 + -0.054999999701976776f;
          _1031 = _1029;
        }
        bool _1032 = (_1019 < 0.0031306699384003878f);
        do {
          if (_1032) {
            float _1034 = _1019 * 12.920000076293945f;
            _1042 = _1034;
          } else {
            float _1036 = log2(_1019);
            float _1037 = _1036 * 0.4166666567325592f;
            float _1038 = exp2(_1037);
            float _1039 = _1038 * 1.0549999475479126f;
            float _1040 = _1039 + -0.054999999701976776f;
            _1042 = _1040;
          }
          bool _1043 = (_1020 < 0.0031306699384003878f);
          if (_1043) {
            float _1045 = _1020 * 12.920000076293945f;
            _2402 = _1031;
            _2403 = _1042;
            _2404 = _1045;
          } else {
            float _1047 = log2(_1020);
            float _1048 = _1047 * 0.4166666567325592f;
            float _1049 = exp2(_1048);
            float _1050 = _1049 * 1.0549999475479126f;
            float _1051 = _1050 + -0.054999999701976776f;
            _2402 = _1031;
            _2403 = _1042;
            _2404 = _1051;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1053 = (_980 == 1);
    if (_1053) {
      float _1056 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1057 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1058 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1060 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1061 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1062 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1064 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1065 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1066 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1067 = _1056 * _976;
      float _1068 = mad(_1057, _977, _1067);
      float _1069 = mad(_1058, _978, _1068);
      float _1070 = _1060 * _976;
      float _1071 = mad(_1061, _977, _1070);
      float _1072 = mad(_1062, _978, _1071);
      float _1073 = _1064 * _976;
      float _1074 = mad(_1065, _977, _1073);
      float _1075 = mad(_1066, _978, _1074);
      float _1076 = _1069 * _47;
      float _1077 = mad(_48, _1072, _1076);
      float _1078 = mad(_49, _1075, _1077);
      float _1079 = _1069 * _50;
      float _1080 = mad(_51, _1072, _1079);
      float _1081 = mad(_52, _1075, _1080);
      float _1082 = _1069 * _53;
      float _1083 = mad(_54, _1072, _1082);
      float _1084 = mad(_55, _1075, _1083);
      float _1085 = max(6.103519990574569e-05f, _1078);
      float _1086 = max(6.103519990574569e-05f, _1081);
      float _1087 = max(6.103519990574569e-05f, _1084);
      float _1088 = max(_1085, 0.017999999225139618f);
      float _1089 = max(_1086, 0.017999999225139618f);
      float _1090 = max(_1087, 0.017999999225139618f);
      float _1091 = log2(_1088);
      float _1092 = log2(_1089);
      float _1093 = log2(_1090);
      float _1094 = _1091 * 0.44999998807907104f;
      float _1095 = _1092 * 0.44999998807907104f;
      float _1096 = _1093 * 0.44999998807907104f;
      float _1097 = exp2(_1094);
      float _1098 = exp2(_1095);
      float _1099 = exp2(_1096);
      float _1100 = _1097 * 1.0989999771118164f;
      float _1101 = _1098 * 1.0989999771118164f;
      float _1102 = _1099 * 1.0989999771118164f;
      float _1103 = _1100 + -0.0989999994635582f;
      float _1104 = _1101 + -0.0989999994635582f;
      float _1105 = _1102 + -0.0989999994635582f;
      float _1106 = _1085 * 4.5f;
      float _1107 = _1086 * 4.5f;
      float _1108 = _1087 * 4.5f;
      float _1109 = min(_1106, _1103);
      float _1110 = min(_1107, _1104);
      float _1111 = min(_1108, _1105);
      _2402 = _1109;
      _2403 = _1110;
      _2404 = _1111;
    } else {
      bool _1113 = (_980 == 3);
      bool _1114 = (_980 == 5);
      bool _1115 = _1113 || _1114;
      if (_1115) {
        //   %1117 = bitcast [6 x float]* %11 to i8*
        //   %1118 = bitcast [6 x float]* %12 to i8*
        float _1120 = _RootShaderParameters_012z;
        float _1121 = _RootShaderParameters_012y;
        float _1122 = _RootShaderParameters_012x;
        float _1124 = _RootShaderParameters_011x;
        float _1125 = _RootShaderParameters_011y;
        float _1126 = _RootShaderParameters_011z;
        float _1127 = _RootShaderParameters_011w;
        float _1129 = _RootShaderParameters_010x;
        float _1130 = _RootShaderParameters_010y;
        float _1131 = _RootShaderParameters_010z;
        float _1132 = _RootShaderParameters_010w;
        float _1134 = _RootShaderParameters_009x;
        float _1136 = _RootShaderParameters_008x;
        float _1137 = _RootShaderParameters_008y;
        float _1138 = _RootShaderParameters_008z;
        float _1139 = _RootShaderParameters_008w;
        _11[0] = _1129;
        _11[1] = _1130;
        _11[2] = _1131;
        _11[3] = _1132;
        _11[4] = _1122;
        _11[5] = _1122;
        _12[0] = _1124;
        _12[1] = _1125;
        _12[2] = _1126;
        _12[3] = _1127;
        _12[4] = _1121;
        _12[5] = _1121;
        float _1153 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1154 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1155 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1157 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1158 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1159 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1161 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1162 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1163 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1164 = _1120 * _962;
        float _1165 = _1120 * _963;
        float _1166 = _1120 * _964;
        float _1167 = _1153 * _1164;
        float _1168 = mad(_1154, _1165, _1167);
        float _1169 = mad(_1155, _1166, _1168);
        float _1170 = _1157 * _1164;
        float _1171 = mad(_1158, _1165, _1170);
        float _1172 = mad(_1159, _1166, _1171);
        float _1173 = _1161 * _1164;
        float _1174 = mad(_1162, _1165, _1173);
        float _1175 = mad(_1163, _1166, _1174);
        float _1176 = min(_1169, _1172);
        float _1177 = min(_1176, _1175);
        float _1178 = max(_1169, _1172);
        float _1179 = max(_1178, _1175);
        float _1180 = max(_1179, 1.000000013351432e-10f);
        float _1181 = max(_1177, 1.000000013351432e-10f);
        float _1182 = _1180 - _1181;
        float _1183 = max(_1179, 0.009999999776482582f);
        float _1184 = _1182 / _1183;
        float _1185 = _1175 - _1172;
        float _1186 = _1185 * _1175;
        float _1187 = _1172 - _1169;
        float _1188 = _1187 * _1172;
        float _1189 = _1186 + _1188;
        float _1190 = _1169 - _1175;
        float _1191 = _1190 * _1169;
        float _1192 = _1189 + _1191;
        float _1193 = sqrt(_1192);
        float _1194 = _1193 * 1.75f;
        float _1195 = _1172 + _1169;
        float _1196 = _1195 + _1175;
        float _1197 = _1196 + _1194;
        float _1198 = _1197 * 0.3333333432674408f;
        float _1199 = _1184 + -0.4000000059604645f;
        float _1200 = _1199 * 5.0f;
        float _1201 = _1199 * 2.5f;
        float _1202 = abs(_1201);
        float _1203 = 1.0f - _1202;
        float _1204 = max(_1203, 0.0f);
        bool _1205 = (_1200 > 0.0f);
        bool _1206 = (_1200 < 0.0f);
        int _1207 = int(_1205);
        int _1208 = int(_1206);
        int _1209 = _1207 - _1208;
        float _1210 = float(_1209);
        float _1211 = _1204 * _1204;
        float _1212 = 1.0f - _1211;
        float _1213 = _1210 * _1212;
        float _1214 = _1213 + 1.0f;
        float _1215 = _1214 * 0.02500000037252903f;
        bool _1216 = !(_1198 <= 0.0533333346247673f);
        _1224 = _1215;
        do {
          if (_1216) {
            bool _1218 = !(_1198 >= 0.1599999964237213f);
            _1224 = 0.0f;
            if (_1218) {
              float _1220 = 0.23999999463558197f / _1197;
              float _1221 = _1220 + -0.5f;
              float _1222 = _1221 * _1215;
              _1224 = _1222;
            }
          }
          float _1225 = _1224 + 1.0f;
          float _1226 = _1225 * _1169;
          float _1227 = _1225 * _1172;
          float _1228 = _1225 * _1175;
          bool _1229 = (_1226 == _1227);
          bool _1230 = (_1227 == _1228);
          bool _1231 = _1229 && _1230;
          _1260 = 0.0f;
          do {
            if (!_1231) {
              float _1233 = _1226 * 2.0f;
              float _1234 = _1233 - _1227;
              float _1235 = _1234 - _1228;
              float _1236 = _1172 - _1175;
              float _1237 = _1236 * 1.7320507764816284f;
              float _1238 = _1237 * _1225;
              float _1239 = _1238 / _1235;
              float _1240 = atan(_1239);
              float _1241 = _1240 + 3.1415927410125732f;
              float _1242 = _1240 + -3.1415927410125732f;
              bool _1243 = (_1235 < 0.0f);
              bool _1244 = (_1235 == 0.0f);
              bool _1245 = (_1238 >= 0.0f);
              bool _1246 = (_1238 < 0.0f);
              bool _1247 = _1245 && _1243;
              float _1248 = _1247 ? _1241 : _1240;
              bool _1249 = _1246 && _1243;
              float _1250 = _1249 ? _1242 : _1248;
              bool _1251 = _1246 && _1244;
              bool _1252 = _1245 && _1244;
              float _1253 = _1250 * 57.2957763671875f;
              float _1254 = _1251 ? -90.0f : _1253;
              float _1255 = _1252 ? 90.0f : _1254;
              bool _1256 = (_1255 < 0.0f);
              _1260 = _1255;
              if (_1256) {
                float _1258 = _1255 + 360.0f;
                _1260 = _1258;
              }
            }
            float _1261 = max(_1260, 0.0f);
            float _1262 = min(_1261, 360.0f);
            bool _1263 = (_1262 < -180.0f);
            do {
              if (_1263) {
                float _1265 = _1262 + 360.0f;
                _1271 = _1265;
              } else {
                bool _1267 = (_1262 > 180.0f);
                _1271 = _1262;
                if (_1267) {
                  float _1269 = _1262 + -360.0f;
                  _1271 = _1269;
                }
              }
              bool _1272 = (_1271 > -67.5f);
              bool _1273 = (_1271 < 67.5f);
              bool _1274 = _1272 && _1273;
              _1310 = 0.0f;
              do {
                if (_1274) {
                  float _1276 = _1271 + 67.5f;
                  float _1277 = _1276 * 0.029629629105329514f;
                  int _1278 = int(_1277);
                  float _1279 = float(_1278);
                  float _1280 = _1277 - _1279;
                  float _1281 = _1280 * _1280;
                  float _1282 = _1281 * _1280;
                  bool _1283 = (_1278 == 3);
                  if (_1283) {
                    float _1285 = _1282 * 0.1666666716337204f;
                    float _1286 = _1281 * 0.5f;
                    float _1287 = _1280 * 0.5f;
                    float _1288 = 0.1666666716337204f - _1287;
                    float _1289 = _1288 + _1286;
                    float _1290 = _1289 - _1285;
                    _1310 = _1290;
                  } else {
                    bool _1292 = (_1278 == 2);
                    if (_1292) {
                      float _1294 = _1282 * 0.5f;
                      float _1295 = 0.6666666865348816f - _1281;
                      float _1296 = _1295 + _1294;
                      _1310 = _1296;
                    } else {
                      bool _1298 = (_1278 == 1);
                      if (_1298) {
                        float _1300 = _1282 * -0.5f;
                        float _1301 = _1281 + _1280;
                        float _1302 = _1301 * 0.5f;
                        float _1303 = _1300 + 0.1666666716337204f;
                        float _1304 = _1303 + _1302;
                        _1310 = _1304;
                      } else {
                        bool _1306 = (_1278 == 0);
                        float _1307 = _1282 * 0.1666666716337204f;
                        float _1308 = _1306 ? _1307 : 0.0f;
                        _1310 = _1308;
                      }
                    }
                  }
                }
                float _1311 = 0.029999999329447746f - _1226;
                float _1312 = _1184 * 0.27000001072883606f;
                float _1313 = _1312 * _1311;
                float _1314 = _1313 * _1310;
                float _1315 = _1314 + _1226;
                float _1316 = max(_1315, 0.0f);
                float _1317 = max(_1227, 0.0f);
                float _1318 = max(_1228, 0.0f);
                float _1319 = min(_1316, 65535.0f);
                float _1320 = min(_1317, 65535.0f);
                float _1321 = min(_1318, 65535.0f);
                float _1322 = _1319 * 1.4514392614364624f;
                float _1323 = mad(-0.2365107536315918f, _1320, _1322);
                float _1324 = mad(-0.21492856740951538f, _1321, _1323);
                float _1325 = _1319 * -0.07655377686023712f;
                float _1326 = mad(1.17622971534729f, _1320, _1325);
                float _1327 = mad(-0.09967592358589172f, _1321, _1326);
                float _1328 = _1319 * 0.008316148072481155f;
                float _1329 = mad(-0.006032449658960104f, _1320, _1328);
                float _1330 = mad(0.9977163076400757f, _1321, _1329);
                float _1331 = max(_1324, 0.0f);
                float _1332 = max(_1327, 0.0f);
                float _1333 = max(_1330, 0.0f);
                float _1334 = min(_1331, 65504.0f);
                float _1335 = min(_1332, 65504.0f);
                float _1336 = min(_1333, 65504.0f);
                float _1337 = dot(float3(_1334, _1335, _1336), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1338 = _1334 - _1337;
                float _1339 = _1335 - _1337;
                float _1340 = _1336 - _1337;
                float _1341 = _1338 * 0.9599999785423279f;
                float _1342 = _1339 * 0.9599999785423279f;
                float _1343 = _1340 * 0.9599999785423279f;
                float _1344 = _1341 + _1337;
                float _1345 = _1342 + _1337;
                float _1346 = _1343 + _1337;
                float _1347 = max(_1344, 1.000000013351432e-10f);
                float _1348 = log2(_1347);
                float _1349 = _1348 * 0.3010300099849701f;
                float _1350 = log2(_1136);
                float _1351 = _1350 * 0.3010300099849701f;
                bool _1352 = !(_1349 <= _1351);
                do {
                  if (!_1352) {
                    float _1354 = log2(_1137);
                    float _1355 = _1354 * 0.3010300099849701f;
                    _1420 = _1355;
                  } else {
                    bool _1357 = (_1349 > _1351);
                    float _1358 = log2(_1134);
                    float _1359 = _1358 * 0.3010300099849701f;
                    bool _1360 = (_1349 < _1359);
                    bool _1361 = _1357 && _1360;
                    if (_1361) {
                      float _1363 = _1348 - _1350;
                      float _1364 = _1363 * 0.9030900001525879f;
                      float _1365 = _1358 - _1350;
                      float _1366 = _1365 * 0.3010300099849701f;
                      float _1367 = _1364 / _1366;
                      int _1368 = int(_1367);
                      float _1369 = float(_1368);
                      float _1370 = _1367 - _1369;
                      float _1372 = _11[_1368];
                      int _1373 = _1368 + 1;
                      float _1375 = _11[_1373];
                      int _1376 = _1368 + 2;
                      float _1378 = _11[_1376];
                      float _1379 = _1370 * _1370;
                      float _1380 = _1372 * 0.5f;
                      float _1381 = mad(_1375, -1.0f, _1380);
                      float _1382 = mad(_1378, 0.5f, _1381);
                      float _1383 = _1375 - _1372;
                      float _1384 = mad(_1375, 0.5f, _1380);
                      float _1385 = dot(float3(_1379, _1370, 1.0f), float3(_1382, _1383, _1384));
                      _1420 = _1385;
                    } else {
                      bool _1387 = !(_1349 >= _1359);
                      do {
                        if (!_1387) {
                          float _1389 = log2(_1138);
                          float _1390 = _1389 * 0.3010300099849701f;
                          bool _1391 = (_1349 < _1390);
                          if (_1391) {
                            float _1393 = _1348 - _1358;
                            float _1394 = _1393 * 0.9030900001525879f;
                            float _1395 = _1389 - _1358;
                            float _1396 = _1395 * 0.3010300099849701f;
                            float _1397 = _1394 / _1396;
                            int _1398 = int(_1397);
                            float _1399 = float(_1398);
                            float _1400 = _1397 - _1399;
                            float _1402 = _12[_1398];
                            int _1403 = _1398 + 1;
                            float _1405 = _12[_1403];
                            int _1406 = _1398 + 2;
                            float _1408 = _12[_1406];
                            float _1409 = _1400 * _1400;
                            float _1410 = _1402 * 0.5f;
                            float _1411 = mad(_1405, -1.0f, _1410);
                            float _1412 = mad(_1408, 0.5f, _1411);
                            float _1413 = _1405 - _1402;
                            float _1414 = mad(_1405, 0.5f, _1410);
                            float _1415 = dot(float3(_1409, _1400, 1.0f), float3(_1412, _1413, _1414));
                            _1420 = _1415;
                            break;
                          }
                        }
                        float _1417 = log2(_1139);
                        float _1418 = _1417 * 0.3010300099849701f;
                        _1420 = _1418;
                      } while (false);
                    }
                  }
                  float _1421 = _1420 * 3.321928024291992f;
                  float _1422 = exp2(_1421);
                  float _1423 = max(_1345, 1.000000013351432e-10f);
                  float _1424 = log2(_1423);
                  float _1425 = _1424 * 0.3010300099849701f;
                  bool _1426 = !(_1425 <= _1351);
                  do {
                    if (!_1426) {
                      float _1428 = log2(_1137);
                      float _1429 = _1428 * 0.3010300099849701f;
                      _1494 = _1429;
                    } else {
                      bool _1431 = (_1425 > _1351);
                      float _1432 = log2(_1134);
                      float _1433 = _1432 * 0.3010300099849701f;
                      bool _1434 = (_1425 < _1433);
                      bool _1435 = _1431 && _1434;
                      if (_1435) {
                        float _1437 = _1424 - _1350;
                        float _1438 = _1437 * 0.9030900001525879f;
                        float _1439 = _1432 - _1350;
                        float _1440 = _1439 * 0.3010300099849701f;
                        float _1441 = _1438 / _1440;
                        int _1442 = int(_1441);
                        float _1443 = float(_1442);
                        float _1444 = _1441 - _1443;
                        float _1446 = _11[_1442];
                        int _1447 = _1442 + 1;
                        float _1449 = _11[_1447];
                        int _1450 = _1442 + 2;
                        float _1452 = _11[_1450];
                        float _1453 = _1444 * _1444;
                        float _1454 = _1446 * 0.5f;
                        float _1455 = mad(_1449, -1.0f, _1454);
                        float _1456 = mad(_1452, 0.5f, _1455);
                        float _1457 = _1449 - _1446;
                        float _1458 = mad(_1449, 0.5f, _1454);
                        float _1459 = dot(float3(_1453, _1444, 1.0f), float3(_1456, _1457, _1458));
                        _1494 = _1459;
                      } else {
                        bool _1461 = !(_1425 >= _1433);
                        do {
                          if (!_1461) {
                            float _1463 = log2(_1138);
                            float _1464 = _1463 * 0.3010300099849701f;
                            bool _1465 = (_1425 < _1464);
                            if (_1465) {
                              float _1467 = _1424 - _1432;
                              float _1468 = _1467 * 0.9030900001525879f;
                              float _1469 = _1463 - _1432;
                              float _1470 = _1469 * 0.3010300099849701f;
                              float _1471 = _1468 / _1470;
                              int _1472 = int(_1471);
                              float _1473 = float(_1472);
                              float _1474 = _1471 - _1473;
                              float _1476 = _12[_1472];
                              int _1477 = _1472 + 1;
                              float _1479 = _12[_1477];
                              int _1480 = _1472 + 2;
                              float _1482 = _12[_1480];
                              float _1483 = _1474 * _1474;
                              float _1484 = _1476 * 0.5f;
                              float _1485 = mad(_1479, -1.0f, _1484);
                              float _1486 = mad(_1482, 0.5f, _1485);
                              float _1487 = _1479 - _1476;
                              float _1488 = mad(_1479, 0.5f, _1484);
                              float _1489 = dot(float3(_1483, _1474, 1.0f), float3(_1486, _1487, _1488));
                              _1494 = _1489;
                              break;
                            }
                          }
                          float _1491 = log2(_1139);
                          float _1492 = _1491 * 0.3010300099849701f;
                          _1494 = _1492;
                        } while (false);
                      }
                    }
                    float _1495 = _1494 * 3.321928024291992f;
                    float _1496 = exp2(_1495);
                    float _1497 = max(_1346, 1.000000013351432e-10f);
                    float _1498 = log2(_1497);
                    float _1499 = _1498 * 0.3010300099849701f;
                    bool _1500 = !(_1499 <= _1351);
                    do {
                      if (!_1500) {
                        float _1502 = log2(_1137);
                        float _1503 = _1502 * 0.3010300099849701f;
                        _1568 = _1503;
                      } else {
                        bool _1505 = (_1499 > _1351);
                        float _1506 = log2(_1134);
                        float _1507 = _1506 * 0.3010300099849701f;
                        bool _1508 = (_1499 < _1507);
                        bool _1509 = _1505 && _1508;
                        if (_1509) {
                          float _1511 = _1498 - _1350;
                          float _1512 = _1511 * 0.9030900001525879f;
                          float _1513 = _1506 - _1350;
                          float _1514 = _1513 * 0.3010300099849701f;
                          float _1515 = _1512 / _1514;
                          int _1516 = int(_1515);
                          float _1517 = float(_1516);
                          float _1518 = _1515 - _1517;
                          float _1520 = _11[_1516];
                          int _1521 = _1516 + 1;
                          float _1523 = _11[_1521];
                          int _1524 = _1516 + 2;
                          float _1526 = _11[_1524];
                          float _1527 = _1518 * _1518;
                          float _1528 = _1520 * 0.5f;
                          float _1529 = mad(_1523, -1.0f, _1528);
                          float _1530 = mad(_1526, 0.5f, _1529);
                          float _1531 = _1523 - _1520;
                          float _1532 = mad(_1523, 0.5f, _1528);
                          float _1533 = dot(float3(_1527, _1518, 1.0f), float3(_1530, _1531, _1532));
                          _1568 = _1533;
                        } else {
                          bool _1535 = !(_1499 >= _1507);
                          do {
                            if (!_1535) {
                              float _1537 = log2(_1138);
                              float _1538 = _1537 * 0.3010300099849701f;
                              bool _1539 = (_1499 < _1538);
                              if (_1539) {
                                float _1541 = _1498 - _1506;
                                float _1542 = _1541 * 0.9030900001525879f;
                                float _1543 = _1537 - _1506;
                                float _1544 = _1543 * 0.3010300099849701f;
                                float _1545 = _1542 / _1544;
                                int _1546 = int(_1545);
                                float _1547 = float(_1546);
                                float _1548 = _1545 - _1547;
                                float _1550 = _12[_1546];
                                int _1551 = _1546 + 1;
                                float _1553 = _12[_1551];
                                int _1554 = _1546 + 2;
                                float _1556 = _12[_1554];
                                float _1557 = _1548 * _1548;
                                float _1558 = _1550 * 0.5f;
                                float _1559 = mad(_1553, -1.0f, _1558);
                                float _1560 = mad(_1556, 0.5f, _1559);
                                float _1561 = _1553 - _1550;
                                float _1562 = mad(_1553, 0.5f, _1558);
                                float _1563 = dot(float3(_1557, _1548, 1.0f), float3(_1560, _1561, _1562));
                                _1568 = _1563;
                                break;
                              }
                            }
                            float _1565 = log2(_1139);
                            float _1566 = _1565 * 0.3010300099849701f;
                            _1568 = _1566;
                          } while (false);
                        }
                      }
                      float _1569 = _1568 * 3.321928024291992f;
                      float _1570 = exp2(_1569);
                      float _1571 = _1422 - _1137;
                      float _1572 = _1139 - _1137;
                      float _1573 = _1571 / _1572;
                      float _1574 = _1496 - _1137;
                      float _1575 = _1574 / _1572;
                      float _1576 = _1570 - _1137;
                      float _1577 = _1576 / _1572;
                      float _1578 = _1573 * 0.6624541878700256f;
                      float _1579 = mad(0.13400420546531677f, _1575, _1578);
                      float _1580 = mad(0.15618768334388733f, _1577, _1579);
                      float _1581 = _1573 * 0.2722287178039551f;
                      float _1582 = mad(0.6740817427635193f, _1575, _1581);
                      float _1583 = mad(0.053689517080783844f, _1577, _1582);
                      float _1584 = _1573 * -0.005574649665504694f;
                      float _1585 = mad(0.00406073359772563f, _1575, _1584);
                      float _1586 = mad(1.0103391408920288f, _1577, _1585);
                      float _1587 = _1580 * 1.6410233974456787f;
                      float _1588 = mad(-0.32480329275131226f, _1583, _1587);
                      float _1589 = mad(-0.23642469942569733f, _1586, _1588);
                      float _1590 = _1580 * -0.663662850856781f;
                      float _1591 = mad(1.6153316497802734f, _1583, _1590);
                      float _1592 = mad(0.016756348311901093f, _1586, _1591);
                      float _1593 = _1580 * 0.011721894145011902f;
                      float _1594 = mad(-0.008284442126750946f, _1583, _1593);
                      float _1595 = mad(0.9883948564529419f, _1586, _1594);
                      float _1596 = max(_1589, 0.0f);
                      float _1597 = max(_1592, 0.0f);
                      float _1598 = max(_1595, 0.0f);
                      float _1599 = min(_1596, 1.0f);
                      float _1600 = min(_1597, 1.0f);
                      float _1601 = min(_1598, 1.0f);
                      float _1602 = _1599 * 0.6624541878700256f;
                      float _1603 = mad(0.13400420546531677f, _1600, _1602);
                      float _1604 = mad(0.15618768334388733f, _1601, _1603);
                      float _1605 = _1599 * 0.2722287178039551f;
                      float _1606 = mad(0.6740817427635193f, _1600, _1605);
                      float _1607 = mad(0.053689517080783844f, _1601, _1606);
                      float _1608 = _1599 * -0.005574649665504694f;
                      float _1609 = mad(0.00406073359772563f, _1600, _1608);
                      float _1610 = mad(1.0103391408920288f, _1601, _1609);
                      float _1611 = _1604 * 1.6410233974456787f;
                      float _1612 = mad(-0.32480329275131226f, _1607, _1611);
                      float _1613 = mad(-0.23642469942569733f, _1610, _1612);
                      float _1614 = _1604 * -0.663662850856781f;
                      float _1615 = mad(1.6153316497802734f, _1607, _1614);
                      float _1616 = mad(0.016756348311901093f, _1610, _1615);
                      float _1617 = _1604 * 0.011721894145011902f;
                      float _1618 = mad(-0.008284442126750946f, _1607, _1617);
                      float _1619 = mad(0.9883948564529419f, _1610, _1618);
                      float _1620 = max(_1613, 0.0f);
                      float _1621 = max(_1616, 0.0f);
                      float _1622 = max(_1619, 0.0f);
                      float _1623 = min(_1620, 65535.0f);
                      float _1624 = min(_1621, 65535.0f);
                      float _1625 = min(_1622, 65535.0f);
                      float _1626 = _1623 * _1139;
                      float _1627 = _1624 * _1139;
                      float _1628 = _1625 * _1139;
                      float _1629 = max(_1626, 0.0f);
                      float _1630 = max(_1627, 0.0f);
                      float _1631 = max(_1628, 0.0f);
                      float _1632 = min(_1629, 65535.0f);
                      float _1633 = min(_1630, 65535.0f);
                      float _1634 = min(_1631, 65535.0f);
                      bool _1635 = (_980 == 5);
                      _1647 = _1632;
                      _1648 = _1633;
                      _1649 = _1634;
                      do {
                        if (!_1635) {
                          float _1637 = _1632 * _47;
                          float _1638 = mad(_48, _1633, _1637);
                          float _1639 = mad(_49, _1634, _1638);
                          float _1640 = _1632 * _50;
                          float _1641 = mad(_51, _1633, _1640);
                          float _1642 = mad(_52, _1634, _1641);
                          float _1643 = _1632 * _53;
                          float _1644 = mad(_54, _1633, _1643);
                          float _1645 = mad(_55, _1634, _1644);
                          _1647 = _1639;
                          _1648 = _1642;
                          _1649 = _1645;
                        }
                        float _1650 = _1647 * 9.999999747378752e-05f;
                        float _1651 = _1648 * 9.999999747378752e-05f;
                        float _1652 = _1649 * 9.999999747378752e-05f;
                        float _1653 = log2(_1650);
                        float _1654 = log2(_1651);
                        float _1655 = log2(_1652);
                        float _1656 = _1653 * 0.1593017578125f;
                        float _1657 = _1654 * 0.1593017578125f;
                        float _1658 = _1655 * 0.1593017578125f;
                        float _1659 = exp2(_1656);
                        float _1660 = exp2(_1657);
                        float _1661 = exp2(_1658);
                        float _1662 = _1659 * 18.8515625f;
                        float _1663 = _1660 * 18.8515625f;
                        float _1664 = _1661 * 18.8515625f;
                        float _1665 = _1662 + 0.8359375f;
                        float _1666 = _1663 + 0.8359375f;
                        float _1667 = _1664 + 0.8359375f;
                        float _1668 = _1659 * 18.6875f;
                        float _1669 = _1660 * 18.6875f;
                        float _1670 = _1661 * 18.6875f;
                        float _1671 = _1668 + 1.0f;
                        float _1672 = _1669 + 1.0f;
                        float _1673 = _1670 + 1.0f;
                        float _1674 = 1.0f / _1671;
                        float _1675 = 1.0f / _1672;
                        float _1676 = 1.0f / _1673;
                        float _1677 = _1674 * _1665;
                        float _1678 = _1675 * _1666;
                        float _1679 = _1676 * _1667;
                        float _1680 = log2(_1677);
                        float _1681 = log2(_1678);
                        float _1682 = log2(_1679);
                        float _1683 = _1680 * 78.84375f;
                        float _1684 = _1681 * 78.84375f;
                        float _1685 = _1682 * 78.84375f;
                        float _1686 = exp2(_1683);
                        float _1687 = exp2(_1684);
                        float _1688 = exp2(_1685);
                        _2402 = _1686;
                        _2403 = _1687;
                        _2404 = _1688;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _1690 = _980 & -3;
        bool _1691 = (_1690 == 4);
        if (_1691) {
          //   %1693 = bitcast [6 x float]* %9 to i8*
          //   %1694 = bitcast [6 x float]* %10 to i8*
          float _1696 = _RootShaderParameters_012z;
          float _1697 = _RootShaderParameters_012y;
          float _1698 = _RootShaderParameters_012x;
          float _1700 = _RootShaderParameters_011x;
          float _1701 = _RootShaderParameters_011y;
          float _1702 = _RootShaderParameters_011z;
          float _1703 = _RootShaderParameters_011w;
          float _1705 = _RootShaderParameters_010x;
          float _1706 = _RootShaderParameters_010y;
          float _1707 = _RootShaderParameters_010z;
          float _1708 = _RootShaderParameters_010w;
          float _1710 = _RootShaderParameters_009x;
          float _1712 = _RootShaderParameters_008x;
          float _1713 = _RootShaderParameters_008y;
          float _1714 = _RootShaderParameters_008z;
          float _1715 = _RootShaderParameters_008w;
          _9[0] = _1705;
          _9[1] = _1706;
          _9[2] = _1707;
          _9[3] = _1708;
          _9[4] = _1698;
          _9[5] = _1698;
          _10[0] = _1700;
          _10[1] = _1701;
          _10[2] = _1702;
          _10[3] = _1703;
          _10[4] = _1697;
          _10[5] = _1697;
          float _1729 = UniformBufferConstants_WorkingColorSpace_016x;
          float _1730 = UniformBufferConstants_WorkingColorSpace_016y;
          float _1731 = UniformBufferConstants_WorkingColorSpace_016z;
          float _1733 = UniformBufferConstants_WorkingColorSpace_017x;
          float _1734 = UniformBufferConstants_WorkingColorSpace_017y;
          float _1735 = UniformBufferConstants_WorkingColorSpace_017z;
          float _1737 = UniformBufferConstants_WorkingColorSpace_018x;
          float _1738 = UniformBufferConstants_WorkingColorSpace_018y;
          float _1739 = UniformBufferConstants_WorkingColorSpace_018z;
          float _1740 = _1696 * _962;
          float _1741 = _1696 * _963;
          float _1742 = _1696 * _964;
          float _1743 = _1729 * _1740;
          float _1744 = mad(_1730, _1741, _1743);
          float _1745 = mad(_1731, _1742, _1744);
          float _1746 = _1733 * _1740;
          float _1747 = mad(_1734, _1741, _1746);
          float _1748 = mad(_1735, _1742, _1747);
          float _1749 = _1737 * _1740;
          float _1750 = mad(_1738, _1741, _1749);
          float _1751 = mad(_1739, _1742, _1750);
          float _1752 = min(_1745, _1748);
          float _1753 = min(_1752, _1751);
          float _1754 = max(_1745, _1748);
          float _1755 = max(_1754, _1751);
          float _1756 = max(_1755, 1.000000013351432e-10f);
          float _1757 = max(_1753, 1.000000013351432e-10f);
          float _1758 = _1756 - _1757;
          float _1759 = max(_1755, 0.009999999776482582f);
          float _1760 = _1758 / _1759;
          float _1761 = _1751 - _1748;
          float _1762 = _1761 * _1751;
          float _1763 = _1748 - _1745;
          float _1764 = _1763 * _1748;
          float _1765 = _1762 + _1764;
          float _1766 = _1745 - _1751;
          float _1767 = _1766 * _1745;
          float _1768 = _1765 + _1767;
          float _1769 = sqrt(_1768);
          float _1770 = _1769 * 1.75f;
          float _1771 = _1748 + _1745;
          float _1772 = _1771 + _1751;
          float _1773 = _1772 + _1770;
          float _1774 = _1773 * 0.3333333432674408f;
          float _1775 = _1760 + -0.4000000059604645f;
          float _1776 = _1775 * 5.0f;
          float _1777 = _1775 * 2.5f;
          float _1778 = abs(_1777);
          float _1779 = 1.0f - _1778;
          float _1780 = max(_1779, 0.0f);
          bool _1781 = (_1776 > 0.0f);
          bool _1782 = (_1776 < 0.0f);
          int _1783 = int(_1781);
          int _1784 = int(_1782);
          int _1785 = _1783 - _1784;
          float _1786 = float(_1785);
          float _1787 = _1780 * _1780;
          float _1788 = 1.0f - _1787;
          float _1789 = _1786 * _1788;
          float _1790 = _1789 + 1.0f;
          float _1791 = _1790 * 0.02500000037252903f;
          bool _1792 = !(_1774 <= 0.0533333346247673f);
          _1800 = _1791;
          do {
            if (_1792) {
              bool _1794 = !(_1774 >= 0.1599999964237213f);
              _1800 = 0.0f;
              if (_1794) {
                float _1796 = 0.23999999463558197f / _1773;
                float _1797 = _1796 + -0.5f;
                float _1798 = _1797 * _1791;
                _1800 = _1798;
              }
            }
            float _1801 = _1800 + 1.0f;
            float _1802 = _1801 * _1745;
            float _1803 = _1801 * _1748;
            float _1804 = _1801 * _1751;
            bool _1805 = (_1802 == _1803);
            bool _1806 = (_1803 == _1804);
            bool _1807 = _1805 && _1806;
            _1836 = 0.0f;
            do {
              if (!_1807) {
                float _1809 = _1802 * 2.0f;
                float _1810 = _1809 - _1803;
                float _1811 = _1810 - _1804;
                float _1812 = _1748 - _1751;
                float _1813 = _1812 * 1.7320507764816284f;
                float _1814 = _1813 * _1801;
                float _1815 = _1814 / _1811;
                float _1816 = atan(_1815);
                float _1817 = _1816 + 3.1415927410125732f;
                float _1818 = _1816 + -3.1415927410125732f;
                bool _1819 = (_1811 < 0.0f);
                bool _1820 = (_1811 == 0.0f);
                bool _1821 = (_1814 >= 0.0f);
                bool _1822 = (_1814 < 0.0f);
                bool _1823 = _1821 && _1819;
                float _1824 = _1823 ? _1817 : _1816;
                bool _1825 = _1822 && _1819;
                float _1826 = _1825 ? _1818 : _1824;
                bool _1827 = _1822 && _1820;
                bool _1828 = _1821 && _1820;
                float _1829 = _1826 * 57.2957763671875f;
                float _1830 = _1827 ? -90.0f : _1829;
                float _1831 = _1828 ? 90.0f : _1830;
                bool _1832 = (_1831 < 0.0f);
                _1836 = _1831;
                if (_1832) {
                  float _1834 = _1831 + 360.0f;
                  _1836 = _1834;
                }
              }
              float _1837 = max(_1836, 0.0f);
              float _1838 = min(_1837, 360.0f);
              bool _1839 = (_1838 < -180.0f);
              do {
                if (_1839) {
                  float _1841 = _1838 + 360.0f;
                  _1847 = _1841;
                } else {
                  bool _1843 = (_1838 > 180.0f);
                  _1847 = _1838;
                  if (_1843) {
                    float _1845 = _1838 + -360.0f;
                    _1847 = _1845;
                  }
                }
                bool _1848 = (_1847 > -67.5f);
                bool _1849 = (_1847 < 67.5f);
                bool _1850 = _1848 && _1849;
                _1886 = 0.0f;
                do {
                  if (_1850) {
                    float _1852 = _1847 + 67.5f;
                    float _1853 = _1852 * 0.029629629105329514f;
                    int _1854 = int(_1853);
                    float _1855 = float(_1854);
                    float _1856 = _1853 - _1855;
                    float _1857 = _1856 * _1856;
                    float _1858 = _1857 * _1856;
                    bool _1859 = (_1854 == 3);
                    if (_1859) {
                      float _1861 = _1858 * 0.1666666716337204f;
                      float _1862 = _1857 * 0.5f;
                      float _1863 = _1856 * 0.5f;
                      float _1864 = 0.1666666716337204f - _1863;
                      float _1865 = _1864 + _1862;
                      float _1866 = _1865 - _1861;
                      _1886 = _1866;
                    } else {
                      bool _1868 = (_1854 == 2);
                      if (_1868) {
                        float _1870 = _1858 * 0.5f;
                        float _1871 = 0.6666666865348816f - _1857;
                        float _1872 = _1871 + _1870;
                        _1886 = _1872;
                      } else {
                        bool _1874 = (_1854 == 1);
                        if (_1874) {
                          float _1876 = _1858 * -0.5f;
                          float _1877 = _1857 + _1856;
                          float _1878 = _1877 * 0.5f;
                          float _1879 = _1876 + 0.1666666716337204f;
                          float _1880 = _1879 + _1878;
                          _1886 = _1880;
                        } else {
                          bool _1882 = (_1854 == 0);
                          float _1883 = _1858 * 0.1666666716337204f;
                          float _1884 = _1882 ? _1883 : 0.0f;
                          _1886 = _1884;
                        }
                      }
                    }
                  }
                  float _1887 = 0.029999999329447746f - _1802;
                  float _1888 = _1760 * 0.27000001072883606f;
                  float _1889 = _1888 * _1887;
                  float _1890 = _1889 * _1886;
                  float _1891 = _1890 + _1802;
                  float _1892 = max(_1891, 0.0f);
                  float _1893 = max(_1803, 0.0f);
                  float _1894 = max(_1804, 0.0f);
                  float _1895 = min(_1892, 65535.0f);
                  float _1896 = min(_1893, 65535.0f);
                  float _1897 = min(_1894, 65535.0f);
                  float _1898 = _1895 * 1.4514392614364624f;
                  float _1899 = mad(-0.2365107536315918f, _1896, _1898);
                  float _1900 = mad(-0.21492856740951538f, _1897, _1899);
                  float _1901 = _1895 * -0.07655377686023712f;
                  float _1902 = mad(1.17622971534729f, _1896, _1901);
                  float _1903 = mad(-0.09967592358589172f, _1897, _1902);
                  float _1904 = _1895 * 0.008316148072481155f;
                  float _1905 = mad(-0.006032449658960104f, _1896, _1904);
                  float _1906 = mad(0.9977163076400757f, _1897, _1905);
                  float _1907 = max(_1900, 0.0f);
                  float _1908 = max(_1903, 0.0f);
                  float _1909 = max(_1906, 0.0f);
                  float _1910 = min(_1907, 65504.0f);
                  float _1911 = min(_1908, 65504.0f);
                  float _1912 = min(_1909, 65504.0f);
                  float _1913 = dot(float3(_1910, _1911, _1912), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _1914 = _1910 - _1913;
                  float _1915 = _1911 - _1913;
                  float _1916 = _1912 - _1913;
                  float _1917 = _1914 * 0.9599999785423279f;
                  float _1918 = _1915 * 0.9599999785423279f;
                  float _1919 = _1916 * 0.9599999785423279f;
                  float _1920 = _1917 + _1913;
                  float _1921 = _1918 + _1913;
                  float _1922 = _1919 + _1913;
                  float _1923 = max(_1920, 1.000000013351432e-10f);
                  float _1924 = log2(_1923);
                  float _1925 = _1924 * 0.3010300099849701f;
                  float _1926 = log2(_1712);
                  float _1927 = _1926 * 0.3010300099849701f;
                  bool _1928 = !(_1925 <= _1927);
                  do {
                    if (!_1928) {
                      float _1930 = log2(_1713);
                      float _1931 = _1930 * 0.3010300099849701f;
                      _1996 = _1931;
                    } else {
                      bool _1933 = (_1925 > _1927);
                      float _1934 = log2(_1710);
                      float _1935 = _1934 * 0.3010300099849701f;
                      bool _1936 = (_1925 < _1935);
                      bool _1937 = _1933 && _1936;
                      if (_1937) {
                        float _1939 = _1924 - _1926;
                        float _1940 = _1939 * 0.9030900001525879f;
                        float _1941 = _1934 - _1926;
                        float _1942 = _1941 * 0.3010300099849701f;
                        float _1943 = _1940 / _1942;
                        int _1944 = int(_1943);
                        float _1945 = float(_1944);
                        float _1946 = _1943 - _1945;
                        float _1948 = _9[_1944];
                        int _1949 = _1944 + 1;
                        float _1951 = _9[_1949];
                        int _1952 = _1944 + 2;
                        float _1954 = _9[_1952];
                        float _1955 = _1946 * _1946;
                        float _1956 = _1948 * 0.5f;
                        float _1957 = mad(_1951, -1.0f, _1956);
                        float _1958 = mad(_1954, 0.5f, _1957);
                        float _1959 = _1951 - _1948;
                        float _1960 = mad(_1951, 0.5f, _1956);
                        float _1961 = dot(float3(_1955, _1946, 1.0f), float3(_1958, _1959, _1960));
                        _1996 = _1961;
                      } else {
                        bool _1963 = !(_1925 >= _1935);
                        do {
                          if (!_1963) {
                            float _1965 = log2(_1714);
                            float _1966 = _1965 * 0.3010300099849701f;
                            bool _1967 = (_1925 < _1966);
                            if (_1967) {
                              float _1969 = _1924 - _1934;
                              float _1970 = _1969 * 0.9030900001525879f;
                              float _1971 = _1965 - _1934;
                              float _1972 = _1971 * 0.3010300099849701f;
                              float _1973 = _1970 / _1972;
                              int _1974 = int(_1973);
                              float _1975 = float(_1974);
                              float _1976 = _1973 - _1975;
                              float _1978 = _10[_1974];
                              int _1979 = _1974 + 1;
                              float _1981 = _10[_1979];
                              int _1982 = _1974 + 2;
                              float _1984 = _10[_1982];
                              float _1985 = _1976 * _1976;
                              float _1986 = _1978 * 0.5f;
                              float _1987 = mad(_1981, -1.0f, _1986);
                              float _1988 = mad(_1984, 0.5f, _1987);
                              float _1989 = _1981 - _1978;
                              float _1990 = mad(_1981, 0.5f, _1986);
                              float _1991 = dot(float3(_1985, _1976, 1.0f), float3(_1988, _1989, _1990));
                              _1996 = _1991;
                              break;
                            }
                          }
                          float _1993 = log2(_1715);
                          float _1994 = _1993 * 0.3010300099849701f;
                          _1996 = _1994;
                        } while (false);
                      }
                    }
                    float _1997 = _1996 * 3.321928024291992f;
                    float _1998 = exp2(_1997);
                    float _1999 = max(_1921, 1.000000013351432e-10f);
                    float _2000 = log2(_1999);
                    float _2001 = _2000 * 0.3010300099849701f;
                    bool _2002 = !(_2001 <= _1927);
                    do {
                      if (!_2002) {
                        float _2004 = log2(_1713);
                        float _2005 = _2004 * 0.3010300099849701f;
                        _2070 = _2005;
                      } else {
                        bool _2007 = (_2001 > _1927);
                        float _2008 = log2(_1710);
                        float _2009 = _2008 * 0.3010300099849701f;
                        bool _2010 = (_2001 < _2009);
                        bool _2011 = _2007 && _2010;
                        if (_2011) {
                          float _2013 = _2000 - _1926;
                          float _2014 = _2013 * 0.9030900001525879f;
                          float _2015 = _2008 - _1926;
                          float _2016 = _2015 * 0.3010300099849701f;
                          float _2017 = _2014 / _2016;
                          int _2018 = int(_2017);
                          float _2019 = float(_2018);
                          float _2020 = _2017 - _2019;
                          float _2022 = _9[_2018];
                          int _2023 = _2018 + 1;
                          float _2025 = _9[_2023];
                          int _2026 = _2018 + 2;
                          float _2028 = _9[_2026];
                          float _2029 = _2020 * _2020;
                          float _2030 = _2022 * 0.5f;
                          float _2031 = mad(_2025, -1.0f, _2030);
                          float _2032 = mad(_2028, 0.5f, _2031);
                          float _2033 = _2025 - _2022;
                          float _2034 = mad(_2025, 0.5f, _2030);
                          float _2035 = dot(float3(_2029, _2020, 1.0f), float3(_2032, _2033, _2034));
                          _2070 = _2035;
                        } else {
                          bool _2037 = !(_2001 >= _2009);
                          do {
                            if (!_2037) {
                              float _2039 = log2(_1714);
                              float _2040 = _2039 * 0.3010300099849701f;
                              bool _2041 = (_2001 < _2040);
                              if (_2041) {
                                float _2043 = _2000 - _2008;
                                float _2044 = _2043 * 0.9030900001525879f;
                                float _2045 = _2039 - _2008;
                                float _2046 = _2045 * 0.3010300099849701f;
                                float _2047 = _2044 / _2046;
                                int _2048 = int(_2047);
                                float _2049 = float(_2048);
                                float _2050 = _2047 - _2049;
                                float _2052 = _10[_2048];
                                int _2053 = _2048 + 1;
                                float _2055 = _10[_2053];
                                int _2056 = _2048 + 2;
                                float _2058 = _10[_2056];
                                float _2059 = _2050 * _2050;
                                float _2060 = _2052 * 0.5f;
                                float _2061 = mad(_2055, -1.0f, _2060);
                                float _2062 = mad(_2058, 0.5f, _2061);
                                float _2063 = _2055 - _2052;
                                float _2064 = mad(_2055, 0.5f, _2060);
                                float _2065 = dot(float3(_2059, _2050, 1.0f), float3(_2062, _2063, _2064));
                                _2070 = _2065;
                                break;
                              }
                            }
                            float _2067 = log2(_1715);
                            float _2068 = _2067 * 0.3010300099849701f;
                            _2070 = _2068;
                          } while (false);
                        }
                      }
                      float _2071 = _2070 * 3.321928024291992f;
                      float _2072 = exp2(_2071);
                      float _2073 = max(_1922, 1.000000013351432e-10f);
                      float _2074 = log2(_2073);
                      float _2075 = _2074 * 0.3010300099849701f;
                      bool _2076 = !(_2075 <= _1927);
                      do {
                        if (!_2076) {
                          float _2078 = log2(_1713);
                          float _2079 = _2078 * 0.3010300099849701f;
                          _2144 = _2079;
                        } else {
                          bool _2081 = (_2075 > _1927);
                          float _2082 = log2(_1710);
                          float _2083 = _2082 * 0.3010300099849701f;
                          bool _2084 = (_2075 < _2083);
                          bool _2085 = _2081 && _2084;
                          if (_2085) {
                            float _2087 = _2074 - _1926;
                            float _2088 = _2087 * 0.9030900001525879f;
                            float _2089 = _2082 - _1926;
                            float _2090 = _2089 * 0.3010300099849701f;
                            float _2091 = _2088 / _2090;
                            int _2092 = int(_2091);
                            float _2093 = float(_2092);
                            float _2094 = _2091 - _2093;
                            float _2096 = _9[_2092];
                            int _2097 = _2092 + 1;
                            float _2099 = _9[_2097];
                            int _2100 = _2092 + 2;
                            float _2102 = _9[_2100];
                            float _2103 = _2094 * _2094;
                            float _2104 = _2096 * 0.5f;
                            float _2105 = mad(_2099, -1.0f, _2104);
                            float _2106 = mad(_2102, 0.5f, _2105);
                            float _2107 = _2099 - _2096;
                            float _2108 = mad(_2099, 0.5f, _2104);
                            float _2109 = dot(float3(_2103, _2094, 1.0f), float3(_2106, _2107, _2108));
                            _2144 = _2109;
                          } else {
                            bool _2111 = !(_2075 >= _2083);
                            do {
                              if (!_2111) {
                                float _2113 = log2(_1714);
                                float _2114 = _2113 * 0.3010300099849701f;
                                bool _2115 = (_2075 < _2114);
                                if (_2115) {
                                  float _2117 = _2074 - _2082;
                                  float _2118 = _2117 * 0.9030900001525879f;
                                  float _2119 = _2113 - _2082;
                                  float _2120 = _2119 * 0.3010300099849701f;
                                  float _2121 = _2118 / _2120;
                                  int _2122 = int(_2121);
                                  float _2123 = float(_2122);
                                  float _2124 = _2121 - _2123;
                                  float _2126 = _10[_2122];
                                  int _2127 = _2122 + 1;
                                  float _2129 = _10[_2127];
                                  int _2130 = _2122 + 2;
                                  float _2132 = _10[_2130];
                                  float _2133 = _2124 * _2124;
                                  float _2134 = _2126 * 0.5f;
                                  float _2135 = mad(_2129, -1.0f, _2134);
                                  float _2136 = mad(_2132, 0.5f, _2135);
                                  float _2137 = _2129 - _2126;
                                  float _2138 = mad(_2129, 0.5f, _2134);
                                  float _2139 = dot(float3(_2133, _2124, 1.0f), float3(_2136, _2137, _2138));
                                  _2144 = _2139;
                                  break;
                                }
                              }
                              float _2141 = log2(_1715);
                              float _2142 = _2141 * 0.3010300099849701f;
                              _2144 = _2142;
                            } while (false);
                          }
                        }
                        float _2145 = _2144 * 3.321928024291992f;
                        float _2146 = exp2(_2145);
                        float _2147 = _1998 - _1713;
                        float _2148 = _1715 - _1713;
                        float _2149 = _2147 / _2148;
                        float _2150 = _2072 - _1713;
                        float _2151 = _2150 / _2148;
                        float _2152 = _2146 - _1713;
                        float _2153 = _2152 / _2148;
                        float _2154 = _2149 * 0.6624541878700256f;
                        float _2155 = mad(0.13400420546531677f, _2151, _2154);
                        float _2156 = mad(0.15618768334388733f, _2153, _2155);
                        float _2157 = _2149 * 0.2722287178039551f;
                        float _2158 = mad(0.6740817427635193f, _2151, _2157);
                        float _2159 = mad(0.053689517080783844f, _2153, _2158);
                        float _2160 = _2149 * -0.005574649665504694f;
                        float _2161 = mad(0.00406073359772563f, _2151, _2160);
                        float _2162 = mad(1.0103391408920288f, _2153, _2161);
                        float _2163 = _2156 * 1.6410233974456787f;
                        float _2164 = mad(-0.32480329275131226f, _2159, _2163);
                        float _2165 = mad(-0.23642469942569733f, _2162, _2164);
                        float _2166 = _2156 * -0.663662850856781f;
                        float _2167 = mad(1.6153316497802734f, _2159, _2166);
                        float _2168 = mad(0.016756348311901093f, _2162, _2167);
                        float _2169 = _2156 * 0.011721894145011902f;
                        float _2170 = mad(-0.008284442126750946f, _2159, _2169);
                        float _2171 = mad(0.9883948564529419f, _2162, _2170);
                        float _2172 = max(_2165, 0.0f);
                        float _2173 = max(_2168, 0.0f);
                        float _2174 = max(_2171, 0.0f);
                        float _2175 = min(_2172, 1.0f);
                        float _2176 = min(_2173, 1.0f);
                        float _2177 = min(_2174, 1.0f);
                        float _2178 = _2175 * 0.6624541878700256f;
                        float _2179 = mad(0.13400420546531677f, _2176, _2178);
                        float _2180 = mad(0.15618768334388733f, _2177, _2179);
                        float _2181 = _2175 * 0.2722287178039551f;
                        float _2182 = mad(0.6740817427635193f, _2176, _2181);
                        float _2183 = mad(0.053689517080783844f, _2177, _2182);
                        float _2184 = _2175 * -0.005574649665504694f;
                        float _2185 = mad(0.00406073359772563f, _2176, _2184);
                        float _2186 = mad(1.0103391408920288f, _2177, _2185);
                        float _2187 = _2180 * 1.6410233974456787f;
                        float _2188 = mad(-0.32480329275131226f, _2183, _2187);
                        float _2189 = mad(-0.23642469942569733f, _2186, _2188);
                        float _2190 = _2180 * -0.663662850856781f;
                        float _2191 = mad(1.6153316497802734f, _2183, _2190);
                        float _2192 = mad(0.016756348311901093f, _2186, _2191);
                        float _2193 = _2180 * 0.011721894145011902f;
                        float _2194 = mad(-0.008284442126750946f, _2183, _2193);
                        float _2195 = mad(0.9883948564529419f, _2186, _2194);
                        float _2196 = max(_2189, 0.0f);
                        float _2197 = max(_2192, 0.0f);
                        float _2198 = max(_2195, 0.0f);
                        float _2199 = min(_2196, 65535.0f);
                        float _2200 = min(_2197, 65535.0f);
                        float _2201 = min(_2198, 65535.0f);
                        float _2202 = _2199 * _1715;
                        float _2203 = _2200 * _1715;
                        float _2204 = _2201 * _1715;
                        float _2205 = max(_2202, 0.0f);
                        float _2206 = max(_2203, 0.0f);
                        float _2207 = max(_2204, 0.0f);
                        float _2208 = min(_2205, 65535.0f);
                        float _2209 = min(_2206, 65535.0f);
                        float _2210 = min(_2207, 65535.0f);
                        bool _2211 = (_980 == 6);
                        _2223 = _2208;
                        _2224 = _2209;
                        _2225 = _2210;
                        do {
                          if (!_2211) {
                            float _2213 = _2208 * _47;
                            float _2214 = mad(_48, _2209, _2213);
                            float _2215 = mad(_49, _2210, _2214);
                            float _2216 = _2208 * _50;
                            float _2217 = mad(_51, _2209, _2216);
                            float _2218 = mad(_52, _2210, _2217);
                            float _2219 = _2208 * _53;
                            float _2220 = mad(_54, _2209, _2219);
                            float _2221 = mad(_55, _2210, _2220);
                            _2223 = _2215;
                            _2224 = _2218;
                            _2225 = _2221;
                          }
                          float _2226 = _2223 * 9.999999747378752e-05f;
                          float _2227 = _2224 * 9.999999747378752e-05f;
                          float _2228 = _2225 * 9.999999747378752e-05f;
                          float _2229 = log2(_2226);
                          float _2230 = log2(_2227);
                          float _2231 = log2(_2228);
                          float _2232 = _2229 * 0.1593017578125f;
                          float _2233 = _2230 * 0.1593017578125f;
                          float _2234 = _2231 * 0.1593017578125f;
                          float _2235 = exp2(_2232);
                          float _2236 = exp2(_2233);
                          float _2237 = exp2(_2234);
                          float _2238 = _2235 * 18.8515625f;
                          float _2239 = _2236 * 18.8515625f;
                          float _2240 = _2237 * 18.8515625f;
                          float _2241 = _2238 + 0.8359375f;
                          float _2242 = _2239 + 0.8359375f;
                          float _2243 = _2240 + 0.8359375f;
                          float _2244 = _2235 * 18.6875f;
                          float _2245 = _2236 * 18.6875f;
                          float _2246 = _2237 * 18.6875f;
                          float _2247 = _2244 + 1.0f;
                          float _2248 = _2245 + 1.0f;
                          float _2249 = _2246 + 1.0f;
                          float _2250 = 1.0f / _2247;
                          float _2251 = 1.0f / _2248;
                          float _2252 = 1.0f / _2249;
                          float _2253 = _2250 * _2241;
                          float _2254 = _2251 * _2242;
                          float _2255 = _2252 * _2243;
                          float _2256 = log2(_2253);
                          float _2257 = log2(_2254);
                          float _2258 = log2(_2255);
                          float _2259 = _2256 * 78.84375f;
                          float _2260 = _2257 * 78.84375f;
                          float _2261 = _2258 * 78.84375f;
                          float _2262 = exp2(_2259);
                          float _2263 = exp2(_2260);
                          float _2264 = exp2(_2261);
                          _2402 = _2262;
                          _2403 = _2263;
                          _2404 = _2264;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2266 = (_980 == 7);
          if (_2266) {
            float _2269 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2270 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2271 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2273 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2274 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2275 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2277 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2278 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2279 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2280 = _2269 * _962;
            float _2281 = mad(_2270, _963, _2280);
            float _2282 = mad(_2271, _964, _2281);
            float _2283 = _2273 * _962;
            float _2284 = mad(_2274, _963, _2283);
            float _2285 = mad(_2275, _964, _2284);
            float _2286 = _2277 * _962;
            float _2287 = mad(_2278, _963, _2286);
            float _2288 = mad(_2279, _964, _2287);
            float _2289 = _2282 * _47;
            float _2290 = mad(_48, _2285, _2289);
            float _2291 = mad(_49, _2288, _2290);
            float _2292 = _2282 * _50;
            float _2293 = mad(_51, _2285, _2292);
            float _2294 = mad(_52, _2288, _2293);
            float _2295 = _2282 * _53;
            float _2296 = mad(_54, _2285, _2295);
            float _2297 = mad(_55, _2288, _2296);
            float _2298 = _2291 * 9.999999747378752e-05f;
            float _2299 = _2294 * 9.999999747378752e-05f;
            float _2300 = _2297 * 9.999999747378752e-05f;
            float _2301 = log2(_2298);
            float _2302 = log2(_2299);
            float _2303 = log2(_2300);
            float _2304 = _2301 * 0.1593017578125f;
            float _2305 = _2302 * 0.1593017578125f;
            float _2306 = _2303 * 0.1593017578125f;
            float _2307 = exp2(_2304);
            float _2308 = exp2(_2305);
            float _2309 = exp2(_2306);
            float _2310 = _2307 * 18.8515625f;
            float _2311 = _2308 * 18.8515625f;
            float _2312 = _2309 * 18.8515625f;
            float _2313 = _2310 + 0.8359375f;
            float _2314 = _2311 + 0.8359375f;
            float _2315 = _2312 + 0.8359375f;
            float _2316 = _2307 * 18.6875f;
            float _2317 = _2308 * 18.6875f;
            float _2318 = _2309 * 18.6875f;
            float _2319 = _2316 + 1.0f;
            float _2320 = _2317 + 1.0f;
            float _2321 = _2318 + 1.0f;
            float _2322 = 1.0f / _2319;
            float _2323 = 1.0f / _2320;
            float _2324 = 1.0f / _2321;
            float _2325 = _2322 * _2313;
            float _2326 = _2323 * _2314;
            float _2327 = _2324 * _2315;
            float _2328 = log2(_2325);
            float _2329 = log2(_2326);
            float _2330 = log2(_2327);
            float _2331 = _2328 * 78.84375f;
            float _2332 = _2329 * 78.84375f;
            float _2333 = _2330 * 78.84375f;
            float _2334 = exp2(_2331);
            float _2335 = exp2(_2332);
            float _2336 = exp2(_2333);
            _2402 = _2334;
            _2403 = _2335;
            _2404 = _2336;
          } else {
            bool _2338 = (_980 == 8);
            _2402 = _962;
            _2403 = _963;
            _2404 = _964;
            if (!_2338) {
              bool _2340 = (_980 == 9);
              float _2342 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2343 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2344 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2346 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2347 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2348 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2350 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2351 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2352 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2340) {
                float _2354 = _2342 * _950;
                float _2355 = mad(_2343, _951, _2354);
                float _2356 = mad(_2344, _952, _2355);
                float _2357 = _2346 * _950;
                float _2358 = mad(_2347, _951, _2357);
                float _2359 = mad(_2348, _952, _2358);
                float _2360 = _2350 * _950;
                float _2361 = mad(_2351, _951, _2360);
                float _2362 = mad(_2352, _952, _2361);
                float _2363 = _2356 * _47;
                float _2364 = mad(_48, _2359, _2363);
                float _2365 = mad(_49, _2362, _2364);
                float _2366 = _2356 * _50;
                float _2367 = mad(_51, _2359, _2366);
                float _2368 = mad(_52, _2362, _2367);
                float _2369 = _2356 * _53;
                float _2370 = mad(_54, _2359, _2369);
                float _2371 = mad(_55, _2362, _2370);
                _2402 = _2365;
                _2403 = _2368;
                _2404 = _2371;
              } else {
                float _2373 = _2342 * _976;
                float _2374 = mad(_2343, _977, _2373);
                float _2375 = mad(_2344, _978, _2374);
                float _2376 = _2346 * _976;
                float _2377 = mad(_2347, _977, _2376);
                float _2378 = mad(_2348, _978, _2377);
                float _2379 = _2350 * _976;
                float _2380 = mad(_2351, _977, _2379);
                float _2381 = mad(_2352, _978, _2380);
                float _2382 = _2375 * _47;
                float _2383 = mad(_48, _2378, _2382);
                float _2384 = mad(_49, _2381, _2383);
                float _2385 = _2375 * _50;
                float _2386 = mad(_51, _2378, _2385);
                float _2387 = mad(_52, _2381, _2386);
                float _2388 = _2375 * _53;
                float _2389 = mad(_54, _2378, _2388);
                float _2390 = mad(_55, _2381, _2389);
                float _2391 = _RootShaderParameters_040z;
                float _2392 = log2(_2384);
                float _2393 = log2(_2387);
                float _2394 = log2(_2390);
                float _2395 = _2392 * _2391;
                float _2396 = _2393 * _2391;
                float _2397 = _2394 * _2391;
                float _2398 = exp2(_2395);
                float _2399 = exp2(_2396);
                float _2400 = exp2(_2397);
                _2402 = _2398;
                _2403 = _2399;
                _2404 = _2400;
              }
            }
          }
        }
      }
    }
  }
  float _2405 = _2402 * 0.9523810148239136f;
  float _2406 = _2403 * 0.9523810148239136f;
  float _2407 = _2404 * 0.9523810148239136f;
  // _2408 = _1;
  RWOutputTexture[int3(_6, _7, _8)] = float4(_2405, _2406, _2407, 0.0f);
}
