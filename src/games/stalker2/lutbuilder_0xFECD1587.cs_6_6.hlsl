#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

Texture2D<float4> Textures_2 : register(t1);

Texture2D<float4> Textures_3 : register(t2);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_005z : packoffset(c005.z);
  float _RootShaderParameters_005w : packoffset(c005.w);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035x : packoffset(c035.x);
  float _RootShaderParameters_035y : packoffset(c035.y);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  uint _RootShaderParameters_038z : packoffset(c038.z);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_000x : packoffset(c000.x);
  float UniformBufferConstants_WorkingColorSpace_000y : packoffset(c000.y);
  float UniformBufferConstants_WorkingColorSpace_000z : packoffset(c000.z);
  float UniformBufferConstants_WorkingColorSpace_001x : packoffset(c001.x);
  float UniformBufferConstants_WorkingColorSpace_001y : packoffset(c001.y);
  float UniformBufferConstants_WorkingColorSpace_001z : packoffset(c001.z);
  float UniformBufferConstants_WorkingColorSpace_002x : packoffset(c002.x);
  float UniformBufferConstants_WorkingColorSpace_002y : packoffset(c002.y);
  float UniformBufferConstants_WorkingColorSpace_002z : packoffset(c002.z);
  float UniformBufferConstants_WorkingColorSpace_004x : packoffset(c004.x);
  float UniformBufferConstants_WorkingColorSpace_004y : packoffset(c004.y);
  float UniformBufferConstants_WorkingColorSpace_004z : packoffset(c004.z);
  float UniformBufferConstants_WorkingColorSpace_005x : packoffset(c005.x);
  float UniformBufferConstants_WorkingColorSpace_005y : packoffset(c005.y);
  float UniformBufferConstants_WorkingColorSpace_005z : packoffset(c005.z);
  float UniformBufferConstants_WorkingColorSpace_006x : packoffset(c006.x);
  float UniformBufferConstants_WorkingColorSpace_006y : packoffset(c006.y);
  float UniformBufferConstants_WorkingColorSpace_006z : packoffset(c006.z);
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

SamplerState Samplers_2 : register(s1);

SamplerState Samplers_3 : register(s2);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_3;
  // texture _3 = Textures_2;
  // texture _4 = Textures_1;
  // SamplerState _5 = Samplers_3;
  // SamplerState _6 = Samplers_2;
  // SamplerState _7 = Samplers_1;
  // cbuffer _8 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _9 = _RootShaderParameters;
  // _10 = _8;
  // _11 = _9;
  float _15[6];
  float _16[6];
  float _17[6];
  float _18[6];
  float _19 = float(_12);
  float _20 = float(_13);
  float _21 = _19 + 0.5f;
  float _22 = _20 + 0.5f;
  float _24 = _RootShaderParameters_042x;
  float _25 = _RootShaderParameters_042y;
  float _26 = _24 * _21;
  float _27 = _25 * _22;
  float _28 = _26 + -0.015625f;
  float _29 = _27 + -0.015625f;
  float _30 = _28 * 1.0322580337524414f;
  float _31 = _29 * 1.0322580337524414f;
  float _32 = float(_14);
  float _33 = _32 * 0.032258063554763794f;
  uint _35 = _RootShaderParameters_041x;
  bool _36 = (_35 == 1);
  float _53 = 1.379158854484558f;
  float _54 = -0.3088507056236267f;
  float _55 = -0.07034677267074585f;
  float _56 = -0.06933528929948807f;
  float _57 = 1.0822921991348267f;
  float _58 = -0.012962047010660172f;
  float _59 = -0.002159259282052517f;
  float _60 = -0.045465391129255295f;
  float _61 = 1.0477596521377563f;
  float _119;
  float _120;
  float _121;
  float _170;
  float _899;
  float _935;
  float _946;
  float _1010;
  float _1189;
  float _1200;
  float _1211;
  float _1434;
  float _1435;
  float _1436;
  float _1447;
  float _1458;
  float _1640;
  float _1676;
  float _1687;
  float _1726;
  float _1836;
  float _1910;
  float _1984;
  float _2063;
  float _2064;
  float _2065;
  float _2216;
  float _2252;
  float _2263;
  float _2302;
  float _2412;
  float _2486;
  float _2560;
  float _2639;
  float _2640;
  float _2641;
  float _2818;
  float _2819;
  float _2820;
  if (!_36) {
    bool _38 = (_35 == 2);
    _53 = 1.02579927444458f;
    _54 = -0.020052503794431686f;
    _55 = -0.0057713985443115234f;
    _56 = -0.0022350111976265907f;
    _57 = 1.0045825242996216f;
    _58 = -0.002352306619286537f;
    _59 = -0.005014004185795784f;
    _60 = -0.025293385609984398f;
    _61 = 1.0304402112960815f;
    if (!_38) {
      bool _40 = (_35 == 3);
      _53 = 0.6954522132873535f;
      _54 = 0.14067870378494263f;
      _55 = 0.16386906802654266f;
      _56 = 0.044794563204050064f;
      _57 = 0.8596711158752441f;
      _58 = 0.0955343171954155f;
      _59 = -0.005525882821530104f;
      _60 = 0.004025210160762072f;
      _61 = 1.0015007257461548f;
      if (!_40) {
        bool _42 = (_35 == 4);
        float _43 = _42 ? 1.0f : 1.7050515413284302f;
        float _44 = _42 ? 0.0f : -0.6217905879020691f;
        float _45 = _42 ? 0.0f : -0.0832584798336029f;
        float _46 = _42 ? 0.0f : -0.13025718927383423f;
        float _47 = _42 ? 1.0f : 1.1408027410507202f;
        float _48 = _42 ? 0.0f : -0.010548528283834457f;
        float _49 = _42 ? 0.0f : -0.024003278464078903f;
        float _50 = _42 ? 0.0f : -0.1289687603712082f;
        float _51 = _42 ? 1.0f : 1.152971863746643f;
        _53 = _43;
        _54 = _44;
        _55 = _45;
        _56 = _46;
        _57 = _47;
        _58 = _48;
        _59 = _49;
        _60 = _50;
        _61 = _51;
      }
    }
  }
  uint _63 = _RootShaderParameters_040w;
  bool _64 = (_63 > 2);
  if (_64) {
    float _66 = log2(_30);
    float _67 = log2(_31);
    float _68 = log2(_33);
    float _69 = _66 * 0.012683313339948654f;
    float _70 = _67 * 0.012683313339948654f;
    float _71 = _68 * 0.012683313339948654f;
    float _72 = exp2(_69);
    float _73 = exp2(_70);
    float _74 = exp2(_71);
    float _75 = _72 + -0.8359375f;
    float _76 = _73 + -0.8359375f;
    float _77 = _74 + -0.8359375f;
    float _78 = max(0.0f, _75);
    float _79 = max(0.0f, _76);
    float _80 = max(0.0f, _77);
    float _81 = _72 * 18.6875f;
    float _82 = _73 * 18.6875f;
    float _83 = _74 * 18.6875f;
    float _84 = 18.8515625f - _81;
    float _85 = 18.8515625f - _82;
    float _86 = 18.8515625f - _83;
    float _87 = _78 / _84;
    float _88 = _79 / _85;
    float _89 = _80 / _86;
    float _90 = log2(_87);
    float _91 = log2(_88);
    float _92 = log2(_89);
    float _93 = _90 * 6.277394771575928f;
    float _94 = _91 * 6.277394771575928f;
    float _95 = _92 * 6.277394771575928f;
    float _96 = exp2(_93);
    float _97 = exp2(_94);
    float _98 = exp2(_95);
    float _99 = _96 * 100.0f;
    float _100 = _97 * 100.0f;
    float _101 = _98 * 100.0f;
    _119 = _99;
    _120 = _100;
    _121 = _101;
  } else {
    float _103 = _28 * 14.45161247253418f;
    float _104 = _103 + -6.07624626159668f;
    float _105 = _29 * 14.45161247253418f;
    float _106 = _105 + -6.07624626159668f;
    float _107 = _32 * 0.4516128897666931f;
    float _108 = _107 + -6.07624626159668f;
    float _109 = exp2(_104);
    float _110 = exp2(_106);
    float _111 = exp2(_108);
    float _112 = _109 * 0.18000000715255737f;
    float _113 = _110 * 0.18000000715255737f;
    float _114 = _111 * 0.18000000715255737f;
    float _115 = _112 + -0.002667719265446067f;
    float _116 = _113 + -0.002667719265446067f;
    float _117 = _114 + -0.002667719265446067f;
    _119 = _115;
    _120 = _116;
    _121 = _117;
  }
  float3 input_color = float3(_119, _120, _121);  // CustomEdit

  float _123 = UniformBufferConstants_WorkingColorSpace_004x;
  float _124 = UniformBufferConstants_WorkingColorSpace_004y;
  float _125 = UniformBufferConstants_WorkingColorSpace_004z;
  float _127 = UniformBufferConstants_WorkingColorSpace_005x;
  float _128 = UniformBufferConstants_WorkingColorSpace_005y;
  float _129 = UniformBufferConstants_WorkingColorSpace_005z;
  float _131 = UniformBufferConstants_WorkingColorSpace_006x;
  float _132 = UniformBufferConstants_WorkingColorSpace_006y;
  float _133 = UniformBufferConstants_WorkingColorSpace_006z;
  float _135 = UniformBufferConstants_WorkingColorSpace_000x;
  float _136 = UniformBufferConstants_WorkingColorSpace_000y;
  float _137 = UniformBufferConstants_WorkingColorSpace_000z;
  float _139 = UniformBufferConstants_WorkingColorSpace_001x;
  float _140 = UniformBufferConstants_WorkingColorSpace_001y;
  float _141 = UniformBufferConstants_WorkingColorSpace_001z;
  float _143 = UniformBufferConstants_WorkingColorSpace_002x;
  float _144 = UniformBufferConstants_WorkingColorSpace_002y;
  float _145 = UniformBufferConstants_WorkingColorSpace_002z;
  uint _147 = _RootShaderParameters_038z;
  bool _148 = (_147 != 0);
  float _150 = _RootShaderParameters_035y;
  float _151 = _RootShaderParameters_035x;
  float _152 = _151 * 1.0005563497543335f;
  float _153 = 0.9994439482688904f / _151;
  bool _154 = !(_152 <= 7000.0f);
  if (!_154) {
    float _156 = _153 * 4607000064.0f;
    float _157 = 2967800.0f - _156;
    float _158 = _157 * _153;
    float _159 = _158 + 99.11000061035156f;
    float _160 = _159 * _153;
    float _161 = _160 + 0.24406300485134125f;
    _170 = _161;
  } else {
    float _163 = _153 * 2006400000.0f;
    float _164 = 1901800.0f - _163;
    float _165 = _164 * _153;
    float _166 = _165 + 247.47999572753906f;
    float _167 = _166 * _153;
    float _168 = _167 + 0.23703999817371368f;
    _170 = _168;
  }
  float _171 = _170 * _170;
  float _172 = _171 * 3.0f;
  float _173 = _170 * 2.869999885559082f;
  float _174 = _173 + -0.2750000059604645f;
  float _175 = _174 - _172;
  float _176 = _151 * 1.2864121856637212e-07f;
  float _177 = _176 + 0.00015411825734190643f;
  float _178 = _177 * _151;
  float _179 = _178 + 0.8601177334785461f;
  float _180 = _151 * 7.081451371959702e-07f;
  float _181 = _180 + 0.0008424202096648514f;
  float _182 = _181 * _151;
  float _183 = _182 + 1.0f;
  float _184 = _179 / _183;
  float _185 = _151 * 4.204816761443908e-08f;
  float _186 = _185 + 4.228062607580796e-05f;
  float _187 = _186 * _151;
  float _188 = _187 + 0.31739872694015503f;
  float _189 = _151 * 2.8974181986995973e-05f;
  float _190 = 1.0f - _189;
  float _191 = _151 * _151;
  float _192 = _191 * 1.6145605741257896e-07f;
  float _193 = _190 + _192;
  float _194 = _188 / _193;
  float _195 = _184 * 3.0f;
  float _196 = _184 * 2.0f;
  float _197 = _194 * 8.0f;
  float _198 = _196 + 4.0f;
  float _199 = _198 - _197;
  float _200 = _195 / _199;
  float _201 = _194 * 2.0f;
  float _202 = _201 / _199;
  bool _203 = (_151 < 4000.0f);
  float _204 = _203 ? _200 : _170;
  float _205 = _203 ? _202 : _175;
  float _206 = _151 * 1916156.25f;
  float _207 = -1137581184.0f - _206;
  float _208 = _191 * 1.5317699909210205f;
  float _209 = _207 - _208;
  float _210 = _151 + 1189.6199951171875f;
  float _211 = _210 * _151;
  float _212 = _211 + 1412139.875f;
  float _213 = _212 * _212;
  float _214 = _209 / _213;
  float _215 = _151 * 705674.0f;
  float _216 = 1974715392.0f - _215;
  float _217 = _191 * 308.60699462890625f;
  float _218 = _216 - _217;
  float _219 = _151 * 179.45599365234375f;
  float _220 = 6193636.0f - _219;
  float _221 = _220 + _191;
  float _222 = _221 * _221;
  float _223 = _218 / _222;
  float _224 = dot(float2(_214, _223), float2(_214, _223));
  float _225 = rsqrt(_224);
  float _226 = _150 * 0.05000000074505806f;
  float _227 = _226 * _223;
  float _228 = _227 * _225;
  float _229 = _228 + _184;
  float _230 = _226 * _214;
  float _231 = _230 * _225;
  float _232 = _194 - _231;
  float _233 = _229 * 3.0f;
  float _234 = _229 * 2.0f;
  float _235 = _232 * 8.0f;
  float _236 = 4.0f - _235;
  float _237 = _236 + _234;
  float _238 = _233 / _237;
  float _239 = _232 * 2.0f;
  float _240 = _239 / _237;
  float _241 = _238 - _200;
  float _242 = _240 - _202;
  float _243 = _241 + _204;
  float _244 = _242 + _205;
  float _245 = _148 ? _243 : 0.3127000033855438f;
  float _246 = _148 ? _244 : 0.32899999618530273f;
  float _247 = _148 ? 0.3127000033855438f : _243;
  float _248 = _148 ? 0.32899999618530273f : _244;
  float _249 = max(_246, 1.000000013351432e-10f);
  float _250 = _245 / _249;
  float _251 = 1.0f - _245;
  float _252 = _251 - _246;
  float _253 = _252 / _249;
  float _254 = max(_248, 1.000000013351432e-10f);
  float _255 = _247 / _254;
  float _256 = 1.0f - _247;
  float _257 = _256 - _248;
  float _258 = _257 / _254;
  float _259 = _250 * 0.8950999975204468f;
  float _260 = _259 + 0.266400009393692f;
  float _261 = mad(-0.16140000522136688f, _253, _260);
  float _262 = _250 * 0.7501999735832214f;
  float _263 = 1.7135000228881836f - _262;
  float _264 = mad(0.03669999912381172f, _253, _263);
  float _265 = _250 * 0.03889999911189079f;
  float _266 = _265 + -0.06849999725818634f;
  float _267 = mad(1.0296000242233276f, _253, _266);
  float _268 = _255 * 0.8950999975204468f;
  float _269 = _268 + 0.266400009393692f;
  float _270 = mad(-0.16140000522136688f, _258, _269);
  float _271 = _255 * 0.7501999735832214f;
  float _272 = 1.7135000228881836f - _271;
  float _273 = mad(0.03669999912381172f, _258, _272);
  float _274 = _255 * 0.03889999911189079f;
  float _275 = _274 + -0.06849999725818634f;
  float _276 = mad(1.0296000242233276f, _258, _275);
  float _277 = _270 / _261;
  float _278 = _273 / _264;
  float _279 = _276 / _267;
  float _280 = mad(_278, -0.7501999735832214f, 0.0f);
  float _281 = mad(_278, 1.7135000228881836f, 0.0f);
  float _282 = mad(_278, 0.03669999912381172f, -0.0f);
  float _283 = mad(_279, 0.03889999911189079f, 0.0f);
  float _284 = mad(_279, -0.06849999725818634f, 0.0f);
  float _285 = mad(_279, 1.0296000242233276f, 0.0f);
  float _286 = _277 * 0.883457362651825f;
  float _287 = mad(-0.1470542997121811f, _280, _286);
  float _288 = mad(0.1599626988172531f, _283, _287);
  float _289 = _277 * 0.26293492317199707f;
  float _290 = mad(-0.1470542997121811f, _281, _289);
  float _291 = mad(0.1599626988172531f, _284, _290);
  float _292 = _277 * -0.15930065512657166f;
  float _293 = mad(-0.1470542997121811f, _282, _292);
  float _294 = mad(0.1599626988172531f, _285, _293);
  float _295 = _277 * 0.38695648312568665f;
  float _296 = mad(0.5183603167533875f, _280, _295);
  float _297 = mad(0.04929120093584061f, _283, _296);
  float _298 = _277 * 0.11516613513231277f;
  float _299 = mad(0.5183603167533875f, _281, _298);
  float _300 = mad(0.04929120093584061f, _284, _299);
  float _301 = _277 * -0.0697740763425827f;
  float _302 = mad(0.5183603167533875f, _282, _301);
  float _303 = mad(0.04929120093584061f, _285, _302);
  float _304 = _277 * -0.007634039502590895f;
  float _305 = mad(0.04004279896616936f, _280, _304);
  float _306 = mad(0.9684867262840271f, _283, _305);
  float _307 = _277 * -0.0022720457054674625f;
  float _308 = mad(0.04004279896616936f, _281, _307);
  float _309 = mad(0.9684867262840271f, _284, _308);
  float _310 = _277 * 0.0013765322510153055f;
  float _311 = mad(0.04004279896616936f, _282, _310);
  float _312 = mad(0.9684867262840271f, _285, _311);
  float _313 = _288 * _135;
  float _314 = mad(_291, _139, _313);
  float _315 = mad(_294, _143, _314);
  float _316 = _288 * _136;
  float _317 = mad(_291, _140, _316);
  float _318 = mad(_294, _144, _317);
  float _319 = _288 * _137;
  float _320 = mad(_291, _141, _319);
  float _321 = mad(_294, _145, _320);
  float _322 = _297 * _135;
  float _323 = mad(_300, _139, _322);
  float _324 = mad(_303, _143, _323);
  float _325 = _297 * _136;
  float _326 = mad(_300, _140, _325);
  float _327 = mad(_303, _144, _326);
  float _328 = _297 * _137;
  float _329 = mad(_300, _141, _328);
  float _330 = mad(_303, _145, _329);
  float _331 = _306 * _135;
  float _332 = mad(_309, _139, _331);
  float _333 = mad(_312, _143, _332);
  float _334 = _306 * _136;
  float _335 = mad(_309, _140, _334);
  float _336 = mad(_312, _144, _335);
  float _337 = _306 * _137;
  float _338 = mad(_309, _141, _337);
  float _339 = mad(_312, _145, _338);
  float _340 = _315 * _123;
  float _341 = mad(_124, _324, _340);
  float _342 = mad(_125, _333, _341);
  float _343 = _318 * _123;
  float _344 = mad(_124, _327, _343);
  float _345 = mad(_125, _336, _344);
  float _346 = _321 * _123;
  float _347 = mad(_124, _330, _346);
  float _348 = mad(_125, _339, _347);
  float _349 = _315 * _127;
  float _350 = mad(_128, _324, _349);
  float _351 = mad(_129, _333, _350);
  float _352 = _318 * _127;
  float _353 = mad(_128, _327, _352);
  float _354 = mad(_129, _336, _353);
  float _355 = _321 * _127;
  float _356 = mad(_128, _330, _355);
  float _357 = mad(_129, _339, _356);
  float _358 = _315 * _131;
  float _359 = mad(_132, _324, _358);
  float _360 = mad(_133, _333, _359);
  float _361 = _318 * _131;
  float _362 = mad(_132, _327, _361);
  float _363 = mad(_133, _336, _362);
  float _364 = _321 * _131;
  float _365 = mad(_132, _330, _364);
  float _366 = mad(_133, _339, _365);
  float _367 = _342 * _119;
  float _368 = mad(_345, _120, _367);
  float _369 = mad(_348, _121, _368);
  float _370 = _351 * _119;
  float _371 = mad(_354, _120, _370);
  float _372 = mad(_357, _121, _371);
  float _373 = _360 * _119;
  float _374 = mad(_363, _120, _373);
  float _375 = mad(_366, _121, _374);
  float _377 = UniformBufferConstants_WorkingColorSpace_008x;
  float _378 = UniformBufferConstants_WorkingColorSpace_008y;
  float _379 = UniformBufferConstants_WorkingColorSpace_008z;
  float _381 = UniformBufferConstants_WorkingColorSpace_009x;
  float _382 = UniformBufferConstants_WorkingColorSpace_009y;
  float _383 = UniformBufferConstants_WorkingColorSpace_009z;
  float _385 = UniformBufferConstants_WorkingColorSpace_010x;
  float _386 = UniformBufferConstants_WorkingColorSpace_010y;
  float _387 = UniformBufferConstants_WorkingColorSpace_010z;
  float _388 = _377 * _369;
  float _389 = mad(_378, _372, _388);
  float _390 = mad(_379, _375, _389);
  float _391 = _381 * _369;
  float _392 = mad(_382, _372, _391);
  float _393 = mad(_383, _375, _392);
  float _394 = _385 * _369;
  float _395 = mad(_386, _372, _394);
  float _396 = mad(_387, _375, _395);
  float _397 = dot(float3(_390, _393, _396), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _398 = _390 / _397;
  float _399 = _393 / _397;
  float _400 = _396 / _397;
  float _401 = _398 + -1.0f;
  float _402 = _399 + -1.0f;
  float _403 = _400 + -1.0f;
  float _404 = dot(float3(_401, _402, _403), float3(_401, _402, _403));
  float _405 = _404 * -4.0f;
  float _406 = exp2(_405);
  float _407 = 1.0f - _406;
  float _409 = _RootShaderParameters_036z;
  float _410 = _397 * _397;
  float _411 = _410 * -4.0f;
  float _412 = _411 * _409;
  float _413 = exp2(_412);
  float _414 = 1.0f - _413;
  float _415 = _414 * _407;
  float _416 = _390 * 1.370412826538086f;
  float _417 = mad(-0.32929131388664246f, _393, _416);
  float _418 = mad(-0.06368283927440643f, _396, _417);
  float _419 = _390 * -0.08343426138162613f;
  float _420 = mad(1.0970908403396606f, _393, _419);
  float _421 = mad(-0.010861567221581936f, _396, _420);
  float _422 = _390 * -0.02579325996339321f;
  float _423 = mad(-0.09862564504146576f, _393, _422);
  float _424 = mad(1.203694462776184f, _396, _423);
  float _425 = _418 - _390;
  float _426 = _421 - _393;
  float _427 = _424 - _396;
  float _428 = _425 * _415;
  float _429 = _426 * _415;
  float _430 = _427 * _415;
  float _431 = _428 + _390;
  float _432 = _429 + _393;
  float _433 = _430 + _396;
  float _434 = dot(float3(_431, _432, _433), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _436 = _RootShaderParameters_024x;
  float _437 = _RootShaderParameters_024y;
  float _438 = _RootShaderParameters_024z;
  float _439 = _RootShaderParameters_024w;
  float _441 = _RootShaderParameters_019x;
  float _442 = _RootShaderParameters_019y;
  float _443 = _RootShaderParameters_019z;
  float _444 = _RootShaderParameters_019w;
  float _445 = _441 + _436;
  float _446 = _442 + _437;
  float _447 = _443 + _438;
  float _448 = _444 + _439;
  float _450 = _RootShaderParameters_023x;
  float _451 = _RootShaderParameters_023y;
  float _452 = _RootShaderParameters_023z;
  float _453 = _RootShaderParameters_023w;
  float _455 = _RootShaderParameters_018x;
  float _456 = _RootShaderParameters_018y;
  float _457 = _RootShaderParameters_018z;
  float _458 = _RootShaderParameters_018w;
  float _459 = _455 * _450;
  float _460 = _456 * _451;
  float _461 = _457 * _452;
  float _462 = _458 * _453;
  float _464 = _RootShaderParameters_022x;
  float _465 = _RootShaderParameters_022y;
  float _466 = _RootShaderParameters_022z;
  float _467 = _RootShaderParameters_022w;
  float _469 = _RootShaderParameters_017x;
  float _470 = _RootShaderParameters_017y;
  float _471 = _RootShaderParameters_017z;
  float _472 = _RootShaderParameters_017w;
  float _473 = _469 * _464;
  float _474 = _470 * _465;
  float _475 = _471 * _466;
  float _476 = _472 * _467;
  float _478 = _RootShaderParameters_021x;
  float _479 = _RootShaderParameters_021y;
  float _480 = _RootShaderParameters_021z;
  float _481 = _RootShaderParameters_021w;
  float _483 = _RootShaderParameters_016x;
  float _484 = _RootShaderParameters_016y;
  float _485 = _RootShaderParameters_016z;
  float _486 = _RootShaderParameters_016w;
  float _487 = _483 * _478;
  float _488 = _484 * _479;
  float _489 = _485 * _480;
  float _490 = _486 * _481;
  float _492 = _RootShaderParameters_020x;
  float _493 = _RootShaderParameters_020y;
  float _494 = _RootShaderParameters_020z;
  float _495 = _RootShaderParameters_020w;
  float _497 = _RootShaderParameters_015x;
  float _498 = _RootShaderParameters_015y;
  float _499 = _RootShaderParameters_015z;
  float _500 = _RootShaderParameters_015w;
  float _501 = _497 * _492;
  float _502 = _498 * _493;
  float _503 = _499 * _494;
  float _504 = _500 * _495;
  float _505 = _501 * _504;
  float _506 = _502 * _504;
  float _507 = _503 * _504;
  float _508 = _431 - _434;
  float _509 = _432 - _434;
  float _510 = _433 - _434;
  float _511 = _505 * _508;
  float _512 = _506 * _509;
  float _513 = _507 * _510;
  float _514 = _511 + _434;
  float _515 = _512 + _434;
  float _516 = _513 + _434;
  float _517 = max(0.0f, _514);
  float _518 = max(0.0f, _515);
  float _519 = max(0.0f, _516);
  float _520 = _487 * _490;
  float _521 = _488 * _490;
  float _522 = _489 * _490;
  float _523 = _517 * 5.55555534362793f;
  float _524 = _518 * 5.55555534362793f;
  float _525 = _519 * 5.55555534362793f;
  float _526 = log2(_523);
  float _527 = log2(_524);
  float _528 = log2(_525);
  float _529 = _520 * _526;
  float _530 = _521 * _527;
  float _531 = _522 * _528;
  float _532 = exp2(_529);
  float _533 = exp2(_530);
  float _534 = exp2(_531);
  float _535 = _532 * 0.18000000715255737f;
  float _536 = _533 * 0.18000000715255737f;
  float _537 = _534 * 0.18000000715255737f;
  float _538 = _473 * _476;
  float _539 = _474 * _476;
  float _540 = _475 * _476;
  float _541 = 1.0f / _538;
  float _542 = 1.0f / _539;
  float _543 = 1.0f / _540;
  float _544 = log2(_535);
  float _545 = log2(_536);
  float _546 = log2(_537);
  float _547 = _544 * _541;
  float _548 = _545 * _542;
  float _549 = _546 * _543;
  float _550 = exp2(_547);
  float _551 = exp2(_548);
  float _552 = exp2(_549);
  float _553 = _459 * _462;
  float _554 = _460 * _462;
  float _555 = _461 * _462;
  float _556 = _553 * _550;
  float _557 = _554 * _551;
  float _558 = _555 * _552;
  float _559 = _445 + _448;
  float _560 = _446 + _448;
  float _561 = _447 + _448;
  float _562 = _559 + _556;
  float _563 = _560 + _557;
  float _564 = _561 + _558;
  float _565 = _RootShaderParameters_035z;
  float _566 = _434 / _565;
  float _567 = saturate(_566);
  float _568 = _567 * 2.0f;
  float _569 = 3.0f - _568;
  float _570 = _567 * _567;
  float _571 = _570 * _569;
  float _572 = 1.0f - _571;
  float _574 = _RootShaderParameters_034x;
  float _575 = _RootShaderParameters_034y;
  float _576 = _RootShaderParameters_034z;
  float _577 = _RootShaderParameters_034w;
  float _578 = _441 + _574;
  float _579 = _442 + _575;
  float _580 = _443 + _576;
  float _581 = _444 + _577;
  float _583 = _RootShaderParameters_033x;
  float _584 = _RootShaderParameters_033y;
  float _585 = _RootShaderParameters_033z;
  float _586 = _RootShaderParameters_033w;
  float _587 = _455 * _583;
  float _588 = _456 * _584;
  float _589 = _457 * _585;
  float _590 = _458 * _586;
  float _592 = _RootShaderParameters_032x;
  float _593 = _RootShaderParameters_032y;
  float _594 = _RootShaderParameters_032z;
  float _595 = _RootShaderParameters_032w;
  float _596 = _469 * _592;
  float _597 = _470 * _593;
  float _598 = _471 * _594;
  float _599 = _472 * _595;
  float _601 = _RootShaderParameters_031x;
  float _602 = _RootShaderParameters_031y;
  float _603 = _RootShaderParameters_031z;
  float _604 = _RootShaderParameters_031w;
  float _605 = _483 * _601;
  float _606 = _484 * _602;
  float _607 = _485 * _603;
  float _608 = _486 * _604;
  float _610 = _RootShaderParameters_030x;
  float _611 = _RootShaderParameters_030y;
  float _612 = _RootShaderParameters_030z;
  float _613 = _RootShaderParameters_030w;
  float _614 = _497 * _610;
  float _615 = _498 * _611;
  float _616 = _499 * _612;
  float _617 = _500 * _613;
  float _618 = _614 * _617;
  float _619 = _615 * _617;
  float _620 = _616 * _617;
  float _621 = _618 * _508;
  float _622 = _619 * _509;
  float _623 = _620 * _510;
  float _624 = _621 + _434;
  float _625 = _622 + _434;
  float _626 = _623 + _434;
  float _627 = max(0.0f, _624);
  float _628 = max(0.0f, _625);
  float _629 = max(0.0f, _626);
  float _630 = _605 * _608;
  float _631 = _606 * _608;
  float _632 = _607 * _608;
  float _633 = _627 * 5.55555534362793f;
  float _634 = _628 * 5.55555534362793f;
  float _635 = _629 * 5.55555534362793f;
  float _636 = log2(_633);
  float _637 = log2(_634);
  float _638 = log2(_635);
  float _639 = _630 * _636;
  float _640 = _631 * _637;
  float _641 = _632 * _638;
  float _642 = exp2(_639);
  float _643 = exp2(_640);
  float _644 = exp2(_641);
  float _645 = _642 * 0.18000000715255737f;
  float _646 = _643 * 0.18000000715255737f;
  float _647 = _644 * 0.18000000715255737f;
  float _648 = _596 * _599;
  float _649 = _597 * _599;
  float _650 = _598 * _599;
  float _651 = 1.0f / _648;
  float _652 = 1.0f / _649;
  float _653 = 1.0f / _650;
  float _654 = log2(_645);
  float _655 = log2(_646);
  float _656 = log2(_647);
  float _657 = _654 * _651;
  float _658 = _655 * _652;
  float _659 = _656 * _653;
  float _660 = exp2(_657);
  float _661 = exp2(_658);
  float _662 = exp2(_659);
  float _663 = _587 * _590;
  float _664 = _588 * _590;
  float _665 = _589 * _590;
  float _666 = _663 * _660;
  float _667 = _664 * _661;
  float _668 = _665 * _662;
  float _669 = _578 + _581;
  float _670 = _579 + _581;
  float _671 = _580 + _581;
  float _672 = _669 + _666;
  float _673 = _670 + _667;
  float _674 = _671 + _668;
  float _675 = _RootShaderParameters_036x;
  float _677 = _RootShaderParameters_035w;
  float _678 = _675 - _677;
  float _679 = _434 - _677;
  float _680 = _679 / _678;
  float _681 = saturate(_680);
  float _682 = _681 * 2.0f;
  float _683 = 3.0f - _682;
  float _684 = _681 * _681;
  float _685 = _684 * _683;
  float _687 = _RootShaderParameters_029x;
  float _688 = _RootShaderParameters_029y;
  float _689 = _RootShaderParameters_029z;
  float _690 = _RootShaderParameters_029w;
  float _691 = _441 + _687;
  float _692 = _442 + _688;
  float _693 = _443 + _689;
  float _694 = _444 + _690;
  float _696 = _RootShaderParameters_028x;
  float _697 = _RootShaderParameters_028y;
  float _698 = _RootShaderParameters_028z;
  float _699 = _RootShaderParameters_028w;
  float _700 = _455 * _696;
  float _701 = _456 * _697;
  float _702 = _457 * _698;
  float _703 = _458 * _699;
  float _705 = _RootShaderParameters_027x;
  float _706 = _RootShaderParameters_027y;
  float _707 = _RootShaderParameters_027z;
  float _708 = _RootShaderParameters_027w;
  float _709 = _469 * _705;
  float _710 = _470 * _706;
  float _711 = _471 * _707;
  float _712 = _472 * _708;
  float _714 = _RootShaderParameters_026x;
  float _715 = _RootShaderParameters_026y;
  float _716 = _RootShaderParameters_026z;
  float _717 = _RootShaderParameters_026w;
  float _718 = _483 * _714;
  float _719 = _484 * _715;
  float _720 = _485 * _716;
  float _721 = _486 * _717;
  float _723 = _RootShaderParameters_025x;
  float _724 = _RootShaderParameters_025y;
  float _725 = _RootShaderParameters_025z;
  float _726 = _RootShaderParameters_025w;
  float _727 = _497 * _723;
  float _728 = _498 * _724;
  float _729 = _499 * _725;
  float _730 = _500 * _726;
  float _731 = _727 * _730;
  float _732 = _728 * _730;
  float _733 = _729 * _730;
  float _734 = _731 * _508;
  float _735 = _732 * _509;
  float _736 = _733 * _510;
  float _737 = _734 + _434;
  float _738 = _735 + _434;
  float _739 = _736 + _434;
  float _740 = max(0.0f, _737);
  float _741 = max(0.0f, _738);
  float _742 = max(0.0f, _739);
  float _743 = _718 * _721;
  float _744 = _719 * _721;
  float _745 = _720 * _721;
  float _746 = _740 * 5.55555534362793f;
  float _747 = _741 * 5.55555534362793f;
  float _748 = _742 * 5.55555534362793f;
  float _749 = log2(_746);
  float _750 = log2(_747);
  float _751 = log2(_748);
  float _752 = _743 * _749;
  float _753 = _744 * _750;
  float _754 = _745 * _751;
  float _755 = exp2(_752);
  float _756 = exp2(_753);
  float _757 = exp2(_754);
  float _758 = _755 * 0.18000000715255737f;
  float _759 = _756 * 0.18000000715255737f;
  float _760 = _757 * 0.18000000715255737f;
  float _761 = _709 * _712;
  float _762 = _710 * _712;
  float _763 = _711 * _712;
  float _764 = 1.0f / _761;
  float _765 = 1.0f / _762;
  float _766 = 1.0f / _763;
  float _767 = log2(_758);
  float _768 = log2(_759);
  float _769 = log2(_760);
  float _770 = _767 * _764;
  float _771 = _768 * _765;
  float _772 = _769 * _766;
  float _773 = exp2(_770);
  float _774 = exp2(_771);
  float _775 = exp2(_772);
  float _776 = _700 * _703;
  float _777 = _701 * _703;
  float _778 = _702 * _703;
  float _779 = _776 * _773;
  float _780 = _777 * _774;
  float _781 = _778 * _775;
  float _782 = _691 + _694;
  float _783 = _692 + _694;
  float _784 = _693 + _694;
  float _785 = _782 + _779;
  float _786 = _783 + _780;
  float _787 = _784 + _781;
  float _788 = _571 - _685;
  float _789 = _572 * _562;
  float _790 = _572 * _563;
  float _791 = _572 * _564;
  float _792 = _785 * _788;
  float _793 = _786 * _788;
  float _794 = _787 * _788;
  float _795 = _685 * _672;
  float _796 = _685 * _673;
  float _797 = _685 * _674;
  float _798 = _795 + _789;
  float _799 = _798 + _792;
  float _800 = _796 + _790;
  float _801 = _800 + _793;
  float _802 = _797 + _791;
  float _803 = _802 + _794;
  float _805 = UniformBufferConstants_WorkingColorSpace_012x;
  float _806 = UniformBufferConstants_WorkingColorSpace_012y;
  float _807 = UniformBufferConstants_WorkingColorSpace_012z;
  float _809 = UniformBufferConstants_WorkingColorSpace_013x;
  float _810 = UniformBufferConstants_WorkingColorSpace_013y;
  float _811 = UniformBufferConstants_WorkingColorSpace_013z;
  float _813 = UniformBufferConstants_WorkingColorSpace_014x;
  float _814 = UniformBufferConstants_WorkingColorSpace_014y;
  float _815 = UniformBufferConstants_WorkingColorSpace_014z;
  float _816 = _799 * _805;
  float _817 = mad(_806, _801, _816);
  float _818 = mad(_807, _803, _817);
  float _819 = _809 * _799;
  float _820 = mad(_810, _801, _819);
  float _821 = mad(_811, _803, _820);
  float _822 = _813 * _799;
  float _823 = mad(_814, _801, _822);
  float _824 = mad(_815, _803, _823);
  float _825 = _RootShaderParameters_036y;
  float _826 = _799 * 0.9386394023895264f;
  float _827 = mad(-4.540197551250458e-09f, _801, _826);
  float _828 = mad(0.061360642313957214f, _803, _827);
  float _829 = _799 * 6.775371730327606e-08f;
  float _830 = mad(0.8307942152023315f, _801, _829);
  float _831 = mad(0.169205904006958f, _803, _830);
  float _832 = _799 * -9.313225746154785e-10f;
  float _833 = mad(-2.3283064365386963e-10f, _801, _832);
  float _834 = _828 - _799;
  float _835 = _831 - _801;
  float _836 = _834 * _825;
  float _837 = _835 * _825;
  float _838 = _833 * _825;
  float _839 = _836 + _799;
  float _840 = _837 + _801;
  float _841 = _838 + _803;
  float3 ap1_graded_color = float3(_839, _840, _841);  // CustomEdit

  float _842 = _839 * 0.6954522132873535f;
  float _843 = mad(0.14067868888378143f, _840, _842);
  float _844 = mad(0.16386905312538147f, _841, _843);
  float _845 = _839 * 0.044794581830501556f;
  float _846 = mad(0.8596711158752441f, _840, _845);
  float _847 = mad(0.0955343246459961f, _841, _846);
  float _848 = _839 * -0.005525882821530104f;
  float _849 = mad(0.004025210160762072f, _840, _848);
  float _850 = mad(1.0015007257461548f, _841, _849);
  float _851 = min(_844, _847);
  float _852 = min(_851, _850);
  float _853 = max(_844, _847);
  float _854 = max(_853, _850);
  float _855 = max(_854, 1.000000013351432e-10f);
  float _856 = max(_852, 1.000000013351432e-10f);
  float _857 = _855 - _856;
  float _858 = max(_854, 0.009999999776482582f);
  float _859 = _857 / _858;
  float _860 = _850 - _847;
  float _861 = _860 * _850;
  float _862 = _847 - _844;
  float _863 = _862 * _847;
  float _864 = _861 + _863;
  float _865 = _844 - _850;
  float _866 = _865 * _844;
  float _867 = _864 + _866;
  float _868 = sqrt(_867);
  float _869 = _868 * 1.75f;
  float _870 = _847 + _844;
  float _871 = _870 + _850;
  float _872 = _871 + _869;
  float _873 = _872 * 0.3333333432674408f;
  float _874 = _859 + -0.4000000059604645f;
  float _875 = _874 * 5.0f;
  float _876 = _874 * 2.5f;
  float _877 = abs(_876);
  float _878 = 1.0f - _877;
  float _879 = max(_878, 0.0f);
  bool _880 = (_875 > 0.0f);
  bool _881 = (_875 < 0.0f);
  int _882 = int(_880);
  int _883 = int(_881);
  int _884 = _882 - _883;
  float _885 = float(_884);
  float _886 = _879 * _879;
  float _887 = 1.0f - _886;
  float _888 = _885 * _887;
  float _889 = _888 + 1.0f;
  float _890 = _889 * 0.02500000037252903f;
  bool _891 = !(_873 <= 0.0533333346247673f);
  _899 = _890;
  if (_891) {
    bool _893 = !(_873 >= 0.1599999964237213f);
    _899 = 0.0f;
    if (_893) {
      float _895 = 0.23999999463558197f / _872;
      float _896 = _895 + -0.5f;
      float _897 = _896 * _890;
      _899 = _897;
    }
  }
  float _900 = _899 + 1.0f;
  float _901 = _900 * _844;
  float _902 = _900 * _847;
  float _903 = _900 * _850;
  bool _904 = (_901 == _902);
  bool _905 = (_902 == _903);
  bool _906 = _904 && _905;
  _935 = 0.0f;
  if (!_906) {
    float _908 = _901 * 2.0f;
    float _909 = _908 - _902;
    float _910 = _909 - _903;
    float _911 = _847 - _850;
    float _912 = _911 * 1.7320507764816284f;
    float _913 = _912 * _900;
    float _914 = _913 / _910;
    float _915 = atan(_914);
    float _916 = _915 + 3.1415927410125732f;
    float _917 = _915 + -3.1415927410125732f;
    bool _918 = (_910 < 0.0f);
    bool _919 = (_910 == 0.0f);
    bool _920 = (_913 >= 0.0f);
    bool _921 = (_913 < 0.0f);
    bool _922 = _920 && _918;
    float _923 = _922 ? _916 : _915;
    bool _924 = _921 && _918;
    float _925 = _924 ? _917 : _923;
    bool _926 = _921 && _919;
    bool _927 = _920 && _919;
    float _928 = _925 * 57.2957763671875f;
    float _929 = _926 ? -90.0f : _928;
    float _930 = _927 ? 90.0f : _929;
    bool _931 = (_930 < 0.0f);
    _935 = _930;
    if (_931) {
      float _933 = _930 + 360.0f;
      _935 = _933;
    }
  }
  float _936 = max(_935, 0.0f);
  float _937 = min(_936, 360.0f);
  bool _938 = (_937 < -180.0f);
  if (_938) {
    float _940 = _937 + 360.0f;
    _946 = _940;
  } else {
    bool _942 = (_937 > 180.0f);
    _946 = _937;
    if (_942) {
      float _944 = _937 + -360.0f;
      _946 = _944;
    }
  }
  float _947 = _946 * 0.014814814552664757f;
  float _948 = abs(_947);
  float _949 = 1.0f - _948;
  float _950 = saturate(_949);
  float _951 = _950 * 2.0f;
  float _952 = 3.0f - _951;
  float _953 = _950 * _950;
  float _954 = _953 * _952;
  float _955 = 0.029999999329447746f - _901;
  float _956 = _859 * 0.18000000715255737f;
  float _957 = _956 * _955;
  float _958 = _954 * _954;
  float _959 = _958 * _957;
  float _960 = _959 + _901;
  float _961 = _960 * 1.4514392614364624f;
  float _962 = mad(-0.2365107536315918f, _902, _961);
  float _963 = mad(-0.21492856740951538f, _903, _962);
  float _964 = _960 * -0.07655377686023712f;
  float _965 = mad(1.17622971534729f, _902, _964);
  float _966 = mad(-0.09967592358589172f, _903, _965);
  float _967 = _960 * 0.008316148072481155f;
  float _968 = mad(-0.006032449658960104f, _902, _967);
  float _969 = mad(0.9977163076400757f, _903, _968);
  float _970 = max(0.0f, _963);
  float _971 = max(0.0f, _966);
  float _972 = max(0.0f, _969);
  float _973 = dot(float3(_970, _971, _972), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _974 = _970 - _973;
  float _975 = _971 - _973;
  float _976 = _972 - _973;
  float _977 = _974 * 0.9599999785423279f;
  float _978 = _975 * 0.9599999785423279f;
  float _979 = _976 * 0.9599999785423279f;
  float _980 = _977 + _973;
  float _981 = _978 + _973;
  float _982 = _979 + _973;

  float3 ap1_aces_colored = float3(_980, _981, _982);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _984 = _RootShaderParameters_037w;
  float _985 = _984 + 1.0f;
  float _986 = _RootShaderParameters_037y;
  float _987 = _985 - _986;
  float _989 = _RootShaderParameters_038x;
  float _990 = _989 + 1.0f;
  float _991 = _RootShaderParameters_037z;
  float _992 = _990 - _991;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _993 = (_986 > 0.800000011920929f);
    float _994 = _RootShaderParameters_037x;
    if (_993) {
      float _996 = 0.8199999928474426f - _986;
      float _997 = _996 / _994;
      float _998 = _997 + -0.7447274923324585f;
      _1010 = _998;
    } else {
      float _1000 = _984 + 0.18000000715255737f;
      float _1001 = _1000 / _987;
      float _1002 = 2.0f - _1001;
      float _1003 = _1001 / _1002;
      float _1004 = log2(_1003);
      float _1005 = _1004 * 0.3465735912322998f;
      float _1006 = _987 / _994;
      float _1007 = _1005 * _1006;
      float _1008 = -0.7447274923324585f - _1007;
      _1010 = _1008;
    }
    float _1011 = 1.0f - _986;
    float _1012 = _1011 / _994;
    float _1013 = _1012 - _1010;
    float _1014 = _991 / _994;
    float _1015 = _1014 - _1013;
    float _1016 = log2(_980);
    float _1017 = log2(_981);
    float _1018 = log2(_982);
    float _1019 = _1016 * 0.3010300099849701f;
    float _1020 = _1017 * 0.3010300099849701f;
    float _1021 = _1018 * 0.3010300099849701f;
    float _1022 = _1019 + _1013;
    float _1023 = _1020 + _1013;
    float _1024 = _1021 + _1013;
    float _1025 = _994 * _1022;
    float _1026 = _994 * _1023;
    float _1027 = _994 * _1024;
    float _1028 = _987 * 2.0f;
    float _1029 = _994 * -2.0f;
    float _1030 = _1029 / _987;
    float _1031 = _1019 - _1010;
    float _1032 = _1020 - _1010;
    float _1033 = _1021 - _1010;
    float _1034 = _1031 * 1.4426950216293335f;
    float _1035 = _1034 * _1030;
    float _1036 = _1032 * 1.4426950216293335f;
    float _1037 = _1036 * _1030;
    float _1038 = _1033 * 1.4426950216293335f;
    float _1039 = _1038 * _1030;
    float _1040 = exp2(_1035);
    float _1041 = exp2(_1037);
    float _1042 = exp2(_1039);
    float _1043 = _1040 + 1.0f;
    float _1044 = _1041 + 1.0f;
    float _1045 = _1042 + 1.0f;
    float _1046 = _1028 / _1043;
    float _1047 = _1028 / _1044;
    float _1048 = _1028 / _1045;
    float _1049 = _1046 - _984;
    float _1050 = _1047 - _984;
    float _1051 = _1048 - _984;
    float _1052 = _992 * 2.0f;
    float _1053 = _994 * 2.0f;
    float _1054 = _1053 / _992;
    float _1055 = _1019 - _1015;
    float _1056 = _1020 - _1015;
    float _1057 = _1021 - _1015;
    float _1058 = _1055 * 1.4426950216293335f;
    float _1059 = _1058 * _1054;
    float _1060 = _1056 * 1.4426950216293335f;
    float _1061 = _1060 * _1054;
    float _1062 = _1057 * 1.4426950216293335f;
    float _1063 = _1062 * _1054;
    float _1064 = exp2(_1059);
    float _1065 = exp2(_1061);
    float _1066 = exp2(_1063);
    float _1067 = _1064 + 1.0f;
    float _1068 = _1065 + 1.0f;
    float _1069 = _1066 + 1.0f;
    float _1070 = _1052 / _1067;
    float _1071 = _1052 / _1068;
    float _1072 = _1052 / _1069;
    float _1073 = _990 - _1070;
    float _1074 = _990 - _1071;
    float _1075 = _990 - _1072;
    bool _1076 = (_1019 < _1010);
    bool _1077 = (_1020 < _1010);
    bool _1078 = (_1021 < _1010);
    float _1079 = _1076 ? _1049 : _1025;
    float _1080 = _1077 ? _1050 : _1026;
    float _1081 = _1078 ? _1051 : _1027;
    bool _1082 = (_1019 > _1015);
    bool _1083 = (_1020 > _1015);
    bool _1084 = (_1021 > _1015);
    float _1085 = _1082 ? _1073 : _1025;
    float _1086 = _1083 ? _1074 : _1026;
    float _1087 = _1084 ? _1075 : _1027;
    float _1088 = _1015 - _1010;
    float _1089 = _1031 / _1088;
    float _1090 = _1032 / _1088;
    float _1091 = _1033 / _1088;
    float _1092 = saturate(_1089);
    float _1093 = saturate(_1090);
    float _1094 = saturate(_1091);
    bool _1095 = (_1015 < _1010);
    float _1096 = 1.0f - _1092;
    float _1097 = 1.0f - _1093;
    float _1098 = 1.0f - _1094;
    float _1099 = _1095 ? _1096 : _1092;
    float _1100 = _1095 ? _1097 : _1093;
    float _1101 = _1095 ? _1098 : _1094;
    float _1102 = _1099 * 2.0f;
    float _1103 = _1100 * 2.0f;
    float _1104 = _1101 * 2.0f;
    float _1105 = 3.0f - _1102;
    float _1106 = 3.0f - _1103;
    float _1107 = 3.0f - _1104;
    float _1108 = _1085 - _1079;
    float _1109 = _1086 - _1080;
    float _1110 = _1087 - _1081;
    float _1111 = _1099 * _1099;
    float _1112 = _1111 * _1108;
    float _1113 = _1112 * _1105;
    float _1114 = _1100 * _1100;
    float _1115 = _1114 * _1109;
    float _1116 = _1115 * _1106;
    float _1117 = _1101 * _1101;
    float _1118 = _1117 * _1110;
    float _1119 = _1118 * _1107;
    float _1120 = _1113 + _1079;
    float _1121 = _1116 + _1080;
    float _1122 = _1119 + _1081;
    float _1123 = dot(float3(_1120, _1121, _1122), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _1124 = _1120 - _1123;
    float _1125 = _1121 - _1123;
    float _1126 = _1122 - _1123;
    float _1127 = _1124 * 0.9300000071525574f;
    float _1128 = _1125 * 0.9300000071525574f;
    float _1129 = _1126 * 0.9300000071525574f;
    float _1130 = _1127 + _1123;
    float _1131 = _1128 + _1123;
    float _1132 = _1129 + _1123;
    float _1133 = max(0.0f, _1130);
    float _1134 = max(0.0f, _1131);
    float _1135 = max(0.0f, _1132);
    sdr_ap1_color = float3(_1133, _1134, _1135);
    // end of FilmToneMap
  }

  float _1136 = _RootShaderParameters_036w;
  /* float _1137 = _1133 - _839;
  float _1138 = _1134 - _840;
  float _1139 = _1135 - _841; */
  float _1137 = sdr_ap1_color.r - _839;
  float _1138 = sdr_ap1_color.g - _840;
  float _1139 = sdr_ap1_color.b - _841;
  // CustomEdit

  float _1140 = _1136 * _1137;
  float _1141 = _1136 * _1138;
  float _1142 = _1136 * _1139;
  float _1143 = _1140 + _839;
  float _1144 = _1141 + _840;
  float _1145 = _1142 + _841;
  float _1146 = _1143 * 1.065374732017517f;
  float _1147 = mad(1.451815478503704e-06f, _1144, _1146);
  float _1148 = mad(-0.06537103652954102f, _1145, _1147);
  float _1149 = _1143 * -2.57161445915699e-07f;
  float _1150 = mad(1.2036634683609009f, _1144, _1149);
  float _1151 = mad(-0.20366770029067993f, _1145, _1150);
  float _1152 = _1143 * 1.862645149230957e-08f;
  float _1153 = mad(2.0954757928848267e-08f, _1144, _1152);
  float _1154 = mad(0.9999996423721313f, _1145, _1153);
  float _1155 = _1148 - _1143;
  float _1156 = _1151 - _1144;
  float _1157 = _1154 - _1145;
  float _1158 = _1155 * _825;
  float _1159 = _1156 * _825;
  float _1160 = _1157 * _825;
  float _1161 = _1158 + _1143;
  float _1162 = _1159 + _1144;
  float _1163 = _1160 + _1145;
  float _1164 = _805 * _1161;
  float _1165 = mad(_806, _1162, _1164);
  float _1166 = mad(_807, _1163, _1165);
  float _1167 = _809 * _1161;
  float _1168 = mad(_810, _1162, _1167);
  float _1169 = mad(_811, _1163, _1168);
  float _1170 = _813 * _1161;
  float _1171 = mad(_814, _1162, _1170);
  float _1172 = mad(_815, _1163, _1171);
  float _1173 = max(0.0f, _1166);
  float _1174 = max(0.0f, _1169);
  float _1175 = max(0.0f, _1172);
  float3 lut_input_color = float3(_1173, _1174, _1175);  // CustomEdit
  float _1329;                                           // custom branch
  float _1330;                                           // custom branch
  float _1331;                                           // custom branch
  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1329 = post_lut_color.r;
    _1330 = post_lut_color.g;
    _1331 = post_lut_color.b;
  } else {
    float _1176 = saturate(_1173);
    float _1177 = saturate(_1174);
    float _1178 = saturate(_1175);
    bool _1179 = (_1176 < 0.0031306699384003878f);
    if (_1179) {
      float _1181 = _1176 * 12.920000076293945f;
      _1189 = _1181;
    } else {
      float _1183 = log2(_1176);
      float _1184 = _1183 * 0.4166666567325592f;
      float _1185 = exp2(_1184);
      float _1186 = _1185 * 1.0549999475479126f;
      float _1187 = _1186 + -0.054999999701976776f;
      _1189 = _1187;
    }
    bool _1190 = (_1177 < 0.0031306699384003878f);
    if (_1190) {
      float _1192 = _1177 * 12.920000076293945f;
      _1200 = _1192;
    } else {
      float _1194 = log2(_1177);
      float _1195 = _1194 * 0.4166666567325592f;
      float _1196 = exp2(_1195);
      float _1197 = _1196 * 1.0549999475479126f;
      float _1198 = _1197 + -0.054999999701976776f;
      _1200 = _1198;
    }
    bool _1201 = (_1178 < 0.0031306699384003878f);
    if (_1201) {
      float _1203 = _1178 * 12.920000076293945f;
      _1211 = _1203;
    } else {
      float _1205 = log2(_1178);
      float _1206 = _1205 * 0.4166666567325592f;
      float _1207 = exp2(_1206);
      float _1208 = _1207 * 1.0549999475479126f;
      float _1209 = _1208 + -0.054999999701976776f;
      _1211 = _1209;
    }
    float _1212 = _1189 * 0.9375f;
    float _1213 = _1200 * 0.9375f;
    float _1214 = _1212 + 0.03125f;
    float _1215 = _1213 + 0.03125f;
    float _1217 = _RootShaderParameters_005x;
    float _1218 = _1217 * _1189;
    float _1219 = _1217 * _1200;
    float _1220 = _1217 * _1211;
    float _1221 = _RootShaderParameters_005y;
    float _1222 = _1211 * 15.0f;
    float _1223 = floor(_1222);
    float _1224 = _1222 - _1223;
    float _1225 = _1223 + _1214;
    float _1226 = _1225 * 0.0625f;
    // _1227 = _4;
    // _1228 = _7;
    float4 _1229 = Textures_1.SampleLevel(Samplers_1, float2(_1226, _1215), 0.0f);
    float _1230 = _1229.x;
    float _1231 = _1229.y;
    float _1232 = _1229.z;
    float _1233 = _1226 + 0.0625f;
    float4 _1234 = Textures_1.SampleLevel(Samplers_1, float2(_1233, _1215), 0.0f);
    float _1235 = _1234.x;
    float _1236 = _1234.y;
    float _1237 = _1234.z;
    float _1238 = _1235 - _1230;
    float _1239 = _1236 - _1231;
    float _1240 = _1237 - _1232;
    float _1241 = _1238 * _1224;
    float _1242 = _1239 * _1224;
    float _1243 = _1240 * _1224;
    float _1244 = _1241 + _1230;
    float _1245 = _1242 + _1231;
    float _1246 = _1243 + _1232;
    float _1247 = _1244 * _1221;
    float _1248 = _1245 * _1221;
    float _1249 = _1246 * _1221;
    float _1250 = _1247 + _1218;
    float _1251 = _1248 + _1219;
    float _1252 = _1249 + _1220;
    float _1253 = _RootShaderParameters_005z;
    // _1254 = _3;
    // _1255 = _6;
    float4 _1256 = Textures_2.SampleLevel(Samplers_2, float2(_1226, _1215), 0.0f);
    float _1257 = _1256.x;
    float _1258 = _1256.y;
    float _1259 = _1256.z;
    float4 _1260 = Textures_2.SampleLevel(Samplers_2, float2(_1233, _1215), 0.0f);
    float _1261 = _1260.x;
    float _1262 = _1260.y;
    float _1263 = _1260.z;
    float _1264 = _1261 - _1257;
    float _1265 = _1262 - _1258;
    float _1266 = _1263 - _1259;
    float _1267 = _1264 * _1224;
    float _1268 = _1265 * _1224;
    float _1269 = _1266 * _1224;
    float _1270 = _1267 + _1257;
    float _1271 = _1268 + _1258;
    float _1272 = _1269 + _1259;
    float _1273 = _1270 * _1253;
    float _1274 = _1271 * _1253;
    float _1275 = _1272 * _1253;
    float _1276 = _1250 + _1273;
    float _1277 = _1251 + _1274;
    float _1278 = _1252 + _1275;
    float _1279 = _RootShaderParameters_005w;
    // _1280 = _2;
    // _1281 = _5;
    float4 _1282 = Textures_3.SampleLevel(Samplers_3, float2(_1226, _1215), 0.0f);
    float _1283 = _1282.x;
    float _1284 = _1282.y;
    float _1285 = _1282.z;
    float4 _1286 = Textures_3.SampleLevel(Samplers_3, float2(_1233, _1215), 0.0f);
    float _1287 = _1286.x;
    float _1288 = _1286.y;
    float _1289 = _1286.z;
    float _1290 = _1287 - _1283;
    float _1291 = _1288 - _1284;
    float _1292 = _1289 - _1285;
    float _1293 = _1290 * _1224;
    float _1294 = _1291 * _1224;
    float _1295 = _1292 * _1224;
    float _1296 = _1293 + _1283;
    float _1297 = _1294 + _1284;
    float _1298 = _1295 + _1285;
    float _1299 = _1296 * _1279;
    float _1300 = _1297 * _1279;
    float _1301 = _1298 * _1279;
    float _1302 = _1276 + _1299;
    float _1303 = _1277 + _1300;
    float _1304 = _1278 + _1301;
    float _1305 = max(6.103519990574569e-05f, _1302);
    float _1306 = max(6.103519990574569e-05f, _1303);
    float _1307 = max(6.103519990574569e-05f, _1304);
    float _1308 = _1305 * 0.07739938050508499f;
    float _1309 = _1306 * 0.07739938050508499f;
    float _1310 = _1307 * 0.07739938050508499f;
    float _1311 = _1305 * 0.9478672742843628f;
    float _1312 = _1306 * 0.9478672742843628f;
    float _1313 = _1307 * 0.9478672742843628f;
    float _1314 = _1311 + 0.05213269963860512f;
    float _1315 = _1312 + 0.05213269963860512f;
    float _1316 = _1313 + 0.05213269963860512f;
    float _1317 = log2(_1314);
    float _1318 = log2(_1315);
    float _1319 = log2(_1316);
    float _1320 = _1317 * 2.4000000953674316f;
    float _1321 = _1318 * 2.4000000953674316f;
    float _1322 = _1319 * 2.4000000953674316f;
    float _1323 = exp2(_1320);
    float _1324 = exp2(_1321);
    float _1325 = exp2(_1322);
    bool _1326 = (_1305 > 0.040449999272823334f);
    bool _1327 = (_1306 > 0.040449999272823334f);
    bool _1328 = (_1307 > 0.040449999272823334f);
    /* float _1329 = _1326 ? _1323 : _1308;
    float _1330 = _1327 ? _1324 : _1309;
    float _1331 = _1328 ? _1325 : _1310; */
    _1329 = _1326 ? _1323 : _1308;
    _1330 = _1327 ? _1324 : _1309;
    _1331 = _1328 ? _1325 : _1310;
  }

  float _1333 = _RootShaderParameters_039x;
  float _1334 = _1333 * _1329;
  float _1335 = _1333 * _1330;
  float _1336 = _1333 * _1331;
  float _1337 = _RootShaderParameters_039y;
  float _1338 = _RootShaderParameters_039z;
  float _1339 = _1337 + _1334;
  float _1340 = _1339 * _1329;
  float _1341 = _1340 + _1338;
  float _1342 = _1337 + _1335;
  float _1343 = _1342 * _1330;
  float _1344 = _1343 + _1338;
  float _1345 = _1337 + _1336;
  float _1346 = _1345 * _1331;
  float _1347 = _1346 + _1338;
  float _1349 = _RootShaderParameters_013w;
  float _1350 = _RootShaderParameters_013x;
  float _1351 = _RootShaderParameters_013y;
  float _1352 = _RootShaderParameters_013z;
  float _1354 = _RootShaderParameters_014x;
  float _1355 = _RootShaderParameters_014y;
  float _1356 = _RootShaderParameters_014z;
  float _1357 = _1354 * _1341;
  float _1358 = _1355 * _1344;
  float _1359 = _1356 * _1347;
  float _1360 = _1350 - _1357;
  float _1361 = _1351 - _1358;
  float _1362 = _1352 - _1359;
  float _1363 = _1360 * _1349;
  float _1364 = _1361 * _1349;
  float _1365 = _1362 * _1349;
  float _1366 = _1363 + _1357;
  float _1367 = _1364 + _1358;
  float _1368 = _1365 + _1359;
  float _1369 = _1354 * _818;
  float _1370 = _1355 * _821;
  float _1371 = _1356 * _824;
  float _1372 = _1350 - _1369;
  float _1373 = _1351 - _1370;
  float _1374 = _1352 - _1371;
  float _1375 = _1372 * _1349;
  float _1376 = _1373 * _1349;
  float _1377 = _1374 * _1349;
  float _1378 = _1375 + _1369;
  float _1379 = _1376 + _1370;
  float _1380 = _1377 + _1371;
  float _1382 = _RootShaderParameters_040y;
  float _1383 = max(0.0f, _1366);
  float _1384 = max(0.0f, _1367);
  float _1385 = max(0.0f, _1368);
  float _1386 = log2(_1383);
  float _1387 = log2(_1384);
  float _1388 = log2(_1385);
  float _1389 = _1386 * _1382;
  float _1390 = _1387 * _1382;
  float _1391 = _1388 * _1382;
  float _1392 = exp2(_1389);
  float _1393 = exp2(_1390);
  float _1394 = exp2(_1391);

  // CustomEdit
  float3 film_graded_color = float3(_1392, _1393, _1394);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_12, _13, _14)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _1396 = _RootShaderParameters_040w;
  bool _1397 = (_1396 == 0);
  if (_1397) {
    uint _1400 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1401 = (_1400 == 0);
    _1434 = _1392;
    _1435 = _1393;
    _1436 = _1394;
    do {
      if (_1401) {
        float _1404 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1405 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1406 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1408 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1409 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1410 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1412 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1413 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1414 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1415 = _1404 * _1392;
        float _1416 = mad(_1405, _1393, _1415);
        float _1417 = mad(_1406, _1394, _1416);
        float _1418 = _1408 * _1392;
        float _1419 = mad(_1409, _1393, _1418);
        float _1420 = mad(_1410, _1394, _1419);
        float _1421 = _1412 * _1392;
        float _1422 = mad(_1413, _1393, _1421);
        float _1423 = mad(_1414, _1394, _1422);
        float _1424 = _1417 * _53;
        float _1425 = mad(_54, _1420, _1424);
        float _1426 = mad(_55, _1423, _1425);
        float _1427 = _1417 * _56;
        float _1428 = mad(_57, _1420, _1427);
        float _1429 = mad(_58, _1423, _1428);
        float _1430 = _1417 * _59;
        float _1431 = mad(_60, _1420, _1430);
        float _1432 = mad(_61, _1423, _1431);
        _1434 = _1426;
        _1435 = _1429;
        _1436 = _1432;
      }
      bool _1437 = (_1434 < 0.0031306699384003878f);
      do {
        if (_1437) {
          float _1439 = _1434 * 12.920000076293945f;
          _1447 = _1439;
        } else {
          float _1441 = log2(_1434);
          float _1442 = _1441 * 0.4166666567325592f;
          float _1443 = exp2(_1442);
          float _1444 = _1443 * 1.0549999475479126f;
          float _1445 = _1444 + -0.054999999701976776f;
          _1447 = _1445;
        }
        bool _1448 = (_1435 < 0.0031306699384003878f);
        do {
          if (_1448) {
            float _1450 = _1435 * 12.920000076293945f;
            _1458 = _1450;
          } else {
            float _1452 = log2(_1435);
            float _1453 = _1452 * 0.4166666567325592f;
            float _1454 = exp2(_1453);
            float _1455 = _1454 * 1.0549999475479126f;
            float _1456 = _1455 + -0.054999999701976776f;
            _1458 = _1456;
          }
          bool _1459 = (_1436 < 0.0031306699384003878f);
          if (_1459) {
            float _1461 = _1436 * 12.920000076293945f;
            _2818 = _1447;
            _2819 = _1458;
            _2820 = _1461;
          } else {
            float _1463 = log2(_1436);
            float _1464 = _1463 * 0.4166666567325592f;
            float _1465 = exp2(_1464);
            float _1466 = _1465 * 1.0549999475479126f;
            float _1467 = _1466 + -0.054999999701976776f;
            _2818 = _1447;
            _2819 = _1458;
            _2820 = _1467;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1469 = (_1396 == 1);
    if (_1469) {
      float _1472 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1473 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1474 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1476 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1477 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1478 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1480 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1481 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1482 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1483 = _1472 * _1392;
      float _1484 = mad(_1473, _1393, _1483);
      float _1485 = mad(_1474, _1394, _1484);
      float _1486 = _1476 * _1392;
      float _1487 = mad(_1477, _1393, _1486);
      float _1488 = mad(_1478, _1394, _1487);
      float _1489 = _1480 * _1392;
      float _1490 = mad(_1481, _1393, _1489);
      float _1491 = mad(_1482, _1394, _1490);
      float _1492 = _1485 * _53;
      float _1493 = mad(_54, _1488, _1492);
      float _1494 = mad(_55, _1491, _1493);
      float _1495 = _1485 * _56;
      float _1496 = mad(_57, _1488, _1495);
      float _1497 = mad(_58, _1491, _1496);
      float _1498 = _1485 * _59;
      float _1499 = mad(_60, _1488, _1498);
      float _1500 = mad(_61, _1491, _1499);
      float _1501 = max(6.103519990574569e-05f, _1494);
      float _1502 = max(6.103519990574569e-05f, _1497);
      float _1503 = max(6.103519990574569e-05f, _1500);
      float _1504 = max(_1501, 0.017999999225139618f);
      float _1505 = max(_1502, 0.017999999225139618f);
      float _1506 = max(_1503, 0.017999999225139618f);
      float _1507 = log2(_1504);
      float _1508 = log2(_1505);
      float _1509 = log2(_1506);
      float _1510 = _1507 * 0.44999998807907104f;
      float _1511 = _1508 * 0.44999998807907104f;
      float _1512 = _1509 * 0.44999998807907104f;
      float _1513 = exp2(_1510);
      float _1514 = exp2(_1511);
      float _1515 = exp2(_1512);
      float _1516 = _1513 * 1.0989999771118164f;
      float _1517 = _1514 * 1.0989999771118164f;
      float _1518 = _1515 * 1.0989999771118164f;
      float _1519 = _1516 + -0.0989999994635582f;
      float _1520 = _1517 + -0.0989999994635582f;
      float _1521 = _1518 + -0.0989999994635582f;
      float _1522 = _1501 * 4.5f;
      float _1523 = _1502 * 4.5f;
      float _1524 = _1503 * 4.5f;
      float _1525 = min(_1522, _1519);
      float _1526 = min(_1523, _1520);
      float _1527 = min(_1524, _1521);
      _2818 = _1525;
      _2819 = _1526;
      _2820 = _1527;
    } else {
      bool _1529 = (_1396 == 3);
      bool _1530 = (_1396 == 5);
      bool _1531 = _1529 || _1530;
      if (_1531) {
        //   %1533 = bitcast [6 x float]* %17 to i8*
        //   %1534 = bitcast [6 x float]* %18 to i8*
        float _1536 = _RootShaderParameters_012z;
        float _1537 = _RootShaderParameters_012y;
        float _1538 = _RootShaderParameters_012x;
        float _1540 = _RootShaderParameters_011x;
        float _1541 = _RootShaderParameters_011y;
        float _1542 = _RootShaderParameters_011z;
        float _1543 = _RootShaderParameters_011w;
        float _1545 = _RootShaderParameters_010x;
        float _1546 = _RootShaderParameters_010y;
        float _1547 = _RootShaderParameters_010z;
        float _1548 = _RootShaderParameters_010w;
        float _1550 = _RootShaderParameters_009x;
        float _1552 = _RootShaderParameters_008x;
        float _1553 = _RootShaderParameters_008y;
        float _1554 = _RootShaderParameters_008z;
        float _1555 = _RootShaderParameters_008w;
        _17[0] = _1545;
        _17[1] = _1546;
        _17[2] = _1547;
        _17[3] = _1548;
        _17[4] = _1538;
        _17[5] = _1538;
        _18[0] = _1540;
        _18[1] = _1541;
        _18[2] = _1542;
        _18[3] = _1543;
        _18[4] = _1537;
        _18[5] = _1537;
        float _1569 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1570 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1571 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1573 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1574 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1575 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1577 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1578 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1579 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1580 = _1536 * _1378;
        float _1581 = _1536 * _1379;
        float _1582 = _1536 * _1380;
        float _1583 = _1569 * _1580;
        float _1584 = mad(_1570, _1581, _1583);
        float _1585 = mad(_1571, _1582, _1584);
        float _1586 = _1573 * _1580;
        float _1587 = mad(_1574, _1581, _1586);
        float _1588 = mad(_1575, _1582, _1587);
        float _1589 = _1577 * _1580;
        float _1590 = mad(_1578, _1581, _1589);
        float _1591 = mad(_1579, _1582, _1590);
        float _1592 = min(_1585, _1588);
        float _1593 = min(_1592, _1591);
        float _1594 = max(_1585, _1588);
        float _1595 = max(_1594, _1591);
        float _1596 = max(_1595, 1.000000013351432e-10f);
        float _1597 = max(_1593, 1.000000013351432e-10f);
        float _1598 = _1596 - _1597;
        float _1599 = max(_1595, 0.009999999776482582f);
        float _1600 = _1598 / _1599;
        float _1601 = _1591 - _1588;
        float _1602 = _1601 * _1591;
        float _1603 = _1588 - _1585;
        float _1604 = _1603 * _1588;
        float _1605 = _1602 + _1604;
        float _1606 = _1585 - _1591;
        float _1607 = _1606 * _1585;
        float _1608 = _1605 + _1607;
        float _1609 = sqrt(_1608);
        float _1610 = _1609 * 1.75f;
        float _1611 = _1588 + _1585;
        float _1612 = _1611 + _1591;
        float _1613 = _1612 + _1610;
        float _1614 = _1613 * 0.3333333432674408f;
        float _1615 = _1600 + -0.4000000059604645f;
        float _1616 = _1615 * 5.0f;
        float _1617 = _1615 * 2.5f;
        float _1618 = abs(_1617);
        float _1619 = 1.0f - _1618;
        float _1620 = max(_1619, 0.0f);
        bool _1621 = (_1616 > 0.0f);
        bool _1622 = (_1616 < 0.0f);
        int _1623 = int(_1621);
        int _1624 = int(_1622);
        int _1625 = _1623 - _1624;
        float _1626 = float(_1625);
        float _1627 = _1620 * _1620;
        float _1628 = 1.0f - _1627;
        float _1629 = _1626 * _1628;
        float _1630 = _1629 + 1.0f;
        float _1631 = _1630 * 0.02500000037252903f;
        bool _1632 = !(_1614 <= 0.0533333346247673f);
        _1640 = _1631;
        do {
          if (_1632) {
            bool _1634 = !(_1614 >= 0.1599999964237213f);
            _1640 = 0.0f;
            if (_1634) {
              float _1636 = 0.23999999463558197f / _1613;
              float _1637 = _1636 + -0.5f;
              float _1638 = _1637 * _1631;
              _1640 = _1638;
            }
          }
          float _1641 = _1640 + 1.0f;
          float _1642 = _1641 * _1585;
          float _1643 = _1641 * _1588;
          float _1644 = _1641 * _1591;
          bool _1645 = (_1642 == _1643);
          bool _1646 = (_1643 == _1644);
          bool _1647 = _1645 && _1646;
          _1676 = 0.0f;
          do {
            if (!_1647) {
              float _1649 = _1642 * 2.0f;
              float _1650 = _1649 - _1643;
              float _1651 = _1650 - _1644;
              float _1652 = _1588 - _1591;
              float _1653 = _1652 * 1.7320507764816284f;
              float _1654 = _1653 * _1641;
              float _1655 = _1654 / _1651;
              float _1656 = atan(_1655);
              float _1657 = _1656 + 3.1415927410125732f;
              float _1658 = _1656 + -3.1415927410125732f;
              bool _1659 = (_1651 < 0.0f);
              bool _1660 = (_1651 == 0.0f);
              bool _1661 = (_1654 >= 0.0f);
              bool _1662 = (_1654 < 0.0f);
              bool _1663 = _1661 && _1659;
              float _1664 = _1663 ? _1657 : _1656;
              bool _1665 = _1662 && _1659;
              float _1666 = _1665 ? _1658 : _1664;
              bool _1667 = _1662 && _1660;
              bool _1668 = _1661 && _1660;
              float _1669 = _1666 * 57.2957763671875f;
              float _1670 = _1667 ? -90.0f : _1669;
              float _1671 = _1668 ? 90.0f : _1670;
              bool _1672 = (_1671 < 0.0f);
              _1676 = _1671;
              if (_1672) {
                float _1674 = _1671 + 360.0f;
                _1676 = _1674;
              }
            }
            float _1677 = max(_1676, 0.0f);
            float _1678 = min(_1677, 360.0f);
            bool _1679 = (_1678 < -180.0f);
            do {
              if (_1679) {
                float _1681 = _1678 + 360.0f;
                _1687 = _1681;
              } else {
                bool _1683 = (_1678 > 180.0f);
                _1687 = _1678;
                if (_1683) {
                  float _1685 = _1678 + -360.0f;
                  _1687 = _1685;
                }
              }
              bool _1688 = (_1687 > -67.5f);
              bool _1689 = (_1687 < 67.5f);
              bool _1690 = _1688 && _1689;
              _1726 = 0.0f;
              do {
                if (_1690) {
                  float _1692 = _1687 + 67.5f;
                  float _1693 = _1692 * 0.029629629105329514f;
                  int _1694 = int(_1693);
                  float _1695 = float(_1694);
                  float _1696 = _1693 - _1695;
                  float _1697 = _1696 * _1696;
                  float _1698 = _1697 * _1696;
                  bool _1699 = (_1694 == 3);
                  if (_1699) {
                    float _1701 = _1698 * 0.1666666716337204f;
                    float _1702 = _1697 * 0.5f;
                    float _1703 = _1696 * 0.5f;
                    float _1704 = 0.1666666716337204f - _1703;
                    float _1705 = _1704 + _1702;
                    float _1706 = _1705 - _1701;
                    _1726 = _1706;
                  } else {
                    bool _1708 = (_1694 == 2);
                    if (_1708) {
                      float _1710 = _1698 * 0.5f;
                      float _1711 = 0.6666666865348816f - _1697;
                      float _1712 = _1711 + _1710;
                      _1726 = _1712;
                    } else {
                      bool _1714 = (_1694 == 1);
                      if (_1714) {
                        float _1716 = _1698 * -0.5f;
                        float _1717 = _1697 + _1696;
                        float _1718 = _1717 * 0.5f;
                        float _1719 = _1716 + 0.1666666716337204f;
                        float _1720 = _1719 + _1718;
                        _1726 = _1720;
                      } else {
                        bool _1722 = (_1694 == 0);
                        float _1723 = _1698 * 0.1666666716337204f;
                        float _1724 = _1722 ? _1723 : 0.0f;
                        _1726 = _1724;
                      }
                    }
                  }
                }
                float _1727 = 0.029999999329447746f - _1642;
                float _1728 = _1600 * 0.27000001072883606f;
                float _1729 = _1728 * _1727;
                float _1730 = _1729 * _1726;
                float _1731 = _1730 + _1642;
                float _1732 = max(_1731, 0.0f);
                float _1733 = max(_1643, 0.0f);
                float _1734 = max(_1644, 0.0f);
                float _1735 = min(_1732, 65535.0f);
                float _1736 = min(_1733, 65535.0f);
                float _1737 = min(_1734, 65535.0f);
                float _1738 = _1735 * 1.4514392614364624f;
                float _1739 = mad(-0.2365107536315918f, _1736, _1738);
                float _1740 = mad(-0.21492856740951538f, _1737, _1739);
                float _1741 = _1735 * -0.07655377686023712f;
                float _1742 = mad(1.17622971534729f, _1736, _1741);
                float _1743 = mad(-0.09967592358589172f, _1737, _1742);
                float _1744 = _1735 * 0.008316148072481155f;
                float _1745 = mad(-0.006032449658960104f, _1736, _1744);
                float _1746 = mad(0.9977163076400757f, _1737, _1745);
                float _1747 = max(_1740, 0.0f);
                float _1748 = max(_1743, 0.0f);
                float _1749 = max(_1746, 0.0f);
                float _1750 = min(_1747, 65504.0f);
                float _1751 = min(_1748, 65504.0f);
                float _1752 = min(_1749, 65504.0f);
                float _1753 = dot(float3(_1750, _1751, _1752), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1754 = _1750 - _1753;
                float _1755 = _1751 - _1753;
                float _1756 = _1752 - _1753;
                float _1757 = _1754 * 0.9599999785423279f;
                float _1758 = _1755 * 0.9599999785423279f;
                float _1759 = _1756 * 0.9599999785423279f;
                float _1760 = _1757 + _1753;
                float _1761 = _1758 + _1753;
                float _1762 = _1759 + _1753;
                float _1763 = max(_1760, 1.000000013351432e-10f);
                float _1764 = log2(_1763);
                float _1765 = _1764 * 0.3010300099849701f;
                float _1766 = log2(_1552);
                float _1767 = _1766 * 0.3010300099849701f;
                bool _1768 = !(_1765 <= _1767);
                do {
                  if (!_1768) {
                    float _1770 = log2(_1553);
                    float _1771 = _1770 * 0.3010300099849701f;
                    _1836 = _1771;
                  } else {
                    bool _1773 = (_1765 > _1767);
                    float _1774 = log2(_1550);
                    float _1775 = _1774 * 0.3010300099849701f;
                    bool _1776 = (_1765 < _1775);
                    bool _1777 = _1773 && _1776;
                    if (_1777) {
                      float _1779 = _1764 - _1766;
                      float _1780 = _1779 * 0.9030900001525879f;
                      float _1781 = _1774 - _1766;
                      float _1782 = _1781 * 0.3010300099849701f;
                      float _1783 = _1780 / _1782;
                      int _1784 = int(_1783);
                      float _1785 = float(_1784);
                      float _1786 = _1783 - _1785;
                      float _1788 = _17[_1784];
                      int _1789 = _1784 + 1;
                      float _1791 = _17[_1789];
                      int _1792 = _1784 + 2;
                      float _1794 = _17[_1792];
                      float _1795 = _1786 * _1786;
                      float _1796 = _1788 * 0.5f;
                      float _1797 = mad(_1791, -1.0f, _1796);
                      float _1798 = mad(_1794, 0.5f, _1797);
                      float _1799 = _1791 - _1788;
                      float _1800 = mad(_1791, 0.5f, _1796);
                      float _1801 = dot(float3(_1795, _1786, 1.0f), float3(_1798, _1799, _1800));
                      _1836 = _1801;
                    } else {
                      bool _1803 = !(_1765 >= _1775);
                      do {
                        if (!_1803) {
                          float _1805 = log2(_1554);
                          float _1806 = _1805 * 0.3010300099849701f;
                          bool _1807 = (_1765 < _1806);
                          if (_1807) {
                            float _1809 = _1764 - _1774;
                            float _1810 = _1809 * 0.9030900001525879f;
                            float _1811 = _1805 - _1774;
                            float _1812 = _1811 * 0.3010300099849701f;
                            float _1813 = _1810 / _1812;
                            int _1814 = int(_1813);
                            float _1815 = float(_1814);
                            float _1816 = _1813 - _1815;
                            float _1818 = _18[_1814];
                            int _1819 = _1814 + 1;
                            float _1821 = _18[_1819];
                            int _1822 = _1814 + 2;
                            float _1824 = _18[_1822];
                            float _1825 = _1816 * _1816;
                            float _1826 = _1818 * 0.5f;
                            float _1827 = mad(_1821, -1.0f, _1826);
                            float _1828 = mad(_1824, 0.5f, _1827);
                            float _1829 = _1821 - _1818;
                            float _1830 = mad(_1821, 0.5f, _1826);
                            float _1831 = dot(float3(_1825, _1816, 1.0f), float3(_1828, _1829, _1830));
                            _1836 = _1831;
                            break;
                          }
                        }
                        float _1833 = log2(_1555);
                        float _1834 = _1833 * 0.3010300099849701f;
                        _1836 = _1834;
                      } while (false);
                    }
                  }
                  float _1837 = _1836 * 3.321928024291992f;
                  float _1838 = exp2(_1837);
                  float _1839 = max(_1761, 1.000000013351432e-10f);
                  float _1840 = log2(_1839);
                  float _1841 = _1840 * 0.3010300099849701f;
                  bool _1842 = !(_1841 <= _1767);
                  do {
                    if (!_1842) {
                      float _1844 = log2(_1553);
                      float _1845 = _1844 * 0.3010300099849701f;
                      _1910 = _1845;
                    } else {
                      bool _1847 = (_1841 > _1767);
                      float _1848 = log2(_1550);
                      float _1849 = _1848 * 0.3010300099849701f;
                      bool _1850 = (_1841 < _1849);
                      bool _1851 = _1847 && _1850;
                      if (_1851) {
                        float _1853 = _1840 - _1766;
                        float _1854 = _1853 * 0.9030900001525879f;
                        float _1855 = _1848 - _1766;
                        float _1856 = _1855 * 0.3010300099849701f;
                        float _1857 = _1854 / _1856;
                        int _1858 = int(_1857);
                        float _1859 = float(_1858);
                        float _1860 = _1857 - _1859;
                        float _1862 = _17[_1858];
                        int _1863 = _1858 + 1;
                        float _1865 = _17[_1863];
                        int _1866 = _1858 + 2;
                        float _1868 = _17[_1866];
                        float _1869 = _1860 * _1860;
                        float _1870 = _1862 * 0.5f;
                        float _1871 = mad(_1865, -1.0f, _1870);
                        float _1872 = mad(_1868, 0.5f, _1871);
                        float _1873 = _1865 - _1862;
                        float _1874 = mad(_1865, 0.5f, _1870);
                        float _1875 = dot(float3(_1869, _1860, 1.0f), float3(_1872, _1873, _1874));
                        _1910 = _1875;
                      } else {
                        bool _1877 = !(_1841 >= _1849);
                        do {
                          if (!_1877) {
                            float _1879 = log2(_1554);
                            float _1880 = _1879 * 0.3010300099849701f;
                            bool _1881 = (_1841 < _1880);
                            if (_1881) {
                              float _1883 = _1840 - _1848;
                              float _1884 = _1883 * 0.9030900001525879f;
                              float _1885 = _1879 - _1848;
                              float _1886 = _1885 * 0.3010300099849701f;
                              float _1887 = _1884 / _1886;
                              int _1888 = int(_1887);
                              float _1889 = float(_1888);
                              float _1890 = _1887 - _1889;
                              float _1892 = _18[_1888];
                              int _1893 = _1888 + 1;
                              float _1895 = _18[_1893];
                              int _1896 = _1888 + 2;
                              float _1898 = _18[_1896];
                              float _1899 = _1890 * _1890;
                              float _1900 = _1892 * 0.5f;
                              float _1901 = mad(_1895, -1.0f, _1900);
                              float _1902 = mad(_1898, 0.5f, _1901);
                              float _1903 = _1895 - _1892;
                              float _1904 = mad(_1895, 0.5f, _1900);
                              float _1905 = dot(float3(_1899, _1890, 1.0f), float3(_1902, _1903, _1904));
                              _1910 = _1905;
                              break;
                            }
                          }
                          float _1907 = log2(_1555);
                          float _1908 = _1907 * 0.3010300099849701f;
                          _1910 = _1908;
                        } while (false);
                      }
                    }
                    float _1911 = _1910 * 3.321928024291992f;
                    float _1912 = exp2(_1911);
                    float _1913 = max(_1762, 1.000000013351432e-10f);
                    float _1914 = log2(_1913);
                    float _1915 = _1914 * 0.3010300099849701f;
                    bool _1916 = !(_1915 <= _1767);
                    do {
                      if (!_1916) {
                        float _1918 = log2(_1553);
                        float _1919 = _1918 * 0.3010300099849701f;
                        _1984 = _1919;
                      } else {
                        bool _1921 = (_1915 > _1767);
                        float _1922 = log2(_1550);
                        float _1923 = _1922 * 0.3010300099849701f;
                        bool _1924 = (_1915 < _1923);
                        bool _1925 = _1921 && _1924;
                        if (_1925) {
                          float _1927 = _1914 - _1766;
                          float _1928 = _1927 * 0.9030900001525879f;
                          float _1929 = _1922 - _1766;
                          float _1930 = _1929 * 0.3010300099849701f;
                          float _1931 = _1928 / _1930;
                          int _1932 = int(_1931);
                          float _1933 = float(_1932);
                          float _1934 = _1931 - _1933;
                          float _1936 = _17[_1932];
                          int _1937 = _1932 + 1;
                          float _1939 = _17[_1937];
                          int _1940 = _1932 + 2;
                          float _1942 = _17[_1940];
                          float _1943 = _1934 * _1934;
                          float _1944 = _1936 * 0.5f;
                          float _1945 = mad(_1939, -1.0f, _1944);
                          float _1946 = mad(_1942, 0.5f, _1945);
                          float _1947 = _1939 - _1936;
                          float _1948 = mad(_1939, 0.5f, _1944);
                          float _1949 = dot(float3(_1943, _1934, 1.0f), float3(_1946, _1947, _1948));
                          _1984 = _1949;
                        } else {
                          bool _1951 = !(_1915 >= _1923);
                          do {
                            if (!_1951) {
                              float _1953 = log2(_1554);
                              float _1954 = _1953 * 0.3010300099849701f;
                              bool _1955 = (_1915 < _1954);
                              if (_1955) {
                                float _1957 = _1914 - _1922;
                                float _1958 = _1957 * 0.9030900001525879f;
                                float _1959 = _1953 - _1922;
                                float _1960 = _1959 * 0.3010300099849701f;
                                float _1961 = _1958 / _1960;
                                int _1962 = int(_1961);
                                float _1963 = float(_1962);
                                float _1964 = _1961 - _1963;
                                float _1966 = _18[_1962];
                                int _1967 = _1962 + 1;
                                float _1969 = _18[_1967];
                                int _1970 = _1962 + 2;
                                float _1972 = _18[_1970];
                                float _1973 = _1964 * _1964;
                                float _1974 = _1966 * 0.5f;
                                float _1975 = mad(_1969, -1.0f, _1974);
                                float _1976 = mad(_1972, 0.5f, _1975);
                                float _1977 = _1969 - _1966;
                                float _1978 = mad(_1969, 0.5f, _1974);
                                float _1979 = dot(float3(_1973, _1964, 1.0f), float3(_1976, _1977, _1978));
                                _1984 = _1979;
                                break;
                              }
                            }
                            float _1981 = log2(_1555);
                            float _1982 = _1981 * 0.3010300099849701f;
                            _1984 = _1982;
                          } while (false);
                        }
                      }
                      float _1985 = _1984 * 3.321928024291992f;
                      float _1986 = exp2(_1985);
                      float _1987 = _1838 - _1553;
                      float _1988 = _1555 - _1553;
                      float _1989 = _1987 / _1988;
                      float _1990 = _1912 - _1553;
                      float _1991 = _1990 / _1988;
                      float _1992 = _1986 - _1553;
                      float _1993 = _1992 / _1988;
                      float _1994 = _1989 * 0.6624541878700256f;
                      float _1995 = mad(0.13400420546531677f, _1991, _1994);
                      float _1996 = mad(0.15618768334388733f, _1993, _1995);
                      float _1997 = _1989 * 0.2722287178039551f;
                      float _1998 = mad(0.6740817427635193f, _1991, _1997);
                      float _1999 = mad(0.053689517080783844f, _1993, _1998);
                      float _2000 = _1989 * -0.005574649665504694f;
                      float _2001 = mad(0.00406073359772563f, _1991, _2000);
                      float _2002 = mad(1.0103391408920288f, _1993, _2001);
                      float _2003 = _1996 * 1.6410233974456787f;
                      float _2004 = mad(-0.32480329275131226f, _1999, _2003);
                      float _2005 = mad(-0.23642469942569733f, _2002, _2004);
                      float _2006 = _1996 * -0.663662850856781f;
                      float _2007 = mad(1.6153316497802734f, _1999, _2006);
                      float _2008 = mad(0.016756348311901093f, _2002, _2007);
                      float _2009 = _1996 * 0.011721894145011902f;
                      float _2010 = mad(-0.008284442126750946f, _1999, _2009);
                      float _2011 = mad(0.9883948564529419f, _2002, _2010);
                      float _2012 = max(_2005, 0.0f);
                      float _2013 = max(_2008, 0.0f);
                      float _2014 = max(_2011, 0.0f);
                      float _2015 = min(_2012, 1.0f);
                      float _2016 = min(_2013, 1.0f);
                      float _2017 = min(_2014, 1.0f);
                      float _2018 = _2015 * 0.6624541878700256f;
                      float _2019 = mad(0.13400420546531677f, _2016, _2018);
                      float _2020 = mad(0.15618768334388733f, _2017, _2019);
                      float _2021 = _2015 * 0.2722287178039551f;
                      float _2022 = mad(0.6740817427635193f, _2016, _2021);
                      float _2023 = mad(0.053689517080783844f, _2017, _2022);
                      float _2024 = _2015 * -0.005574649665504694f;
                      float _2025 = mad(0.00406073359772563f, _2016, _2024);
                      float _2026 = mad(1.0103391408920288f, _2017, _2025);
                      float _2027 = _2020 * 1.6410233974456787f;
                      float _2028 = mad(-0.32480329275131226f, _2023, _2027);
                      float _2029 = mad(-0.23642469942569733f, _2026, _2028);
                      float _2030 = _2020 * -0.663662850856781f;
                      float _2031 = mad(1.6153316497802734f, _2023, _2030);
                      float _2032 = mad(0.016756348311901093f, _2026, _2031);
                      float _2033 = _2020 * 0.011721894145011902f;
                      float _2034 = mad(-0.008284442126750946f, _2023, _2033);
                      float _2035 = mad(0.9883948564529419f, _2026, _2034);
                      float _2036 = max(_2029, 0.0f);
                      float _2037 = max(_2032, 0.0f);
                      float _2038 = max(_2035, 0.0f);
                      float _2039 = min(_2036, 65535.0f);
                      float _2040 = min(_2037, 65535.0f);
                      float _2041 = min(_2038, 65535.0f);
                      float _2042 = _2039 * _1555;
                      float _2043 = _2040 * _1555;
                      float _2044 = _2041 * _1555;
                      float _2045 = max(_2042, 0.0f);
                      float _2046 = max(_2043, 0.0f);
                      float _2047 = max(_2044, 0.0f);
                      float _2048 = min(_2045, 65535.0f);
                      float _2049 = min(_2046, 65535.0f);
                      float _2050 = min(_2047, 65535.0f);
                      bool _2051 = (_1396 == 5);
                      _2063 = _2048;
                      _2064 = _2049;
                      _2065 = _2050;
                      do {
                        if (!_2051) {
                          float _2053 = _2048 * _53;
                          float _2054 = mad(_54, _2049, _2053);
                          float _2055 = mad(_55, _2050, _2054);
                          float _2056 = _2048 * _56;
                          float _2057 = mad(_57, _2049, _2056);
                          float _2058 = mad(_58, _2050, _2057);
                          float _2059 = _2048 * _59;
                          float _2060 = mad(_60, _2049, _2059);
                          float _2061 = mad(_61, _2050, _2060);
                          _2063 = _2055;
                          _2064 = _2058;
                          _2065 = _2061;
                        }
                        float _2066 = _2063 * 9.999999747378752e-05f;
                        float _2067 = _2064 * 9.999999747378752e-05f;
                        float _2068 = _2065 * 9.999999747378752e-05f;
                        float _2069 = log2(_2066);
                        float _2070 = log2(_2067);
                        float _2071 = log2(_2068);
                        float _2072 = _2069 * 0.1593017578125f;
                        float _2073 = _2070 * 0.1593017578125f;
                        float _2074 = _2071 * 0.1593017578125f;
                        float _2075 = exp2(_2072);
                        float _2076 = exp2(_2073);
                        float _2077 = exp2(_2074);
                        float _2078 = _2075 * 18.8515625f;
                        float _2079 = _2076 * 18.8515625f;
                        float _2080 = _2077 * 18.8515625f;
                        float _2081 = _2078 + 0.8359375f;
                        float _2082 = _2079 + 0.8359375f;
                        float _2083 = _2080 + 0.8359375f;
                        float _2084 = _2075 * 18.6875f;
                        float _2085 = _2076 * 18.6875f;
                        float _2086 = _2077 * 18.6875f;
                        float _2087 = _2084 + 1.0f;
                        float _2088 = _2085 + 1.0f;
                        float _2089 = _2086 + 1.0f;
                        float _2090 = 1.0f / _2087;
                        float _2091 = 1.0f / _2088;
                        float _2092 = 1.0f / _2089;
                        float _2093 = _2090 * _2081;
                        float _2094 = _2091 * _2082;
                        float _2095 = _2092 * _2083;
                        float _2096 = log2(_2093);
                        float _2097 = log2(_2094);
                        float _2098 = log2(_2095);
                        float _2099 = _2096 * 78.84375f;
                        float _2100 = _2097 * 78.84375f;
                        float _2101 = _2098 * 78.84375f;
                        float _2102 = exp2(_2099);
                        float _2103 = exp2(_2100);
                        float _2104 = exp2(_2101);
                        _2818 = _2102;
                        _2819 = _2103;
                        _2820 = _2104;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _2106 = _1396 & -3;
        bool _2107 = (_2106 == 4);
        if (_2107) {
          //   %2109 = bitcast [6 x float]* %15 to i8*
          //   %2110 = bitcast [6 x float]* %16 to i8*
          float _2112 = _RootShaderParameters_012z;
          float _2113 = _RootShaderParameters_012y;
          float _2114 = _RootShaderParameters_012x;
          float _2116 = _RootShaderParameters_011x;
          float _2117 = _RootShaderParameters_011y;
          float _2118 = _RootShaderParameters_011z;
          float _2119 = _RootShaderParameters_011w;
          float _2121 = _RootShaderParameters_010x;
          float _2122 = _RootShaderParameters_010y;
          float _2123 = _RootShaderParameters_010z;
          float _2124 = _RootShaderParameters_010w;
          float _2126 = _RootShaderParameters_009x;
          float _2128 = _RootShaderParameters_008x;
          float _2129 = _RootShaderParameters_008y;
          float _2130 = _RootShaderParameters_008z;
          float _2131 = _RootShaderParameters_008w;
          _15[0] = _2121;
          _15[1] = _2122;
          _15[2] = _2123;
          _15[3] = _2124;
          _15[4] = _2114;
          _15[5] = _2114;
          _16[0] = _2116;
          _16[1] = _2117;
          _16[2] = _2118;
          _16[3] = _2119;
          _16[4] = _2113;
          _16[5] = _2113;
          float _2145 = UniformBufferConstants_WorkingColorSpace_016x;
          float _2146 = UniformBufferConstants_WorkingColorSpace_016y;
          float _2147 = UniformBufferConstants_WorkingColorSpace_016z;
          float _2149 = UniformBufferConstants_WorkingColorSpace_017x;
          float _2150 = UniformBufferConstants_WorkingColorSpace_017y;
          float _2151 = UniformBufferConstants_WorkingColorSpace_017z;
          float _2153 = UniformBufferConstants_WorkingColorSpace_018x;
          float _2154 = UniformBufferConstants_WorkingColorSpace_018y;
          float _2155 = UniformBufferConstants_WorkingColorSpace_018z;
          float _2156 = _2112 * _1378;
          float _2157 = _2112 * _1379;
          float _2158 = _2112 * _1380;
          float _2159 = _2145 * _2156;
          float _2160 = mad(_2146, _2157, _2159);
          float _2161 = mad(_2147, _2158, _2160);
          float _2162 = _2149 * _2156;
          float _2163 = mad(_2150, _2157, _2162);
          float _2164 = mad(_2151, _2158, _2163);
          float _2165 = _2153 * _2156;
          float _2166 = mad(_2154, _2157, _2165);
          float _2167 = mad(_2155, _2158, _2166);
          float _2168 = min(_2161, _2164);
          float _2169 = min(_2168, _2167);
          float _2170 = max(_2161, _2164);
          float _2171 = max(_2170, _2167);
          float _2172 = max(_2171, 1.000000013351432e-10f);
          float _2173 = max(_2169, 1.000000013351432e-10f);
          float _2174 = _2172 - _2173;
          float _2175 = max(_2171, 0.009999999776482582f);
          float _2176 = _2174 / _2175;
          float _2177 = _2167 - _2164;
          float _2178 = _2177 * _2167;
          float _2179 = _2164 - _2161;
          float _2180 = _2179 * _2164;
          float _2181 = _2178 + _2180;
          float _2182 = _2161 - _2167;
          float _2183 = _2182 * _2161;
          float _2184 = _2181 + _2183;
          float _2185 = sqrt(_2184);
          float _2186 = _2185 * 1.75f;
          float _2187 = _2164 + _2161;
          float _2188 = _2187 + _2167;
          float _2189 = _2188 + _2186;
          float _2190 = _2189 * 0.3333333432674408f;
          float _2191 = _2176 + -0.4000000059604645f;
          float _2192 = _2191 * 5.0f;
          float _2193 = _2191 * 2.5f;
          float _2194 = abs(_2193);
          float _2195 = 1.0f - _2194;
          float _2196 = max(_2195, 0.0f);
          bool _2197 = (_2192 > 0.0f);
          bool _2198 = (_2192 < 0.0f);
          int _2199 = int(_2197);
          int _2200 = int(_2198);
          int _2201 = _2199 - _2200;
          float _2202 = float(_2201);
          float _2203 = _2196 * _2196;
          float _2204 = 1.0f - _2203;
          float _2205 = _2202 * _2204;
          float _2206 = _2205 + 1.0f;
          float _2207 = _2206 * 0.02500000037252903f;
          bool _2208 = !(_2190 <= 0.0533333346247673f);
          _2216 = _2207;
          do {
            if (_2208) {
              bool _2210 = !(_2190 >= 0.1599999964237213f);
              _2216 = 0.0f;
              if (_2210) {
                float _2212 = 0.23999999463558197f / _2189;
                float _2213 = _2212 + -0.5f;
                float _2214 = _2213 * _2207;
                _2216 = _2214;
              }
            }
            float _2217 = _2216 + 1.0f;
            float _2218 = _2217 * _2161;
            float _2219 = _2217 * _2164;
            float _2220 = _2217 * _2167;
            bool _2221 = (_2218 == _2219);
            bool _2222 = (_2219 == _2220);
            bool _2223 = _2221 && _2222;
            _2252 = 0.0f;
            do {
              if (!_2223) {
                float _2225 = _2218 * 2.0f;
                float _2226 = _2225 - _2219;
                float _2227 = _2226 - _2220;
                float _2228 = _2164 - _2167;
                float _2229 = _2228 * 1.7320507764816284f;
                float _2230 = _2229 * _2217;
                float _2231 = _2230 / _2227;
                float _2232 = atan(_2231);
                float _2233 = _2232 + 3.1415927410125732f;
                float _2234 = _2232 + -3.1415927410125732f;
                bool _2235 = (_2227 < 0.0f);
                bool _2236 = (_2227 == 0.0f);
                bool _2237 = (_2230 >= 0.0f);
                bool _2238 = (_2230 < 0.0f);
                bool _2239 = _2237 && _2235;
                float _2240 = _2239 ? _2233 : _2232;
                bool _2241 = _2238 && _2235;
                float _2242 = _2241 ? _2234 : _2240;
                bool _2243 = _2238 && _2236;
                bool _2244 = _2237 && _2236;
                float _2245 = _2242 * 57.2957763671875f;
                float _2246 = _2243 ? -90.0f : _2245;
                float _2247 = _2244 ? 90.0f : _2246;
                bool _2248 = (_2247 < 0.0f);
                _2252 = _2247;
                if (_2248) {
                  float _2250 = _2247 + 360.0f;
                  _2252 = _2250;
                }
              }
              float _2253 = max(_2252, 0.0f);
              float _2254 = min(_2253, 360.0f);
              bool _2255 = (_2254 < -180.0f);
              do {
                if (_2255) {
                  float _2257 = _2254 + 360.0f;
                  _2263 = _2257;
                } else {
                  bool _2259 = (_2254 > 180.0f);
                  _2263 = _2254;
                  if (_2259) {
                    float _2261 = _2254 + -360.0f;
                    _2263 = _2261;
                  }
                }
                bool _2264 = (_2263 > -67.5f);
                bool _2265 = (_2263 < 67.5f);
                bool _2266 = _2264 && _2265;
                _2302 = 0.0f;
                do {
                  if (_2266) {
                    float _2268 = _2263 + 67.5f;
                    float _2269 = _2268 * 0.029629629105329514f;
                    int _2270 = int(_2269);
                    float _2271 = float(_2270);
                    float _2272 = _2269 - _2271;
                    float _2273 = _2272 * _2272;
                    float _2274 = _2273 * _2272;
                    bool _2275 = (_2270 == 3);
                    if (_2275) {
                      float _2277 = _2274 * 0.1666666716337204f;
                      float _2278 = _2273 * 0.5f;
                      float _2279 = _2272 * 0.5f;
                      float _2280 = 0.1666666716337204f - _2279;
                      float _2281 = _2280 + _2278;
                      float _2282 = _2281 - _2277;
                      _2302 = _2282;
                    } else {
                      bool _2284 = (_2270 == 2);
                      if (_2284) {
                        float _2286 = _2274 * 0.5f;
                        float _2287 = 0.6666666865348816f - _2273;
                        float _2288 = _2287 + _2286;
                        _2302 = _2288;
                      } else {
                        bool _2290 = (_2270 == 1);
                        if (_2290) {
                          float _2292 = _2274 * -0.5f;
                          float _2293 = _2273 + _2272;
                          float _2294 = _2293 * 0.5f;
                          float _2295 = _2292 + 0.1666666716337204f;
                          float _2296 = _2295 + _2294;
                          _2302 = _2296;
                        } else {
                          bool _2298 = (_2270 == 0);
                          float _2299 = _2274 * 0.1666666716337204f;
                          float _2300 = _2298 ? _2299 : 0.0f;
                          _2302 = _2300;
                        }
                      }
                    }
                  }
                  float _2303 = 0.029999999329447746f - _2218;
                  float _2304 = _2176 * 0.27000001072883606f;
                  float _2305 = _2304 * _2303;
                  float _2306 = _2305 * _2302;
                  float _2307 = _2306 + _2218;
                  float _2308 = max(_2307, 0.0f);
                  float _2309 = max(_2219, 0.0f);
                  float _2310 = max(_2220, 0.0f);
                  float _2311 = min(_2308, 65535.0f);
                  float _2312 = min(_2309, 65535.0f);
                  float _2313 = min(_2310, 65535.0f);
                  float _2314 = _2311 * 1.4514392614364624f;
                  float _2315 = mad(-0.2365107536315918f, _2312, _2314);
                  float _2316 = mad(-0.21492856740951538f, _2313, _2315);
                  float _2317 = _2311 * -0.07655377686023712f;
                  float _2318 = mad(1.17622971534729f, _2312, _2317);
                  float _2319 = mad(-0.09967592358589172f, _2313, _2318);
                  float _2320 = _2311 * 0.008316148072481155f;
                  float _2321 = mad(-0.006032449658960104f, _2312, _2320);
                  float _2322 = mad(0.9977163076400757f, _2313, _2321);
                  float _2323 = max(_2316, 0.0f);
                  float _2324 = max(_2319, 0.0f);
                  float _2325 = max(_2322, 0.0f);
                  float _2326 = min(_2323, 65504.0f);
                  float _2327 = min(_2324, 65504.0f);
                  float _2328 = min(_2325, 65504.0f);
                  float _2329 = dot(float3(_2326, _2327, _2328), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2330 = _2326 - _2329;
                  float _2331 = _2327 - _2329;
                  float _2332 = _2328 - _2329;
                  float _2333 = _2330 * 0.9599999785423279f;
                  float _2334 = _2331 * 0.9599999785423279f;
                  float _2335 = _2332 * 0.9599999785423279f;
                  float _2336 = _2333 + _2329;
                  float _2337 = _2334 + _2329;
                  float _2338 = _2335 + _2329;
                  float _2339 = max(_2336, 1.000000013351432e-10f);
                  float _2340 = log2(_2339);
                  float _2341 = _2340 * 0.3010300099849701f;
                  float _2342 = log2(_2128);
                  float _2343 = _2342 * 0.3010300099849701f;
                  bool _2344 = !(_2341 <= _2343);
                  do {
                    if (!_2344) {
                      float _2346 = log2(_2129);
                      float _2347 = _2346 * 0.3010300099849701f;
                      _2412 = _2347;
                    } else {
                      bool _2349 = (_2341 > _2343);
                      float _2350 = log2(_2126);
                      float _2351 = _2350 * 0.3010300099849701f;
                      bool _2352 = (_2341 < _2351);
                      bool _2353 = _2349 && _2352;
                      if (_2353) {
                        float _2355 = _2340 - _2342;
                        float _2356 = _2355 * 0.9030900001525879f;
                        float _2357 = _2350 - _2342;
                        float _2358 = _2357 * 0.3010300099849701f;
                        float _2359 = _2356 / _2358;
                        int _2360 = int(_2359);
                        float _2361 = float(_2360);
                        float _2362 = _2359 - _2361;
                        float _2364 = _15[_2360];
                        int _2365 = _2360 + 1;
                        float _2367 = _15[_2365];
                        int _2368 = _2360 + 2;
                        float _2370 = _15[_2368];
                        float _2371 = _2362 * _2362;
                        float _2372 = _2364 * 0.5f;
                        float _2373 = mad(_2367, -1.0f, _2372);
                        float _2374 = mad(_2370, 0.5f, _2373);
                        float _2375 = _2367 - _2364;
                        float _2376 = mad(_2367, 0.5f, _2372);
                        float _2377 = dot(float3(_2371, _2362, 1.0f), float3(_2374, _2375, _2376));
                        _2412 = _2377;
                      } else {
                        bool _2379 = !(_2341 >= _2351);
                        do {
                          if (!_2379) {
                            float _2381 = log2(_2130);
                            float _2382 = _2381 * 0.3010300099849701f;
                            bool _2383 = (_2341 < _2382);
                            if (_2383) {
                              float _2385 = _2340 - _2350;
                              float _2386 = _2385 * 0.9030900001525879f;
                              float _2387 = _2381 - _2350;
                              float _2388 = _2387 * 0.3010300099849701f;
                              float _2389 = _2386 / _2388;
                              int _2390 = int(_2389);
                              float _2391 = float(_2390);
                              float _2392 = _2389 - _2391;
                              float _2394 = _16[_2390];
                              int _2395 = _2390 + 1;
                              float _2397 = _16[_2395];
                              int _2398 = _2390 + 2;
                              float _2400 = _16[_2398];
                              float _2401 = _2392 * _2392;
                              float _2402 = _2394 * 0.5f;
                              float _2403 = mad(_2397, -1.0f, _2402);
                              float _2404 = mad(_2400, 0.5f, _2403);
                              float _2405 = _2397 - _2394;
                              float _2406 = mad(_2397, 0.5f, _2402);
                              float _2407 = dot(float3(_2401, _2392, 1.0f), float3(_2404, _2405, _2406));
                              _2412 = _2407;
                              break;
                            }
                          }
                          float _2409 = log2(_2131);
                          float _2410 = _2409 * 0.3010300099849701f;
                          _2412 = _2410;
                        } while (false);
                      }
                    }
                    float _2413 = _2412 * 3.321928024291992f;
                    float _2414 = exp2(_2413);
                    float _2415 = max(_2337, 1.000000013351432e-10f);
                    float _2416 = log2(_2415);
                    float _2417 = _2416 * 0.3010300099849701f;
                    bool _2418 = !(_2417 <= _2343);
                    do {
                      if (!_2418) {
                        float _2420 = log2(_2129);
                        float _2421 = _2420 * 0.3010300099849701f;
                        _2486 = _2421;
                      } else {
                        bool _2423 = (_2417 > _2343);
                        float _2424 = log2(_2126);
                        float _2425 = _2424 * 0.3010300099849701f;
                        bool _2426 = (_2417 < _2425);
                        bool _2427 = _2423 && _2426;
                        if (_2427) {
                          float _2429 = _2416 - _2342;
                          float _2430 = _2429 * 0.9030900001525879f;
                          float _2431 = _2424 - _2342;
                          float _2432 = _2431 * 0.3010300099849701f;
                          float _2433 = _2430 / _2432;
                          int _2434 = int(_2433);
                          float _2435 = float(_2434);
                          float _2436 = _2433 - _2435;
                          float _2438 = _15[_2434];
                          int _2439 = _2434 + 1;
                          float _2441 = _15[_2439];
                          int _2442 = _2434 + 2;
                          float _2444 = _15[_2442];
                          float _2445 = _2436 * _2436;
                          float _2446 = _2438 * 0.5f;
                          float _2447 = mad(_2441, -1.0f, _2446);
                          float _2448 = mad(_2444, 0.5f, _2447);
                          float _2449 = _2441 - _2438;
                          float _2450 = mad(_2441, 0.5f, _2446);
                          float _2451 = dot(float3(_2445, _2436, 1.0f), float3(_2448, _2449, _2450));
                          _2486 = _2451;
                        } else {
                          bool _2453 = !(_2417 >= _2425);
                          do {
                            if (!_2453) {
                              float _2455 = log2(_2130);
                              float _2456 = _2455 * 0.3010300099849701f;
                              bool _2457 = (_2417 < _2456);
                              if (_2457) {
                                float _2459 = _2416 - _2424;
                                float _2460 = _2459 * 0.9030900001525879f;
                                float _2461 = _2455 - _2424;
                                float _2462 = _2461 * 0.3010300099849701f;
                                float _2463 = _2460 / _2462;
                                int _2464 = int(_2463);
                                float _2465 = float(_2464);
                                float _2466 = _2463 - _2465;
                                float _2468 = _16[_2464];
                                int _2469 = _2464 + 1;
                                float _2471 = _16[_2469];
                                int _2472 = _2464 + 2;
                                float _2474 = _16[_2472];
                                float _2475 = _2466 * _2466;
                                float _2476 = _2468 * 0.5f;
                                float _2477 = mad(_2471, -1.0f, _2476);
                                float _2478 = mad(_2474, 0.5f, _2477);
                                float _2479 = _2471 - _2468;
                                float _2480 = mad(_2471, 0.5f, _2476);
                                float _2481 = dot(float3(_2475, _2466, 1.0f), float3(_2478, _2479, _2480));
                                _2486 = _2481;
                                break;
                              }
                            }
                            float _2483 = log2(_2131);
                            float _2484 = _2483 * 0.3010300099849701f;
                            _2486 = _2484;
                          } while (false);
                        }
                      }
                      float _2487 = _2486 * 3.321928024291992f;
                      float _2488 = exp2(_2487);
                      float _2489 = max(_2338, 1.000000013351432e-10f);
                      float _2490 = log2(_2489);
                      float _2491 = _2490 * 0.3010300099849701f;
                      bool _2492 = !(_2491 <= _2343);
                      do {
                        if (!_2492) {
                          float _2494 = log2(_2129);
                          float _2495 = _2494 * 0.3010300099849701f;
                          _2560 = _2495;
                        } else {
                          bool _2497 = (_2491 > _2343);
                          float _2498 = log2(_2126);
                          float _2499 = _2498 * 0.3010300099849701f;
                          bool _2500 = (_2491 < _2499);
                          bool _2501 = _2497 && _2500;
                          if (_2501) {
                            float _2503 = _2490 - _2342;
                            float _2504 = _2503 * 0.9030900001525879f;
                            float _2505 = _2498 - _2342;
                            float _2506 = _2505 * 0.3010300099849701f;
                            float _2507 = _2504 / _2506;
                            int _2508 = int(_2507);
                            float _2509 = float(_2508);
                            float _2510 = _2507 - _2509;
                            float _2512 = _15[_2508];
                            int _2513 = _2508 + 1;
                            float _2515 = _15[_2513];
                            int _2516 = _2508 + 2;
                            float _2518 = _15[_2516];
                            float _2519 = _2510 * _2510;
                            float _2520 = _2512 * 0.5f;
                            float _2521 = mad(_2515, -1.0f, _2520);
                            float _2522 = mad(_2518, 0.5f, _2521);
                            float _2523 = _2515 - _2512;
                            float _2524 = mad(_2515, 0.5f, _2520);
                            float _2525 = dot(float3(_2519, _2510, 1.0f), float3(_2522, _2523, _2524));
                            _2560 = _2525;
                          } else {
                            bool _2527 = !(_2491 >= _2499);
                            do {
                              if (!_2527) {
                                float _2529 = log2(_2130);
                                float _2530 = _2529 * 0.3010300099849701f;
                                bool _2531 = (_2491 < _2530);
                                if (_2531) {
                                  float _2533 = _2490 - _2498;
                                  float _2534 = _2533 * 0.9030900001525879f;
                                  float _2535 = _2529 - _2498;
                                  float _2536 = _2535 * 0.3010300099849701f;
                                  float _2537 = _2534 / _2536;
                                  int _2538 = int(_2537);
                                  float _2539 = float(_2538);
                                  float _2540 = _2537 - _2539;
                                  float _2542 = _16[_2538];
                                  int _2543 = _2538 + 1;
                                  float _2545 = _16[_2543];
                                  int _2546 = _2538 + 2;
                                  float _2548 = _16[_2546];
                                  float _2549 = _2540 * _2540;
                                  float _2550 = _2542 * 0.5f;
                                  float _2551 = mad(_2545, -1.0f, _2550);
                                  float _2552 = mad(_2548, 0.5f, _2551);
                                  float _2553 = _2545 - _2542;
                                  float _2554 = mad(_2545, 0.5f, _2550);
                                  float _2555 = dot(float3(_2549, _2540, 1.0f), float3(_2552, _2553, _2554));
                                  _2560 = _2555;
                                  break;
                                }
                              }
                              float _2557 = log2(_2131);
                              float _2558 = _2557 * 0.3010300099849701f;
                              _2560 = _2558;
                            } while (false);
                          }
                        }
                        float _2561 = _2560 * 3.321928024291992f;
                        float _2562 = exp2(_2561);
                        float _2563 = _2414 - _2129;
                        float _2564 = _2131 - _2129;
                        float _2565 = _2563 / _2564;
                        float _2566 = _2488 - _2129;
                        float _2567 = _2566 / _2564;
                        float _2568 = _2562 - _2129;
                        float _2569 = _2568 / _2564;
                        float _2570 = _2565 * 0.6624541878700256f;
                        float _2571 = mad(0.13400420546531677f, _2567, _2570);
                        float _2572 = mad(0.15618768334388733f, _2569, _2571);
                        float _2573 = _2565 * 0.2722287178039551f;
                        float _2574 = mad(0.6740817427635193f, _2567, _2573);
                        float _2575 = mad(0.053689517080783844f, _2569, _2574);
                        float _2576 = _2565 * -0.005574649665504694f;
                        float _2577 = mad(0.00406073359772563f, _2567, _2576);
                        float _2578 = mad(1.0103391408920288f, _2569, _2577);
                        float _2579 = _2572 * 1.6410233974456787f;
                        float _2580 = mad(-0.32480329275131226f, _2575, _2579);
                        float _2581 = mad(-0.23642469942569733f, _2578, _2580);
                        float _2582 = _2572 * -0.663662850856781f;
                        float _2583 = mad(1.6153316497802734f, _2575, _2582);
                        float _2584 = mad(0.016756348311901093f, _2578, _2583);
                        float _2585 = _2572 * 0.011721894145011902f;
                        float _2586 = mad(-0.008284442126750946f, _2575, _2585);
                        float _2587 = mad(0.9883948564529419f, _2578, _2586);
                        float _2588 = max(_2581, 0.0f);
                        float _2589 = max(_2584, 0.0f);
                        float _2590 = max(_2587, 0.0f);
                        float _2591 = min(_2588, 1.0f);
                        float _2592 = min(_2589, 1.0f);
                        float _2593 = min(_2590, 1.0f);
                        float _2594 = _2591 * 0.6624541878700256f;
                        float _2595 = mad(0.13400420546531677f, _2592, _2594);
                        float _2596 = mad(0.15618768334388733f, _2593, _2595);
                        float _2597 = _2591 * 0.2722287178039551f;
                        float _2598 = mad(0.6740817427635193f, _2592, _2597);
                        float _2599 = mad(0.053689517080783844f, _2593, _2598);
                        float _2600 = _2591 * -0.005574649665504694f;
                        float _2601 = mad(0.00406073359772563f, _2592, _2600);
                        float _2602 = mad(1.0103391408920288f, _2593, _2601);
                        float _2603 = _2596 * 1.6410233974456787f;
                        float _2604 = mad(-0.32480329275131226f, _2599, _2603);
                        float _2605 = mad(-0.23642469942569733f, _2602, _2604);
                        float _2606 = _2596 * -0.663662850856781f;
                        float _2607 = mad(1.6153316497802734f, _2599, _2606);
                        float _2608 = mad(0.016756348311901093f, _2602, _2607);
                        float _2609 = _2596 * 0.011721894145011902f;
                        float _2610 = mad(-0.008284442126750946f, _2599, _2609);
                        float _2611 = mad(0.9883948564529419f, _2602, _2610);
                        float _2612 = max(_2605, 0.0f);
                        float _2613 = max(_2608, 0.0f);
                        float _2614 = max(_2611, 0.0f);
                        float _2615 = min(_2612, 65535.0f);
                        float _2616 = min(_2613, 65535.0f);
                        float _2617 = min(_2614, 65535.0f);
                        float _2618 = _2615 * _2131;
                        float _2619 = _2616 * _2131;
                        float _2620 = _2617 * _2131;
                        float _2621 = max(_2618, 0.0f);
                        float _2622 = max(_2619, 0.0f);
                        float _2623 = max(_2620, 0.0f);
                        float _2624 = min(_2621, 65535.0f);
                        float _2625 = min(_2622, 65535.0f);
                        float _2626 = min(_2623, 65535.0f);
                        bool _2627 = (_1396 == 6);
                        _2639 = _2624;
                        _2640 = _2625;
                        _2641 = _2626;
                        do {
                          if (!_2627) {
                            float _2629 = _2624 * _53;
                            float _2630 = mad(_54, _2625, _2629);
                            float _2631 = mad(_55, _2626, _2630);
                            float _2632 = _2624 * _56;
                            float _2633 = mad(_57, _2625, _2632);
                            float _2634 = mad(_58, _2626, _2633);
                            float _2635 = _2624 * _59;
                            float _2636 = mad(_60, _2625, _2635);
                            float _2637 = mad(_61, _2626, _2636);
                            _2639 = _2631;
                            _2640 = _2634;
                            _2641 = _2637;
                          }
                          float _2642 = _2639 * 9.999999747378752e-05f;
                          float _2643 = _2640 * 9.999999747378752e-05f;
                          float _2644 = _2641 * 9.999999747378752e-05f;
                          float _2645 = log2(_2642);
                          float _2646 = log2(_2643);
                          float _2647 = log2(_2644);
                          float _2648 = _2645 * 0.1593017578125f;
                          float _2649 = _2646 * 0.1593017578125f;
                          float _2650 = _2647 * 0.1593017578125f;
                          float _2651 = exp2(_2648);
                          float _2652 = exp2(_2649);
                          float _2653 = exp2(_2650);
                          float _2654 = _2651 * 18.8515625f;
                          float _2655 = _2652 * 18.8515625f;
                          float _2656 = _2653 * 18.8515625f;
                          float _2657 = _2654 + 0.8359375f;
                          float _2658 = _2655 + 0.8359375f;
                          float _2659 = _2656 + 0.8359375f;
                          float _2660 = _2651 * 18.6875f;
                          float _2661 = _2652 * 18.6875f;
                          float _2662 = _2653 * 18.6875f;
                          float _2663 = _2660 + 1.0f;
                          float _2664 = _2661 + 1.0f;
                          float _2665 = _2662 + 1.0f;
                          float _2666 = 1.0f / _2663;
                          float _2667 = 1.0f / _2664;
                          float _2668 = 1.0f / _2665;
                          float _2669 = _2666 * _2657;
                          float _2670 = _2667 * _2658;
                          float _2671 = _2668 * _2659;
                          float _2672 = log2(_2669);
                          float _2673 = log2(_2670);
                          float _2674 = log2(_2671);
                          float _2675 = _2672 * 78.84375f;
                          float _2676 = _2673 * 78.84375f;
                          float _2677 = _2674 * 78.84375f;
                          float _2678 = exp2(_2675);
                          float _2679 = exp2(_2676);
                          float _2680 = exp2(_2677);
                          _2818 = _2678;
                          _2819 = _2679;
                          _2820 = _2680;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2682 = (_1396 == 7);
          if (_2682) {
            float _2685 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2686 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2687 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2689 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2690 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2691 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2693 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2694 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2695 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2696 = _2685 * _1378;
            float _2697 = mad(_2686, _1379, _2696);
            float _2698 = mad(_2687, _1380, _2697);
            float _2699 = _2689 * _1378;
            float _2700 = mad(_2690, _1379, _2699);
            float _2701 = mad(_2691, _1380, _2700);
            float _2702 = _2693 * _1378;
            float _2703 = mad(_2694, _1379, _2702);
            float _2704 = mad(_2695, _1380, _2703);
            float _2705 = _2698 * _53;
            float _2706 = mad(_54, _2701, _2705);
            float _2707 = mad(_55, _2704, _2706);
            float _2708 = _2698 * _56;
            float _2709 = mad(_57, _2701, _2708);
            float _2710 = mad(_58, _2704, _2709);
            float _2711 = _2698 * _59;
            float _2712 = mad(_60, _2701, _2711);
            float _2713 = mad(_61, _2704, _2712);
            float _2714 = _2707 * 9.999999747378752e-05f;
            float _2715 = _2710 * 9.999999747378752e-05f;
            float _2716 = _2713 * 9.999999747378752e-05f;
            float _2717 = log2(_2714);
            float _2718 = log2(_2715);
            float _2719 = log2(_2716);
            float _2720 = _2717 * 0.1593017578125f;
            float _2721 = _2718 * 0.1593017578125f;
            float _2722 = _2719 * 0.1593017578125f;
            float _2723 = exp2(_2720);
            float _2724 = exp2(_2721);
            float _2725 = exp2(_2722);
            float _2726 = _2723 * 18.8515625f;
            float _2727 = _2724 * 18.8515625f;
            float _2728 = _2725 * 18.8515625f;
            float _2729 = _2726 + 0.8359375f;
            float _2730 = _2727 + 0.8359375f;
            float _2731 = _2728 + 0.8359375f;
            float _2732 = _2723 * 18.6875f;
            float _2733 = _2724 * 18.6875f;
            float _2734 = _2725 * 18.6875f;
            float _2735 = _2732 + 1.0f;
            float _2736 = _2733 + 1.0f;
            float _2737 = _2734 + 1.0f;
            float _2738 = 1.0f / _2735;
            float _2739 = 1.0f / _2736;
            float _2740 = 1.0f / _2737;
            float _2741 = _2738 * _2729;
            float _2742 = _2739 * _2730;
            float _2743 = _2740 * _2731;
            float _2744 = log2(_2741);
            float _2745 = log2(_2742);
            float _2746 = log2(_2743);
            float _2747 = _2744 * 78.84375f;
            float _2748 = _2745 * 78.84375f;
            float _2749 = _2746 * 78.84375f;
            float _2750 = exp2(_2747);
            float _2751 = exp2(_2748);
            float _2752 = exp2(_2749);
            _2818 = _2750;
            _2819 = _2751;
            _2820 = _2752;
          } else {
            bool _2754 = (_1396 == 8);
            _2818 = _1378;
            _2819 = _1379;
            _2820 = _1380;
            if (!_2754) {
              bool _2756 = (_1396 == 9);
              float _2758 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2759 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2760 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2762 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2763 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2764 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2766 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2767 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2768 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2756) {
                float _2770 = _2758 * _1366;
                float _2771 = mad(_2759, _1367, _2770);
                float _2772 = mad(_2760, _1368, _2771);
                float _2773 = _2762 * _1366;
                float _2774 = mad(_2763, _1367, _2773);
                float _2775 = mad(_2764, _1368, _2774);
                float _2776 = _2766 * _1366;
                float _2777 = mad(_2767, _1367, _2776);
                float _2778 = mad(_2768, _1368, _2777);
                float _2779 = _2772 * _53;
                float _2780 = mad(_54, _2775, _2779);
                float _2781 = mad(_55, _2778, _2780);
                float _2782 = _2772 * _56;
                float _2783 = mad(_57, _2775, _2782);
                float _2784 = mad(_58, _2778, _2783);
                float _2785 = _2772 * _59;
                float _2786 = mad(_60, _2775, _2785);
                float _2787 = mad(_61, _2778, _2786);
                _2818 = _2781;
                _2819 = _2784;
                _2820 = _2787;
              } else {
                float _2789 = _2758 * _1392;
                float _2790 = mad(_2759, _1393, _2789);
                float _2791 = mad(_2760, _1394, _2790);
                float _2792 = _2762 * _1392;
                float _2793 = mad(_2763, _1393, _2792);
                float _2794 = mad(_2764, _1394, _2793);
                float _2795 = _2766 * _1392;
                float _2796 = mad(_2767, _1393, _2795);
                float _2797 = mad(_2768, _1394, _2796);
                float _2798 = _2791 * _53;
                float _2799 = mad(_54, _2794, _2798);
                float _2800 = mad(_55, _2797, _2799);
                float _2801 = _2791 * _56;
                float _2802 = mad(_57, _2794, _2801);
                float _2803 = mad(_58, _2797, _2802);
                float _2804 = _2791 * _59;
                float _2805 = mad(_60, _2794, _2804);
                float _2806 = mad(_61, _2797, _2805);
                float _2807 = _RootShaderParameters_040z;
                float _2808 = log2(_2800);
                float _2809 = log2(_2803);
                float _2810 = log2(_2806);
                float _2811 = _2808 * _2807;
                float _2812 = _2809 * _2807;
                float _2813 = _2810 * _2807;
                float _2814 = exp2(_2811);
                float _2815 = exp2(_2812);
                float _2816 = exp2(_2813);
                _2818 = _2814;
                _2819 = _2815;
                _2820 = _2816;
              }
            }
          }
        }
      }
    }
  }
  float _2821 = _2818 * 0.9523810148239136f;
  float _2822 = _2819 * 0.9523810148239136f;
  float _2823 = _2820 * 0.9523810148239136f;
  // _2824 = _1;
  RWOutputTexture[int3(_12, _13, _14)] = float4(_2821, _2822, _2823, 0.0f);
}
