#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_1;
  // SamplerState _3 = Samplers_1;
  // cbuffer _4 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _5 = _RootShaderParameters;
  // _6 = _4;
  // _7 = _5;
  float _11[6];
  float _12[6];
  float _13[6];
  float _14[6];
  float _15 = float(_8);
  float _16 = float(_9);
  float _17 = _15 + 0.5f;
  float _18 = _16 + 0.5f;
  float _20 = _RootShaderParameters_042x;
  float _21 = _RootShaderParameters_042y;
  float _22 = _20 * _17;
  float _23 = _21 * _18;
  float _24 = _22 + -0.015625f;
  float _25 = _23 + -0.015625f;
  float _26 = _24 * 1.0322580337524414f;
  float _27 = _25 * 1.0322580337524414f;
  float _28 = float(_10);
  float _29 = _28 * 0.032258063554763794f;
  uint _31 = _RootShaderParameters_041x;
  bool _32 = (_31 == 1);
  float _49 = 1.379158854484558f;
  float _50 = -0.3088507056236267f;
  float _51 = -0.07034677267074585f;
  float _52 = -0.06933528929948807f;
  float _53 = 1.0822921991348267f;
  float _54 = -0.012962047010660172f;
  float _55 = -0.002159259282052517f;
  float _56 = -0.045465391129255295f;
  float _57 = 1.0477596521377563f;
  float _115;
  float _116;
  float _117;
  float _641;
  float _677;
  float _688;
  float _752;
  float _931;
  float _942;
  float _953;
  float _1124;
  float _1125;
  float _1126;
  float _1137;
  float _1148;
  float _1330;
  float _1366;
  float _1377;
  float _1416;
  float _1526;
  float _1600;
  float _1674;
  float _1753;
  float _1754;
  float _1755;
  float _1906;
  float _1942;
  float _1953;
  float _1992;
  float _2102;
  float _2176;
  float _2250;
  float _2329;
  float _2330;
  float _2331;
  float _2508;
  float _2509;
  float _2510;
  if (!_32) {
    bool _34 = (_31 == 2);
    _49 = 1.02579927444458f;
    _50 = -0.020052503794431686f;
    _51 = -0.0057713985443115234f;
    _52 = -0.0022350111976265907f;
    _53 = 1.0045825242996216f;
    _54 = -0.002352306619286537f;
    _55 = -0.005014004185795784f;
    _56 = -0.025293385609984398f;
    _57 = 1.0304402112960815f;
    if (!_34) {
      bool _36 = (_31 == 3);
      _49 = 0.6954522132873535f;
      _50 = 0.14067870378494263f;
      _51 = 0.16386906802654266f;
      _52 = 0.044794563204050064f;
      _53 = 0.8596711158752441f;
      _54 = 0.0955343171954155f;
      _55 = -0.005525882821530104f;
      _56 = 0.004025210160762072f;
      _57 = 1.0015007257461548f;
      if (!_36) {
        bool _38 = (_31 == 4);
        float _39 = _38 ? 1.0f : 1.7050515413284302f;
        float _40 = _38 ? 0.0f : -0.6217905879020691f;
        float _41 = _38 ? 0.0f : -0.0832584798336029f;
        float _42 = _38 ? 0.0f : -0.13025718927383423f;
        float _43 = _38 ? 1.0f : 1.1408027410507202f;
        float _44 = _38 ? 0.0f : -0.010548528283834457f;
        float _45 = _38 ? 0.0f : -0.024003278464078903f;
        float _46 = _38 ? 0.0f : -0.1289687603712082f;
        float _47 = _38 ? 1.0f : 1.152971863746643f;
        _49 = _39;
        _50 = _40;
        _51 = _41;
        _52 = _42;
        _53 = _43;
        _54 = _44;
        _55 = _45;
        _56 = _46;
        _57 = _47;
      }
    }
  }
  uint _59 = _RootShaderParameters_040w;
  bool _60 = (_59 > 2);
  if (_60) {
    float _62 = log2(_26);
    float _63 = log2(_27);
    float _64 = log2(_29);
    float _65 = _62 * 0.012683313339948654f;
    float _66 = _63 * 0.012683313339948654f;
    float _67 = _64 * 0.012683313339948654f;
    float _68 = exp2(_65);
    float _69 = exp2(_66);
    float _70 = exp2(_67);
    float _71 = _68 + -0.8359375f;
    float _72 = _69 + -0.8359375f;
    float _73 = _70 + -0.8359375f;
    float _74 = max(0.0f, _71);
    float _75 = max(0.0f, _72);
    float _76 = max(0.0f, _73);
    float _77 = _68 * 18.6875f;
    float _78 = _69 * 18.6875f;
    float _79 = _70 * 18.6875f;
    float _80 = 18.8515625f - _77;
    float _81 = 18.8515625f - _78;
    float _82 = 18.8515625f - _79;
    float _83 = _74 / _80;
    float _84 = _75 / _81;
    float _85 = _76 / _82;
    float _86 = log2(_83);
    float _87 = log2(_84);
    float _88 = log2(_85);
    float _89 = _86 * 6.277394771575928f;
    float _90 = _87 * 6.277394771575928f;
    float _91 = _88 * 6.277394771575928f;
    float _92 = exp2(_89);
    float _93 = exp2(_90);
    float _94 = exp2(_91);
    float _95 = _92 * 100.0f;
    float _96 = _93 * 100.0f;
    float _97 = _94 * 100.0f;
    _115 = _95;
    _116 = _96;
    _117 = _97;
  } else {
    float _99 = _24 * 14.45161247253418f;
    float _100 = _99 + -6.07624626159668f;
    float _101 = _25 * 14.45161247253418f;
    float _102 = _101 + -6.07624626159668f;
    float _103 = _28 * 0.4516128897666931f;
    float _104 = _103 + -6.07624626159668f;
    float _105 = exp2(_100);
    float _106 = exp2(_102);
    float _107 = exp2(_104);
    float _108 = _105 * 0.18000000715255737f;
    float _109 = _106 * 0.18000000715255737f;
    float _110 = _107 * 0.18000000715255737f;
    float _111 = _108 + -0.002667719265446067f;
    float _112 = _109 + -0.002667719265446067f;
    float _113 = _110 + -0.002667719265446067f;
    _115 = _111;
    _116 = _112;
    _117 = _113;
  }
  float3 input_color = float3(_115, _116, _117);  // CustomEdit

  float _119 = UniformBufferConstants_WorkingColorSpace_008x;
  float _120 = UniformBufferConstants_WorkingColorSpace_008y;
  float _121 = UniformBufferConstants_WorkingColorSpace_008z;
  float _123 = UniformBufferConstants_WorkingColorSpace_009x;
  float _124 = UniformBufferConstants_WorkingColorSpace_009y;
  float _125 = UniformBufferConstants_WorkingColorSpace_009z;
  float _127 = UniformBufferConstants_WorkingColorSpace_010x;
  float _128 = UniformBufferConstants_WorkingColorSpace_010y;
  float _129 = UniformBufferConstants_WorkingColorSpace_010z;
  float _130 = _119 * _115;
  float _131 = mad(_120, _116, _130);
  float _132 = mad(_121, _117, _131);
  float _133 = _123 * _115;
  float _134 = mad(_124, _116, _133);
  float _135 = mad(_125, _117, _134);
  float _136 = _127 * _115;
  float _137 = mad(_128, _116, _136);
  float _138 = mad(_129, _117, _137);
  float _139 = dot(float3(_132, _135, _138), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _140 = _132 / _139;
  float _141 = _135 / _139;
  float _142 = _138 / _139;
  float _143 = _140 + -1.0f;
  float _144 = _141 + -1.0f;
  float _145 = _142 + -1.0f;
  float _146 = dot(float3(_143, _144, _145), float3(_143, _144, _145));
  float _147 = _146 * -4.0f;
  float _148 = exp2(_147);
  float _149 = 1.0f - _148;
  float _151 = _RootShaderParameters_036z;
  float _152 = _139 * _139;
  float _153 = _152 * -4.0f;
  float _154 = _153 * _151;
  float _155 = exp2(_154);
  float _156 = 1.0f - _155;
  float _157 = _156 * _149;
  float _158 = _132 * 1.370412826538086f;
  float _159 = mad(-0.32929131388664246f, _135, _158);
  float _160 = mad(-0.06368283927440643f, _138, _159);
  float _161 = _132 * -0.08343426138162613f;
  float _162 = mad(1.0970908403396606f, _135, _161);
  float _163 = mad(-0.010861567221581936f, _138, _162);
  float _164 = _132 * -0.02579325996339321f;
  float _165 = mad(-0.09862564504146576f, _135, _164);
  float _166 = mad(1.203694462776184f, _138, _165);
  float _167 = _160 - _132;
  float _168 = _163 - _135;
  float _169 = _166 - _138;
  float _170 = _167 * _157;
  float _171 = _168 * _157;
  float _172 = _169 * _157;
  float _173 = _170 + _132;
  float _174 = _171 + _135;
  float _175 = _172 + _138;
  float _176 = dot(float3(_173, _174, _175), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _178 = _RootShaderParameters_024x;
  float _179 = _RootShaderParameters_024y;
  float _180 = _RootShaderParameters_024z;
  float _181 = _RootShaderParameters_024w;
  float _183 = _RootShaderParameters_019x;
  float _184 = _RootShaderParameters_019y;
  float _185 = _RootShaderParameters_019z;
  float _186 = _RootShaderParameters_019w;
  float _187 = _183 + _178;
  float _188 = _184 + _179;
  float _189 = _185 + _180;
  float _190 = _186 + _181;
  float _192 = _RootShaderParameters_023x;
  float _193 = _RootShaderParameters_023y;
  float _194 = _RootShaderParameters_023z;
  float _195 = _RootShaderParameters_023w;
  float _197 = _RootShaderParameters_018x;
  float _198 = _RootShaderParameters_018y;
  float _199 = _RootShaderParameters_018z;
  float _200 = _RootShaderParameters_018w;
  float _201 = _197 * _192;
  float _202 = _198 * _193;
  float _203 = _199 * _194;
  float _204 = _200 * _195;
  float _206 = _RootShaderParameters_022x;
  float _207 = _RootShaderParameters_022y;
  float _208 = _RootShaderParameters_022z;
  float _209 = _RootShaderParameters_022w;
  float _211 = _RootShaderParameters_017x;
  float _212 = _RootShaderParameters_017y;
  float _213 = _RootShaderParameters_017z;
  float _214 = _RootShaderParameters_017w;
  float _215 = _211 * _206;
  float _216 = _212 * _207;
  float _217 = _213 * _208;
  float _218 = _214 * _209;
  float _220 = _RootShaderParameters_021x;
  float _221 = _RootShaderParameters_021y;
  float _222 = _RootShaderParameters_021z;
  float _223 = _RootShaderParameters_021w;
  float _225 = _RootShaderParameters_016x;
  float _226 = _RootShaderParameters_016y;
  float _227 = _RootShaderParameters_016z;
  float _228 = _RootShaderParameters_016w;
  float _229 = _225 * _220;
  float _230 = _226 * _221;
  float _231 = _227 * _222;
  float _232 = _228 * _223;
  float _234 = _RootShaderParameters_020x;
  float _235 = _RootShaderParameters_020y;
  float _236 = _RootShaderParameters_020z;
  float _237 = _RootShaderParameters_020w;
  float _239 = _RootShaderParameters_015x;
  float _240 = _RootShaderParameters_015y;
  float _241 = _RootShaderParameters_015z;
  float _242 = _RootShaderParameters_015w;
  float _243 = _239 * _234;
  float _244 = _240 * _235;
  float _245 = _241 * _236;
  float _246 = _242 * _237;
  float _247 = _243 * _246;
  float _248 = _244 * _246;
  float _249 = _245 * _246;
  float _250 = _173 - _176;
  float _251 = _174 - _176;
  float _252 = _175 - _176;
  float _253 = _247 * _250;
  float _254 = _248 * _251;
  float _255 = _249 * _252;
  float _256 = _253 + _176;
  float _257 = _254 + _176;
  float _258 = _255 + _176;
  float _259 = max(0.0f, _256);
  float _260 = max(0.0f, _257);
  float _261 = max(0.0f, _258);
  float _262 = _229 * _232;
  float _263 = _230 * _232;
  float _264 = _231 * _232;
  float _265 = _259 * 5.55555534362793f;
  float _266 = _260 * 5.55555534362793f;
  float _267 = _261 * 5.55555534362793f;
  float _268 = log2(_265);
  float _269 = log2(_266);
  float _270 = log2(_267);
  float _271 = _262 * _268;
  float _272 = _263 * _269;
  float _273 = _264 * _270;
  float _274 = exp2(_271);
  float _275 = exp2(_272);
  float _276 = exp2(_273);
  float _277 = _274 * 0.18000000715255737f;
  float _278 = _275 * 0.18000000715255737f;
  float _279 = _276 * 0.18000000715255737f;
  float _280 = _215 * _218;
  float _281 = _216 * _218;
  float _282 = _217 * _218;
  float _283 = 1.0f / _280;
  float _284 = 1.0f / _281;
  float _285 = 1.0f / _282;
  float _286 = log2(_277);
  float _287 = log2(_278);
  float _288 = log2(_279);
  float _289 = _286 * _283;
  float _290 = _287 * _284;
  float _291 = _288 * _285;
  float _292 = exp2(_289);
  float _293 = exp2(_290);
  float _294 = exp2(_291);
  float _295 = _201 * _204;
  float _296 = _202 * _204;
  float _297 = _203 * _204;
  float _298 = _295 * _292;
  float _299 = _296 * _293;
  float _300 = _297 * _294;
  float _301 = _187 + _190;
  float _302 = _188 + _190;
  float _303 = _189 + _190;
  float _304 = _301 + _298;
  float _305 = _302 + _299;
  float _306 = _303 + _300;
  float _308 = _RootShaderParameters_035z;
  float _309 = _176 / _308;
  float _310 = saturate(_309);
  float _311 = _310 * 2.0f;
  float _312 = 3.0f - _311;
  float _313 = _310 * _310;
  float _314 = _313 * _312;
  float _315 = 1.0f - _314;
  float _317 = _RootShaderParameters_034x;
  float _318 = _RootShaderParameters_034y;
  float _319 = _RootShaderParameters_034z;
  float _320 = _RootShaderParameters_034w;
  float _321 = _183 + _317;
  float _322 = _184 + _318;
  float _323 = _185 + _319;
  float _324 = _186 + _320;
  float _326 = _RootShaderParameters_033x;
  float _327 = _RootShaderParameters_033y;
  float _328 = _RootShaderParameters_033z;
  float _329 = _RootShaderParameters_033w;
  float _330 = _197 * _326;
  float _331 = _198 * _327;
  float _332 = _199 * _328;
  float _333 = _200 * _329;
  float _335 = _RootShaderParameters_032x;
  float _336 = _RootShaderParameters_032y;
  float _337 = _RootShaderParameters_032z;
  float _338 = _RootShaderParameters_032w;
  float _339 = _211 * _335;
  float _340 = _212 * _336;
  float _341 = _213 * _337;
  float _342 = _214 * _338;
  float _344 = _RootShaderParameters_031x;
  float _345 = _RootShaderParameters_031y;
  float _346 = _RootShaderParameters_031z;
  float _347 = _RootShaderParameters_031w;
  float _348 = _225 * _344;
  float _349 = _226 * _345;
  float _350 = _227 * _346;
  float _351 = _228 * _347;
  float _353 = _RootShaderParameters_030x;
  float _354 = _RootShaderParameters_030y;
  float _355 = _RootShaderParameters_030z;
  float _356 = _RootShaderParameters_030w;
  float _357 = _239 * _353;
  float _358 = _240 * _354;
  float _359 = _241 * _355;
  float _360 = _242 * _356;
  float _361 = _357 * _360;
  float _362 = _358 * _360;
  float _363 = _359 * _360;
  float _364 = _361 * _250;
  float _365 = _362 * _251;
  float _366 = _363 * _252;
  float _367 = _364 + _176;
  float _368 = _365 + _176;
  float _369 = _366 + _176;
  float _370 = max(0.0f, _367);
  float _371 = max(0.0f, _368);
  float _372 = max(0.0f, _369);
  float _373 = _348 * _351;
  float _374 = _349 * _351;
  float _375 = _350 * _351;
  float _376 = _370 * 5.55555534362793f;
  float _377 = _371 * 5.55555534362793f;
  float _378 = _372 * 5.55555534362793f;
  float _379 = log2(_376);
  float _380 = log2(_377);
  float _381 = log2(_378);
  float _382 = _373 * _379;
  float _383 = _374 * _380;
  float _384 = _375 * _381;
  float _385 = exp2(_382);
  float _386 = exp2(_383);
  float _387 = exp2(_384);
  float _388 = _385 * 0.18000000715255737f;
  float _389 = _386 * 0.18000000715255737f;
  float _390 = _387 * 0.18000000715255737f;
  float _391 = _339 * _342;
  float _392 = _340 * _342;
  float _393 = _341 * _342;
  float _394 = 1.0f / _391;
  float _395 = 1.0f / _392;
  float _396 = 1.0f / _393;
  float _397 = log2(_388);
  float _398 = log2(_389);
  float _399 = log2(_390);
  float _400 = _397 * _394;
  float _401 = _398 * _395;
  float _402 = _399 * _396;
  float _403 = exp2(_400);
  float _404 = exp2(_401);
  float _405 = exp2(_402);
  float _406 = _330 * _333;
  float _407 = _331 * _333;
  float _408 = _332 * _333;
  float _409 = _406 * _403;
  float _410 = _407 * _404;
  float _411 = _408 * _405;
  float _412 = _321 + _324;
  float _413 = _322 + _324;
  float _414 = _323 + _324;
  float _415 = _412 + _409;
  float _416 = _413 + _410;
  float _417 = _414 + _411;
  float _418 = _RootShaderParameters_036x;
  float _419 = _RootShaderParameters_035w;
  float _420 = _418 - _419;
  float _421 = _176 - _419;
  float _422 = _421 / _420;
  float _423 = saturate(_422);
  float _424 = _423 * 2.0f;
  float _425 = 3.0f - _424;
  float _426 = _423 * _423;
  float _427 = _426 * _425;
  float _429 = _RootShaderParameters_029x;
  float _430 = _RootShaderParameters_029y;
  float _431 = _RootShaderParameters_029z;
  float _432 = _RootShaderParameters_029w;
  float _433 = _183 + _429;
  float _434 = _184 + _430;
  float _435 = _185 + _431;
  float _436 = _186 + _432;
  float _438 = _RootShaderParameters_028x;
  float _439 = _RootShaderParameters_028y;
  float _440 = _RootShaderParameters_028z;
  float _441 = _RootShaderParameters_028w;
  float _442 = _197 * _438;
  float _443 = _198 * _439;
  float _444 = _199 * _440;
  float _445 = _200 * _441;
  float _447 = _RootShaderParameters_027x;
  float _448 = _RootShaderParameters_027y;
  float _449 = _RootShaderParameters_027z;
  float _450 = _RootShaderParameters_027w;
  float _451 = _211 * _447;
  float _452 = _212 * _448;
  float _453 = _213 * _449;
  float _454 = _214 * _450;
  float _456 = _RootShaderParameters_026x;
  float _457 = _RootShaderParameters_026y;
  float _458 = _RootShaderParameters_026z;
  float _459 = _RootShaderParameters_026w;
  float _460 = _225 * _456;
  float _461 = _226 * _457;
  float _462 = _227 * _458;
  float _463 = _228 * _459;
  float _465 = _RootShaderParameters_025x;
  float _466 = _RootShaderParameters_025y;
  float _467 = _RootShaderParameters_025z;
  float _468 = _RootShaderParameters_025w;
  float _469 = _239 * _465;
  float _470 = _240 * _466;
  float _471 = _241 * _467;
  float _472 = _242 * _468;
  float _473 = _469 * _472;
  float _474 = _470 * _472;
  float _475 = _471 * _472;
  float _476 = _473 * _250;
  float _477 = _474 * _251;
  float _478 = _475 * _252;
  float _479 = _476 + _176;
  float _480 = _477 + _176;
  float _481 = _478 + _176;
  float _482 = max(0.0f, _479);
  float _483 = max(0.0f, _480);
  float _484 = max(0.0f, _481);
  float _485 = _460 * _463;
  float _486 = _461 * _463;
  float _487 = _462 * _463;
  float _488 = _482 * 5.55555534362793f;
  float _489 = _483 * 5.55555534362793f;
  float _490 = _484 * 5.55555534362793f;
  float _491 = log2(_488);
  float _492 = log2(_489);
  float _493 = log2(_490);
  float _494 = _485 * _491;
  float _495 = _486 * _492;
  float _496 = _487 * _493;
  float _497 = exp2(_494);
  float _498 = exp2(_495);
  float _499 = exp2(_496);
  float _500 = _497 * 0.18000000715255737f;
  float _501 = _498 * 0.18000000715255737f;
  float _502 = _499 * 0.18000000715255737f;
  float _503 = _451 * _454;
  float _504 = _452 * _454;
  float _505 = _453 * _454;
  float _506 = 1.0f / _503;
  float _507 = 1.0f / _504;
  float _508 = 1.0f / _505;
  float _509 = log2(_500);
  float _510 = log2(_501);
  float _511 = log2(_502);
  float _512 = _509 * _506;
  float _513 = _510 * _507;
  float _514 = _511 * _508;
  float _515 = exp2(_512);
  float _516 = exp2(_513);
  float _517 = exp2(_514);
  float _518 = _442 * _445;
  float _519 = _443 * _445;
  float _520 = _444 * _445;
  float _521 = _518 * _515;
  float _522 = _519 * _516;
  float _523 = _520 * _517;
  float _524 = _433 + _436;
  float _525 = _434 + _436;
  float _526 = _435 + _436;
  float _527 = _524 + _521;
  float _528 = _525 + _522;
  float _529 = _526 + _523;
  float _530 = _314 - _427;
  float _531 = _315 * _304;
  float _532 = _315 * _305;
  float _533 = _315 * _306;
  float _534 = _527 * _530;
  float _535 = _528 * _530;
  float _536 = _529 * _530;
  float _537 = _427 * _415;
  float _538 = _427 * _416;
  float _539 = _427 * _417;
  float _540 = _537 + _531;
  float _541 = _540 + _534;
  float _542 = _538 + _532;
  float _543 = _542 + _535;
  float _544 = _539 + _533;
  float _545 = _544 + _536;
  float _547 = UniformBufferConstants_WorkingColorSpace_012x;
  float _548 = UniformBufferConstants_WorkingColorSpace_012y;
  float _549 = UniformBufferConstants_WorkingColorSpace_012z;
  float _551 = UniformBufferConstants_WorkingColorSpace_013x;
  float _552 = UniformBufferConstants_WorkingColorSpace_013y;
  float _553 = UniformBufferConstants_WorkingColorSpace_013z;
  float _555 = UniformBufferConstants_WorkingColorSpace_014x;
  float _556 = UniformBufferConstants_WorkingColorSpace_014y;
  float _557 = UniformBufferConstants_WorkingColorSpace_014z;
  float _558 = _541 * _547;
  float _559 = mad(_548, _543, _558);
  float _560 = mad(_549, _545, _559);
  float _561 = _551 * _541;
  float _562 = mad(_552, _543, _561);
  float _563 = mad(_553, _545, _562);
  float _564 = _555 * _541;
  float _565 = mad(_556, _543, _564);
  float _566 = mad(_557, _545, _565);
  float _567 = _RootShaderParameters_036y;
  float _568 = _541 * 0.9386394023895264f;
  float _569 = mad(-4.540197551250458e-09f, _543, _568);
  float _570 = mad(0.061360642313957214f, _545, _569);
  float _571 = _541 * 6.775371730327606e-08f;
  float _572 = mad(0.8307942152023315f, _543, _571);
  float _573 = mad(0.169205904006958f, _545, _572);
  float _574 = _541 * -9.313225746154785e-10f;
  float _575 = mad(-2.3283064365386963e-10f, _543, _574);
  float _576 = _570 - _541;
  float _577 = _573 - _543;
  float _578 = _576 * _567;
  float _579 = _577 * _567;
  float _580 = _575 * _567;
  float _581 = _578 + _541;
  float _582 = _579 + _543;
  float _583 = _580 + _545;
  float3 ap1_graded_color = float3(_581, _582, _583);  // CustomEdit

  float _584 = _581 * 0.6954522132873535f;
  float _585 = mad(0.14067868888378143f, _582, _584);
  float _586 = mad(0.16386905312538147f, _583, _585);
  float _587 = _581 * 0.044794581830501556f;
  float _588 = mad(0.8596711158752441f, _582, _587);
  float _589 = mad(0.0955343246459961f, _583, _588);
  float _590 = _581 * -0.005525882821530104f;
  float _591 = mad(0.004025210160762072f, _582, _590);
  float _592 = mad(1.0015007257461548f, _583, _591);
  float _593 = min(_586, _589);
  float _594 = min(_593, _592);
  float _595 = max(_586, _589);
  float _596 = max(_595, _592);
  float _597 = max(_596, 1.000000013351432e-10f);
  float _598 = max(_594, 1.000000013351432e-10f);
  float _599 = _597 - _598;
  float _600 = max(_596, 0.009999999776482582f);
  float _601 = _599 / _600;
  float _602 = _592 - _589;
  float _603 = _602 * _592;
  float _604 = _589 - _586;
  float _605 = _604 * _589;
  float _606 = _603 + _605;
  float _607 = _586 - _592;
  float _608 = _607 * _586;
  float _609 = _606 + _608;
  float _610 = sqrt(_609);
  float _611 = _610 * 1.75f;
  float _612 = _589 + _586;
  float _613 = _612 + _592;
  float _614 = _613 + _611;
  float _615 = _614 * 0.3333333432674408f;
  float _616 = _601 + -0.4000000059604645f;
  float _617 = _616 * 5.0f;
  float _618 = _616 * 2.5f;
  float _619 = abs(_618);
  float _620 = 1.0f - _619;
  float _621 = max(_620, 0.0f);
  bool _622 = (_617 > 0.0f);
  bool _623 = (_617 < 0.0f);
  int _624 = int(_622);
  int _625 = int(_623);
  int _626 = _624 - _625;
  float _627 = float(_626);
  float _628 = _621 * _621;
  float _629 = 1.0f - _628;
  float _630 = _627 * _629;
  float _631 = _630 + 1.0f;
  float _632 = _631 * 0.02500000037252903f;
  bool _633 = !(_615 <= 0.0533333346247673f);
  _641 = _632;
  if (_633) {
    bool _635 = !(_615 >= 0.1599999964237213f);
    _641 = 0.0f;
    if (_635) {
      float _637 = 0.23999999463558197f / _614;
      float _638 = _637 + -0.5f;
      float _639 = _638 * _632;
      _641 = _639;
    }
  }
  float _642 = _641 + 1.0f;
  float _643 = _642 * _586;
  float _644 = _642 * _589;
  float _645 = _642 * _592;
  bool _646 = (_643 == _644);
  bool _647 = (_644 == _645);
  bool _648 = _646 && _647;
  _677 = 0.0f;
  if (!_648) {
    float _650 = _643 * 2.0f;
    float _651 = _650 - _644;
    float _652 = _651 - _645;
    float _653 = _589 - _592;
    float _654 = _653 * 1.7320507764816284f;
    float _655 = _654 * _642;
    float _656 = _655 / _652;
    float _657 = atan(_656);
    float _658 = _657 + 3.1415927410125732f;
    float _659 = _657 + -3.1415927410125732f;
    bool _660 = (_652 < 0.0f);
    bool _661 = (_652 == 0.0f);
    bool _662 = (_655 >= 0.0f);
    bool _663 = (_655 < 0.0f);
    bool _664 = _662 && _660;
    float _665 = _664 ? _658 : _657;
    bool _666 = _663 && _660;
    float _667 = _666 ? _659 : _665;
    bool _668 = _663 && _661;
    bool _669 = _662 && _661;
    float _670 = _667 * 57.2957763671875f;
    float _671 = _668 ? -90.0f : _670;
    float _672 = _669 ? 90.0f : _671;
    bool _673 = (_672 < 0.0f);
    _677 = _672;
    if (_673) {
      float _675 = _672 + 360.0f;
      _677 = _675;
    }
  }
  float _678 = max(_677, 0.0f);
  float _679 = min(_678, 360.0f);
  bool _680 = (_679 < -180.0f);
  if (_680) {
    float _682 = _679 + 360.0f;
    _688 = _682;
  } else {
    bool _684 = (_679 > 180.0f);
    _688 = _679;
    if (_684) {
      float _686 = _679 + -360.0f;
      _688 = _686;
    }
  }
  float _689 = _688 * 0.014814814552664757f;
  float _690 = abs(_689);
  float _691 = 1.0f - _690;
  float _692 = saturate(_691);
  float _693 = _692 * 2.0f;
  float _694 = 3.0f - _693;
  float _695 = _692 * _692;
  float _696 = _695 * _694;
  float _697 = 0.029999999329447746f - _643;
  float _698 = _601 * 0.18000000715255737f;
  float _699 = _698 * _697;
  float _700 = _696 * _696;
  float _701 = _700 * _699;
  float _702 = _701 + _643;
  float _703 = _702 * 1.4514392614364624f;
  float _704 = mad(-0.2365107536315918f, _644, _703);
  float _705 = mad(-0.21492856740951538f, _645, _704);
  float _706 = _702 * -0.07655377686023712f;
  float _707 = mad(1.17622971534729f, _644, _706);
  float _708 = mad(-0.09967592358589172f, _645, _707);
  float _709 = _702 * 0.008316148072481155f;
  float _710 = mad(-0.006032449658960104f, _644, _709);
  float _711 = mad(0.9977163076400757f, _645, _710);
  float _712 = max(0.0f, _705);
  float _713 = max(0.0f, _708);
  float _714 = max(0.0f, _711);
  float _715 = dot(float3(_712, _713, _714), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _716 = _712 - _715;
  float _717 = _713 - _715;
  float _718 = _714 - _715;
  float _719 = _716 * 0.9599999785423279f;
  float _720 = _717 * 0.9599999785423279f;
  float _721 = _718 * 0.9599999785423279f;
  float _722 = _719 + _715;
  float _723 = _720 + _715;
  float _724 = _721 + _715;

  float3 ap1_aces_colored = float3(_722, _723, _724);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _726 = _RootShaderParameters_037w;
  float _727 = _726 + 1.0f;
  float _728 = _RootShaderParameters_037y;
  float _729 = _727 - _728;
  float _731 = _RootShaderParameters_038x;
  float _732 = _731 + 1.0f;
  float _733 = _RootShaderParameters_037z;
  float _734 = _732 - _733;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _735 = (_728 > 0.800000011920929f);
    float _736 = _RootShaderParameters_037x;
    if (_735) {
      float _738 = 0.8199999928474426f - _728;
      float _739 = _738 / _736;
      float _740 = _739 + -0.7447274923324585f;
      _752 = _740;
    } else {
      float _742 = _726 + 0.18000000715255737f;
      float _743 = _742 / _729;
      float _744 = 2.0f - _743;
      float _745 = _743 / _744;
      float _746 = log2(_745);
      float _747 = _746 * 0.3465735912322998f;
      float _748 = _729 / _736;
      float _749 = _747 * _748;
      float _750 = -0.7447274923324585f - _749;
      _752 = _750;
    }
    float _753 = 1.0f - _728;
    float _754 = _753 / _736;
    float _755 = _754 - _752;
    float _756 = _733 / _736;
    float _757 = _756 - _755;
    float _758 = log2(_722);
    float _759 = log2(_723);
    float _760 = log2(_724);
    float _761 = _758 * 0.3010300099849701f;
    float _762 = _759 * 0.3010300099849701f;
    float _763 = _760 * 0.3010300099849701f;
    float _764 = _761 + _755;
    float _765 = _762 + _755;
    float _766 = _763 + _755;
    float _767 = _736 * _764;
    float _768 = _736 * _765;
    float _769 = _736 * _766;
    float _770 = _729 * 2.0f;
    float _771 = _736 * -2.0f;
    float _772 = _771 / _729;
    float _773 = _761 - _752;
    float _774 = _762 - _752;
    float _775 = _763 - _752;
    float _776 = _773 * 1.4426950216293335f;
    float _777 = _776 * _772;
    float _778 = _774 * 1.4426950216293335f;
    float _779 = _778 * _772;
    float _780 = _775 * 1.4426950216293335f;
    float _781 = _780 * _772;
    float _782 = exp2(_777);
    float _783 = exp2(_779);
    float _784 = exp2(_781);
    float _785 = _782 + 1.0f;
    float _786 = _783 + 1.0f;
    float _787 = _784 + 1.0f;
    float _788 = _770 / _785;
    float _789 = _770 / _786;
    float _790 = _770 / _787;
    float _791 = _788 - _726;
    float _792 = _789 - _726;
    float _793 = _790 - _726;
    float _794 = _734 * 2.0f;
    float _795 = _736 * 2.0f;
    float _796 = _795 / _734;
    float _797 = _761 - _757;
    float _798 = _762 - _757;
    float _799 = _763 - _757;
    float _800 = _797 * 1.4426950216293335f;
    float _801 = _800 * _796;
    float _802 = _798 * 1.4426950216293335f;
    float _803 = _802 * _796;
    float _804 = _799 * 1.4426950216293335f;
    float _805 = _804 * _796;
    float _806 = exp2(_801);
    float _807 = exp2(_803);
    float _808 = exp2(_805);
    float _809 = _806 + 1.0f;
    float _810 = _807 + 1.0f;
    float _811 = _808 + 1.0f;
    float _812 = _794 / _809;
    float _813 = _794 / _810;
    float _814 = _794 / _811;
    float _815 = _732 - _812;
    float _816 = _732 - _813;
    float _817 = _732 - _814;
    bool _818 = (_761 < _752);
    bool _819 = (_762 < _752);
    bool _820 = (_763 < _752);
    float _821 = _818 ? _791 : _767;
    float _822 = _819 ? _792 : _768;
    float _823 = _820 ? _793 : _769;
    bool _824 = (_761 > _757);
    bool _825 = (_762 > _757);
    bool _826 = (_763 > _757);
    float _827 = _824 ? _815 : _767;
    float _828 = _825 ? _816 : _768;
    float _829 = _826 ? _817 : _769;
    float _830 = _757 - _752;
    float _831 = _773 / _830;
    float _832 = _774 / _830;
    float _833 = _775 / _830;
    float _834 = saturate(_831);
    float _835 = saturate(_832);
    float _836 = saturate(_833);
    bool _837 = (_757 < _752);
    float _838 = 1.0f - _834;
    float _839 = 1.0f - _835;
    float _840 = 1.0f - _836;
    float _841 = _837 ? _838 : _834;
    float _842 = _837 ? _839 : _835;
    float _843 = _837 ? _840 : _836;
    float _844 = _841 * 2.0f;
    float _845 = _842 * 2.0f;
    float _846 = _843 * 2.0f;
    float _847 = 3.0f - _844;
    float _848 = 3.0f - _845;
    float _849 = 3.0f - _846;
    float _850 = _827 - _821;
    float _851 = _828 - _822;
    float _852 = _829 - _823;
    float _853 = _841 * _841;
    float _854 = _853 * _850;
    float _855 = _854 * _847;
    float _856 = _842 * _842;
    float _857 = _856 * _851;
    float _858 = _857 * _848;
    float _859 = _843 * _843;
    float _860 = _859 * _852;
    float _861 = _860 * _849;
    float _862 = _855 + _821;
    float _863 = _858 + _822;
    float _864 = _861 + _823;
    float _865 = dot(float3(_862, _863, _864), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _866 = _862 - _865;
    float _867 = _863 - _865;
    float _868 = _864 - _865;
    float _869 = _866 * 0.9300000071525574f;
    float _870 = _867 * 0.9300000071525574f;
    float _871 = _868 * 0.9300000071525574f;
    float _872 = _869 + _865;
    float _873 = _870 + _865;
    float _874 = _871 + _865;
    float _875 = max(0.0f, _872);
    float _876 = max(0.0f, _873);
    float _877 = max(0.0f, _874);

    sdr_ap1_color = float3(_875, _876, _877);
    // end of FilmToneMap
  }
  float _878 = _RootShaderParameters_036w;
  /* float _879 = _875 - _581;
  float _880 = _876 - _582;
  float _881 = _877 - _583; */
  float _879 = sdr_ap1_color.r - _581;
  float _880 = sdr_ap1_color.g - _582;
  float _881 = sdr_ap1_color.b - _583;
  // CustomEdit

  float _882 = _878 * _879;
  float _883 = _878 * _880;
  float _884 = _878 * _881;
  float _885 = _882 + _581;
  float _886 = _883 + _582;
  float _887 = _884 + _583;
  float _888 = _885 * 1.065374732017517f;
  float _889 = mad(1.451815478503704e-06f, _886, _888);
  float _890 = mad(-0.06537103652954102f, _887, _889);
  float _891 = _885 * -2.57161445915699e-07f;
  float _892 = mad(1.2036634683609009f, _886, _891);
  float _893 = mad(-0.20366770029067993f, _887, _892);
  float _894 = _885 * 1.862645149230957e-08f;
  float _895 = mad(2.0954757928848267e-08f, _886, _894);
  float _896 = mad(0.9999996423721313f, _887, _895);
  float _897 = _890 - _885;
  float _898 = _893 - _886;
  float _899 = _896 - _887;
  float _900 = _897 * _567;
  float _901 = _898 * _567;
  float _902 = _899 * _567;
  float _903 = _900 + _885;
  float _904 = _901 + _886;
  float _905 = _902 + _887;
  float _906 = _547 * _903;
  float _907 = mad(_548, _904, _906);
  float _908 = mad(_549, _905, _907);
  float _909 = _551 * _903;
  float _910 = mad(_552, _904, _909);
  float _911 = mad(_553, _905, _910);
  float _912 = _555 * _903;
  float _913 = mad(_556, _904, _912);
  float _914 = mad(_557, _905, _913);
  float _915 = max(0.0f, _908);
  float _916 = max(0.0f, _911);
  float _917 = max(0.0f, _914);

  float3 lut_input_color = float3(_915, _916, _917);  // CustomEdit
  float _1019;                                           // custom branch
  float _1020;                                           // custom branch
  float _1021;                                           // custom branch

  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1019 = post_lut_color.r;
    _1020 = post_lut_color.g;
    _1021 = post_lut_color.b;
  } else {
    float _918 = saturate(_915);
    float _919 = saturate(_916);
    float _920 = saturate(_917);
    bool _921 = (_918 < 0.0031306699384003878f);
    if (_921) {
      float _923 = _918 * 12.920000076293945f;
      _931 = _923;
    } else {
      float _925 = log2(_918);
      float _926 = _925 * 0.4166666567325592f;
      float _927 = exp2(_926);
      float _928 = _927 * 1.0549999475479126f;
      float _929 = _928 + -0.054999999701976776f;
      _931 = _929;
    }
    bool _932 = (_919 < 0.0031306699384003878f);
    if (_932) {
      float _934 = _919 * 12.920000076293945f;
      _942 = _934;
    } else {
      float _936 = log2(_919);
      float _937 = _936 * 0.4166666567325592f;
      float _938 = exp2(_937);
      float _939 = _938 * 1.0549999475479126f;
      float _940 = _939 + -0.054999999701976776f;
      _942 = _940;
    }
    bool _943 = (_920 < 0.0031306699384003878f);
    if (_943) {
      float _945 = _920 * 12.920000076293945f;
      _953 = _945;
    } else {
      float _947 = log2(_920);
      float _948 = _947 * 0.4166666567325592f;
      float _949 = exp2(_948);
      float _950 = _949 * 1.0549999475479126f;
      float _951 = _950 + -0.054999999701976776f;
      _953 = _951;
    }
    float _954 = _931 * 0.9375f;
    float _955 = _942 * 0.9375f;
    float _956 = _954 + 0.03125f;
    float _957 = _955 + 0.03125f;
    float _959 = _RootShaderParameters_005x;
    float _960 = _959 * _931;
    float _961 = _959 * _942;
    float _962 = _959 * _953;
    float _963 = _RootShaderParameters_005y;
    float _964 = _953 * 15.0f;
    float _965 = floor(_964);
    float _966 = _964 - _965;
    float _967 = _956 + _965;
    float _968 = _967 * 0.0625f;
    // _969 = _2;
    // _970 = _3;
    float4 _971 = Textures_1.SampleLevel(Samplers_1, float2(_968, _957), 0.0f);
    float _972 = _971.x;
    float _973 = _971.y;
    float _974 = _971.z;
    float _975 = _968 + 0.0625f;
    float4 _976 = Textures_1.SampleLevel(Samplers_1, float2(_975, _957), 0.0f);
    float _977 = _976.x;
    float _978 = _976.y;
    float _979 = _976.z;
    float _980 = _977 - _972;
    float _981 = _978 - _973;
    float _982 = _979 - _974;
    float _983 = _980 * _966;
    float _984 = _981 * _966;
    float _985 = _982 * _966;
    float _986 = _983 + _972;
    float _987 = _984 + _973;
    float _988 = _985 + _974;
    float _989 = _986 * _963;
    float _990 = _987 * _963;
    float _991 = _988 * _963;
    float _992 = _989 + _960;
    float _993 = _990 + _961;
    float _994 = _991 + _962;
    float _995 = max(6.103519990574569e-05f, _992);
    float _996 = max(6.103519990574569e-05f, _993);
    float _997 = max(6.103519990574569e-05f, _994);
    float _998 = _995 * 0.07739938050508499f;
    float _999 = _996 * 0.07739938050508499f;
    float _1000 = _997 * 0.07739938050508499f;
    float _1001 = _995 * 0.9478672742843628f;
    float _1002 = _996 * 0.9478672742843628f;
    float _1003 = _997 * 0.9478672742843628f;
    float _1004 = _1001 + 0.05213269963860512f;
    float _1005 = _1002 + 0.05213269963860512f;
    float _1006 = _1003 + 0.05213269963860512f;
    float _1007 = log2(_1004);
    float _1008 = log2(_1005);
    float _1009 = log2(_1006);
    float _1010 = _1007 * 2.4000000953674316f;
    float _1011 = _1008 * 2.4000000953674316f;
    float _1012 = _1009 * 2.4000000953674316f;
    float _1013 = exp2(_1010);
    float _1014 = exp2(_1011);
    float _1015 = exp2(_1012);
    bool _1016 = (_995 > 0.040449999272823334f);
    bool _1017 = (_996 > 0.040449999272823334f);
    bool _1018 = (_997 > 0.040449999272823334f);
    // CustomEdit
    /* float _1019 = _1016 ? _1013 : _998;
    float _1020 = _1017 ? _1014 : _999;
    float _1021 = _1018 ? _1015 : _1000; */
    _1019 = _1016 ? _1013 : _998;
    _1020 = _1017 ? _1014 : _999;
    _1021 = _1018 ? _1015 : _1000;
  }

  float _1023 = _RootShaderParameters_039x;
  float _1024 = _1023 * _1019;
  float _1025 = _1023 * _1020;
  float _1026 = _1023 * _1021;
  float _1027 = _RootShaderParameters_039y;
  float _1028 = _RootShaderParameters_039z;
  float _1029 = _1027 + _1024;
  float _1030 = _1029 * _1019;
  float _1031 = _1030 + _1028;
  float _1032 = _1027 + _1025;
  float _1033 = _1032 * _1020;
  float _1034 = _1033 + _1028;
  float _1035 = _1027 + _1026;
  float _1036 = _1035 * _1021;
  float _1037 = _1036 + _1028;
  float _1039 = _RootShaderParameters_013w;
  float _1040 = _RootShaderParameters_013x;
  float _1041 = _RootShaderParameters_013y;
  float _1042 = _RootShaderParameters_013z;
  float _1044 = _RootShaderParameters_014x;
  float _1045 = _RootShaderParameters_014y;
  float _1046 = _RootShaderParameters_014z;
  float _1047 = _1044 * _1031;
  float _1048 = _1045 * _1034;
  float _1049 = _1046 * _1037;
  float _1050 = _1040 - _1047;
  float _1051 = _1041 - _1048;
  float _1052 = _1042 - _1049;
  float _1053 = _1050 * _1039;
  float _1054 = _1051 * _1039;
  float _1055 = _1052 * _1039;
  float _1056 = _1053 + _1047;
  float _1057 = _1054 + _1048;
  float _1058 = _1055 + _1049;
  float _1059 = _1044 * _560;
  float _1060 = _1045 * _563;
  float _1061 = _1046 * _566;
  float _1062 = _1040 - _1059;
  float _1063 = _1041 - _1060;
  float _1064 = _1042 - _1061;
  float _1065 = _1062 * _1039;
  float _1066 = _1063 * _1039;
  float _1067 = _1064 * _1039;
  float _1068 = _1065 + _1059;
  float _1069 = _1066 + _1060;
  float _1070 = _1067 + _1061;
  float _1072 = _RootShaderParameters_040y;
  float _1073 = max(0.0f, _1056);
  float _1074 = max(0.0f, _1057);
  float _1075 = max(0.0f, _1058);
  float _1076 = log2(_1073);
  float _1077 = log2(_1074);
  float _1078 = log2(_1075);
  float _1079 = _1076 * _1072;
  float _1080 = _1077 * _1072;
  float _1081 = _1078 * _1072;
  float _1082 = exp2(_1079);
  float _1083 = exp2(_1080);
  float _1084 = exp2(_1081);

  // CustomEdit
  float3 film_graded_color = float3(_1082, _1083, _1084);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_8, _9, _10)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _1086 = _RootShaderParameters_040w;
  bool _1087 = (_1086 == 0);
  if (_1087) {
    uint _1090 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1091 = (_1090 == 0);
    _1124 = _1082;
    _1125 = _1083;
    _1126 = _1084;
    do {
      if (_1091) {
        float _1094 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1095 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1096 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1098 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1099 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1100 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1102 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1103 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1104 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1105 = _1094 * _1082;
        float _1106 = mad(_1095, _1083, _1105);
        float _1107 = mad(_1096, _1084, _1106);
        float _1108 = _1098 * _1082;
        float _1109 = mad(_1099, _1083, _1108);
        float _1110 = mad(_1100, _1084, _1109);
        float _1111 = _1102 * _1082;
        float _1112 = mad(_1103, _1083, _1111);
        float _1113 = mad(_1104, _1084, _1112);
        float _1114 = _1107 * _49;
        float _1115 = mad(_50, _1110, _1114);
        float _1116 = mad(_51, _1113, _1115);
        float _1117 = _1107 * _52;
        float _1118 = mad(_53, _1110, _1117);
        float _1119 = mad(_54, _1113, _1118);
        float _1120 = _1107 * _55;
        float _1121 = mad(_56, _1110, _1120);
        float _1122 = mad(_57, _1113, _1121);
        _1124 = _1116;
        _1125 = _1119;
        _1126 = _1122;
      }
      bool _1127 = (_1124 < 0.0031306699384003878f);
      do {
        if (_1127) {
          float _1129 = _1124 * 12.920000076293945f;
          _1137 = _1129;
        } else {
          float _1131 = log2(_1124);
          float _1132 = _1131 * 0.4166666567325592f;
          float _1133 = exp2(_1132);
          float _1134 = _1133 * 1.0549999475479126f;
          float _1135 = _1134 + -0.054999999701976776f;
          _1137 = _1135;
        }
        bool _1138 = (_1125 < 0.0031306699384003878f);
        do {
          if (_1138) {
            float _1140 = _1125 * 12.920000076293945f;
            _1148 = _1140;
          } else {
            float _1142 = log2(_1125);
            float _1143 = _1142 * 0.4166666567325592f;
            float _1144 = exp2(_1143);
            float _1145 = _1144 * 1.0549999475479126f;
            float _1146 = _1145 + -0.054999999701976776f;
            _1148 = _1146;
          }
          bool _1149 = (_1126 < 0.0031306699384003878f);
          if (_1149) {
            float _1151 = _1126 * 12.920000076293945f;
            _2508 = _1137;
            _2509 = _1148;
            _2510 = _1151;
          } else {
            float _1153 = log2(_1126);
            float _1154 = _1153 * 0.4166666567325592f;
            float _1155 = exp2(_1154);
            float _1156 = _1155 * 1.0549999475479126f;
            float _1157 = _1156 + -0.054999999701976776f;
            _2508 = _1137;
            _2509 = _1148;
            _2510 = _1157;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1159 = (_1086 == 1);
    if (_1159) {
      float _1162 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1163 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1164 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1166 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1167 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1168 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1170 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1171 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1172 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1173 = _1162 * _1082;
      float _1174 = mad(_1163, _1083, _1173);
      float _1175 = mad(_1164, _1084, _1174);
      float _1176 = _1166 * _1082;
      float _1177 = mad(_1167, _1083, _1176);
      float _1178 = mad(_1168, _1084, _1177);
      float _1179 = _1170 * _1082;
      float _1180 = mad(_1171, _1083, _1179);
      float _1181 = mad(_1172, _1084, _1180);
      float _1182 = _1175 * _49;
      float _1183 = mad(_50, _1178, _1182);
      float _1184 = mad(_51, _1181, _1183);
      float _1185 = _1175 * _52;
      float _1186 = mad(_53, _1178, _1185);
      float _1187 = mad(_54, _1181, _1186);
      float _1188 = _1175 * _55;
      float _1189 = mad(_56, _1178, _1188);
      float _1190 = mad(_57, _1181, _1189);
      float _1191 = max(6.103519990574569e-05f, _1184);
      float _1192 = max(6.103519990574569e-05f, _1187);
      float _1193 = max(6.103519990574569e-05f, _1190);
      float _1194 = max(_1191, 0.017999999225139618f);
      float _1195 = max(_1192, 0.017999999225139618f);
      float _1196 = max(_1193, 0.017999999225139618f);
      float _1197 = log2(_1194);
      float _1198 = log2(_1195);
      float _1199 = log2(_1196);
      float _1200 = _1197 * 0.44999998807907104f;
      float _1201 = _1198 * 0.44999998807907104f;
      float _1202 = _1199 * 0.44999998807907104f;
      float _1203 = exp2(_1200);
      float _1204 = exp2(_1201);
      float _1205 = exp2(_1202);
      float _1206 = _1203 * 1.0989999771118164f;
      float _1207 = _1204 * 1.0989999771118164f;
      float _1208 = _1205 * 1.0989999771118164f;
      float _1209 = _1206 + -0.0989999994635582f;
      float _1210 = _1207 + -0.0989999994635582f;
      float _1211 = _1208 + -0.0989999994635582f;
      float _1212 = _1191 * 4.5f;
      float _1213 = _1192 * 4.5f;
      float _1214 = _1193 * 4.5f;
      float _1215 = min(_1212, _1209);
      float _1216 = min(_1213, _1210);
      float _1217 = min(_1214, _1211);
      _2508 = _1215;
      _2509 = _1216;
      _2510 = _1217;
    } else {
      bool _1219 = (_1086 == 3);
      bool _1220 = (_1086 == 5);
      bool _1221 = _1219 || _1220;
      if (_1221) {
        //   %1223 = bitcast [6 x float]* %13 to i8*
        //   %1224 = bitcast [6 x float]* %14 to i8*
        float _1226 = _RootShaderParameters_012z;
        float _1227 = _RootShaderParameters_012y;
        float _1228 = _RootShaderParameters_012x;
        float _1230 = _RootShaderParameters_011x;
        float _1231 = _RootShaderParameters_011y;
        float _1232 = _RootShaderParameters_011z;
        float _1233 = _RootShaderParameters_011w;
        float _1235 = _RootShaderParameters_010x;
        float _1236 = _RootShaderParameters_010y;
        float _1237 = _RootShaderParameters_010z;
        float _1238 = _RootShaderParameters_010w;
        float _1240 = _RootShaderParameters_009x;
        float _1242 = _RootShaderParameters_008x;
        float _1243 = _RootShaderParameters_008y;
        float _1244 = _RootShaderParameters_008z;
        float _1245 = _RootShaderParameters_008w;
        _13[0] = _1235;
        _13[1] = _1236;
        _13[2] = _1237;
        _13[3] = _1238;
        _13[4] = _1228;
        _13[5] = _1228;
        _14[0] = _1230;
        _14[1] = _1231;
        _14[2] = _1232;
        _14[3] = _1233;
        _14[4] = _1227;
        _14[5] = _1227;
        float _1259 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1260 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1261 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1263 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1264 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1265 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1267 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1268 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1269 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1270 = _1226 * _1068;
        float _1271 = _1226 * _1069;
        float _1272 = _1226 * _1070;
        float _1273 = _1259 * _1270;
        float _1274 = mad(_1260, _1271, _1273);
        float _1275 = mad(_1261, _1272, _1274);
        float _1276 = _1263 * _1270;
        float _1277 = mad(_1264, _1271, _1276);
        float _1278 = mad(_1265, _1272, _1277);
        float _1279 = _1267 * _1270;
        float _1280 = mad(_1268, _1271, _1279);
        float _1281 = mad(_1269, _1272, _1280);
        float _1282 = min(_1275, _1278);
        float _1283 = min(_1282, _1281);
        float _1284 = max(_1275, _1278);
        float _1285 = max(_1284, _1281);
        float _1286 = max(_1285, 1.000000013351432e-10f);
        float _1287 = max(_1283, 1.000000013351432e-10f);
        float _1288 = _1286 - _1287;
        float _1289 = max(_1285, 0.009999999776482582f);
        float _1290 = _1288 / _1289;
        float _1291 = _1281 - _1278;
        float _1292 = _1291 * _1281;
        float _1293 = _1278 - _1275;
        float _1294 = _1293 * _1278;
        float _1295 = _1292 + _1294;
        float _1296 = _1275 - _1281;
        float _1297 = _1296 * _1275;
        float _1298 = _1295 + _1297;
        float _1299 = sqrt(_1298);
        float _1300 = _1299 * 1.75f;
        float _1301 = _1278 + _1275;
        float _1302 = _1301 + _1281;
        float _1303 = _1302 + _1300;
        float _1304 = _1303 * 0.3333333432674408f;
        float _1305 = _1290 + -0.4000000059604645f;
        float _1306 = _1305 * 5.0f;
        float _1307 = _1305 * 2.5f;
        float _1308 = abs(_1307);
        float _1309 = 1.0f - _1308;
        float _1310 = max(_1309, 0.0f);
        bool _1311 = (_1306 > 0.0f);
        bool _1312 = (_1306 < 0.0f);
        int _1313 = int(_1311);
        int _1314 = int(_1312);
        int _1315 = _1313 - _1314;
        float _1316 = float(_1315);
        float _1317 = _1310 * _1310;
        float _1318 = 1.0f - _1317;
        float _1319 = _1316 * _1318;
        float _1320 = _1319 + 1.0f;
        float _1321 = _1320 * 0.02500000037252903f;
        bool _1322 = !(_1304 <= 0.0533333346247673f);
        _1330 = _1321;
        do {
          if (_1322) {
            bool _1324 = !(_1304 >= 0.1599999964237213f);
            _1330 = 0.0f;
            if (_1324) {
              float _1326 = 0.23999999463558197f / _1303;
              float _1327 = _1326 + -0.5f;
              float _1328 = _1327 * _1321;
              _1330 = _1328;
            }
          }
          float _1331 = _1330 + 1.0f;
          float _1332 = _1331 * _1275;
          float _1333 = _1331 * _1278;
          float _1334 = _1331 * _1281;
          bool _1335 = (_1332 == _1333);
          bool _1336 = (_1333 == _1334);
          bool _1337 = _1335 && _1336;
          _1366 = 0.0f;
          do {
            if (!_1337) {
              float _1339 = _1332 * 2.0f;
              float _1340 = _1339 - _1333;
              float _1341 = _1340 - _1334;
              float _1342 = _1278 - _1281;
              float _1343 = _1342 * 1.7320507764816284f;
              float _1344 = _1343 * _1331;
              float _1345 = _1344 / _1341;
              float _1346 = atan(_1345);
              float _1347 = _1346 + 3.1415927410125732f;
              float _1348 = _1346 + -3.1415927410125732f;
              bool _1349 = (_1341 < 0.0f);
              bool _1350 = (_1341 == 0.0f);
              bool _1351 = (_1344 >= 0.0f);
              bool _1352 = (_1344 < 0.0f);
              bool _1353 = _1351 && _1349;
              float _1354 = _1353 ? _1347 : _1346;
              bool _1355 = _1352 && _1349;
              float _1356 = _1355 ? _1348 : _1354;
              bool _1357 = _1352 && _1350;
              bool _1358 = _1351 && _1350;
              float _1359 = _1356 * 57.2957763671875f;
              float _1360 = _1357 ? -90.0f : _1359;
              float _1361 = _1358 ? 90.0f : _1360;
              bool _1362 = (_1361 < 0.0f);
              _1366 = _1361;
              if (_1362) {
                float _1364 = _1361 + 360.0f;
                _1366 = _1364;
              }
            }
            float _1367 = max(_1366, 0.0f);
            float _1368 = min(_1367, 360.0f);
            bool _1369 = (_1368 < -180.0f);
            do {
              if (_1369) {
                float _1371 = _1368 + 360.0f;
                _1377 = _1371;
              } else {
                bool _1373 = (_1368 > 180.0f);
                _1377 = _1368;
                if (_1373) {
                  float _1375 = _1368 + -360.0f;
                  _1377 = _1375;
                }
              }
              bool _1378 = (_1377 > -67.5f);
              bool _1379 = (_1377 < 67.5f);
              bool _1380 = _1378 && _1379;
              _1416 = 0.0f;
              do {
                if (_1380) {
                  float _1382 = _1377 + 67.5f;
                  float _1383 = _1382 * 0.029629629105329514f;
                  int _1384 = int(_1383);
                  float _1385 = float(_1384);
                  float _1386 = _1383 - _1385;
                  float _1387 = _1386 * _1386;
                  float _1388 = _1387 * _1386;
                  bool _1389 = (_1384 == 3);
                  if (_1389) {
                    float _1391 = _1388 * 0.1666666716337204f;
                    float _1392 = _1387 * 0.5f;
                    float _1393 = _1386 * 0.5f;
                    float _1394 = 0.1666666716337204f - _1393;
                    float _1395 = _1394 + _1392;
                    float _1396 = _1395 - _1391;
                    _1416 = _1396;
                  } else {
                    bool _1398 = (_1384 == 2);
                    if (_1398) {
                      float _1400 = _1388 * 0.5f;
                      float _1401 = 0.6666666865348816f - _1387;
                      float _1402 = _1401 + _1400;
                      _1416 = _1402;
                    } else {
                      bool _1404 = (_1384 == 1);
                      if (_1404) {
                        float _1406 = _1388 * -0.5f;
                        float _1407 = _1387 + _1386;
                        float _1408 = _1407 * 0.5f;
                        float _1409 = _1406 + 0.1666666716337204f;
                        float _1410 = _1409 + _1408;
                        _1416 = _1410;
                      } else {
                        bool _1412 = (_1384 == 0);
                        float _1413 = _1388 * 0.1666666716337204f;
                        float _1414 = _1412 ? _1413 : 0.0f;
                        _1416 = _1414;
                      }
                    }
                  }
                }
                float _1417 = 0.029999999329447746f - _1332;
                float _1418 = _1290 * 0.27000001072883606f;
                float _1419 = _1418 * _1417;
                float _1420 = _1419 * _1416;
                float _1421 = _1420 + _1332;
                float _1422 = max(_1421, 0.0f);
                float _1423 = max(_1333, 0.0f);
                float _1424 = max(_1334, 0.0f);
                float _1425 = min(_1422, 65535.0f);
                float _1426 = min(_1423, 65535.0f);
                float _1427 = min(_1424, 65535.0f);
                float _1428 = _1425 * 1.4514392614364624f;
                float _1429 = mad(-0.2365107536315918f, _1426, _1428);
                float _1430 = mad(-0.21492856740951538f, _1427, _1429);
                float _1431 = _1425 * -0.07655377686023712f;
                float _1432 = mad(1.17622971534729f, _1426, _1431);
                float _1433 = mad(-0.09967592358589172f, _1427, _1432);
                float _1434 = _1425 * 0.008316148072481155f;
                float _1435 = mad(-0.006032449658960104f, _1426, _1434);
                float _1436 = mad(0.9977163076400757f, _1427, _1435);
                float _1437 = max(_1430, 0.0f);
                float _1438 = max(_1433, 0.0f);
                float _1439 = max(_1436, 0.0f);
                float _1440 = min(_1437, 65504.0f);
                float _1441 = min(_1438, 65504.0f);
                float _1442 = min(_1439, 65504.0f);
                float _1443 = dot(float3(_1440, _1441, _1442), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1444 = _1440 - _1443;
                float _1445 = _1441 - _1443;
                float _1446 = _1442 - _1443;
                float _1447 = _1444 * 0.9599999785423279f;
                float _1448 = _1445 * 0.9599999785423279f;
                float _1449 = _1446 * 0.9599999785423279f;
                float _1450 = _1447 + _1443;
                float _1451 = _1448 + _1443;
                float _1452 = _1449 + _1443;
                float _1453 = max(_1450, 1.000000013351432e-10f);
                float _1454 = log2(_1453);
                float _1455 = _1454 * 0.3010300099849701f;
                float _1456 = log2(_1242);
                float _1457 = _1456 * 0.3010300099849701f;
                bool _1458 = !(_1455 <= _1457);
                do {
                  if (!_1458) {
                    float _1460 = log2(_1243);
                    float _1461 = _1460 * 0.3010300099849701f;
                    _1526 = _1461;
                  } else {
                    bool _1463 = (_1455 > _1457);
                    float _1464 = log2(_1240);
                    float _1465 = _1464 * 0.3010300099849701f;
                    bool _1466 = (_1455 < _1465);
                    bool _1467 = _1463 && _1466;
                    if (_1467) {
                      float _1469 = _1454 - _1456;
                      float _1470 = _1469 * 0.9030900001525879f;
                      float _1471 = _1464 - _1456;
                      float _1472 = _1471 * 0.3010300099849701f;
                      float _1473 = _1470 / _1472;
                      int _1474 = int(_1473);
                      float _1475 = float(_1474);
                      float _1476 = _1473 - _1475;
                      float _1478 = _13[_1474];
                      int _1479 = _1474 + 1;
                      float _1481 = _13[_1479];
                      int _1482 = _1474 + 2;
                      float _1484 = _13[_1482];
                      float _1485 = _1476 * _1476;
                      float _1486 = _1478 * 0.5f;
                      float _1487 = mad(_1481, -1.0f, _1486);
                      float _1488 = mad(_1484, 0.5f, _1487);
                      float _1489 = _1481 - _1478;
                      float _1490 = mad(_1481, 0.5f, _1486);
                      float _1491 = dot(float3(_1485, _1476, 1.0f), float3(_1488, _1489, _1490));
                      _1526 = _1491;
                    } else {
                      bool _1493 = !(_1455 >= _1465);
                      do {
                        if (!_1493) {
                          float _1495 = log2(_1244);
                          float _1496 = _1495 * 0.3010300099849701f;
                          bool _1497 = (_1455 < _1496);
                          if (_1497) {
                            float _1499 = _1454 - _1464;
                            float _1500 = _1499 * 0.9030900001525879f;
                            float _1501 = _1495 - _1464;
                            float _1502 = _1501 * 0.3010300099849701f;
                            float _1503 = _1500 / _1502;
                            int _1504 = int(_1503);
                            float _1505 = float(_1504);
                            float _1506 = _1503 - _1505;
                            float _1508 = _14[_1504];
                            int _1509 = _1504 + 1;
                            float _1511 = _14[_1509];
                            int _1512 = _1504 + 2;
                            float _1514 = _14[_1512];
                            float _1515 = _1506 * _1506;
                            float _1516 = _1508 * 0.5f;
                            float _1517 = mad(_1511, -1.0f, _1516);
                            float _1518 = mad(_1514, 0.5f, _1517);
                            float _1519 = _1511 - _1508;
                            float _1520 = mad(_1511, 0.5f, _1516);
                            float _1521 = dot(float3(_1515, _1506, 1.0f), float3(_1518, _1519, _1520));
                            _1526 = _1521;
                            break;
                          }
                        }
                        float _1523 = log2(_1245);
                        float _1524 = _1523 * 0.3010300099849701f;
                        _1526 = _1524;
                      } while (false);
                    }
                  }
                  float _1527 = _1526 * 3.321928024291992f;
                  float _1528 = exp2(_1527);
                  float _1529 = max(_1451, 1.000000013351432e-10f);
                  float _1530 = log2(_1529);
                  float _1531 = _1530 * 0.3010300099849701f;
                  bool _1532 = !(_1531 <= _1457);
                  do {
                    if (!_1532) {
                      float _1534 = log2(_1243);
                      float _1535 = _1534 * 0.3010300099849701f;
                      _1600 = _1535;
                    } else {
                      bool _1537 = (_1531 > _1457);
                      float _1538 = log2(_1240);
                      float _1539 = _1538 * 0.3010300099849701f;
                      bool _1540 = (_1531 < _1539);
                      bool _1541 = _1537 && _1540;
                      if (_1541) {
                        float _1543 = _1530 - _1456;
                        float _1544 = _1543 * 0.9030900001525879f;
                        float _1545 = _1538 - _1456;
                        float _1546 = _1545 * 0.3010300099849701f;
                        float _1547 = _1544 / _1546;
                        int _1548 = int(_1547);
                        float _1549 = float(_1548);
                        float _1550 = _1547 - _1549;
                        float _1552 = _13[_1548];
                        int _1553 = _1548 + 1;
                        float _1555 = _13[_1553];
                        int _1556 = _1548 + 2;
                        float _1558 = _13[_1556];
                        float _1559 = _1550 * _1550;
                        float _1560 = _1552 * 0.5f;
                        float _1561 = mad(_1555, -1.0f, _1560);
                        float _1562 = mad(_1558, 0.5f, _1561);
                        float _1563 = _1555 - _1552;
                        float _1564 = mad(_1555, 0.5f, _1560);
                        float _1565 = dot(float3(_1559, _1550, 1.0f), float3(_1562, _1563, _1564));
                        _1600 = _1565;
                      } else {
                        bool _1567 = !(_1531 >= _1539);
                        do {
                          if (!_1567) {
                            float _1569 = log2(_1244);
                            float _1570 = _1569 * 0.3010300099849701f;
                            bool _1571 = (_1531 < _1570);
                            if (_1571) {
                              float _1573 = _1530 - _1538;
                              float _1574 = _1573 * 0.9030900001525879f;
                              float _1575 = _1569 - _1538;
                              float _1576 = _1575 * 0.3010300099849701f;
                              float _1577 = _1574 / _1576;
                              int _1578 = int(_1577);
                              float _1579 = float(_1578);
                              float _1580 = _1577 - _1579;
                              float _1582 = _14[_1578];
                              int _1583 = _1578 + 1;
                              float _1585 = _14[_1583];
                              int _1586 = _1578 + 2;
                              float _1588 = _14[_1586];
                              float _1589 = _1580 * _1580;
                              float _1590 = _1582 * 0.5f;
                              float _1591 = mad(_1585, -1.0f, _1590);
                              float _1592 = mad(_1588, 0.5f, _1591);
                              float _1593 = _1585 - _1582;
                              float _1594 = mad(_1585, 0.5f, _1590);
                              float _1595 = dot(float3(_1589, _1580, 1.0f), float3(_1592, _1593, _1594));
                              _1600 = _1595;
                              break;
                            }
                          }
                          float _1597 = log2(_1245);
                          float _1598 = _1597 * 0.3010300099849701f;
                          _1600 = _1598;
                        } while (false);
                      }
                    }
                    float _1601 = _1600 * 3.321928024291992f;
                    float _1602 = exp2(_1601);
                    float _1603 = max(_1452, 1.000000013351432e-10f);
                    float _1604 = log2(_1603);
                    float _1605 = _1604 * 0.3010300099849701f;
                    bool _1606 = !(_1605 <= _1457);
                    do {
                      if (!_1606) {
                        float _1608 = log2(_1243);
                        float _1609 = _1608 * 0.3010300099849701f;
                        _1674 = _1609;
                      } else {
                        bool _1611 = (_1605 > _1457);
                        float _1612 = log2(_1240);
                        float _1613 = _1612 * 0.3010300099849701f;
                        bool _1614 = (_1605 < _1613);
                        bool _1615 = _1611 && _1614;
                        if (_1615) {
                          float _1617 = _1604 - _1456;
                          float _1618 = _1617 * 0.9030900001525879f;
                          float _1619 = _1612 - _1456;
                          float _1620 = _1619 * 0.3010300099849701f;
                          float _1621 = _1618 / _1620;
                          int _1622 = int(_1621);
                          float _1623 = float(_1622);
                          float _1624 = _1621 - _1623;
                          float _1626 = _13[_1622];
                          int _1627 = _1622 + 1;
                          float _1629 = _13[_1627];
                          int _1630 = _1622 + 2;
                          float _1632 = _13[_1630];
                          float _1633 = _1624 * _1624;
                          float _1634 = _1626 * 0.5f;
                          float _1635 = mad(_1629, -1.0f, _1634);
                          float _1636 = mad(_1632, 0.5f, _1635);
                          float _1637 = _1629 - _1626;
                          float _1638 = mad(_1629, 0.5f, _1634);
                          float _1639 = dot(float3(_1633, _1624, 1.0f), float3(_1636, _1637, _1638));
                          _1674 = _1639;
                        } else {
                          bool _1641 = !(_1605 >= _1613);
                          do {
                            if (!_1641) {
                              float _1643 = log2(_1244);
                              float _1644 = _1643 * 0.3010300099849701f;
                              bool _1645 = (_1605 < _1644);
                              if (_1645) {
                                float _1647 = _1604 - _1612;
                                float _1648 = _1647 * 0.9030900001525879f;
                                float _1649 = _1643 - _1612;
                                float _1650 = _1649 * 0.3010300099849701f;
                                float _1651 = _1648 / _1650;
                                int _1652 = int(_1651);
                                float _1653 = float(_1652);
                                float _1654 = _1651 - _1653;
                                float _1656 = _14[_1652];
                                int _1657 = _1652 + 1;
                                float _1659 = _14[_1657];
                                int _1660 = _1652 + 2;
                                float _1662 = _14[_1660];
                                float _1663 = _1654 * _1654;
                                float _1664 = _1656 * 0.5f;
                                float _1665 = mad(_1659, -1.0f, _1664);
                                float _1666 = mad(_1662, 0.5f, _1665);
                                float _1667 = _1659 - _1656;
                                float _1668 = mad(_1659, 0.5f, _1664);
                                float _1669 = dot(float3(_1663, _1654, 1.0f), float3(_1666, _1667, _1668));
                                _1674 = _1669;
                                break;
                              }
                            }
                            float _1671 = log2(_1245);
                            float _1672 = _1671 * 0.3010300099849701f;
                            _1674 = _1672;
                          } while (false);
                        }
                      }
                      float _1675 = _1674 * 3.321928024291992f;
                      float _1676 = exp2(_1675);
                      float _1677 = _1528 - _1243;
                      float _1678 = _1245 - _1243;
                      float _1679 = _1677 / _1678;
                      float _1680 = _1602 - _1243;
                      float _1681 = _1680 / _1678;
                      float _1682 = _1676 - _1243;
                      float _1683 = _1682 / _1678;
                      float _1684 = _1679 * 0.6624541878700256f;
                      float _1685 = mad(0.13400420546531677f, _1681, _1684);
                      float _1686 = mad(0.15618768334388733f, _1683, _1685);
                      float _1687 = _1679 * 0.2722287178039551f;
                      float _1688 = mad(0.6740817427635193f, _1681, _1687);
                      float _1689 = mad(0.053689517080783844f, _1683, _1688);
                      float _1690 = _1679 * -0.005574649665504694f;
                      float _1691 = mad(0.00406073359772563f, _1681, _1690);
                      float _1692 = mad(1.0103391408920288f, _1683, _1691);
                      float _1693 = _1686 * 1.6410233974456787f;
                      float _1694 = mad(-0.32480329275131226f, _1689, _1693);
                      float _1695 = mad(-0.23642469942569733f, _1692, _1694);
                      float _1696 = _1686 * -0.663662850856781f;
                      float _1697 = mad(1.6153316497802734f, _1689, _1696);
                      float _1698 = mad(0.016756348311901093f, _1692, _1697);
                      float _1699 = _1686 * 0.011721894145011902f;
                      float _1700 = mad(-0.008284442126750946f, _1689, _1699);
                      float _1701 = mad(0.9883948564529419f, _1692, _1700);
                      float _1702 = max(_1695, 0.0f);
                      float _1703 = max(_1698, 0.0f);
                      float _1704 = max(_1701, 0.0f);
                      float _1705 = min(_1702, 1.0f);
                      float _1706 = min(_1703, 1.0f);
                      float _1707 = min(_1704, 1.0f);
                      float _1708 = _1705 * 0.6624541878700256f;
                      float _1709 = mad(0.13400420546531677f, _1706, _1708);
                      float _1710 = mad(0.15618768334388733f, _1707, _1709);
                      float _1711 = _1705 * 0.2722287178039551f;
                      float _1712 = mad(0.6740817427635193f, _1706, _1711);
                      float _1713 = mad(0.053689517080783844f, _1707, _1712);
                      float _1714 = _1705 * -0.005574649665504694f;
                      float _1715 = mad(0.00406073359772563f, _1706, _1714);
                      float _1716 = mad(1.0103391408920288f, _1707, _1715);
                      float _1717 = _1710 * 1.6410233974456787f;
                      float _1718 = mad(-0.32480329275131226f, _1713, _1717);
                      float _1719 = mad(-0.23642469942569733f, _1716, _1718);
                      float _1720 = _1710 * -0.663662850856781f;
                      float _1721 = mad(1.6153316497802734f, _1713, _1720);
                      float _1722 = mad(0.016756348311901093f, _1716, _1721);
                      float _1723 = _1710 * 0.011721894145011902f;
                      float _1724 = mad(-0.008284442126750946f, _1713, _1723);
                      float _1725 = mad(0.9883948564529419f, _1716, _1724);
                      float _1726 = max(_1719, 0.0f);
                      float _1727 = max(_1722, 0.0f);
                      float _1728 = max(_1725, 0.0f);
                      float _1729 = min(_1726, 65535.0f);
                      float _1730 = min(_1727, 65535.0f);
                      float _1731 = min(_1728, 65535.0f);
                      float _1732 = _1729 * _1245;
                      float _1733 = _1730 * _1245;
                      float _1734 = _1731 * _1245;
                      float _1735 = max(_1732, 0.0f);
                      float _1736 = max(_1733, 0.0f);
                      float _1737 = max(_1734, 0.0f);
                      float _1738 = min(_1735, 65535.0f);
                      float _1739 = min(_1736, 65535.0f);
                      float _1740 = min(_1737, 65535.0f);
                      bool _1741 = (_1086 == 5);
                      _1753 = _1738;
                      _1754 = _1739;
                      _1755 = _1740;
                      do {
                        if (!_1741) {
                          float _1743 = _1738 * _49;
                          float _1744 = mad(_50, _1739, _1743);
                          float _1745 = mad(_51, _1740, _1744);
                          float _1746 = _1738 * _52;
                          float _1747 = mad(_53, _1739, _1746);
                          float _1748 = mad(_54, _1740, _1747);
                          float _1749 = _1738 * _55;
                          float _1750 = mad(_56, _1739, _1749);
                          float _1751 = mad(_57, _1740, _1750);
                          _1753 = _1745;
                          _1754 = _1748;
                          _1755 = _1751;
                        }
                        float _1756 = _1753 * 9.999999747378752e-05f;
                        float _1757 = _1754 * 9.999999747378752e-05f;
                        float _1758 = _1755 * 9.999999747378752e-05f;
                        float _1759 = log2(_1756);
                        float _1760 = log2(_1757);
                        float _1761 = log2(_1758);
                        float _1762 = _1759 * 0.1593017578125f;
                        float _1763 = _1760 * 0.1593017578125f;
                        float _1764 = _1761 * 0.1593017578125f;
                        float _1765 = exp2(_1762);
                        float _1766 = exp2(_1763);
                        float _1767 = exp2(_1764);
                        float _1768 = _1765 * 18.8515625f;
                        float _1769 = _1766 * 18.8515625f;
                        float _1770 = _1767 * 18.8515625f;
                        float _1771 = _1768 + 0.8359375f;
                        float _1772 = _1769 + 0.8359375f;
                        float _1773 = _1770 + 0.8359375f;
                        float _1774 = _1765 * 18.6875f;
                        float _1775 = _1766 * 18.6875f;
                        float _1776 = _1767 * 18.6875f;
                        float _1777 = _1774 + 1.0f;
                        float _1778 = _1775 + 1.0f;
                        float _1779 = _1776 + 1.0f;
                        float _1780 = 1.0f / _1777;
                        float _1781 = 1.0f / _1778;
                        float _1782 = 1.0f / _1779;
                        float _1783 = _1780 * _1771;
                        float _1784 = _1781 * _1772;
                        float _1785 = _1782 * _1773;
                        float _1786 = log2(_1783);
                        float _1787 = log2(_1784);
                        float _1788 = log2(_1785);
                        float _1789 = _1786 * 78.84375f;
                        float _1790 = _1787 * 78.84375f;
                        float _1791 = _1788 * 78.84375f;
                        float _1792 = exp2(_1789);
                        float _1793 = exp2(_1790);
                        float _1794 = exp2(_1791);
                        _2508 = _1792;
                        _2509 = _1793;
                        _2510 = _1794;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _1796 = _1086 & -3;
        bool _1797 = (_1796 == 4);
        if (_1797) {
          //   %1799 = bitcast [6 x float]* %11 to i8*
          //   %1800 = bitcast [6 x float]* %12 to i8*
          float _1802 = _RootShaderParameters_012z;
          float _1803 = _RootShaderParameters_012y;
          float _1804 = _RootShaderParameters_012x;
          float _1806 = _RootShaderParameters_011x;
          float _1807 = _RootShaderParameters_011y;
          float _1808 = _RootShaderParameters_011z;
          float _1809 = _RootShaderParameters_011w;
          float _1811 = _RootShaderParameters_010x;
          float _1812 = _RootShaderParameters_010y;
          float _1813 = _RootShaderParameters_010z;
          float _1814 = _RootShaderParameters_010w;
          float _1816 = _RootShaderParameters_009x;
          float _1818 = _RootShaderParameters_008x;
          float _1819 = _RootShaderParameters_008y;
          float _1820 = _RootShaderParameters_008z;
          float _1821 = _RootShaderParameters_008w;
          _11[0] = _1811;
          _11[1] = _1812;
          _11[2] = _1813;
          _11[3] = _1814;
          _11[4] = _1804;
          _11[5] = _1804;
          _12[0] = _1806;
          _12[1] = _1807;
          _12[2] = _1808;
          _12[3] = _1809;
          _12[4] = _1803;
          _12[5] = _1803;
          float _1835 = UniformBufferConstants_WorkingColorSpace_016x;
          float _1836 = UniformBufferConstants_WorkingColorSpace_016y;
          float _1837 = UniformBufferConstants_WorkingColorSpace_016z;
          float _1839 = UniformBufferConstants_WorkingColorSpace_017x;
          float _1840 = UniformBufferConstants_WorkingColorSpace_017y;
          float _1841 = UniformBufferConstants_WorkingColorSpace_017z;
          float _1843 = UniformBufferConstants_WorkingColorSpace_018x;
          float _1844 = UniformBufferConstants_WorkingColorSpace_018y;
          float _1845 = UniformBufferConstants_WorkingColorSpace_018z;
          float _1846 = _1802 * _1068;
          float _1847 = _1802 * _1069;
          float _1848 = _1802 * _1070;
          float _1849 = _1835 * _1846;
          float _1850 = mad(_1836, _1847, _1849);
          float _1851 = mad(_1837, _1848, _1850);
          float _1852 = _1839 * _1846;
          float _1853 = mad(_1840, _1847, _1852);
          float _1854 = mad(_1841, _1848, _1853);
          float _1855 = _1843 * _1846;
          float _1856 = mad(_1844, _1847, _1855);
          float _1857 = mad(_1845, _1848, _1856);
          float _1858 = min(_1851, _1854);
          float _1859 = min(_1858, _1857);
          float _1860 = max(_1851, _1854);
          float _1861 = max(_1860, _1857);
          float _1862 = max(_1861, 1.000000013351432e-10f);
          float _1863 = max(_1859, 1.000000013351432e-10f);
          float _1864 = _1862 - _1863;
          float _1865 = max(_1861, 0.009999999776482582f);
          float _1866 = _1864 / _1865;
          float _1867 = _1857 - _1854;
          float _1868 = _1867 * _1857;
          float _1869 = _1854 - _1851;
          float _1870 = _1869 * _1854;
          float _1871 = _1868 + _1870;
          float _1872 = _1851 - _1857;
          float _1873 = _1872 * _1851;
          float _1874 = _1871 + _1873;
          float _1875 = sqrt(_1874);
          float _1876 = _1875 * 1.75f;
          float _1877 = _1854 + _1851;
          float _1878 = _1877 + _1857;
          float _1879 = _1878 + _1876;
          float _1880 = _1879 * 0.3333333432674408f;
          float _1881 = _1866 + -0.4000000059604645f;
          float _1882 = _1881 * 5.0f;
          float _1883 = _1881 * 2.5f;
          float _1884 = abs(_1883);
          float _1885 = 1.0f - _1884;
          float _1886 = max(_1885, 0.0f);
          bool _1887 = (_1882 > 0.0f);
          bool _1888 = (_1882 < 0.0f);
          int _1889 = int(_1887);
          int _1890 = int(_1888);
          int _1891 = _1889 - _1890;
          float _1892 = float(_1891);
          float _1893 = _1886 * _1886;
          float _1894 = 1.0f - _1893;
          float _1895 = _1892 * _1894;
          float _1896 = _1895 + 1.0f;
          float _1897 = _1896 * 0.02500000037252903f;
          bool _1898 = !(_1880 <= 0.0533333346247673f);
          _1906 = _1897;
          do {
            if (_1898) {
              bool _1900 = !(_1880 >= 0.1599999964237213f);
              _1906 = 0.0f;
              if (_1900) {
                float _1902 = 0.23999999463558197f / _1879;
                float _1903 = _1902 + -0.5f;
                float _1904 = _1903 * _1897;
                _1906 = _1904;
              }
            }
            float _1907 = _1906 + 1.0f;
            float _1908 = _1907 * _1851;
            float _1909 = _1907 * _1854;
            float _1910 = _1907 * _1857;
            bool _1911 = (_1908 == _1909);
            bool _1912 = (_1909 == _1910);
            bool _1913 = _1911 && _1912;
            _1942 = 0.0f;
            do {
              if (!_1913) {
                float _1915 = _1908 * 2.0f;
                float _1916 = _1915 - _1909;
                float _1917 = _1916 - _1910;
                float _1918 = _1854 - _1857;
                float _1919 = _1918 * 1.7320507764816284f;
                float _1920 = _1919 * _1907;
                float _1921 = _1920 / _1917;
                float _1922 = atan(_1921);
                float _1923 = _1922 + 3.1415927410125732f;
                float _1924 = _1922 + -3.1415927410125732f;
                bool _1925 = (_1917 < 0.0f);
                bool _1926 = (_1917 == 0.0f);
                bool _1927 = (_1920 >= 0.0f);
                bool _1928 = (_1920 < 0.0f);
                bool _1929 = _1927 && _1925;
                float _1930 = _1929 ? _1923 : _1922;
                bool _1931 = _1928 && _1925;
                float _1932 = _1931 ? _1924 : _1930;
                bool _1933 = _1928 && _1926;
                bool _1934 = _1927 && _1926;
                float _1935 = _1932 * 57.2957763671875f;
                float _1936 = _1933 ? -90.0f : _1935;
                float _1937 = _1934 ? 90.0f : _1936;
                bool _1938 = (_1937 < 0.0f);
                _1942 = _1937;
                if (_1938) {
                  float _1940 = _1937 + 360.0f;
                  _1942 = _1940;
                }
              }
              float _1943 = max(_1942, 0.0f);
              float _1944 = min(_1943, 360.0f);
              bool _1945 = (_1944 < -180.0f);
              do {
                if (_1945) {
                  float _1947 = _1944 + 360.0f;
                  _1953 = _1947;
                } else {
                  bool _1949 = (_1944 > 180.0f);
                  _1953 = _1944;
                  if (_1949) {
                    float _1951 = _1944 + -360.0f;
                    _1953 = _1951;
                  }
                }
                bool _1954 = (_1953 > -67.5f);
                bool _1955 = (_1953 < 67.5f);
                bool _1956 = _1954 && _1955;
                _1992 = 0.0f;
                do {
                  if (_1956) {
                    float _1958 = _1953 + 67.5f;
                    float _1959 = _1958 * 0.029629629105329514f;
                    int _1960 = int(_1959);
                    float _1961 = float(_1960);
                    float _1962 = _1959 - _1961;
                    float _1963 = _1962 * _1962;
                    float _1964 = _1963 * _1962;
                    bool _1965 = (_1960 == 3);
                    if (_1965) {
                      float _1967 = _1964 * 0.1666666716337204f;
                      float _1968 = _1963 * 0.5f;
                      float _1969 = _1962 * 0.5f;
                      float _1970 = 0.1666666716337204f - _1969;
                      float _1971 = _1970 + _1968;
                      float _1972 = _1971 - _1967;
                      _1992 = _1972;
                    } else {
                      bool _1974 = (_1960 == 2);
                      if (_1974) {
                        float _1976 = _1964 * 0.5f;
                        float _1977 = 0.6666666865348816f - _1963;
                        float _1978 = _1977 + _1976;
                        _1992 = _1978;
                      } else {
                        bool _1980 = (_1960 == 1);
                        if (_1980) {
                          float _1982 = _1964 * -0.5f;
                          float _1983 = _1963 + _1962;
                          float _1984 = _1983 * 0.5f;
                          float _1985 = _1982 + 0.1666666716337204f;
                          float _1986 = _1985 + _1984;
                          _1992 = _1986;
                        } else {
                          bool _1988 = (_1960 == 0);
                          float _1989 = _1964 * 0.1666666716337204f;
                          float _1990 = _1988 ? _1989 : 0.0f;
                          _1992 = _1990;
                        }
                      }
                    }
                  }
                  float _1993 = 0.029999999329447746f - _1908;
                  float _1994 = _1866 * 0.27000001072883606f;
                  float _1995 = _1994 * _1993;
                  float _1996 = _1995 * _1992;
                  float _1997 = _1996 + _1908;
                  float _1998 = max(_1997, 0.0f);
                  float _1999 = max(_1909, 0.0f);
                  float _2000 = max(_1910, 0.0f);
                  float _2001 = min(_1998, 65535.0f);
                  float _2002 = min(_1999, 65535.0f);
                  float _2003 = min(_2000, 65535.0f);
                  float _2004 = _2001 * 1.4514392614364624f;
                  float _2005 = mad(-0.2365107536315918f, _2002, _2004);
                  float _2006 = mad(-0.21492856740951538f, _2003, _2005);
                  float _2007 = _2001 * -0.07655377686023712f;
                  float _2008 = mad(1.17622971534729f, _2002, _2007);
                  float _2009 = mad(-0.09967592358589172f, _2003, _2008);
                  float _2010 = _2001 * 0.008316148072481155f;
                  float _2011 = mad(-0.006032449658960104f, _2002, _2010);
                  float _2012 = mad(0.9977163076400757f, _2003, _2011);
                  float _2013 = max(_2006, 0.0f);
                  float _2014 = max(_2009, 0.0f);
                  float _2015 = max(_2012, 0.0f);
                  float _2016 = min(_2013, 65504.0f);
                  float _2017 = min(_2014, 65504.0f);
                  float _2018 = min(_2015, 65504.0f);
                  float _2019 = dot(float3(_2016, _2017, _2018), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2020 = _2016 - _2019;
                  float _2021 = _2017 - _2019;
                  float _2022 = _2018 - _2019;
                  float _2023 = _2020 * 0.9599999785423279f;
                  float _2024 = _2021 * 0.9599999785423279f;
                  float _2025 = _2022 * 0.9599999785423279f;
                  float _2026 = _2023 + _2019;
                  float _2027 = _2024 + _2019;
                  float _2028 = _2025 + _2019;
                  float _2029 = max(_2026, 1.000000013351432e-10f);
                  float _2030 = log2(_2029);
                  float _2031 = _2030 * 0.3010300099849701f;
                  float _2032 = log2(_1818);
                  float _2033 = _2032 * 0.3010300099849701f;
                  bool _2034 = !(_2031 <= _2033);
                  do {
                    if (!_2034) {
                      float _2036 = log2(_1819);
                      float _2037 = _2036 * 0.3010300099849701f;
                      _2102 = _2037;
                    } else {
                      bool _2039 = (_2031 > _2033);
                      float _2040 = log2(_1816);
                      float _2041 = _2040 * 0.3010300099849701f;
                      bool _2042 = (_2031 < _2041);
                      bool _2043 = _2039 && _2042;
                      if (_2043) {
                        float _2045 = _2030 - _2032;
                        float _2046 = _2045 * 0.9030900001525879f;
                        float _2047 = _2040 - _2032;
                        float _2048 = _2047 * 0.3010300099849701f;
                        float _2049 = _2046 / _2048;
                        int _2050 = int(_2049);
                        float _2051 = float(_2050);
                        float _2052 = _2049 - _2051;
                        float _2054 = _11[_2050];
                        int _2055 = _2050 + 1;
                        float _2057 = _11[_2055];
                        int _2058 = _2050 + 2;
                        float _2060 = _11[_2058];
                        float _2061 = _2052 * _2052;
                        float _2062 = _2054 * 0.5f;
                        float _2063 = mad(_2057, -1.0f, _2062);
                        float _2064 = mad(_2060, 0.5f, _2063);
                        float _2065 = _2057 - _2054;
                        float _2066 = mad(_2057, 0.5f, _2062);
                        float _2067 = dot(float3(_2061, _2052, 1.0f), float3(_2064, _2065, _2066));
                        _2102 = _2067;
                      } else {
                        bool _2069 = !(_2031 >= _2041);
                        do {
                          if (!_2069) {
                            float _2071 = log2(_1820);
                            float _2072 = _2071 * 0.3010300099849701f;
                            bool _2073 = (_2031 < _2072);
                            if (_2073) {
                              float _2075 = _2030 - _2040;
                              float _2076 = _2075 * 0.9030900001525879f;
                              float _2077 = _2071 - _2040;
                              float _2078 = _2077 * 0.3010300099849701f;
                              float _2079 = _2076 / _2078;
                              int _2080 = int(_2079);
                              float _2081 = float(_2080);
                              float _2082 = _2079 - _2081;
                              float _2084 = _12[_2080];
                              int _2085 = _2080 + 1;
                              float _2087 = _12[_2085];
                              int _2088 = _2080 + 2;
                              float _2090 = _12[_2088];
                              float _2091 = _2082 * _2082;
                              float _2092 = _2084 * 0.5f;
                              float _2093 = mad(_2087, -1.0f, _2092);
                              float _2094 = mad(_2090, 0.5f, _2093);
                              float _2095 = _2087 - _2084;
                              float _2096 = mad(_2087, 0.5f, _2092);
                              float _2097 = dot(float3(_2091, _2082, 1.0f), float3(_2094, _2095, _2096));
                              _2102 = _2097;
                              break;
                            }
                          }
                          float _2099 = log2(_1821);
                          float _2100 = _2099 * 0.3010300099849701f;
                          _2102 = _2100;
                        } while (false);
                      }
                    }
                    float _2103 = _2102 * 3.321928024291992f;
                    float _2104 = exp2(_2103);
                    float _2105 = max(_2027, 1.000000013351432e-10f);
                    float _2106 = log2(_2105);
                    float _2107 = _2106 * 0.3010300099849701f;
                    bool _2108 = !(_2107 <= _2033);
                    do {
                      if (!_2108) {
                        float _2110 = log2(_1819);
                        float _2111 = _2110 * 0.3010300099849701f;
                        _2176 = _2111;
                      } else {
                        bool _2113 = (_2107 > _2033);
                        float _2114 = log2(_1816);
                        float _2115 = _2114 * 0.3010300099849701f;
                        bool _2116 = (_2107 < _2115);
                        bool _2117 = _2113 && _2116;
                        if (_2117) {
                          float _2119 = _2106 - _2032;
                          float _2120 = _2119 * 0.9030900001525879f;
                          float _2121 = _2114 - _2032;
                          float _2122 = _2121 * 0.3010300099849701f;
                          float _2123 = _2120 / _2122;
                          int _2124 = int(_2123);
                          float _2125 = float(_2124);
                          float _2126 = _2123 - _2125;
                          float _2128 = _11[_2124];
                          int _2129 = _2124 + 1;
                          float _2131 = _11[_2129];
                          int _2132 = _2124 + 2;
                          float _2134 = _11[_2132];
                          float _2135 = _2126 * _2126;
                          float _2136 = _2128 * 0.5f;
                          float _2137 = mad(_2131, -1.0f, _2136);
                          float _2138 = mad(_2134, 0.5f, _2137);
                          float _2139 = _2131 - _2128;
                          float _2140 = mad(_2131, 0.5f, _2136);
                          float _2141 = dot(float3(_2135, _2126, 1.0f), float3(_2138, _2139, _2140));
                          _2176 = _2141;
                        } else {
                          bool _2143 = !(_2107 >= _2115);
                          do {
                            if (!_2143) {
                              float _2145 = log2(_1820);
                              float _2146 = _2145 * 0.3010300099849701f;
                              bool _2147 = (_2107 < _2146);
                              if (_2147) {
                                float _2149 = _2106 - _2114;
                                float _2150 = _2149 * 0.9030900001525879f;
                                float _2151 = _2145 - _2114;
                                float _2152 = _2151 * 0.3010300099849701f;
                                float _2153 = _2150 / _2152;
                                int _2154 = int(_2153);
                                float _2155 = float(_2154);
                                float _2156 = _2153 - _2155;
                                float _2158 = _12[_2154];
                                int _2159 = _2154 + 1;
                                float _2161 = _12[_2159];
                                int _2162 = _2154 + 2;
                                float _2164 = _12[_2162];
                                float _2165 = _2156 * _2156;
                                float _2166 = _2158 * 0.5f;
                                float _2167 = mad(_2161, -1.0f, _2166);
                                float _2168 = mad(_2164, 0.5f, _2167);
                                float _2169 = _2161 - _2158;
                                float _2170 = mad(_2161, 0.5f, _2166);
                                float _2171 = dot(float3(_2165, _2156, 1.0f), float3(_2168, _2169, _2170));
                                _2176 = _2171;
                                break;
                              }
                            }
                            float _2173 = log2(_1821);
                            float _2174 = _2173 * 0.3010300099849701f;
                            _2176 = _2174;
                          } while (false);
                        }
                      }
                      float _2177 = _2176 * 3.321928024291992f;
                      float _2178 = exp2(_2177);
                      float _2179 = max(_2028, 1.000000013351432e-10f);
                      float _2180 = log2(_2179);
                      float _2181 = _2180 * 0.3010300099849701f;
                      bool _2182 = !(_2181 <= _2033);
                      do {
                        if (!_2182) {
                          float _2184 = log2(_1819);
                          float _2185 = _2184 * 0.3010300099849701f;
                          _2250 = _2185;
                        } else {
                          bool _2187 = (_2181 > _2033);
                          float _2188 = log2(_1816);
                          float _2189 = _2188 * 0.3010300099849701f;
                          bool _2190 = (_2181 < _2189);
                          bool _2191 = _2187 && _2190;
                          if (_2191) {
                            float _2193 = _2180 - _2032;
                            float _2194 = _2193 * 0.9030900001525879f;
                            float _2195 = _2188 - _2032;
                            float _2196 = _2195 * 0.3010300099849701f;
                            float _2197 = _2194 / _2196;
                            int _2198 = int(_2197);
                            float _2199 = float(_2198);
                            float _2200 = _2197 - _2199;
                            float _2202 = _11[_2198];
                            int _2203 = _2198 + 1;
                            float _2205 = _11[_2203];
                            int _2206 = _2198 + 2;
                            float _2208 = _11[_2206];
                            float _2209 = _2200 * _2200;
                            float _2210 = _2202 * 0.5f;
                            float _2211 = mad(_2205, -1.0f, _2210);
                            float _2212 = mad(_2208, 0.5f, _2211);
                            float _2213 = _2205 - _2202;
                            float _2214 = mad(_2205, 0.5f, _2210);
                            float _2215 = dot(float3(_2209, _2200, 1.0f), float3(_2212, _2213, _2214));
                            _2250 = _2215;
                          } else {
                            bool _2217 = !(_2181 >= _2189);
                            do {
                              if (!_2217) {
                                float _2219 = log2(_1820);
                                float _2220 = _2219 * 0.3010300099849701f;
                                bool _2221 = (_2181 < _2220);
                                if (_2221) {
                                  float _2223 = _2180 - _2188;
                                  float _2224 = _2223 * 0.9030900001525879f;
                                  float _2225 = _2219 - _2188;
                                  float _2226 = _2225 * 0.3010300099849701f;
                                  float _2227 = _2224 / _2226;
                                  int _2228 = int(_2227);
                                  float _2229 = float(_2228);
                                  float _2230 = _2227 - _2229;
                                  float _2232 = _12[_2228];
                                  int _2233 = _2228 + 1;
                                  float _2235 = _12[_2233];
                                  int _2236 = _2228 + 2;
                                  float _2238 = _12[_2236];
                                  float _2239 = _2230 * _2230;
                                  float _2240 = _2232 * 0.5f;
                                  float _2241 = mad(_2235, -1.0f, _2240);
                                  float _2242 = mad(_2238, 0.5f, _2241);
                                  float _2243 = _2235 - _2232;
                                  float _2244 = mad(_2235, 0.5f, _2240);
                                  float _2245 = dot(float3(_2239, _2230, 1.0f), float3(_2242, _2243, _2244));
                                  _2250 = _2245;
                                  break;
                                }
                              }
                              float _2247 = log2(_1821);
                              float _2248 = _2247 * 0.3010300099849701f;
                              _2250 = _2248;
                            } while (false);
                          }
                        }
                        float _2251 = _2250 * 3.321928024291992f;
                        float _2252 = exp2(_2251);
                        float _2253 = _2104 - _1819;
                        float _2254 = _1821 - _1819;
                        float _2255 = _2253 / _2254;
                        float _2256 = _2178 - _1819;
                        float _2257 = _2256 / _2254;
                        float _2258 = _2252 - _1819;
                        float _2259 = _2258 / _2254;
                        float _2260 = _2255 * 0.6624541878700256f;
                        float _2261 = mad(0.13400420546531677f, _2257, _2260);
                        float _2262 = mad(0.15618768334388733f, _2259, _2261);
                        float _2263 = _2255 * 0.2722287178039551f;
                        float _2264 = mad(0.6740817427635193f, _2257, _2263);
                        float _2265 = mad(0.053689517080783844f, _2259, _2264);
                        float _2266 = _2255 * -0.005574649665504694f;
                        float _2267 = mad(0.00406073359772563f, _2257, _2266);
                        float _2268 = mad(1.0103391408920288f, _2259, _2267);
                        float _2269 = _2262 * 1.6410233974456787f;
                        float _2270 = mad(-0.32480329275131226f, _2265, _2269);
                        float _2271 = mad(-0.23642469942569733f, _2268, _2270);
                        float _2272 = _2262 * -0.663662850856781f;
                        float _2273 = mad(1.6153316497802734f, _2265, _2272);
                        float _2274 = mad(0.016756348311901093f, _2268, _2273);
                        float _2275 = _2262 * 0.011721894145011902f;
                        float _2276 = mad(-0.008284442126750946f, _2265, _2275);
                        float _2277 = mad(0.9883948564529419f, _2268, _2276);
                        float _2278 = max(_2271, 0.0f);
                        float _2279 = max(_2274, 0.0f);
                        float _2280 = max(_2277, 0.0f);
                        float _2281 = min(_2278, 1.0f);
                        float _2282 = min(_2279, 1.0f);
                        float _2283 = min(_2280, 1.0f);
                        float _2284 = _2281 * 0.6624541878700256f;
                        float _2285 = mad(0.13400420546531677f, _2282, _2284);
                        float _2286 = mad(0.15618768334388733f, _2283, _2285);
                        float _2287 = _2281 * 0.2722287178039551f;
                        float _2288 = mad(0.6740817427635193f, _2282, _2287);
                        float _2289 = mad(0.053689517080783844f, _2283, _2288);
                        float _2290 = _2281 * -0.005574649665504694f;
                        float _2291 = mad(0.00406073359772563f, _2282, _2290);
                        float _2292 = mad(1.0103391408920288f, _2283, _2291);
                        float _2293 = _2286 * 1.6410233974456787f;
                        float _2294 = mad(-0.32480329275131226f, _2289, _2293);
                        float _2295 = mad(-0.23642469942569733f, _2292, _2294);
                        float _2296 = _2286 * -0.663662850856781f;
                        float _2297 = mad(1.6153316497802734f, _2289, _2296);
                        float _2298 = mad(0.016756348311901093f, _2292, _2297);
                        float _2299 = _2286 * 0.011721894145011902f;
                        float _2300 = mad(-0.008284442126750946f, _2289, _2299);
                        float _2301 = mad(0.9883948564529419f, _2292, _2300);
                        float _2302 = max(_2295, 0.0f);
                        float _2303 = max(_2298, 0.0f);
                        float _2304 = max(_2301, 0.0f);
                        float _2305 = min(_2302, 65535.0f);
                        float _2306 = min(_2303, 65535.0f);
                        float _2307 = min(_2304, 65535.0f);
                        float _2308 = _2305 * _1821;
                        float _2309 = _2306 * _1821;
                        float _2310 = _2307 * _1821;
                        float _2311 = max(_2308, 0.0f);
                        float _2312 = max(_2309, 0.0f);
                        float _2313 = max(_2310, 0.0f);
                        float _2314 = min(_2311, 65535.0f);
                        float _2315 = min(_2312, 65535.0f);
                        float _2316 = min(_2313, 65535.0f);
                        bool _2317 = (_1086 == 6);
                        _2329 = _2314;
                        _2330 = _2315;
                        _2331 = _2316;
                        do {
                          if (!_2317) {
                            float _2319 = _2314 * _49;
                            float _2320 = mad(_50, _2315, _2319);
                            float _2321 = mad(_51, _2316, _2320);
                            float _2322 = _2314 * _52;
                            float _2323 = mad(_53, _2315, _2322);
                            float _2324 = mad(_54, _2316, _2323);
                            float _2325 = _2314 * _55;
                            float _2326 = mad(_56, _2315, _2325);
                            float _2327 = mad(_57, _2316, _2326);
                            _2329 = _2321;
                            _2330 = _2324;
                            _2331 = _2327;
                          }
                          float _2332 = _2329 * 9.999999747378752e-05f;
                          float _2333 = _2330 * 9.999999747378752e-05f;
                          float _2334 = _2331 * 9.999999747378752e-05f;
                          float _2335 = log2(_2332);
                          float _2336 = log2(_2333);
                          float _2337 = log2(_2334);
                          float _2338 = _2335 * 0.1593017578125f;
                          float _2339 = _2336 * 0.1593017578125f;
                          float _2340 = _2337 * 0.1593017578125f;
                          float _2341 = exp2(_2338);
                          float _2342 = exp2(_2339);
                          float _2343 = exp2(_2340);
                          float _2344 = _2341 * 18.8515625f;
                          float _2345 = _2342 * 18.8515625f;
                          float _2346 = _2343 * 18.8515625f;
                          float _2347 = _2344 + 0.8359375f;
                          float _2348 = _2345 + 0.8359375f;
                          float _2349 = _2346 + 0.8359375f;
                          float _2350 = _2341 * 18.6875f;
                          float _2351 = _2342 * 18.6875f;
                          float _2352 = _2343 * 18.6875f;
                          float _2353 = _2350 + 1.0f;
                          float _2354 = _2351 + 1.0f;
                          float _2355 = _2352 + 1.0f;
                          float _2356 = 1.0f / _2353;
                          float _2357 = 1.0f / _2354;
                          float _2358 = 1.0f / _2355;
                          float _2359 = _2356 * _2347;
                          float _2360 = _2357 * _2348;
                          float _2361 = _2358 * _2349;
                          float _2362 = log2(_2359);
                          float _2363 = log2(_2360);
                          float _2364 = log2(_2361);
                          float _2365 = _2362 * 78.84375f;
                          float _2366 = _2363 * 78.84375f;
                          float _2367 = _2364 * 78.84375f;
                          float _2368 = exp2(_2365);
                          float _2369 = exp2(_2366);
                          float _2370 = exp2(_2367);
                          _2508 = _2368;
                          _2509 = _2369;
                          _2510 = _2370;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2372 = (_1086 == 7);
          if (_2372) {
            float _2375 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2376 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2377 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2379 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2380 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2381 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2383 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2384 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2385 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2386 = _2375 * _1068;
            float _2387 = mad(_2376, _1069, _2386);
            float _2388 = mad(_2377, _1070, _2387);
            float _2389 = _2379 * _1068;
            float _2390 = mad(_2380, _1069, _2389);
            float _2391 = mad(_2381, _1070, _2390);
            float _2392 = _2383 * _1068;
            float _2393 = mad(_2384, _1069, _2392);
            float _2394 = mad(_2385, _1070, _2393);
            float _2395 = _2388 * _49;
            float _2396 = mad(_50, _2391, _2395);
            float _2397 = mad(_51, _2394, _2396);
            float _2398 = _2388 * _52;
            float _2399 = mad(_53, _2391, _2398);
            float _2400 = mad(_54, _2394, _2399);
            float _2401 = _2388 * _55;
            float _2402 = mad(_56, _2391, _2401);
            float _2403 = mad(_57, _2394, _2402);
            float _2404 = _2397 * 9.999999747378752e-05f;
            float _2405 = _2400 * 9.999999747378752e-05f;
            float _2406 = _2403 * 9.999999747378752e-05f;
            float _2407 = log2(_2404);
            float _2408 = log2(_2405);
            float _2409 = log2(_2406);
            float _2410 = _2407 * 0.1593017578125f;
            float _2411 = _2408 * 0.1593017578125f;
            float _2412 = _2409 * 0.1593017578125f;
            float _2413 = exp2(_2410);
            float _2414 = exp2(_2411);
            float _2415 = exp2(_2412);
            float _2416 = _2413 * 18.8515625f;
            float _2417 = _2414 * 18.8515625f;
            float _2418 = _2415 * 18.8515625f;
            float _2419 = _2416 + 0.8359375f;
            float _2420 = _2417 + 0.8359375f;
            float _2421 = _2418 + 0.8359375f;
            float _2422 = _2413 * 18.6875f;
            float _2423 = _2414 * 18.6875f;
            float _2424 = _2415 * 18.6875f;
            float _2425 = _2422 + 1.0f;
            float _2426 = _2423 + 1.0f;
            float _2427 = _2424 + 1.0f;
            float _2428 = 1.0f / _2425;
            float _2429 = 1.0f / _2426;
            float _2430 = 1.0f / _2427;
            float _2431 = _2428 * _2419;
            float _2432 = _2429 * _2420;
            float _2433 = _2430 * _2421;
            float _2434 = log2(_2431);
            float _2435 = log2(_2432);
            float _2436 = log2(_2433);
            float _2437 = _2434 * 78.84375f;
            float _2438 = _2435 * 78.84375f;
            float _2439 = _2436 * 78.84375f;
            float _2440 = exp2(_2437);
            float _2441 = exp2(_2438);
            float _2442 = exp2(_2439);
            _2508 = _2440;
            _2509 = _2441;
            _2510 = _2442;
          } else {
            bool _2444 = (_1086 == 8);
            _2508 = _1068;
            _2509 = _1069;
            _2510 = _1070;
            if (!_2444) {
              bool _2446 = (_1086 == 9);
              float _2448 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2449 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2450 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2452 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2453 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2454 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2456 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2457 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2458 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2446) {
                float _2460 = _2448 * _1056;
                float _2461 = mad(_2449, _1057, _2460);
                float _2462 = mad(_2450, _1058, _2461);
                float _2463 = _2452 * _1056;
                float _2464 = mad(_2453, _1057, _2463);
                float _2465 = mad(_2454, _1058, _2464);
                float _2466 = _2456 * _1056;
                float _2467 = mad(_2457, _1057, _2466);
                float _2468 = mad(_2458, _1058, _2467);
                float _2469 = _2462 * _49;
                float _2470 = mad(_50, _2465, _2469);
                float _2471 = mad(_51, _2468, _2470);
                float _2472 = _2462 * _52;
                float _2473 = mad(_53, _2465, _2472);
                float _2474 = mad(_54, _2468, _2473);
                float _2475 = _2462 * _55;
                float _2476 = mad(_56, _2465, _2475);
                float _2477 = mad(_57, _2468, _2476);
                _2508 = _2471;
                _2509 = _2474;
                _2510 = _2477;
              } else {
                float _2479 = _2448 * _1082;
                float _2480 = mad(_2449, _1083, _2479);
                float _2481 = mad(_2450, _1084, _2480);
                float _2482 = _2452 * _1082;
                float _2483 = mad(_2453, _1083, _2482);
                float _2484 = mad(_2454, _1084, _2483);
                float _2485 = _2456 * _1082;
                float _2486 = mad(_2457, _1083, _2485);
                float _2487 = mad(_2458, _1084, _2486);
                float _2488 = _2481 * _49;
                float _2489 = mad(_50, _2484, _2488);
                float _2490 = mad(_51, _2487, _2489);
                float _2491 = _2481 * _52;
                float _2492 = mad(_53, _2484, _2491);
                float _2493 = mad(_54, _2487, _2492);
                float _2494 = _2481 * _55;
                float _2495 = mad(_56, _2484, _2494);
                float _2496 = mad(_57, _2487, _2495);
                float _2497 = _RootShaderParameters_040z;
                float _2498 = log2(_2490);
                float _2499 = log2(_2493);
                float _2500 = log2(_2496);
                float _2501 = _2498 * _2497;
                float _2502 = _2499 * _2497;
                float _2503 = _2500 * _2497;
                float _2504 = exp2(_2501);
                float _2505 = exp2(_2502);
                float _2506 = exp2(_2503);
                _2508 = _2504;
                _2509 = _2505;
                _2510 = _2506;
              }
            }
          }
        }
      }
    }
  }
  float _2511 = _2508 * 0.9523810148239136f;
  float _2512 = _2509 * 0.9523810148239136f;
  float _2513 = _2510 * 0.9523810148239136f;
  // _2514 = _1;

  // CustomEdit
  RWOutputTexture[int3(_8, _9, _10)] = float4(_2511, _2512, _2513, 0.0f);
}
