#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

Texture2D<float4> Textures_2 : register(t1);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_005z : packoffset(c005.z);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

SamplerState Samplers_2 : register(s1);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_2;
  // texture _3 = Textures_1;
  // SamplerState _4 = Samplers_2;
  // SamplerState _5 = Samplers_1;
  // cbuffer _6 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _7 = _RootShaderParameters;
  // _8 = _6;
  // _9 = _7;
  float _13[6];
  float _14[6];
  float _15[6];
  float _16[6];
  float _17 = float(_10);
  float _18 = float(_11);
  float _19 = _17 + 0.5f;
  float _20 = _18 + 0.5f;
  float _22 = _RootShaderParameters_042x;
  float _23 = _RootShaderParameters_042y;
  float _24 = _22 * _19;
  float _25 = _23 * _20;
  float _26 = _24 + -0.015625f;
  float _27 = _25 + -0.015625f;
  float _28 = _26 * 1.0322580337524414f;
  float _29 = _27 * 1.0322580337524414f;
  float _30 = float(_12);
  float _31 = _30 * 0.032258063554763794f;
  uint _33 = _RootShaderParameters_041x;
  bool _34 = (_33 == 1);
  float _51 = 1.379158854484558f;
  float _52 = -0.3088507056236267f;
  float _53 = -0.07034677267074585f;
  float _54 = -0.06933528929948807f;
  float _55 = 1.0822921991348267f;
  float _56 = -0.012962047010660172f;
  float _57 = -0.002159259282052517f;
  float _58 = -0.045465391129255295f;
  float _59 = 1.0477596521377563f;
  float _117;
  float _118;
  float _119;
  float _643;
  float _679;
  float _690;
  float _754;
  float _933;
  float _944;
  float _955;
  float _1152;
  float _1153;
  float _1154;
  float _1165;
  float _1176;
  float _1358;
  float _1394;
  float _1405;
  float _1444;
  float _1554;
  float _1628;
  float _1702;
  float _1781;
  float _1782;
  float _1783;
  float _1934;
  float _1970;
  float _1981;
  float _2020;
  float _2130;
  float _2204;
  float _2278;
  float _2357;
  float _2358;
  float _2359;
  float _2536;
  float _2537;
  float _2538;
  if (!_34) {
    bool _36 = (_33 == 2);
    _51 = 1.02579927444458f;
    _52 = -0.020052503794431686f;
    _53 = -0.0057713985443115234f;
    _54 = -0.0022350111976265907f;
    _55 = 1.0045825242996216f;
    _56 = -0.002352306619286537f;
    _57 = -0.005014004185795784f;
    _58 = -0.025293385609984398f;
    _59 = 1.0304402112960815f;
    if (!_36) {
      bool _38 = (_33 == 3);
      _51 = 0.6954522132873535f;
      _52 = 0.14067870378494263f;
      _53 = 0.16386906802654266f;
      _54 = 0.044794563204050064f;
      _55 = 0.8596711158752441f;
      _56 = 0.0955343171954155f;
      _57 = -0.005525882821530104f;
      _58 = 0.004025210160762072f;
      _59 = 1.0015007257461548f;
      if (!_38) {
        bool _40 = (_33 == 4);
        float _41 = _40 ? 1.0f : 1.7050515413284302f;
        float _42 = _40 ? 0.0f : -0.6217905879020691f;
        float _43 = _40 ? 0.0f : -0.0832584798336029f;
        float _44 = _40 ? 0.0f : -0.13025718927383423f;
        float _45 = _40 ? 1.0f : 1.1408027410507202f;
        float _46 = _40 ? 0.0f : -0.010548528283834457f;
        float _47 = _40 ? 0.0f : -0.024003278464078903f;
        float _48 = _40 ? 0.0f : -0.1289687603712082f;
        float _49 = _40 ? 1.0f : 1.152971863746643f;
        _51 = _41;
        _52 = _42;
        _53 = _43;
        _54 = _44;
        _55 = _45;
        _56 = _46;
        _57 = _47;
        _58 = _48;
        _59 = _49;
      }
    }
  }
  uint _61 = _RootShaderParameters_040w;
  bool _62 = (_61 > 2);
  if (_62) {
    float _64 = log2(_28);
    float _65 = log2(_29);
    float _66 = log2(_31);
    float _67 = _64 * 0.012683313339948654f;
    float _68 = _65 * 0.012683313339948654f;
    float _69 = _66 * 0.012683313339948654f;
    float _70 = exp2(_67);
    float _71 = exp2(_68);
    float _72 = exp2(_69);
    float _73 = _70 + -0.8359375f;
    float _74 = _71 + -0.8359375f;
    float _75 = _72 + -0.8359375f;
    float _76 = max(0.0f, _73);
    float _77 = max(0.0f, _74);
    float _78 = max(0.0f, _75);
    float _79 = _70 * 18.6875f;
    float _80 = _71 * 18.6875f;
    float _81 = _72 * 18.6875f;
    float _82 = 18.8515625f - _79;
    float _83 = 18.8515625f - _80;
    float _84 = 18.8515625f - _81;
    float _85 = _76 / _82;
    float _86 = _77 / _83;
    float _87 = _78 / _84;
    float _88 = log2(_85);
    float _89 = log2(_86);
    float _90 = log2(_87);
    float _91 = _88 * 6.277394771575928f;
    float _92 = _89 * 6.277394771575928f;
    float _93 = _90 * 6.277394771575928f;
    float _94 = exp2(_91);
    float _95 = exp2(_92);
    float _96 = exp2(_93);
    float _97 = _94 * 100.0f;
    float _98 = _95 * 100.0f;
    float _99 = _96 * 100.0f;
    _117 = _97;
    _118 = _98;
    _119 = _99;
  } else {
    float _101 = _26 * 14.45161247253418f;
    float _102 = _101 + -6.07624626159668f;
    float _103 = _27 * 14.45161247253418f;
    float _104 = _103 + -6.07624626159668f;
    float _105 = _30 * 0.4516128897666931f;
    float _106 = _105 + -6.07624626159668f;
    float _107 = exp2(_102);
    float _108 = exp2(_104);
    float _109 = exp2(_106);
    float _110 = _107 * 0.18000000715255737f;
    float _111 = _108 * 0.18000000715255737f;
    float _112 = _109 * 0.18000000715255737f;
    float _113 = _110 + -0.002667719265446067f;
    float _114 = _111 + -0.002667719265446067f;
    float _115 = _112 + -0.002667719265446067f;
    _117 = _113;
    _118 = _114;
    _119 = _115;
  }
  float3 input_color = float3(_117, _118, _119);  // CustomEdit

  float _121 = UniformBufferConstants_WorkingColorSpace_008x;
  float _122 = UniformBufferConstants_WorkingColorSpace_008y;
  float _123 = UniformBufferConstants_WorkingColorSpace_008z;
  float _125 = UniformBufferConstants_WorkingColorSpace_009x;
  float _126 = UniformBufferConstants_WorkingColorSpace_009y;
  float _127 = UniformBufferConstants_WorkingColorSpace_009z;
  float _129 = UniformBufferConstants_WorkingColorSpace_010x;
  float _130 = UniformBufferConstants_WorkingColorSpace_010y;
  float _131 = UniformBufferConstants_WorkingColorSpace_010z;
  float _132 = _121 * _117;
  float _133 = mad(_122, _118, _132);
  float _134 = mad(_123, _119, _133);
  float _135 = _125 * _117;
  float _136 = mad(_126, _118, _135);
  float _137 = mad(_127, _119, _136);
  float _138 = _129 * _117;
  float _139 = mad(_130, _118, _138);
  float _140 = mad(_131, _119, _139);
  float _141 = dot(float3(_134, _137, _140), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _142 = _134 / _141;
  float _143 = _137 / _141;
  float _144 = _140 / _141;
  float _145 = _142 + -1.0f;
  float _146 = _143 + -1.0f;
  float _147 = _144 + -1.0f;
  float _148 = dot(float3(_145, _146, _147), float3(_145, _146, _147));
  float _149 = _148 * -4.0f;
  float _150 = exp2(_149);
  float _151 = 1.0f - _150;
  float _153 = _RootShaderParameters_036z;
  float _154 = _141 * _141;
  float _155 = _154 * -4.0f;
  float _156 = _155 * _153;
  float _157 = exp2(_156);
  float _158 = 1.0f - _157;
  float _159 = _158 * _151;
  float _160 = _134 * 1.370412826538086f;
  float _161 = mad(-0.32929131388664246f, _137, _160);
  float _162 = mad(-0.06368283927440643f, _140, _161);
  float _163 = _134 * -0.08343426138162613f;
  float _164 = mad(1.0970908403396606f, _137, _163);
  float _165 = mad(-0.010861567221581936f, _140, _164);
  float _166 = _134 * -0.02579325996339321f;
  float _167 = mad(-0.09862564504146576f, _137, _166);
  float _168 = mad(1.203694462776184f, _140, _167);
  float _169 = _162 - _134;
  float _170 = _165 - _137;
  float _171 = _168 - _140;
  float _172 = _169 * _159;
  float _173 = _170 * _159;
  float _174 = _171 * _159;
  float _175 = _172 + _134;
  float _176 = _173 + _137;
  float _177 = _174 + _140;
  float _178 = dot(float3(_175, _176, _177), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _180 = _RootShaderParameters_024x;
  float _181 = _RootShaderParameters_024y;
  float _182 = _RootShaderParameters_024z;
  float _183 = _RootShaderParameters_024w;
  float _185 = _RootShaderParameters_019x;
  float _186 = _RootShaderParameters_019y;
  float _187 = _RootShaderParameters_019z;
  float _188 = _RootShaderParameters_019w;
  float _189 = _185 + _180;
  float _190 = _186 + _181;
  float _191 = _187 + _182;
  float _192 = _188 + _183;
  float _194 = _RootShaderParameters_023x;
  float _195 = _RootShaderParameters_023y;
  float _196 = _RootShaderParameters_023z;
  float _197 = _RootShaderParameters_023w;
  float _199 = _RootShaderParameters_018x;
  float _200 = _RootShaderParameters_018y;
  float _201 = _RootShaderParameters_018z;
  float _202 = _RootShaderParameters_018w;
  float _203 = _199 * _194;
  float _204 = _200 * _195;
  float _205 = _201 * _196;
  float _206 = _202 * _197;
  float _208 = _RootShaderParameters_022x;
  float _209 = _RootShaderParameters_022y;
  float _210 = _RootShaderParameters_022z;
  float _211 = _RootShaderParameters_022w;
  float _213 = _RootShaderParameters_017x;
  float _214 = _RootShaderParameters_017y;
  float _215 = _RootShaderParameters_017z;
  float _216 = _RootShaderParameters_017w;
  float _217 = _213 * _208;
  float _218 = _214 * _209;
  float _219 = _215 * _210;
  float _220 = _216 * _211;
  float _222 = _RootShaderParameters_021x;
  float _223 = _RootShaderParameters_021y;
  float _224 = _RootShaderParameters_021z;
  float _225 = _RootShaderParameters_021w;
  float _227 = _RootShaderParameters_016x;
  float _228 = _RootShaderParameters_016y;
  float _229 = _RootShaderParameters_016z;
  float _230 = _RootShaderParameters_016w;
  float _231 = _227 * _222;
  float _232 = _228 * _223;
  float _233 = _229 * _224;
  float _234 = _230 * _225;
  float _236 = _RootShaderParameters_020x;
  float _237 = _RootShaderParameters_020y;
  float _238 = _RootShaderParameters_020z;
  float _239 = _RootShaderParameters_020w;
  float _241 = _RootShaderParameters_015x;
  float _242 = _RootShaderParameters_015y;
  float _243 = _RootShaderParameters_015z;
  float _244 = _RootShaderParameters_015w;
  float _245 = _241 * _236;
  float _246 = _242 * _237;
  float _247 = _243 * _238;
  float _248 = _244 * _239;
  float _249 = _245 * _248;
  float _250 = _246 * _248;
  float _251 = _247 * _248;
  float _252 = _175 - _178;
  float _253 = _176 - _178;
  float _254 = _177 - _178;
  float _255 = _249 * _252;
  float _256 = _250 * _253;
  float _257 = _251 * _254;
  float _258 = _255 + _178;
  float _259 = _256 + _178;
  float _260 = _257 + _178;
  float _261 = max(0.0f, _258);
  float _262 = max(0.0f, _259);
  float _263 = max(0.0f, _260);
  float _264 = _231 * _234;
  float _265 = _232 * _234;
  float _266 = _233 * _234;
  float _267 = _261 * 5.55555534362793f;
  float _268 = _262 * 5.55555534362793f;
  float _269 = _263 * 5.55555534362793f;
  float _270 = log2(_267);
  float _271 = log2(_268);
  float _272 = log2(_269);
  float _273 = _264 * _270;
  float _274 = _265 * _271;
  float _275 = _266 * _272;
  float _276 = exp2(_273);
  float _277 = exp2(_274);
  float _278 = exp2(_275);
  float _279 = _276 * 0.18000000715255737f;
  float _280 = _277 * 0.18000000715255737f;
  float _281 = _278 * 0.18000000715255737f;
  float _282 = _217 * _220;
  float _283 = _218 * _220;
  float _284 = _219 * _220;
  float _285 = 1.0f / _282;
  float _286 = 1.0f / _283;
  float _287 = 1.0f / _284;
  float _288 = log2(_279);
  float _289 = log2(_280);
  float _290 = log2(_281);
  float _291 = _288 * _285;
  float _292 = _289 * _286;
  float _293 = _290 * _287;
  float _294 = exp2(_291);
  float _295 = exp2(_292);
  float _296 = exp2(_293);
  float _297 = _203 * _206;
  float _298 = _204 * _206;
  float _299 = _205 * _206;
  float _300 = _297 * _294;
  float _301 = _298 * _295;
  float _302 = _299 * _296;
  float _303 = _189 + _192;
  float _304 = _190 + _192;
  float _305 = _191 + _192;
  float _306 = _303 + _300;
  float _307 = _304 + _301;
  float _308 = _305 + _302;
  float _310 = _RootShaderParameters_035z;
  float _311 = _178 / _310;
  float _312 = saturate(_311);
  float _313 = _312 * 2.0f;
  float _314 = 3.0f - _313;
  float _315 = _312 * _312;
  float _316 = _315 * _314;
  float _317 = 1.0f - _316;
  float _319 = _RootShaderParameters_034x;
  float _320 = _RootShaderParameters_034y;
  float _321 = _RootShaderParameters_034z;
  float _322 = _RootShaderParameters_034w;
  float _323 = _185 + _319;
  float _324 = _186 + _320;
  float _325 = _187 + _321;
  float _326 = _188 + _322;
  float _328 = _RootShaderParameters_033x;
  float _329 = _RootShaderParameters_033y;
  float _330 = _RootShaderParameters_033z;
  float _331 = _RootShaderParameters_033w;
  float _332 = _199 * _328;
  float _333 = _200 * _329;
  float _334 = _201 * _330;
  float _335 = _202 * _331;
  float _337 = _RootShaderParameters_032x;
  float _338 = _RootShaderParameters_032y;
  float _339 = _RootShaderParameters_032z;
  float _340 = _RootShaderParameters_032w;
  float _341 = _213 * _337;
  float _342 = _214 * _338;
  float _343 = _215 * _339;
  float _344 = _216 * _340;
  float _346 = _RootShaderParameters_031x;
  float _347 = _RootShaderParameters_031y;
  float _348 = _RootShaderParameters_031z;
  float _349 = _RootShaderParameters_031w;
  float _350 = _227 * _346;
  float _351 = _228 * _347;
  float _352 = _229 * _348;
  float _353 = _230 * _349;
  float _355 = _RootShaderParameters_030x;
  float _356 = _RootShaderParameters_030y;
  float _357 = _RootShaderParameters_030z;
  float _358 = _RootShaderParameters_030w;
  float _359 = _241 * _355;
  float _360 = _242 * _356;
  float _361 = _243 * _357;
  float _362 = _244 * _358;
  float _363 = _359 * _362;
  float _364 = _360 * _362;
  float _365 = _361 * _362;
  float _366 = _363 * _252;
  float _367 = _364 * _253;
  float _368 = _365 * _254;
  float _369 = _366 + _178;
  float _370 = _367 + _178;
  float _371 = _368 + _178;
  float _372 = max(0.0f, _369);
  float _373 = max(0.0f, _370);
  float _374 = max(0.0f, _371);
  float _375 = _350 * _353;
  float _376 = _351 * _353;
  float _377 = _352 * _353;
  float _378 = _372 * 5.55555534362793f;
  float _379 = _373 * 5.55555534362793f;
  float _380 = _374 * 5.55555534362793f;
  float _381 = log2(_378);
  float _382 = log2(_379);
  float _383 = log2(_380);
  float _384 = _375 * _381;
  float _385 = _376 * _382;
  float _386 = _377 * _383;
  float _387 = exp2(_384);
  float _388 = exp2(_385);
  float _389 = exp2(_386);
  float _390 = _387 * 0.18000000715255737f;
  float _391 = _388 * 0.18000000715255737f;
  float _392 = _389 * 0.18000000715255737f;
  float _393 = _341 * _344;
  float _394 = _342 * _344;
  float _395 = _343 * _344;
  float _396 = 1.0f / _393;
  float _397 = 1.0f / _394;
  float _398 = 1.0f / _395;
  float _399 = log2(_390);
  float _400 = log2(_391);
  float _401 = log2(_392);
  float _402 = _399 * _396;
  float _403 = _400 * _397;
  float _404 = _401 * _398;
  float _405 = exp2(_402);
  float _406 = exp2(_403);
  float _407 = exp2(_404);
  float _408 = _332 * _335;
  float _409 = _333 * _335;
  float _410 = _334 * _335;
  float _411 = _408 * _405;
  float _412 = _409 * _406;
  float _413 = _410 * _407;
  float _414 = _323 + _326;
  float _415 = _324 + _326;
  float _416 = _325 + _326;
  float _417 = _414 + _411;
  float _418 = _415 + _412;
  float _419 = _416 + _413;
  float _420 = _RootShaderParameters_036x;
  float _421 = _RootShaderParameters_035w;
  float _422 = _420 - _421;
  float _423 = _178 - _421;
  float _424 = _423 / _422;
  float _425 = saturate(_424);
  float _426 = _425 * 2.0f;
  float _427 = 3.0f - _426;
  float _428 = _425 * _425;
  float _429 = _428 * _427;
  float _431 = _RootShaderParameters_029x;
  float _432 = _RootShaderParameters_029y;
  float _433 = _RootShaderParameters_029z;
  float _434 = _RootShaderParameters_029w;
  float _435 = _185 + _431;
  float _436 = _186 + _432;
  float _437 = _187 + _433;
  float _438 = _188 + _434;
  float _440 = _RootShaderParameters_028x;
  float _441 = _RootShaderParameters_028y;
  float _442 = _RootShaderParameters_028z;
  float _443 = _RootShaderParameters_028w;
  float _444 = _199 * _440;
  float _445 = _200 * _441;
  float _446 = _201 * _442;
  float _447 = _202 * _443;
  float _449 = _RootShaderParameters_027x;
  float _450 = _RootShaderParameters_027y;
  float _451 = _RootShaderParameters_027z;
  float _452 = _RootShaderParameters_027w;
  float _453 = _213 * _449;
  float _454 = _214 * _450;
  float _455 = _215 * _451;
  float _456 = _216 * _452;
  float _458 = _RootShaderParameters_026x;
  float _459 = _RootShaderParameters_026y;
  float _460 = _RootShaderParameters_026z;
  float _461 = _RootShaderParameters_026w;
  float _462 = _227 * _458;
  float _463 = _228 * _459;
  float _464 = _229 * _460;
  float _465 = _230 * _461;
  float _467 = _RootShaderParameters_025x;
  float _468 = _RootShaderParameters_025y;
  float _469 = _RootShaderParameters_025z;
  float _470 = _RootShaderParameters_025w;
  float _471 = _241 * _467;
  float _472 = _242 * _468;
  float _473 = _243 * _469;
  float _474 = _244 * _470;
  float _475 = _471 * _474;
  float _476 = _472 * _474;
  float _477 = _473 * _474;
  float _478 = _475 * _252;
  float _479 = _476 * _253;
  float _480 = _477 * _254;
  float _481 = _478 + _178;
  float _482 = _479 + _178;
  float _483 = _480 + _178;
  float _484 = max(0.0f, _481);
  float _485 = max(0.0f, _482);
  float _486 = max(0.0f, _483);
  float _487 = _462 * _465;
  float _488 = _463 * _465;
  float _489 = _464 * _465;
  float _490 = _484 * 5.55555534362793f;
  float _491 = _485 * 5.55555534362793f;
  float _492 = _486 * 5.55555534362793f;
  float _493 = log2(_490);
  float _494 = log2(_491);
  float _495 = log2(_492);
  float _496 = _487 * _493;
  float _497 = _488 * _494;
  float _498 = _489 * _495;
  float _499 = exp2(_496);
  float _500 = exp2(_497);
  float _501 = exp2(_498);
  float _502 = _499 * 0.18000000715255737f;
  float _503 = _500 * 0.18000000715255737f;
  float _504 = _501 * 0.18000000715255737f;
  float _505 = _453 * _456;
  float _506 = _454 * _456;
  float _507 = _455 * _456;
  float _508 = 1.0f / _505;
  float _509 = 1.0f / _506;
  float _510 = 1.0f / _507;
  float _511 = log2(_502);
  float _512 = log2(_503);
  float _513 = log2(_504);
  float _514 = _511 * _508;
  float _515 = _512 * _509;
  float _516 = _513 * _510;
  float _517 = exp2(_514);
  float _518 = exp2(_515);
  float _519 = exp2(_516);
  float _520 = _444 * _447;
  float _521 = _445 * _447;
  float _522 = _446 * _447;
  float _523 = _520 * _517;
  float _524 = _521 * _518;
  float _525 = _522 * _519;
  float _526 = _435 + _438;
  float _527 = _436 + _438;
  float _528 = _437 + _438;
  float _529 = _526 + _523;
  float _530 = _527 + _524;
  float _531 = _528 + _525;
  float _532 = _316 - _429;
  float _533 = _317 * _306;
  float _534 = _317 * _307;
  float _535 = _317 * _308;
  float _536 = _529 * _532;
  float _537 = _530 * _532;
  float _538 = _531 * _532;
  float _539 = _429 * _417;
  float _540 = _429 * _418;
  float _541 = _429 * _419;
  float _542 = _539 + _533;
  float _543 = _542 + _536;
  float _544 = _540 + _534;
  float _545 = _544 + _537;
  float _546 = _541 + _535;
  float _547 = _546 + _538;
  float _549 = UniformBufferConstants_WorkingColorSpace_012x;
  float _550 = UniformBufferConstants_WorkingColorSpace_012y;
  float _551 = UniformBufferConstants_WorkingColorSpace_012z;
  float _553 = UniformBufferConstants_WorkingColorSpace_013x;
  float _554 = UniformBufferConstants_WorkingColorSpace_013y;
  float _555 = UniformBufferConstants_WorkingColorSpace_013z;
  float _557 = UniformBufferConstants_WorkingColorSpace_014x;
  float _558 = UniformBufferConstants_WorkingColorSpace_014y;
  float _559 = UniformBufferConstants_WorkingColorSpace_014z;
  float _560 = _543 * _549;
  float _561 = mad(_550, _545, _560);
  float _562 = mad(_551, _547, _561);
  float _563 = _553 * _543;
  float _564 = mad(_554, _545, _563);
  float _565 = mad(_555, _547, _564);
  float _566 = _557 * _543;
  float _567 = mad(_558, _545, _566);
  float _568 = mad(_559, _547, _567);
  float _569 = _RootShaderParameters_036y;
  float _570 = _543 * 0.9386394023895264f;
  float _571 = mad(-4.540197551250458e-09f, _545, _570);
  float _572 = mad(0.061360642313957214f, _547, _571);
  float _573 = _543 * 6.775371730327606e-08f;
  float _574 = mad(0.8307942152023315f, _545, _573);
  float _575 = mad(0.169205904006958f, _547, _574);
  float _576 = _543 * -9.313225746154785e-10f;
  float _577 = mad(-2.3283064365386963e-10f, _545, _576);
  float _578 = _572 - _543;
  float _579 = _575 - _545;
  float _580 = _578 * _569;
  float _581 = _579 * _569;
  float _582 = _577 * _569;
  float _583 = _580 + _543;
  float _584 = _581 + _545;
  float _585 = _582 + _547;
  float3 ap1_graded_color = float3(_583, _584, _585);  // CustomEdit

  float _586 = _583 * 0.6954522132873535f;
  float _587 = mad(0.14067868888378143f, _584, _586);
  float _588 = mad(0.16386905312538147f, _585, _587);
  float _589 = _583 * 0.044794581830501556f;
  float _590 = mad(0.8596711158752441f, _584, _589);
  float _591 = mad(0.0955343246459961f, _585, _590);
  float _592 = _583 * -0.005525882821530104f;
  float _593 = mad(0.004025210160762072f, _584, _592);
  float _594 = mad(1.0015007257461548f, _585, _593);
  float _595 = min(_588, _591);
  float _596 = min(_595, _594);
  float _597 = max(_588, _591);
  float _598 = max(_597, _594);
  float _599 = max(_598, 1.000000013351432e-10f);
  float _600 = max(_596, 1.000000013351432e-10f);
  float _601 = _599 - _600;
  float _602 = max(_598, 0.009999999776482582f);
  float _603 = _601 / _602;
  float _604 = _594 - _591;
  float _605 = _604 * _594;
  float _606 = _591 - _588;
  float _607 = _606 * _591;
  float _608 = _605 + _607;
  float _609 = _588 - _594;
  float _610 = _609 * _588;
  float _611 = _608 + _610;
  float _612 = sqrt(_611);
  float _613 = _612 * 1.75f;
  float _614 = _591 + _588;
  float _615 = _614 + _594;
  float _616 = _615 + _613;
  float _617 = _616 * 0.3333333432674408f;
  float _618 = _603 + -0.4000000059604645f;
  float _619 = _618 * 5.0f;
  float _620 = _618 * 2.5f;
  float _621 = abs(_620);
  float _622 = 1.0f - _621;
  float _623 = max(_622, 0.0f);
  bool _624 = (_619 > 0.0f);
  bool _625 = (_619 < 0.0f);
  int _626 = int(_624);
  int _627 = int(_625);
  int _628 = _626 - _627;
  float _629 = float(_628);
  float _630 = _623 * _623;
  float _631 = 1.0f - _630;
  float _632 = _629 * _631;
  float _633 = _632 + 1.0f;
  float _634 = _633 * 0.02500000037252903f;
  bool _635 = !(_617 <= 0.0533333346247673f);
  _643 = _634;
  if (_635) {
    bool _637 = !(_617 >= 0.1599999964237213f);
    _643 = 0.0f;
    if (_637) {
      float _639 = 0.23999999463558197f / _616;
      float _640 = _639 + -0.5f;
      float _641 = _640 * _634;
      _643 = _641;
    }
  }
  float _644 = _643 + 1.0f;
  float _645 = _644 * _588;
  float _646 = _644 * _591;
  float _647 = _644 * _594;
  bool _648 = (_645 == _646);
  bool _649 = (_646 == _647);
  bool _650 = _648 && _649;
  _679 = 0.0f;
  if (!_650) {
    float _652 = _645 * 2.0f;
    float _653 = _652 - _646;
    float _654 = _653 - _647;
    float _655 = _591 - _594;
    float _656 = _655 * 1.7320507764816284f;
    float _657 = _656 * _644;
    float _658 = _657 / _654;
    float _659 = atan(_658);
    float _660 = _659 + 3.1415927410125732f;
    float _661 = _659 + -3.1415927410125732f;
    bool _662 = (_654 < 0.0f);
    bool _663 = (_654 == 0.0f);
    bool _664 = (_657 >= 0.0f);
    bool _665 = (_657 < 0.0f);
    bool _666 = _664 && _662;
    float _667 = _666 ? _660 : _659;
    bool _668 = _665 && _662;
    float _669 = _668 ? _661 : _667;
    bool _670 = _665 && _663;
    bool _671 = _664 && _663;
    float _672 = _669 * 57.2957763671875f;
    float _673 = _670 ? -90.0f : _672;
    float _674 = _671 ? 90.0f : _673;
    bool _675 = (_674 < 0.0f);
    _679 = _674;
    if (_675) {
      float _677 = _674 + 360.0f;
      _679 = _677;
    }
  }
  float _680 = max(_679, 0.0f);
  float _681 = min(_680, 360.0f);
  bool _682 = (_681 < -180.0f);
  if (_682) {
    float _684 = _681 + 360.0f;
    _690 = _684;
  } else {
    bool _686 = (_681 > 180.0f);
    _690 = _681;
    if (_686) {
      float _688 = _681 + -360.0f;
      _690 = _688;
    }
  }
  float _691 = _690 * 0.014814814552664757f;
  float _692 = abs(_691);
  float _693 = 1.0f - _692;
  float _694 = saturate(_693);
  float _695 = _694 * 2.0f;
  float _696 = 3.0f - _695;
  float _697 = _694 * _694;
  float _698 = _697 * _696;
  float _699 = 0.029999999329447746f - _645;
  float _700 = _603 * 0.18000000715255737f;
  float _701 = _700 * _699;
  float _702 = _698 * _698;
  float _703 = _702 * _701;
  float _704 = _703 + _645;
  float _705 = _704 * 1.4514392614364624f;
  float _706 = mad(-0.2365107536315918f, _646, _705);
  float _707 = mad(-0.21492856740951538f, _647, _706);
  float _708 = _704 * -0.07655377686023712f;
  float _709 = mad(1.17622971534729f, _646, _708);
  float _710 = mad(-0.09967592358589172f, _647, _709);
  float _711 = _704 * 0.008316148072481155f;
  float _712 = mad(-0.006032449658960104f, _646, _711);
  float _713 = mad(0.9977163076400757f, _647, _712);
  float _714 = max(0.0f, _707);
  float _715 = max(0.0f, _710);
  float _716 = max(0.0f, _713);
  float _717 = dot(float3(_714, _715, _716), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _718 = _714 - _717;
  float _719 = _715 - _717;
  float _720 = _716 - _717;
  float _721 = _718 * 0.9599999785423279f;
  float _722 = _719 * 0.9599999785423279f;
  float _723 = _720 * 0.9599999785423279f;
  float _724 = _721 + _717;
  float _725 = _722 + _717;
  float _726 = _723 + _717;

  float3 ap1_aces_colored = float3(_724, _725, _726);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _728 = _RootShaderParameters_037w;
  float _729 = _728 + 1.0f;
  float _730 = _RootShaderParameters_037y;
  float _731 = _729 - _730;
  float _733 = _RootShaderParameters_038x;
  float _734 = _733 + 1.0f;
  float _735 = _RootShaderParameters_037z;
  float _736 = _734 - _735;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _737 = (_730 > 0.800000011920929f);
    float _738 = _RootShaderParameters_037x;
    if (_737) {
      float _740 = 0.8199999928474426f - _730;
      float _741 = _740 / _738;
      float _742 = _741 + -0.7447274923324585f;
      _754 = _742;
    } else {
      float _744 = _728 + 0.18000000715255737f;
      float _745 = _744 / _731;
      float _746 = 2.0f - _745;
      float _747 = _745 / _746;
      float _748 = log2(_747);
      float _749 = _748 * 0.3465735912322998f;
      float _750 = _731 / _738;
      float _751 = _749 * _750;
      float _752 = -0.7447274923324585f - _751;
      _754 = _752;
    }
    float _755 = 1.0f - _730;
    float _756 = _755 / _738;
    float _757 = _756 - _754;
    float _758 = _735 / _738;
    float _759 = _758 - _757;
    float _760 = log2(_724);
    float _761 = log2(_725);
    float _762 = log2(_726);
    float _763 = _760 * 0.3010300099849701f;
    float _764 = _761 * 0.3010300099849701f;
    float _765 = _762 * 0.3010300099849701f;
    float _766 = _763 + _757;
    float _767 = _764 + _757;
    float _768 = _765 + _757;
    float _769 = _738 * _766;
    float _770 = _738 * _767;
    float _771 = _738 * _768;
    float _772 = _731 * 2.0f;
    float _773 = _738 * -2.0f;
    float _774 = _773 / _731;
    float _775 = _763 - _754;
    float _776 = _764 - _754;
    float _777 = _765 - _754;
    float _778 = _775 * 1.4426950216293335f;
    float _779 = _778 * _774;
    float _780 = _776 * 1.4426950216293335f;
    float _781 = _780 * _774;
    float _782 = _777 * 1.4426950216293335f;
    float _783 = _782 * _774;
    float _784 = exp2(_779);
    float _785 = exp2(_781);
    float _786 = exp2(_783);
    float _787 = _784 + 1.0f;
    float _788 = _785 + 1.0f;
    float _789 = _786 + 1.0f;
    float _790 = _772 / _787;
    float _791 = _772 / _788;
    float _792 = _772 / _789;
    float _793 = _790 - _728;
    float _794 = _791 - _728;
    float _795 = _792 - _728;
    float _796 = _736 * 2.0f;
    float _797 = _738 * 2.0f;
    float _798 = _797 / _736;
    float _799 = _763 - _759;
    float _800 = _764 - _759;
    float _801 = _765 - _759;
    float _802 = _799 * 1.4426950216293335f;
    float _803 = _802 * _798;
    float _804 = _800 * 1.4426950216293335f;
    float _805 = _804 * _798;
    float _806 = _801 * 1.4426950216293335f;
    float _807 = _806 * _798;
    float _808 = exp2(_803);
    float _809 = exp2(_805);
    float _810 = exp2(_807);
    float _811 = _808 + 1.0f;
    float _812 = _809 + 1.0f;
    float _813 = _810 + 1.0f;
    float _814 = _796 / _811;
    float _815 = _796 / _812;
    float _816 = _796 / _813;
    float _817 = _734 - _814;
    float _818 = _734 - _815;
    float _819 = _734 - _816;
    bool _820 = (_763 < _754);
    bool _821 = (_764 < _754);
    bool _822 = (_765 < _754);
    float _823 = _820 ? _793 : _769;
    float _824 = _821 ? _794 : _770;
    float _825 = _822 ? _795 : _771;
    bool _826 = (_763 > _759);
    bool _827 = (_764 > _759);
    bool _828 = (_765 > _759);
    float _829 = _826 ? _817 : _769;
    float _830 = _827 ? _818 : _770;
    float _831 = _828 ? _819 : _771;
    float _832 = _759 - _754;
    float _833 = _775 / _832;
    float _834 = _776 / _832;
    float _835 = _777 / _832;
    float _836 = saturate(_833);
    float _837 = saturate(_834);
    float _838 = saturate(_835);
    bool _839 = (_759 < _754);
    float _840 = 1.0f - _836;
    float _841 = 1.0f - _837;
    float _842 = 1.0f - _838;
    float _843 = _839 ? _840 : _836;
    float _844 = _839 ? _841 : _837;
    float _845 = _839 ? _842 : _838;
    float _846 = _843 * 2.0f;
    float _847 = _844 * 2.0f;
    float _848 = _845 * 2.0f;
    float _849 = 3.0f - _846;
    float _850 = 3.0f - _847;
    float _851 = 3.0f - _848;
    float _852 = _829 - _823;
    float _853 = _830 - _824;
    float _854 = _831 - _825;
    float _855 = _843 * _843;
    float _856 = _855 * _852;
    float _857 = _856 * _849;
    float _858 = _844 * _844;
    float _859 = _858 * _853;
    float _860 = _859 * _850;
    float _861 = _845 * _845;
    float _862 = _861 * _854;
    float _863 = _862 * _851;
    float _864 = _857 + _823;
    float _865 = _860 + _824;
    float _866 = _863 + _825;
    float _867 = dot(float3(_864, _865, _866), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _868 = _864 - _867;
    float _869 = _865 - _867;
    float _870 = _866 - _867;
    float _871 = _868 * 0.9300000071525574f;
    float _872 = _869 * 0.9300000071525574f;
    float _873 = _870 * 0.9300000071525574f;
    float _874 = _871 + _867;
    float _875 = _872 + _867;
    float _876 = _873 + _867;
    float _877 = max(0.0f, _874);
    float _878 = max(0.0f, _875);
    float _879 = max(0.0f, _876);
    // CustomEdit
    sdr_ap1_color = float3(_877, _878, _879);
  }

  float _880 = _RootShaderParameters_036w;
  /* float _881 = _877 - _583;
  float _882 = _878 - _584;
  float _883 = _879 - _585; */
  float _881 = sdr_ap1_color.r - _583;
  float _882 = sdr_ap1_color.g - _584;
  float _883 = sdr_ap1_color.b - _585;

  float _884 = _880 * _881;
  float _885 = _880 * _882;
  float _886 = _880 * _883;
  float _887 = _884 + _583;
  float _888 = _885 + _584;
  float _889 = _886 + _585;
  float _890 = _887 * 1.065374732017517f;
  float _891 = mad(1.451815478503704e-06f, _888, _890);
  float _892 = mad(-0.06537103652954102f, _889, _891);
  float _893 = _887 * -2.57161445915699e-07f;
  float _894 = mad(1.2036634683609009f, _888, _893);
  float _895 = mad(-0.20366770029067993f, _889, _894);
  float _896 = _887 * 1.862645149230957e-08f;
  float _897 = mad(2.0954757928848267e-08f, _888, _896);
  float _898 = mad(0.9999996423721313f, _889, _897);
  float _899 = _892 - _887;
  float _900 = _895 - _888;
  float _901 = _898 - _889;
  float _902 = _899 * _569;
  float _903 = _900 * _569;
  float _904 = _901 * _569;
  float _905 = _902 + _887;
  float _906 = _903 + _888;
  float _907 = _904 + _889;
  float _908 = _549 * _905;
  float _909 = mad(_550, _906, _908);
  float _910 = mad(_551, _907, _909);
  float _911 = _553 * _905;
  float _912 = mad(_554, _906, _911);
  float _913 = mad(_555, _907, _912);
  float _914 = _557 * _905;
  float _915 = mad(_558, _906, _914);
  float _916 = mad(_559, _907, _915);
  float _917 = max(0.0f, _910);
  float _918 = max(0.0f, _913);
  float _919 = max(0.0f, _916);

  float3 lut_input_color = float3(_917, _918, _919);  // CustomEdit
  float _1047;                                           // custom branch
  float _1048;                                           // custom branch
  float _1049;                                           // custom branch
  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1047 = post_lut_color.r;
    _1048 = post_lut_color.g;
    _1049 = post_lut_color.b;
  } else {
    float _920 = saturate(_917);
    float _921 = saturate(_918);
    float _922 = saturate(_919);
    bool _923 = (_920 < 0.0031306699384003878f);
    if (_923) {
      float _925 = _920 * 12.920000076293945f;
      _933 = _925;
    } else {
      float _927 = log2(_920);
      float _928 = _927 * 0.4166666567325592f;
      float _929 = exp2(_928);
      float _930 = _929 * 1.0549999475479126f;
      float _931 = _930 + -0.054999999701976776f;
      _933 = _931;
    }
    bool _934 = (_921 < 0.0031306699384003878f);
    if (_934) {
      float _936 = _921 * 12.920000076293945f;
      _944 = _936;
    } else {
      float _938 = log2(_921);
      float _939 = _938 * 0.4166666567325592f;
      float _940 = exp2(_939);
      float _941 = _940 * 1.0549999475479126f;
      float _942 = _941 + -0.054999999701976776f;
      _944 = _942;
    }
    bool _945 = (_922 < 0.0031306699384003878f);
    if (_945) {
      float _947 = _922 * 12.920000076293945f;
      _955 = _947;
    } else {
      float _949 = log2(_922);
      float _950 = _949 * 0.4166666567325592f;
      float _951 = exp2(_950);
      float _952 = _951 * 1.0549999475479126f;
      float _953 = _952 + -0.054999999701976776f;
      _955 = _953;
    }
    float _956 = _933 * 0.9375f;
    float _957 = _944 * 0.9375f;
    float _958 = _956 + 0.03125f;
    float _959 = _957 + 0.03125f;
    float _961 = _RootShaderParameters_005x;
    float _962 = _961 * _933;
    float _963 = _961 * _944;
    float _964 = _961 * _955;
    float _965 = _RootShaderParameters_005y;
    float _966 = _955 * 15.0f;
    float _967 = floor(_966);
    float _968 = _966 - _967;
    float _969 = _967 + _958;
    float _970 = _969 * 0.0625f;
    // _971 = _3;
    // _972 = _5;
    float4 _973 = Textures_1.SampleLevel(Samplers_1, float2(_970, _959), 0.0f);
    float _974 = _973.x;
    float _975 = _973.y;
    float _976 = _973.z;
    float _977 = _970 + 0.0625f;
    float4 _978 = Textures_1.SampleLevel(Samplers_1, float2(_977, _959), 0.0f);
    float _979 = _978.x;
    float _980 = _978.y;
    float _981 = _978.z;
    float _982 = _979 - _974;
    float _983 = _980 - _975;
    float _984 = _981 - _976;
    float _985 = _982 * _968;
    float _986 = _983 * _968;
    float _987 = _984 * _968;
    float _988 = _985 + _974;
    float _989 = _986 + _975;
    float _990 = _987 + _976;
    float _991 = _988 * _965;
    float _992 = _989 * _965;
    float _993 = _990 * _965;
    float _994 = _991 + _962;
    float _995 = _992 + _963;
    float _996 = _993 + _964;
    float _997 = _RootShaderParameters_005z;
    // _998 = _2;
    // _999 = _4;
    float4 _1000 = Textures_2.SampleLevel(Samplers_2, float2(_970, _959), 0.0f);
    float _1001 = _1000.x;
    float _1002 = _1000.y;
    float _1003 = _1000.z;
    float4 _1004 = Textures_2.SampleLevel(Samplers_2, float2(_977, _959), 0.0f);
    float _1005 = _1004.x;
    float _1006 = _1004.y;
    float _1007 = _1004.z;
    float _1008 = _1005 - _1001;
    float _1009 = _1006 - _1002;
    float _1010 = _1007 - _1003;
    float _1011 = _1008 * _968;
    float _1012 = _1009 * _968;
    float _1013 = _1010 * _968;
    float _1014 = _1011 + _1001;
    float _1015 = _1012 + _1002;
    float _1016 = _1013 + _1003;
    float _1017 = _1014 * _997;
    float _1018 = _1015 * _997;
    float _1019 = _1016 * _997;
    float _1020 = _994 + _1017;
    float _1021 = _995 + _1018;
    float _1022 = _996 + _1019;
    float _1023 = max(6.103519990574569e-05f, _1020);
    float _1024 = max(6.103519990574569e-05f, _1021);
    float _1025 = max(6.103519990574569e-05f, _1022);
    float _1026 = _1023 * 0.07739938050508499f;
    float _1027 = _1024 * 0.07739938050508499f;
    float _1028 = _1025 * 0.07739938050508499f;
    float _1029 = _1023 * 0.9478672742843628f;
    float _1030 = _1024 * 0.9478672742843628f;
    float _1031 = _1025 * 0.9478672742843628f;
    float _1032 = _1029 + 0.05213269963860512f;
    float _1033 = _1030 + 0.05213269963860512f;
    float _1034 = _1031 + 0.05213269963860512f;
    float _1035 = log2(_1032);
    float _1036 = log2(_1033);
    float _1037 = log2(_1034);
    float _1038 = _1035 * 2.4000000953674316f;
    float _1039 = _1036 * 2.4000000953674316f;
    float _1040 = _1037 * 2.4000000953674316f;
    float _1041 = exp2(_1038);
    float _1042 = exp2(_1039);
    float _1043 = exp2(_1040);
    bool _1044 = (_1023 > 0.040449999272823334f);
    bool _1045 = (_1024 > 0.040449999272823334f);
    bool _1046 = (_1025 > 0.040449999272823334f);
    /* float _1047 = _1044 ? _1041 : _1026;
    float _1048 = _1045 ? _1042 : _1027;
    float _1049 = _1046 ? _1043 : _1028; */
    _1047 = _1044 ? _1041 : _1026;
    _1048 = _1045 ? _1042 : _1027;
    _1049 = _1046 ? _1043 : _1028;
  }

  float _1051 = _RootShaderParameters_039x;
  float _1052 = _1051 * _1047;
  float _1053 = _1051 * _1048;
  float _1054 = _1051 * _1049;
  float _1055 = _RootShaderParameters_039y;
  float _1056 = _RootShaderParameters_039z;
  float _1057 = _1055 + _1052;
  float _1058 = _1057 * _1047;
  float _1059 = _1058 + _1056;
  float _1060 = _1055 + _1053;
  float _1061 = _1060 * _1048;
  float _1062 = _1061 + _1056;
  float _1063 = _1055 + _1054;
  float _1064 = _1063 * _1049;
  float _1065 = _1064 + _1056;
  float _1067 = _RootShaderParameters_013w;
  float _1068 = _RootShaderParameters_013x;
  float _1069 = _RootShaderParameters_013y;
  float _1070 = _RootShaderParameters_013z;
  float _1072 = _RootShaderParameters_014x;
  float _1073 = _RootShaderParameters_014y;
  float _1074 = _RootShaderParameters_014z;
  float _1075 = _1072 * _1059;
  float _1076 = _1073 * _1062;
  float _1077 = _1074 * _1065;
  float _1078 = _1068 - _1075;
  float _1079 = _1069 - _1076;
  float _1080 = _1070 - _1077;
  float _1081 = _1078 * _1067;
  float _1082 = _1079 * _1067;
  float _1083 = _1080 * _1067;
  float _1084 = _1081 + _1075;
  float _1085 = _1082 + _1076;
  float _1086 = _1083 + _1077;
  float _1087 = _1072 * _562;
  float _1088 = _1073 * _565;
  float _1089 = _1074 * _568;
  float _1090 = _1068 - _1087;
  float _1091 = _1069 - _1088;
  float _1092 = _1070 - _1089;
  float _1093 = _1090 * _1067;
  float _1094 = _1091 * _1067;
  float _1095 = _1092 * _1067;
  float _1096 = _1093 + _1087;
  float _1097 = _1094 + _1088;
  float _1098 = _1095 + _1089;
  float _1100 = _RootShaderParameters_040y;
  float _1101 = max(0.0f, _1084);
  float _1102 = max(0.0f, _1085);
  float _1103 = max(0.0f, _1086);
  float _1104 = log2(_1101);
  float _1105 = log2(_1102);
  float _1106 = log2(_1103);
  float _1107 = _1104 * _1100;
  float _1108 = _1105 * _1100;
  float _1109 = _1106 * _1100;
  float _1110 = exp2(_1107);
  float _1111 = exp2(_1108);
  float _1112 = exp2(_1109);

  // CustomEdit
  float3 film_graded_color = float3(_1110, _1111, _1112);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_10, _11, _12)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _1114 = _RootShaderParameters_040w;
  bool _1115 = (_1114 == 0);
  if (_1115) {
    uint _1118 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1119 = (_1118 == 0);
    _1152 = _1110;
    _1153 = _1111;
    _1154 = _1112;
    do {
      if (_1119) {
        float _1122 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1123 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1124 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1126 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1127 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1128 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1130 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1131 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1132 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1133 = _1122 * _1110;
        float _1134 = mad(_1123, _1111, _1133);
        float _1135 = mad(_1124, _1112, _1134);
        float _1136 = _1126 * _1110;
        float _1137 = mad(_1127, _1111, _1136);
        float _1138 = mad(_1128, _1112, _1137);
        float _1139 = _1130 * _1110;
        float _1140 = mad(_1131, _1111, _1139);
        float _1141 = mad(_1132, _1112, _1140);
        float _1142 = _1135 * _51;
        float _1143 = mad(_52, _1138, _1142);
        float _1144 = mad(_53, _1141, _1143);
        float _1145 = _1135 * _54;
        float _1146 = mad(_55, _1138, _1145);
        float _1147 = mad(_56, _1141, _1146);
        float _1148 = _1135 * _57;
        float _1149 = mad(_58, _1138, _1148);
        float _1150 = mad(_59, _1141, _1149);
        _1152 = _1144;
        _1153 = _1147;
        _1154 = _1150;
      }
      bool _1155 = (_1152 < 0.0031306699384003878f);
      do {
        if (_1155) {
          float _1157 = _1152 * 12.920000076293945f;
          _1165 = _1157;
        } else {
          float _1159 = log2(_1152);
          float _1160 = _1159 * 0.4166666567325592f;
          float _1161 = exp2(_1160);
          float _1162 = _1161 * 1.0549999475479126f;
          float _1163 = _1162 + -0.054999999701976776f;
          _1165 = _1163;
        }
        bool _1166 = (_1153 < 0.0031306699384003878f);
        do {
          if (_1166) {
            float _1168 = _1153 * 12.920000076293945f;
            _1176 = _1168;
          } else {
            float _1170 = log2(_1153);
            float _1171 = _1170 * 0.4166666567325592f;
            float _1172 = exp2(_1171);
            float _1173 = _1172 * 1.0549999475479126f;
            float _1174 = _1173 + -0.054999999701976776f;
            _1176 = _1174;
          }
          bool _1177 = (_1154 < 0.0031306699384003878f);
          if (_1177) {
            float _1179 = _1154 * 12.920000076293945f;
            _2536 = _1165;
            _2537 = _1176;
            _2538 = _1179;
          } else {
            float _1181 = log2(_1154);
            float _1182 = _1181 * 0.4166666567325592f;
            float _1183 = exp2(_1182);
            float _1184 = _1183 * 1.0549999475479126f;
            float _1185 = _1184 + -0.054999999701976776f;
            _2536 = _1165;
            _2537 = _1176;
            _2538 = _1185;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1187 = (_1114 == 1);
    if (_1187) {
      float _1190 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1191 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1192 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1194 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1195 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1196 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1198 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1199 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1200 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1201 = _1190 * _1110;
      float _1202 = mad(_1191, _1111, _1201);
      float _1203 = mad(_1192, _1112, _1202);
      float _1204 = _1194 * _1110;
      float _1205 = mad(_1195, _1111, _1204);
      float _1206 = mad(_1196, _1112, _1205);
      float _1207 = _1198 * _1110;
      float _1208 = mad(_1199, _1111, _1207);
      float _1209 = mad(_1200, _1112, _1208);
      float _1210 = _1203 * _51;
      float _1211 = mad(_52, _1206, _1210);
      float _1212 = mad(_53, _1209, _1211);
      float _1213 = _1203 * _54;
      float _1214 = mad(_55, _1206, _1213);
      float _1215 = mad(_56, _1209, _1214);
      float _1216 = _1203 * _57;
      float _1217 = mad(_58, _1206, _1216);
      float _1218 = mad(_59, _1209, _1217);
      float _1219 = max(6.103519990574569e-05f, _1212);
      float _1220 = max(6.103519990574569e-05f, _1215);
      float _1221 = max(6.103519990574569e-05f, _1218);
      float _1222 = max(_1219, 0.017999999225139618f);
      float _1223 = max(_1220, 0.017999999225139618f);
      float _1224 = max(_1221, 0.017999999225139618f);
      float _1225 = log2(_1222);
      float _1226 = log2(_1223);
      float _1227 = log2(_1224);
      float _1228 = _1225 * 0.44999998807907104f;
      float _1229 = _1226 * 0.44999998807907104f;
      float _1230 = _1227 * 0.44999998807907104f;
      float _1231 = exp2(_1228);
      float _1232 = exp2(_1229);
      float _1233 = exp2(_1230);
      float _1234 = _1231 * 1.0989999771118164f;
      float _1235 = _1232 * 1.0989999771118164f;
      float _1236 = _1233 * 1.0989999771118164f;
      float _1237 = _1234 + -0.0989999994635582f;
      float _1238 = _1235 + -0.0989999994635582f;
      float _1239 = _1236 + -0.0989999994635582f;
      float _1240 = _1219 * 4.5f;
      float _1241 = _1220 * 4.5f;
      float _1242 = _1221 * 4.5f;
      float _1243 = min(_1240, _1237);
      float _1244 = min(_1241, _1238);
      float _1245 = min(_1242, _1239);
      _2536 = _1243;
      _2537 = _1244;
      _2538 = _1245;
    } else {
      bool _1247 = (_1114 == 3);
      bool _1248 = (_1114 == 5);
      bool _1249 = _1247 || _1248;
      if (_1249) {
        //   %1251 = bitcast [6 x float]* %15 to i8*
        //   %1252 = bitcast [6 x float]* %16 to i8*
        float _1254 = _RootShaderParameters_012z;
        float _1255 = _RootShaderParameters_012y;
        float _1256 = _RootShaderParameters_012x;
        float _1258 = _RootShaderParameters_011x;
        float _1259 = _RootShaderParameters_011y;
        float _1260 = _RootShaderParameters_011z;
        float _1261 = _RootShaderParameters_011w;
        float _1263 = _RootShaderParameters_010x;
        float _1264 = _RootShaderParameters_010y;
        float _1265 = _RootShaderParameters_010z;
        float _1266 = _RootShaderParameters_010w;
        float _1268 = _RootShaderParameters_009x;
        float _1270 = _RootShaderParameters_008x;
        float _1271 = _RootShaderParameters_008y;
        float _1272 = _RootShaderParameters_008z;
        float _1273 = _RootShaderParameters_008w;
        _15[0] = _1263;
        _15[1] = _1264;
        _15[2] = _1265;
        _15[3] = _1266;
        _15[4] = _1256;
        _15[5] = _1256;
        _16[0] = _1258;
        _16[1] = _1259;
        _16[2] = _1260;
        _16[3] = _1261;
        _16[4] = _1255;
        _16[5] = _1255;
        float _1287 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1288 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1289 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1291 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1292 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1293 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1295 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1296 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1297 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1298 = _1254 * _1096;
        float _1299 = _1254 * _1097;
        float _1300 = _1254 * _1098;
        float _1301 = _1287 * _1298;
        float _1302 = mad(_1288, _1299, _1301);
        float _1303 = mad(_1289, _1300, _1302);
        float _1304 = _1291 * _1298;
        float _1305 = mad(_1292, _1299, _1304);
        float _1306 = mad(_1293, _1300, _1305);
        float _1307 = _1295 * _1298;
        float _1308 = mad(_1296, _1299, _1307);
        float _1309 = mad(_1297, _1300, _1308);
        float _1310 = min(_1303, _1306);
        float _1311 = min(_1310, _1309);
        float _1312 = max(_1303, _1306);
        float _1313 = max(_1312, _1309);
        float _1314 = max(_1313, 1.000000013351432e-10f);
        float _1315 = max(_1311, 1.000000013351432e-10f);
        float _1316 = _1314 - _1315;
        float _1317 = max(_1313, 0.009999999776482582f);
        float _1318 = _1316 / _1317;
        float _1319 = _1309 - _1306;
        float _1320 = _1319 * _1309;
        float _1321 = _1306 - _1303;
        float _1322 = _1321 * _1306;
        float _1323 = _1320 + _1322;
        float _1324 = _1303 - _1309;
        float _1325 = _1324 * _1303;
        float _1326 = _1323 + _1325;
        float _1327 = sqrt(_1326);
        float _1328 = _1327 * 1.75f;
        float _1329 = _1306 + _1303;
        float _1330 = _1329 + _1309;
        float _1331 = _1330 + _1328;
        float _1332 = _1331 * 0.3333333432674408f;
        float _1333 = _1318 + -0.4000000059604645f;
        float _1334 = _1333 * 5.0f;
        float _1335 = _1333 * 2.5f;
        float _1336 = abs(_1335);
        float _1337 = 1.0f - _1336;
        float _1338 = max(_1337, 0.0f);
        bool _1339 = (_1334 > 0.0f);
        bool _1340 = (_1334 < 0.0f);
        int _1341 = int(_1339);
        int _1342 = int(_1340);
        int _1343 = _1341 - _1342;
        float _1344 = float(_1343);
        float _1345 = _1338 * _1338;
        float _1346 = 1.0f - _1345;
        float _1347 = _1344 * _1346;
        float _1348 = _1347 + 1.0f;
        float _1349 = _1348 * 0.02500000037252903f;
        bool _1350 = !(_1332 <= 0.0533333346247673f);
        _1358 = _1349;
        do {
          if (_1350) {
            bool _1352 = !(_1332 >= 0.1599999964237213f);
            _1358 = 0.0f;
            if (_1352) {
              float _1354 = 0.23999999463558197f / _1331;
              float _1355 = _1354 + -0.5f;
              float _1356 = _1355 * _1349;
              _1358 = _1356;
            }
          }
          float _1359 = _1358 + 1.0f;
          float _1360 = _1359 * _1303;
          float _1361 = _1359 * _1306;
          float _1362 = _1359 * _1309;
          bool _1363 = (_1360 == _1361);
          bool _1364 = (_1361 == _1362);
          bool _1365 = _1363 && _1364;
          _1394 = 0.0f;
          do {
            if (!_1365) {
              float _1367 = _1360 * 2.0f;
              float _1368 = _1367 - _1361;
              float _1369 = _1368 - _1362;
              float _1370 = _1306 - _1309;
              float _1371 = _1370 * 1.7320507764816284f;
              float _1372 = _1371 * _1359;
              float _1373 = _1372 / _1369;
              float _1374 = atan(_1373);
              float _1375 = _1374 + 3.1415927410125732f;
              float _1376 = _1374 + -3.1415927410125732f;
              bool _1377 = (_1369 < 0.0f);
              bool _1378 = (_1369 == 0.0f);
              bool _1379 = (_1372 >= 0.0f);
              bool _1380 = (_1372 < 0.0f);
              bool _1381 = _1379 && _1377;
              float _1382 = _1381 ? _1375 : _1374;
              bool _1383 = _1380 && _1377;
              float _1384 = _1383 ? _1376 : _1382;
              bool _1385 = _1380 && _1378;
              bool _1386 = _1379 && _1378;
              float _1387 = _1384 * 57.2957763671875f;
              float _1388 = _1385 ? -90.0f : _1387;
              float _1389 = _1386 ? 90.0f : _1388;
              bool _1390 = (_1389 < 0.0f);
              _1394 = _1389;
              if (_1390) {
                float _1392 = _1389 + 360.0f;
                _1394 = _1392;
              }
            }
            float _1395 = max(_1394, 0.0f);
            float _1396 = min(_1395, 360.0f);
            bool _1397 = (_1396 < -180.0f);
            do {
              if (_1397) {
                float _1399 = _1396 + 360.0f;
                _1405 = _1399;
              } else {
                bool _1401 = (_1396 > 180.0f);
                _1405 = _1396;
                if (_1401) {
                  float _1403 = _1396 + -360.0f;
                  _1405 = _1403;
                }
              }
              bool _1406 = (_1405 > -67.5f);
              bool _1407 = (_1405 < 67.5f);
              bool _1408 = _1406 && _1407;
              _1444 = 0.0f;
              do {
                if (_1408) {
                  float _1410 = _1405 + 67.5f;
                  float _1411 = _1410 * 0.029629629105329514f;
                  int _1412 = int(_1411);
                  float _1413 = float(_1412);
                  float _1414 = _1411 - _1413;
                  float _1415 = _1414 * _1414;
                  float _1416 = _1415 * _1414;
                  bool _1417 = (_1412 == 3);
                  if (_1417) {
                    float _1419 = _1416 * 0.1666666716337204f;
                    float _1420 = _1415 * 0.5f;
                    float _1421 = _1414 * 0.5f;
                    float _1422 = 0.1666666716337204f - _1421;
                    float _1423 = _1422 + _1420;
                    float _1424 = _1423 - _1419;
                    _1444 = _1424;
                  } else {
                    bool _1426 = (_1412 == 2);
                    if (_1426) {
                      float _1428 = _1416 * 0.5f;
                      float _1429 = 0.6666666865348816f - _1415;
                      float _1430 = _1429 + _1428;
                      _1444 = _1430;
                    } else {
                      bool _1432 = (_1412 == 1);
                      if (_1432) {
                        float _1434 = _1416 * -0.5f;
                        float _1435 = _1415 + _1414;
                        float _1436 = _1435 * 0.5f;
                        float _1437 = _1434 + 0.1666666716337204f;
                        float _1438 = _1437 + _1436;
                        _1444 = _1438;
                      } else {
                        bool _1440 = (_1412 == 0);
                        float _1441 = _1416 * 0.1666666716337204f;
                        float _1442 = _1440 ? _1441 : 0.0f;
                        _1444 = _1442;
                      }
                    }
                  }
                }
                float _1445 = 0.029999999329447746f - _1360;
                float _1446 = _1318 * 0.27000001072883606f;
                float _1447 = _1446 * _1445;
                float _1448 = _1447 * _1444;
                float _1449 = _1448 + _1360;
                float _1450 = max(_1449, 0.0f);
                float _1451 = max(_1361, 0.0f);
                float _1452 = max(_1362, 0.0f);
                float _1453 = min(_1450, 65535.0f);
                float _1454 = min(_1451, 65535.0f);
                float _1455 = min(_1452, 65535.0f);
                float _1456 = _1453 * 1.4514392614364624f;
                float _1457 = mad(-0.2365107536315918f, _1454, _1456);
                float _1458 = mad(-0.21492856740951538f, _1455, _1457);
                float _1459 = _1453 * -0.07655377686023712f;
                float _1460 = mad(1.17622971534729f, _1454, _1459);
                float _1461 = mad(-0.09967592358589172f, _1455, _1460);
                float _1462 = _1453 * 0.008316148072481155f;
                float _1463 = mad(-0.006032449658960104f, _1454, _1462);
                float _1464 = mad(0.9977163076400757f, _1455, _1463);
                float _1465 = max(_1458, 0.0f);
                float _1466 = max(_1461, 0.0f);
                float _1467 = max(_1464, 0.0f);
                float _1468 = min(_1465, 65504.0f);
                float _1469 = min(_1466, 65504.0f);
                float _1470 = min(_1467, 65504.0f);
                float _1471 = dot(float3(_1468, _1469, _1470), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1472 = _1468 - _1471;
                float _1473 = _1469 - _1471;
                float _1474 = _1470 - _1471;
                float _1475 = _1472 * 0.9599999785423279f;
                float _1476 = _1473 * 0.9599999785423279f;
                float _1477 = _1474 * 0.9599999785423279f;
                float _1478 = _1475 + _1471;
                float _1479 = _1476 + _1471;
                float _1480 = _1477 + _1471;
                float _1481 = max(_1478, 1.000000013351432e-10f);
                float _1482 = log2(_1481);
                float _1483 = _1482 * 0.3010300099849701f;
                float _1484 = log2(_1270);
                float _1485 = _1484 * 0.3010300099849701f;
                bool _1486 = !(_1483 <= _1485);
                do {
                  if (!_1486) {
                    float _1488 = log2(_1271);
                    float _1489 = _1488 * 0.3010300099849701f;
                    _1554 = _1489;
                  } else {
                    bool _1491 = (_1483 > _1485);
                    float _1492 = log2(_1268);
                    float _1493 = _1492 * 0.3010300099849701f;
                    bool _1494 = (_1483 < _1493);
                    bool _1495 = _1491 && _1494;
                    if (_1495) {
                      float _1497 = _1482 - _1484;
                      float _1498 = _1497 * 0.9030900001525879f;
                      float _1499 = _1492 - _1484;
                      float _1500 = _1499 * 0.3010300099849701f;
                      float _1501 = _1498 / _1500;
                      int _1502 = int(_1501);
                      float _1503 = float(_1502);
                      float _1504 = _1501 - _1503;
                      float _1506 = _15[_1502];
                      int _1507 = _1502 + 1;
                      float _1509 = _15[_1507];
                      int _1510 = _1502 + 2;
                      float _1512 = _15[_1510];
                      float _1513 = _1504 * _1504;
                      float _1514 = _1506 * 0.5f;
                      float _1515 = mad(_1509, -1.0f, _1514);
                      float _1516 = mad(_1512, 0.5f, _1515);
                      float _1517 = _1509 - _1506;
                      float _1518 = mad(_1509, 0.5f, _1514);
                      float _1519 = dot(float3(_1513, _1504, 1.0f), float3(_1516, _1517, _1518));
                      _1554 = _1519;
                    } else {
                      bool _1521 = !(_1483 >= _1493);
                      do {
                        if (!_1521) {
                          float _1523 = log2(_1272);
                          float _1524 = _1523 * 0.3010300099849701f;
                          bool _1525 = (_1483 < _1524);
                          if (_1525) {
                            float _1527 = _1482 - _1492;
                            float _1528 = _1527 * 0.9030900001525879f;
                            float _1529 = _1523 - _1492;
                            float _1530 = _1529 * 0.3010300099849701f;
                            float _1531 = _1528 / _1530;
                            int _1532 = int(_1531);
                            float _1533 = float(_1532);
                            float _1534 = _1531 - _1533;
                            float _1536 = _16[_1532];
                            int _1537 = _1532 + 1;
                            float _1539 = _16[_1537];
                            int _1540 = _1532 + 2;
                            float _1542 = _16[_1540];
                            float _1543 = _1534 * _1534;
                            float _1544 = _1536 * 0.5f;
                            float _1545 = mad(_1539, -1.0f, _1544);
                            float _1546 = mad(_1542, 0.5f, _1545);
                            float _1547 = _1539 - _1536;
                            float _1548 = mad(_1539, 0.5f, _1544);
                            float _1549 = dot(float3(_1543, _1534, 1.0f), float3(_1546, _1547, _1548));
                            _1554 = _1549;
                            break;
                          }
                        }
                        float _1551 = log2(_1273);
                        float _1552 = _1551 * 0.3010300099849701f;
                        _1554 = _1552;
                      } while (false);
                    }
                  }
                  float _1555 = _1554 * 3.321928024291992f;
                  float _1556 = exp2(_1555);
                  float _1557 = max(_1479, 1.000000013351432e-10f);
                  float _1558 = log2(_1557);
                  float _1559 = _1558 * 0.3010300099849701f;
                  bool _1560 = !(_1559 <= _1485);
                  do {
                    if (!_1560) {
                      float _1562 = log2(_1271);
                      float _1563 = _1562 * 0.3010300099849701f;
                      _1628 = _1563;
                    } else {
                      bool _1565 = (_1559 > _1485);
                      float _1566 = log2(_1268);
                      float _1567 = _1566 * 0.3010300099849701f;
                      bool _1568 = (_1559 < _1567);
                      bool _1569 = _1565 && _1568;
                      if (_1569) {
                        float _1571 = _1558 - _1484;
                        float _1572 = _1571 * 0.9030900001525879f;
                        float _1573 = _1566 - _1484;
                        float _1574 = _1573 * 0.3010300099849701f;
                        float _1575 = _1572 / _1574;
                        int _1576 = int(_1575);
                        float _1577 = float(_1576);
                        float _1578 = _1575 - _1577;
                        float _1580 = _15[_1576];
                        int _1581 = _1576 + 1;
                        float _1583 = _15[_1581];
                        int _1584 = _1576 + 2;
                        float _1586 = _15[_1584];
                        float _1587 = _1578 * _1578;
                        float _1588 = _1580 * 0.5f;
                        float _1589 = mad(_1583, -1.0f, _1588);
                        float _1590 = mad(_1586, 0.5f, _1589);
                        float _1591 = _1583 - _1580;
                        float _1592 = mad(_1583, 0.5f, _1588);
                        float _1593 = dot(float3(_1587, _1578, 1.0f), float3(_1590, _1591, _1592));
                        _1628 = _1593;
                      } else {
                        bool _1595 = !(_1559 >= _1567);
                        do {
                          if (!_1595) {
                            float _1597 = log2(_1272);
                            float _1598 = _1597 * 0.3010300099849701f;
                            bool _1599 = (_1559 < _1598);
                            if (_1599) {
                              float _1601 = _1558 - _1566;
                              float _1602 = _1601 * 0.9030900001525879f;
                              float _1603 = _1597 - _1566;
                              float _1604 = _1603 * 0.3010300099849701f;
                              float _1605 = _1602 / _1604;
                              int _1606 = int(_1605);
                              float _1607 = float(_1606);
                              float _1608 = _1605 - _1607;
                              float _1610 = _16[_1606];
                              int _1611 = _1606 + 1;
                              float _1613 = _16[_1611];
                              int _1614 = _1606 + 2;
                              float _1616 = _16[_1614];
                              float _1617 = _1608 * _1608;
                              float _1618 = _1610 * 0.5f;
                              float _1619 = mad(_1613, -1.0f, _1618);
                              float _1620 = mad(_1616, 0.5f, _1619);
                              float _1621 = _1613 - _1610;
                              float _1622 = mad(_1613, 0.5f, _1618);
                              float _1623 = dot(float3(_1617, _1608, 1.0f), float3(_1620, _1621, _1622));
                              _1628 = _1623;
                              break;
                            }
                          }
                          float _1625 = log2(_1273);
                          float _1626 = _1625 * 0.3010300099849701f;
                          _1628 = _1626;
                        } while (false);
                      }
                    }
                    float _1629 = _1628 * 3.321928024291992f;
                    float _1630 = exp2(_1629);
                    float _1631 = max(_1480, 1.000000013351432e-10f);
                    float _1632 = log2(_1631);
                    float _1633 = _1632 * 0.3010300099849701f;
                    bool _1634 = !(_1633 <= _1485);
                    do {
                      if (!_1634) {
                        float _1636 = log2(_1271);
                        float _1637 = _1636 * 0.3010300099849701f;
                        _1702 = _1637;
                      } else {
                        bool _1639 = (_1633 > _1485);
                        float _1640 = log2(_1268);
                        float _1641 = _1640 * 0.3010300099849701f;
                        bool _1642 = (_1633 < _1641);
                        bool _1643 = _1639 && _1642;
                        if (_1643) {
                          float _1645 = _1632 - _1484;
                          float _1646 = _1645 * 0.9030900001525879f;
                          float _1647 = _1640 - _1484;
                          float _1648 = _1647 * 0.3010300099849701f;
                          float _1649 = _1646 / _1648;
                          int _1650 = int(_1649);
                          float _1651 = float(_1650);
                          float _1652 = _1649 - _1651;
                          float _1654 = _15[_1650];
                          int _1655 = _1650 + 1;
                          float _1657 = _15[_1655];
                          int _1658 = _1650 + 2;
                          float _1660 = _15[_1658];
                          float _1661 = _1652 * _1652;
                          float _1662 = _1654 * 0.5f;
                          float _1663 = mad(_1657, -1.0f, _1662);
                          float _1664 = mad(_1660, 0.5f, _1663);
                          float _1665 = _1657 - _1654;
                          float _1666 = mad(_1657, 0.5f, _1662);
                          float _1667 = dot(float3(_1661, _1652, 1.0f), float3(_1664, _1665, _1666));
                          _1702 = _1667;
                        } else {
                          bool _1669 = !(_1633 >= _1641);
                          do {
                            if (!_1669) {
                              float _1671 = log2(_1272);
                              float _1672 = _1671 * 0.3010300099849701f;
                              bool _1673 = (_1633 < _1672);
                              if (_1673) {
                                float _1675 = _1632 - _1640;
                                float _1676 = _1675 * 0.9030900001525879f;
                                float _1677 = _1671 - _1640;
                                float _1678 = _1677 * 0.3010300099849701f;
                                float _1679 = _1676 / _1678;
                                int _1680 = int(_1679);
                                float _1681 = float(_1680);
                                float _1682 = _1679 - _1681;
                                float _1684 = _16[_1680];
                                int _1685 = _1680 + 1;
                                float _1687 = _16[_1685];
                                int _1688 = _1680 + 2;
                                float _1690 = _16[_1688];
                                float _1691 = _1682 * _1682;
                                float _1692 = _1684 * 0.5f;
                                float _1693 = mad(_1687, -1.0f, _1692);
                                float _1694 = mad(_1690, 0.5f, _1693);
                                float _1695 = _1687 - _1684;
                                float _1696 = mad(_1687, 0.5f, _1692);
                                float _1697 = dot(float3(_1691, _1682, 1.0f), float3(_1694, _1695, _1696));
                                _1702 = _1697;
                                break;
                              }
                            }
                            float _1699 = log2(_1273);
                            float _1700 = _1699 * 0.3010300099849701f;
                            _1702 = _1700;
                          } while (false);
                        }
                      }
                      float _1703 = _1702 * 3.321928024291992f;
                      float _1704 = exp2(_1703);
                      float _1705 = _1556 - _1271;
                      float _1706 = _1273 - _1271;
                      float _1707 = _1705 / _1706;
                      float _1708 = _1630 - _1271;
                      float _1709 = _1708 / _1706;
                      float _1710 = _1704 - _1271;
                      float _1711 = _1710 / _1706;
                      float _1712 = _1707 * 0.6624541878700256f;
                      float _1713 = mad(0.13400420546531677f, _1709, _1712);
                      float _1714 = mad(0.15618768334388733f, _1711, _1713);
                      float _1715 = _1707 * 0.2722287178039551f;
                      float _1716 = mad(0.6740817427635193f, _1709, _1715);
                      float _1717 = mad(0.053689517080783844f, _1711, _1716);
                      float _1718 = _1707 * -0.005574649665504694f;
                      float _1719 = mad(0.00406073359772563f, _1709, _1718);
                      float _1720 = mad(1.0103391408920288f, _1711, _1719);
                      float _1721 = _1714 * 1.6410233974456787f;
                      float _1722 = mad(-0.32480329275131226f, _1717, _1721);
                      float _1723 = mad(-0.23642469942569733f, _1720, _1722);
                      float _1724 = _1714 * -0.663662850856781f;
                      float _1725 = mad(1.6153316497802734f, _1717, _1724);
                      float _1726 = mad(0.016756348311901093f, _1720, _1725);
                      float _1727 = _1714 * 0.011721894145011902f;
                      float _1728 = mad(-0.008284442126750946f, _1717, _1727);
                      float _1729 = mad(0.9883948564529419f, _1720, _1728);
                      float _1730 = max(_1723, 0.0f);
                      float _1731 = max(_1726, 0.0f);
                      float _1732 = max(_1729, 0.0f);
                      float _1733 = min(_1730, 1.0f);
                      float _1734 = min(_1731, 1.0f);
                      float _1735 = min(_1732, 1.0f);
                      float _1736 = _1733 * 0.6624541878700256f;
                      float _1737 = mad(0.13400420546531677f, _1734, _1736);
                      float _1738 = mad(0.15618768334388733f, _1735, _1737);
                      float _1739 = _1733 * 0.2722287178039551f;
                      float _1740 = mad(0.6740817427635193f, _1734, _1739);
                      float _1741 = mad(0.053689517080783844f, _1735, _1740);
                      float _1742 = _1733 * -0.005574649665504694f;
                      float _1743 = mad(0.00406073359772563f, _1734, _1742);
                      float _1744 = mad(1.0103391408920288f, _1735, _1743);
                      float _1745 = _1738 * 1.6410233974456787f;
                      float _1746 = mad(-0.32480329275131226f, _1741, _1745);
                      float _1747 = mad(-0.23642469942569733f, _1744, _1746);
                      float _1748 = _1738 * -0.663662850856781f;
                      float _1749 = mad(1.6153316497802734f, _1741, _1748);
                      float _1750 = mad(0.016756348311901093f, _1744, _1749);
                      float _1751 = _1738 * 0.011721894145011902f;
                      float _1752 = mad(-0.008284442126750946f, _1741, _1751);
                      float _1753 = mad(0.9883948564529419f, _1744, _1752);
                      float _1754 = max(_1747, 0.0f);
                      float _1755 = max(_1750, 0.0f);
                      float _1756 = max(_1753, 0.0f);
                      float _1757 = min(_1754, 65535.0f);
                      float _1758 = min(_1755, 65535.0f);
                      float _1759 = min(_1756, 65535.0f);
                      float _1760 = _1757 * _1273;
                      float _1761 = _1758 * _1273;
                      float _1762 = _1759 * _1273;
                      float _1763 = max(_1760, 0.0f);
                      float _1764 = max(_1761, 0.0f);
                      float _1765 = max(_1762, 0.0f);
                      float _1766 = min(_1763, 65535.0f);
                      float _1767 = min(_1764, 65535.0f);
                      float _1768 = min(_1765, 65535.0f);
                      bool _1769 = (_1114 == 5);
                      _1781 = _1766;
                      _1782 = _1767;
                      _1783 = _1768;
                      do {
                        if (!_1769) {
                          float _1771 = _1766 * _51;
                          float _1772 = mad(_52, _1767, _1771);
                          float _1773 = mad(_53, _1768, _1772);
                          float _1774 = _1766 * _54;
                          float _1775 = mad(_55, _1767, _1774);
                          float _1776 = mad(_56, _1768, _1775);
                          float _1777 = _1766 * _57;
                          float _1778 = mad(_58, _1767, _1777);
                          float _1779 = mad(_59, _1768, _1778);
                          _1781 = _1773;
                          _1782 = _1776;
                          _1783 = _1779;
                        }
                        float _1784 = _1781 * 9.999999747378752e-05f;
                        float _1785 = _1782 * 9.999999747378752e-05f;
                        float _1786 = _1783 * 9.999999747378752e-05f;
                        float _1787 = log2(_1784);
                        float _1788 = log2(_1785);
                        float _1789 = log2(_1786);
                        float _1790 = _1787 * 0.1593017578125f;
                        float _1791 = _1788 * 0.1593017578125f;
                        float _1792 = _1789 * 0.1593017578125f;
                        float _1793 = exp2(_1790);
                        float _1794 = exp2(_1791);
                        float _1795 = exp2(_1792);
                        float _1796 = _1793 * 18.8515625f;
                        float _1797 = _1794 * 18.8515625f;
                        float _1798 = _1795 * 18.8515625f;
                        float _1799 = _1796 + 0.8359375f;
                        float _1800 = _1797 + 0.8359375f;
                        float _1801 = _1798 + 0.8359375f;
                        float _1802 = _1793 * 18.6875f;
                        float _1803 = _1794 * 18.6875f;
                        float _1804 = _1795 * 18.6875f;
                        float _1805 = _1802 + 1.0f;
                        float _1806 = _1803 + 1.0f;
                        float _1807 = _1804 + 1.0f;
                        float _1808 = 1.0f / _1805;
                        float _1809 = 1.0f / _1806;
                        float _1810 = 1.0f / _1807;
                        float _1811 = _1808 * _1799;
                        float _1812 = _1809 * _1800;
                        float _1813 = _1810 * _1801;
                        float _1814 = log2(_1811);
                        float _1815 = log2(_1812);
                        float _1816 = log2(_1813);
                        float _1817 = _1814 * 78.84375f;
                        float _1818 = _1815 * 78.84375f;
                        float _1819 = _1816 * 78.84375f;
                        float _1820 = exp2(_1817);
                        float _1821 = exp2(_1818);
                        float _1822 = exp2(_1819);
                        _2536 = _1820;
                        _2537 = _1821;
                        _2538 = _1822;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _1824 = _1114 & -3;
        bool _1825 = (_1824 == 4);
        if (_1825) {
          //   %1827 = bitcast [6 x float]* %13 to i8*
          //   %1828 = bitcast [6 x float]* %14 to i8*
          float _1830 = _RootShaderParameters_012z;
          float _1831 = _RootShaderParameters_012y;
          float _1832 = _RootShaderParameters_012x;
          float _1834 = _RootShaderParameters_011x;
          float _1835 = _RootShaderParameters_011y;
          float _1836 = _RootShaderParameters_011z;
          float _1837 = _RootShaderParameters_011w;
          float _1839 = _RootShaderParameters_010x;
          float _1840 = _RootShaderParameters_010y;
          float _1841 = _RootShaderParameters_010z;
          float _1842 = _RootShaderParameters_010w;
          float _1844 = _RootShaderParameters_009x;
          float _1846 = _RootShaderParameters_008x;
          float _1847 = _RootShaderParameters_008y;
          float _1848 = _RootShaderParameters_008z;
          float _1849 = _RootShaderParameters_008w;
          _13[0] = _1839;
          _13[1] = _1840;
          _13[2] = _1841;
          _13[3] = _1842;
          _13[4] = _1832;
          _13[5] = _1832;
          _14[0] = _1834;
          _14[1] = _1835;
          _14[2] = _1836;
          _14[3] = _1837;
          _14[4] = _1831;
          _14[5] = _1831;
          float _1863 = UniformBufferConstants_WorkingColorSpace_016x;
          float _1864 = UniformBufferConstants_WorkingColorSpace_016y;
          float _1865 = UniformBufferConstants_WorkingColorSpace_016z;
          float _1867 = UniformBufferConstants_WorkingColorSpace_017x;
          float _1868 = UniformBufferConstants_WorkingColorSpace_017y;
          float _1869 = UniformBufferConstants_WorkingColorSpace_017z;
          float _1871 = UniformBufferConstants_WorkingColorSpace_018x;
          float _1872 = UniformBufferConstants_WorkingColorSpace_018y;
          float _1873 = UniformBufferConstants_WorkingColorSpace_018z;
          float _1874 = _1830 * _1096;
          float _1875 = _1830 * _1097;
          float _1876 = _1830 * _1098;
          float _1877 = _1863 * _1874;
          float _1878 = mad(_1864, _1875, _1877);
          float _1879 = mad(_1865, _1876, _1878);
          float _1880 = _1867 * _1874;
          float _1881 = mad(_1868, _1875, _1880);
          float _1882 = mad(_1869, _1876, _1881);
          float _1883 = _1871 * _1874;
          float _1884 = mad(_1872, _1875, _1883);
          float _1885 = mad(_1873, _1876, _1884);
          float _1886 = min(_1879, _1882);
          float _1887 = min(_1886, _1885);
          float _1888 = max(_1879, _1882);
          float _1889 = max(_1888, _1885);
          float _1890 = max(_1889, 1.000000013351432e-10f);
          float _1891 = max(_1887, 1.000000013351432e-10f);
          float _1892 = _1890 - _1891;
          float _1893 = max(_1889, 0.009999999776482582f);
          float _1894 = _1892 / _1893;
          float _1895 = _1885 - _1882;
          float _1896 = _1895 * _1885;
          float _1897 = _1882 - _1879;
          float _1898 = _1897 * _1882;
          float _1899 = _1896 + _1898;
          float _1900 = _1879 - _1885;
          float _1901 = _1900 * _1879;
          float _1902 = _1899 + _1901;
          float _1903 = sqrt(_1902);
          float _1904 = _1903 * 1.75f;
          float _1905 = _1882 + _1879;
          float _1906 = _1905 + _1885;
          float _1907 = _1906 + _1904;
          float _1908 = _1907 * 0.3333333432674408f;
          float _1909 = _1894 + -0.4000000059604645f;
          float _1910 = _1909 * 5.0f;
          float _1911 = _1909 * 2.5f;
          float _1912 = abs(_1911);
          float _1913 = 1.0f - _1912;
          float _1914 = max(_1913, 0.0f);
          bool _1915 = (_1910 > 0.0f);
          bool _1916 = (_1910 < 0.0f);
          int _1917 = int(_1915);
          int _1918 = int(_1916);
          int _1919 = _1917 - _1918;
          float _1920 = float(_1919);
          float _1921 = _1914 * _1914;
          float _1922 = 1.0f - _1921;
          float _1923 = _1920 * _1922;
          float _1924 = _1923 + 1.0f;
          float _1925 = _1924 * 0.02500000037252903f;
          bool _1926 = !(_1908 <= 0.0533333346247673f);
          _1934 = _1925;
          do {
            if (_1926) {
              bool _1928 = !(_1908 >= 0.1599999964237213f);
              _1934 = 0.0f;
              if (_1928) {
                float _1930 = 0.23999999463558197f / _1907;
                float _1931 = _1930 + -0.5f;
                float _1932 = _1931 * _1925;
                _1934 = _1932;
              }
            }
            float _1935 = _1934 + 1.0f;
            float _1936 = _1935 * _1879;
            float _1937 = _1935 * _1882;
            float _1938 = _1935 * _1885;
            bool _1939 = (_1936 == _1937);
            bool _1940 = (_1937 == _1938);
            bool _1941 = _1939 && _1940;
            _1970 = 0.0f;
            do {
              if (!_1941) {
                float _1943 = _1936 * 2.0f;
                float _1944 = _1943 - _1937;
                float _1945 = _1944 - _1938;
                float _1946 = _1882 - _1885;
                float _1947 = _1946 * 1.7320507764816284f;
                float _1948 = _1947 * _1935;
                float _1949 = _1948 / _1945;
                float _1950 = atan(_1949);
                float _1951 = _1950 + 3.1415927410125732f;
                float _1952 = _1950 + -3.1415927410125732f;
                bool _1953 = (_1945 < 0.0f);
                bool _1954 = (_1945 == 0.0f);
                bool _1955 = (_1948 >= 0.0f);
                bool _1956 = (_1948 < 0.0f);
                bool _1957 = _1955 && _1953;
                float _1958 = _1957 ? _1951 : _1950;
                bool _1959 = _1956 && _1953;
                float _1960 = _1959 ? _1952 : _1958;
                bool _1961 = _1956 && _1954;
                bool _1962 = _1955 && _1954;
                float _1963 = _1960 * 57.2957763671875f;
                float _1964 = _1961 ? -90.0f : _1963;
                float _1965 = _1962 ? 90.0f : _1964;
                bool _1966 = (_1965 < 0.0f);
                _1970 = _1965;
                if (_1966) {
                  float _1968 = _1965 + 360.0f;
                  _1970 = _1968;
                }
              }
              float _1971 = max(_1970, 0.0f);
              float _1972 = min(_1971, 360.0f);
              bool _1973 = (_1972 < -180.0f);
              do {
                if (_1973) {
                  float _1975 = _1972 + 360.0f;
                  _1981 = _1975;
                } else {
                  bool _1977 = (_1972 > 180.0f);
                  _1981 = _1972;
                  if (_1977) {
                    float _1979 = _1972 + -360.0f;
                    _1981 = _1979;
                  }
                }
                bool _1982 = (_1981 > -67.5f);
                bool _1983 = (_1981 < 67.5f);
                bool _1984 = _1982 && _1983;
                _2020 = 0.0f;
                do {
                  if (_1984) {
                    float _1986 = _1981 + 67.5f;
                    float _1987 = _1986 * 0.029629629105329514f;
                    int _1988 = int(_1987);
                    float _1989 = float(_1988);
                    float _1990 = _1987 - _1989;
                    float _1991 = _1990 * _1990;
                    float _1992 = _1991 * _1990;
                    bool _1993 = (_1988 == 3);
                    if (_1993) {
                      float _1995 = _1992 * 0.1666666716337204f;
                      float _1996 = _1991 * 0.5f;
                      float _1997 = _1990 * 0.5f;
                      float _1998 = 0.1666666716337204f - _1997;
                      float _1999 = _1998 + _1996;
                      float _2000 = _1999 - _1995;
                      _2020 = _2000;
                    } else {
                      bool _2002 = (_1988 == 2);
                      if (_2002) {
                        float _2004 = _1992 * 0.5f;
                        float _2005 = 0.6666666865348816f - _1991;
                        float _2006 = _2005 + _2004;
                        _2020 = _2006;
                      } else {
                        bool _2008 = (_1988 == 1);
                        if (_2008) {
                          float _2010 = _1992 * -0.5f;
                          float _2011 = _1991 + _1990;
                          float _2012 = _2011 * 0.5f;
                          float _2013 = _2010 + 0.1666666716337204f;
                          float _2014 = _2013 + _2012;
                          _2020 = _2014;
                        } else {
                          bool _2016 = (_1988 == 0);
                          float _2017 = _1992 * 0.1666666716337204f;
                          float _2018 = _2016 ? _2017 : 0.0f;
                          _2020 = _2018;
                        }
                      }
                    }
                  }
                  float _2021 = 0.029999999329447746f - _1936;
                  float _2022 = _1894 * 0.27000001072883606f;
                  float _2023 = _2022 * _2021;
                  float _2024 = _2023 * _2020;
                  float _2025 = _2024 + _1936;
                  float _2026 = max(_2025, 0.0f);
                  float _2027 = max(_1937, 0.0f);
                  float _2028 = max(_1938, 0.0f);
                  float _2029 = min(_2026, 65535.0f);
                  float _2030 = min(_2027, 65535.0f);
                  float _2031 = min(_2028, 65535.0f);
                  float _2032 = _2029 * 1.4514392614364624f;
                  float _2033 = mad(-0.2365107536315918f, _2030, _2032);
                  float _2034 = mad(-0.21492856740951538f, _2031, _2033);
                  float _2035 = _2029 * -0.07655377686023712f;
                  float _2036 = mad(1.17622971534729f, _2030, _2035);
                  float _2037 = mad(-0.09967592358589172f, _2031, _2036);
                  float _2038 = _2029 * 0.008316148072481155f;
                  float _2039 = mad(-0.006032449658960104f, _2030, _2038);
                  float _2040 = mad(0.9977163076400757f, _2031, _2039);
                  float _2041 = max(_2034, 0.0f);
                  float _2042 = max(_2037, 0.0f);
                  float _2043 = max(_2040, 0.0f);
                  float _2044 = min(_2041, 65504.0f);
                  float _2045 = min(_2042, 65504.0f);
                  float _2046 = min(_2043, 65504.0f);
                  float _2047 = dot(float3(_2044, _2045, _2046), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2048 = _2044 - _2047;
                  float _2049 = _2045 - _2047;
                  float _2050 = _2046 - _2047;
                  float _2051 = _2048 * 0.9599999785423279f;
                  float _2052 = _2049 * 0.9599999785423279f;
                  float _2053 = _2050 * 0.9599999785423279f;
                  float _2054 = _2051 + _2047;
                  float _2055 = _2052 + _2047;
                  float _2056 = _2053 + _2047;
                  float _2057 = max(_2054, 1.000000013351432e-10f);
                  float _2058 = log2(_2057);
                  float _2059 = _2058 * 0.3010300099849701f;
                  float _2060 = log2(_1846);
                  float _2061 = _2060 * 0.3010300099849701f;
                  bool _2062 = !(_2059 <= _2061);
                  do {
                    if (!_2062) {
                      float _2064 = log2(_1847);
                      float _2065 = _2064 * 0.3010300099849701f;
                      _2130 = _2065;
                    } else {
                      bool _2067 = (_2059 > _2061);
                      float _2068 = log2(_1844);
                      float _2069 = _2068 * 0.3010300099849701f;
                      bool _2070 = (_2059 < _2069);
                      bool _2071 = _2067 && _2070;
                      if (_2071) {
                        float _2073 = _2058 - _2060;
                        float _2074 = _2073 * 0.9030900001525879f;
                        float _2075 = _2068 - _2060;
                        float _2076 = _2075 * 0.3010300099849701f;
                        float _2077 = _2074 / _2076;
                        int _2078 = int(_2077);
                        float _2079 = float(_2078);
                        float _2080 = _2077 - _2079;
                        float _2082 = _13[_2078];
                        int _2083 = _2078 + 1;
                        float _2085 = _13[_2083];
                        int _2086 = _2078 + 2;
                        float _2088 = _13[_2086];
                        float _2089 = _2080 * _2080;
                        float _2090 = _2082 * 0.5f;
                        float _2091 = mad(_2085, -1.0f, _2090);
                        float _2092 = mad(_2088, 0.5f, _2091);
                        float _2093 = _2085 - _2082;
                        float _2094 = mad(_2085, 0.5f, _2090);
                        float _2095 = dot(float3(_2089, _2080, 1.0f), float3(_2092, _2093, _2094));
                        _2130 = _2095;
                      } else {
                        bool _2097 = !(_2059 >= _2069);
                        do {
                          if (!_2097) {
                            float _2099 = log2(_1848);
                            float _2100 = _2099 * 0.3010300099849701f;
                            bool _2101 = (_2059 < _2100);
                            if (_2101) {
                              float _2103 = _2058 - _2068;
                              float _2104 = _2103 * 0.9030900001525879f;
                              float _2105 = _2099 - _2068;
                              float _2106 = _2105 * 0.3010300099849701f;
                              float _2107 = _2104 / _2106;
                              int _2108 = int(_2107);
                              float _2109 = float(_2108);
                              float _2110 = _2107 - _2109;
                              float _2112 = _14[_2108];
                              int _2113 = _2108 + 1;
                              float _2115 = _14[_2113];
                              int _2116 = _2108 + 2;
                              float _2118 = _14[_2116];
                              float _2119 = _2110 * _2110;
                              float _2120 = _2112 * 0.5f;
                              float _2121 = mad(_2115, -1.0f, _2120);
                              float _2122 = mad(_2118, 0.5f, _2121);
                              float _2123 = _2115 - _2112;
                              float _2124 = mad(_2115, 0.5f, _2120);
                              float _2125 = dot(float3(_2119, _2110, 1.0f), float3(_2122, _2123, _2124));
                              _2130 = _2125;
                              break;
                            }
                          }
                          float _2127 = log2(_1849);
                          float _2128 = _2127 * 0.3010300099849701f;
                          _2130 = _2128;
                        } while (false);
                      }
                    }
                    float _2131 = _2130 * 3.321928024291992f;
                    float _2132 = exp2(_2131);
                    float _2133 = max(_2055, 1.000000013351432e-10f);
                    float _2134 = log2(_2133);
                    float _2135 = _2134 * 0.3010300099849701f;
                    bool _2136 = !(_2135 <= _2061);
                    do {
                      if (!_2136) {
                        float _2138 = log2(_1847);
                        float _2139 = _2138 * 0.3010300099849701f;
                        _2204 = _2139;
                      } else {
                        bool _2141 = (_2135 > _2061);
                        float _2142 = log2(_1844);
                        float _2143 = _2142 * 0.3010300099849701f;
                        bool _2144 = (_2135 < _2143);
                        bool _2145 = _2141 && _2144;
                        if (_2145) {
                          float _2147 = _2134 - _2060;
                          float _2148 = _2147 * 0.9030900001525879f;
                          float _2149 = _2142 - _2060;
                          float _2150 = _2149 * 0.3010300099849701f;
                          float _2151 = _2148 / _2150;
                          int _2152 = int(_2151);
                          float _2153 = float(_2152);
                          float _2154 = _2151 - _2153;
                          float _2156 = _13[_2152];
                          int _2157 = _2152 + 1;
                          float _2159 = _13[_2157];
                          int _2160 = _2152 + 2;
                          float _2162 = _13[_2160];
                          float _2163 = _2154 * _2154;
                          float _2164 = _2156 * 0.5f;
                          float _2165 = mad(_2159, -1.0f, _2164);
                          float _2166 = mad(_2162, 0.5f, _2165);
                          float _2167 = _2159 - _2156;
                          float _2168 = mad(_2159, 0.5f, _2164);
                          float _2169 = dot(float3(_2163, _2154, 1.0f), float3(_2166, _2167, _2168));
                          _2204 = _2169;
                        } else {
                          bool _2171 = !(_2135 >= _2143);
                          do {
                            if (!_2171) {
                              float _2173 = log2(_1848);
                              float _2174 = _2173 * 0.3010300099849701f;
                              bool _2175 = (_2135 < _2174);
                              if (_2175) {
                                float _2177 = _2134 - _2142;
                                float _2178 = _2177 * 0.9030900001525879f;
                                float _2179 = _2173 - _2142;
                                float _2180 = _2179 * 0.3010300099849701f;
                                float _2181 = _2178 / _2180;
                                int _2182 = int(_2181);
                                float _2183 = float(_2182);
                                float _2184 = _2181 - _2183;
                                float _2186 = _14[_2182];
                                int _2187 = _2182 + 1;
                                float _2189 = _14[_2187];
                                int _2190 = _2182 + 2;
                                float _2192 = _14[_2190];
                                float _2193 = _2184 * _2184;
                                float _2194 = _2186 * 0.5f;
                                float _2195 = mad(_2189, -1.0f, _2194);
                                float _2196 = mad(_2192, 0.5f, _2195);
                                float _2197 = _2189 - _2186;
                                float _2198 = mad(_2189, 0.5f, _2194);
                                float _2199 = dot(float3(_2193, _2184, 1.0f), float3(_2196, _2197, _2198));
                                _2204 = _2199;
                                break;
                              }
                            }
                            float _2201 = log2(_1849);
                            float _2202 = _2201 * 0.3010300099849701f;
                            _2204 = _2202;
                          } while (false);
                        }
                      }
                      float _2205 = _2204 * 3.321928024291992f;
                      float _2206 = exp2(_2205);
                      float _2207 = max(_2056, 1.000000013351432e-10f);
                      float _2208 = log2(_2207);
                      float _2209 = _2208 * 0.3010300099849701f;
                      bool _2210 = !(_2209 <= _2061);
                      do {
                        if (!_2210) {
                          float _2212 = log2(_1847);
                          float _2213 = _2212 * 0.3010300099849701f;
                          _2278 = _2213;
                        } else {
                          bool _2215 = (_2209 > _2061);
                          float _2216 = log2(_1844);
                          float _2217 = _2216 * 0.3010300099849701f;
                          bool _2218 = (_2209 < _2217);
                          bool _2219 = _2215 && _2218;
                          if (_2219) {
                            float _2221 = _2208 - _2060;
                            float _2222 = _2221 * 0.9030900001525879f;
                            float _2223 = _2216 - _2060;
                            float _2224 = _2223 * 0.3010300099849701f;
                            float _2225 = _2222 / _2224;
                            int _2226 = int(_2225);
                            float _2227 = float(_2226);
                            float _2228 = _2225 - _2227;
                            float _2230 = _13[_2226];
                            int _2231 = _2226 + 1;
                            float _2233 = _13[_2231];
                            int _2234 = _2226 + 2;
                            float _2236 = _13[_2234];
                            float _2237 = _2228 * _2228;
                            float _2238 = _2230 * 0.5f;
                            float _2239 = mad(_2233, -1.0f, _2238);
                            float _2240 = mad(_2236, 0.5f, _2239);
                            float _2241 = _2233 - _2230;
                            float _2242 = mad(_2233, 0.5f, _2238);
                            float _2243 = dot(float3(_2237, _2228, 1.0f), float3(_2240, _2241, _2242));
                            _2278 = _2243;
                          } else {
                            bool _2245 = !(_2209 >= _2217);
                            do {
                              if (!_2245) {
                                float _2247 = log2(_1848);
                                float _2248 = _2247 * 0.3010300099849701f;
                                bool _2249 = (_2209 < _2248);
                                if (_2249) {
                                  float _2251 = _2208 - _2216;
                                  float _2252 = _2251 * 0.9030900001525879f;
                                  float _2253 = _2247 - _2216;
                                  float _2254 = _2253 * 0.3010300099849701f;
                                  float _2255 = _2252 / _2254;
                                  int _2256 = int(_2255);
                                  float _2257 = float(_2256);
                                  float _2258 = _2255 - _2257;
                                  float _2260 = _14[_2256];
                                  int _2261 = _2256 + 1;
                                  float _2263 = _14[_2261];
                                  int _2264 = _2256 + 2;
                                  float _2266 = _14[_2264];
                                  float _2267 = _2258 * _2258;
                                  float _2268 = _2260 * 0.5f;
                                  float _2269 = mad(_2263, -1.0f, _2268);
                                  float _2270 = mad(_2266, 0.5f, _2269);
                                  float _2271 = _2263 - _2260;
                                  float _2272 = mad(_2263, 0.5f, _2268);
                                  float _2273 = dot(float3(_2267, _2258, 1.0f), float3(_2270, _2271, _2272));
                                  _2278 = _2273;
                                  break;
                                }
                              }
                              float _2275 = log2(_1849);
                              float _2276 = _2275 * 0.3010300099849701f;
                              _2278 = _2276;
                            } while (false);
                          }
                        }
                        float _2279 = _2278 * 3.321928024291992f;
                        float _2280 = exp2(_2279);
                        float _2281 = _2132 - _1847;
                        float _2282 = _1849 - _1847;
                        float _2283 = _2281 / _2282;
                        float _2284 = _2206 - _1847;
                        float _2285 = _2284 / _2282;
                        float _2286 = _2280 - _1847;
                        float _2287 = _2286 / _2282;
                        float _2288 = _2283 * 0.6624541878700256f;
                        float _2289 = mad(0.13400420546531677f, _2285, _2288);
                        float _2290 = mad(0.15618768334388733f, _2287, _2289);
                        float _2291 = _2283 * 0.2722287178039551f;
                        float _2292 = mad(0.6740817427635193f, _2285, _2291);
                        float _2293 = mad(0.053689517080783844f, _2287, _2292);
                        float _2294 = _2283 * -0.005574649665504694f;
                        float _2295 = mad(0.00406073359772563f, _2285, _2294);
                        float _2296 = mad(1.0103391408920288f, _2287, _2295);
                        float _2297 = _2290 * 1.6410233974456787f;
                        float _2298 = mad(-0.32480329275131226f, _2293, _2297);
                        float _2299 = mad(-0.23642469942569733f, _2296, _2298);
                        float _2300 = _2290 * -0.663662850856781f;
                        float _2301 = mad(1.6153316497802734f, _2293, _2300);
                        float _2302 = mad(0.016756348311901093f, _2296, _2301);
                        float _2303 = _2290 * 0.011721894145011902f;
                        float _2304 = mad(-0.008284442126750946f, _2293, _2303);
                        float _2305 = mad(0.9883948564529419f, _2296, _2304);
                        float _2306 = max(_2299, 0.0f);
                        float _2307 = max(_2302, 0.0f);
                        float _2308 = max(_2305, 0.0f);
                        float _2309 = min(_2306, 1.0f);
                        float _2310 = min(_2307, 1.0f);
                        float _2311 = min(_2308, 1.0f);
                        float _2312 = _2309 * 0.6624541878700256f;
                        float _2313 = mad(0.13400420546531677f, _2310, _2312);
                        float _2314 = mad(0.15618768334388733f, _2311, _2313);
                        float _2315 = _2309 * 0.2722287178039551f;
                        float _2316 = mad(0.6740817427635193f, _2310, _2315);
                        float _2317 = mad(0.053689517080783844f, _2311, _2316);
                        float _2318 = _2309 * -0.005574649665504694f;
                        float _2319 = mad(0.00406073359772563f, _2310, _2318);
                        float _2320 = mad(1.0103391408920288f, _2311, _2319);
                        float _2321 = _2314 * 1.6410233974456787f;
                        float _2322 = mad(-0.32480329275131226f, _2317, _2321);
                        float _2323 = mad(-0.23642469942569733f, _2320, _2322);
                        float _2324 = _2314 * -0.663662850856781f;
                        float _2325 = mad(1.6153316497802734f, _2317, _2324);
                        float _2326 = mad(0.016756348311901093f, _2320, _2325);
                        float _2327 = _2314 * 0.011721894145011902f;
                        float _2328 = mad(-0.008284442126750946f, _2317, _2327);
                        float _2329 = mad(0.9883948564529419f, _2320, _2328);
                        float _2330 = max(_2323, 0.0f);
                        float _2331 = max(_2326, 0.0f);
                        float _2332 = max(_2329, 0.0f);
                        float _2333 = min(_2330, 65535.0f);
                        float _2334 = min(_2331, 65535.0f);
                        float _2335 = min(_2332, 65535.0f);
                        float _2336 = _2333 * _1849;
                        float _2337 = _2334 * _1849;
                        float _2338 = _2335 * _1849;
                        float _2339 = max(_2336, 0.0f);
                        float _2340 = max(_2337, 0.0f);
                        float _2341 = max(_2338, 0.0f);
                        float _2342 = min(_2339, 65535.0f);
                        float _2343 = min(_2340, 65535.0f);
                        float _2344 = min(_2341, 65535.0f);
                        bool _2345 = (_1114 == 6);
                        _2357 = _2342;
                        _2358 = _2343;
                        _2359 = _2344;
                        do {
                          if (!_2345) {
                            float _2347 = _2342 * _51;
                            float _2348 = mad(_52, _2343, _2347);
                            float _2349 = mad(_53, _2344, _2348);
                            float _2350 = _2342 * _54;
                            float _2351 = mad(_55, _2343, _2350);
                            float _2352 = mad(_56, _2344, _2351);
                            float _2353 = _2342 * _57;
                            float _2354 = mad(_58, _2343, _2353);
                            float _2355 = mad(_59, _2344, _2354);
                            _2357 = _2349;
                            _2358 = _2352;
                            _2359 = _2355;
                          }
                          float _2360 = _2357 * 9.999999747378752e-05f;
                          float _2361 = _2358 * 9.999999747378752e-05f;
                          float _2362 = _2359 * 9.999999747378752e-05f;
                          float _2363 = log2(_2360);
                          float _2364 = log2(_2361);
                          float _2365 = log2(_2362);
                          float _2366 = _2363 * 0.1593017578125f;
                          float _2367 = _2364 * 0.1593017578125f;
                          float _2368 = _2365 * 0.1593017578125f;
                          float _2369 = exp2(_2366);
                          float _2370 = exp2(_2367);
                          float _2371 = exp2(_2368);
                          float _2372 = _2369 * 18.8515625f;
                          float _2373 = _2370 * 18.8515625f;
                          float _2374 = _2371 * 18.8515625f;
                          float _2375 = _2372 + 0.8359375f;
                          float _2376 = _2373 + 0.8359375f;
                          float _2377 = _2374 + 0.8359375f;
                          float _2378 = _2369 * 18.6875f;
                          float _2379 = _2370 * 18.6875f;
                          float _2380 = _2371 * 18.6875f;
                          float _2381 = _2378 + 1.0f;
                          float _2382 = _2379 + 1.0f;
                          float _2383 = _2380 + 1.0f;
                          float _2384 = 1.0f / _2381;
                          float _2385 = 1.0f / _2382;
                          float _2386 = 1.0f / _2383;
                          float _2387 = _2384 * _2375;
                          float _2388 = _2385 * _2376;
                          float _2389 = _2386 * _2377;
                          float _2390 = log2(_2387);
                          float _2391 = log2(_2388);
                          float _2392 = log2(_2389);
                          float _2393 = _2390 * 78.84375f;
                          float _2394 = _2391 * 78.84375f;
                          float _2395 = _2392 * 78.84375f;
                          float _2396 = exp2(_2393);
                          float _2397 = exp2(_2394);
                          float _2398 = exp2(_2395);
                          _2536 = _2396;
                          _2537 = _2397;
                          _2538 = _2398;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2400 = (_1114 == 7);
          if (_2400) {
            float _2403 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2404 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2405 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2407 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2408 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2409 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2411 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2412 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2413 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2414 = _2403 * _1096;
            float _2415 = mad(_2404, _1097, _2414);
            float _2416 = mad(_2405, _1098, _2415);
            float _2417 = _2407 * _1096;
            float _2418 = mad(_2408, _1097, _2417);
            float _2419 = mad(_2409, _1098, _2418);
            float _2420 = _2411 * _1096;
            float _2421 = mad(_2412, _1097, _2420);
            float _2422 = mad(_2413, _1098, _2421);
            float _2423 = _2416 * _51;
            float _2424 = mad(_52, _2419, _2423);
            float _2425 = mad(_53, _2422, _2424);
            float _2426 = _2416 * _54;
            float _2427 = mad(_55, _2419, _2426);
            float _2428 = mad(_56, _2422, _2427);
            float _2429 = _2416 * _57;
            float _2430 = mad(_58, _2419, _2429);
            float _2431 = mad(_59, _2422, _2430);
            float _2432 = _2425 * 9.999999747378752e-05f;
            float _2433 = _2428 * 9.999999747378752e-05f;
            float _2434 = _2431 * 9.999999747378752e-05f;
            float _2435 = log2(_2432);
            float _2436 = log2(_2433);
            float _2437 = log2(_2434);
            float _2438 = _2435 * 0.1593017578125f;
            float _2439 = _2436 * 0.1593017578125f;
            float _2440 = _2437 * 0.1593017578125f;
            float _2441 = exp2(_2438);
            float _2442 = exp2(_2439);
            float _2443 = exp2(_2440);
            float _2444 = _2441 * 18.8515625f;
            float _2445 = _2442 * 18.8515625f;
            float _2446 = _2443 * 18.8515625f;
            float _2447 = _2444 + 0.8359375f;
            float _2448 = _2445 + 0.8359375f;
            float _2449 = _2446 + 0.8359375f;
            float _2450 = _2441 * 18.6875f;
            float _2451 = _2442 * 18.6875f;
            float _2452 = _2443 * 18.6875f;
            float _2453 = _2450 + 1.0f;
            float _2454 = _2451 + 1.0f;
            float _2455 = _2452 + 1.0f;
            float _2456 = 1.0f / _2453;
            float _2457 = 1.0f / _2454;
            float _2458 = 1.0f / _2455;
            float _2459 = _2456 * _2447;
            float _2460 = _2457 * _2448;
            float _2461 = _2458 * _2449;
            float _2462 = log2(_2459);
            float _2463 = log2(_2460);
            float _2464 = log2(_2461);
            float _2465 = _2462 * 78.84375f;
            float _2466 = _2463 * 78.84375f;
            float _2467 = _2464 * 78.84375f;
            float _2468 = exp2(_2465);
            float _2469 = exp2(_2466);
            float _2470 = exp2(_2467);
            _2536 = _2468;
            _2537 = _2469;
            _2538 = _2470;
          } else {
            bool _2472 = (_1114 == 8);
            _2536 = _1096;
            _2537 = _1097;
            _2538 = _1098;
            if (!_2472) {
              bool _2474 = (_1114 == 9);
              float _2476 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2477 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2478 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2480 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2481 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2482 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2484 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2485 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2486 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2474) {
                float _2488 = _2476 * _1084;
                float _2489 = mad(_2477, _1085, _2488);
                float _2490 = mad(_2478, _1086, _2489);
                float _2491 = _2480 * _1084;
                float _2492 = mad(_2481, _1085, _2491);
                float _2493 = mad(_2482, _1086, _2492);
                float _2494 = _2484 * _1084;
                float _2495 = mad(_2485, _1085, _2494);
                float _2496 = mad(_2486, _1086, _2495);
                float _2497 = _2490 * _51;
                float _2498 = mad(_52, _2493, _2497);
                float _2499 = mad(_53, _2496, _2498);
                float _2500 = _2490 * _54;
                float _2501 = mad(_55, _2493, _2500);
                float _2502 = mad(_56, _2496, _2501);
                float _2503 = _2490 * _57;
                float _2504 = mad(_58, _2493, _2503);
                float _2505 = mad(_59, _2496, _2504);
                _2536 = _2499;
                _2537 = _2502;
                _2538 = _2505;
              } else {
                float _2507 = _2476 * _1110;
                float _2508 = mad(_2477, _1111, _2507);
                float _2509 = mad(_2478, _1112, _2508);
                float _2510 = _2480 * _1110;
                float _2511 = mad(_2481, _1111, _2510);
                float _2512 = mad(_2482, _1112, _2511);
                float _2513 = _2484 * _1110;
                float _2514 = mad(_2485, _1111, _2513);
                float _2515 = mad(_2486, _1112, _2514);
                float _2516 = _2509 * _51;
                float _2517 = mad(_52, _2512, _2516);
                float _2518 = mad(_53, _2515, _2517);
                float _2519 = _2509 * _54;
                float _2520 = mad(_55, _2512, _2519);
                float _2521 = mad(_56, _2515, _2520);
                float _2522 = _2509 * _57;
                float _2523 = mad(_58, _2512, _2522);
                float _2524 = mad(_59, _2515, _2523);
                float _2525 = _RootShaderParameters_040z;
                float _2526 = log2(_2518);
                float _2527 = log2(_2521);
                float _2528 = log2(_2524);
                float _2529 = _2526 * _2525;
                float _2530 = _2527 * _2525;
                float _2531 = _2528 * _2525;
                float _2532 = exp2(_2529);
                float _2533 = exp2(_2530);
                float _2534 = exp2(_2531);
                _2536 = _2532;
                _2537 = _2533;
                _2538 = _2534;
              }
            }
          }
        }
      }
    }
  }
  float _2539 = _2536 * 0.9523810148239136f;
  float _2540 = _2537 * 0.9523810148239136f;
  float _2541 = _2538 * 0.9523810148239136f;
  // _2542 = _1;
  // CustomEdit
  RWOutputTexture[int3(_10, _11, _12)] = float4(_2539, _2540, _2541, 0.0f);
}
