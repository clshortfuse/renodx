#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

Texture2D<float4> Textures_2 : register(t1);

Texture2D<float4> Textures_3 : register(t2);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_005z : packoffset(c005.z);
  float _RootShaderParameters_005w : packoffset(c005.w);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

SamplerState Samplers_2 : register(s1);

SamplerState Samplers_3 : register(s2);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_3;
  // texture _3 = Textures_2;
  // texture _4 = Textures_1;
  // SamplerState _5 = Samplers_3;
  // SamplerState _6 = Samplers_2;
  // SamplerState _7 = Samplers_1;
  // cbuffer _8 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _9 = _RootShaderParameters;
  // _10 = _8;
  // _11 = _9;
  float _15[6];
  float _16[6];
  float _17[6];
  float _18[6];
  float _19 = float(_12);
  float _20 = float(_13);
  float _21 = _19 + 0.5f;
  float _22 = _20 + 0.5f;
  float _24 = _RootShaderParameters_042x;
  float _25 = _RootShaderParameters_042y;
  float _26 = _24 * _21;
  float _27 = _25 * _22;
  float _28 = _26 + -0.015625f;
  float _29 = _27 + -0.015625f;
  float _30 = _28 * 1.0322580337524414f;
  float _31 = _29 * 1.0322580337524414f;
  float _32 = float(_14);
  float _33 = _32 * 0.032258063554763794f;
  uint _35 = _RootShaderParameters_041x;
  bool _36 = (_35 == 1);
  float _53 = 1.379158854484558f;
  float _54 = -0.3088507056236267f;
  float _55 = -0.07034677267074585f;
  float _56 = -0.06933528929948807f;
  float _57 = 1.0822921991348267f;
  float _58 = -0.012962047010660172f;
  float _59 = -0.002159259282052517f;
  float _60 = -0.045465391129255295f;
  float _61 = 1.0477596521377563f;
  float _119;
  float _120;
  float _121;
  float _645;
  float _681;
  float _692;
  float _756;
  float _935;
  float _946;
  float _957;
  float _1180;
  float _1181;
  float _1182;
  float _1193;
  float _1204;
  float _1386;
  float _1422;
  float _1433;
  float _1472;
  float _1582;
  float _1656;
  float _1730;
  float _1809;
  float _1810;
  float _1811;
  float _1962;
  float _1998;
  float _2009;
  float _2048;
  float _2158;
  float _2232;
  float _2306;
  float _2385;
  float _2386;
  float _2387;
  float _2564;
  float _2565;
  float _2566;
  if (!_36) {
    bool _38 = (_35 == 2);
    _53 = 1.02579927444458f;
    _54 = -0.020052503794431686f;
    _55 = -0.0057713985443115234f;
    _56 = -0.0022350111976265907f;
    _57 = 1.0045825242996216f;
    _58 = -0.002352306619286537f;
    _59 = -0.005014004185795784f;
    _60 = -0.025293385609984398f;
    _61 = 1.0304402112960815f;
    if (!_38) {
      bool _40 = (_35 == 3);
      _53 = 0.6954522132873535f;
      _54 = 0.14067870378494263f;
      _55 = 0.16386906802654266f;
      _56 = 0.044794563204050064f;
      _57 = 0.8596711158752441f;
      _58 = 0.0955343171954155f;
      _59 = -0.005525882821530104f;
      _60 = 0.004025210160762072f;
      _61 = 1.0015007257461548f;
      if (!_40) {
        bool _42 = (_35 == 4);
        float _43 = _42 ? 1.0f : 1.7050515413284302f;
        float _44 = _42 ? 0.0f : -0.6217905879020691f;
        float _45 = _42 ? 0.0f : -0.0832584798336029f;
        float _46 = _42 ? 0.0f : -0.13025718927383423f;
        float _47 = _42 ? 1.0f : 1.1408027410507202f;
        float _48 = _42 ? 0.0f : -0.010548528283834457f;
        float _49 = _42 ? 0.0f : -0.024003278464078903f;
        float _50 = _42 ? 0.0f : -0.1289687603712082f;
        float _51 = _42 ? 1.0f : 1.152971863746643f;
        _53 = _43;
        _54 = _44;
        _55 = _45;
        _56 = _46;
        _57 = _47;
        _58 = _48;
        _59 = _49;
        _60 = _50;
        _61 = _51;
      }
    }
  }
  uint _63 = _RootShaderParameters_040w;
  bool _64 = (_63 > 2);
  if (_64) {
    float _66 = log2(_30);
    float _67 = log2(_31);
    float _68 = log2(_33);
    float _69 = _66 * 0.012683313339948654f;
    float _70 = _67 * 0.012683313339948654f;
    float _71 = _68 * 0.012683313339948654f;
    float _72 = exp2(_69);
    float _73 = exp2(_70);
    float _74 = exp2(_71);
    float _75 = _72 + -0.8359375f;
    float _76 = _73 + -0.8359375f;
    float _77 = _74 + -0.8359375f;
    float _78 = max(0.0f, _75);
    float _79 = max(0.0f, _76);
    float _80 = max(0.0f, _77);
    float _81 = _72 * 18.6875f;
    float _82 = _73 * 18.6875f;
    float _83 = _74 * 18.6875f;
    float _84 = 18.8515625f - _81;
    float _85 = 18.8515625f - _82;
    float _86 = 18.8515625f - _83;
    float _87 = _78 / _84;
    float _88 = _79 / _85;
    float _89 = _80 / _86;
    float _90 = log2(_87);
    float _91 = log2(_88);
    float _92 = log2(_89);
    float _93 = _90 * 6.277394771575928f;
    float _94 = _91 * 6.277394771575928f;
    float _95 = _92 * 6.277394771575928f;
    float _96 = exp2(_93);
    float _97 = exp2(_94);
    float _98 = exp2(_95);
    float _99 = _96 * 100.0f;
    float _100 = _97 * 100.0f;
    float _101 = _98 * 100.0f;
    _119 = _99;
    _120 = _100;
    _121 = _101;
  } else {
    float _103 = _28 * 14.45161247253418f;
    float _104 = _103 + -6.07624626159668f;
    float _105 = _29 * 14.45161247253418f;
    float _106 = _105 + -6.07624626159668f;
    float _107 = _32 * 0.4516128897666931f;
    float _108 = _107 + -6.07624626159668f;
    float _109 = exp2(_104);
    float _110 = exp2(_106);
    float _111 = exp2(_108);
    float _112 = _109 * 0.18000000715255737f;
    float _113 = _110 * 0.18000000715255737f;
    float _114 = _111 * 0.18000000715255737f;
    float _115 = _112 + -0.002667719265446067f;
    float _116 = _113 + -0.002667719265446067f;
    float _117 = _114 + -0.002667719265446067f;
    _119 = _115;
    _120 = _116;
    _121 = _117;
  }
  float3 input_color = float3(_119, _120, _121);  // CustomEdit

  float _123 = UniformBufferConstants_WorkingColorSpace_008x;
  float _124 = UniformBufferConstants_WorkingColorSpace_008y;
  float _125 = UniformBufferConstants_WorkingColorSpace_008z;
  float _127 = UniformBufferConstants_WorkingColorSpace_009x;
  float _128 = UniformBufferConstants_WorkingColorSpace_009y;
  float _129 = UniformBufferConstants_WorkingColorSpace_009z;
  float _131 = UniformBufferConstants_WorkingColorSpace_010x;
  float _132 = UniformBufferConstants_WorkingColorSpace_010y;
  float _133 = UniformBufferConstants_WorkingColorSpace_010z;
  float _134 = _123 * _119;
  float _135 = mad(_124, _120, _134);
  float _136 = mad(_125, _121, _135);
  float _137 = _127 * _119;
  float _138 = mad(_128, _120, _137);
  float _139 = mad(_129, _121, _138);
  float _140 = _131 * _119;
  float _141 = mad(_132, _120, _140);
  float _142 = mad(_133, _121, _141);
  float _143 = dot(float3(_136, _139, _142), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _144 = _136 / _143;
  float _145 = _139 / _143;
  float _146 = _142 / _143;
  float _147 = _144 + -1.0f;
  float _148 = _145 + -1.0f;
  float _149 = _146 + -1.0f;
  float _150 = dot(float3(_147, _148, _149), float3(_147, _148, _149));
  float _151 = _150 * -4.0f;
  float _152 = exp2(_151);
  float _153 = 1.0f - _152;
  float _155 = _RootShaderParameters_036z;
  float _156 = _143 * _143;
  float _157 = _156 * -4.0f;
  float _158 = _157 * _155;
  float _159 = exp2(_158);
  float _160 = 1.0f - _159;
  float _161 = _160 * _153;
  float _162 = _136 * 1.370412826538086f;
  float _163 = mad(-0.32929131388664246f, _139, _162);
  float _164 = mad(-0.06368283927440643f, _142, _163);
  float _165 = _136 * -0.08343426138162613f;
  float _166 = mad(1.0970908403396606f, _139, _165);
  float _167 = mad(-0.010861567221581936f, _142, _166);
  float _168 = _136 * -0.02579325996339321f;
  float _169 = mad(-0.09862564504146576f, _139, _168);
  float _170 = mad(1.203694462776184f, _142, _169);
  float _171 = _164 - _136;
  float _172 = _167 - _139;
  float _173 = _170 - _142;
  float _174 = _171 * _161;
  float _175 = _172 * _161;
  float _176 = _173 * _161;
  float _177 = _174 + _136;
  float _178 = _175 + _139;
  float _179 = _176 + _142;
  float _180 = dot(float3(_177, _178, _179), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _182 = _RootShaderParameters_024x;
  float _183 = _RootShaderParameters_024y;
  float _184 = _RootShaderParameters_024z;
  float _185 = _RootShaderParameters_024w;
  float _187 = _RootShaderParameters_019x;
  float _188 = _RootShaderParameters_019y;
  float _189 = _RootShaderParameters_019z;
  float _190 = _RootShaderParameters_019w;
  float _191 = _187 + _182;
  float _192 = _188 + _183;
  float _193 = _189 + _184;
  float _194 = _190 + _185;
  float _196 = _RootShaderParameters_023x;
  float _197 = _RootShaderParameters_023y;
  float _198 = _RootShaderParameters_023z;
  float _199 = _RootShaderParameters_023w;
  float _201 = _RootShaderParameters_018x;
  float _202 = _RootShaderParameters_018y;
  float _203 = _RootShaderParameters_018z;
  float _204 = _RootShaderParameters_018w;
  float _205 = _201 * _196;
  float _206 = _202 * _197;
  float _207 = _203 * _198;
  float _208 = _204 * _199;
  float _210 = _RootShaderParameters_022x;
  float _211 = _RootShaderParameters_022y;
  float _212 = _RootShaderParameters_022z;
  float _213 = _RootShaderParameters_022w;
  float _215 = _RootShaderParameters_017x;
  float _216 = _RootShaderParameters_017y;
  float _217 = _RootShaderParameters_017z;
  float _218 = _RootShaderParameters_017w;
  float _219 = _215 * _210;
  float _220 = _216 * _211;
  float _221 = _217 * _212;
  float _222 = _218 * _213;
  float _224 = _RootShaderParameters_021x;
  float _225 = _RootShaderParameters_021y;
  float _226 = _RootShaderParameters_021z;
  float _227 = _RootShaderParameters_021w;
  float _229 = _RootShaderParameters_016x;
  float _230 = _RootShaderParameters_016y;
  float _231 = _RootShaderParameters_016z;
  float _232 = _RootShaderParameters_016w;
  float _233 = _229 * _224;
  float _234 = _230 * _225;
  float _235 = _231 * _226;
  float _236 = _232 * _227;
  float _238 = _RootShaderParameters_020x;
  float _239 = _RootShaderParameters_020y;
  float _240 = _RootShaderParameters_020z;
  float _241 = _RootShaderParameters_020w;
  float _243 = _RootShaderParameters_015x;
  float _244 = _RootShaderParameters_015y;
  float _245 = _RootShaderParameters_015z;
  float _246 = _RootShaderParameters_015w;
  float _247 = _243 * _238;
  float _248 = _244 * _239;
  float _249 = _245 * _240;
  float _250 = _246 * _241;
  float _251 = _247 * _250;
  float _252 = _248 * _250;
  float _253 = _249 * _250;
  float _254 = _177 - _180;
  float _255 = _178 - _180;
  float _256 = _179 - _180;
  float _257 = _251 * _254;
  float _258 = _252 * _255;
  float _259 = _253 * _256;
  float _260 = _257 + _180;
  float _261 = _258 + _180;
  float _262 = _259 + _180;
  float _263 = max(0.0f, _260);
  float _264 = max(0.0f, _261);
  float _265 = max(0.0f, _262);
  float _266 = _233 * _236;
  float _267 = _234 * _236;
  float _268 = _235 * _236;
  float _269 = _263 * 5.55555534362793f;
  float _270 = _264 * 5.55555534362793f;
  float _271 = _265 * 5.55555534362793f;
  float _272 = log2(_269);
  float _273 = log2(_270);
  float _274 = log2(_271);
  float _275 = _266 * _272;
  float _276 = _267 * _273;
  float _277 = _268 * _274;
  float _278 = exp2(_275);
  float _279 = exp2(_276);
  float _280 = exp2(_277);
  float _281 = _278 * 0.18000000715255737f;
  float _282 = _279 * 0.18000000715255737f;
  float _283 = _280 * 0.18000000715255737f;
  float _284 = _219 * _222;
  float _285 = _220 * _222;
  float _286 = _221 * _222;
  float _287 = 1.0f / _284;
  float _288 = 1.0f / _285;
  float _289 = 1.0f / _286;
  float _290 = log2(_281);
  float _291 = log2(_282);
  float _292 = log2(_283);
  float _293 = _290 * _287;
  float _294 = _291 * _288;
  float _295 = _292 * _289;
  float _296 = exp2(_293);
  float _297 = exp2(_294);
  float _298 = exp2(_295);
  float _299 = _205 * _208;
  float _300 = _206 * _208;
  float _301 = _207 * _208;
  float _302 = _299 * _296;
  float _303 = _300 * _297;
  float _304 = _301 * _298;
  float _305 = _191 + _194;
  float _306 = _192 + _194;
  float _307 = _193 + _194;
  float _308 = _305 + _302;
  float _309 = _306 + _303;
  float _310 = _307 + _304;
  float _312 = _RootShaderParameters_035z;
  float _313 = _180 / _312;
  float _314 = saturate(_313);
  float _315 = _314 * 2.0f;
  float _316 = 3.0f - _315;
  float _317 = _314 * _314;
  float _318 = _317 * _316;
  float _319 = 1.0f - _318;
  float _321 = _RootShaderParameters_034x;
  float _322 = _RootShaderParameters_034y;
  float _323 = _RootShaderParameters_034z;
  float _324 = _RootShaderParameters_034w;
  float _325 = _187 + _321;
  float _326 = _188 + _322;
  float _327 = _189 + _323;
  float _328 = _190 + _324;
  float _330 = _RootShaderParameters_033x;
  float _331 = _RootShaderParameters_033y;
  float _332 = _RootShaderParameters_033z;
  float _333 = _RootShaderParameters_033w;
  float _334 = _201 * _330;
  float _335 = _202 * _331;
  float _336 = _203 * _332;
  float _337 = _204 * _333;
  float _339 = _RootShaderParameters_032x;
  float _340 = _RootShaderParameters_032y;
  float _341 = _RootShaderParameters_032z;
  float _342 = _RootShaderParameters_032w;
  float _343 = _215 * _339;
  float _344 = _216 * _340;
  float _345 = _217 * _341;
  float _346 = _218 * _342;
  float _348 = _RootShaderParameters_031x;
  float _349 = _RootShaderParameters_031y;
  float _350 = _RootShaderParameters_031z;
  float _351 = _RootShaderParameters_031w;
  float _352 = _229 * _348;
  float _353 = _230 * _349;
  float _354 = _231 * _350;
  float _355 = _232 * _351;
  float _357 = _RootShaderParameters_030x;
  float _358 = _RootShaderParameters_030y;
  float _359 = _RootShaderParameters_030z;
  float _360 = _RootShaderParameters_030w;
  float _361 = _243 * _357;
  float _362 = _244 * _358;
  float _363 = _245 * _359;
  float _364 = _246 * _360;
  float _365 = _361 * _364;
  float _366 = _362 * _364;
  float _367 = _363 * _364;
  float _368 = _365 * _254;
  float _369 = _366 * _255;
  float _370 = _367 * _256;
  float _371 = _368 + _180;
  float _372 = _369 + _180;
  float _373 = _370 + _180;
  float _374 = max(0.0f, _371);
  float _375 = max(0.0f, _372);
  float _376 = max(0.0f, _373);
  float _377 = _352 * _355;
  float _378 = _353 * _355;
  float _379 = _354 * _355;
  float _380 = _374 * 5.55555534362793f;
  float _381 = _375 * 5.55555534362793f;
  float _382 = _376 * 5.55555534362793f;
  float _383 = log2(_380);
  float _384 = log2(_381);
  float _385 = log2(_382);
  float _386 = _377 * _383;
  float _387 = _378 * _384;
  float _388 = _379 * _385;
  float _389 = exp2(_386);
  float _390 = exp2(_387);
  float _391 = exp2(_388);
  float _392 = _389 * 0.18000000715255737f;
  float _393 = _390 * 0.18000000715255737f;
  float _394 = _391 * 0.18000000715255737f;
  float _395 = _343 * _346;
  float _396 = _344 * _346;
  float _397 = _345 * _346;
  float _398 = 1.0f / _395;
  float _399 = 1.0f / _396;
  float _400 = 1.0f / _397;
  float _401 = log2(_392);
  float _402 = log2(_393);
  float _403 = log2(_394);
  float _404 = _401 * _398;
  float _405 = _402 * _399;
  float _406 = _403 * _400;
  float _407 = exp2(_404);
  float _408 = exp2(_405);
  float _409 = exp2(_406);
  float _410 = _334 * _337;
  float _411 = _335 * _337;
  float _412 = _336 * _337;
  float _413 = _410 * _407;
  float _414 = _411 * _408;
  float _415 = _412 * _409;
  float _416 = _325 + _328;
  float _417 = _326 + _328;
  float _418 = _327 + _328;
  float _419 = _416 + _413;
  float _420 = _417 + _414;
  float _421 = _418 + _415;
  float _422 = _RootShaderParameters_036x;
  float _423 = _RootShaderParameters_035w;
  float _424 = _422 - _423;
  float _425 = _180 - _423;
  float _426 = _425 / _424;
  float _427 = saturate(_426);
  float _428 = _427 * 2.0f;
  float _429 = 3.0f - _428;
  float _430 = _427 * _427;
  float _431 = _430 * _429;
  float _433 = _RootShaderParameters_029x;
  float _434 = _RootShaderParameters_029y;
  float _435 = _RootShaderParameters_029z;
  float _436 = _RootShaderParameters_029w;
  float _437 = _187 + _433;
  float _438 = _188 + _434;
  float _439 = _189 + _435;
  float _440 = _190 + _436;
  float _442 = _RootShaderParameters_028x;
  float _443 = _RootShaderParameters_028y;
  float _444 = _RootShaderParameters_028z;
  float _445 = _RootShaderParameters_028w;
  float _446 = _201 * _442;
  float _447 = _202 * _443;
  float _448 = _203 * _444;
  float _449 = _204 * _445;
  float _451 = _RootShaderParameters_027x;
  float _452 = _RootShaderParameters_027y;
  float _453 = _RootShaderParameters_027z;
  float _454 = _RootShaderParameters_027w;
  float _455 = _215 * _451;
  float _456 = _216 * _452;
  float _457 = _217 * _453;
  float _458 = _218 * _454;
  float _460 = _RootShaderParameters_026x;
  float _461 = _RootShaderParameters_026y;
  float _462 = _RootShaderParameters_026z;
  float _463 = _RootShaderParameters_026w;
  float _464 = _229 * _460;
  float _465 = _230 * _461;
  float _466 = _231 * _462;
  float _467 = _232 * _463;
  float _469 = _RootShaderParameters_025x;
  float _470 = _RootShaderParameters_025y;
  float _471 = _RootShaderParameters_025z;
  float _472 = _RootShaderParameters_025w;
  float _473 = _243 * _469;
  float _474 = _244 * _470;
  float _475 = _245 * _471;
  float _476 = _246 * _472;
  float _477 = _473 * _476;
  float _478 = _474 * _476;
  float _479 = _475 * _476;
  float _480 = _477 * _254;
  float _481 = _478 * _255;
  float _482 = _479 * _256;
  float _483 = _480 + _180;
  float _484 = _481 + _180;
  float _485 = _482 + _180;
  float _486 = max(0.0f, _483);
  float _487 = max(0.0f, _484);
  float _488 = max(0.0f, _485);
  float _489 = _464 * _467;
  float _490 = _465 * _467;
  float _491 = _466 * _467;
  float _492 = _486 * 5.55555534362793f;
  float _493 = _487 * 5.55555534362793f;
  float _494 = _488 * 5.55555534362793f;
  float _495 = log2(_492);
  float _496 = log2(_493);
  float _497 = log2(_494);
  float _498 = _489 * _495;
  float _499 = _490 * _496;
  float _500 = _491 * _497;
  float _501 = exp2(_498);
  float _502 = exp2(_499);
  float _503 = exp2(_500);
  float _504 = _501 * 0.18000000715255737f;
  float _505 = _502 * 0.18000000715255737f;
  float _506 = _503 * 0.18000000715255737f;
  float _507 = _455 * _458;
  float _508 = _456 * _458;
  float _509 = _457 * _458;
  float _510 = 1.0f / _507;
  float _511 = 1.0f / _508;
  float _512 = 1.0f / _509;
  float _513 = log2(_504);
  float _514 = log2(_505);
  float _515 = log2(_506);
  float _516 = _513 * _510;
  float _517 = _514 * _511;
  float _518 = _515 * _512;
  float _519 = exp2(_516);
  float _520 = exp2(_517);
  float _521 = exp2(_518);
  float _522 = _446 * _449;
  float _523 = _447 * _449;
  float _524 = _448 * _449;
  float _525 = _522 * _519;
  float _526 = _523 * _520;
  float _527 = _524 * _521;
  float _528 = _437 + _440;
  float _529 = _438 + _440;
  float _530 = _439 + _440;
  float _531 = _528 + _525;
  float _532 = _529 + _526;
  float _533 = _530 + _527;
  float _534 = _318 - _431;
  float _535 = _319 * _308;
  float _536 = _319 * _309;
  float _537 = _319 * _310;
  float _538 = _531 * _534;
  float _539 = _532 * _534;
  float _540 = _533 * _534;
  float _541 = _431 * _419;
  float _542 = _431 * _420;
  float _543 = _431 * _421;
  float _544 = _541 + _535;
  float _545 = _544 + _538;
  float _546 = _542 + _536;
  float _547 = _546 + _539;
  float _548 = _543 + _537;
  float _549 = _548 + _540;
  float _551 = UniformBufferConstants_WorkingColorSpace_012x;
  float _552 = UniformBufferConstants_WorkingColorSpace_012y;
  float _553 = UniformBufferConstants_WorkingColorSpace_012z;
  float _555 = UniformBufferConstants_WorkingColorSpace_013x;
  float _556 = UniformBufferConstants_WorkingColorSpace_013y;
  float _557 = UniformBufferConstants_WorkingColorSpace_013z;
  float _559 = UniformBufferConstants_WorkingColorSpace_014x;
  float _560 = UniformBufferConstants_WorkingColorSpace_014y;
  float _561 = UniformBufferConstants_WorkingColorSpace_014z;
  float _562 = _545 * _551;
  float _563 = mad(_552, _547, _562);
  float _564 = mad(_553, _549, _563);
  float _565 = _555 * _545;
  float _566 = mad(_556, _547, _565);
  float _567 = mad(_557, _549, _566);
  float _568 = _559 * _545;
  float _569 = mad(_560, _547, _568);
  float _570 = mad(_561, _549, _569);
  float _571 = _RootShaderParameters_036y;
  float _572 = _545 * 0.9386394023895264f;
  float _573 = mad(-4.540197551250458e-09f, _547, _572);
  float _574 = mad(0.061360642313957214f, _549, _573);
  float _575 = _545 * 6.775371730327606e-08f;
  float _576 = mad(0.8307942152023315f, _547, _575);
  float _577 = mad(0.169205904006958f, _549, _576);
  float _578 = _545 * -9.313225746154785e-10f;
  float _579 = mad(-2.3283064365386963e-10f, _547, _578);
  float _580 = _574 - _545;
  float _581 = _577 - _547;
  float _582 = _580 * _571;
  float _583 = _581 * _571;
  float _584 = _579 * _571;
  float _585 = _582 + _545;
  float _586 = _583 + _547;
  float _587 = _584 + _549;
  float3 ap1_graded_color = float3(_585, _586, _587);  // CustomEdit

  float _588 = _585 * 0.6954522132873535f;
  float _589 = mad(0.14067868888378143f, _586, _588);
  float _590 = mad(0.16386905312538147f, _587, _589);
  float _591 = _585 * 0.044794581830501556f;
  float _592 = mad(0.8596711158752441f, _586, _591);
  float _593 = mad(0.0955343246459961f, _587, _592);
  float _594 = _585 * -0.005525882821530104f;
  float _595 = mad(0.004025210160762072f, _586, _594);
  float _596 = mad(1.0015007257461548f, _587, _595);
  float _597 = min(_590, _593);
  float _598 = min(_597, _596);
  float _599 = max(_590, _593);
  float _600 = max(_599, _596);
  float _601 = max(_600, 1.000000013351432e-10f);
  float _602 = max(_598, 1.000000013351432e-10f);
  float _603 = _601 - _602;
  float _604 = max(_600, 0.009999999776482582f);
  float _605 = _603 / _604;
  float _606 = _596 - _593;
  float _607 = _606 * _596;
  float _608 = _593 - _590;
  float _609 = _608 * _593;
  float _610 = _607 + _609;
  float _611 = _590 - _596;
  float _612 = _611 * _590;
  float _613 = _610 + _612;
  float _614 = sqrt(_613);
  float _615 = _614 * 1.75f;
  float _616 = _593 + _590;
  float _617 = _616 + _596;
  float _618 = _617 + _615;
  float _619 = _618 * 0.3333333432674408f;
  float _620 = _605 + -0.4000000059604645f;
  float _621 = _620 * 5.0f;
  float _622 = _620 * 2.5f;
  float _623 = abs(_622);
  float _624 = 1.0f - _623;
  float _625 = max(_624, 0.0f);
  bool _626 = (_621 > 0.0f);
  bool _627 = (_621 < 0.0f);
  int _628 = int(_626);
  int _629 = int(_627);
  int _630 = _628 - _629;
  float _631 = float(_630);
  float _632 = _625 * _625;
  float _633 = 1.0f - _632;
  float _634 = _631 * _633;
  float _635 = _634 + 1.0f;
  float _636 = _635 * 0.02500000037252903f;
  bool _637 = !(_619 <= 0.0533333346247673f);
  _645 = _636;
  if (_637) {
    bool _639 = !(_619 >= 0.1599999964237213f);
    _645 = 0.0f;
    if (_639) {
      float _641 = 0.23999999463558197f / _618;
      float _642 = _641 + -0.5f;
      float _643 = _642 * _636;
      _645 = _643;
    }
  }
  float _646 = _645 + 1.0f;
  float _647 = _646 * _590;
  float _648 = _646 * _593;
  float _649 = _646 * _596;
  bool _650 = (_647 == _648);
  bool _651 = (_648 == _649);
  bool _652 = _650 && _651;
  _681 = 0.0f;
  if (!_652) {
    float _654 = _647 * 2.0f;
    float _655 = _654 - _648;
    float _656 = _655 - _649;
    float _657 = _593 - _596;
    float _658 = _657 * 1.7320507764816284f;
    float _659 = _658 * _646;
    float _660 = _659 / _656;
    float _661 = atan(_660);
    float _662 = _661 + 3.1415927410125732f;
    float _663 = _661 + -3.1415927410125732f;
    bool _664 = (_656 < 0.0f);
    bool _665 = (_656 == 0.0f);
    bool _666 = (_659 >= 0.0f);
    bool _667 = (_659 < 0.0f);
    bool _668 = _666 && _664;
    float _669 = _668 ? _662 : _661;
    bool _670 = _667 && _664;
    float _671 = _670 ? _663 : _669;
    bool _672 = _667 && _665;
    bool _673 = _666 && _665;
    float _674 = _671 * 57.2957763671875f;
    float _675 = _672 ? -90.0f : _674;
    float _676 = _673 ? 90.0f : _675;
    bool _677 = (_676 < 0.0f);
    _681 = _676;
    if (_677) {
      float _679 = _676 + 360.0f;
      _681 = _679;
    }
  }
  float _682 = max(_681, 0.0f);
  float _683 = min(_682, 360.0f);
  bool _684 = (_683 < -180.0f);
  if (_684) {
    float _686 = _683 + 360.0f;
    _692 = _686;
  } else {
    bool _688 = (_683 > 180.0f);
    _692 = _683;
    if (_688) {
      float _690 = _683 + -360.0f;
      _692 = _690;
    }
  }
  float _693 = _692 * 0.014814814552664757f;
  float _694 = abs(_693);
  float _695 = 1.0f - _694;
  float _696 = saturate(_695);
  float _697 = _696 * 2.0f;
  float _698 = 3.0f - _697;
  float _699 = _696 * _696;
  float _700 = _699 * _698;
  float _701 = 0.029999999329447746f - _647;
  float _702 = _605 * 0.18000000715255737f;
  float _703 = _702 * _701;
  float _704 = _700 * _700;
  float _705 = _704 * _703;
  float _706 = _705 + _647;
  float _707 = _706 * 1.4514392614364624f;
  float _708 = mad(-0.2365107536315918f, _648, _707);
  float _709 = mad(-0.21492856740951538f, _649, _708);
  float _710 = _706 * -0.07655377686023712f;
  float _711 = mad(1.17622971534729f, _648, _710);
  float _712 = mad(-0.09967592358589172f, _649, _711);
  float _713 = _706 * 0.008316148072481155f;
  float _714 = mad(-0.006032449658960104f, _648, _713);
  float _715 = mad(0.9977163076400757f, _649, _714);
  float _716 = max(0.0f, _709);
  float _717 = max(0.0f, _712);
  float _718 = max(0.0f, _715);
  float _719 = dot(float3(_716, _717, _718), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _720 = _716 - _719;
  float _721 = _717 - _719;
  float _722 = _718 - _719;
  float _723 = _720 * 0.9599999785423279f;
  float _724 = _721 * 0.9599999785423279f;
  float _725 = _722 * 0.9599999785423279f;
  float _726 = _723 + _719;
  float _727 = _724 + _719;
  float _728 = _725 + _719;
  float3 ap1_aces_colored = float3(_726, _727, _728);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _730 = _RootShaderParameters_037w;
  float _731 = _730 + 1.0f;
  float _732 = _RootShaderParameters_037y;
  float _733 = _731 - _732;
  float _735 = _RootShaderParameters_038x;
  float _736 = _735 + 1.0f;
  float _737 = _RootShaderParameters_037z;
  float _738 = _736 - _737;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _739 = (_732 > 0.800000011920929f);
    float _740 = _RootShaderParameters_037x;
    if (_739) {
      float _742 = 0.8199999928474426f - _732;
      float _743 = _742 / _740;
      float _744 = _743 + -0.7447274923324585f;
      _756 = _744;
    } else {
      float _746 = _730 + 0.18000000715255737f;
      float _747 = _746 / _733;
      float _748 = 2.0f - _747;
      float _749 = _747 / _748;
      float _750 = log2(_749);
      float _751 = _750 * 0.3465735912322998f;
      float _752 = _733 / _740;
      float _753 = _751 * _752;
      float _754 = -0.7447274923324585f - _753;
      _756 = _754;
    }
    float _757 = 1.0f - _732;
    float _758 = _757 / _740;
    float _759 = _758 - _756;
    float _760 = _737 / _740;
    float _761 = _760 - _759;
    float _762 = log2(_726);
    float _763 = log2(_727);
    float _764 = log2(_728);
    float _765 = _762 * 0.3010300099849701f;
    float _766 = _763 * 0.3010300099849701f;
    float _767 = _764 * 0.3010300099849701f;
    float _768 = _765 + _759;
    float _769 = _766 + _759;
    float _770 = _767 + _759;
    float _771 = _740 * _768;
    float _772 = _740 * _769;
    float _773 = _740 * _770;
    float _774 = _733 * 2.0f;
    float _775 = _740 * -2.0f;
    float _776 = _775 / _733;
    float _777 = _765 - _756;
    float _778 = _766 - _756;
    float _779 = _767 - _756;
    float _780 = _777 * 1.4426950216293335f;
    float _781 = _780 * _776;
    float _782 = _778 * 1.4426950216293335f;
    float _783 = _782 * _776;
    float _784 = _779 * 1.4426950216293335f;
    float _785 = _784 * _776;
    float _786 = exp2(_781);
    float _787 = exp2(_783);
    float _788 = exp2(_785);
    float _789 = _786 + 1.0f;
    float _790 = _787 + 1.0f;
    float _791 = _788 + 1.0f;
    float _792 = _774 / _789;
    float _793 = _774 / _790;
    float _794 = _774 / _791;
    float _795 = _792 - _730;
    float _796 = _793 - _730;
    float _797 = _794 - _730;
    float _798 = _738 * 2.0f;
    float _799 = _740 * 2.0f;
    float _800 = _799 / _738;
    float _801 = _765 - _761;
    float _802 = _766 - _761;
    float _803 = _767 - _761;
    float _804 = _801 * 1.4426950216293335f;
    float _805 = _804 * _800;
    float _806 = _802 * 1.4426950216293335f;
    float _807 = _806 * _800;
    float _808 = _803 * 1.4426950216293335f;
    float _809 = _808 * _800;
    float _810 = exp2(_805);
    float _811 = exp2(_807);
    float _812 = exp2(_809);
    float _813 = _810 + 1.0f;
    float _814 = _811 + 1.0f;
    float _815 = _812 + 1.0f;
    float _816 = _798 / _813;
    float _817 = _798 / _814;
    float _818 = _798 / _815;
    float _819 = _736 - _816;
    float _820 = _736 - _817;
    float _821 = _736 - _818;
    bool _822 = (_765 < _756);
    bool _823 = (_766 < _756);
    bool _824 = (_767 < _756);
    float _825 = _822 ? _795 : _771;
    float _826 = _823 ? _796 : _772;
    float _827 = _824 ? _797 : _773;
    bool _828 = (_765 > _761);
    bool _829 = (_766 > _761);
    bool _830 = (_767 > _761);
    float _831 = _828 ? _819 : _771;
    float _832 = _829 ? _820 : _772;
    float _833 = _830 ? _821 : _773;
    float _834 = _761 - _756;
    float _835 = _777 / _834;
    float _836 = _778 / _834;
    float _837 = _779 / _834;
    float _838 = saturate(_835);
    float _839 = saturate(_836);
    float _840 = saturate(_837);
    bool _841 = (_761 < _756);
    float _842 = 1.0f - _838;
    float _843 = 1.0f - _839;
    float _844 = 1.0f - _840;
    float _845 = _841 ? _842 : _838;
    float _846 = _841 ? _843 : _839;
    float _847 = _841 ? _844 : _840;
    float _848 = _845 * 2.0f;
    float _849 = _846 * 2.0f;
    float _850 = _847 * 2.0f;
    float _851 = 3.0f - _848;
    float _852 = 3.0f - _849;
    float _853 = 3.0f - _850;
    float _854 = _831 - _825;
    float _855 = _832 - _826;
    float _856 = _833 - _827;
    float _857 = _845 * _845;
    float _858 = _857 * _854;
    float _859 = _858 * _851;
    float _860 = _846 * _846;
    float _861 = _860 * _855;
    float _862 = _861 * _852;
    float _863 = _847 * _847;
    float _864 = _863 * _856;
    float _865 = _864 * _853;
    float _866 = _859 + _825;
    float _867 = _862 + _826;
    float _868 = _865 + _827;
    float _869 = dot(float3(_866, _867, _868), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _870 = _866 - _869;
    float _871 = _867 - _869;
    float _872 = _868 - _869;
    float _873 = _870 * 0.9300000071525574f;
    float _874 = _871 * 0.9300000071525574f;
    float _875 = _872 * 0.9300000071525574f;
    float _876 = _873 + _869;
    float _877 = _874 + _869;
    float _878 = _875 + _869;
    float _879 = max(0.0f, _876);
    float _880 = max(0.0f, _877);
    float _881 = max(0.0f, _878);
    sdr_ap1_color = float3(_879, _880, _881);
    // end of FilmToneMap
  }

  float _882 = _RootShaderParameters_036w;
  /*   float _883 = _879 - _585;
  float _884 = _880 - _586;
  float _885 = _881 - _587; */
  float _883 = sdr_ap1_color.r - _585;
  float _884 = sdr_ap1_color.g - _586;
  float _885 = sdr_ap1_color.b - _587;
  // CustomEdit

  float _886 = _882 * _883;
  float _887 = _882 * _884;
  float _888 = _882 * _885;
  float _889 = _886 + _585;
  float _890 = _887 + _586;
  float _891 = _888 + _587;
  float _892 = _889 * 1.065374732017517f;
  float _893 = mad(1.451815478503704e-06f, _890, _892);
  float _894 = mad(-0.06537103652954102f, _891, _893);
  float _895 = _889 * -2.57161445915699e-07f;
  float _896 = mad(1.2036634683609009f, _890, _895);
  float _897 = mad(-0.20366770029067993f, _891, _896);
  float _898 = _889 * 1.862645149230957e-08f;
  float _899 = mad(2.0954757928848267e-08f, _890, _898);
  float _900 = mad(0.9999996423721313f, _891, _899);
  float _901 = _894 - _889;
  float _902 = _897 - _890;
  float _903 = _900 - _891;
  float _904 = _901 * _571;
  float _905 = _902 * _571;
  float _906 = _903 * _571;
  float _907 = _904 + _889;
  float _908 = _905 + _890;
  float _909 = _906 + _891;
  float _910 = _551 * _907;
  float _911 = mad(_552, _908, _910);
  float _912 = mad(_553, _909, _911);
  float _913 = _555 * _907;
  float _914 = mad(_556, _908, _913);
  float _915 = mad(_557, _909, _914);
  float _916 = _559 * _907;
  float _917 = mad(_560, _908, _916);
  float _918 = mad(_561, _909, _917);
  float _919 = max(0.0f, _912);
  float _920 = max(0.0f, _915);
  float _921 = max(0.0f, _918);
  float3 lut_input_color = float3(_919, _920, _921);     // CustomEdit
  float _1075;                                           // custom branch
  float _1076;                                           // custom branch
  float _1077;                                           // custom branch
  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1075 = post_lut_color.r;
    _1076 = post_lut_color.g;
    _1077 = post_lut_color.b;
  } else {

  float _922 = saturate(_919);
  float _923 = saturate(_920);
  float _924 = saturate(_921);
  bool _925 = (_922 < 0.0031306699384003878f);
  if (_925) {
    float _927 = _922 * 12.920000076293945f;
    _935 = _927;
  } else {
    float _929 = log2(_922);
    float _930 = _929 * 0.4166666567325592f;
    float _931 = exp2(_930);
    float _932 = _931 * 1.0549999475479126f;
    float _933 = _932 + -0.054999999701976776f;
    _935 = _933;
  }
  bool _936 = (_923 < 0.0031306699384003878f);
  if (_936) {
    float _938 = _923 * 12.920000076293945f;
    _946 = _938;
  } else {
    float _940 = log2(_923);
    float _941 = _940 * 0.4166666567325592f;
    float _942 = exp2(_941);
    float _943 = _942 * 1.0549999475479126f;
    float _944 = _943 + -0.054999999701976776f;
    _946 = _944;
  }
  bool _947 = (_924 < 0.0031306699384003878f);
  if (_947) {
    float _949 = _924 * 12.920000076293945f;
    _957 = _949;
  } else {
    float _951 = log2(_924);
    float _952 = _951 * 0.4166666567325592f;
    float _953 = exp2(_952);
    float _954 = _953 * 1.0549999475479126f;
    float _955 = _954 + -0.054999999701976776f;
    _957 = _955;
  }
  float _958 = _935 * 0.9375f;
  float _959 = _946 * 0.9375f;
  float _960 = _958 + 0.03125f;
  float _961 = _959 + 0.03125f;
  float _963 = _RootShaderParameters_005x;
  float _964 = _963 * _935;
  float _965 = _963 * _946;
  float _966 = _963 * _957;
  float _967 = _RootShaderParameters_005y;
  float _968 = _957 * 15.0f;
  float _969 = floor(_968);
  float _970 = _968 - _969;
  float _971 = _969 + _960;
  float _972 = _971 * 0.0625f;
  // _973 = _4;
  // _974 = _7;
  float4 _975 = Textures_1.SampleLevel(Samplers_1, float2(_972, _961), 0.0f);
  float _976 = _975.x;
  float _977 = _975.y;
  float _978 = _975.z;
  float _979 = _972 + 0.0625f;
  float4 _980 = Textures_1.SampleLevel(Samplers_1, float2(_979, _961), 0.0f);
  float _981 = _980.x;
  float _982 = _980.y;
  float _983 = _980.z;
  float _984 = _981 - _976;
  float _985 = _982 - _977;
  float _986 = _983 - _978;
  float _987 = _984 * _970;
  float _988 = _985 * _970;
  float _989 = _986 * _970;
  float _990 = _987 + _976;
  float _991 = _988 + _977;
  float _992 = _989 + _978;
  float _993 = _990 * _967;
  float _994 = _991 * _967;
  float _995 = _992 * _967;
  float _996 = _993 + _964;
  float _997 = _994 + _965;
  float _998 = _995 + _966;
  float _999 = _RootShaderParameters_005z;
  // _1000 = _3;
  // _1001 = _6;
  float4 _1002 = Textures_2.SampleLevel(Samplers_2, float2(_972, _961), 0.0f);
  float _1003 = _1002.x;
  float _1004 = _1002.y;
  float _1005 = _1002.z;
  float4 _1006 = Textures_2.SampleLevel(Samplers_2, float2(_979, _961), 0.0f);
  float _1007 = _1006.x;
  float _1008 = _1006.y;
  float _1009 = _1006.z;
  float _1010 = _1007 - _1003;
  float _1011 = _1008 - _1004;
  float _1012 = _1009 - _1005;
  float _1013 = _1010 * _970;
  float _1014 = _1011 * _970;
  float _1015 = _1012 * _970;
  float _1016 = _1013 + _1003;
  float _1017 = _1014 + _1004;
  float _1018 = _1015 + _1005;
  float _1019 = _1016 * _999;
  float _1020 = _1017 * _999;
  float _1021 = _1018 * _999;
  float _1022 = _996 + _1019;
  float _1023 = _997 + _1020;
  float _1024 = _998 + _1021;
  float _1025 = _RootShaderParameters_005w;
  // _1026 = _2;
  // _1027 = _5;
  float4 _1028 = Textures_3.SampleLevel(Samplers_3, float2(_972, _961), 0.0f);
  float _1029 = _1028.x;
  float _1030 = _1028.y;
  float _1031 = _1028.z;
  float4 _1032 = Textures_3.SampleLevel(Samplers_3, float2(_979, _961), 0.0f);
  float _1033 = _1032.x;
  float _1034 = _1032.y;
  float _1035 = _1032.z;
  float _1036 = _1033 - _1029;
  float _1037 = _1034 - _1030;
  float _1038 = _1035 - _1031;
  float _1039 = _1036 * _970;
  float _1040 = _1037 * _970;
  float _1041 = _1038 * _970;
  float _1042 = _1039 + _1029;
  float _1043 = _1040 + _1030;
  float _1044 = _1041 + _1031;
  float _1045 = _1042 * _1025;
  float _1046 = _1043 * _1025;
  float _1047 = _1044 * _1025;
  float _1048 = _1022 + _1045;
  float _1049 = _1023 + _1046;
  float _1050 = _1024 + _1047;
  float _1051 = max(6.103519990574569e-05f, _1048);
  float _1052 = max(6.103519990574569e-05f, _1049);
  float _1053 = max(6.103519990574569e-05f, _1050);
  float _1054 = _1051 * 0.07739938050508499f;
  float _1055 = _1052 * 0.07739938050508499f;
  float _1056 = _1053 * 0.07739938050508499f;
  float _1057 = _1051 * 0.9478672742843628f;
  float _1058 = _1052 * 0.9478672742843628f;
  float _1059 = _1053 * 0.9478672742843628f;
  float _1060 = _1057 + 0.05213269963860512f;
  float _1061 = _1058 + 0.05213269963860512f;
  float _1062 = _1059 + 0.05213269963860512f;
  float _1063 = log2(_1060);
  float _1064 = log2(_1061);
  float _1065 = log2(_1062);
  float _1066 = _1063 * 2.4000000953674316f;
  float _1067 = _1064 * 2.4000000953674316f;
  float _1068 = _1065 * 2.4000000953674316f;
  float _1069 = exp2(_1066);
  float _1070 = exp2(_1067);
  float _1071 = exp2(_1068);
  bool _1072 = (_1051 > 0.040449999272823334f);
  bool _1073 = (_1052 > 0.040449999272823334f);
  bool _1074 = (_1053 > 0.040449999272823334f);
  // CustomEdit
  /* float _1075 = _1072 ? _1069 : _1054;
  float _1076 = _1073 ? _1070 : _1055;
  float _1077 = _1074 ? _1071 : _1056; */
  _1075 = _1072 ? _1069 : _1054;
  _1076 = _1073 ? _1070 : _1055;
  _1077 = _1074 ? _1071 : _1056;
  }
  float _1079 = _RootShaderParameters_039x;
  float _1080 = _1079 * _1075;
  float _1081 = _1079 * _1076;
  float _1082 = _1079 * _1077;
  float _1083 = _RootShaderParameters_039y;
  float _1084 = _RootShaderParameters_039z;
  float _1085 = _1083 + _1080;
  float _1086 = _1085 * _1075;
  float _1087 = _1086 + _1084;
  float _1088 = _1083 + _1081;
  float _1089 = _1088 * _1076;
  float _1090 = _1089 + _1084;
  float _1091 = _1083 + _1082;
  float _1092 = _1091 * _1077;
  float _1093 = _1092 + _1084;
  float _1095 = _RootShaderParameters_013w;
  float _1096 = _RootShaderParameters_013x;
  float _1097 = _RootShaderParameters_013y;
  float _1098 = _RootShaderParameters_013z;
  float _1100 = _RootShaderParameters_014x;
  float _1101 = _RootShaderParameters_014y;
  float _1102 = _RootShaderParameters_014z;
  float _1103 = _1100 * _1087;
  float _1104 = _1101 * _1090;
  float _1105 = _1102 * _1093;
  float _1106 = _1096 - _1103;
  float _1107 = _1097 - _1104;
  float _1108 = _1098 - _1105;
  float _1109 = _1106 * _1095;
  float _1110 = _1107 * _1095;
  float _1111 = _1108 * _1095;
  float _1112 = _1109 + _1103;
  float _1113 = _1110 + _1104;
  float _1114 = _1111 + _1105;
  float _1115 = _1100 * _564;
  float _1116 = _1101 * _567;
  float _1117 = _1102 * _570;
  float _1118 = _1096 - _1115;
  float _1119 = _1097 - _1116;
  float _1120 = _1098 - _1117;
  float _1121 = _1118 * _1095;
  float _1122 = _1119 * _1095;
  float _1123 = _1120 * _1095;
  float _1124 = _1121 + _1115;
  float _1125 = _1122 + _1116;
  float _1126 = _1123 + _1117;
  float _1128 = _RootShaderParameters_040y;
  float _1129 = max(0.0f, _1112);
  float _1130 = max(0.0f, _1113);
  float _1131 = max(0.0f, _1114);
  float _1132 = log2(_1129);
  float _1133 = log2(_1130);
  float _1134 = log2(_1131);
  float _1135 = _1132 * _1128;
  float _1136 = _1133 * _1128;
  float _1137 = _1134 * _1128;
  float _1138 = exp2(_1135);
  float _1139 = exp2(_1136);
  float _1140 = exp2(_1137);
  // CustomEdit
  float3 film_graded_color = float3(_1138, _1139, _1140);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_12, _13, _14)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }
  
  uint _1142 = _RootShaderParameters_040w;
  bool _1143 = (_1142 == 0);
  if (_1143) {
    uint _1146 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1147 = (_1146 == 0);
    _1180 = _1138;
    _1181 = _1139;
    _1182 = _1140;
    do {
      if (_1147) {
        float _1150 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1151 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1152 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1154 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1155 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1156 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1158 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1159 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1160 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1161 = _1150 * _1138;
        float _1162 = mad(_1151, _1139, _1161);
        float _1163 = mad(_1152, _1140, _1162);
        float _1164 = _1154 * _1138;
        float _1165 = mad(_1155, _1139, _1164);
        float _1166 = mad(_1156, _1140, _1165);
        float _1167 = _1158 * _1138;
        float _1168 = mad(_1159, _1139, _1167);
        float _1169 = mad(_1160, _1140, _1168);
        float _1170 = _1163 * _53;
        float _1171 = mad(_54, _1166, _1170);
        float _1172 = mad(_55, _1169, _1171);
        float _1173 = _1163 * _56;
        float _1174 = mad(_57, _1166, _1173);
        float _1175 = mad(_58, _1169, _1174);
        float _1176 = _1163 * _59;
        float _1177 = mad(_60, _1166, _1176);
        float _1178 = mad(_61, _1169, _1177);
        _1180 = _1172;
        _1181 = _1175;
        _1182 = _1178;
      }
      bool _1183 = (_1180 < 0.0031306699384003878f);
      do {
        if (_1183) {
          float _1185 = _1180 * 12.920000076293945f;
          _1193 = _1185;
        } else {
          float _1187 = log2(_1180);
          float _1188 = _1187 * 0.4166666567325592f;
          float _1189 = exp2(_1188);
          float _1190 = _1189 * 1.0549999475479126f;
          float _1191 = _1190 + -0.054999999701976776f;
          _1193 = _1191;
        }
        bool _1194 = (_1181 < 0.0031306699384003878f);
        do {
          if (_1194) {
            float _1196 = _1181 * 12.920000076293945f;
            _1204 = _1196;
          } else {
            float _1198 = log2(_1181);
            float _1199 = _1198 * 0.4166666567325592f;
            float _1200 = exp2(_1199);
            float _1201 = _1200 * 1.0549999475479126f;
            float _1202 = _1201 + -0.054999999701976776f;
            _1204 = _1202;
          }
          bool _1205 = (_1182 < 0.0031306699384003878f);
          if (_1205) {
            float _1207 = _1182 * 12.920000076293945f;
            _2564 = _1193;
            _2565 = _1204;
            _2566 = _1207;
          } else {
            float _1209 = log2(_1182);
            float _1210 = _1209 * 0.4166666567325592f;
            float _1211 = exp2(_1210);
            float _1212 = _1211 * 1.0549999475479126f;
            float _1213 = _1212 + -0.054999999701976776f;
            _2564 = _1193;
            _2565 = _1204;
            _2566 = _1213;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1215 = (_1142 == 1);
    if (_1215) {
      float _1218 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1219 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1220 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1222 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1223 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1224 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1226 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1227 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1228 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1229 = _1218 * _1138;
      float _1230 = mad(_1219, _1139, _1229);
      float _1231 = mad(_1220, _1140, _1230);
      float _1232 = _1222 * _1138;
      float _1233 = mad(_1223, _1139, _1232);
      float _1234 = mad(_1224, _1140, _1233);
      float _1235 = _1226 * _1138;
      float _1236 = mad(_1227, _1139, _1235);
      float _1237 = mad(_1228, _1140, _1236);
      float _1238 = _1231 * _53;
      float _1239 = mad(_54, _1234, _1238);
      float _1240 = mad(_55, _1237, _1239);
      float _1241 = _1231 * _56;
      float _1242 = mad(_57, _1234, _1241);
      float _1243 = mad(_58, _1237, _1242);
      float _1244 = _1231 * _59;
      float _1245 = mad(_60, _1234, _1244);
      float _1246 = mad(_61, _1237, _1245);
      float _1247 = max(6.103519990574569e-05f, _1240);
      float _1248 = max(6.103519990574569e-05f, _1243);
      float _1249 = max(6.103519990574569e-05f, _1246);
      float _1250 = max(_1247, 0.017999999225139618f);
      float _1251 = max(_1248, 0.017999999225139618f);
      float _1252 = max(_1249, 0.017999999225139618f);
      float _1253 = log2(_1250);
      float _1254 = log2(_1251);
      float _1255 = log2(_1252);
      float _1256 = _1253 * 0.44999998807907104f;
      float _1257 = _1254 * 0.44999998807907104f;
      float _1258 = _1255 * 0.44999998807907104f;
      float _1259 = exp2(_1256);
      float _1260 = exp2(_1257);
      float _1261 = exp2(_1258);
      float _1262 = _1259 * 1.0989999771118164f;
      float _1263 = _1260 * 1.0989999771118164f;
      float _1264 = _1261 * 1.0989999771118164f;
      float _1265 = _1262 + -0.0989999994635582f;
      float _1266 = _1263 + -0.0989999994635582f;
      float _1267 = _1264 + -0.0989999994635582f;
      float _1268 = _1247 * 4.5f;
      float _1269 = _1248 * 4.5f;
      float _1270 = _1249 * 4.5f;
      float _1271 = min(_1268, _1265);
      float _1272 = min(_1269, _1266);
      float _1273 = min(_1270, _1267);
      _2564 = _1271;
      _2565 = _1272;
      _2566 = _1273;
    } else {
      bool _1275 = (_1142 == 3);
      bool _1276 = (_1142 == 5);
      bool _1277 = _1275 || _1276;
      if (_1277) {
        //   %1279 = bitcast [6 x float]* %17 to i8*
        //   %1280 = bitcast [6 x float]* %18 to i8*
        float _1282 = _RootShaderParameters_012z;
        float _1283 = _RootShaderParameters_012y;
        float _1284 = _RootShaderParameters_012x;
        float _1286 = _RootShaderParameters_011x;
        float _1287 = _RootShaderParameters_011y;
        float _1288 = _RootShaderParameters_011z;
        float _1289 = _RootShaderParameters_011w;
        float _1291 = _RootShaderParameters_010x;
        float _1292 = _RootShaderParameters_010y;
        float _1293 = _RootShaderParameters_010z;
        float _1294 = _RootShaderParameters_010w;
        float _1296 = _RootShaderParameters_009x;
        float _1298 = _RootShaderParameters_008x;
        float _1299 = _RootShaderParameters_008y;
        float _1300 = _RootShaderParameters_008z;
        float _1301 = _RootShaderParameters_008w;
        _17[0] = _1291;
        _17[1] = _1292;
        _17[2] = _1293;
        _17[3] = _1294;
        _17[4] = _1284;
        _17[5] = _1284;
        _18[0] = _1286;
        _18[1] = _1287;
        _18[2] = _1288;
        _18[3] = _1289;
        _18[4] = _1283;
        _18[5] = _1283;
        float _1315 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1316 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1317 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1319 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1320 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1321 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1323 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1324 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1325 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1326 = _1282 * _1124;
        float _1327 = _1282 * _1125;
        float _1328 = _1282 * _1126;
        float _1329 = _1315 * _1326;
        float _1330 = mad(_1316, _1327, _1329);
        float _1331 = mad(_1317, _1328, _1330);
        float _1332 = _1319 * _1326;
        float _1333 = mad(_1320, _1327, _1332);
        float _1334 = mad(_1321, _1328, _1333);
        float _1335 = _1323 * _1326;
        float _1336 = mad(_1324, _1327, _1335);
        float _1337 = mad(_1325, _1328, _1336);
        float _1338 = min(_1331, _1334);
        float _1339 = min(_1338, _1337);
        float _1340 = max(_1331, _1334);
        float _1341 = max(_1340, _1337);
        float _1342 = max(_1341, 1.000000013351432e-10f);
        float _1343 = max(_1339, 1.000000013351432e-10f);
        float _1344 = _1342 - _1343;
        float _1345 = max(_1341, 0.009999999776482582f);
        float _1346 = _1344 / _1345;
        float _1347 = _1337 - _1334;
        float _1348 = _1347 * _1337;
        float _1349 = _1334 - _1331;
        float _1350 = _1349 * _1334;
        float _1351 = _1348 + _1350;
        float _1352 = _1331 - _1337;
        float _1353 = _1352 * _1331;
        float _1354 = _1351 + _1353;
        float _1355 = sqrt(_1354);
        float _1356 = _1355 * 1.75f;
        float _1357 = _1334 + _1331;
        float _1358 = _1357 + _1337;
        float _1359 = _1358 + _1356;
        float _1360 = _1359 * 0.3333333432674408f;
        float _1361 = _1346 + -0.4000000059604645f;
        float _1362 = _1361 * 5.0f;
        float _1363 = _1361 * 2.5f;
        float _1364 = abs(_1363);
        float _1365 = 1.0f - _1364;
        float _1366 = max(_1365, 0.0f);
        bool _1367 = (_1362 > 0.0f);
        bool _1368 = (_1362 < 0.0f);
        int _1369 = int(_1367);
        int _1370 = int(_1368);
        int _1371 = _1369 - _1370;
        float _1372 = float(_1371);
        float _1373 = _1366 * _1366;
        float _1374 = 1.0f - _1373;
        float _1375 = _1372 * _1374;
        float _1376 = _1375 + 1.0f;
        float _1377 = _1376 * 0.02500000037252903f;
        bool _1378 = !(_1360 <= 0.0533333346247673f);
        _1386 = _1377;
        do {
          if (_1378) {
            bool _1380 = !(_1360 >= 0.1599999964237213f);
            _1386 = 0.0f;
            if (_1380) {
              float _1382 = 0.23999999463558197f / _1359;
              float _1383 = _1382 + -0.5f;
              float _1384 = _1383 * _1377;
              _1386 = _1384;
            }
          }
          float _1387 = _1386 + 1.0f;
          float _1388 = _1387 * _1331;
          float _1389 = _1387 * _1334;
          float _1390 = _1387 * _1337;
          bool _1391 = (_1388 == _1389);
          bool _1392 = (_1389 == _1390);
          bool _1393 = _1391 && _1392;
          _1422 = 0.0f;
          do {
            if (!_1393) {
              float _1395 = _1388 * 2.0f;
              float _1396 = _1395 - _1389;
              float _1397 = _1396 - _1390;
              float _1398 = _1334 - _1337;
              float _1399 = _1398 * 1.7320507764816284f;
              float _1400 = _1399 * _1387;
              float _1401 = _1400 / _1397;
              float _1402 = atan(_1401);
              float _1403 = _1402 + 3.1415927410125732f;
              float _1404 = _1402 + -3.1415927410125732f;
              bool _1405 = (_1397 < 0.0f);
              bool _1406 = (_1397 == 0.0f);
              bool _1407 = (_1400 >= 0.0f);
              bool _1408 = (_1400 < 0.0f);
              bool _1409 = _1407 && _1405;
              float _1410 = _1409 ? _1403 : _1402;
              bool _1411 = _1408 && _1405;
              float _1412 = _1411 ? _1404 : _1410;
              bool _1413 = _1408 && _1406;
              bool _1414 = _1407 && _1406;
              float _1415 = _1412 * 57.2957763671875f;
              float _1416 = _1413 ? -90.0f : _1415;
              float _1417 = _1414 ? 90.0f : _1416;
              bool _1418 = (_1417 < 0.0f);
              _1422 = _1417;
              if (_1418) {
                float _1420 = _1417 + 360.0f;
                _1422 = _1420;
              }
            }
            float _1423 = max(_1422, 0.0f);
            float _1424 = min(_1423, 360.0f);
            bool _1425 = (_1424 < -180.0f);
            do {
              if (_1425) {
                float _1427 = _1424 + 360.0f;
                _1433 = _1427;
              } else {
                bool _1429 = (_1424 > 180.0f);
                _1433 = _1424;
                if (_1429) {
                  float _1431 = _1424 + -360.0f;
                  _1433 = _1431;
                }
              }
              bool _1434 = (_1433 > -67.5f);
              bool _1435 = (_1433 < 67.5f);
              bool _1436 = _1434 && _1435;
              _1472 = 0.0f;
              do {
                if (_1436) {
                  float _1438 = _1433 + 67.5f;
                  float _1439 = _1438 * 0.029629629105329514f;
                  int _1440 = int(_1439);
                  float _1441 = float(_1440);
                  float _1442 = _1439 - _1441;
                  float _1443 = _1442 * _1442;
                  float _1444 = _1443 * _1442;
                  bool _1445 = (_1440 == 3);
                  if (_1445) {
                    float _1447 = _1444 * 0.1666666716337204f;
                    float _1448 = _1443 * 0.5f;
                    float _1449 = _1442 * 0.5f;
                    float _1450 = 0.1666666716337204f - _1449;
                    float _1451 = _1450 + _1448;
                    float _1452 = _1451 - _1447;
                    _1472 = _1452;
                  } else {
                    bool _1454 = (_1440 == 2);
                    if (_1454) {
                      float _1456 = _1444 * 0.5f;
                      float _1457 = 0.6666666865348816f - _1443;
                      float _1458 = _1457 + _1456;
                      _1472 = _1458;
                    } else {
                      bool _1460 = (_1440 == 1);
                      if (_1460) {
                        float _1462 = _1444 * -0.5f;
                        float _1463 = _1443 + _1442;
                        float _1464 = _1463 * 0.5f;
                        float _1465 = _1462 + 0.1666666716337204f;
                        float _1466 = _1465 + _1464;
                        _1472 = _1466;
                      } else {
                        bool _1468 = (_1440 == 0);
                        float _1469 = _1444 * 0.1666666716337204f;
                        float _1470 = _1468 ? _1469 : 0.0f;
                        _1472 = _1470;
                      }
                    }
                  }
                }
                float _1473 = 0.029999999329447746f - _1388;
                float _1474 = _1346 * 0.27000001072883606f;
                float _1475 = _1474 * _1473;
                float _1476 = _1475 * _1472;
                float _1477 = _1476 + _1388;
                float _1478 = max(_1477, 0.0f);
                float _1479 = max(_1389, 0.0f);
                float _1480 = max(_1390, 0.0f);
                float _1481 = min(_1478, 65535.0f);
                float _1482 = min(_1479, 65535.0f);
                float _1483 = min(_1480, 65535.0f);
                float _1484 = _1481 * 1.4514392614364624f;
                float _1485 = mad(-0.2365107536315918f, _1482, _1484);
                float _1486 = mad(-0.21492856740951538f, _1483, _1485);
                float _1487 = _1481 * -0.07655377686023712f;
                float _1488 = mad(1.17622971534729f, _1482, _1487);
                float _1489 = mad(-0.09967592358589172f, _1483, _1488);
                float _1490 = _1481 * 0.008316148072481155f;
                float _1491 = mad(-0.006032449658960104f, _1482, _1490);
                float _1492 = mad(0.9977163076400757f, _1483, _1491);
                float _1493 = max(_1486, 0.0f);
                float _1494 = max(_1489, 0.0f);
                float _1495 = max(_1492, 0.0f);
                float _1496 = min(_1493, 65504.0f);
                float _1497 = min(_1494, 65504.0f);
                float _1498 = min(_1495, 65504.0f);
                float _1499 = dot(float3(_1496, _1497, _1498), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1500 = _1496 - _1499;
                float _1501 = _1497 - _1499;
                float _1502 = _1498 - _1499;
                float _1503 = _1500 * 0.9599999785423279f;
                float _1504 = _1501 * 0.9599999785423279f;
                float _1505 = _1502 * 0.9599999785423279f;
                float _1506 = _1503 + _1499;
                float _1507 = _1504 + _1499;
                float _1508 = _1505 + _1499;
                float _1509 = max(_1506, 1.000000013351432e-10f);
                float _1510 = log2(_1509);
                float _1511 = _1510 * 0.3010300099849701f;
                float _1512 = log2(_1298);
                float _1513 = _1512 * 0.3010300099849701f;
                bool _1514 = !(_1511 <= _1513);
                do {
                  if (!_1514) {
                    float _1516 = log2(_1299);
                    float _1517 = _1516 * 0.3010300099849701f;
                    _1582 = _1517;
                  } else {
                    bool _1519 = (_1511 > _1513);
                    float _1520 = log2(_1296);
                    float _1521 = _1520 * 0.3010300099849701f;
                    bool _1522 = (_1511 < _1521);
                    bool _1523 = _1519 && _1522;
                    if (_1523) {
                      float _1525 = _1510 - _1512;
                      float _1526 = _1525 * 0.9030900001525879f;
                      float _1527 = _1520 - _1512;
                      float _1528 = _1527 * 0.3010300099849701f;
                      float _1529 = _1526 / _1528;
                      int _1530 = int(_1529);
                      float _1531 = float(_1530);
                      float _1532 = _1529 - _1531;
                      float _1534 = _17[_1530];
                      int _1535 = _1530 + 1;
                      float _1537 = _17[_1535];
                      int _1538 = _1530 + 2;
                      float _1540 = _17[_1538];
                      float _1541 = _1532 * _1532;
                      float _1542 = _1534 * 0.5f;
                      float _1543 = mad(_1537, -1.0f, _1542);
                      float _1544 = mad(_1540, 0.5f, _1543);
                      float _1545 = _1537 - _1534;
                      float _1546 = mad(_1537, 0.5f, _1542);
                      float _1547 = dot(float3(_1541, _1532, 1.0f), float3(_1544, _1545, _1546));
                      _1582 = _1547;
                    } else {
                      bool _1549 = !(_1511 >= _1521);
                      do {
                        if (!_1549) {
                          float _1551 = log2(_1300);
                          float _1552 = _1551 * 0.3010300099849701f;
                          bool _1553 = (_1511 < _1552);
                          if (_1553) {
                            float _1555 = _1510 - _1520;
                            float _1556 = _1555 * 0.9030900001525879f;
                            float _1557 = _1551 - _1520;
                            float _1558 = _1557 * 0.3010300099849701f;
                            float _1559 = _1556 / _1558;
                            int _1560 = int(_1559);
                            float _1561 = float(_1560);
                            float _1562 = _1559 - _1561;
                            float _1564 = _18[_1560];
                            int _1565 = _1560 + 1;
                            float _1567 = _18[_1565];
                            int _1568 = _1560 + 2;
                            float _1570 = _18[_1568];
                            float _1571 = _1562 * _1562;
                            float _1572 = _1564 * 0.5f;
                            float _1573 = mad(_1567, -1.0f, _1572);
                            float _1574 = mad(_1570, 0.5f, _1573);
                            float _1575 = _1567 - _1564;
                            float _1576 = mad(_1567, 0.5f, _1572);
                            float _1577 = dot(float3(_1571, _1562, 1.0f), float3(_1574, _1575, _1576));
                            _1582 = _1577;
                            break;
                          }
                        }
                        float _1579 = log2(_1301);
                        float _1580 = _1579 * 0.3010300099849701f;
                        _1582 = _1580;
                      } while (false);
                    }
                  }
                  float _1583 = _1582 * 3.321928024291992f;
                  float _1584 = exp2(_1583);
                  float _1585 = max(_1507, 1.000000013351432e-10f);
                  float _1586 = log2(_1585);
                  float _1587 = _1586 * 0.3010300099849701f;
                  bool _1588 = !(_1587 <= _1513);
                  do {
                    if (!_1588) {
                      float _1590 = log2(_1299);
                      float _1591 = _1590 * 0.3010300099849701f;
                      _1656 = _1591;
                    } else {
                      bool _1593 = (_1587 > _1513);
                      float _1594 = log2(_1296);
                      float _1595 = _1594 * 0.3010300099849701f;
                      bool _1596 = (_1587 < _1595);
                      bool _1597 = _1593 && _1596;
                      if (_1597) {
                        float _1599 = _1586 - _1512;
                        float _1600 = _1599 * 0.9030900001525879f;
                        float _1601 = _1594 - _1512;
                        float _1602 = _1601 * 0.3010300099849701f;
                        float _1603 = _1600 / _1602;
                        int _1604 = int(_1603);
                        float _1605 = float(_1604);
                        float _1606 = _1603 - _1605;
                        float _1608 = _17[_1604];
                        int _1609 = _1604 + 1;
                        float _1611 = _17[_1609];
                        int _1612 = _1604 + 2;
                        float _1614 = _17[_1612];
                        float _1615 = _1606 * _1606;
                        float _1616 = _1608 * 0.5f;
                        float _1617 = mad(_1611, -1.0f, _1616);
                        float _1618 = mad(_1614, 0.5f, _1617);
                        float _1619 = _1611 - _1608;
                        float _1620 = mad(_1611, 0.5f, _1616);
                        float _1621 = dot(float3(_1615, _1606, 1.0f), float3(_1618, _1619, _1620));
                        _1656 = _1621;
                      } else {
                        bool _1623 = !(_1587 >= _1595);
                        do {
                          if (!_1623) {
                            float _1625 = log2(_1300);
                            float _1626 = _1625 * 0.3010300099849701f;
                            bool _1627 = (_1587 < _1626);
                            if (_1627) {
                              float _1629 = _1586 - _1594;
                              float _1630 = _1629 * 0.9030900001525879f;
                              float _1631 = _1625 - _1594;
                              float _1632 = _1631 * 0.3010300099849701f;
                              float _1633 = _1630 / _1632;
                              int _1634 = int(_1633);
                              float _1635 = float(_1634);
                              float _1636 = _1633 - _1635;
                              float _1638 = _18[_1634];
                              int _1639 = _1634 + 1;
                              float _1641 = _18[_1639];
                              int _1642 = _1634 + 2;
                              float _1644 = _18[_1642];
                              float _1645 = _1636 * _1636;
                              float _1646 = _1638 * 0.5f;
                              float _1647 = mad(_1641, -1.0f, _1646);
                              float _1648 = mad(_1644, 0.5f, _1647);
                              float _1649 = _1641 - _1638;
                              float _1650 = mad(_1641, 0.5f, _1646);
                              float _1651 = dot(float3(_1645, _1636, 1.0f), float3(_1648, _1649, _1650));
                              _1656 = _1651;
                              break;
                            }
                          }
                          float _1653 = log2(_1301);
                          float _1654 = _1653 * 0.3010300099849701f;
                          _1656 = _1654;
                        } while (false);
                      }
                    }
                    float _1657 = _1656 * 3.321928024291992f;
                    float _1658 = exp2(_1657);
                    float _1659 = max(_1508, 1.000000013351432e-10f);
                    float _1660 = log2(_1659);
                    float _1661 = _1660 * 0.3010300099849701f;
                    bool _1662 = !(_1661 <= _1513);
                    do {
                      if (!_1662) {
                        float _1664 = log2(_1299);
                        float _1665 = _1664 * 0.3010300099849701f;
                        _1730 = _1665;
                      } else {
                        bool _1667 = (_1661 > _1513);
                        float _1668 = log2(_1296);
                        float _1669 = _1668 * 0.3010300099849701f;
                        bool _1670 = (_1661 < _1669);
                        bool _1671 = _1667 && _1670;
                        if (_1671) {
                          float _1673 = _1660 - _1512;
                          float _1674 = _1673 * 0.9030900001525879f;
                          float _1675 = _1668 - _1512;
                          float _1676 = _1675 * 0.3010300099849701f;
                          float _1677 = _1674 / _1676;
                          int _1678 = int(_1677);
                          float _1679 = float(_1678);
                          float _1680 = _1677 - _1679;
                          float _1682 = _17[_1678];
                          int _1683 = _1678 + 1;
                          float _1685 = _17[_1683];
                          int _1686 = _1678 + 2;
                          float _1688 = _17[_1686];
                          float _1689 = _1680 * _1680;
                          float _1690 = _1682 * 0.5f;
                          float _1691 = mad(_1685, -1.0f, _1690);
                          float _1692 = mad(_1688, 0.5f, _1691);
                          float _1693 = _1685 - _1682;
                          float _1694 = mad(_1685, 0.5f, _1690);
                          float _1695 = dot(float3(_1689, _1680, 1.0f), float3(_1692, _1693, _1694));
                          _1730 = _1695;
                        } else {
                          bool _1697 = !(_1661 >= _1669);
                          do {
                            if (!_1697) {
                              float _1699 = log2(_1300);
                              float _1700 = _1699 * 0.3010300099849701f;
                              bool _1701 = (_1661 < _1700);
                              if (_1701) {
                                float _1703 = _1660 - _1668;
                                float _1704 = _1703 * 0.9030900001525879f;
                                float _1705 = _1699 - _1668;
                                float _1706 = _1705 * 0.3010300099849701f;
                                float _1707 = _1704 / _1706;
                                int _1708 = int(_1707);
                                float _1709 = float(_1708);
                                float _1710 = _1707 - _1709;
                                float _1712 = _18[_1708];
                                int _1713 = _1708 + 1;
                                float _1715 = _18[_1713];
                                int _1716 = _1708 + 2;
                                float _1718 = _18[_1716];
                                float _1719 = _1710 * _1710;
                                float _1720 = _1712 * 0.5f;
                                float _1721 = mad(_1715, -1.0f, _1720);
                                float _1722 = mad(_1718, 0.5f, _1721);
                                float _1723 = _1715 - _1712;
                                float _1724 = mad(_1715, 0.5f, _1720);
                                float _1725 = dot(float3(_1719, _1710, 1.0f), float3(_1722, _1723, _1724));
                                _1730 = _1725;
                                break;
                              }
                            }
                            float _1727 = log2(_1301);
                            float _1728 = _1727 * 0.3010300099849701f;
                            _1730 = _1728;
                          } while (false);
                        }
                      }
                      float _1731 = _1730 * 3.321928024291992f;
                      float _1732 = exp2(_1731);
                      float _1733 = _1584 - _1299;
                      float _1734 = _1301 - _1299;
                      float _1735 = _1733 / _1734;
                      float _1736 = _1658 - _1299;
                      float _1737 = _1736 / _1734;
                      float _1738 = _1732 - _1299;
                      float _1739 = _1738 / _1734;
                      float _1740 = _1735 * 0.6624541878700256f;
                      float _1741 = mad(0.13400420546531677f, _1737, _1740);
                      float _1742 = mad(0.15618768334388733f, _1739, _1741);
                      float _1743 = _1735 * 0.2722287178039551f;
                      float _1744 = mad(0.6740817427635193f, _1737, _1743);
                      float _1745 = mad(0.053689517080783844f, _1739, _1744);
                      float _1746 = _1735 * -0.005574649665504694f;
                      float _1747 = mad(0.00406073359772563f, _1737, _1746);
                      float _1748 = mad(1.0103391408920288f, _1739, _1747);
                      float _1749 = _1742 * 1.6410233974456787f;
                      float _1750 = mad(-0.32480329275131226f, _1745, _1749);
                      float _1751 = mad(-0.23642469942569733f, _1748, _1750);
                      float _1752 = _1742 * -0.663662850856781f;
                      float _1753 = mad(1.6153316497802734f, _1745, _1752);
                      float _1754 = mad(0.016756348311901093f, _1748, _1753);
                      float _1755 = _1742 * 0.011721894145011902f;
                      float _1756 = mad(-0.008284442126750946f, _1745, _1755);
                      float _1757 = mad(0.9883948564529419f, _1748, _1756);
                      float _1758 = max(_1751, 0.0f);
                      float _1759 = max(_1754, 0.0f);
                      float _1760 = max(_1757, 0.0f);
                      float _1761 = min(_1758, 1.0f);
                      float _1762 = min(_1759, 1.0f);
                      float _1763 = min(_1760, 1.0f);
                      float _1764 = _1761 * 0.6624541878700256f;
                      float _1765 = mad(0.13400420546531677f, _1762, _1764);
                      float _1766 = mad(0.15618768334388733f, _1763, _1765);
                      float _1767 = _1761 * 0.2722287178039551f;
                      float _1768 = mad(0.6740817427635193f, _1762, _1767);
                      float _1769 = mad(0.053689517080783844f, _1763, _1768);
                      float _1770 = _1761 * -0.005574649665504694f;
                      float _1771 = mad(0.00406073359772563f, _1762, _1770);
                      float _1772 = mad(1.0103391408920288f, _1763, _1771);
                      float _1773 = _1766 * 1.6410233974456787f;
                      float _1774 = mad(-0.32480329275131226f, _1769, _1773);
                      float _1775 = mad(-0.23642469942569733f, _1772, _1774);
                      float _1776 = _1766 * -0.663662850856781f;
                      float _1777 = mad(1.6153316497802734f, _1769, _1776);
                      float _1778 = mad(0.016756348311901093f, _1772, _1777);
                      float _1779 = _1766 * 0.011721894145011902f;
                      float _1780 = mad(-0.008284442126750946f, _1769, _1779);
                      float _1781 = mad(0.9883948564529419f, _1772, _1780);
                      float _1782 = max(_1775, 0.0f);
                      float _1783 = max(_1778, 0.0f);
                      float _1784 = max(_1781, 0.0f);
                      float _1785 = min(_1782, 65535.0f);
                      float _1786 = min(_1783, 65535.0f);
                      float _1787 = min(_1784, 65535.0f);
                      float _1788 = _1785 * _1301;
                      float _1789 = _1786 * _1301;
                      float _1790 = _1787 * _1301;
                      float _1791 = max(_1788, 0.0f);
                      float _1792 = max(_1789, 0.0f);
                      float _1793 = max(_1790, 0.0f);
                      float _1794 = min(_1791, 65535.0f);
                      float _1795 = min(_1792, 65535.0f);
                      float _1796 = min(_1793, 65535.0f);
                      bool _1797 = (_1142 == 5);
                      _1809 = _1794;
                      _1810 = _1795;
                      _1811 = _1796;
                      do {
                        if (!_1797) {
                          float _1799 = _1794 * _53;
                          float _1800 = mad(_54, _1795, _1799);
                          float _1801 = mad(_55, _1796, _1800);
                          float _1802 = _1794 * _56;
                          float _1803 = mad(_57, _1795, _1802);
                          float _1804 = mad(_58, _1796, _1803);
                          float _1805 = _1794 * _59;
                          float _1806 = mad(_60, _1795, _1805);
                          float _1807 = mad(_61, _1796, _1806);
                          _1809 = _1801;
                          _1810 = _1804;
                          _1811 = _1807;
                        }
                        float _1812 = _1809 * 9.999999747378752e-05f;
                        float _1813 = _1810 * 9.999999747378752e-05f;
                        float _1814 = _1811 * 9.999999747378752e-05f;
                        float _1815 = log2(_1812);
                        float _1816 = log2(_1813);
                        float _1817 = log2(_1814);
                        float _1818 = _1815 * 0.1593017578125f;
                        float _1819 = _1816 * 0.1593017578125f;
                        float _1820 = _1817 * 0.1593017578125f;
                        float _1821 = exp2(_1818);
                        float _1822 = exp2(_1819);
                        float _1823 = exp2(_1820);
                        float _1824 = _1821 * 18.8515625f;
                        float _1825 = _1822 * 18.8515625f;
                        float _1826 = _1823 * 18.8515625f;
                        float _1827 = _1824 + 0.8359375f;
                        float _1828 = _1825 + 0.8359375f;
                        float _1829 = _1826 + 0.8359375f;
                        float _1830 = _1821 * 18.6875f;
                        float _1831 = _1822 * 18.6875f;
                        float _1832 = _1823 * 18.6875f;
                        float _1833 = _1830 + 1.0f;
                        float _1834 = _1831 + 1.0f;
                        float _1835 = _1832 + 1.0f;
                        float _1836 = 1.0f / _1833;
                        float _1837 = 1.0f / _1834;
                        float _1838 = 1.0f / _1835;
                        float _1839 = _1836 * _1827;
                        float _1840 = _1837 * _1828;
                        float _1841 = _1838 * _1829;
                        float _1842 = log2(_1839);
                        float _1843 = log2(_1840);
                        float _1844 = log2(_1841);
                        float _1845 = _1842 * 78.84375f;
                        float _1846 = _1843 * 78.84375f;
                        float _1847 = _1844 * 78.84375f;
                        float _1848 = exp2(_1845);
                        float _1849 = exp2(_1846);
                        float _1850 = exp2(_1847);
                        _2564 = _1848;
                        _2565 = _1849;
                        _2566 = _1850;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _1852 = _1142 & -3;
        bool _1853 = (_1852 == 4);
        if (_1853) {
          //   %1855 = bitcast [6 x float]* %15 to i8*
          //   %1856 = bitcast [6 x float]* %16 to i8*
          float _1858 = _RootShaderParameters_012z;
          float _1859 = _RootShaderParameters_012y;
          float _1860 = _RootShaderParameters_012x;
          float _1862 = _RootShaderParameters_011x;
          float _1863 = _RootShaderParameters_011y;
          float _1864 = _RootShaderParameters_011z;
          float _1865 = _RootShaderParameters_011w;
          float _1867 = _RootShaderParameters_010x;
          float _1868 = _RootShaderParameters_010y;
          float _1869 = _RootShaderParameters_010z;
          float _1870 = _RootShaderParameters_010w;
          float _1872 = _RootShaderParameters_009x;
          float _1874 = _RootShaderParameters_008x;
          float _1875 = _RootShaderParameters_008y;
          float _1876 = _RootShaderParameters_008z;
          float _1877 = _RootShaderParameters_008w;
          _15[0] = _1867;
          _15[1] = _1868;
          _15[2] = _1869;
          _15[3] = _1870;
          _15[4] = _1860;
          _15[5] = _1860;
          _16[0] = _1862;
          _16[1] = _1863;
          _16[2] = _1864;
          _16[3] = _1865;
          _16[4] = _1859;
          _16[5] = _1859;
          float _1891 = UniformBufferConstants_WorkingColorSpace_016x;
          float _1892 = UniformBufferConstants_WorkingColorSpace_016y;
          float _1893 = UniformBufferConstants_WorkingColorSpace_016z;
          float _1895 = UniformBufferConstants_WorkingColorSpace_017x;
          float _1896 = UniformBufferConstants_WorkingColorSpace_017y;
          float _1897 = UniformBufferConstants_WorkingColorSpace_017z;
          float _1899 = UniformBufferConstants_WorkingColorSpace_018x;
          float _1900 = UniformBufferConstants_WorkingColorSpace_018y;
          float _1901 = UniformBufferConstants_WorkingColorSpace_018z;
          float _1902 = _1858 * _1124;
          float _1903 = _1858 * _1125;
          float _1904 = _1858 * _1126;
          float _1905 = _1891 * _1902;
          float _1906 = mad(_1892, _1903, _1905);
          float _1907 = mad(_1893, _1904, _1906);
          float _1908 = _1895 * _1902;
          float _1909 = mad(_1896, _1903, _1908);
          float _1910 = mad(_1897, _1904, _1909);
          float _1911 = _1899 * _1902;
          float _1912 = mad(_1900, _1903, _1911);
          float _1913 = mad(_1901, _1904, _1912);
          float _1914 = min(_1907, _1910);
          float _1915 = min(_1914, _1913);
          float _1916 = max(_1907, _1910);
          float _1917 = max(_1916, _1913);
          float _1918 = max(_1917, 1.000000013351432e-10f);
          float _1919 = max(_1915, 1.000000013351432e-10f);
          float _1920 = _1918 - _1919;
          float _1921 = max(_1917, 0.009999999776482582f);
          float _1922 = _1920 / _1921;
          float _1923 = _1913 - _1910;
          float _1924 = _1923 * _1913;
          float _1925 = _1910 - _1907;
          float _1926 = _1925 * _1910;
          float _1927 = _1924 + _1926;
          float _1928 = _1907 - _1913;
          float _1929 = _1928 * _1907;
          float _1930 = _1927 + _1929;
          float _1931 = sqrt(_1930);
          float _1932 = _1931 * 1.75f;
          float _1933 = _1910 + _1907;
          float _1934 = _1933 + _1913;
          float _1935 = _1934 + _1932;
          float _1936 = _1935 * 0.3333333432674408f;
          float _1937 = _1922 + -0.4000000059604645f;
          float _1938 = _1937 * 5.0f;
          float _1939 = _1937 * 2.5f;
          float _1940 = abs(_1939);
          float _1941 = 1.0f - _1940;
          float _1942 = max(_1941, 0.0f);
          bool _1943 = (_1938 > 0.0f);
          bool _1944 = (_1938 < 0.0f);
          int _1945 = int(_1943);
          int _1946 = int(_1944);
          int _1947 = _1945 - _1946;
          float _1948 = float(_1947);
          float _1949 = _1942 * _1942;
          float _1950 = 1.0f - _1949;
          float _1951 = _1948 * _1950;
          float _1952 = _1951 + 1.0f;
          float _1953 = _1952 * 0.02500000037252903f;
          bool _1954 = !(_1936 <= 0.0533333346247673f);
          _1962 = _1953;
          do {
            if (_1954) {
              bool _1956 = !(_1936 >= 0.1599999964237213f);
              _1962 = 0.0f;
              if (_1956) {
                float _1958 = 0.23999999463558197f / _1935;
                float _1959 = _1958 + -0.5f;
                float _1960 = _1959 * _1953;
                _1962 = _1960;
              }
            }
            float _1963 = _1962 + 1.0f;
            float _1964 = _1963 * _1907;
            float _1965 = _1963 * _1910;
            float _1966 = _1963 * _1913;
            bool _1967 = (_1964 == _1965);
            bool _1968 = (_1965 == _1966);
            bool _1969 = _1967 && _1968;
            _1998 = 0.0f;
            do {
              if (!_1969) {
                float _1971 = _1964 * 2.0f;
                float _1972 = _1971 - _1965;
                float _1973 = _1972 - _1966;
                float _1974 = _1910 - _1913;
                float _1975 = _1974 * 1.7320507764816284f;
                float _1976 = _1975 * _1963;
                float _1977 = _1976 / _1973;
                float _1978 = atan(_1977);
                float _1979 = _1978 + 3.1415927410125732f;
                float _1980 = _1978 + -3.1415927410125732f;
                bool _1981 = (_1973 < 0.0f);
                bool _1982 = (_1973 == 0.0f);
                bool _1983 = (_1976 >= 0.0f);
                bool _1984 = (_1976 < 0.0f);
                bool _1985 = _1983 && _1981;
                float _1986 = _1985 ? _1979 : _1978;
                bool _1987 = _1984 && _1981;
                float _1988 = _1987 ? _1980 : _1986;
                bool _1989 = _1984 && _1982;
                bool _1990 = _1983 && _1982;
                float _1991 = _1988 * 57.2957763671875f;
                float _1992 = _1989 ? -90.0f : _1991;
                float _1993 = _1990 ? 90.0f : _1992;
                bool _1994 = (_1993 < 0.0f);
                _1998 = _1993;
                if (_1994) {
                  float _1996 = _1993 + 360.0f;
                  _1998 = _1996;
                }
              }
              float _1999 = max(_1998, 0.0f);
              float _2000 = min(_1999, 360.0f);
              bool _2001 = (_2000 < -180.0f);
              do {
                if (_2001) {
                  float _2003 = _2000 + 360.0f;
                  _2009 = _2003;
                } else {
                  bool _2005 = (_2000 > 180.0f);
                  _2009 = _2000;
                  if (_2005) {
                    float _2007 = _2000 + -360.0f;
                    _2009 = _2007;
                  }
                }
                bool _2010 = (_2009 > -67.5f);
                bool _2011 = (_2009 < 67.5f);
                bool _2012 = _2010 && _2011;
                _2048 = 0.0f;
                do {
                  if (_2012) {
                    float _2014 = _2009 + 67.5f;
                    float _2015 = _2014 * 0.029629629105329514f;
                    int _2016 = int(_2015);
                    float _2017 = float(_2016);
                    float _2018 = _2015 - _2017;
                    float _2019 = _2018 * _2018;
                    float _2020 = _2019 * _2018;
                    bool _2021 = (_2016 == 3);
                    if (_2021) {
                      float _2023 = _2020 * 0.1666666716337204f;
                      float _2024 = _2019 * 0.5f;
                      float _2025 = _2018 * 0.5f;
                      float _2026 = 0.1666666716337204f - _2025;
                      float _2027 = _2026 + _2024;
                      float _2028 = _2027 - _2023;
                      _2048 = _2028;
                    } else {
                      bool _2030 = (_2016 == 2);
                      if (_2030) {
                        float _2032 = _2020 * 0.5f;
                        float _2033 = 0.6666666865348816f - _2019;
                        float _2034 = _2033 + _2032;
                        _2048 = _2034;
                      } else {
                        bool _2036 = (_2016 == 1);
                        if (_2036) {
                          float _2038 = _2020 * -0.5f;
                          float _2039 = _2019 + _2018;
                          float _2040 = _2039 * 0.5f;
                          float _2041 = _2038 + 0.1666666716337204f;
                          float _2042 = _2041 + _2040;
                          _2048 = _2042;
                        } else {
                          bool _2044 = (_2016 == 0);
                          float _2045 = _2020 * 0.1666666716337204f;
                          float _2046 = _2044 ? _2045 : 0.0f;
                          _2048 = _2046;
                        }
                      }
                    }
                  }
                  float _2049 = 0.029999999329447746f - _1964;
                  float _2050 = _1922 * 0.27000001072883606f;
                  float _2051 = _2050 * _2049;
                  float _2052 = _2051 * _2048;
                  float _2053 = _2052 + _1964;
                  float _2054 = max(_2053, 0.0f);
                  float _2055 = max(_1965, 0.0f);
                  float _2056 = max(_1966, 0.0f);
                  float _2057 = min(_2054, 65535.0f);
                  float _2058 = min(_2055, 65535.0f);
                  float _2059 = min(_2056, 65535.0f);
                  float _2060 = _2057 * 1.4514392614364624f;
                  float _2061 = mad(-0.2365107536315918f, _2058, _2060);
                  float _2062 = mad(-0.21492856740951538f, _2059, _2061);
                  float _2063 = _2057 * -0.07655377686023712f;
                  float _2064 = mad(1.17622971534729f, _2058, _2063);
                  float _2065 = mad(-0.09967592358589172f, _2059, _2064);
                  float _2066 = _2057 * 0.008316148072481155f;
                  float _2067 = mad(-0.006032449658960104f, _2058, _2066);
                  float _2068 = mad(0.9977163076400757f, _2059, _2067);
                  float _2069 = max(_2062, 0.0f);
                  float _2070 = max(_2065, 0.0f);
                  float _2071 = max(_2068, 0.0f);
                  float _2072 = min(_2069, 65504.0f);
                  float _2073 = min(_2070, 65504.0f);
                  float _2074 = min(_2071, 65504.0f);
                  float _2075 = dot(float3(_2072, _2073, _2074), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2076 = _2072 - _2075;
                  float _2077 = _2073 - _2075;
                  float _2078 = _2074 - _2075;
                  float _2079 = _2076 * 0.9599999785423279f;
                  float _2080 = _2077 * 0.9599999785423279f;
                  float _2081 = _2078 * 0.9599999785423279f;
                  float _2082 = _2079 + _2075;
                  float _2083 = _2080 + _2075;
                  float _2084 = _2081 + _2075;
                  float _2085 = max(_2082, 1.000000013351432e-10f);
                  float _2086 = log2(_2085);
                  float _2087 = _2086 * 0.3010300099849701f;
                  float _2088 = log2(_1874);
                  float _2089 = _2088 * 0.3010300099849701f;
                  bool _2090 = !(_2087 <= _2089);
                  do {
                    if (!_2090) {
                      float _2092 = log2(_1875);
                      float _2093 = _2092 * 0.3010300099849701f;
                      _2158 = _2093;
                    } else {
                      bool _2095 = (_2087 > _2089);
                      float _2096 = log2(_1872);
                      float _2097 = _2096 * 0.3010300099849701f;
                      bool _2098 = (_2087 < _2097);
                      bool _2099 = _2095 && _2098;
                      if (_2099) {
                        float _2101 = _2086 - _2088;
                        float _2102 = _2101 * 0.9030900001525879f;
                        float _2103 = _2096 - _2088;
                        float _2104 = _2103 * 0.3010300099849701f;
                        float _2105 = _2102 / _2104;
                        int _2106 = int(_2105);
                        float _2107 = float(_2106);
                        float _2108 = _2105 - _2107;
                        float _2110 = _15[_2106];
                        int _2111 = _2106 + 1;
                        float _2113 = _15[_2111];
                        int _2114 = _2106 + 2;
                        float _2116 = _15[_2114];
                        float _2117 = _2108 * _2108;
                        float _2118 = _2110 * 0.5f;
                        float _2119 = mad(_2113, -1.0f, _2118);
                        float _2120 = mad(_2116, 0.5f, _2119);
                        float _2121 = _2113 - _2110;
                        float _2122 = mad(_2113, 0.5f, _2118);
                        float _2123 = dot(float3(_2117, _2108, 1.0f), float3(_2120, _2121, _2122));
                        _2158 = _2123;
                      } else {
                        bool _2125 = !(_2087 >= _2097);
                        do {
                          if (!_2125) {
                            float _2127 = log2(_1876);
                            float _2128 = _2127 * 0.3010300099849701f;
                            bool _2129 = (_2087 < _2128);
                            if (_2129) {
                              float _2131 = _2086 - _2096;
                              float _2132 = _2131 * 0.9030900001525879f;
                              float _2133 = _2127 - _2096;
                              float _2134 = _2133 * 0.3010300099849701f;
                              float _2135 = _2132 / _2134;
                              int _2136 = int(_2135);
                              float _2137 = float(_2136);
                              float _2138 = _2135 - _2137;
                              float _2140 = _16[_2136];
                              int _2141 = _2136 + 1;
                              float _2143 = _16[_2141];
                              int _2144 = _2136 + 2;
                              float _2146 = _16[_2144];
                              float _2147 = _2138 * _2138;
                              float _2148 = _2140 * 0.5f;
                              float _2149 = mad(_2143, -1.0f, _2148);
                              float _2150 = mad(_2146, 0.5f, _2149);
                              float _2151 = _2143 - _2140;
                              float _2152 = mad(_2143, 0.5f, _2148);
                              float _2153 = dot(float3(_2147, _2138, 1.0f), float3(_2150, _2151, _2152));
                              _2158 = _2153;
                              break;
                            }
                          }
                          float _2155 = log2(_1877);
                          float _2156 = _2155 * 0.3010300099849701f;
                          _2158 = _2156;
                        } while (false);
                      }
                    }
                    float _2159 = _2158 * 3.321928024291992f;
                    float _2160 = exp2(_2159);
                    float _2161 = max(_2083, 1.000000013351432e-10f);
                    float _2162 = log2(_2161);
                    float _2163 = _2162 * 0.3010300099849701f;
                    bool _2164 = !(_2163 <= _2089);
                    do {
                      if (!_2164) {
                        float _2166 = log2(_1875);
                        float _2167 = _2166 * 0.3010300099849701f;
                        _2232 = _2167;
                      } else {
                        bool _2169 = (_2163 > _2089);
                        float _2170 = log2(_1872);
                        float _2171 = _2170 * 0.3010300099849701f;
                        bool _2172 = (_2163 < _2171);
                        bool _2173 = _2169 && _2172;
                        if (_2173) {
                          float _2175 = _2162 - _2088;
                          float _2176 = _2175 * 0.9030900001525879f;
                          float _2177 = _2170 - _2088;
                          float _2178 = _2177 * 0.3010300099849701f;
                          float _2179 = _2176 / _2178;
                          int _2180 = int(_2179);
                          float _2181 = float(_2180);
                          float _2182 = _2179 - _2181;
                          float _2184 = _15[_2180];
                          int _2185 = _2180 + 1;
                          float _2187 = _15[_2185];
                          int _2188 = _2180 + 2;
                          float _2190 = _15[_2188];
                          float _2191 = _2182 * _2182;
                          float _2192 = _2184 * 0.5f;
                          float _2193 = mad(_2187, -1.0f, _2192);
                          float _2194 = mad(_2190, 0.5f, _2193);
                          float _2195 = _2187 - _2184;
                          float _2196 = mad(_2187, 0.5f, _2192);
                          float _2197 = dot(float3(_2191, _2182, 1.0f), float3(_2194, _2195, _2196));
                          _2232 = _2197;
                        } else {
                          bool _2199 = !(_2163 >= _2171);
                          do {
                            if (!_2199) {
                              float _2201 = log2(_1876);
                              float _2202 = _2201 * 0.3010300099849701f;
                              bool _2203 = (_2163 < _2202);
                              if (_2203) {
                                float _2205 = _2162 - _2170;
                                float _2206 = _2205 * 0.9030900001525879f;
                                float _2207 = _2201 - _2170;
                                float _2208 = _2207 * 0.3010300099849701f;
                                float _2209 = _2206 / _2208;
                                int _2210 = int(_2209);
                                float _2211 = float(_2210);
                                float _2212 = _2209 - _2211;
                                float _2214 = _16[_2210];
                                int _2215 = _2210 + 1;
                                float _2217 = _16[_2215];
                                int _2218 = _2210 + 2;
                                float _2220 = _16[_2218];
                                float _2221 = _2212 * _2212;
                                float _2222 = _2214 * 0.5f;
                                float _2223 = mad(_2217, -1.0f, _2222);
                                float _2224 = mad(_2220, 0.5f, _2223);
                                float _2225 = _2217 - _2214;
                                float _2226 = mad(_2217, 0.5f, _2222);
                                float _2227 = dot(float3(_2221, _2212, 1.0f), float3(_2224, _2225, _2226));
                                _2232 = _2227;
                                break;
                              }
                            }
                            float _2229 = log2(_1877);
                            float _2230 = _2229 * 0.3010300099849701f;
                            _2232 = _2230;
                          } while (false);
                        }
                      }
                      float _2233 = _2232 * 3.321928024291992f;
                      float _2234 = exp2(_2233);
                      float _2235 = max(_2084, 1.000000013351432e-10f);
                      float _2236 = log2(_2235);
                      float _2237 = _2236 * 0.3010300099849701f;
                      bool _2238 = !(_2237 <= _2089);
                      do {
                        if (!_2238) {
                          float _2240 = log2(_1875);
                          float _2241 = _2240 * 0.3010300099849701f;
                          _2306 = _2241;
                        } else {
                          bool _2243 = (_2237 > _2089);
                          float _2244 = log2(_1872);
                          float _2245 = _2244 * 0.3010300099849701f;
                          bool _2246 = (_2237 < _2245);
                          bool _2247 = _2243 && _2246;
                          if (_2247) {
                            float _2249 = _2236 - _2088;
                            float _2250 = _2249 * 0.9030900001525879f;
                            float _2251 = _2244 - _2088;
                            float _2252 = _2251 * 0.3010300099849701f;
                            float _2253 = _2250 / _2252;
                            int _2254 = int(_2253);
                            float _2255 = float(_2254);
                            float _2256 = _2253 - _2255;
                            float _2258 = _15[_2254];
                            int _2259 = _2254 + 1;
                            float _2261 = _15[_2259];
                            int _2262 = _2254 + 2;
                            float _2264 = _15[_2262];
                            float _2265 = _2256 * _2256;
                            float _2266 = _2258 * 0.5f;
                            float _2267 = mad(_2261, -1.0f, _2266);
                            float _2268 = mad(_2264, 0.5f, _2267);
                            float _2269 = _2261 - _2258;
                            float _2270 = mad(_2261, 0.5f, _2266);
                            float _2271 = dot(float3(_2265, _2256, 1.0f), float3(_2268, _2269, _2270));
                            _2306 = _2271;
                          } else {
                            bool _2273 = !(_2237 >= _2245);
                            do {
                              if (!_2273) {
                                float _2275 = log2(_1876);
                                float _2276 = _2275 * 0.3010300099849701f;
                                bool _2277 = (_2237 < _2276);
                                if (_2277) {
                                  float _2279 = _2236 - _2244;
                                  float _2280 = _2279 * 0.9030900001525879f;
                                  float _2281 = _2275 - _2244;
                                  float _2282 = _2281 * 0.3010300099849701f;
                                  float _2283 = _2280 / _2282;
                                  int _2284 = int(_2283);
                                  float _2285 = float(_2284);
                                  float _2286 = _2283 - _2285;
                                  float _2288 = _16[_2284];
                                  int _2289 = _2284 + 1;
                                  float _2291 = _16[_2289];
                                  int _2292 = _2284 + 2;
                                  float _2294 = _16[_2292];
                                  float _2295 = _2286 * _2286;
                                  float _2296 = _2288 * 0.5f;
                                  float _2297 = mad(_2291, -1.0f, _2296);
                                  float _2298 = mad(_2294, 0.5f, _2297);
                                  float _2299 = _2291 - _2288;
                                  float _2300 = mad(_2291, 0.5f, _2296);
                                  float _2301 = dot(float3(_2295, _2286, 1.0f), float3(_2298, _2299, _2300));
                                  _2306 = _2301;
                                  break;
                                }
                              }
                              float _2303 = log2(_1877);
                              float _2304 = _2303 * 0.3010300099849701f;
                              _2306 = _2304;
                            } while (false);
                          }
                        }
                        float _2307 = _2306 * 3.321928024291992f;
                        float _2308 = exp2(_2307);
                        float _2309 = _2160 - _1875;
                        float _2310 = _1877 - _1875;
                        float _2311 = _2309 / _2310;
                        float _2312 = _2234 - _1875;
                        float _2313 = _2312 / _2310;
                        float _2314 = _2308 - _1875;
                        float _2315 = _2314 / _2310;
                        float _2316 = _2311 * 0.6624541878700256f;
                        float _2317 = mad(0.13400420546531677f, _2313, _2316);
                        float _2318 = mad(0.15618768334388733f, _2315, _2317);
                        float _2319 = _2311 * 0.2722287178039551f;
                        float _2320 = mad(0.6740817427635193f, _2313, _2319);
                        float _2321 = mad(0.053689517080783844f, _2315, _2320);
                        float _2322 = _2311 * -0.005574649665504694f;
                        float _2323 = mad(0.00406073359772563f, _2313, _2322);
                        float _2324 = mad(1.0103391408920288f, _2315, _2323);
                        float _2325 = _2318 * 1.6410233974456787f;
                        float _2326 = mad(-0.32480329275131226f, _2321, _2325);
                        float _2327 = mad(-0.23642469942569733f, _2324, _2326);
                        float _2328 = _2318 * -0.663662850856781f;
                        float _2329 = mad(1.6153316497802734f, _2321, _2328);
                        float _2330 = mad(0.016756348311901093f, _2324, _2329);
                        float _2331 = _2318 * 0.011721894145011902f;
                        float _2332 = mad(-0.008284442126750946f, _2321, _2331);
                        float _2333 = mad(0.9883948564529419f, _2324, _2332);
                        float _2334 = max(_2327, 0.0f);
                        float _2335 = max(_2330, 0.0f);
                        float _2336 = max(_2333, 0.0f);
                        float _2337 = min(_2334, 1.0f);
                        float _2338 = min(_2335, 1.0f);
                        float _2339 = min(_2336, 1.0f);
                        float _2340 = _2337 * 0.6624541878700256f;
                        float _2341 = mad(0.13400420546531677f, _2338, _2340);
                        float _2342 = mad(0.15618768334388733f, _2339, _2341);
                        float _2343 = _2337 * 0.2722287178039551f;
                        float _2344 = mad(0.6740817427635193f, _2338, _2343);
                        float _2345 = mad(0.053689517080783844f, _2339, _2344);
                        float _2346 = _2337 * -0.005574649665504694f;
                        float _2347 = mad(0.00406073359772563f, _2338, _2346);
                        float _2348 = mad(1.0103391408920288f, _2339, _2347);
                        float _2349 = _2342 * 1.6410233974456787f;
                        float _2350 = mad(-0.32480329275131226f, _2345, _2349);
                        float _2351 = mad(-0.23642469942569733f, _2348, _2350);
                        float _2352 = _2342 * -0.663662850856781f;
                        float _2353 = mad(1.6153316497802734f, _2345, _2352);
                        float _2354 = mad(0.016756348311901093f, _2348, _2353);
                        float _2355 = _2342 * 0.011721894145011902f;
                        float _2356 = mad(-0.008284442126750946f, _2345, _2355);
                        float _2357 = mad(0.9883948564529419f, _2348, _2356);
                        float _2358 = max(_2351, 0.0f);
                        float _2359 = max(_2354, 0.0f);
                        float _2360 = max(_2357, 0.0f);
                        float _2361 = min(_2358, 65535.0f);
                        float _2362 = min(_2359, 65535.0f);
                        float _2363 = min(_2360, 65535.0f);
                        float _2364 = _2361 * _1877;
                        float _2365 = _2362 * _1877;
                        float _2366 = _2363 * _1877;
                        float _2367 = max(_2364, 0.0f);
                        float _2368 = max(_2365, 0.0f);
                        float _2369 = max(_2366, 0.0f);
                        float _2370 = min(_2367, 65535.0f);
                        float _2371 = min(_2368, 65535.0f);
                        float _2372 = min(_2369, 65535.0f);
                        bool _2373 = (_1142 == 6);
                        _2385 = _2370;
                        _2386 = _2371;
                        _2387 = _2372;
                        do {
                          if (!_2373) {
                            float _2375 = _2370 * _53;
                            float _2376 = mad(_54, _2371, _2375);
                            float _2377 = mad(_55, _2372, _2376);
                            float _2378 = _2370 * _56;
                            float _2379 = mad(_57, _2371, _2378);
                            float _2380 = mad(_58, _2372, _2379);
                            float _2381 = _2370 * _59;
                            float _2382 = mad(_60, _2371, _2381);
                            float _2383 = mad(_61, _2372, _2382);
                            _2385 = _2377;
                            _2386 = _2380;
                            _2387 = _2383;
                          }
                          float _2388 = _2385 * 9.999999747378752e-05f;
                          float _2389 = _2386 * 9.999999747378752e-05f;
                          float _2390 = _2387 * 9.999999747378752e-05f;
                          float _2391 = log2(_2388);
                          float _2392 = log2(_2389);
                          float _2393 = log2(_2390);
                          float _2394 = _2391 * 0.1593017578125f;
                          float _2395 = _2392 * 0.1593017578125f;
                          float _2396 = _2393 * 0.1593017578125f;
                          float _2397 = exp2(_2394);
                          float _2398 = exp2(_2395);
                          float _2399 = exp2(_2396);
                          float _2400 = _2397 * 18.8515625f;
                          float _2401 = _2398 * 18.8515625f;
                          float _2402 = _2399 * 18.8515625f;
                          float _2403 = _2400 + 0.8359375f;
                          float _2404 = _2401 + 0.8359375f;
                          float _2405 = _2402 + 0.8359375f;
                          float _2406 = _2397 * 18.6875f;
                          float _2407 = _2398 * 18.6875f;
                          float _2408 = _2399 * 18.6875f;
                          float _2409 = _2406 + 1.0f;
                          float _2410 = _2407 + 1.0f;
                          float _2411 = _2408 + 1.0f;
                          float _2412 = 1.0f / _2409;
                          float _2413 = 1.0f / _2410;
                          float _2414 = 1.0f / _2411;
                          float _2415 = _2412 * _2403;
                          float _2416 = _2413 * _2404;
                          float _2417 = _2414 * _2405;
                          float _2418 = log2(_2415);
                          float _2419 = log2(_2416);
                          float _2420 = log2(_2417);
                          float _2421 = _2418 * 78.84375f;
                          float _2422 = _2419 * 78.84375f;
                          float _2423 = _2420 * 78.84375f;
                          float _2424 = exp2(_2421);
                          float _2425 = exp2(_2422);
                          float _2426 = exp2(_2423);
                          _2564 = _2424;
                          _2565 = _2425;
                          _2566 = _2426;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2428 = (_1142 == 7);
          if (_2428) {
            float _2431 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2432 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2433 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2435 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2436 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2437 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2439 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2440 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2441 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2442 = _2431 * _1124;
            float _2443 = mad(_2432, _1125, _2442);
            float _2444 = mad(_2433, _1126, _2443);
            float _2445 = _2435 * _1124;
            float _2446 = mad(_2436, _1125, _2445);
            float _2447 = mad(_2437, _1126, _2446);
            float _2448 = _2439 * _1124;
            float _2449 = mad(_2440, _1125, _2448);
            float _2450 = mad(_2441, _1126, _2449);
            float _2451 = _2444 * _53;
            float _2452 = mad(_54, _2447, _2451);
            float _2453 = mad(_55, _2450, _2452);
            float _2454 = _2444 * _56;
            float _2455 = mad(_57, _2447, _2454);
            float _2456 = mad(_58, _2450, _2455);
            float _2457 = _2444 * _59;
            float _2458 = mad(_60, _2447, _2457);
            float _2459 = mad(_61, _2450, _2458);
            float _2460 = _2453 * 9.999999747378752e-05f;
            float _2461 = _2456 * 9.999999747378752e-05f;
            float _2462 = _2459 * 9.999999747378752e-05f;
            float _2463 = log2(_2460);
            float _2464 = log2(_2461);
            float _2465 = log2(_2462);
            float _2466 = _2463 * 0.1593017578125f;
            float _2467 = _2464 * 0.1593017578125f;
            float _2468 = _2465 * 0.1593017578125f;
            float _2469 = exp2(_2466);
            float _2470 = exp2(_2467);
            float _2471 = exp2(_2468);
            float _2472 = _2469 * 18.8515625f;
            float _2473 = _2470 * 18.8515625f;
            float _2474 = _2471 * 18.8515625f;
            float _2475 = _2472 + 0.8359375f;
            float _2476 = _2473 + 0.8359375f;
            float _2477 = _2474 + 0.8359375f;
            float _2478 = _2469 * 18.6875f;
            float _2479 = _2470 * 18.6875f;
            float _2480 = _2471 * 18.6875f;
            float _2481 = _2478 + 1.0f;
            float _2482 = _2479 + 1.0f;
            float _2483 = _2480 + 1.0f;
            float _2484 = 1.0f / _2481;
            float _2485 = 1.0f / _2482;
            float _2486 = 1.0f / _2483;
            float _2487 = _2484 * _2475;
            float _2488 = _2485 * _2476;
            float _2489 = _2486 * _2477;
            float _2490 = log2(_2487);
            float _2491 = log2(_2488);
            float _2492 = log2(_2489);
            float _2493 = _2490 * 78.84375f;
            float _2494 = _2491 * 78.84375f;
            float _2495 = _2492 * 78.84375f;
            float _2496 = exp2(_2493);
            float _2497 = exp2(_2494);
            float _2498 = exp2(_2495);
            _2564 = _2496;
            _2565 = _2497;
            _2566 = _2498;
          } else {
            bool _2500 = (_1142 == 8);
            _2564 = _1124;
            _2565 = _1125;
            _2566 = _1126;
            if (!_2500) {
              bool _2502 = (_1142 == 9);
              float _2504 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2505 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2506 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2508 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2509 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2510 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2512 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2513 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2514 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2502) {
                float _2516 = _2504 * _1112;
                float _2517 = mad(_2505, _1113, _2516);
                float _2518 = mad(_2506, _1114, _2517);
                float _2519 = _2508 * _1112;
                float _2520 = mad(_2509, _1113, _2519);
                float _2521 = mad(_2510, _1114, _2520);
                float _2522 = _2512 * _1112;
                float _2523 = mad(_2513, _1113, _2522);
                float _2524 = mad(_2514, _1114, _2523);
                float _2525 = _2518 * _53;
                float _2526 = mad(_54, _2521, _2525);
                float _2527 = mad(_55, _2524, _2526);
                float _2528 = _2518 * _56;
                float _2529 = mad(_57, _2521, _2528);
                float _2530 = mad(_58, _2524, _2529);
                float _2531 = _2518 * _59;
                float _2532 = mad(_60, _2521, _2531);
                float _2533 = mad(_61, _2524, _2532);
                _2564 = _2527;
                _2565 = _2530;
                _2566 = _2533;
              } else {
                float _2535 = _2504 * _1138;
                float _2536 = mad(_2505, _1139, _2535);
                float _2537 = mad(_2506, _1140, _2536);
                float _2538 = _2508 * _1138;
                float _2539 = mad(_2509, _1139, _2538);
                float _2540 = mad(_2510, _1140, _2539);
                float _2541 = _2512 * _1138;
                float _2542 = mad(_2513, _1139, _2541);
                float _2543 = mad(_2514, _1140, _2542);
                float _2544 = _2537 * _53;
                float _2545 = mad(_54, _2540, _2544);
                float _2546 = mad(_55, _2543, _2545);
                float _2547 = _2537 * _56;
                float _2548 = mad(_57, _2540, _2547);
                float _2549 = mad(_58, _2543, _2548);
                float _2550 = _2537 * _59;
                float _2551 = mad(_60, _2540, _2550);
                float _2552 = mad(_61, _2543, _2551);
                float _2553 = _RootShaderParameters_040z;
                float _2554 = log2(_2546);
                float _2555 = log2(_2549);
                float _2556 = log2(_2552);
                float _2557 = _2554 * _2553;
                float _2558 = _2555 * _2553;
                float _2559 = _2556 * _2553;
                float _2560 = exp2(_2557);
                float _2561 = exp2(_2558);
                float _2562 = exp2(_2559);
                _2564 = _2560;
                _2565 = _2561;
                _2566 = _2562;
              }
            }
          }
        }
      }
    }
  }
  float _2567 = _2564 * 0.9523810148239136f;
  float _2568 = _2565 * 0.9523810148239136f;
  float _2569 = _2566 * 0.9523810148239136f;
  // _2570 = _1;
  RWOutputTexture[int3(_12, _13, _14)] = float4(_2567, _2568, _2569, 0.0f);
}
