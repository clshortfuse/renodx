#include "./shared.h"
#include "./tonemapper.hlsl"

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035x : packoffset(c035.x);
  float _RootShaderParameters_035y : packoffset(c035.y);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  uint _RootShaderParameters_038z : packoffset(c038.z);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_000x : packoffset(c000.x);
  float UniformBufferConstants_WorkingColorSpace_000y : packoffset(c000.y);
  float UniformBufferConstants_WorkingColorSpace_000z : packoffset(c000.z);
  float UniformBufferConstants_WorkingColorSpace_001x : packoffset(c001.x);
  float UniformBufferConstants_WorkingColorSpace_001y : packoffset(c001.y);
  float UniformBufferConstants_WorkingColorSpace_001z : packoffset(c001.z);
  float UniformBufferConstants_WorkingColorSpace_002x : packoffset(c002.x);
  float UniformBufferConstants_WorkingColorSpace_002y : packoffset(c002.y);
  float UniformBufferConstants_WorkingColorSpace_002z : packoffset(c002.z);
  float UniformBufferConstants_WorkingColorSpace_004x : packoffset(c004.x);
  float UniformBufferConstants_WorkingColorSpace_004y : packoffset(c004.y);
  float UniformBufferConstants_WorkingColorSpace_004z : packoffset(c004.z);
  float UniformBufferConstants_WorkingColorSpace_005x : packoffset(c005.x);
  float UniformBufferConstants_WorkingColorSpace_005y : packoffset(c005.y);
  float UniformBufferConstants_WorkingColorSpace_005z : packoffset(c005.z);
  float UniformBufferConstants_WorkingColorSpace_006x : packoffset(c006.x);
  float UniformBufferConstants_WorkingColorSpace_006y : packoffset(c006.y);
  float UniformBufferConstants_WorkingColorSpace_006z : packoffset(c006.z);
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

void main() {
  // rwtexture _1 = RWOutputTexture;
  // cbuffer _2 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _3 = _RootShaderParameters;
  // _4 = _2;
  // _5 = _3;
  float _9[6];
  float _10[6];
  float _11[6];
  float _12[6];
  float _13 = float(_6);
  float _14 = float(_7);
  float _15 = _13 + 0.5f;
  float _16 = _14 + 0.5f;
  float _18 = _RootShaderParameters_042x;
  float _19 = _RootShaderParameters_042y;
  float _20 = _18 * _15;
  float _21 = _19 * _16;
  float _22 = _20 + -0.015625f;
  float _23 = _21 + -0.015625f;
  float _24 = _22 * 1.0322580337524414f;
  float _25 = _23 * 1.0322580337524414f;
  float _26 = float(_8);
  float _27 = _26 * 0.032258063554763794f;
  uint _29 = _RootShaderParameters_041x;
  bool _30 = (_29 == 1);
  float _47 = 1.379158854484558f;
  float _48 = -0.3088507056236267f;
  float _49 = -0.07034677267074585f;
  float _50 = -0.06933528929948807f;
  float _51 = 1.0822921991348267f;
  float _52 = -0.012962047010660172f;
  float _53 = -0.002159259282052517f;
  float _54 = -0.045465391129255295f;
  float _55 = 1.0477596521377563f;
  float _113;
  float _114;
  float _115;
  float _164;
  float _893;
  float _929;
  float _940;
  float _1004;
  float _1272;
  float _1273;
  float _1274;
  float _1285;
  float _1296;
  float _1478;
  float _1514;
  float _1525;
  float _1564;
  float _1674;
  float _1748;
  float _1822;
  float _1901;
  float _1902;
  float _1903;
  float _2054;
  float _2090;
  float _2101;
  float _2140;
  float _2250;
  float _2324;
  float _2398;
  float _2477;
  float _2478;
  float _2479;
  float _2656;
  float _2657;
  float _2658;
  if (!_30) {
    bool _32 = (_29 == 2);
    _47 = 1.02579927444458f;
    _48 = -0.020052503794431686f;
    _49 = -0.0057713985443115234f;
    _50 = -0.0022350111976265907f;
    _51 = 1.0045825242996216f;
    _52 = -0.002352306619286537f;
    _53 = -0.005014004185795784f;
    _54 = -0.025293385609984398f;
    _55 = 1.0304402112960815f;
    if (!_32) {
      bool _34 = (_29 == 3);
      _47 = 0.6954522132873535f;
      _48 = 0.14067870378494263f;
      _49 = 0.16386906802654266f;
      _50 = 0.044794563204050064f;
      _51 = 0.8596711158752441f;
      _52 = 0.0955343171954155f;
      _53 = -0.005525882821530104f;
      _54 = 0.004025210160762072f;
      _55 = 1.0015007257461548f;
      if (!_34) {
        bool _36 = (_29 == 4);
        float _37 = _36 ? 1.0f : 1.7050515413284302f;
        float _38 = _36 ? 0.0f : -0.6217905879020691f;
        float _39 = _36 ? 0.0f : -0.0832584798336029f;
        float _40 = _36 ? 0.0f : -0.13025718927383423f;
        float _41 = _36 ? 1.0f : 1.1408027410507202f;
        float _42 = _36 ? 0.0f : -0.010548528283834457f;
        float _43 = _36 ? 0.0f : -0.024003278464078903f;
        float _44 = _36 ? 0.0f : -0.1289687603712082f;
        float _45 = _36 ? 1.0f : 1.152971863746643f;
        _47 = _37;
        _48 = _38;
        _49 = _39;
        _50 = _40;
        _51 = _41;
        _52 = _42;
        _53 = _43;
        _54 = _44;
        _55 = _45;
      }
    }
  }
  uint _57 = _RootShaderParameters_040w;
  bool _58 = (_57 > 2);
  if (_58) {
    float _60 = log2(_24);
    float _61 = log2(_25);
    float _62 = log2(_27);
    float _63 = _60 * 0.012683313339948654f;
    float _64 = _61 * 0.012683313339948654f;
    float _65 = _62 * 0.012683313339948654f;
    float _66 = exp2(_63);
    float _67 = exp2(_64);
    float _68 = exp2(_65);
    float _69 = _66 + -0.8359375f;
    float _70 = _67 + -0.8359375f;
    float _71 = _68 + -0.8359375f;
    float _72 = max(0.0f, _69);
    float _73 = max(0.0f, _70);
    float _74 = max(0.0f, _71);
    float _75 = _66 * 18.6875f;
    float _76 = _67 * 18.6875f;
    float _77 = _68 * 18.6875f;
    float _78 = 18.8515625f - _75;
    float _79 = 18.8515625f - _76;
    float _80 = 18.8515625f - _77;
    float _81 = _72 / _78;
    float _82 = _73 / _79;
    float _83 = _74 / _80;
    float _84 = log2(_81);
    float _85 = log2(_82);
    float _86 = log2(_83);
    float _87 = _84 * 6.277394771575928f;
    float _88 = _85 * 6.277394771575928f;
    float _89 = _86 * 6.277394771575928f;
    float _90 = exp2(_87);
    float _91 = exp2(_88);
    float _92 = exp2(_89);
    float _93 = _90 * 100.0f;
    float _94 = _91 * 100.0f;
    float _95 = _92 * 100.0f;
    _113 = _93;
    _114 = _94;
    _115 = _95;
  } else {
    float _97 = _22 * 14.45161247253418f;
    float _98 = _97 + -6.07624626159668f;
    float _99 = _23 * 14.45161247253418f;
    float _100 = _99 + -6.07624626159668f;
    float _101 = _26 * 0.4516128897666931f;
    float _102 = _101 + -6.07624626159668f;
    float _103 = exp2(_98);
    float _104 = exp2(_100);
    float _105 = exp2(_102);
    float _106 = _103 * 0.18000000715255737f;
    float _107 = _104 * 0.18000000715255737f;
    float _108 = _105 * 0.18000000715255737f;
    float _109 = _106 + -0.002667719265446067f;
    float _110 = _107 + -0.002667719265446067f;
    float _111 = _108 + -0.002667719265446067f;
    _113 = _109;
    _114 = _110;
    _115 = _111;
  }
  float3 input_color = float3(_113, _114, _115);  // CustomEdit

  float _117 = UniformBufferConstants_WorkingColorSpace_004x;
  float _118 = UniformBufferConstants_WorkingColorSpace_004y;
  float _119 = UniformBufferConstants_WorkingColorSpace_004z;
  float _121 = UniformBufferConstants_WorkingColorSpace_005x;
  float _122 = UniformBufferConstants_WorkingColorSpace_005y;
  float _123 = UniformBufferConstants_WorkingColorSpace_005z;
  float _125 = UniformBufferConstants_WorkingColorSpace_006x;
  float _126 = UniformBufferConstants_WorkingColorSpace_006y;
  float _127 = UniformBufferConstants_WorkingColorSpace_006z;
  float _129 = UniformBufferConstants_WorkingColorSpace_000x;
  float _130 = UniformBufferConstants_WorkingColorSpace_000y;
  float _131 = UniformBufferConstants_WorkingColorSpace_000z;
  float _133 = UniformBufferConstants_WorkingColorSpace_001x;
  float _134 = UniformBufferConstants_WorkingColorSpace_001y;
  float _135 = UniformBufferConstants_WorkingColorSpace_001z;
  float _137 = UniformBufferConstants_WorkingColorSpace_002x;
  float _138 = UniformBufferConstants_WorkingColorSpace_002y;
  float _139 = UniformBufferConstants_WorkingColorSpace_002z;
  uint _141 = _RootShaderParameters_038z;
  bool _142 = (_141 != 0);
  float _144 = _RootShaderParameters_035y;
  float _145 = _RootShaderParameters_035x;
  float _146 = _145 * 1.0005563497543335f;
  float _147 = 0.9994439482688904f / _145;
  bool _148 = !(_146 <= 7000.0f);
  if (!_148) {
    float _150 = _147 * 4607000064.0f;
    float _151 = 2967800.0f - _150;
    float _152 = _151 * _147;
    float _153 = _152 + 99.11000061035156f;
    float _154 = _153 * _147;
    float _155 = _154 + 0.24406300485134125f;
    _164 = _155;
  } else {
    float _157 = _147 * 2006400000.0f;
    float _158 = 1901800.0f - _157;
    float _159 = _158 * _147;
    float _160 = _159 + 247.47999572753906f;
    float _161 = _160 * _147;
    float _162 = _161 + 0.23703999817371368f;
    _164 = _162;
  }
  float _165 = _164 * _164;
  float _166 = _165 * 3.0f;
  float _167 = _164 * 2.869999885559082f;
  float _168 = _167 + -0.2750000059604645f;
  float _169 = _168 - _166;
  float _170 = _145 * 1.2864121856637212e-07f;
  float _171 = _170 + 0.00015411825734190643f;
  float _172 = _171 * _145;
  float _173 = _172 + 0.8601177334785461f;
  float _174 = _145 * 7.081451371959702e-07f;
  float _175 = _174 + 0.0008424202096648514f;
  float _176 = _175 * _145;
  float _177 = _176 + 1.0f;
  float _178 = _173 / _177;
  float _179 = _145 * 4.204816761443908e-08f;
  float _180 = _179 + 4.228062607580796e-05f;
  float _181 = _180 * _145;
  float _182 = _181 + 0.31739872694015503f;
  float _183 = _145 * 2.8974181986995973e-05f;
  float _184 = 1.0f - _183;
  float _185 = _145 * _145;
  float _186 = _185 * 1.6145605741257896e-07f;
  float _187 = _184 + _186;
  float _188 = _182 / _187;
  float _189 = _178 * 3.0f;
  float _190 = _178 * 2.0f;
  float _191 = _188 * 8.0f;
  float _192 = _190 + 4.0f;
  float _193 = _192 - _191;
  float _194 = _189 / _193;
  float _195 = _188 * 2.0f;
  float _196 = _195 / _193;
  bool _197 = (_145 < 4000.0f);
  float _198 = _197 ? _194 : _164;
  float _199 = _197 ? _196 : _169;
  float _200 = _145 * 1916156.25f;
  float _201 = -1137581184.0f - _200;
  float _202 = _185 * 1.5317699909210205f;
  float _203 = _201 - _202;
  float _204 = _145 + 1189.6199951171875f;
  float _205 = _204 * _145;
  float _206 = _205 + 1412139.875f;
  float _207 = _206 * _206;
  float _208 = _203 / _207;
  float _209 = _145 * 705674.0f;
  float _210 = 1974715392.0f - _209;
  float _211 = _185 * 308.60699462890625f;
  float _212 = _210 - _211;
  float _213 = _145 * 179.45599365234375f;
  float _214 = 6193636.0f - _213;
  float _215 = _214 + _185;
  float _216 = _215 * _215;
  float _217 = _212 / _216;
  float _218 = dot(float2(_208, _217), float2(_208, _217));
  float _219 = rsqrt(_218);
  float _220 = _144 * 0.05000000074505806f;
  float _221 = _220 * _217;
  float _222 = _221 * _219;
  float _223 = _222 + _178;
  float _224 = _220 * _208;
  float _225 = _224 * _219;
  float _226 = _188 - _225;
  float _227 = _223 * 3.0f;
  float _228 = _223 * 2.0f;
  float _229 = _226 * 8.0f;
  float _230 = 4.0f - _229;
  float _231 = _230 + _228;
  float _232 = _227 / _231;
  float _233 = _226 * 2.0f;
  float _234 = _233 / _231;
  float _235 = _232 - _194;
  float _236 = _234 - _196;
  float _237 = _235 + _198;
  float _238 = _236 + _199;
  float _239 = _142 ? _237 : 0.3127000033855438f;
  float _240 = _142 ? _238 : 0.32899999618530273f;
  float _241 = _142 ? 0.3127000033855438f : _237;
  float _242 = _142 ? 0.32899999618530273f : _238;
  float _243 = max(_240, 1.000000013351432e-10f);
  float _244 = _239 / _243;
  float _245 = 1.0f - _239;
  float _246 = _245 - _240;
  float _247 = _246 / _243;
  float _248 = max(_242, 1.000000013351432e-10f);
  float _249 = _241 / _248;
  float _250 = 1.0f - _241;
  float _251 = _250 - _242;
  float _252 = _251 / _248;
  float _253 = _244 * 0.8950999975204468f;
  float _254 = _253 + 0.266400009393692f;
  float _255 = mad(-0.16140000522136688f, _247, _254);
  float _256 = _244 * 0.7501999735832214f;
  float _257 = 1.7135000228881836f - _256;
  float _258 = mad(0.03669999912381172f, _247, _257);
  float _259 = _244 * 0.03889999911189079f;
  float _260 = _259 + -0.06849999725818634f;
  float _261 = mad(1.0296000242233276f, _247, _260);
  float _262 = _249 * 0.8950999975204468f;
  float _263 = _262 + 0.266400009393692f;
  float _264 = mad(-0.16140000522136688f, _252, _263);
  float _265 = _249 * 0.7501999735832214f;
  float _266 = 1.7135000228881836f - _265;
  float _267 = mad(0.03669999912381172f, _252, _266);
  float _268 = _249 * 0.03889999911189079f;
  float _269 = _268 + -0.06849999725818634f;
  float _270 = mad(1.0296000242233276f, _252, _269);
  float _271 = _264 / _255;
  float _272 = _267 / _258;
  float _273 = _270 / _261;
  float _274 = mad(_272, -0.7501999735832214f, 0.0f);
  float _275 = mad(_272, 1.7135000228881836f, 0.0f);
  float _276 = mad(_272, 0.03669999912381172f, -0.0f);
  float _277 = mad(_273, 0.03889999911189079f, 0.0f);
  float _278 = mad(_273, -0.06849999725818634f, 0.0f);
  float _279 = mad(_273, 1.0296000242233276f, 0.0f);
  float _280 = _271 * 0.883457362651825f;
  float _281 = mad(-0.1470542997121811f, _274, _280);
  float _282 = mad(0.1599626988172531f, _277, _281);
  float _283 = _271 * 0.26293492317199707f;
  float _284 = mad(-0.1470542997121811f, _275, _283);
  float _285 = mad(0.1599626988172531f, _278, _284);
  float _286 = _271 * -0.15930065512657166f;
  float _287 = mad(-0.1470542997121811f, _276, _286);
  float _288 = mad(0.1599626988172531f, _279, _287);
  float _289 = _271 * 0.38695648312568665f;
  float _290 = mad(0.5183603167533875f, _274, _289);
  float _291 = mad(0.04929120093584061f, _277, _290);
  float _292 = _271 * 0.11516613513231277f;
  float _293 = mad(0.5183603167533875f, _275, _292);
  float _294 = mad(0.04929120093584061f, _278, _293);
  float _295 = _271 * -0.0697740763425827f;
  float _296 = mad(0.5183603167533875f, _276, _295);
  float _297 = mad(0.04929120093584061f, _279, _296);
  float _298 = _271 * -0.007634039502590895f;
  float _299 = mad(0.04004279896616936f, _274, _298);
  float _300 = mad(0.9684867262840271f, _277, _299);
  float _301 = _271 * -0.0022720457054674625f;
  float _302 = mad(0.04004279896616936f, _275, _301);
  float _303 = mad(0.9684867262840271f, _278, _302);
  float _304 = _271 * 0.0013765322510153055f;
  float _305 = mad(0.04004279896616936f, _276, _304);
  float _306 = mad(0.9684867262840271f, _279, _305);
  float _307 = _282 * _129;
  float _308 = mad(_285, _133, _307);
  float _309 = mad(_288, _137, _308);
  float _310 = _282 * _130;
  float _311 = mad(_285, _134, _310);
  float _312 = mad(_288, _138, _311);
  float _313 = _282 * _131;
  float _314 = mad(_285, _135, _313);
  float _315 = mad(_288, _139, _314);
  float _316 = _291 * _129;
  float _317 = mad(_294, _133, _316);
  float _318 = mad(_297, _137, _317);
  float _319 = _291 * _130;
  float _320 = mad(_294, _134, _319);
  float _321 = mad(_297, _138, _320);
  float _322 = _291 * _131;
  float _323 = mad(_294, _135, _322);
  float _324 = mad(_297, _139, _323);
  float _325 = _300 * _129;
  float _326 = mad(_303, _133, _325);
  float _327 = mad(_306, _137, _326);
  float _328 = _300 * _130;
  float _329 = mad(_303, _134, _328);
  float _330 = mad(_306, _138, _329);
  float _331 = _300 * _131;
  float _332 = mad(_303, _135, _331);
  float _333 = mad(_306, _139, _332);
  float _334 = _309 * _117;
  float _335 = mad(_118, _318, _334);
  float _336 = mad(_119, _327, _335);
  float _337 = _312 * _117;
  float _338 = mad(_118, _321, _337);
  float _339 = mad(_119, _330, _338);
  float _340 = _315 * _117;
  float _341 = mad(_118, _324, _340);
  float _342 = mad(_119, _333, _341);
  float _343 = _309 * _121;
  float _344 = mad(_122, _318, _343);
  float _345 = mad(_123, _327, _344);
  float _346 = _312 * _121;
  float _347 = mad(_122, _321, _346);
  float _348 = mad(_123, _330, _347);
  float _349 = _315 * _121;
  float _350 = mad(_122, _324, _349);
  float _351 = mad(_123, _333, _350);
  float _352 = _309 * _125;
  float _353 = mad(_126, _318, _352);
  float _354 = mad(_127, _327, _353);
  float _355 = _312 * _125;
  float _356 = mad(_126, _321, _355);
  float _357 = mad(_127, _330, _356);
  float _358 = _315 * _125;
  float _359 = mad(_126, _324, _358);
  float _360 = mad(_127, _333, _359);
  float _361 = _336 * _113;
  float _362 = mad(_339, _114, _361);
  float _363 = mad(_342, _115, _362);
  float _364 = _345 * _113;
  float _365 = mad(_348, _114, _364);
  float _366 = mad(_351, _115, _365);
  float _367 = _354 * _113;
  float _368 = mad(_357, _114, _367);
  float _369 = mad(_360, _115, _368);
  float _371 = UniformBufferConstants_WorkingColorSpace_008x;
  float _372 = UniformBufferConstants_WorkingColorSpace_008y;
  float _373 = UniformBufferConstants_WorkingColorSpace_008z;
  float _375 = UniformBufferConstants_WorkingColorSpace_009x;
  float _376 = UniformBufferConstants_WorkingColorSpace_009y;
  float _377 = UniformBufferConstants_WorkingColorSpace_009z;
  float _379 = UniformBufferConstants_WorkingColorSpace_010x;
  float _380 = UniformBufferConstants_WorkingColorSpace_010y;
  float _381 = UniformBufferConstants_WorkingColorSpace_010z;
  float _382 = _371 * _363;
  float _383 = mad(_372, _366, _382);
  float _384 = mad(_373, _369, _383);
  float _385 = _375 * _363;
  float _386 = mad(_376, _366, _385);
  float _387 = mad(_377, _369, _386);
  float _388 = _379 * _363;
  float _389 = mad(_380, _366, _388);
  float _390 = mad(_381, _369, _389);
  float _391 = dot(float3(_384, _387, _390), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _392 = _384 / _391;
  float _393 = _387 / _391;
  float _394 = _390 / _391;
  float _395 = _392 + -1.0f;
  float _396 = _393 + -1.0f;
  float _397 = _394 + -1.0f;
  float _398 = dot(float3(_395, _396, _397), float3(_395, _396, _397));
  float _399 = _398 * -4.0f;
  float _400 = exp2(_399);
  float _401 = 1.0f - _400;
  float _403 = _RootShaderParameters_036z;
  float _404 = _391 * _391;
  float _405 = _404 * -4.0f;
  float _406 = _405 * _403;
  float _407 = exp2(_406);
  float _408 = 1.0f - _407;
  float _409 = _408 * _401;
  float _410 = _384 * 1.370412826538086f;
  float _411 = mad(-0.32929131388664246f, _387, _410);
  float _412 = mad(-0.06368283927440643f, _390, _411);
  float _413 = _384 * -0.08343426138162613f;
  float _414 = mad(1.0970908403396606f, _387, _413);
  float _415 = mad(-0.010861567221581936f, _390, _414);
  float _416 = _384 * -0.02579325996339321f;
  float _417 = mad(-0.09862564504146576f, _387, _416);
  float _418 = mad(1.203694462776184f, _390, _417);
  float _419 = _412 - _384;
  float _420 = _415 - _387;
  float _421 = _418 - _390;
  float _422 = _419 * _409;
  float _423 = _420 * _409;
  float _424 = _421 * _409;
  float _425 = _422 + _384;
  float _426 = _423 + _387;
  float _427 = _424 + _390;
  float _428 = dot(float3(_425, _426, _427), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _430 = _RootShaderParameters_024x;
  float _431 = _RootShaderParameters_024y;
  float _432 = _RootShaderParameters_024z;
  float _433 = _RootShaderParameters_024w;
  float _435 = _RootShaderParameters_019x;
  float _436 = _RootShaderParameters_019y;
  float _437 = _RootShaderParameters_019z;
  float _438 = _RootShaderParameters_019w;
  float _439 = _435 + _430;
  float _440 = _436 + _431;
  float _441 = _437 + _432;
  float _442 = _438 + _433;
  float _444 = _RootShaderParameters_023x;
  float _445 = _RootShaderParameters_023y;
  float _446 = _RootShaderParameters_023z;
  float _447 = _RootShaderParameters_023w;
  float _449 = _RootShaderParameters_018x;
  float _450 = _RootShaderParameters_018y;
  float _451 = _RootShaderParameters_018z;
  float _452 = _RootShaderParameters_018w;
  float _453 = _449 * _444;
  float _454 = _450 * _445;
  float _455 = _451 * _446;
  float _456 = _452 * _447;
  float _458 = _RootShaderParameters_022x;
  float _459 = _RootShaderParameters_022y;
  float _460 = _RootShaderParameters_022z;
  float _461 = _RootShaderParameters_022w;
  float _463 = _RootShaderParameters_017x;
  float _464 = _RootShaderParameters_017y;
  float _465 = _RootShaderParameters_017z;
  float _466 = _RootShaderParameters_017w;
  float _467 = _463 * _458;
  float _468 = _464 * _459;
  float _469 = _465 * _460;
  float _470 = _466 * _461;
  float _472 = _RootShaderParameters_021x;
  float _473 = _RootShaderParameters_021y;
  float _474 = _RootShaderParameters_021z;
  float _475 = _RootShaderParameters_021w;
  float _477 = _RootShaderParameters_016x;
  float _478 = _RootShaderParameters_016y;
  float _479 = _RootShaderParameters_016z;
  float _480 = _RootShaderParameters_016w;
  float _481 = _477 * _472;
  float _482 = _478 * _473;
  float _483 = _479 * _474;
  float _484 = _480 * _475;
  float _486 = _RootShaderParameters_020x;
  float _487 = _RootShaderParameters_020y;
  float _488 = _RootShaderParameters_020z;
  float _489 = _RootShaderParameters_020w;
  float _491 = _RootShaderParameters_015x;
  float _492 = _RootShaderParameters_015y;
  float _493 = _RootShaderParameters_015z;
  float _494 = _RootShaderParameters_015w;
  float _495 = _491 * _486;
  float _496 = _492 * _487;
  float _497 = _493 * _488;
  float _498 = _494 * _489;
  float _499 = _495 * _498;
  float _500 = _496 * _498;
  float _501 = _497 * _498;
  float _502 = _425 - _428;
  float _503 = _426 - _428;
  float _504 = _427 - _428;
  float _505 = _499 * _502;
  float _506 = _500 * _503;
  float _507 = _501 * _504;
  float _508 = _505 + _428;
  float _509 = _506 + _428;
  float _510 = _507 + _428;
  float _511 = max(0.0f, _508);
  float _512 = max(0.0f, _509);
  float _513 = max(0.0f, _510);
  float _514 = _481 * _484;
  float _515 = _482 * _484;
  float _516 = _483 * _484;
  float _517 = _511 * 5.55555534362793f;
  float _518 = _512 * 5.55555534362793f;
  float _519 = _513 * 5.55555534362793f;
  float _520 = log2(_517);
  float _521 = log2(_518);
  float _522 = log2(_519);
  float _523 = _514 * _520;
  float _524 = _515 * _521;
  float _525 = _516 * _522;
  float _526 = exp2(_523);
  float _527 = exp2(_524);
  float _528 = exp2(_525);
  float _529 = _526 * 0.18000000715255737f;
  float _530 = _527 * 0.18000000715255737f;
  float _531 = _528 * 0.18000000715255737f;
  float _532 = _467 * _470;
  float _533 = _468 * _470;
  float _534 = _469 * _470;
  float _535 = 1.0f / _532;
  float _536 = 1.0f / _533;
  float _537 = 1.0f / _534;
  float _538 = log2(_529);
  float _539 = log2(_530);
  float _540 = log2(_531);
  float _541 = _538 * _535;
  float _542 = _539 * _536;
  float _543 = _540 * _537;
  float _544 = exp2(_541);
  float _545 = exp2(_542);
  float _546 = exp2(_543);
  float _547 = _453 * _456;
  float _548 = _454 * _456;
  float _549 = _455 * _456;
  float _550 = _547 * _544;
  float _551 = _548 * _545;
  float _552 = _549 * _546;
  float _553 = _439 + _442;
  float _554 = _440 + _442;
  float _555 = _441 + _442;
  float _556 = _553 + _550;
  float _557 = _554 + _551;
  float _558 = _555 + _552;
  float _559 = _RootShaderParameters_035z;
  float _560 = _428 / _559;
  float _561 = saturate(_560);
  float _562 = _561 * 2.0f;
  float _563 = 3.0f - _562;
  float _564 = _561 * _561;
  float _565 = _564 * _563;
  float _566 = 1.0f - _565;
  float _568 = _RootShaderParameters_034x;
  float _569 = _RootShaderParameters_034y;
  float _570 = _RootShaderParameters_034z;
  float _571 = _RootShaderParameters_034w;
  float _572 = _435 + _568;
  float _573 = _436 + _569;
  float _574 = _437 + _570;
  float _575 = _438 + _571;
  float _577 = _RootShaderParameters_033x;
  float _578 = _RootShaderParameters_033y;
  float _579 = _RootShaderParameters_033z;
  float _580 = _RootShaderParameters_033w;
  float _581 = _449 * _577;
  float _582 = _450 * _578;
  float _583 = _451 * _579;
  float _584 = _452 * _580;
  float _586 = _RootShaderParameters_032x;
  float _587 = _RootShaderParameters_032y;
  float _588 = _RootShaderParameters_032z;
  float _589 = _RootShaderParameters_032w;
  float _590 = _463 * _586;
  float _591 = _464 * _587;
  float _592 = _465 * _588;
  float _593 = _466 * _589;
  float _595 = _RootShaderParameters_031x;
  float _596 = _RootShaderParameters_031y;
  float _597 = _RootShaderParameters_031z;
  float _598 = _RootShaderParameters_031w;
  float _599 = _477 * _595;
  float _600 = _478 * _596;
  float _601 = _479 * _597;
  float _602 = _480 * _598;
  float _604 = _RootShaderParameters_030x;
  float _605 = _RootShaderParameters_030y;
  float _606 = _RootShaderParameters_030z;
  float _607 = _RootShaderParameters_030w;
  float _608 = _491 * _604;
  float _609 = _492 * _605;
  float _610 = _493 * _606;
  float _611 = _494 * _607;
  float _612 = _608 * _611;
  float _613 = _609 * _611;
  float _614 = _610 * _611;
  float _615 = _612 * _502;
  float _616 = _613 * _503;
  float _617 = _614 * _504;
  float _618 = _615 + _428;
  float _619 = _616 + _428;
  float _620 = _617 + _428;
  float _621 = max(0.0f, _618);
  float _622 = max(0.0f, _619);
  float _623 = max(0.0f, _620);
  float _624 = _599 * _602;
  float _625 = _600 * _602;
  float _626 = _601 * _602;
  float _627 = _621 * 5.55555534362793f;
  float _628 = _622 * 5.55555534362793f;
  float _629 = _623 * 5.55555534362793f;
  float _630 = log2(_627);
  float _631 = log2(_628);
  float _632 = log2(_629);
  float _633 = _624 * _630;
  float _634 = _625 * _631;
  float _635 = _626 * _632;
  float _636 = exp2(_633);
  float _637 = exp2(_634);
  float _638 = exp2(_635);
  float _639 = _636 * 0.18000000715255737f;
  float _640 = _637 * 0.18000000715255737f;
  float _641 = _638 * 0.18000000715255737f;
  float _642 = _590 * _593;
  float _643 = _591 * _593;
  float _644 = _592 * _593;
  float _645 = 1.0f / _642;
  float _646 = 1.0f / _643;
  float _647 = 1.0f / _644;
  float _648 = log2(_639);
  float _649 = log2(_640);
  float _650 = log2(_641);
  float _651 = _648 * _645;
  float _652 = _649 * _646;
  float _653 = _650 * _647;
  float _654 = exp2(_651);
  float _655 = exp2(_652);
  float _656 = exp2(_653);
  float _657 = _581 * _584;
  float _658 = _582 * _584;
  float _659 = _583 * _584;
  float _660 = _657 * _654;
  float _661 = _658 * _655;
  float _662 = _659 * _656;
  float _663 = _572 + _575;
  float _664 = _573 + _575;
  float _665 = _574 + _575;
  float _666 = _663 + _660;
  float _667 = _664 + _661;
  float _668 = _665 + _662;
  float _669 = _RootShaderParameters_036x;
  float _671 = _RootShaderParameters_035w;
  float _672 = _669 - _671;
  float _673 = _428 - _671;
  float _674 = _673 / _672;
  float _675 = saturate(_674);
  float _676 = _675 * 2.0f;
  float _677 = 3.0f - _676;
  float _678 = _675 * _675;
  float _679 = _678 * _677;
  float _681 = _RootShaderParameters_029x;
  float _682 = _RootShaderParameters_029y;
  float _683 = _RootShaderParameters_029z;
  float _684 = _RootShaderParameters_029w;
  float _685 = _435 + _681;
  float _686 = _436 + _682;
  float _687 = _437 + _683;
  float _688 = _438 + _684;
  float _690 = _RootShaderParameters_028x;
  float _691 = _RootShaderParameters_028y;
  float _692 = _RootShaderParameters_028z;
  float _693 = _RootShaderParameters_028w;
  float _694 = _449 * _690;
  float _695 = _450 * _691;
  float _696 = _451 * _692;
  float _697 = _452 * _693;
  float _699 = _RootShaderParameters_027x;
  float _700 = _RootShaderParameters_027y;
  float _701 = _RootShaderParameters_027z;
  float _702 = _RootShaderParameters_027w;
  float _703 = _463 * _699;
  float _704 = _464 * _700;
  float _705 = _465 * _701;
  float _706 = _466 * _702;
  float _708 = _RootShaderParameters_026x;
  float _709 = _RootShaderParameters_026y;
  float _710 = _RootShaderParameters_026z;
  float _711 = _RootShaderParameters_026w;
  float _712 = _477 * _708;
  float _713 = _478 * _709;
  float _714 = _479 * _710;
  float _715 = _480 * _711;
  float _717 = _RootShaderParameters_025x;
  float _718 = _RootShaderParameters_025y;
  float _719 = _RootShaderParameters_025z;
  float _720 = _RootShaderParameters_025w;
  float _721 = _491 * _717;
  float _722 = _492 * _718;
  float _723 = _493 * _719;
  float _724 = _494 * _720;
  float _725 = _721 * _724;
  float _726 = _722 * _724;
  float _727 = _723 * _724;
  float _728 = _725 * _502;
  float _729 = _726 * _503;
  float _730 = _727 * _504;
  float _731 = _728 + _428;
  float _732 = _729 + _428;
  float _733 = _730 + _428;
  float _734 = max(0.0f, _731);
  float _735 = max(0.0f, _732);
  float _736 = max(0.0f, _733);
  float _737 = _712 * _715;
  float _738 = _713 * _715;
  float _739 = _714 * _715;
  float _740 = _734 * 5.55555534362793f;
  float _741 = _735 * 5.55555534362793f;
  float _742 = _736 * 5.55555534362793f;
  float _743 = log2(_740);
  float _744 = log2(_741);
  float _745 = log2(_742);
  float _746 = _737 * _743;
  float _747 = _738 * _744;
  float _748 = _739 * _745;
  float _749 = exp2(_746);
  float _750 = exp2(_747);
  float _751 = exp2(_748);
  float _752 = _749 * 0.18000000715255737f;
  float _753 = _750 * 0.18000000715255737f;
  float _754 = _751 * 0.18000000715255737f;
  float _755 = _703 * _706;
  float _756 = _704 * _706;
  float _757 = _705 * _706;
  float _758 = 1.0f / _755;
  float _759 = 1.0f / _756;
  float _760 = 1.0f / _757;
  float _761 = log2(_752);
  float _762 = log2(_753);
  float _763 = log2(_754);
  float _764 = _761 * _758;
  float _765 = _762 * _759;
  float _766 = _763 * _760;
  float _767 = exp2(_764);
  float _768 = exp2(_765);
  float _769 = exp2(_766);
  float _770 = _694 * _697;
  float _771 = _695 * _697;
  float _772 = _696 * _697;
  float _773 = _770 * _767;
  float _774 = _771 * _768;
  float _775 = _772 * _769;
  float _776 = _685 + _688;
  float _777 = _686 + _688;
  float _778 = _687 + _688;
  float _779 = _776 + _773;
  float _780 = _777 + _774;
  float _781 = _778 + _775;
  float _782 = _565 - _679;
  float _783 = _566 * _556;
  float _784 = _566 * _557;
  float _785 = _566 * _558;
  float _786 = _779 * _782;
  float _787 = _780 * _782;
  float _788 = _781 * _782;
  float _789 = _679 * _666;
  float _790 = _679 * _667;
  float _791 = _679 * _668;
  float _792 = _789 + _783;
  float _793 = _792 + _786;
  float _794 = _790 + _784;
  float _795 = _794 + _787;
  float _796 = _791 + _785;
  float _797 = _796 + _788;
  float _799 = UniformBufferConstants_WorkingColorSpace_012x;
  float _800 = UniformBufferConstants_WorkingColorSpace_012y;
  float _801 = UniformBufferConstants_WorkingColorSpace_012z;
  float _803 = UniformBufferConstants_WorkingColorSpace_013x;
  float _804 = UniformBufferConstants_WorkingColorSpace_013y;
  float _805 = UniformBufferConstants_WorkingColorSpace_013z;
  float _807 = UniformBufferConstants_WorkingColorSpace_014x;
  float _808 = UniformBufferConstants_WorkingColorSpace_014y;
  float _809 = UniformBufferConstants_WorkingColorSpace_014z;
  float _810 = _793 * _799;
  float _811 = mad(_800, _795, _810);
  float _812 = mad(_801, _797, _811);
  float _813 = _803 * _793;
  float _814 = mad(_804, _795, _813);
  float _815 = mad(_805, _797, _814);
  float _816 = _807 * _793;
  float _817 = mad(_808, _795, _816);
  float _818 = mad(_809, _797, _817);
  float _819 = _RootShaderParameters_036y;
  float _820 = _793 * 0.9386394023895264f;
  float _821 = mad(-4.540197551250458e-09f, _795, _820);
  float _822 = mad(0.061360642313957214f, _797, _821);
  float _823 = _793 * 6.775371730327606e-08f;
  float _824 = mad(0.8307942152023315f, _795, _823);
  float _825 = mad(0.169205904006958f, _797, _824);
  float _826 = _793 * -9.313225746154785e-10f;
  float _827 = mad(-2.3283064365386963e-10f, _795, _826);
  float _828 = _822 - _793;
  float _829 = _825 - _795;
  float _830 = _828 * _819;
  float _831 = _829 * _819;
  float _832 = _827 * _819;
  float _833 = _830 + _793;
  float _834 = _831 + _795;
  float _835 = _832 + _797;
  float3 ap1_graded_color = float3(_833, _834, _835);  // CustomEdit

  float _836 = _833 * 0.6954522132873535f;
  float _837 = mad(0.14067868888378143f, _834, _836);
  float _838 = mad(0.16386905312538147f, _835, _837);
  float _839 = _833 * 0.044794581830501556f;
  float _840 = mad(0.8596711158752441f, _834, _839);
  float _841 = mad(0.0955343246459961f, _835, _840);
  float _842 = _833 * -0.005525882821530104f;
  float _843 = mad(0.004025210160762072f, _834, _842);
  float _844 = mad(1.0015007257461548f, _835, _843);
  float _845 = min(_838, _841);
  float _846 = min(_845, _844);
  float _847 = max(_838, _841);
  float _848 = max(_847, _844);
  float _849 = max(_848, 1.000000013351432e-10f);
  float _850 = max(_846, 1.000000013351432e-10f);
  float _851 = _849 - _850;
  float _852 = max(_848, 0.009999999776482582f);
  float _853 = _851 / _852;
  float _854 = _844 - _841;
  float _855 = _854 * _844;
  float _856 = _841 - _838;
  float _857 = _856 * _841;
  float _858 = _855 + _857;
  float _859 = _838 - _844;
  float _860 = _859 * _838;
  float _861 = _858 + _860;
  float _862 = sqrt(_861);
  float _863 = _862 * 1.75f;
  float _864 = _841 + _838;
  float _865 = _864 + _844;
  float _866 = _865 + _863;
  float _867 = _866 * 0.3333333432674408f;
  float _868 = _853 + -0.4000000059604645f;
  float _869 = _868 * 5.0f;
  float _870 = _868 * 2.5f;
  float _871 = abs(_870);
  float _872 = 1.0f - _871;
  float _873 = max(_872, 0.0f);
  bool _874 = (_869 > 0.0f);
  bool _875 = (_869 < 0.0f);
  int _876 = int(_874);
  int _877 = int(_875);
  int _878 = _876 - _877;
  float _879 = float(_878);
  float _880 = _873 * _873;
  float _881 = 1.0f - _880;
  float _882 = _879 * _881;
  float _883 = _882 + 1.0f;
  float _884 = _883 * 0.02500000037252903f;
  bool _885 = !(_867 <= 0.0533333346247673f);
  _893 = _884;
  if (_885) {
    bool _887 = !(_867 >= 0.1599999964237213f);
    _893 = 0.0f;
    if (_887) {
      float _889 = 0.23999999463558197f / _866;
      float _890 = _889 + -0.5f;
      float _891 = _890 * _884;
      _893 = _891;
    }
  }
  float _894 = _893 + 1.0f;
  float _895 = _894 * _838;
  float _896 = _894 * _841;
  float _897 = _894 * _844;
  bool _898 = (_895 == _896);
  bool _899 = (_896 == _897);
  bool _900 = _898 && _899;
  _929 = 0.0f;
  if (!_900) {
    float _902 = _895 * 2.0f;
    float _903 = _902 - _896;
    float _904 = _903 - _897;
    float _905 = _841 - _844;
    float _906 = _905 * 1.7320507764816284f;
    float _907 = _906 * _894;
    float _908 = _907 / _904;
    float _909 = atan(_908);
    float _910 = _909 + 3.1415927410125732f;
    float _911 = _909 + -3.1415927410125732f;
    bool _912 = (_904 < 0.0f);
    bool _913 = (_904 == 0.0f);
    bool _914 = (_907 >= 0.0f);
    bool _915 = (_907 < 0.0f);
    bool _916 = _914 && _912;
    float _917 = _916 ? _910 : _909;
    bool _918 = _915 && _912;
    float _919 = _918 ? _911 : _917;
    bool _920 = _915 && _913;
    bool _921 = _914 && _913;
    float _922 = _919 * 57.2957763671875f;
    float _923 = _920 ? -90.0f : _922;
    float _924 = _921 ? 90.0f : _923;
    bool _925 = (_924 < 0.0f);
    _929 = _924;
    if (_925) {
      float _927 = _924 + 360.0f;
      _929 = _927;
    }
  }
  float _930 = max(_929, 0.0f);
  float _931 = min(_930, 360.0f);
  bool _932 = (_931 < -180.0f);
  if (_932) {
    float _934 = _931 + 360.0f;
    _940 = _934;
  } else {
    bool _936 = (_931 > 180.0f);
    _940 = _931;
    if (_936) {
      float _938 = _931 + -360.0f;
      _940 = _938;
    }
  }
  float _941 = _940 * 0.014814814552664757f;
  float _942 = abs(_941);
  float _943 = 1.0f - _942;
  float _944 = saturate(_943);
  float _945 = _944 * 2.0f;
  float _946 = 3.0f - _945;
  float _947 = _944 * _944;
  float _948 = _947 * _946;
  float _949 = 0.029999999329447746f - _895;
  float _950 = _853 * 0.18000000715255737f;
  float _951 = _950 * _949;
  float _952 = _948 * _948;
  float _953 = _952 * _951;
  float _954 = _953 + _895;
  float _955 = _954 * 1.4514392614364624f;
  float _956 = mad(-0.2365107536315918f, _896, _955);
  float _957 = mad(-0.21492856740951538f, _897, _956);
  float _958 = _954 * -0.07655377686023712f;
  float _959 = mad(1.17622971534729f, _896, _958);
  float _960 = mad(-0.09967592358589172f, _897, _959);
  float _961 = _954 * 0.008316148072481155f;
  float _962 = mad(-0.006032449658960104f, _896, _961);
  float _963 = mad(0.9977163076400757f, _897, _962);
  float _964 = max(0.0f, _957);
  float _965 = max(0.0f, _960);
  float _966 = max(0.0f, _963);
  float _967 = dot(float3(_964, _965, _966), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _968 = _964 - _967;
  float _969 = _965 - _967;
  float _970 = _966 - _967;
  float _971 = _968 * 0.9599999785423279f;
  float _972 = _969 * 0.9599999785423279f;
  float _973 = _970 * 0.9599999785423279f;
  float _974 = _971 + _967;
  float _975 = _972 + _967;
  float _976 = _973 + _967;

  float3 ap1_aces_colored = float3(_974, _975, _976);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _978 = _RootShaderParameters_037w;
  float _979 = _978 + 1.0f;
  float _980 = _RootShaderParameters_037y;
  float _981 = _979 - _980;
  float _983 = _RootShaderParameters_038x;
  float _984 = _983 + 1.0f;
  float _985 = _RootShaderParameters_037z;
  float _986 = _984 - _985;
  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _987 = (_980 > 0.800000011920929f);
    float _988 = _RootShaderParameters_037x;
    if (_987) {
      float _990 = 0.8199999928474426f - _980;
      float _991 = _990 / _988;
      float _992 = _991 + -0.7447274923324585f;
      _1004 = _992;
    } else {
      float _994 = _978 + 0.18000000715255737f;
      float _995 = _994 / _981;
      float _996 = 2.0f - _995;
      float _997 = _995 / _996;
      float _998 = log2(_997);
      float _999 = _998 * 0.3465735912322998f;
      float _1000 = _981 / _988;
      float _1001 = _999 * _1000;
      float _1002 = -0.7447274923324585f - _1001;
      _1004 = _1002;
    }
    float _1005 = 1.0f - _980;
    float _1006 = _1005 / _988;
    float _1007 = _1006 - _1004;
    float _1008 = _985 / _988;
    float _1009 = _1008 - _1007;
    float _1010 = log2(_974);
    float _1011 = log2(_975);
    float _1012 = log2(_976);
    float _1013 = _1010 * 0.3010300099849701f;
    float _1014 = _1011 * 0.3010300099849701f;
    float _1015 = _1012 * 0.3010300099849701f;
    float _1016 = _1013 + _1007;
    float _1017 = _1014 + _1007;
    float _1018 = _1015 + _1007;
    float _1019 = _988 * _1016;
    float _1020 = _988 * _1017;
    float _1021 = _988 * _1018;
    float _1022 = _981 * 2.0f;
    float _1023 = _988 * -2.0f;
    float _1024 = _1023 / _981;
    float _1025 = _1013 - _1004;
    float _1026 = _1014 - _1004;
    float _1027 = _1015 - _1004;
    float _1028 = _1025 * 1.4426950216293335f;
    float _1029 = _1028 * _1024;
    float _1030 = _1026 * 1.4426950216293335f;
    float _1031 = _1030 * _1024;
    float _1032 = _1027 * 1.4426950216293335f;
    float _1033 = _1032 * _1024;
    float _1034 = exp2(_1029);
    float _1035 = exp2(_1031);
    float _1036 = exp2(_1033);
    float _1037 = _1034 + 1.0f;
    float _1038 = _1035 + 1.0f;
    float _1039 = _1036 + 1.0f;
    float _1040 = _1022 / _1037;
    float _1041 = _1022 / _1038;
    float _1042 = _1022 / _1039;
    float _1043 = _1040 - _978;
    float _1044 = _1041 - _978;
    float _1045 = _1042 - _978;
    float _1046 = _986 * 2.0f;
    float _1047 = _988 * 2.0f;
    float _1048 = _1047 / _986;
    float _1049 = _1013 - _1009;
    float _1050 = _1014 - _1009;
    float _1051 = _1015 - _1009;
    float _1052 = _1049 * 1.4426950216293335f;
    float _1053 = _1052 * _1048;
    float _1054 = _1050 * 1.4426950216293335f;
    float _1055 = _1054 * _1048;
    float _1056 = _1051 * 1.4426950216293335f;
    float _1057 = _1056 * _1048;
    float _1058 = exp2(_1053);
    float _1059 = exp2(_1055);
    float _1060 = exp2(_1057);
    float _1061 = _1058 + 1.0f;
    float _1062 = _1059 + 1.0f;
    float _1063 = _1060 + 1.0f;
    float _1064 = _1046 / _1061;
    float _1065 = _1046 / _1062;
    float _1066 = _1046 / _1063;
    float _1067 = _984 - _1064;
    float _1068 = _984 - _1065;
    float _1069 = _984 - _1066;
    bool _1070 = (_1013 < _1004);
    bool _1071 = (_1014 < _1004);
    bool _1072 = (_1015 < _1004);
    float _1073 = _1070 ? _1043 : _1019;
    float _1074 = _1071 ? _1044 : _1020;
    float _1075 = _1072 ? _1045 : _1021;
    bool _1076 = (_1013 > _1009);
    bool _1077 = (_1014 > _1009);
    bool _1078 = (_1015 > _1009);
    float _1079 = _1076 ? _1067 : _1019;
    float _1080 = _1077 ? _1068 : _1020;
    float _1081 = _1078 ? _1069 : _1021;
    float _1082 = _1009 - _1004;
    float _1083 = _1025 / _1082;
    float _1084 = _1026 / _1082;
    float _1085 = _1027 / _1082;
    float _1086 = saturate(_1083);
    float _1087 = saturate(_1084);
    float _1088 = saturate(_1085);
    bool _1089 = (_1009 < _1004);
    float _1090 = 1.0f - _1086;
    float _1091 = 1.0f - _1087;
    float _1092 = 1.0f - _1088;
    float _1093 = _1089 ? _1090 : _1086;
    float _1094 = _1089 ? _1091 : _1087;
    float _1095 = _1089 ? _1092 : _1088;
    float _1096 = _1093 * 2.0f;
    float _1097 = _1094 * 2.0f;
    float _1098 = _1095 * 2.0f;
    float _1099 = 3.0f - _1096;
    float _1100 = 3.0f - _1097;
    float _1101 = 3.0f - _1098;
    float _1102 = _1079 - _1073;
    float _1103 = _1080 - _1074;
    float _1104 = _1081 - _1075;
    float _1105 = _1093 * _1093;
    float _1106 = _1105 * _1102;
    float _1107 = _1106 * _1099;
    float _1108 = _1094 * _1094;
    float _1109 = _1108 * _1103;
    float _1110 = _1109 * _1100;
    float _1111 = _1095 * _1095;
    float _1112 = _1111 * _1104;
    float _1113 = _1112 * _1101;
    float _1114 = _1107 + _1073;
    float _1115 = _1110 + _1074;
    float _1116 = _1113 + _1075;
    float _1117 = dot(float3(_1114, _1115, _1116), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _1118 = _1114 - _1117;
    float _1119 = _1115 - _1117;
    float _1120 = _1116 - _1117;
    float _1121 = _1118 * 0.9300000071525574f;
    float _1122 = _1119 * 0.9300000071525574f;
    float _1123 = _1120 * 0.9300000071525574f;
    float _1124 = _1121 + _1117;
    float _1125 = _1122 + _1117;
    float _1126 = _1123 + _1117;
    float _1127 = max(0.0f, _1124);
    float _1128 = max(0.0f, _1125);
    float _1129 = max(0.0f, _1126);
    sdr_ap1_color = float3(_1127, _1128, _1129);
    // end of FilmToneMap
  }

  float _1130 = _RootShaderParameters_036w;
  /* float _1131 = _1127 - _833;
  float _1132 = _1128 - _834;
  float _1133 = _1129 - _835; */
  float _1131 = sdr_ap1_color.r - _833;
  float _1132 = sdr_ap1_color.g - _834;
  float _1133 = sdr_ap1_color.b - _835;
  // CustomEdit

  float _1134 = _1130 * _1131;
  float _1135 = _1130 * _1132;
  float _1136 = _1130 * _1133;
  float _1137 = _1134 + _833;
  float _1138 = _1135 + _834;
  float _1139 = _1136 + _835;
  float _1140 = _1137 * 1.065374732017517f;
  float _1141 = mad(1.451815478503704e-06f, _1138, _1140);
  float _1142 = mad(-0.06537103652954102f, _1139, _1141);
  float _1143 = _1137 * -2.57161445915699e-07f;
  float _1144 = mad(1.2036634683609009f, _1138, _1143);
  float _1145 = mad(-0.20366770029067993f, _1139, _1144);
  float _1146 = _1137 * 1.862645149230957e-08f;
  float _1147 = mad(2.0954757928848267e-08f, _1138, _1146);
  float _1148 = mad(0.9999996423721313f, _1139, _1147);
  float _1149 = _1142 - _1137;
  float _1150 = _1145 - _1138;
  float _1151 = _1148 - _1139;
  float _1152 = _1149 * _819;
  float _1153 = _1150 * _819;
  float _1154 = _1151 * _819;
  float _1155 = _1152 + _1137;
  float _1156 = _1153 + _1138;
  float _1157 = _1154 + _1139;
  float _1158 = _799 * _1155;
  float _1159 = mad(_800, _1156, _1158);
  float _1160 = mad(_801, _1157, _1159);
  float _1161 = _803 * _1155;
  float _1162 = mad(_804, _1156, _1161);
  float _1163 = mad(_805, _1157, _1162);
  float _1164 = _807 * _1155;
  float _1165 = mad(_808, _1156, _1164);
  float _1166 = mad(_809, _1157, _1165);
  float _1167 = max(0.0f, _1160);
  float _1168 = max(0.0f, _1163);
  float _1169 = max(0.0f, _1166);
  float _1171 = _RootShaderParameters_039x;
  float _1172 = _1171 * _1167;
  float _1173 = _1171 * _1168;
  float _1174 = _1171 * _1169;
  float _1175 = _RootShaderParameters_039y;
  float _1176 = _RootShaderParameters_039z;
  float _1177 = _1175 + _1172;
  float _1178 = _1177 * _1167;
  float _1179 = _1178 + _1176;
  float _1180 = _1175 + _1173;
  float _1181 = _1180 * _1168;
  float _1182 = _1181 + _1176;
  float _1183 = _1175 + _1174;
  float _1184 = _1183 * _1169;
  float _1185 = _1184 + _1176;
  float _1187 = _RootShaderParameters_013w;
  float _1188 = _RootShaderParameters_013x;
  float _1189 = _RootShaderParameters_013y;
  float _1190 = _RootShaderParameters_013z;
  float _1192 = _RootShaderParameters_014x;
  float _1193 = _RootShaderParameters_014y;
  float _1194 = _RootShaderParameters_014z;
  float _1195 = _1192 * _1179;
  float _1196 = _1193 * _1182;
  float _1197 = _1194 * _1185;
  float _1198 = _1188 - _1195;
  float _1199 = _1189 - _1196;
  float _1200 = _1190 - _1197;
  float _1201 = _1198 * _1187;
  float _1202 = _1199 * _1187;
  float _1203 = _1200 * _1187;
  float _1204 = _1201 + _1195;
  float _1205 = _1202 + _1196;
  float _1206 = _1203 + _1197;
  float _1207 = _1192 * _812;
  float _1208 = _1193 * _815;
  float _1209 = _1194 * _818;
  float _1210 = _1188 - _1207;
  float _1211 = _1189 - _1208;
  float _1212 = _1190 - _1209;
  float _1213 = _1210 * _1187;
  float _1214 = _1211 * _1187;
  float _1215 = _1212 * _1187;
  float _1216 = _1213 + _1207;
  float _1217 = _1214 + _1208;
  float _1218 = _1215 + _1209;
  float _1220 = _RootShaderParameters_040y;
  float _1221 = max(0.0f, _1204);
  float _1222 = max(0.0f, _1205);
  float _1223 = max(0.0f, _1206);
  float _1224 = log2(_1221);
  float _1225 = log2(_1222);
  float _1226 = log2(_1223);
  float _1227 = _1224 * _1220;
  float _1228 = _1225 * _1220;
  float _1229 = _1226 * _1220;
  float _1230 = exp2(_1227);
  float _1231 = exp2(_1228);
  float _1232 = exp2(_1229);

  // CustomEdit
  float3 film_graded_color = float3(_1230, _1231, _1232);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_6, _7, _8)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _1234 = _RootShaderParameters_040w;
  bool _1235 = (_1234 == 0);
  if (_1235) {
    uint _1238 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1239 = (_1238 == 0);
    _1272 = _1230;
    _1273 = _1231;
    _1274 = _1232;
    do {
      if (_1239) {
        float _1242 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1243 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1244 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1246 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1247 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1248 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1250 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1251 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1252 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1253 = _1242 * _1230;
        float _1254 = mad(_1243, _1231, _1253);
        float _1255 = mad(_1244, _1232, _1254);
        float _1256 = _1246 * _1230;
        float _1257 = mad(_1247, _1231, _1256);
        float _1258 = mad(_1248, _1232, _1257);
        float _1259 = _1250 * _1230;
        float _1260 = mad(_1251, _1231, _1259);
        float _1261 = mad(_1252, _1232, _1260);
        float _1262 = _1255 * _47;
        float _1263 = mad(_48, _1258, _1262);
        float _1264 = mad(_49, _1261, _1263);
        float _1265 = _1255 * _50;
        float _1266 = mad(_51, _1258, _1265);
        float _1267 = mad(_52, _1261, _1266);
        float _1268 = _1255 * _53;
        float _1269 = mad(_54, _1258, _1268);
        float _1270 = mad(_55, _1261, _1269);
        _1272 = _1264;
        _1273 = _1267;
        _1274 = _1270;
      }
      bool _1275 = (_1272 < 0.0031306699384003878f);
      do {
        if (_1275) {
          float _1277 = _1272 * 12.920000076293945f;
          _1285 = _1277;
        } else {
          float _1279 = log2(_1272);
          float _1280 = _1279 * 0.4166666567325592f;
          float _1281 = exp2(_1280);
          float _1282 = _1281 * 1.0549999475479126f;
          float _1283 = _1282 + -0.054999999701976776f;
          _1285 = _1283;
        }
        bool _1286 = (_1273 < 0.0031306699384003878f);
        do {
          if (_1286) {
            float _1288 = _1273 * 12.920000076293945f;
            _1296 = _1288;
          } else {
            float _1290 = log2(_1273);
            float _1291 = _1290 * 0.4166666567325592f;
            float _1292 = exp2(_1291);
            float _1293 = _1292 * 1.0549999475479126f;
            float _1294 = _1293 + -0.054999999701976776f;
            _1296 = _1294;
          }
          bool _1297 = (_1274 < 0.0031306699384003878f);
          if (_1297) {
            float _1299 = _1274 * 12.920000076293945f;
            _2656 = _1285;
            _2657 = _1296;
            _2658 = _1299;
          } else {
            float _1301 = log2(_1274);
            float _1302 = _1301 * 0.4166666567325592f;
            float _1303 = exp2(_1302);
            float _1304 = _1303 * 1.0549999475479126f;
            float _1305 = _1304 + -0.054999999701976776f;
            _2656 = _1285;
            _2657 = _1296;
            _2658 = _1305;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1307 = (_1234 == 1);
    if (_1307) {
      float _1310 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1311 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1312 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1314 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1315 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1316 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1318 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1319 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1320 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1321 = _1310 * _1230;
      float _1322 = mad(_1311, _1231, _1321);
      float _1323 = mad(_1312, _1232, _1322);
      float _1324 = _1314 * _1230;
      float _1325 = mad(_1315, _1231, _1324);
      float _1326 = mad(_1316, _1232, _1325);
      float _1327 = _1318 * _1230;
      float _1328 = mad(_1319, _1231, _1327);
      float _1329 = mad(_1320, _1232, _1328);
      float _1330 = _1323 * _47;
      float _1331 = mad(_48, _1326, _1330);
      float _1332 = mad(_49, _1329, _1331);
      float _1333 = _1323 * _50;
      float _1334 = mad(_51, _1326, _1333);
      float _1335 = mad(_52, _1329, _1334);
      float _1336 = _1323 * _53;
      float _1337 = mad(_54, _1326, _1336);
      float _1338 = mad(_55, _1329, _1337);
      float _1339 = max(6.103519990574569e-05f, _1332);
      float _1340 = max(6.103519990574569e-05f, _1335);
      float _1341 = max(6.103519990574569e-05f, _1338);
      float _1342 = max(_1339, 0.017999999225139618f);
      float _1343 = max(_1340, 0.017999999225139618f);
      float _1344 = max(_1341, 0.017999999225139618f);
      float _1345 = log2(_1342);
      float _1346 = log2(_1343);
      float _1347 = log2(_1344);
      float _1348 = _1345 * 0.44999998807907104f;
      float _1349 = _1346 * 0.44999998807907104f;
      float _1350 = _1347 * 0.44999998807907104f;
      float _1351 = exp2(_1348);
      float _1352 = exp2(_1349);
      float _1353 = exp2(_1350);
      float _1354 = _1351 * 1.0989999771118164f;
      float _1355 = _1352 * 1.0989999771118164f;
      float _1356 = _1353 * 1.0989999771118164f;
      float _1357 = _1354 + -0.0989999994635582f;
      float _1358 = _1355 + -0.0989999994635582f;
      float _1359 = _1356 + -0.0989999994635582f;
      float _1360 = _1339 * 4.5f;
      float _1361 = _1340 * 4.5f;
      float _1362 = _1341 * 4.5f;
      float _1363 = min(_1360, _1357);
      float _1364 = min(_1361, _1358);
      float _1365 = min(_1362, _1359);
      _2656 = _1363;
      _2657 = _1364;
      _2658 = _1365;
    } else {
      bool _1367 = (_1234 == 3);
      bool _1368 = (_1234 == 5);
      bool _1369 = _1367 || _1368;
      if (_1369) {
        //   %1371 = bitcast [6 x float]* %11 to i8*
        //   %1372 = bitcast [6 x float]* %12 to i8*
        float _1374 = _RootShaderParameters_012z;
        float _1375 = _RootShaderParameters_012y;
        float _1376 = _RootShaderParameters_012x;
        float _1378 = _RootShaderParameters_011x;
        float _1379 = _RootShaderParameters_011y;
        float _1380 = _RootShaderParameters_011z;
        float _1381 = _RootShaderParameters_011w;
        float _1383 = _RootShaderParameters_010x;
        float _1384 = _RootShaderParameters_010y;
        float _1385 = _RootShaderParameters_010z;
        float _1386 = _RootShaderParameters_010w;
        float _1388 = _RootShaderParameters_009x;
        float _1390 = _RootShaderParameters_008x;
        float _1391 = _RootShaderParameters_008y;
        float _1392 = _RootShaderParameters_008z;
        float _1393 = _RootShaderParameters_008w;
        _11[0] = _1383;
        _11[1] = _1384;
        _11[2] = _1385;
        _11[3] = _1386;
        _11[4] = _1376;
        _11[5] = _1376;
        _12[0] = _1378;
        _12[1] = _1379;
        _12[2] = _1380;
        _12[3] = _1381;
        _12[4] = _1375;
        _12[5] = _1375;
        float _1407 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1408 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1409 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1411 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1412 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1413 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1415 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1416 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1417 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1418 = _1374 * _1216;
        float _1419 = _1374 * _1217;
        float _1420 = _1374 * _1218;
        float _1421 = _1407 * _1418;
        float _1422 = mad(_1408, _1419, _1421);
        float _1423 = mad(_1409, _1420, _1422);
        float _1424 = _1411 * _1418;
        float _1425 = mad(_1412, _1419, _1424);
        float _1426 = mad(_1413, _1420, _1425);
        float _1427 = _1415 * _1418;
        float _1428 = mad(_1416, _1419, _1427);
        float _1429 = mad(_1417, _1420, _1428);
        float _1430 = min(_1423, _1426);
        float _1431 = min(_1430, _1429);
        float _1432 = max(_1423, _1426);
        float _1433 = max(_1432, _1429);
        float _1434 = max(_1433, 1.000000013351432e-10f);
        float _1435 = max(_1431, 1.000000013351432e-10f);
        float _1436 = _1434 - _1435;
        float _1437 = max(_1433, 0.009999999776482582f);
        float _1438 = _1436 / _1437;
        float _1439 = _1429 - _1426;
        float _1440 = _1439 * _1429;
        float _1441 = _1426 - _1423;
        float _1442 = _1441 * _1426;
        float _1443 = _1440 + _1442;
        float _1444 = _1423 - _1429;
        float _1445 = _1444 * _1423;
        float _1446 = _1443 + _1445;
        float _1447 = sqrt(_1446);
        float _1448 = _1447 * 1.75f;
        float _1449 = _1426 + _1423;
        float _1450 = _1449 + _1429;
        float _1451 = _1450 + _1448;
        float _1452 = _1451 * 0.3333333432674408f;
        float _1453 = _1438 + -0.4000000059604645f;
        float _1454 = _1453 * 5.0f;
        float _1455 = _1453 * 2.5f;
        float _1456 = abs(_1455);
        float _1457 = 1.0f - _1456;
        float _1458 = max(_1457, 0.0f);
        bool _1459 = (_1454 > 0.0f);
        bool _1460 = (_1454 < 0.0f);
        int _1461 = int(_1459);
        int _1462 = int(_1460);
        int _1463 = _1461 - _1462;
        float _1464 = float(_1463);
        float _1465 = _1458 * _1458;
        float _1466 = 1.0f - _1465;
        float _1467 = _1464 * _1466;
        float _1468 = _1467 + 1.0f;
        float _1469 = _1468 * 0.02500000037252903f;
        bool _1470 = !(_1452 <= 0.0533333346247673f);
        _1478 = _1469;
        do {
          if (_1470) {
            bool _1472 = !(_1452 >= 0.1599999964237213f);
            _1478 = 0.0f;
            if (_1472) {
              float _1474 = 0.23999999463558197f / _1451;
              float _1475 = _1474 + -0.5f;
              float _1476 = _1475 * _1469;
              _1478 = _1476;
            }
          }
          float _1479 = _1478 + 1.0f;
          float _1480 = _1479 * _1423;
          float _1481 = _1479 * _1426;
          float _1482 = _1479 * _1429;
          bool _1483 = (_1480 == _1481);
          bool _1484 = (_1481 == _1482);
          bool _1485 = _1483 && _1484;
          _1514 = 0.0f;
          do {
            if (!_1485) {
              float _1487 = _1480 * 2.0f;
              float _1488 = _1487 - _1481;
              float _1489 = _1488 - _1482;
              float _1490 = _1426 - _1429;
              float _1491 = _1490 * 1.7320507764816284f;
              float _1492 = _1491 * _1479;
              float _1493 = _1492 / _1489;
              float _1494 = atan(_1493);
              float _1495 = _1494 + 3.1415927410125732f;
              float _1496 = _1494 + -3.1415927410125732f;
              bool _1497 = (_1489 < 0.0f);
              bool _1498 = (_1489 == 0.0f);
              bool _1499 = (_1492 >= 0.0f);
              bool _1500 = (_1492 < 0.0f);
              bool _1501 = _1499 && _1497;
              float _1502 = _1501 ? _1495 : _1494;
              bool _1503 = _1500 && _1497;
              float _1504 = _1503 ? _1496 : _1502;
              bool _1505 = _1500 && _1498;
              bool _1506 = _1499 && _1498;
              float _1507 = _1504 * 57.2957763671875f;
              float _1508 = _1505 ? -90.0f : _1507;
              float _1509 = _1506 ? 90.0f : _1508;
              bool _1510 = (_1509 < 0.0f);
              _1514 = _1509;
              if (_1510) {
                float _1512 = _1509 + 360.0f;
                _1514 = _1512;
              }
            }
            float _1515 = max(_1514, 0.0f);
            float _1516 = min(_1515, 360.0f);
            bool _1517 = (_1516 < -180.0f);
            do {
              if (_1517) {
                float _1519 = _1516 + 360.0f;
                _1525 = _1519;
              } else {
                bool _1521 = (_1516 > 180.0f);
                _1525 = _1516;
                if (_1521) {
                  float _1523 = _1516 + -360.0f;
                  _1525 = _1523;
                }
              }
              bool _1526 = (_1525 > -67.5f);
              bool _1527 = (_1525 < 67.5f);
              bool _1528 = _1526 && _1527;
              _1564 = 0.0f;
              do {
                if (_1528) {
                  float _1530 = _1525 + 67.5f;
                  float _1531 = _1530 * 0.029629629105329514f;
                  int _1532 = int(_1531);
                  float _1533 = float(_1532);
                  float _1534 = _1531 - _1533;
                  float _1535 = _1534 * _1534;
                  float _1536 = _1535 * _1534;
                  bool _1537 = (_1532 == 3);
                  if (_1537) {
                    float _1539 = _1536 * 0.1666666716337204f;
                    float _1540 = _1535 * 0.5f;
                    float _1541 = _1534 * 0.5f;
                    float _1542 = 0.1666666716337204f - _1541;
                    float _1543 = _1542 + _1540;
                    float _1544 = _1543 - _1539;
                    _1564 = _1544;
                  } else {
                    bool _1546 = (_1532 == 2);
                    if (_1546) {
                      float _1548 = _1536 * 0.5f;
                      float _1549 = 0.6666666865348816f - _1535;
                      float _1550 = _1549 + _1548;
                      _1564 = _1550;
                    } else {
                      bool _1552 = (_1532 == 1);
                      if (_1552) {
                        float _1554 = _1536 * -0.5f;
                        float _1555 = _1535 + _1534;
                        float _1556 = _1555 * 0.5f;
                        float _1557 = _1554 + 0.1666666716337204f;
                        float _1558 = _1557 + _1556;
                        _1564 = _1558;
                      } else {
                        bool _1560 = (_1532 == 0);
                        float _1561 = _1536 * 0.1666666716337204f;
                        float _1562 = _1560 ? _1561 : 0.0f;
                        _1564 = _1562;
                      }
                    }
                  }
                }
                float _1565 = 0.029999999329447746f - _1480;
                float _1566 = _1438 * 0.27000001072883606f;
                float _1567 = _1566 * _1565;
                float _1568 = _1567 * _1564;
                float _1569 = _1568 + _1480;
                float _1570 = max(_1569, 0.0f);
                float _1571 = max(_1481, 0.0f);
                float _1572 = max(_1482, 0.0f);
                float _1573 = min(_1570, 65535.0f);
                float _1574 = min(_1571, 65535.0f);
                float _1575 = min(_1572, 65535.0f);
                float _1576 = _1573 * 1.4514392614364624f;
                float _1577 = mad(-0.2365107536315918f, _1574, _1576);
                float _1578 = mad(-0.21492856740951538f, _1575, _1577);
                float _1579 = _1573 * -0.07655377686023712f;
                float _1580 = mad(1.17622971534729f, _1574, _1579);
                float _1581 = mad(-0.09967592358589172f, _1575, _1580);
                float _1582 = _1573 * 0.008316148072481155f;
                float _1583 = mad(-0.006032449658960104f, _1574, _1582);
                float _1584 = mad(0.9977163076400757f, _1575, _1583);
                float _1585 = max(_1578, 0.0f);
                float _1586 = max(_1581, 0.0f);
                float _1587 = max(_1584, 0.0f);
                float _1588 = min(_1585, 65504.0f);
                float _1589 = min(_1586, 65504.0f);
                float _1590 = min(_1587, 65504.0f);
                float _1591 = dot(float3(_1588, _1589, _1590), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1592 = _1588 - _1591;
                float _1593 = _1589 - _1591;
                float _1594 = _1590 - _1591;
                float _1595 = _1592 * 0.9599999785423279f;
                float _1596 = _1593 * 0.9599999785423279f;
                float _1597 = _1594 * 0.9599999785423279f;
                float _1598 = _1595 + _1591;
                float _1599 = _1596 + _1591;
                float _1600 = _1597 + _1591;
                float _1601 = max(_1598, 1.000000013351432e-10f);
                float _1602 = log2(_1601);
                float _1603 = _1602 * 0.3010300099849701f;
                float _1604 = log2(_1390);
                float _1605 = _1604 * 0.3010300099849701f;
                bool _1606 = !(_1603 <= _1605);
                do {
                  if (!_1606) {
                    float _1608 = log2(_1391);
                    float _1609 = _1608 * 0.3010300099849701f;
                    _1674 = _1609;
                  } else {
                    bool _1611 = (_1603 > _1605);
                    float _1612 = log2(_1388);
                    float _1613 = _1612 * 0.3010300099849701f;
                    bool _1614 = (_1603 < _1613);
                    bool _1615 = _1611 && _1614;
                    if (_1615) {
                      float _1617 = _1602 - _1604;
                      float _1618 = _1617 * 0.9030900001525879f;
                      float _1619 = _1612 - _1604;
                      float _1620 = _1619 * 0.3010300099849701f;
                      float _1621 = _1618 / _1620;
                      int _1622 = int(_1621);
                      float _1623 = float(_1622);
                      float _1624 = _1621 - _1623;
                      float _1626 = _11[_1622];
                      int _1627 = _1622 + 1;
                      float _1629 = _11[_1627];
                      int _1630 = _1622 + 2;
                      float _1632 = _11[_1630];
                      float _1633 = _1624 * _1624;
                      float _1634 = _1626 * 0.5f;
                      float _1635 = mad(_1629, -1.0f, _1634);
                      float _1636 = mad(_1632, 0.5f, _1635);
                      float _1637 = _1629 - _1626;
                      float _1638 = mad(_1629, 0.5f, _1634);
                      float _1639 = dot(float3(_1633, _1624, 1.0f), float3(_1636, _1637, _1638));
                      _1674 = _1639;
                    } else {
                      bool _1641 = !(_1603 >= _1613);
                      do {
                        if (!_1641) {
                          float _1643 = log2(_1392);
                          float _1644 = _1643 * 0.3010300099849701f;
                          bool _1645 = (_1603 < _1644);
                          if (_1645) {
                            float _1647 = _1602 - _1612;
                            float _1648 = _1647 * 0.9030900001525879f;
                            float _1649 = _1643 - _1612;
                            float _1650 = _1649 * 0.3010300099849701f;
                            float _1651 = _1648 / _1650;
                            int _1652 = int(_1651);
                            float _1653 = float(_1652);
                            float _1654 = _1651 - _1653;
                            float _1656 = _12[_1652];
                            int _1657 = _1652 + 1;
                            float _1659 = _12[_1657];
                            int _1660 = _1652 + 2;
                            float _1662 = _12[_1660];
                            float _1663 = _1654 * _1654;
                            float _1664 = _1656 * 0.5f;
                            float _1665 = mad(_1659, -1.0f, _1664);
                            float _1666 = mad(_1662, 0.5f, _1665);
                            float _1667 = _1659 - _1656;
                            float _1668 = mad(_1659, 0.5f, _1664);
                            float _1669 = dot(float3(_1663, _1654, 1.0f), float3(_1666, _1667, _1668));
                            _1674 = _1669;
                            break;
                          }
                        }
                        float _1671 = log2(_1393);
                        float _1672 = _1671 * 0.3010300099849701f;
                        _1674 = _1672;
                      } while (false);
                    }
                  }
                  float _1675 = _1674 * 3.321928024291992f;
                  float _1676 = exp2(_1675);
                  float _1677 = max(_1599, 1.000000013351432e-10f);
                  float _1678 = log2(_1677);
                  float _1679 = _1678 * 0.3010300099849701f;
                  bool _1680 = !(_1679 <= _1605);
                  do {
                    if (!_1680) {
                      float _1682 = log2(_1391);
                      float _1683 = _1682 * 0.3010300099849701f;
                      _1748 = _1683;
                    } else {
                      bool _1685 = (_1679 > _1605);
                      float _1686 = log2(_1388);
                      float _1687 = _1686 * 0.3010300099849701f;
                      bool _1688 = (_1679 < _1687);
                      bool _1689 = _1685 && _1688;
                      if (_1689) {
                        float _1691 = _1678 - _1604;
                        float _1692 = _1691 * 0.9030900001525879f;
                        float _1693 = _1686 - _1604;
                        float _1694 = _1693 * 0.3010300099849701f;
                        float _1695 = _1692 / _1694;
                        int _1696 = int(_1695);
                        float _1697 = float(_1696);
                        float _1698 = _1695 - _1697;
                        float _1700 = _11[_1696];
                        int _1701 = _1696 + 1;
                        float _1703 = _11[_1701];
                        int _1704 = _1696 + 2;
                        float _1706 = _11[_1704];
                        float _1707 = _1698 * _1698;
                        float _1708 = _1700 * 0.5f;
                        float _1709 = mad(_1703, -1.0f, _1708);
                        float _1710 = mad(_1706, 0.5f, _1709);
                        float _1711 = _1703 - _1700;
                        float _1712 = mad(_1703, 0.5f, _1708);
                        float _1713 = dot(float3(_1707, _1698, 1.0f), float3(_1710, _1711, _1712));
                        _1748 = _1713;
                      } else {
                        bool _1715 = !(_1679 >= _1687);
                        do {
                          if (!_1715) {
                            float _1717 = log2(_1392);
                            float _1718 = _1717 * 0.3010300099849701f;
                            bool _1719 = (_1679 < _1718);
                            if (_1719) {
                              float _1721 = _1678 - _1686;
                              float _1722 = _1721 * 0.9030900001525879f;
                              float _1723 = _1717 - _1686;
                              float _1724 = _1723 * 0.3010300099849701f;
                              float _1725 = _1722 / _1724;
                              int _1726 = int(_1725);
                              float _1727 = float(_1726);
                              float _1728 = _1725 - _1727;
                              float _1730 = _12[_1726];
                              int _1731 = _1726 + 1;
                              float _1733 = _12[_1731];
                              int _1734 = _1726 + 2;
                              float _1736 = _12[_1734];
                              float _1737 = _1728 * _1728;
                              float _1738 = _1730 * 0.5f;
                              float _1739 = mad(_1733, -1.0f, _1738);
                              float _1740 = mad(_1736, 0.5f, _1739);
                              float _1741 = _1733 - _1730;
                              float _1742 = mad(_1733, 0.5f, _1738);
                              float _1743 = dot(float3(_1737, _1728, 1.0f), float3(_1740, _1741, _1742));
                              _1748 = _1743;
                              break;
                            }
                          }
                          float _1745 = log2(_1393);
                          float _1746 = _1745 * 0.3010300099849701f;
                          _1748 = _1746;
                        } while (false);
                      }
                    }
                    float _1749 = _1748 * 3.321928024291992f;
                    float _1750 = exp2(_1749);
                    float _1751 = max(_1600, 1.000000013351432e-10f);
                    float _1752 = log2(_1751);
                    float _1753 = _1752 * 0.3010300099849701f;
                    bool _1754 = !(_1753 <= _1605);
                    do {
                      if (!_1754) {
                        float _1756 = log2(_1391);
                        float _1757 = _1756 * 0.3010300099849701f;
                        _1822 = _1757;
                      } else {
                        bool _1759 = (_1753 > _1605);
                        float _1760 = log2(_1388);
                        float _1761 = _1760 * 0.3010300099849701f;
                        bool _1762 = (_1753 < _1761);
                        bool _1763 = _1759 && _1762;
                        if (_1763) {
                          float _1765 = _1752 - _1604;
                          float _1766 = _1765 * 0.9030900001525879f;
                          float _1767 = _1760 - _1604;
                          float _1768 = _1767 * 0.3010300099849701f;
                          float _1769 = _1766 / _1768;
                          int _1770 = int(_1769);
                          float _1771 = float(_1770);
                          float _1772 = _1769 - _1771;
                          float _1774 = _11[_1770];
                          int _1775 = _1770 + 1;
                          float _1777 = _11[_1775];
                          int _1778 = _1770 + 2;
                          float _1780 = _11[_1778];
                          float _1781 = _1772 * _1772;
                          float _1782 = _1774 * 0.5f;
                          float _1783 = mad(_1777, -1.0f, _1782);
                          float _1784 = mad(_1780, 0.5f, _1783);
                          float _1785 = _1777 - _1774;
                          float _1786 = mad(_1777, 0.5f, _1782);
                          float _1787 = dot(float3(_1781, _1772, 1.0f), float3(_1784, _1785, _1786));
                          _1822 = _1787;
                        } else {
                          bool _1789 = !(_1753 >= _1761);
                          do {
                            if (!_1789) {
                              float _1791 = log2(_1392);
                              float _1792 = _1791 * 0.3010300099849701f;
                              bool _1793 = (_1753 < _1792);
                              if (_1793) {
                                float _1795 = _1752 - _1760;
                                float _1796 = _1795 * 0.9030900001525879f;
                                float _1797 = _1791 - _1760;
                                float _1798 = _1797 * 0.3010300099849701f;
                                float _1799 = _1796 / _1798;
                                int _1800 = int(_1799);
                                float _1801 = float(_1800);
                                float _1802 = _1799 - _1801;
                                float _1804 = _12[_1800];
                                int _1805 = _1800 + 1;
                                float _1807 = _12[_1805];
                                int _1808 = _1800 + 2;
                                float _1810 = _12[_1808];
                                float _1811 = _1802 * _1802;
                                float _1812 = _1804 * 0.5f;
                                float _1813 = mad(_1807, -1.0f, _1812);
                                float _1814 = mad(_1810, 0.5f, _1813);
                                float _1815 = _1807 - _1804;
                                float _1816 = mad(_1807, 0.5f, _1812);
                                float _1817 = dot(float3(_1811, _1802, 1.0f), float3(_1814, _1815, _1816));
                                _1822 = _1817;
                                break;
                              }
                            }
                            float _1819 = log2(_1393);
                            float _1820 = _1819 * 0.3010300099849701f;
                            _1822 = _1820;
                          } while (false);
                        }
                      }
                      float _1823 = _1822 * 3.321928024291992f;
                      float _1824 = exp2(_1823);
                      float _1825 = _1676 - _1391;
                      float _1826 = _1393 - _1391;
                      float _1827 = _1825 / _1826;
                      float _1828 = _1750 - _1391;
                      float _1829 = _1828 / _1826;
                      float _1830 = _1824 - _1391;
                      float _1831 = _1830 / _1826;
                      float _1832 = _1827 * 0.6624541878700256f;
                      float _1833 = mad(0.13400420546531677f, _1829, _1832);
                      float _1834 = mad(0.15618768334388733f, _1831, _1833);
                      float _1835 = _1827 * 0.2722287178039551f;
                      float _1836 = mad(0.6740817427635193f, _1829, _1835);
                      float _1837 = mad(0.053689517080783844f, _1831, _1836);
                      float _1838 = _1827 * -0.005574649665504694f;
                      float _1839 = mad(0.00406073359772563f, _1829, _1838);
                      float _1840 = mad(1.0103391408920288f, _1831, _1839);
                      float _1841 = _1834 * 1.6410233974456787f;
                      float _1842 = mad(-0.32480329275131226f, _1837, _1841);
                      float _1843 = mad(-0.23642469942569733f, _1840, _1842);
                      float _1844 = _1834 * -0.663662850856781f;
                      float _1845 = mad(1.6153316497802734f, _1837, _1844);
                      float _1846 = mad(0.016756348311901093f, _1840, _1845);
                      float _1847 = _1834 * 0.011721894145011902f;
                      float _1848 = mad(-0.008284442126750946f, _1837, _1847);
                      float _1849 = mad(0.9883948564529419f, _1840, _1848);
                      float _1850 = max(_1843, 0.0f);
                      float _1851 = max(_1846, 0.0f);
                      float _1852 = max(_1849, 0.0f);
                      float _1853 = min(_1850, 1.0f);
                      float _1854 = min(_1851, 1.0f);
                      float _1855 = min(_1852, 1.0f);
                      float _1856 = _1853 * 0.6624541878700256f;
                      float _1857 = mad(0.13400420546531677f, _1854, _1856);
                      float _1858 = mad(0.15618768334388733f, _1855, _1857);
                      float _1859 = _1853 * 0.2722287178039551f;
                      float _1860 = mad(0.6740817427635193f, _1854, _1859);
                      float _1861 = mad(0.053689517080783844f, _1855, _1860);
                      float _1862 = _1853 * -0.005574649665504694f;
                      float _1863 = mad(0.00406073359772563f, _1854, _1862);
                      float _1864 = mad(1.0103391408920288f, _1855, _1863);
                      float _1865 = _1858 * 1.6410233974456787f;
                      float _1866 = mad(-0.32480329275131226f, _1861, _1865);
                      float _1867 = mad(-0.23642469942569733f, _1864, _1866);
                      float _1868 = _1858 * -0.663662850856781f;
                      float _1869 = mad(1.6153316497802734f, _1861, _1868);
                      float _1870 = mad(0.016756348311901093f, _1864, _1869);
                      float _1871 = _1858 * 0.011721894145011902f;
                      float _1872 = mad(-0.008284442126750946f, _1861, _1871);
                      float _1873 = mad(0.9883948564529419f, _1864, _1872);
                      float _1874 = max(_1867, 0.0f);
                      float _1875 = max(_1870, 0.0f);
                      float _1876 = max(_1873, 0.0f);
                      float _1877 = min(_1874, 65535.0f);
                      float _1878 = min(_1875, 65535.0f);
                      float _1879 = min(_1876, 65535.0f);
                      float _1880 = _1877 * _1393;
                      float _1881 = _1878 * _1393;
                      float _1882 = _1879 * _1393;
                      float _1883 = max(_1880, 0.0f);
                      float _1884 = max(_1881, 0.0f);
                      float _1885 = max(_1882, 0.0f);
                      float _1886 = min(_1883, 65535.0f);
                      float _1887 = min(_1884, 65535.0f);
                      float _1888 = min(_1885, 65535.0f);
                      bool _1889 = (_1234 == 5);
                      _1901 = _1886;
                      _1902 = _1887;
                      _1903 = _1888;
                      do {
                        if (!_1889) {
                          float _1891 = _1886 * _47;
                          float _1892 = mad(_48, _1887, _1891);
                          float _1893 = mad(_49, _1888, _1892);
                          float _1894 = _1886 * _50;
                          float _1895 = mad(_51, _1887, _1894);
                          float _1896 = mad(_52, _1888, _1895);
                          float _1897 = _1886 * _53;
                          float _1898 = mad(_54, _1887, _1897);
                          float _1899 = mad(_55, _1888, _1898);
                          _1901 = _1893;
                          _1902 = _1896;
                          _1903 = _1899;
                        }
                        float _1904 = _1901 * 9.999999747378752e-05f;
                        float _1905 = _1902 * 9.999999747378752e-05f;
                        float _1906 = _1903 * 9.999999747378752e-05f;
                        float _1907 = log2(_1904);
                        float _1908 = log2(_1905);
                        float _1909 = log2(_1906);
                        float _1910 = _1907 * 0.1593017578125f;
                        float _1911 = _1908 * 0.1593017578125f;
                        float _1912 = _1909 * 0.1593017578125f;
                        float _1913 = exp2(_1910);
                        float _1914 = exp2(_1911);
                        float _1915 = exp2(_1912);
                        float _1916 = _1913 * 18.8515625f;
                        float _1917 = _1914 * 18.8515625f;
                        float _1918 = _1915 * 18.8515625f;
                        float _1919 = _1916 + 0.8359375f;
                        float _1920 = _1917 + 0.8359375f;
                        float _1921 = _1918 + 0.8359375f;
                        float _1922 = _1913 * 18.6875f;
                        float _1923 = _1914 * 18.6875f;
                        float _1924 = _1915 * 18.6875f;
                        float _1925 = _1922 + 1.0f;
                        float _1926 = _1923 + 1.0f;
                        float _1927 = _1924 + 1.0f;
                        float _1928 = 1.0f / _1925;
                        float _1929 = 1.0f / _1926;
                        float _1930 = 1.0f / _1927;
                        float _1931 = _1928 * _1919;
                        float _1932 = _1929 * _1920;
                        float _1933 = _1930 * _1921;
                        float _1934 = log2(_1931);
                        float _1935 = log2(_1932);
                        float _1936 = log2(_1933);
                        float _1937 = _1934 * 78.84375f;
                        float _1938 = _1935 * 78.84375f;
                        float _1939 = _1936 * 78.84375f;
                        float _1940 = exp2(_1937);
                        float _1941 = exp2(_1938);
                        float _1942 = exp2(_1939);
                        _2656 = _1940;
                        _2657 = _1941;
                        _2658 = _1942;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _1944 = _1234 & -3;
        bool _1945 = (_1944 == 4);
        if (_1945) {
          //   %1947 = bitcast [6 x float]* %9 to i8*
          //   %1948 = bitcast [6 x float]* %10 to i8*
          float _1950 = _RootShaderParameters_012z;
          float _1951 = _RootShaderParameters_012y;
          float _1952 = _RootShaderParameters_012x;
          float _1954 = _RootShaderParameters_011x;
          float _1955 = _RootShaderParameters_011y;
          float _1956 = _RootShaderParameters_011z;
          float _1957 = _RootShaderParameters_011w;
          float _1959 = _RootShaderParameters_010x;
          float _1960 = _RootShaderParameters_010y;
          float _1961 = _RootShaderParameters_010z;
          float _1962 = _RootShaderParameters_010w;
          float _1964 = _RootShaderParameters_009x;
          float _1966 = _RootShaderParameters_008x;
          float _1967 = _RootShaderParameters_008y;
          float _1968 = _RootShaderParameters_008z;
          float _1969 = _RootShaderParameters_008w;
          _9[0] = _1959;
          _9[1] = _1960;
          _9[2] = _1961;
          _9[3] = _1962;
          _9[4] = _1952;
          _9[5] = _1952;
          _10[0] = _1954;
          _10[1] = _1955;
          _10[2] = _1956;
          _10[3] = _1957;
          _10[4] = _1951;
          _10[5] = _1951;
          float _1983 = UniformBufferConstants_WorkingColorSpace_016x;
          float _1984 = UniformBufferConstants_WorkingColorSpace_016y;
          float _1985 = UniformBufferConstants_WorkingColorSpace_016z;
          float _1987 = UniformBufferConstants_WorkingColorSpace_017x;
          float _1988 = UniformBufferConstants_WorkingColorSpace_017y;
          float _1989 = UniformBufferConstants_WorkingColorSpace_017z;
          float _1991 = UniformBufferConstants_WorkingColorSpace_018x;
          float _1992 = UniformBufferConstants_WorkingColorSpace_018y;
          float _1993 = UniformBufferConstants_WorkingColorSpace_018z;
          float _1994 = _1950 * _1216;
          float _1995 = _1950 * _1217;
          float _1996 = _1950 * _1218;
          float _1997 = _1983 * _1994;
          float _1998 = mad(_1984, _1995, _1997);
          float _1999 = mad(_1985, _1996, _1998);
          float _2000 = _1987 * _1994;
          float _2001 = mad(_1988, _1995, _2000);
          float _2002 = mad(_1989, _1996, _2001);
          float _2003 = _1991 * _1994;
          float _2004 = mad(_1992, _1995, _2003);
          float _2005 = mad(_1993, _1996, _2004);
          float _2006 = min(_1999, _2002);
          float _2007 = min(_2006, _2005);
          float _2008 = max(_1999, _2002);
          float _2009 = max(_2008, _2005);
          float _2010 = max(_2009, 1.000000013351432e-10f);
          float _2011 = max(_2007, 1.000000013351432e-10f);
          float _2012 = _2010 - _2011;
          float _2013 = max(_2009, 0.009999999776482582f);
          float _2014 = _2012 / _2013;
          float _2015 = _2005 - _2002;
          float _2016 = _2015 * _2005;
          float _2017 = _2002 - _1999;
          float _2018 = _2017 * _2002;
          float _2019 = _2016 + _2018;
          float _2020 = _1999 - _2005;
          float _2021 = _2020 * _1999;
          float _2022 = _2019 + _2021;
          float _2023 = sqrt(_2022);
          float _2024 = _2023 * 1.75f;
          float _2025 = _2002 + _1999;
          float _2026 = _2025 + _2005;
          float _2027 = _2026 + _2024;
          float _2028 = _2027 * 0.3333333432674408f;
          float _2029 = _2014 + -0.4000000059604645f;
          float _2030 = _2029 * 5.0f;
          float _2031 = _2029 * 2.5f;
          float _2032 = abs(_2031);
          float _2033 = 1.0f - _2032;
          float _2034 = max(_2033, 0.0f);
          bool _2035 = (_2030 > 0.0f);
          bool _2036 = (_2030 < 0.0f);
          int _2037 = int(_2035);
          int _2038 = int(_2036);
          int _2039 = _2037 - _2038;
          float _2040 = float(_2039);
          float _2041 = _2034 * _2034;
          float _2042 = 1.0f - _2041;
          float _2043 = _2040 * _2042;
          float _2044 = _2043 + 1.0f;
          float _2045 = _2044 * 0.02500000037252903f;
          bool _2046 = !(_2028 <= 0.0533333346247673f);
          _2054 = _2045;
          do {
            if (_2046) {
              bool _2048 = !(_2028 >= 0.1599999964237213f);
              _2054 = 0.0f;
              if (_2048) {
                float _2050 = 0.23999999463558197f / _2027;
                float _2051 = _2050 + -0.5f;
                float _2052 = _2051 * _2045;
                _2054 = _2052;
              }
            }
            float _2055 = _2054 + 1.0f;
            float _2056 = _2055 * _1999;
            float _2057 = _2055 * _2002;
            float _2058 = _2055 * _2005;
            bool _2059 = (_2056 == _2057);
            bool _2060 = (_2057 == _2058);
            bool _2061 = _2059 && _2060;
            _2090 = 0.0f;
            do {
              if (!_2061) {
                float _2063 = _2056 * 2.0f;
                float _2064 = _2063 - _2057;
                float _2065 = _2064 - _2058;
                float _2066 = _2002 - _2005;
                float _2067 = _2066 * 1.7320507764816284f;
                float _2068 = _2067 * _2055;
                float _2069 = _2068 / _2065;
                float _2070 = atan(_2069);
                float _2071 = _2070 + 3.1415927410125732f;
                float _2072 = _2070 + -3.1415927410125732f;
                bool _2073 = (_2065 < 0.0f);
                bool _2074 = (_2065 == 0.0f);
                bool _2075 = (_2068 >= 0.0f);
                bool _2076 = (_2068 < 0.0f);
                bool _2077 = _2075 && _2073;
                float _2078 = _2077 ? _2071 : _2070;
                bool _2079 = _2076 && _2073;
                float _2080 = _2079 ? _2072 : _2078;
                bool _2081 = _2076 && _2074;
                bool _2082 = _2075 && _2074;
                float _2083 = _2080 * 57.2957763671875f;
                float _2084 = _2081 ? -90.0f : _2083;
                float _2085 = _2082 ? 90.0f : _2084;
                bool _2086 = (_2085 < 0.0f);
                _2090 = _2085;
                if (_2086) {
                  float _2088 = _2085 + 360.0f;
                  _2090 = _2088;
                }
              }
              float _2091 = max(_2090, 0.0f);
              float _2092 = min(_2091, 360.0f);
              bool _2093 = (_2092 < -180.0f);
              do {
                if (_2093) {
                  float _2095 = _2092 + 360.0f;
                  _2101 = _2095;
                } else {
                  bool _2097 = (_2092 > 180.0f);
                  _2101 = _2092;
                  if (_2097) {
                    float _2099 = _2092 + -360.0f;
                    _2101 = _2099;
                  }
                }
                bool _2102 = (_2101 > -67.5f);
                bool _2103 = (_2101 < 67.5f);
                bool _2104 = _2102 && _2103;
                _2140 = 0.0f;
                do {
                  if (_2104) {
                    float _2106 = _2101 + 67.5f;
                    float _2107 = _2106 * 0.029629629105329514f;
                    int _2108 = int(_2107);
                    float _2109 = float(_2108);
                    float _2110 = _2107 - _2109;
                    float _2111 = _2110 * _2110;
                    float _2112 = _2111 * _2110;
                    bool _2113 = (_2108 == 3);
                    if (_2113) {
                      float _2115 = _2112 * 0.1666666716337204f;
                      float _2116 = _2111 * 0.5f;
                      float _2117 = _2110 * 0.5f;
                      float _2118 = 0.1666666716337204f - _2117;
                      float _2119 = _2118 + _2116;
                      float _2120 = _2119 - _2115;
                      _2140 = _2120;
                    } else {
                      bool _2122 = (_2108 == 2);
                      if (_2122) {
                        float _2124 = _2112 * 0.5f;
                        float _2125 = 0.6666666865348816f - _2111;
                        float _2126 = _2125 + _2124;
                        _2140 = _2126;
                      } else {
                        bool _2128 = (_2108 == 1);
                        if (_2128) {
                          float _2130 = _2112 * -0.5f;
                          float _2131 = _2111 + _2110;
                          float _2132 = _2131 * 0.5f;
                          float _2133 = _2130 + 0.1666666716337204f;
                          float _2134 = _2133 + _2132;
                          _2140 = _2134;
                        } else {
                          bool _2136 = (_2108 == 0);
                          float _2137 = _2112 * 0.1666666716337204f;
                          float _2138 = _2136 ? _2137 : 0.0f;
                          _2140 = _2138;
                        }
                      }
                    }
                  }
                  float _2141 = 0.029999999329447746f - _2056;
                  float _2142 = _2014 * 0.27000001072883606f;
                  float _2143 = _2142 * _2141;
                  float _2144 = _2143 * _2140;
                  float _2145 = _2144 + _2056;
                  float _2146 = max(_2145, 0.0f);
                  float _2147 = max(_2057, 0.0f);
                  float _2148 = max(_2058, 0.0f);
                  float _2149 = min(_2146, 65535.0f);
                  float _2150 = min(_2147, 65535.0f);
                  float _2151 = min(_2148, 65535.0f);
                  float _2152 = _2149 * 1.4514392614364624f;
                  float _2153 = mad(-0.2365107536315918f, _2150, _2152);
                  float _2154 = mad(-0.21492856740951538f, _2151, _2153);
                  float _2155 = _2149 * -0.07655377686023712f;
                  float _2156 = mad(1.17622971534729f, _2150, _2155);
                  float _2157 = mad(-0.09967592358589172f, _2151, _2156);
                  float _2158 = _2149 * 0.008316148072481155f;
                  float _2159 = mad(-0.006032449658960104f, _2150, _2158);
                  float _2160 = mad(0.9977163076400757f, _2151, _2159);
                  float _2161 = max(_2154, 0.0f);
                  float _2162 = max(_2157, 0.0f);
                  float _2163 = max(_2160, 0.0f);
                  float _2164 = min(_2161, 65504.0f);
                  float _2165 = min(_2162, 65504.0f);
                  float _2166 = min(_2163, 65504.0f);
                  float _2167 = dot(float3(_2164, _2165, _2166), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2168 = _2164 - _2167;
                  float _2169 = _2165 - _2167;
                  float _2170 = _2166 - _2167;
                  float _2171 = _2168 * 0.9599999785423279f;
                  float _2172 = _2169 * 0.9599999785423279f;
                  float _2173 = _2170 * 0.9599999785423279f;
                  float _2174 = _2171 + _2167;
                  float _2175 = _2172 + _2167;
                  float _2176 = _2173 + _2167;
                  float _2177 = max(_2174, 1.000000013351432e-10f);
                  float _2178 = log2(_2177);
                  float _2179 = _2178 * 0.3010300099849701f;
                  float _2180 = log2(_1966);
                  float _2181 = _2180 * 0.3010300099849701f;
                  bool _2182 = !(_2179 <= _2181);
                  do {
                    if (!_2182) {
                      float _2184 = log2(_1967);
                      float _2185 = _2184 * 0.3010300099849701f;
                      _2250 = _2185;
                    } else {
                      bool _2187 = (_2179 > _2181);
                      float _2188 = log2(_1964);
                      float _2189 = _2188 * 0.3010300099849701f;
                      bool _2190 = (_2179 < _2189);
                      bool _2191 = _2187 && _2190;
                      if (_2191) {
                        float _2193 = _2178 - _2180;
                        float _2194 = _2193 * 0.9030900001525879f;
                        float _2195 = _2188 - _2180;
                        float _2196 = _2195 * 0.3010300099849701f;
                        float _2197 = _2194 / _2196;
                        int _2198 = int(_2197);
                        float _2199 = float(_2198);
                        float _2200 = _2197 - _2199;
                        float _2202 = _9[_2198];
                        int _2203 = _2198 + 1;
                        float _2205 = _9[_2203];
                        int _2206 = _2198 + 2;
                        float _2208 = _9[_2206];
                        float _2209 = _2200 * _2200;
                        float _2210 = _2202 * 0.5f;
                        float _2211 = mad(_2205, -1.0f, _2210);
                        float _2212 = mad(_2208, 0.5f, _2211);
                        float _2213 = _2205 - _2202;
                        float _2214 = mad(_2205, 0.5f, _2210);
                        float _2215 = dot(float3(_2209, _2200, 1.0f), float3(_2212, _2213, _2214));
                        _2250 = _2215;
                      } else {
                        bool _2217 = !(_2179 >= _2189);
                        do {
                          if (!_2217) {
                            float _2219 = log2(_1968);
                            float _2220 = _2219 * 0.3010300099849701f;
                            bool _2221 = (_2179 < _2220);
                            if (_2221) {
                              float _2223 = _2178 - _2188;
                              float _2224 = _2223 * 0.9030900001525879f;
                              float _2225 = _2219 - _2188;
                              float _2226 = _2225 * 0.3010300099849701f;
                              float _2227 = _2224 / _2226;
                              int _2228 = int(_2227);
                              float _2229 = float(_2228);
                              float _2230 = _2227 - _2229;
                              float _2232 = _10[_2228];
                              int _2233 = _2228 + 1;
                              float _2235 = _10[_2233];
                              int _2236 = _2228 + 2;
                              float _2238 = _10[_2236];
                              float _2239 = _2230 * _2230;
                              float _2240 = _2232 * 0.5f;
                              float _2241 = mad(_2235, -1.0f, _2240);
                              float _2242 = mad(_2238, 0.5f, _2241);
                              float _2243 = _2235 - _2232;
                              float _2244 = mad(_2235, 0.5f, _2240);
                              float _2245 = dot(float3(_2239, _2230, 1.0f), float3(_2242, _2243, _2244));
                              _2250 = _2245;
                              break;
                            }
                          }
                          float _2247 = log2(_1969);
                          float _2248 = _2247 * 0.3010300099849701f;
                          _2250 = _2248;
                        } while (false);
                      }
                    }
                    float _2251 = _2250 * 3.321928024291992f;
                    float _2252 = exp2(_2251);
                    float _2253 = max(_2175, 1.000000013351432e-10f);
                    float _2254 = log2(_2253);
                    float _2255 = _2254 * 0.3010300099849701f;
                    bool _2256 = !(_2255 <= _2181);
                    do {
                      if (!_2256) {
                        float _2258 = log2(_1967);
                        float _2259 = _2258 * 0.3010300099849701f;
                        _2324 = _2259;
                      } else {
                        bool _2261 = (_2255 > _2181);
                        float _2262 = log2(_1964);
                        float _2263 = _2262 * 0.3010300099849701f;
                        bool _2264 = (_2255 < _2263);
                        bool _2265 = _2261 && _2264;
                        if (_2265) {
                          float _2267 = _2254 - _2180;
                          float _2268 = _2267 * 0.9030900001525879f;
                          float _2269 = _2262 - _2180;
                          float _2270 = _2269 * 0.3010300099849701f;
                          float _2271 = _2268 / _2270;
                          int _2272 = int(_2271);
                          float _2273 = float(_2272);
                          float _2274 = _2271 - _2273;
                          float _2276 = _9[_2272];
                          int _2277 = _2272 + 1;
                          float _2279 = _9[_2277];
                          int _2280 = _2272 + 2;
                          float _2282 = _9[_2280];
                          float _2283 = _2274 * _2274;
                          float _2284 = _2276 * 0.5f;
                          float _2285 = mad(_2279, -1.0f, _2284);
                          float _2286 = mad(_2282, 0.5f, _2285);
                          float _2287 = _2279 - _2276;
                          float _2288 = mad(_2279, 0.5f, _2284);
                          float _2289 = dot(float3(_2283, _2274, 1.0f), float3(_2286, _2287, _2288));
                          _2324 = _2289;
                        } else {
                          bool _2291 = !(_2255 >= _2263);
                          do {
                            if (!_2291) {
                              float _2293 = log2(_1968);
                              float _2294 = _2293 * 0.3010300099849701f;
                              bool _2295 = (_2255 < _2294);
                              if (_2295) {
                                float _2297 = _2254 - _2262;
                                float _2298 = _2297 * 0.9030900001525879f;
                                float _2299 = _2293 - _2262;
                                float _2300 = _2299 * 0.3010300099849701f;
                                float _2301 = _2298 / _2300;
                                int _2302 = int(_2301);
                                float _2303 = float(_2302);
                                float _2304 = _2301 - _2303;
                                float _2306 = _10[_2302];
                                int _2307 = _2302 + 1;
                                float _2309 = _10[_2307];
                                int _2310 = _2302 + 2;
                                float _2312 = _10[_2310];
                                float _2313 = _2304 * _2304;
                                float _2314 = _2306 * 0.5f;
                                float _2315 = mad(_2309, -1.0f, _2314);
                                float _2316 = mad(_2312, 0.5f, _2315);
                                float _2317 = _2309 - _2306;
                                float _2318 = mad(_2309, 0.5f, _2314);
                                float _2319 = dot(float3(_2313, _2304, 1.0f), float3(_2316, _2317, _2318));
                                _2324 = _2319;
                                break;
                              }
                            }
                            float _2321 = log2(_1969);
                            float _2322 = _2321 * 0.3010300099849701f;
                            _2324 = _2322;
                          } while (false);
                        }
                      }
                      float _2325 = _2324 * 3.321928024291992f;
                      float _2326 = exp2(_2325);
                      float _2327 = max(_2176, 1.000000013351432e-10f);
                      float _2328 = log2(_2327);
                      float _2329 = _2328 * 0.3010300099849701f;
                      bool _2330 = !(_2329 <= _2181);
                      do {
                        if (!_2330) {
                          float _2332 = log2(_1967);
                          float _2333 = _2332 * 0.3010300099849701f;
                          _2398 = _2333;
                        } else {
                          bool _2335 = (_2329 > _2181);
                          float _2336 = log2(_1964);
                          float _2337 = _2336 * 0.3010300099849701f;
                          bool _2338 = (_2329 < _2337);
                          bool _2339 = _2335 && _2338;
                          if (_2339) {
                            float _2341 = _2328 - _2180;
                            float _2342 = _2341 * 0.9030900001525879f;
                            float _2343 = _2336 - _2180;
                            float _2344 = _2343 * 0.3010300099849701f;
                            float _2345 = _2342 / _2344;
                            int _2346 = int(_2345);
                            float _2347 = float(_2346);
                            float _2348 = _2345 - _2347;
                            float _2350 = _9[_2346];
                            int _2351 = _2346 + 1;
                            float _2353 = _9[_2351];
                            int _2354 = _2346 + 2;
                            float _2356 = _9[_2354];
                            float _2357 = _2348 * _2348;
                            float _2358 = _2350 * 0.5f;
                            float _2359 = mad(_2353, -1.0f, _2358);
                            float _2360 = mad(_2356, 0.5f, _2359);
                            float _2361 = _2353 - _2350;
                            float _2362 = mad(_2353, 0.5f, _2358);
                            float _2363 = dot(float3(_2357, _2348, 1.0f), float3(_2360, _2361, _2362));
                            _2398 = _2363;
                          } else {
                            bool _2365 = !(_2329 >= _2337);
                            do {
                              if (!_2365) {
                                float _2367 = log2(_1968);
                                float _2368 = _2367 * 0.3010300099849701f;
                                bool _2369 = (_2329 < _2368);
                                if (_2369) {
                                  float _2371 = _2328 - _2336;
                                  float _2372 = _2371 * 0.9030900001525879f;
                                  float _2373 = _2367 - _2336;
                                  float _2374 = _2373 * 0.3010300099849701f;
                                  float _2375 = _2372 / _2374;
                                  int _2376 = int(_2375);
                                  float _2377 = float(_2376);
                                  float _2378 = _2375 - _2377;
                                  float _2380 = _10[_2376];
                                  int _2381 = _2376 + 1;
                                  float _2383 = _10[_2381];
                                  int _2384 = _2376 + 2;
                                  float _2386 = _10[_2384];
                                  float _2387 = _2378 * _2378;
                                  float _2388 = _2380 * 0.5f;
                                  float _2389 = mad(_2383, -1.0f, _2388);
                                  float _2390 = mad(_2386, 0.5f, _2389);
                                  float _2391 = _2383 - _2380;
                                  float _2392 = mad(_2383, 0.5f, _2388);
                                  float _2393 = dot(float3(_2387, _2378, 1.0f), float3(_2390, _2391, _2392));
                                  _2398 = _2393;
                                  break;
                                }
                              }
                              float _2395 = log2(_1969);
                              float _2396 = _2395 * 0.3010300099849701f;
                              _2398 = _2396;
                            } while (false);
                          }
                        }
                        float _2399 = _2398 * 3.321928024291992f;
                        float _2400 = exp2(_2399);
                        float _2401 = _2252 - _1967;
                        float _2402 = _1969 - _1967;
                        float _2403 = _2401 / _2402;
                        float _2404 = _2326 - _1967;
                        float _2405 = _2404 / _2402;
                        float _2406 = _2400 - _1967;
                        float _2407 = _2406 / _2402;
                        float _2408 = _2403 * 0.6624541878700256f;
                        float _2409 = mad(0.13400420546531677f, _2405, _2408);
                        float _2410 = mad(0.15618768334388733f, _2407, _2409);
                        float _2411 = _2403 * 0.2722287178039551f;
                        float _2412 = mad(0.6740817427635193f, _2405, _2411);
                        float _2413 = mad(0.053689517080783844f, _2407, _2412);
                        float _2414 = _2403 * -0.005574649665504694f;
                        float _2415 = mad(0.00406073359772563f, _2405, _2414);
                        float _2416 = mad(1.0103391408920288f, _2407, _2415);
                        float _2417 = _2410 * 1.6410233974456787f;
                        float _2418 = mad(-0.32480329275131226f, _2413, _2417);
                        float _2419 = mad(-0.23642469942569733f, _2416, _2418);
                        float _2420 = _2410 * -0.663662850856781f;
                        float _2421 = mad(1.6153316497802734f, _2413, _2420);
                        float _2422 = mad(0.016756348311901093f, _2416, _2421);
                        float _2423 = _2410 * 0.011721894145011902f;
                        float _2424 = mad(-0.008284442126750946f, _2413, _2423);
                        float _2425 = mad(0.9883948564529419f, _2416, _2424);
                        float _2426 = max(_2419, 0.0f);
                        float _2427 = max(_2422, 0.0f);
                        float _2428 = max(_2425, 0.0f);
                        float _2429 = min(_2426, 1.0f);
                        float _2430 = min(_2427, 1.0f);
                        float _2431 = min(_2428, 1.0f);
                        float _2432 = _2429 * 0.6624541878700256f;
                        float _2433 = mad(0.13400420546531677f, _2430, _2432);
                        float _2434 = mad(0.15618768334388733f, _2431, _2433);
                        float _2435 = _2429 * 0.2722287178039551f;
                        float _2436 = mad(0.6740817427635193f, _2430, _2435);
                        float _2437 = mad(0.053689517080783844f, _2431, _2436);
                        float _2438 = _2429 * -0.005574649665504694f;
                        float _2439 = mad(0.00406073359772563f, _2430, _2438);
                        float _2440 = mad(1.0103391408920288f, _2431, _2439);
                        float _2441 = _2434 * 1.6410233974456787f;
                        float _2442 = mad(-0.32480329275131226f, _2437, _2441);
                        float _2443 = mad(-0.23642469942569733f, _2440, _2442);
                        float _2444 = _2434 * -0.663662850856781f;
                        float _2445 = mad(1.6153316497802734f, _2437, _2444);
                        float _2446 = mad(0.016756348311901093f, _2440, _2445);
                        float _2447 = _2434 * 0.011721894145011902f;
                        float _2448 = mad(-0.008284442126750946f, _2437, _2447);
                        float _2449 = mad(0.9883948564529419f, _2440, _2448);
                        float _2450 = max(_2443, 0.0f);
                        float _2451 = max(_2446, 0.0f);
                        float _2452 = max(_2449, 0.0f);
                        float _2453 = min(_2450, 65535.0f);
                        float _2454 = min(_2451, 65535.0f);
                        float _2455 = min(_2452, 65535.0f);
                        float _2456 = _2453 * _1969;
                        float _2457 = _2454 * _1969;
                        float _2458 = _2455 * _1969;
                        float _2459 = max(_2456, 0.0f);
                        float _2460 = max(_2457, 0.0f);
                        float _2461 = max(_2458, 0.0f);
                        float _2462 = min(_2459, 65535.0f);
                        float _2463 = min(_2460, 65535.0f);
                        float _2464 = min(_2461, 65535.0f);
                        bool _2465 = (_1234 == 6);
                        _2477 = _2462;
                        _2478 = _2463;
                        _2479 = _2464;
                        do {
                          if (!_2465) {
                            float _2467 = _2462 * _47;
                            float _2468 = mad(_48, _2463, _2467);
                            float _2469 = mad(_49, _2464, _2468);
                            float _2470 = _2462 * _50;
                            float _2471 = mad(_51, _2463, _2470);
                            float _2472 = mad(_52, _2464, _2471);
                            float _2473 = _2462 * _53;
                            float _2474 = mad(_54, _2463, _2473);
                            float _2475 = mad(_55, _2464, _2474);
                            _2477 = _2469;
                            _2478 = _2472;
                            _2479 = _2475;
                          }
                          float _2480 = _2477 * 9.999999747378752e-05f;
                          float _2481 = _2478 * 9.999999747378752e-05f;
                          float _2482 = _2479 * 9.999999747378752e-05f;
                          float _2483 = log2(_2480);
                          float _2484 = log2(_2481);
                          float _2485 = log2(_2482);
                          float _2486 = _2483 * 0.1593017578125f;
                          float _2487 = _2484 * 0.1593017578125f;
                          float _2488 = _2485 * 0.1593017578125f;
                          float _2489 = exp2(_2486);
                          float _2490 = exp2(_2487);
                          float _2491 = exp2(_2488);
                          float _2492 = _2489 * 18.8515625f;
                          float _2493 = _2490 * 18.8515625f;
                          float _2494 = _2491 * 18.8515625f;
                          float _2495 = _2492 + 0.8359375f;
                          float _2496 = _2493 + 0.8359375f;
                          float _2497 = _2494 + 0.8359375f;
                          float _2498 = _2489 * 18.6875f;
                          float _2499 = _2490 * 18.6875f;
                          float _2500 = _2491 * 18.6875f;
                          float _2501 = _2498 + 1.0f;
                          float _2502 = _2499 + 1.0f;
                          float _2503 = _2500 + 1.0f;
                          float _2504 = 1.0f / _2501;
                          float _2505 = 1.0f / _2502;
                          float _2506 = 1.0f / _2503;
                          float _2507 = _2504 * _2495;
                          float _2508 = _2505 * _2496;
                          float _2509 = _2506 * _2497;
                          float _2510 = log2(_2507);
                          float _2511 = log2(_2508);
                          float _2512 = log2(_2509);
                          float _2513 = _2510 * 78.84375f;
                          float _2514 = _2511 * 78.84375f;
                          float _2515 = _2512 * 78.84375f;
                          float _2516 = exp2(_2513);
                          float _2517 = exp2(_2514);
                          float _2518 = exp2(_2515);
                          _2656 = _2516;
                          _2657 = _2517;
                          _2658 = _2518;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2520 = (_1234 == 7);
          if (_2520) {
            float _2523 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2524 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2525 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2527 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2528 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2529 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2531 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2532 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2533 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2534 = _2523 * _1216;
            float _2535 = mad(_2524, _1217, _2534);
            float _2536 = mad(_2525, _1218, _2535);
            float _2537 = _2527 * _1216;
            float _2538 = mad(_2528, _1217, _2537);
            float _2539 = mad(_2529, _1218, _2538);
            float _2540 = _2531 * _1216;
            float _2541 = mad(_2532, _1217, _2540);
            float _2542 = mad(_2533, _1218, _2541);
            float _2543 = _2536 * _47;
            float _2544 = mad(_48, _2539, _2543);
            float _2545 = mad(_49, _2542, _2544);
            float _2546 = _2536 * _50;
            float _2547 = mad(_51, _2539, _2546);
            float _2548 = mad(_52, _2542, _2547);
            float _2549 = _2536 * _53;
            float _2550 = mad(_54, _2539, _2549);
            float _2551 = mad(_55, _2542, _2550);
            float _2552 = _2545 * 9.999999747378752e-05f;
            float _2553 = _2548 * 9.999999747378752e-05f;
            float _2554 = _2551 * 9.999999747378752e-05f;
            float _2555 = log2(_2552);
            float _2556 = log2(_2553);
            float _2557 = log2(_2554);
            float _2558 = _2555 * 0.1593017578125f;
            float _2559 = _2556 * 0.1593017578125f;
            float _2560 = _2557 * 0.1593017578125f;
            float _2561 = exp2(_2558);
            float _2562 = exp2(_2559);
            float _2563 = exp2(_2560);
            float _2564 = _2561 * 18.8515625f;
            float _2565 = _2562 * 18.8515625f;
            float _2566 = _2563 * 18.8515625f;
            float _2567 = _2564 + 0.8359375f;
            float _2568 = _2565 + 0.8359375f;
            float _2569 = _2566 + 0.8359375f;
            float _2570 = _2561 * 18.6875f;
            float _2571 = _2562 * 18.6875f;
            float _2572 = _2563 * 18.6875f;
            float _2573 = _2570 + 1.0f;
            float _2574 = _2571 + 1.0f;
            float _2575 = _2572 + 1.0f;
            float _2576 = 1.0f / _2573;
            float _2577 = 1.0f / _2574;
            float _2578 = 1.0f / _2575;
            float _2579 = _2576 * _2567;
            float _2580 = _2577 * _2568;
            float _2581 = _2578 * _2569;
            float _2582 = log2(_2579);
            float _2583 = log2(_2580);
            float _2584 = log2(_2581);
            float _2585 = _2582 * 78.84375f;
            float _2586 = _2583 * 78.84375f;
            float _2587 = _2584 * 78.84375f;
            float _2588 = exp2(_2585);
            float _2589 = exp2(_2586);
            float _2590 = exp2(_2587);
            _2656 = _2588;
            _2657 = _2589;
            _2658 = _2590;
          } else {
            bool _2592 = (_1234 == 8);
            _2656 = _1216;
            _2657 = _1217;
            _2658 = _1218;
            if (!_2592) {
              bool _2594 = (_1234 == 9);
              float _2596 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2597 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2598 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2600 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2601 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2602 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2604 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2605 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2606 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2594) {
                float _2608 = _2596 * _1204;
                float _2609 = mad(_2597, _1205, _2608);
                float _2610 = mad(_2598, _1206, _2609);
                float _2611 = _2600 * _1204;
                float _2612 = mad(_2601, _1205, _2611);
                float _2613 = mad(_2602, _1206, _2612);
                float _2614 = _2604 * _1204;
                float _2615 = mad(_2605, _1205, _2614);
                float _2616 = mad(_2606, _1206, _2615);
                float _2617 = _2610 * _47;
                float _2618 = mad(_48, _2613, _2617);
                float _2619 = mad(_49, _2616, _2618);
                float _2620 = _2610 * _50;
                float _2621 = mad(_51, _2613, _2620);
                float _2622 = mad(_52, _2616, _2621);
                float _2623 = _2610 * _53;
                float _2624 = mad(_54, _2613, _2623);
                float _2625 = mad(_55, _2616, _2624);
                _2656 = _2619;
                _2657 = _2622;
                _2658 = _2625;
              } else {
                float _2627 = _2596 * _1230;
                float _2628 = mad(_2597, _1231, _2627);
                float _2629 = mad(_2598, _1232, _2628);
                float _2630 = _2600 * _1230;
                float _2631 = mad(_2601, _1231, _2630);
                float _2632 = mad(_2602, _1232, _2631);
                float _2633 = _2604 * _1230;
                float _2634 = mad(_2605, _1231, _2633);
                float _2635 = mad(_2606, _1232, _2634);
                float _2636 = _2629 * _47;
                float _2637 = mad(_48, _2632, _2636);
                float _2638 = mad(_49, _2635, _2637);
                float _2639 = _2629 * _50;
                float _2640 = mad(_51, _2632, _2639);
                float _2641 = mad(_52, _2635, _2640);
                float _2642 = _2629 * _53;
                float _2643 = mad(_54, _2632, _2642);
                float _2644 = mad(_55, _2635, _2643);
                float _2645 = _RootShaderParameters_040z;
                float _2646 = log2(_2638);
                float _2647 = log2(_2641);
                float _2648 = log2(_2644);
                float _2649 = _2646 * _2645;
                float _2650 = _2647 * _2645;
                float _2651 = _2648 * _2645;
                float _2652 = exp2(_2649);
                float _2653 = exp2(_2650);
                float _2654 = exp2(_2651);
                _2656 = _2652;
                _2657 = _2653;
                _2658 = _2654;
              }
            }
          }
        }
      }
    }
  }
  float _2659 = _2656 * 0.9523810148239136f;
  float _2660 = _2657 * 0.9523810148239136f;
  float _2661 = _2658 * 0.9523810148239136f;
  // _2662 = _1;
  RWOutputTexture[int3(_6, _7, _8)] = float4(_2659, _2660, _2661, 0.0f);
}
