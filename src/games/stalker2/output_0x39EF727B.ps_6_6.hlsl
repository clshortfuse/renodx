#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> ColorTexture : register(t0);

Texture2D<float4> BloomTexture : register(t1);

struct _SceneColorApplyParamaters {
  float data[4];
};
StructuredBuffer<_SceneColorApplyParamaters> SceneColorApplyParamaters : register(t2);

Texture3D<float4> LumBilateralGrid : register(t3);

Texture2D<float4> BlurredLogLum : register(t4);

Texture2D<float4> BloomDirtMaskTexture : register(t5);

Texture3D<float4> ColorGradingLUT : register(t6);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_009z : packoffset(c009.z);
  float _RootShaderParameters_009w : packoffset(c009.w);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_044x : packoffset(c044.x);
  float _RootShaderParameters_044y : packoffset(c044.y);
  float _RootShaderParameters_044z : packoffset(c044.z);
  float _RootShaderParameters_045x : packoffset(c045.x);
  float _RootShaderParameters_045y : packoffset(c045.y);
  float _RootShaderParameters_045z : packoffset(c045.z);
  float _RootShaderParameters_046x : packoffset(c046.x);
  float _RootShaderParameters_046y : packoffset(c046.y);
  float _RootShaderParameters_046z : packoffset(c046.z);
  float _RootShaderParameters_047x : packoffset(c047.x);
  float _RootShaderParameters_048x : packoffset(c048.x);
  float _RootShaderParameters_048y : packoffset(c048.y);
  float _RootShaderParameters_048z : packoffset(c048.z);
  float _RootShaderParameters_048w : packoffset(c048.w);
  float _RootShaderParameters_049x : packoffset(c049.x);
  float _RootShaderParameters_049y : packoffset(c049.y);
  float _RootShaderParameters_049z : packoffset(c049.z);
  float _RootShaderParameters_049w : packoffset(c049.w);
  float _RootShaderParameters_050y : packoffset(c050.y);
  uint _RootShaderParameters_050z : packoffset(c050.z);
  float _RootShaderParameters_050w : packoffset(c050.w);
  float _RootShaderParameters_051x : packoffset(c051.x);
};

cbuffer UniformBufferConstants_View : register(b1) {
  float UniformBufferConstants_View_140w : packoffset(c140.w);
};

SamplerState ColorSampler : register(s0);

SamplerState BloomSampler : register(s1);

SamplerState LumBilateralGridSampler : register(s2);

SamplerState BlurredLogLumSampler : register(s3);

SamplerState BloomDirtMaskSampler : register(s4);

SamplerState ColorGradingLUTSampler : register(s5);

float4 main(
  noperspective float2 TEXCOORD : TEXCOORD,
  noperspective float4 TEXCOORD_1 : TEXCOORD1,
  noperspective float4 TEXCOORD_2 : TEXCOORD2,
  noperspective float2 TEXCOORD_3 : TEXCOORD3,
  noperspective float2 TEXCOORD_4 : TEXCOORD4,
  noperspective float4 SV_Position : SV_Position
) : SV_Target {
  float4 SV_Target;
  float3 post_lut;
  // texture _1 = ColorGradingLUT;
  // texture _2 = BloomDirtMaskTexture;
  // texture _3 = BlurredLogLum;
  // texture _4 = LumBilateralGrid;
  // texture _5 = SceneColorApplyParamaters;
  // texture _6 = BloomTexture;
  // texture _7 = ColorTexture;
  // SamplerState _8 = ColorGradingLUTSampler;
  // SamplerState _9 = BloomDirtMaskSampler;
  // SamplerState _10 = BlurredLogLumSampler;
  // SamplerState _11 = LumBilateralGridSampler;
  // SamplerState _12 = BloomSampler;
  // SamplerState _13 = ColorSampler;
  // cbuffer _14 = UniformBufferConstants_View;
  // cbuffer _15 = _RootShaderParameters;
  // _16 = _14;
  // _17 = _15;
  float _18 = TEXCOORD_4.x;
  float _19 = TEXCOORD_4.y;
  float _20 = TEXCOORD_3.x;
  float _21 = TEXCOORD_3.y;
  float _22 = TEXCOORD_2.z;
  float _23 = TEXCOORD_2.w;
  float _24 = TEXCOORD_1.x;
  float _25 = TEXCOORD_1.y;
  float _26 = TEXCOORD_1.z;
  float _27 = TEXCOORD_1.w;
  float _28 = TEXCOORD.x;
  float _29 = TEXCOORD.y;
  float _31 = _RootShaderParameters_046x;
  float _32 = _RootShaderParameters_046y;
  float _33 = _RootShaderParameters_046z;
  float _35 = _RootShaderParameters_048x;
  float _36 = _RootShaderParameters_048y;
  float _37 = _RootShaderParameters_048z;
  float _38 = _RootShaderParameters_048w;
  float _39 = _37 * _20;
  float _40 = _38 * _21;
  float _41 = _39 + _35;
  float _42 = _40 + _36;
  bool _43 = (_41 > 0.0f);
  bool _44 = (_42 > 0.0f);
  bool _45 = (_41 < 0.0f);
  bool _46 = (_42 < 0.0f);
  int _47 = int(_43);
  int _48 = int(_44);
  int _49 = int(_45);
  int _50 = int(_46);
  int _51 = _47 - _49;
  int _52 = _48 - _50;
  float _53 = float(_51);
  float _54 = float(_52);
  float _55 = abs(_41);
  float _56 = abs(_42);
  float _57 = _55 - _33;
  float _58 = _56 - _33;
  float _59 = saturate(_57);
  float _60 = saturate(_58);
  float _61 = _59 * _31;
  float _62 = _61 * _53;
  float _63 = _60 * _31;
  float _64 = _63 * _54;
  float _65 = _59 * _32;
  float _66 = _65 * _53;
  float _67 = _60 * _32;
  float _68 = _67 * _54;
  float _69 = _41 - _62;
  float _70 = _42 - _64;
  float _71 = _41 - _66;
  float _72 = _42 - _68;
  float _74 = _RootShaderParameters_049x;
  float _75 = _RootShaderParameters_049y;
  float _76 = _RootShaderParameters_049z;
  float _77 = _RootShaderParameters_049w;
  float _78 = _69 * _76;
  float _79 = _70 * _77;
  float _80 = _78 + _74;
  float _81 = _79 + _75;
  float _82 = _71 * _76;
  float _83 = _72 * _77;
  float _84 = _82 + _74;
  float _85 = _83 + _75;
  float _87 = _RootShaderParameters_009z;
  float _88 = _RootShaderParameters_009w;
  float _90 = _RootShaderParameters_010x;
  float _91 = _RootShaderParameters_010y;
  float _92 = _80 * _90;
  float _93 = _81 * _91;
  float _94 = _RootShaderParameters_010z;
  float _95 = _RootShaderParameters_010w;
  float _96 = _92 + _94;
  float _97 = _93 + _95;
  float _98 = _96 * _87;
  float _99 = _97 * _88;
  float _100 = _90 * _84;
  float _101 = _91 * _85;
  float _102 = _100 + _94;
  float _103 = _101 + _95;
  float _104 = _102 * _87;
  float _105 = _103 * _88;
  float _107 = _RootShaderParameters_015z;
  float _108 = _RootShaderParameters_015w;
  float _109 = _RootShaderParameters_015x;
  float _110 = _RootShaderParameters_015y;
  float _111 = max(_98, _109);
  float _112 = max(_99, _110);
  float _113 = min(_111, _107);
  float _114 = min(_112, _108);
  // _115 = _7;
  // _116 = _13;
  float4 _117 = ColorTexture.Sample(ColorSampler, float2(_113, _114));
  float _118 = _117.x;
  float _120 = _RootShaderParameters_015z;
  float _121 = _RootShaderParameters_015w;
  float _122 = _RootShaderParameters_015x;
  float _123 = _RootShaderParameters_015y;
  float _124 = max(_104, _122);
  float _125 = max(_105, _123);
  float _126 = min(_124, _120);
  float _127 = min(_125, _121);
  // _128 = _7;
  // _129 = _13;
  float4 _130 = ColorTexture.Sample(ColorSampler, float2(_126, _127));
  float _131 = _130.y;
  float _133 = _RootShaderParameters_015z;
  float _134 = _RootShaderParameters_015w;
  float _135 = _RootShaderParameters_015x;
  float _136 = _RootShaderParameters_015y;
  float _137 = max(_28, _135);
  float _138 = max(_29, _136);
  float _139 = min(_137, _133);
  float _140 = min(_138, _134);
  // _141 = _7;
  // _142 = _13;
  float4 _143 = ColorTexture.Sample(ColorSampler, float2(_139, _140));
  float _144 = _143.z;
  float _146 = UniformBufferConstants_View_140w;
  float _147 = _146 * _118;
  float _148 = _146 * _131;
  float _149 = _146 * _144;
  float _151 = _RootShaderParameters_025w;
  float _153 = _RootShaderParameters_027x;
  float _154 = _RootShaderParameters_027y;
  float _155 = _RootShaderParameters_027z;
  float _156 = dot(float3(_147, _148, _149), float3(_153, _154, _155));
  float _157 = max(_156, _151);
  float _158 = log2(_157);
  float _160 = _RootShaderParameters_032w;
  float _162 = _RootShaderParameters_033z;
  float _163 = _RootShaderParameters_033w;
  float _164 = _162 * _18;
  float _165 = _163 * _19;
  float _166 = _RootShaderParameters_025y;
  float _167 = _166 * _158;
  float _168 = _RootShaderParameters_025z;
  float _169 = _167 + _168;
  float _170 = _169 * 0.96875f;
  float _171 = _170 + 0.015625f;
  // _172 = _4;
  // _173 = _11;
  float4 _174 = LumBilateralGrid.Sample(LumBilateralGridSampler, float3(_164, _165, _171));
  float _175 = _174.x;
  float _176 = _174.y;
  float _177 = _175 / _176;
  // _178 = _3;
  // _179 = _10;
  float4 _180 = BlurredLogLum.Sample(BlurredLogLumSampler, float2(_18, _19));
  float _181 = _180.x;
  bool _182 = (_176 < 0.0010000000474974513f);
  float _183 = _182 ? _181 : _177;
  float _184 = _181 - _183;
  float _185 = _184 * _160;
  float _186 = log2(_24);
  float _187 = _183 + _186;
  float _188 = _187 + _185;
  float _190 = _RootShaderParameters_032z;
  float _191 = _RootShaderParameters_032y;
  float _192 = _RootShaderParameters_032x;
  float _193 = _186 + _158;
  float _194 = _193 - _188;
  float _195 = _188 - _25;
  bool _196 = (_195 > 0.0f);
  float _197 = _196 ? _192 : _191;
  float _208;
  float _445;
  float _446;
  float _447;
  if (_196) {
    float _200 = _RootShaderParameters_034x;
    float _201 = _195 - _200;
    float _202 = max(0.0f, _201);
    _208 = _202;
  } else {
    float _204 = _RootShaderParameters_034y;
    float _205 = _204 + _195;
    float _206 = min(0.0f, _205);
    _208 = _206;
  }
  float _209 = _208 * _197;
  float _210 = _194 * _190;
  float _211 = _188 - _193;
  float _212 = _211 + _210;
  float _213 = _212 - _208;
  float _214 = _213 + _209;
  float _215 = exp2(_214);
  float _216 = _215 * _147;
  float _217 = _215 * _148;
  float _218 = _215 * _149;
  float _220 = _RootShaderParameters_044x;
  float _221 = _RootShaderParameters_044y;
  float _222 = _RootShaderParameters_044z;
  float _223 = _216 * _220;
  float _224 = _217 * _221;
  float _225 = _218 * _222;
  // _226 = _5;
  float4 _227 = SceneColorApplyParamaters[0].data[0 / 4];
  float _228 = _227.x;
  float _229 = _227.y;
  float _230 = _227.z;
  float _231 = _223 * _228;
  float _232 = _224 * _229;
  float _233 = _225 * _230;
  float _235 = _RootShaderParameters_036x;
  float _236 = _RootShaderParameters_036y;
  float _237 = _RootShaderParameters_036z;
  float _238 = _RootShaderParameters_036w;
  float _239 = _235 * _28;
  float _240 = _236 * _29;
  float _241 = _239 + _237;
  float _242 = _240 + _238;
  float _244 = _RootShaderParameters_037z;
  float _245 = _RootShaderParameters_037w;
  float _246 = _RootShaderParameters_037x;
  float _247 = _RootShaderParameters_037y;
  float _248 = max(_241, _246);
  float _249 = max(_242, _247);
  float _250 = min(_248, _244);
  float _251 = min(_249, _245);
  // _252 = _6;
  // _253 = _12;
  float4 _254 = BloomTexture.Sample(BloomSampler, float2(_250, _251));
  float _255 = _254.x;
  float _256 = _254.y;
  float _257 = _254.z;
  float _259 = UniformBufferConstants_View_140w;
  float _260 = _259 * _255;
  float _261 = _259 * _256;
  float _262 = _259 * _257;
  float _264 = _RootShaderParameters_048x;
  float _265 = _RootShaderParameters_048y;
  float _266 = _RootShaderParameters_048z;
  float _267 = _RootShaderParameters_048w;
  float _268 = _266 * _20;
  float _269 = _267 * _21;
  float _270 = _268 + _264;
  float _271 = _269 + _265;
  float _272 = _270 * 0.5f;
  float _273 = _271 * 0.5f;
  float _274 = _272 + 0.5f;
  float _275 = 0.5f - _273;
  // _276 = _2;
  // _277 = _9;
  float4 _278 = BloomDirtMaskTexture.Sample(BloomDirtMaskSampler, float2(_274, _275));
  float _279 = _278.x;
  float _280 = _278.y;
  float _281 = _278.z;
  float _283 = _RootShaderParameters_045x;
  float _284 = _RootShaderParameters_045y;
  float _285 = _RootShaderParameters_045z;
  float _286 = _283 * _279;
  float _287 = _284 * _280;
  float _288 = _285 * _281;
  float _289 = _286 + 1.0f;
  float _290 = _287 + 1.0f;
  float _291 = _288 + 1.0f;
  float _292 = _260 * _289;
  float _293 = _261 * _290;
  float _294 = _262 * _291;
  float _295 = _292 + _231;
  float _296 = _293 + _232;
  float _297 = _294 + _233;
  float _299 = _RootShaderParameters_047x;
  float _300 = _299 * _26;
  float _301 = _299 * _27;
  float _302 = dot(float2(_300, _301), float2(_300, _301));
  float _303 = _302 + 1.0f;
  float _304 = 1.0f / _303;
  float _305 = _304 * _304;
  float _306 = _24 * 0.009999999776482582f;
  float _307 = _306 * _305;
  float _308 = _307 * _295;
  float _309 = _307 * _296;
  float _310 = _307 * _297;
  float _311 = log2(_308);
  float _312 = log2(_309);
  float _313 = log2(_310);
  float _314 = _311 * 0.1593017578125f;
  float _315 = _312 * 0.1593017578125f;
  float _316 = _313 * 0.1593017578125f;
  float _317 = exp2(_314);
  float _318 = exp2(_315);
  float _319 = exp2(_316);
  float _320 = _317 * 18.8515625f;
  float _321 = _318 * 18.8515625f;
  float _322 = _319 * 18.8515625f;
  float _323 = _320 + 0.8359375f;
  float _324 = _321 + 0.8359375f;
  float _325 = _322 + 0.8359375f;
  float _326 = _317 * 18.6875f;
  float _327 = _318 * 18.6875f;
  float _328 = _319 * 18.6875f;
  float _329 = _326 + 1.0f;
  float _330 = _327 + 1.0f;
  float _331 = _328 + 1.0f;
  float _332 = 1.0f / _329;
  float _333 = 1.0f / _330;
  float _334 = 1.0f / _331;
  float _335 = _332 * _323;
  float _336 = _333 * _324;
  float _337 = _334 * _325;
  float _338 = log2(_335);
  float _339 = log2(_336);
  float _340 = log2(_337);
  float _341 = _338 * 78.84375f;
  float _342 = _339 * 78.84375f;
  float _343 = _340 * 78.84375f;
  float _344 = exp2(_341);
  float _345 = exp2(_342);
  float _346 = exp2(_343);
  float _347 = _344 * 0.96875f;
  float _348 = _345 * 0.96875f;
  float _349 = _346 * 0.96875f;
  float _350 = _347 + 0.015625f;
  float _351 = _348 + 0.015625f;
  float _352 = _349 + 0.015625f;
  // _353 = _1;
  // _354 = _8;
  float4 _355 = ColorGradingLUT.Sample(ColorGradingLUTSampler, float3(_350, _351, _352));
  post_lut = _355.rgb;
  // Code after sampling
  if (injectedData.toneMapType != 0.f) {
    return float4(post_lut, 0.f);
  }
  float _356 = _355.x;
  float _357 = _355.y;
  float _358 = _355.z;
  float _359 = _356 * 1.0499999523162842f;
  float _360 = _357 * 1.0499999523162842f;
  float _361 = _358 * 1.0499999523162842f;
  float _362 = _23 * 543.3099975585938f;
  float _363 = _362 + _22;
  float _364 = sin(_363);
  float _365 = _364 * 493013.0f;
  float _366 = frac(_365);
  float _367 = _366 * 0.00390625f;
  float _368 = _367 + -0.001953125f;
  float _369 = _368 + _359;
  float _370 = _368 + _360;
  float _371 = _368 + _361;
  uint _373 = _RootShaderParameters_050z;
  bool _374 = (_373 == 0);
  _445 = _369;
  _446 = _370;
  _447 = _371;
  if (!_374) {
    float _376 = log2(_369);
    float _377 = log2(_370);
    float _378 = log2(_371);
    float _379 = _376 * 0.012683313339948654f;
    float _380 = _377 * 0.012683313339948654f;
    float _381 = _378 * 0.012683313339948654f;
    float _382 = exp2(_379);
    float _383 = exp2(_380);
    float _384 = exp2(_381);
    float _385 = _382 + -0.8359375f;
    float _386 = _383 + -0.8359375f;
    float _387 = _384 + -0.8359375f;
    float _388 = max(0.0f, _385);
    float _389 = max(0.0f, _386);
    float _390 = max(0.0f, _387);
    float _391 = _382 * 18.6875f;
    float _392 = _383 * 18.6875f;
    float _393 = _384 * 18.6875f;
    float _394 = 18.8515625f - _391;
    float _395 = 18.8515625f - _392;
    float _396 = 18.8515625f - _393;
    float _397 = _388 / _394;
    float _398 = _389 / _395;
    float _399 = _390 / _396;
    float _400 = log2(_397);
    float _401 = log2(_398);
    float _402 = log2(_399);
    float _403 = _400 * 6.277394771575928f;
    float _404 = _401 * 6.277394771575928f;
    float _405 = _402 * 6.277394771575928f;
    float _406 = exp2(_403);
    float _407 = exp2(_404);
    float _408 = exp2(_405);
    float _409 = _406 * 10000.0f;
    float _410 = _407 * 10000.0f;
    float _411 = _408 * 10000.0f;
    float _413 = _RootShaderParameters_050y;
    float _414 = _409 / _413;
    float _415 = _410 / _413;
    float _416 = _411 / _413;
    float _417 = max(6.103519990574569e-05f, _414);
    float _418 = max(6.103519990574569e-05f, _415);
    float _419 = max(6.103519990574569e-05f, _416);
    float _420 = max(_417, 0.0031306699384003878f);
    float _421 = max(_418, 0.0031306699384003878f);
    float _422 = max(_419, 0.0031306699384003878f);
    float _423 = log2(_420);
    float _424 = log2(_421);
    float _425 = log2(_422);
    float _426 = _423 * 0.4166666567325592f;
    float _427 = _424 * 0.4166666567325592f;
    float _428 = _425 * 0.4166666567325592f;
    float _429 = exp2(_426);
    float _430 = exp2(_427);
    float _431 = exp2(_428);
    float _432 = _429 * 1.0549999475479126f;
    float _433 = _430 * 1.0549999475479126f;
    float _434 = _431 * 1.0549999475479126f;
    float _435 = _432 + -0.054999999701976776f;
    float _436 = _433 + -0.054999999701976776f;
    float _437 = _434 + -0.054999999701976776f;
    float _438 = _417 * 12.920000076293945f;
    float _439 = _418 * 12.920000076293945f;
    float _440 = _419 * 12.920000076293945f;
    float _441 = min(_438, _435);
    float _442 = min(_439, _436);
    float _443 = min(_440, _437);
    _445 = _441;
    _446 = _442;
    _447 = _443;
  }
  float _449 = _RootShaderParameters_051x;
  float _451 = _RootShaderParameters_050w;
  if (injectedData.toneMapType > 0.f) {
    _449 = DEFAULT_CONTRAST;
    _451 = DEFAULT_BRIGHTNESS;
  }
  float _452 = _445 + -0.5f;
  float _453 = _452 + _451;
  float _454 = _446 + -0.5f;
  float _455 = _454 + _451;
  float _456 = _447 + -0.5f;
  float _457 = _456 + _451;
  float _458 = _453 * _449;
  float _459 = _455 * _449;
  float _460 = _457 * _449;
  float _461 = _458 + 0.5f;
  float _462 = _459 + 0.5f;
  float _463 = _460 + 0.5f;
  float _464 = saturate(_461);
  float _465 = saturate(_462);
  float _466 = saturate(_463);
  SV_Target.x = _464;
  SV_Target.y = _465;
  SV_Target.z = _466;
  SV_Target.w = 0.0f;
  return SV_Target;
}
