#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

Texture2D<float4> Textures_2 : register(t1);

Texture2D<float4> Textures_3 : register(t2);

Texture2D<float4> Textures_4 : register(t3);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_005z : packoffset(c005.z);
  float _RootShaderParameters_005w : packoffset(c005.w);
  float _RootShaderParameters_006x : packoffset(c006.x);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

SamplerState Samplers_2 : register(s1);

SamplerState Samplers_3 : register(s2);

SamplerState Samplers_4 : register(s3);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_4;
  // texture _3 = Textures_3;
  // texture _4 = Textures_2;
  // texture _5 = Textures_1;
  // SamplerState _6 = Samplers_4;
  // SamplerState _7 = Samplers_3;
  // SamplerState _8 = Samplers_2;
  // SamplerState _9 = Samplers_1;
  // cbuffer _10 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _11 = _RootShaderParameters;
  // _12 = _10;
  // _13 = _11;
  float _17[6];
  float _18[6];
  float _19[6];
  float _20[6];
  float _21 = float(_14);
  float _22 = float(_15);
  float _23 = _21 + 0.5f;
  float _24 = _22 + 0.5f;
  float _26 = _RootShaderParameters_042x;
  float _27 = _RootShaderParameters_042y;
  float _28 = _26 * _23;
  float _29 = _27 * _24;
  float _30 = _28 + -0.015625f;
  float _31 = _29 + -0.015625f;
  float _32 = _30 * 1.0322580337524414f;
  float _33 = _31 * 1.0322580337524414f;
  float _34 = float(_16);
  float _35 = _34 * 0.032258063554763794f;
  uint _37 = _RootShaderParameters_041x;
  bool _38 = (_37 == 1);
  float _55 = 1.379158854484558f;
  float _56 = -0.3088507056236267f;
  float _57 = -0.07034677267074585f;
  float _58 = -0.06933528929948807f;
  float _59 = 1.0822921991348267f;
  float _60 = -0.012962047010660172f;
  float _61 = -0.002159259282052517f;
  float _62 = -0.045465391129255295f;
  float _63 = 1.0477596521377563f;
  float _121;
  float _122;
  float _123;
  float _647;
  float _683;
  float _694;
  float _758;
  float _937;
  float _948;
  float _959;
  float _1209;
  float _1210;
  float _1211;
  float _1222;
  float _1233;
  float _1415;
  float _1451;
  float _1462;
  float _1501;
  float _1611;
  float _1685;
  float _1759;
  float _1838;
  float _1839;
  float _1840;
  float _1991;
  float _2027;
  float _2038;
  float _2077;
  float _2187;
  float _2261;
  float _2335;
  float _2414;
  float _2415;
  float _2416;
  float _2593;
  float _2594;
  float _2595;
  if (!_38) {
    bool _40 = (_37 == 2);
    _55 = 1.02579927444458f;
    _56 = -0.020052503794431686f;
    _57 = -0.0057713985443115234f;
    _58 = -0.0022350111976265907f;
    _59 = 1.0045825242996216f;
    _60 = -0.002352306619286537f;
    _61 = -0.005014004185795784f;
    _62 = -0.025293385609984398f;
    _63 = 1.0304402112960815f;
    if (!_40) {
      bool _42 = (_37 == 3);
      _55 = 0.6954522132873535f;
      _56 = 0.14067870378494263f;
      _57 = 0.16386906802654266f;
      _58 = 0.044794563204050064f;
      _59 = 0.8596711158752441f;
      _60 = 0.0955343171954155f;
      _61 = -0.005525882821530104f;
      _62 = 0.004025210160762072f;
      _63 = 1.0015007257461548f;
      if (!_42) {
        bool _44 = (_37 == 4);
        float _45 = _44 ? 1.0f : 1.7050515413284302f;
        float _46 = _44 ? 0.0f : -0.6217905879020691f;
        float _47 = _44 ? 0.0f : -0.0832584798336029f;
        float _48 = _44 ? 0.0f : -0.13025718927383423f;
        float _49 = _44 ? 1.0f : 1.1408027410507202f;
        float _50 = _44 ? 0.0f : -0.010548528283834457f;
        float _51 = _44 ? 0.0f : -0.024003278464078903f;
        float _52 = _44 ? 0.0f : -0.1289687603712082f;
        float _53 = _44 ? 1.0f : 1.152971863746643f;
        _55 = _45;
        _56 = _46;
        _57 = _47;
        _58 = _48;
        _59 = _49;
        _60 = _50;
        _61 = _51;
        _62 = _52;
        _63 = _53;
      }
    }
  }
  uint _65 = _RootShaderParameters_040w;
  bool _66 = (_65 > 2);
  if (_66) {
    float _68 = log2(_32);
    float _69 = log2(_33);
    float _70 = log2(_35);
    float _71 = _68 * 0.012683313339948654f;
    float _72 = _69 * 0.012683313339948654f;
    float _73 = _70 * 0.012683313339948654f;
    float _74 = exp2(_71);
    float _75 = exp2(_72);
    float _76 = exp2(_73);
    float _77 = _74 + -0.8359375f;
    float _78 = _75 + -0.8359375f;
    float _79 = _76 + -0.8359375f;
    float _80 = max(0.0f, _77);
    float _81 = max(0.0f, _78);
    float _82 = max(0.0f, _79);
    float _83 = _74 * 18.6875f;
    float _84 = _75 * 18.6875f;
    float _85 = _76 * 18.6875f;
    float _86 = 18.8515625f - _83;
    float _87 = 18.8515625f - _84;
    float _88 = 18.8515625f - _85;
    float _89 = _80 / _86;
    float _90 = _81 / _87;
    float _91 = _82 / _88;
    float _92 = log2(_89);
    float _93 = log2(_90);
    float _94 = log2(_91);
    float _95 = _92 * 6.277394771575928f;
    float _96 = _93 * 6.277394771575928f;
    float _97 = _94 * 6.277394771575928f;
    float _98 = exp2(_95);
    float _99 = exp2(_96);
    float _100 = exp2(_97);
    float _101 = _98 * 100.0f;
    float _102 = _99 * 100.0f;
    float _103 = _100 * 100.0f;
    _121 = _101;
    _122 = _102;
    _123 = _103;
  } else {
    float _105 = _30 * 14.45161247253418f;
    float _106 = _105 + -6.07624626159668f;
    float _107 = _31 * 14.45161247253418f;
    float _108 = _107 + -6.07624626159668f;
    float _109 = _34 * 0.4516128897666931f;
    float _110 = _109 + -6.07624626159668f;
    float _111 = exp2(_106);
    float _112 = exp2(_108);
    float _113 = exp2(_110);
    float _114 = _111 * 0.18000000715255737f;
    float _115 = _112 * 0.18000000715255737f;
    float _116 = _113 * 0.18000000715255737f;
    float _117 = _114 + -0.002667719265446067f;
    float _118 = _115 + -0.002667719265446067f;
    float _119 = _116 + -0.002667719265446067f;
    _121 = _117;
    _122 = _118;
    _123 = _119;
  }
  float3 input_color = float3(_121, _122, _123);  // CustomEdit

  float _125 = UniformBufferConstants_WorkingColorSpace_008x;
  float _126 = UniformBufferConstants_WorkingColorSpace_008y;
  float _127 = UniformBufferConstants_WorkingColorSpace_008z;
  float _129 = UniformBufferConstants_WorkingColorSpace_009x;
  float _130 = UniformBufferConstants_WorkingColorSpace_009y;
  float _131 = UniformBufferConstants_WorkingColorSpace_009z;
  float _133 = UniformBufferConstants_WorkingColorSpace_010x;
  float _134 = UniformBufferConstants_WorkingColorSpace_010y;
  float _135 = UniformBufferConstants_WorkingColorSpace_010z;
  float _136 = _125 * _121;
  float _137 = mad(_126, _122, _136);
  float _138 = mad(_127, _123, _137);
  float _139 = _129 * _121;
  float _140 = mad(_130, _122, _139);
  float _141 = mad(_131, _123, _140);
  float _142 = _133 * _121;
  float _143 = mad(_134, _122, _142);
  float _144 = mad(_135, _123, _143);
  float _145 = dot(float3(_138, _141, _144), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _146 = _138 / _145;
  float _147 = _141 / _145;
  float _148 = _144 / _145;
  float _149 = _146 + -1.0f;
  float _150 = _147 + -1.0f;
  float _151 = _148 + -1.0f;
  float _152 = dot(float3(_149, _150, _151), float3(_149, _150, _151));
  float _153 = _152 * -4.0f;
  float _154 = exp2(_153);
  float _155 = 1.0f - _154;
  float _157 = _RootShaderParameters_036z;
  float _158 = _145 * _145;
  float _159 = _158 * -4.0f;
  float _160 = _159 * _157;
  float _161 = exp2(_160);
  float _162 = 1.0f - _161;
  float _163 = _162 * _155;
  float _164 = _138 * 1.370412826538086f;
  float _165 = mad(-0.32929131388664246f, _141, _164);
  float _166 = mad(-0.06368283927440643f, _144, _165);
  float _167 = _138 * -0.08343426138162613f;
  float _168 = mad(1.0970908403396606f, _141, _167);
  float _169 = mad(-0.010861567221581936f, _144, _168);
  float _170 = _138 * -0.02579325996339321f;
  float _171 = mad(-0.09862564504146576f, _141, _170);
  float _172 = mad(1.203694462776184f, _144, _171);
  float _173 = _166 - _138;
  float _174 = _169 - _141;
  float _175 = _172 - _144;
  float _176 = _173 * _163;
  float _177 = _174 * _163;
  float _178 = _175 * _163;
  float _179 = _176 + _138;
  float _180 = _177 + _141;
  float _181 = _178 + _144;
  float _182 = dot(float3(_179, _180, _181), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _184 = _RootShaderParameters_024x;
  float _185 = _RootShaderParameters_024y;
  float _186 = _RootShaderParameters_024z;
  float _187 = _RootShaderParameters_024w;
  float _189 = _RootShaderParameters_019x;
  float _190 = _RootShaderParameters_019y;
  float _191 = _RootShaderParameters_019z;
  float _192 = _RootShaderParameters_019w;
  float _193 = _189 + _184;
  float _194 = _190 + _185;
  float _195 = _191 + _186;
  float _196 = _192 + _187;
  float _198 = _RootShaderParameters_023x;
  float _199 = _RootShaderParameters_023y;
  float _200 = _RootShaderParameters_023z;
  float _201 = _RootShaderParameters_023w;
  float _203 = _RootShaderParameters_018x;
  float _204 = _RootShaderParameters_018y;
  float _205 = _RootShaderParameters_018z;
  float _206 = _RootShaderParameters_018w;
  float _207 = _203 * _198;
  float _208 = _204 * _199;
  float _209 = _205 * _200;
  float _210 = _206 * _201;
  float _212 = _RootShaderParameters_022x;
  float _213 = _RootShaderParameters_022y;
  float _214 = _RootShaderParameters_022z;
  float _215 = _RootShaderParameters_022w;
  float _217 = _RootShaderParameters_017x;
  float _218 = _RootShaderParameters_017y;
  float _219 = _RootShaderParameters_017z;
  float _220 = _RootShaderParameters_017w;
  float _221 = _217 * _212;
  float _222 = _218 * _213;
  float _223 = _219 * _214;
  float _224 = _220 * _215;
  float _226 = _RootShaderParameters_021x;
  float _227 = _RootShaderParameters_021y;
  float _228 = _RootShaderParameters_021z;
  float _229 = _RootShaderParameters_021w;
  float _231 = _RootShaderParameters_016x;
  float _232 = _RootShaderParameters_016y;
  float _233 = _RootShaderParameters_016z;
  float _234 = _RootShaderParameters_016w;
  float _235 = _231 * _226;
  float _236 = _232 * _227;
  float _237 = _233 * _228;
  float _238 = _234 * _229;
  float _240 = _RootShaderParameters_020x;
  float _241 = _RootShaderParameters_020y;
  float _242 = _RootShaderParameters_020z;
  float _243 = _RootShaderParameters_020w;
  float _245 = _RootShaderParameters_015x;
  float _246 = _RootShaderParameters_015y;
  float _247 = _RootShaderParameters_015z;
  float _248 = _RootShaderParameters_015w;
  float _249 = _245 * _240;
  float _250 = _246 * _241;
  float _251 = _247 * _242;
  float _252 = _248 * _243;
  float _253 = _249 * _252;
  float _254 = _250 * _252;
  float _255 = _251 * _252;
  float _256 = _179 - _182;
  float _257 = _180 - _182;
  float _258 = _181 - _182;
  float _259 = _253 * _256;
  float _260 = _254 * _257;
  float _261 = _255 * _258;
  float _262 = _259 + _182;
  float _263 = _260 + _182;
  float _264 = _261 + _182;
  float _265 = max(0.0f, _262);
  float _266 = max(0.0f, _263);
  float _267 = max(0.0f, _264);
  float _268 = _235 * _238;
  float _269 = _236 * _238;
  float _270 = _237 * _238;
  float _271 = _265 * 5.55555534362793f;
  float _272 = _266 * 5.55555534362793f;
  float _273 = _267 * 5.55555534362793f;
  float _274 = log2(_271);
  float _275 = log2(_272);
  float _276 = log2(_273);
  float _277 = _268 * _274;
  float _278 = _269 * _275;
  float _279 = _270 * _276;
  float _280 = exp2(_277);
  float _281 = exp2(_278);
  float _282 = exp2(_279);
  float _283 = _280 * 0.18000000715255737f;
  float _284 = _281 * 0.18000000715255737f;
  float _285 = _282 * 0.18000000715255737f;
  float _286 = _221 * _224;
  float _287 = _222 * _224;
  float _288 = _223 * _224;
  float _289 = 1.0f / _286;
  float _290 = 1.0f / _287;
  float _291 = 1.0f / _288;
  float _292 = log2(_283);
  float _293 = log2(_284);
  float _294 = log2(_285);
  float _295 = _292 * _289;
  float _296 = _293 * _290;
  float _297 = _294 * _291;
  float _298 = exp2(_295);
  float _299 = exp2(_296);
  float _300 = exp2(_297);
  float _301 = _207 * _210;
  float _302 = _208 * _210;
  float _303 = _209 * _210;
  float _304 = _301 * _298;
  float _305 = _302 * _299;
  float _306 = _303 * _300;
  float _307 = _193 + _196;
  float _308 = _194 + _196;
  float _309 = _195 + _196;
  float _310 = _307 + _304;
  float _311 = _308 + _305;
  float _312 = _309 + _306;
  float _314 = _RootShaderParameters_035z;
  float _315 = _182 / _314;
  float _316 = saturate(_315);
  float _317 = _316 * 2.0f;
  float _318 = 3.0f - _317;
  float _319 = _316 * _316;
  float _320 = _319 * _318;
  float _321 = 1.0f - _320;
  float _323 = _RootShaderParameters_034x;
  float _324 = _RootShaderParameters_034y;
  float _325 = _RootShaderParameters_034z;
  float _326 = _RootShaderParameters_034w;
  float _327 = _189 + _323;
  float _328 = _190 + _324;
  float _329 = _191 + _325;
  float _330 = _192 + _326;
  float _332 = _RootShaderParameters_033x;
  float _333 = _RootShaderParameters_033y;
  float _334 = _RootShaderParameters_033z;
  float _335 = _RootShaderParameters_033w;
  float _336 = _203 * _332;
  float _337 = _204 * _333;
  float _338 = _205 * _334;
  float _339 = _206 * _335;
  float _341 = _RootShaderParameters_032x;
  float _342 = _RootShaderParameters_032y;
  float _343 = _RootShaderParameters_032z;
  float _344 = _RootShaderParameters_032w;
  float _345 = _217 * _341;
  float _346 = _218 * _342;
  float _347 = _219 * _343;
  float _348 = _220 * _344;
  float _350 = _RootShaderParameters_031x;
  float _351 = _RootShaderParameters_031y;
  float _352 = _RootShaderParameters_031z;
  float _353 = _RootShaderParameters_031w;
  float _354 = _231 * _350;
  float _355 = _232 * _351;
  float _356 = _233 * _352;
  float _357 = _234 * _353;
  float _359 = _RootShaderParameters_030x;
  float _360 = _RootShaderParameters_030y;
  float _361 = _RootShaderParameters_030z;
  float _362 = _RootShaderParameters_030w;
  float _363 = _245 * _359;
  float _364 = _246 * _360;
  float _365 = _247 * _361;
  float _366 = _248 * _362;
  float _367 = _363 * _366;
  float _368 = _364 * _366;
  float _369 = _365 * _366;
  float _370 = _367 * _256;
  float _371 = _368 * _257;
  float _372 = _369 * _258;
  float _373 = _370 + _182;
  float _374 = _371 + _182;
  float _375 = _372 + _182;
  float _376 = max(0.0f, _373);
  float _377 = max(0.0f, _374);
  float _378 = max(0.0f, _375);
  float _379 = _354 * _357;
  float _380 = _355 * _357;
  float _381 = _356 * _357;
  float _382 = _376 * 5.55555534362793f;
  float _383 = _377 * 5.55555534362793f;
  float _384 = _378 * 5.55555534362793f;
  float _385 = log2(_382);
  float _386 = log2(_383);
  float _387 = log2(_384);
  float _388 = _379 * _385;
  float _389 = _380 * _386;
  float _390 = _381 * _387;
  float _391 = exp2(_388);
  float _392 = exp2(_389);
  float _393 = exp2(_390);
  float _394 = _391 * 0.18000000715255737f;
  float _395 = _392 * 0.18000000715255737f;
  float _396 = _393 * 0.18000000715255737f;
  float _397 = _345 * _348;
  float _398 = _346 * _348;
  float _399 = _347 * _348;
  float _400 = 1.0f / _397;
  float _401 = 1.0f / _398;
  float _402 = 1.0f / _399;
  float _403 = log2(_394);
  float _404 = log2(_395);
  float _405 = log2(_396);
  float _406 = _403 * _400;
  float _407 = _404 * _401;
  float _408 = _405 * _402;
  float _409 = exp2(_406);
  float _410 = exp2(_407);
  float _411 = exp2(_408);
  float _412 = _336 * _339;
  float _413 = _337 * _339;
  float _414 = _338 * _339;
  float _415 = _412 * _409;
  float _416 = _413 * _410;
  float _417 = _414 * _411;
  float _418 = _327 + _330;
  float _419 = _328 + _330;
  float _420 = _329 + _330;
  float _421 = _418 + _415;
  float _422 = _419 + _416;
  float _423 = _420 + _417;
  float _424 = _RootShaderParameters_036x;
  float _425 = _RootShaderParameters_035w;
  float _426 = _424 - _425;
  float _427 = _182 - _425;
  float _428 = _427 / _426;
  float _429 = saturate(_428);
  float _430 = _429 * 2.0f;
  float _431 = 3.0f - _430;
  float _432 = _429 * _429;
  float _433 = _432 * _431;
  float _435 = _RootShaderParameters_029x;
  float _436 = _RootShaderParameters_029y;
  float _437 = _RootShaderParameters_029z;
  float _438 = _RootShaderParameters_029w;
  float _439 = _189 + _435;
  float _440 = _190 + _436;
  float _441 = _191 + _437;
  float _442 = _192 + _438;
  float _444 = _RootShaderParameters_028x;
  float _445 = _RootShaderParameters_028y;
  float _446 = _RootShaderParameters_028z;
  float _447 = _RootShaderParameters_028w;
  float _448 = _203 * _444;
  float _449 = _204 * _445;
  float _450 = _205 * _446;
  float _451 = _206 * _447;
  float _453 = _RootShaderParameters_027x;
  float _454 = _RootShaderParameters_027y;
  float _455 = _RootShaderParameters_027z;
  float _456 = _RootShaderParameters_027w;
  float _457 = _217 * _453;
  float _458 = _218 * _454;
  float _459 = _219 * _455;
  float _460 = _220 * _456;
  float _462 = _RootShaderParameters_026x;
  float _463 = _RootShaderParameters_026y;
  float _464 = _RootShaderParameters_026z;
  float _465 = _RootShaderParameters_026w;
  float _466 = _231 * _462;
  float _467 = _232 * _463;
  float _468 = _233 * _464;
  float _469 = _234 * _465;
  float _471 = _RootShaderParameters_025x;
  float _472 = _RootShaderParameters_025y;
  float _473 = _RootShaderParameters_025z;
  float _474 = _RootShaderParameters_025w;
  float _475 = _245 * _471;
  float _476 = _246 * _472;
  float _477 = _247 * _473;
  float _478 = _248 * _474;
  float _479 = _475 * _478;
  float _480 = _476 * _478;
  float _481 = _477 * _478;
  float _482 = _479 * _256;
  float _483 = _480 * _257;
  float _484 = _481 * _258;
  float _485 = _482 + _182;
  float _486 = _483 + _182;
  float _487 = _484 + _182;
  float _488 = max(0.0f, _485);
  float _489 = max(0.0f, _486);
  float _490 = max(0.0f, _487);
  float _491 = _466 * _469;
  float _492 = _467 * _469;
  float _493 = _468 * _469;
  float _494 = _488 * 5.55555534362793f;
  float _495 = _489 * 5.55555534362793f;
  float _496 = _490 * 5.55555534362793f;
  float _497 = log2(_494);
  float _498 = log2(_495);
  float _499 = log2(_496);
  float _500 = _491 * _497;
  float _501 = _492 * _498;
  float _502 = _493 * _499;
  float _503 = exp2(_500);
  float _504 = exp2(_501);
  float _505 = exp2(_502);
  float _506 = _503 * 0.18000000715255737f;
  float _507 = _504 * 0.18000000715255737f;
  float _508 = _505 * 0.18000000715255737f;
  float _509 = _457 * _460;
  float _510 = _458 * _460;
  float _511 = _459 * _460;
  float _512 = 1.0f / _509;
  float _513 = 1.0f / _510;
  float _514 = 1.0f / _511;
  float _515 = log2(_506);
  float _516 = log2(_507);
  float _517 = log2(_508);
  float _518 = _515 * _512;
  float _519 = _516 * _513;
  float _520 = _517 * _514;
  float _521 = exp2(_518);
  float _522 = exp2(_519);
  float _523 = exp2(_520);
  float _524 = _448 * _451;
  float _525 = _449 * _451;
  float _526 = _450 * _451;
  float _527 = _524 * _521;
  float _528 = _525 * _522;
  float _529 = _526 * _523;
  float _530 = _439 + _442;
  float _531 = _440 + _442;
  float _532 = _441 + _442;
  float _533 = _530 + _527;
  float _534 = _531 + _528;
  float _535 = _532 + _529;
  float _536 = _320 - _433;
  float _537 = _321 * _310;
  float _538 = _321 * _311;
  float _539 = _321 * _312;
  float _540 = _533 * _536;
  float _541 = _534 * _536;
  float _542 = _535 * _536;
  float _543 = _433 * _421;
  float _544 = _433 * _422;
  float _545 = _433 * _423;
  float _546 = _543 + _537;
  float _547 = _546 + _540;
  float _548 = _544 + _538;
  float _549 = _548 + _541;
  float _550 = _545 + _539;
  float _551 = _550 + _542;
  float _553 = UniformBufferConstants_WorkingColorSpace_012x;
  float _554 = UniformBufferConstants_WorkingColorSpace_012y;
  float _555 = UniformBufferConstants_WorkingColorSpace_012z;
  float _557 = UniformBufferConstants_WorkingColorSpace_013x;
  float _558 = UniformBufferConstants_WorkingColorSpace_013y;
  float _559 = UniformBufferConstants_WorkingColorSpace_013z;
  float _561 = UniformBufferConstants_WorkingColorSpace_014x;
  float _562 = UniformBufferConstants_WorkingColorSpace_014y;
  float _563 = UniformBufferConstants_WorkingColorSpace_014z;
  float _564 = _547 * _553;
  float _565 = mad(_554, _549, _564);
  float _566 = mad(_555, _551, _565);
  float _567 = _557 * _547;
  float _568 = mad(_558, _549, _567);
  float _569 = mad(_559, _551, _568);
  float _570 = _561 * _547;
  float _571 = mad(_562, _549, _570);
  float _572 = mad(_563, _551, _571);
  float _573 = _RootShaderParameters_036y;
  float _574 = _547 * 0.9386394023895264f;
  float _575 = mad(-4.540197551250458e-09f, _549, _574);
  float _576 = mad(0.061360642313957214f, _551, _575);
  float _577 = _547 * 6.775371730327606e-08f;
  float _578 = mad(0.8307942152023315f, _549, _577);
  float _579 = mad(0.169205904006958f, _551, _578);
  float _580 = _547 * -9.313225746154785e-10f;
  float _581 = mad(-2.3283064365386963e-10f, _549, _580);
  float _582 = _576 - _547;
  float _583 = _579 - _549;
  float _584 = _582 * _573;
  float _585 = _583 * _573;
  float _586 = _581 * _573;
  float _587 = _584 + _547;
  float _588 = _585 + _549;
  float _589 = _586 + _551;
  float3 ap1_graded_color = float3(_587, _588, _589);  // CustomEdit

  float _590 = _587 * 0.6954522132873535f;
  float _591 = mad(0.14067868888378143f, _588, _590);
  float _592 = mad(0.16386905312538147f, _589, _591);
  float _593 = _587 * 0.044794581830501556f;
  float _594 = mad(0.8596711158752441f, _588, _593);
  float _595 = mad(0.0955343246459961f, _589, _594);
  float _596 = _587 * -0.005525882821530104f;
  float _597 = mad(0.004025210160762072f, _588, _596);
  float _598 = mad(1.0015007257461548f, _589, _597);
  float _599 = min(_592, _595);
  float _600 = min(_599, _598);
  float _601 = max(_592, _595);
  float _602 = max(_601, _598);
  float _603 = max(_602, 1.000000013351432e-10f);
  float _604 = max(_600, 1.000000013351432e-10f);
  float _605 = _603 - _604;
  float _606 = max(_602, 0.009999999776482582f);
  float _607 = _605 / _606;
  float _608 = _598 - _595;
  float _609 = _608 * _598;
  float _610 = _595 - _592;
  float _611 = _610 * _595;
  float _612 = _609 + _611;
  float _613 = _592 - _598;
  float _614 = _613 * _592;
  float _615 = _612 + _614;
  float _616 = sqrt(_615);
  float _617 = _616 * 1.75f;
  float _618 = _595 + _592;
  float _619 = _618 + _598;
  float _620 = _619 + _617;
  float _621 = _620 * 0.3333333432674408f;
  float _622 = _607 + -0.4000000059604645f;
  float _623 = _622 * 5.0f;
  float _624 = _622 * 2.5f;
  float _625 = abs(_624);
  float _626 = 1.0f - _625;
  float _627 = max(_626, 0.0f);
  bool _628 = (_623 > 0.0f);
  bool _629 = (_623 < 0.0f);
  int _630 = int(_628);
  int _631 = int(_629);
  int _632 = _630 - _631;
  float _633 = float(_632);
  float _634 = _627 * _627;
  float _635 = 1.0f - _634;
  float _636 = _633 * _635;
  float _637 = _636 + 1.0f;
  float _638 = _637 * 0.02500000037252903f;
  bool _639 = !(_621 <= 0.0533333346247673f);
  _647 = _638;
  if (_639) {
    bool _641 = !(_621 >= 0.1599999964237213f);
    _647 = 0.0f;
    if (_641) {
      float _643 = 0.23999999463558197f / _620;
      float _644 = _643 + -0.5f;
      float _645 = _644 * _638;
      _647 = _645;
    }
  }
  float _648 = _647 + 1.0f;
  float _649 = _648 * _592;
  float _650 = _648 * _595;
  float _651 = _648 * _598;
  bool _652 = (_649 == _650);
  bool _653 = (_650 == _651);
  bool _654 = _652 && _653;
  _683 = 0.0f;
  if (!_654) {
    float _656 = _649 * 2.0f;
    float _657 = _656 - _650;
    float _658 = _657 - _651;
    float _659 = _595 - _598;
    float _660 = _659 * 1.7320507764816284f;
    float _661 = _660 * _648;
    float _662 = _661 / _658;
    float _663 = atan(_662);
    float _664 = _663 + 3.1415927410125732f;
    float _665 = _663 + -3.1415927410125732f;
    bool _666 = (_658 < 0.0f);
    bool _667 = (_658 == 0.0f);
    bool _668 = (_661 >= 0.0f);
    bool _669 = (_661 < 0.0f);
    bool _670 = _668 && _666;
    float _671 = _670 ? _664 : _663;
    bool _672 = _669 && _666;
    float _673 = _672 ? _665 : _671;
    bool _674 = _669 && _667;
    bool _675 = _668 && _667;
    float _676 = _673 * 57.2957763671875f;
    float _677 = _674 ? -90.0f : _676;
    float _678 = _675 ? 90.0f : _677;
    bool _679 = (_678 < 0.0f);
    _683 = _678;
    if (_679) {
      float _681 = _678 + 360.0f;
      _683 = _681;
    }
  }
  float _684 = max(_683, 0.0f);
  float _685 = min(_684, 360.0f);
  bool _686 = (_685 < -180.0f);
  if (_686) {
    float _688 = _685 + 360.0f;
    _694 = _688;
  } else {
    bool _690 = (_685 > 180.0f);
    _694 = _685;
    if (_690) {
      float _692 = _685 + -360.0f;
      _694 = _692;
    }
  }
  float _695 = _694 * 0.014814814552664757f;
  float _696 = abs(_695);
  float _697 = 1.0f - _696;
  float _698 = saturate(_697);
  float _699 = _698 * 2.0f;
  float _700 = 3.0f - _699;
  float _701 = _698 * _698;
  float _702 = _701 * _700;
  float _703 = 0.029999999329447746f - _649;
  float _704 = _607 * 0.18000000715255737f;
  float _705 = _704 * _703;
  float _706 = _702 * _702;
  float _707 = _706 * _705;
  float _708 = _707 + _649;
  float _709 = _708 * 1.4514392614364624f;
  float _710 = mad(-0.2365107536315918f, _650, _709);
  float _711 = mad(-0.21492856740951538f, _651, _710);
  float _712 = _708 * -0.07655377686023712f;
  float _713 = mad(1.17622971534729f, _650, _712);
  float _714 = mad(-0.09967592358589172f, _651, _713);
  float _715 = _708 * 0.008316148072481155f;
  float _716 = mad(-0.006032449658960104f, _650, _715);
  float _717 = mad(0.9977163076400757f, _651, _716);
  float _718 = max(0.0f, _711);
  float _719 = max(0.0f, _714);
  float _720 = max(0.0f, _717);
  float _721 = dot(float3(_718, _719, _720), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _722 = _718 - _721;
  float _723 = _719 - _721;
  float _724 = _720 - _721;
  float _725 = _722 * 0.9599999785423279f;
  float _726 = _723 * 0.9599999785423279f;
  float _727 = _724 * 0.9599999785423279f;
  float _728 = _725 + _721;
  float _729 = _726 + _721;
  float _730 = _727 + _721;

  float3 ap1_aces_colored = float3(_728, _729, _730);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _732 = _RootShaderParameters_037w;
  float _733 = _732 + 1.0f;
  float _734 = _RootShaderParameters_037y;
  float _735 = _733 - _734;
  float _737 = _RootShaderParameters_038x;
  float _738 = _737 + 1.0f;
  float _739 = _RootShaderParameters_037z;
  float _740 = _738 - _739;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _741 = (_734 > 0.800000011920929f);
    float _742 = _RootShaderParameters_037x;
    if (_741) {
      float _744 = 0.8199999928474426f - _734;
      float _745 = _744 / _742;
      float _746 = _745 + -0.7447274923324585f;
      _758 = _746;
    } else {
      float _748 = _732 + 0.18000000715255737f;
      float _749 = _748 / _735;
      float _750 = 2.0f - _749;
      float _751 = _749 / _750;
      float _752 = log2(_751);
      float _753 = _752 * 0.3465735912322998f;
      float _754 = _735 / _742;
      float _755 = _753 * _754;
      float _756 = -0.7447274923324585f - _755;
      _758 = _756;
    }
    float _759 = 1.0f - _734;
    float _760 = _759 / _742;
    float _761 = _760 - _758;
    float _762 = _739 / _742;
    float _763 = _762 - _761;
    float _764 = log2(_728);
    float _765 = log2(_729);
    float _766 = log2(_730);
    float _767 = _764 * 0.3010300099849701f;
    float _768 = _765 * 0.3010300099849701f;
    float _769 = _766 * 0.3010300099849701f;
    float _770 = _767 + _761;
    float _771 = _768 + _761;
    float _772 = _769 + _761;
    float _773 = _742 * _770;
    float _774 = _742 * _771;
    float _775 = _742 * _772;
    float _776 = _735 * 2.0f;
    float _777 = _742 * -2.0f;
    float _778 = _777 / _735;
    float _779 = _767 - _758;
    float _780 = _768 - _758;
    float _781 = _769 - _758;
    float _782 = _779 * 1.4426950216293335f;
    float _783 = _782 * _778;
    float _784 = _780 * 1.4426950216293335f;
    float _785 = _784 * _778;
    float _786 = _781 * 1.4426950216293335f;
    float _787 = _786 * _778;
    float _788 = exp2(_783);
    float _789 = exp2(_785);
    float _790 = exp2(_787);
    float _791 = _788 + 1.0f;
    float _792 = _789 + 1.0f;
    float _793 = _790 + 1.0f;
    float _794 = _776 / _791;
    float _795 = _776 / _792;
    float _796 = _776 / _793;
    float _797 = _794 - _732;
    float _798 = _795 - _732;
    float _799 = _796 - _732;
    float _800 = _740 * 2.0f;
    float _801 = _742 * 2.0f;
    float _802 = _801 / _740;
    float _803 = _767 - _763;
    float _804 = _768 - _763;
    float _805 = _769 - _763;
    float _806 = _803 * 1.4426950216293335f;
    float _807 = _806 * _802;
    float _808 = _804 * 1.4426950216293335f;
    float _809 = _808 * _802;
    float _810 = _805 * 1.4426950216293335f;
    float _811 = _810 * _802;
    float _812 = exp2(_807);
    float _813 = exp2(_809);
    float _814 = exp2(_811);
    float _815 = _812 + 1.0f;
    float _816 = _813 + 1.0f;
    float _817 = _814 + 1.0f;
    float _818 = _800 / _815;
    float _819 = _800 / _816;
    float _820 = _800 / _817;
    float _821 = _738 - _818;
    float _822 = _738 - _819;
    float _823 = _738 - _820;
    bool _824 = (_767 < _758);
    bool _825 = (_768 < _758);
    bool _826 = (_769 < _758);
    float _827 = _824 ? _797 : _773;
    float _828 = _825 ? _798 : _774;
    float _829 = _826 ? _799 : _775;
    bool _830 = (_767 > _763);
    bool _831 = (_768 > _763);
    bool _832 = (_769 > _763);
    float _833 = _830 ? _821 : _773;
    float _834 = _831 ? _822 : _774;
    float _835 = _832 ? _823 : _775;
    float _836 = _763 - _758;
    float _837 = _779 / _836;
    float _838 = _780 / _836;
    float _839 = _781 / _836;
    float _840 = saturate(_837);
    float _841 = saturate(_838);
    float _842 = saturate(_839);
    bool _843 = (_763 < _758);
    float _844 = 1.0f - _840;
    float _845 = 1.0f - _841;
    float _846 = 1.0f - _842;
    float _847 = _843 ? _844 : _840;
    float _848 = _843 ? _845 : _841;
    float _849 = _843 ? _846 : _842;
    float _850 = _847 * 2.0f;
    float _851 = _848 * 2.0f;
    float _852 = _849 * 2.0f;
    float _853 = 3.0f - _850;
    float _854 = 3.0f - _851;
    float _855 = 3.0f - _852;
    float _856 = _833 - _827;
    float _857 = _834 - _828;
    float _858 = _835 - _829;
    float _859 = _847 * _847;
    float _860 = _859 * _856;
    float _861 = _860 * _853;
    float _862 = _848 * _848;
    float _863 = _862 * _857;
    float _864 = _863 * _854;
    float _865 = _849 * _849;
    float _866 = _865 * _858;
    float _867 = _866 * _855;
    float _868 = _861 + _827;
    float _869 = _864 + _828;
    float _870 = _867 + _829;
    float _871 = dot(float3(_868, _869, _870), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _872 = _868 - _871;
    float _873 = _869 - _871;
    float _874 = _870 - _871;
    float _875 = _872 * 0.9300000071525574f;
    float _876 = _873 * 0.9300000071525574f;
    float _877 = _874 * 0.9300000071525574f;
    float _878 = _875 + _871;
    float _879 = _876 + _871;
    float _880 = _877 + _871;
    float _881 = max(0.0f, _878);
    float _882 = max(0.0f, _879);
    float _883 = max(0.0f, _880);
    sdr_ap1_color = float3(_881, _882, _883);
    // end of FilmToneMap
  }

  float _884 = _RootShaderParameters_036w;
  /* float _885 = _881 - _587;
  float _886 = _882 - _588;
  float _887 = _883 - _589; */
  float _885 = sdr_ap1_color.r - _587;
  float _886 = sdr_ap1_color.g - _588;
  float _887 = sdr_ap1_color.b - _589;
  // CustomEdit

  float _888 = _884 * _885;
  float _889 = _884 * _886;
  float _890 = _884 * _887;
  float _891 = _888 + _587;
  float _892 = _889 + _588;
  float _893 = _890 + _589;
  float _894 = _891 * 1.065374732017517f;
  float _895 = mad(1.451815478503704e-06f, _892, _894);
  float _896 = mad(-0.06537103652954102f, _893, _895);
  float _897 = _891 * -2.57161445915699e-07f;
  float _898 = mad(1.2036634683609009f, _892, _897);
  float _899 = mad(-0.20366770029067993f, _893, _898);
  float _900 = _891 * 1.862645149230957e-08f;
  float _901 = mad(2.0954757928848267e-08f, _892, _900);
  float _902 = mad(0.9999996423721313f, _893, _901);
  float _903 = _896 - _891;
  float _904 = _899 - _892;
  float _905 = _902 - _893;
  float _906 = _903 * _573;
  float _907 = _904 * _573;
  float _908 = _905 * _573;
  float _909 = _906 + _891;
  float _910 = _907 + _892;
  float _911 = _908 + _893;
  float _912 = _553 * _909;
  float _913 = mad(_554, _910, _912);
  float _914 = mad(_555, _911, _913);
  float _915 = _557 * _909;
  float _916 = mad(_558, _910, _915);
  float _917 = mad(_559, _911, _916);
  float _918 = _561 * _909;
  float _919 = mad(_562, _910, _918);
  float _920 = mad(_563, _911, _919);
  float _921 = max(0.0f, _914);
  float _922 = max(0.0f, _917);
  float _923 = max(0.0f, _920);
  float3 lut_input_color = float3(_921, _922, _923);  // CustomEdit
  float _1104;                                        // custom branch
  float _1105;                                        // custom branch
  float _1106;                                        // custom branch

  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1104 = post_lut_color.r;
    _1105 = post_lut_color.g;
    _1106 = post_lut_color.b;
  } else {
    float _924 = saturate(_921);
    float _925 = saturate(_922);
    float _926 = saturate(_923);
    bool _927 = (_924 < 0.0031306699384003878f);
    if (_927) {
      float _929 = _924 * 12.920000076293945f;
      _937 = _929;
    } else {
      float _931 = log2(_924);
      float _932 = _931 * 0.4166666567325592f;
      float _933 = exp2(_932);
      float _934 = _933 * 1.0549999475479126f;
      float _935 = _934 + -0.054999999701976776f;
      _937 = _935;
    }
    bool _938 = (_925 < 0.0031306699384003878f);
    if (_938) {
      float _940 = _925 * 12.920000076293945f;
      _948 = _940;
    } else {
      float _942 = log2(_925);
      float _943 = _942 * 0.4166666567325592f;
      float _944 = exp2(_943);
      float _945 = _944 * 1.0549999475479126f;
      float _946 = _945 + -0.054999999701976776f;
      _948 = _946;
    }
    bool _949 = (_926 < 0.0031306699384003878f);
    if (_949) {
      float _951 = _926 * 12.920000076293945f;
      _959 = _951;
    } else {
      float _953 = log2(_926);
      float _954 = _953 * 0.4166666567325592f;
      float _955 = exp2(_954);
      float _956 = _955 * 1.0549999475479126f;
      float _957 = _956 + -0.054999999701976776f;
      _959 = _957;
    }
    float _960 = _937 * 0.9375f;
    float _961 = _948 * 0.9375f;
    float _962 = _960 + 0.03125f;
    float _963 = _961 + 0.03125f;
    float _965 = _RootShaderParameters_005x;
    float _966 = _965 * _937;
    float _967 = _965 * _948;
    float _968 = _965 * _959;
    float _969 = _RootShaderParameters_005y;
    float _970 = _959 * 15.0f;
    float _971 = floor(_970);
    float _972 = _970 - _971;
    float _973 = _971 + _962;
    float _974 = _973 * 0.0625f;
    // _975 = _5;
    // _976 = _9;
    float4 _977 = Textures_1.SampleLevel(Samplers_1, float2(_974, _963), 0.0f);
    float _978 = _977.x;
    float _979 = _977.y;
    float _980 = _977.z;
    float _981 = _974 + 0.0625f;
    float4 _982 = Textures_1.SampleLevel(Samplers_1, float2(_981, _963), 0.0f);
    float _983 = _982.x;
    float _984 = _982.y;
    float _985 = _982.z;
    float _986 = _983 - _978;
    float _987 = _984 - _979;
    float _988 = _985 - _980;
    float _989 = _986 * _972;
    float _990 = _987 * _972;
    float _991 = _988 * _972;
    float _992 = _989 + _978;
    float _993 = _990 + _979;
    float _994 = _991 + _980;
    float _995 = _992 * _969;
    float _996 = _993 * _969;
    float _997 = _994 * _969;
    float _998 = _995 + _966;
    float _999 = _996 + _967;
    float _1000 = _997 + _968;
    float _1001 = _RootShaderParameters_005z;
    // _1002 = _4;
    // _1003 = _8;
    float4 _1004 = Textures_2.SampleLevel(Samplers_2, float2(_974, _963), 0.0f);
    float _1005 = _1004.x;
    float _1006 = _1004.y;
    float _1007 = _1004.z;
    float4 _1008 = Textures_2.SampleLevel(Samplers_2, float2(_981, _963), 0.0f);
    float _1009 = _1008.x;
    float _1010 = _1008.y;
    float _1011 = _1008.z;
    float _1012 = _1009 - _1005;
    float _1013 = _1010 - _1006;
    float _1014 = _1011 - _1007;
    float _1015 = _1012 * _972;
    float _1016 = _1013 * _972;
    float _1017 = _1014 * _972;
    float _1018 = _1015 + _1005;
    float _1019 = _1016 + _1006;
    float _1020 = _1017 + _1007;
    float _1021 = _1018 * _1001;
    float _1022 = _1019 * _1001;
    float _1023 = _1020 * _1001;
    float _1024 = _998 + _1021;
    float _1025 = _999 + _1022;
    float _1026 = _1000 + _1023;
    float _1027 = _RootShaderParameters_005w;
    // _1028 = _3;
    // _1029 = _7;
    float4 _1030 = Textures_3.SampleLevel(Samplers_3, float2(_974, _963), 0.0f);
    float _1031 = _1030.x;
    float _1032 = _1030.y;
    float _1033 = _1030.z;
    float4 _1034 = Textures_3.SampleLevel(Samplers_3, float2(_981, _963), 0.0f);
    float _1035 = _1034.x;
    float _1036 = _1034.y;
    float _1037 = _1034.z;
    float _1038 = _1035 - _1031;
    float _1039 = _1036 - _1032;
    float _1040 = _1037 - _1033;
    float _1041 = _1038 * _972;
    float _1042 = _1039 * _972;
    float _1043 = _1040 * _972;
    float _1044 = _1041 + _1031;
    float _1045 = _1042 + _1032;
    float _1046 = _1043 + _1033;
    float _1047 = _1044 * _1027;
    float _1048 = _1045 * _1027;
    float _1049 = _1046 * _1027;
    float _1050 = _1024 + _1047;
    float _1051 = _1025 + _1048;
    float _1052 = _1026 + _1049;
    float _1054 = _RootShaderParameters_006x;
    // _1055 = _2;
    // _1056 = _6;
    float4 _1057 = Textures_4.SampleLevel(Samplers_4, float2(_974, _963), 0.0f);
    float _1058 = _1057.x;
    float _1059 = _1057.y;
    float _1060 = _1057.z;
    float4 _1061 = Textures_4.SampleLevel(Samplers_4, float2(_981, _963), 0.0f);
    float _1062 = _1061.x;
    float _1063 = _1061.y;
    float _1064 = _1061.z;
    float _1065 = _1062 - _1058;
    float _1066 = _1063 - _1059;
    float _1067 = _1064 - _1060;
    float _1068 = _1065 * _972;
    float _1069 = _1066 * _972;
    float _1070 = _1067 * _972;
    float _1071 = _1068 + _1058;
    float _1072 = _1069 + _1059;
    float _1073 = _1070 + _1060;
    float _1074 = _1071 * _1054;
    float _1075 = _1072 * _1054;
    float _1076 = _1073 * _1054;
    float _1077 = _1050 + _1074;
    float _1078 = _1051 + _1075;
    float _1079 = _1052 + _1076;
    float _1080 = max(6.103519990574569e-05f, _1077);
    float _1081 = max(6.103519990574569e-05f, _1078);
    float _1082 = max(6.103519990574569e-05f, _1079);
    float _1083 = _1080 * 0.07739938050508499f;
    float _1084 = _1081 * 0.07739938050508499f;
    float _1085 = _1082 * 0.07739938050508499f;
    float _1086 = _1080 * 0.9478672742843628f;
    float _1087 = _1081 * 0.9478672742843628f;
    float _1088 = _1082 * 0.9478672742843628f;
    float _1089 = _1086 + 0.05213269963860512f;
    float _1090 = _1087 + 0.05213269963860512f;
    float _1091 = _1088 + 0.05213269963860512f;
    float _1092 = log2(_1089);
    float _1093 = log2(_1090);
    float _1094 = log2(_1091);
    float _1095 = _1092 * 2.4000000953674316f;
    float _1096 = _1093 * 2.4000000953674316f;
    float _1097 = _1094 * 2.4000000953674316f;
    float _1098 = exp2(_1095);
    float _1099 = exp2(_1096);
    float _1100 = exp2(_1097);
    bool _1101 = (_1080 > 0.040449999272823334f);
    bool _1102 = (_1081 > 0.040449999272823334f);
    bool _1103 = (_1082 > 0.040449999272823334f);
    // CustomEdit

    /* float _1104 = _1101 ? _1098 : _1083;
    float _1105 = _1102 ? _1099 : _1084;
    float _1106 = _1103 ? _1100 : _1085; */
    _1104 = _1101 ? _1098 : _1083;
    _1105 = _1102 ? _1099 : _1084;
    _1106 = _1103 ? _1100 : _1085;
  }

  float _1108 = _RootShaderParameters_039x;
  float _1109 = _1108 * _1104;
  float _1110 = _1108 * _1105;
  float _1111 = _1108 * _1106;
  float _1112 = _RootShaderParameters_039y;
  float _1113 = _RootShaderParameters_039z;
  float _1114 = _1112 + _1109;
  float _1115 = _1114 * _1104;
  float _1116 = _1115 + _1113;
  float _1117 = _1112 + _1110;
  float _1118 = _1117 * _1105;
  float _1119 = _1118 + _1113;
  float _1120 = _1112 + _1111;
  float _1121 = _1120 * _1106;
  float _1122 = _1121 + _1113;
  float _1124 = _RootShaderParameters_013w;
  float _1125 = _RootShaderParameters_013x;
  float _1126 = _RootShaderParameters_013y;
  float _1127 = _RootShaderParameters_013z;
  float _1129 = _RootShaderParameters_014x;
  float _1130 = _RootShaderParameters_014y;
  float _1131 = _RootShaderParameters_014z;
  float _1132 = _1129 * _1116;
  float _1133 = _1130 * _1119;
  float _1134 = _1131 * _1122;
  float _1135 = _1125 - _1132;
  float _1136 = _1126 - _1133;
  float _1137 = _1127 - _1134;
  float _1138 = _1135 * _1124;
  float _1139 = _1136 * _1124;
  float _1140 = _1137 * _1124;
  float _1141 = _1138 + _1132;
  float _1142 = _1139 + _1133;
  float _1143 = _1140 + _1134;
  float _1144 = _1129 * _566;
  float _1145 = _1130 * _569;
  float _1146 = _1131 * _572;
  float _1147 = _1125 - _1144;
  float _1148 = _1126 - _1145;
  float _1149 = _1127 - _1146;
  float _1150 = _1147 * _1124;
  float _1151 = _1148 * _1124;
  float _1152 = _1149 * _1124;
  float _1153 = _1150 + _1144;
  float _1154 = _1151 + _1145;
  float _1155 = _1152 + _1146;
  float _1157 = _RootShaderParameters_040y;
  float _1158 = max(0.0f, _1141);
  float _1159 = max(0.0f, _1142);
  float _1160 = max(0.0f, _1143);
  float _1161 = log2(_1158);
  float _1162 = log2(_1159);
  float _1163 = log2(_1160);
  float _1164 = _1161 * _1157;
  float _1165 = _1162 * _1157;
  float _1166 = _1163 * _1157;
  float _1167 = exp2(_1164);
  float _1168 = exp2(_1165);
  float _1169 = exp2(_1166);

  // CustomEdit
  float3 film_graded_color = float3(_1167, _1168, _1169);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_14, _15, _16)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _1171 = _RootShaderParameters_040w;
  bool _1172 = (_1171 == 0);
  if (_1172) {
    uint _1175 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1176 = (_1175 == 0);
    _1209 = _1167;
    _1210 = _1168;
    _1211 = _1169;
    do {
      if (_1176) {
        float _1179 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1180 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1181 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1183 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1184 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1185 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1187 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1188 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1189 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1190 = _1179 * _1167;
        float _1191 = mad(_1180, _1168, _1190);
        float _1192 = mad(_1181, _1169, _1191);
        float _1193 = _1183 * _1167;
        float _1194 = mad(_1184, _1168, _1193);
        float _1195 = mad(_1185, _1169, _1194);
        float _1196 = _1187 * _1167;
        float _1197 = mad(_1188, _1168, _1196);
        float _1198 = mad(_1189, _1169, _1197);
        float _1199 = _1192 * _55;
        float _1200 = mad(_56, _1195, _1199);
        float _1201 = mad(_57, _1198, _1200);
        float _1202 = _1192 * _58;
        float _1203 = mad(_59, _1195, _1202);
        float _1204 = mad(_60, _1198, _1203);
        float _1205 = _1192 * _61;
        float _1206 = mad(_62, _1195, _1205);
        float _1207 = mad(_63, _1198, _1206);
        _1209 = _1201;
        _1210 = _1204;
        _1211 = _1207;
      }
      bool _1212 = (_1209 < 0.0031306699384003878f);
      do {
        if (_1212) {
          float _1214 = _1209 * 12.920000076293945f;
          _1222 = _1214;
        } else {
          float _1216 = log2(_1209);
          float _1217 = _1216 * 0.4166666567325592f;
          float _1218 = exp2(_1217);
          float _1219 = _1218 * 1.0549999475479126f;
          float _1220 = _1219 + -0.054999999701976776f;
          _1222 = _1220;
        }
        bool _1223 = (_1210 < 0.0031306699384003878f);
        do {
          if (_1223) {
            float _1225 = _1210 * 12.920000076293945f;
            _1233 = _1225;
          } else {
            float _1227 = log2(_1210);
            float _1228 = _1227 * 0.4166666567325592f;
            float _1229 = exp2(_1228);
            float _1230 = _1229 * 1.0549999475479126f;
            float _1231 = _1230 + -0.054999999701976776f;
            _1233 = _1231;
          }
          bool _1234 = (_1211 < 0.0031306699384003878f);
          if (_1234) {
            float _1236 = _1211 * 12.920000076293945f;
            _2593 = _1222;
            _2594 = _1233;
            _2595 = _1236;
          } else {
            float _1238 = log2(_1211);
            float _1239 = _1238 * 0.4166666567325592f;
            float _1240 = exp2(_1239);
            float _1241 = _1240 * 1.0549999475479126f;
            float _1242 = _1241 + -0.054999999701976776f;
            _2593 = _1222;
            _2594 = _1233;
            _2595 = _1242;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1244 = (_1171 == 1);
    if (_1244) {
      float _1247 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1248 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1249 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1251 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1252 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1253 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1255 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1256 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1257 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1258 = _1247 * _1167;
      float _1259 = mad(_1248, _1168, _1258);
      float _1260 = mad(_1249, _1169, _1259);
      float _1261 = _1251 * _1167;
      float _1262 = mad(_1252, _1168, _1261);
      float _1263 = mad(_1253, _1169, _1262);
      float _1264 = _1255 * _1167;
      float _1265 = mad(_1256, _1168, _1264);
      float _1266 = mad(_1257, _1169, _1265);
      float _1267 = _1260 * _55;
      float _1268 = mad(_56, _1263, _1267);
      float _1269 = mad(_57, _1266, _1268);
      float _1270 = _1260 * _58;
      float _1271 = mad(_59, _1263, _1270);
      float _1272 = mad(_60, _1266, _1271);
      float _1273 = _1260 * _61;
      float _1274 = mad(_62, _1263, _1273);
      float _1275 = mad(_63, _1266, _1274);
      float _1276 = max(6.103519990574569e-05f, _1269);
      float _1277 = max(6.103519990574569e-05f, _1272);
      float _1278 = max(6.103519990574569e-05f, _1275);
      float _1279 = max(_1276, 0.017999999225139618f);
      float _1280 = max(_1277, 0.017999999225139618f);
      float _1281 = max(_1278, 0.017999999225139618f);
      float _1282 = log2(_1279);
      float _1283 = log2(_1280);
      float _1284 = log2(_1281);
      float _1285 = _1282 * 0.44999998807907104f;
      float _1286 = _1283 * 0.44999998807907104f;
      float _1287 = _1284 * 0.44999998807907104f;
      float _1288 = exp2(_1285);
      float _1289 = exp2(_1286);
      float _1290 = exp2(_1287);
      float _1291 = _1288 * 1.0989999771118164f;
      float _1292 = _1289 * 1.0989999771118164f;
      float _1293 = _1290 * 1.0989999771118164f;
      float _1294 = _1291 + -0.0989999994635582f;
      float _1295 = _1292 + -0.0989999994635582f;
      float _1296 = _1293 + -0.0989999994635582f;
      float _1297 = _1276 * 4.5f;
      float _1298 = _1277 * 4.5f;
      float _1299 = _1278 * 4.5f;
      float _1300 = min(_1297, _1294);
      float _1301 = min(_1298, _1295);
      float _1302 = min(_1299, _1296);
      _2593 = _1300;
      _2594 = _1301;
      _2595 = _1302;
    } else {
      bool _1304 = (_1171 == 3);
      bool _1305 = (_1171 == 5);
      bool _1306 = _1304 || _1305;
      if (_1306) {
        //   %1308 = bitcast [6 x float]* %19 to i8*
        //   %1309 = bitcast [6 x float]* %20 to i8*
        float _1311 = _RootShaderParameters_012z;
        float _1312 = _RootShaderParameters_012y;
        float _1313 = _RootShaderParameters_012x;
        float _1315 = _RootShaderParameters_011x;
        float _1316 = _RootShaderParameters_011y;
        float _1317 = _RootShaderParameters_011z;
        float _1318 = _RootShaderParameters_011w;
        float _1320 = _RootShaderParameters_010x;
        float _1321 = _RootShaderParameters_010y;
        float _1322 = _RootShaderParameters_010z;
        float _1323 = _RootShaderParameters_010w;
        float _1325 = _RootShaderParameters_009x;
        float _1327 = _RootShaderParameters_008x;
        float _1328 = _RootShaderParameters_008y;
        float _1329 = _RootShaderParameters_008z;
        float _1330 = _RootShaderParameters_008w;
        _19[0] = _1320;
        _19[1] = _1321;
        _19[2] = _1322;
        _19[3] = _1323;
        _19[4] = _1313;
        _19[5] = _1313;
        _20[0] = _1315;
        _20[1] = _1316;
        _20[2] = _1317;
        _20[3] = _1318;
        _20[4] = _1312;
        _20[5] = _1312;
        float _1344 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1345 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1346 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1348 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1349 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1350 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1352 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1353 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1354 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1355 = _1311 * _1153;
        float _1356 = _1311 * _1154;
        float _1357 = _1311 * _1155;
        float _1358 = _1344 * _1355;
        float _1359 = mad(_1345, _1356, _1358);
        float _1360 = mad(_1346, _1357, _1359);
        float _1361 = _1348 * _1355;
        float _1362 = mad(_1349, _1356, _1361);
        float _1363 = mad(_1350, _1357, _1362);
        float _1364 = _1352 * _1355;
        float _1365 = mad(_1353, _1356, _1364);
        float _1366 = mad(_1354, _1357, _1365);
        float _1367 = min(_1360, _1363);
        float _1368 = min(_1367, _1366);
        float _1369 = max(_1360, _1363);
        float _1370 = max(_1369, _1366);
        float _1371 = max(_1370, 1.000000013351432e-10f);
        float _1372 = max(_1368, 1.000000013351432e-10f);
        float _1373 = _1371 - _1372;
        float _1374 = max(_1370, 0.009999999776482582f);
        float _1375 = _1373 / _1374;
        float _1376 = _1366 - _1363;
        float _1377 = _1376 * _1366;
        float _1378 = _1363 - _1360;
        float _1379 = _1378 * _1363;
        float _1380 = _1377 + _1379;
        float _1381 = _1360 - _1366;
        float _1382 = _1381 * _1360;
        float _1383 = _1380 + _1382;
        float _1384 = sqrt(_1383);
        float _1385 = _1384 * 1.75f;
        float _1386 = _1363 + _1360;
        float _1387 = _1386 + _1366;
        float _1388 = _1387 + _1385;
        float _1389 = _1388 * 0.3333333432674408f;
        float _1390 = _1375 + -0.4000000059604645f;
        float _1391 = _1390 * 5.0f;
        float _1392 = _1390 * 2.5f;
        float _1393 = abs(_1392);
        float _1394 = 1.0f - _1393;
        float _1395 = max(_1394, 0.0f);
        bool _1396 = (_1391 > 0.0f);
        bool _1397 = (_1391 < 0.0f);
        int _1398 = int(_1396);
        int _1399 = int(_1397);
        int _1400 = _1398 - _1399;
        float _1401 = float(_1400);
        float _1402 = _1395 * _1395;
        float _1403 = 1.0f - _1402;
        float _1404 = _1401 * _1403;
        float _1405 = _1404 + 1.0f;
        float _1406 = _1405 * 0.02500000037252903f;
        bool _1407 = !(_1389 <= 0.0533333346247673f);
        _1415 = _1406;
        do {
          if (_1407) {
            bool _1409 = !(_1389 >= 0.1599999964237213f);
            _1415 = 0.0f;
            if (_1409) {
              float _1411 = 0.23999999463558197f / _1388;
              float _1412 = _1411 + -0.5f;
              float _1413 = _1412 * _1406;
              _1415 = _1413;
            }
          }
          float _1416 = _1415 + 1.0f;
          float _1417 = _1416 * _1360;
          float _1418 = _1416 * _1363;
          float _1419 = _1416 * _1366;
          bool _1420 = (_1417 == _1418);
          bool _1421 = (_1418 == _1419);
          bool _1422 = _1420 && _1421;
          _1451 = 0.0f;
          do {
            if (!_1422) {
              float _1424 = _1417 * 2.0f;
              float _1425 = _1424 - _1418;
              float _1426 = _1425 - _1419;
              float _1427 = _1363 - _1366;
              float _1428 = _1427 * 1.7320507764816284f;
              float _1429 = _1428 * _1416;
              float _1430 = _1429 / _1426;
              float _1431 = atan(_1430);
              float _1432 = _1431 + 3.1415927410125732f;
              float _1433 = _1431 + -3.1415927410125732f;
              bool _1434 = (_1426 < 0.0f);
              bool _1435 = (_1426 == 0.0f);
              bool _1436 = (_1429 >= 0.0f);
              bool _1437 = (_1429 < 0.0f);
              bool _1438 = _1436 && _1434;
              float _1439 = _1438 ? _1432 : _1431;
              bool _1440 = _1437 && _1434;
              float _1441 = _1440 ? _1433 : _1439;
              bool _1442 = _1437 && _1435;
              bool _1443 = _1436 && _1435;
              float _1444 = _1441 * 57.2957763671875f;
              float _1445 = _1442 ? -90.0f : _1444;
              float _1446 = _1443 ? 90.0f : _1445;
              bool _1447 = (_1446 < 0.0f);
              _1451 = _1446;
              if (_1447) {
                float _1449 = _1446 + 360.0f;
                _1451 = _1449;
              }
            }
            float _1452 = max(_1451, 0.0f);
            float _1453 = min(_1452, 360.0f);
            bool _1454 = (_1453 < -180.0f);
            do {
              if (_1454) {
                float _1456 = _1453 + 360.0f;
                _1462 = _1456;
              } else {
                bool _1458 = (_1453 > 180.0f);
                _1462 = _1453;
                if (_1458) {
                  float _1460 = _1453 + -360.0f;
                  _1462 = _1460;
                }
              }
              bool _1463 = (_1462 > -67.5f);
              bool _1464 = (_1462 < 67.5f);
              bool _1465 = _1463 && _1464;
              _1501 = 0.0f;
              do {
                if (_1465) {
                  float _1467 = _1462 + 67.5f;
                  float _1468 = _1467 * 0.029629629105329514f;
                  int _1469 = int(_1468);
                  float _1470 = float(_1469);
                  float _1471 = _1468 - _1470;
                  float _1472 = _1471 * _1471;
                  float _1473 = _1472 * _1471;
                  bool _1474 = (_1469 == 3);
                  if (_1474) {
                    float _1476 = _1473 * 0.1666666716337204f;
                    float _1477 = _1472 * 0.5f;
                    float _1478 = _1471 * 0.5f;
                    float _1479 = 0.1666666716337204f - _1478;
                    float _1480 = _1479 + _1477;
                    float _1481 = _1480 - _1476;
                    _1501 = _1481;
                  } else {
                    bool _1483 = (_1469 == 2);
                    if (_1483) {
                      float _1485 = _1473 * 0.5f;
                      float _1486 = 0.6666666865348816f - _1472;
                      float _1487 = _1486 + _1485;
                      _1501 = _1487;
                    } else {
                      bool _1489 = (_1469 == 1);
                      if (_1489) {
                        float _1491 = _1473 * -0.5f;
                        float _1492 = _1472 + _1471;
                        float _1493 = _1492 * 0.5f;
                        float _1494 = _1491 + 0.1666666716337204f;
                        float _1495 = _1494 + _1493;
                        _1501 = _1495;
                      } else {
                        bool _1497 = (_1469 == 0);
                        float _1498 = _1473 * 0.1666666716337204f;
                        float _1499 = _1497 ? _1498 : 0.0f;
                        _1501 = _1499;
                      }
                    }
                  }
                }
                float _1502 = 0.029999999329447746f - _1417;
                float _1503 = _1375 * 0.27000001072883606f;
                float _1504 = _1503 * _1502;
                float _1505 = _1504 * _1501;
                float _1506 = _1505 + _1417;
                float _1507 = max(_1506, 0.0f);
                float _1508 = max(_1418, 0.0f);
                float _1509 = max(_1419, 0.0f);
                float _1510 = min(_1507, 65535.0f);
                float _1511 = min(_1508, 65535.0f);
                float _1512 = min(_1509, 65535.0f);
                float _1513 = _1510 * 1.4514392614364624f;
                float _1514 = mad(-0.2365107536315918f, _1511, _1513);
                float _1515 = mad(-0.21492856740951538f, _1512, _1514);
                float _1516 = _1510 * -0.07655377686023712f;
                float _1517 = mad(1.17622971534729f, _1511, _1516);
                float _1518 = mad(-0.09967592358589172f, _1512, _1517);
                float _1519 = _1510 * 0.008316148072481155f;
                float _1520 = mad(-0.006032449658960104f, _1511, _1519);
                float _1521 = mad(0.9977163076400757f, _1512, _1520);
                float _1522 = max(_1515, 0.0f);
                float _1523 = max(_1518, 0.0f);
                float _1524 = max(_1521, 0.0f);
                float _1525 = min(_1522, 65504.0f);
                float _1526 = min(_1523, 65504.0f);
                float _1527 = min(_1524, 65504.0f);
                float _1528 = dot(float3(_1525, _1526, _1527), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1529 = _1525 - _1528;
                float _1530 = _1526 - _1528;
                float _1531 = _1527 - _1528;
                float _1532 = _1529 * 0.9599999785423279f;
                float _1533 = _1530 * 0.9599999785423279f;
                float _1534 = _1531 * 0.9599999785423279f;
                float _1535 = _1532 + _1528;
                float _1536 = _1533 + _1528;
                float _1537 = _1534 + _1528;
                float _1538 = max(_1535, 1.000000013351432e-10f);
                float _1539 = log2(_1538);
                float _1540 = _1539 * 0.3010300099849701f;
                float _1541 = log2(_1327);
                float _1542 = _1541 * 0.3010300099849701f;
                bool _1543 = !(_1540 <= _1542);
                do {
                  if (!_1543) {
                    float _1545 = log2(_1328);
                    float _1546 = _1545 * 0.3010300099849701f;
                    _1611 = _1546;
                  } else {
                    bool _1548 = (_1540 > _1542);
                    float _1549 = log2(_1325);
                    float _1550 = _1549 * 0.3010300099849701f;
                    bool _1551 = (_1540 < _1550);
                    bool _1552 = _1548 && _1551;
                    if (_1552) {
                      float _1554 = _1539 - _1541;
                      float _1555 = _1554 * 0.9030900001525879f;
                      float _1556 = _1549 - _1541;
                      float _1557 = _1556 * 0.3010300099849701f;
                      float _1558 = _1555 / _1557;
                      int _1559 = int(_1558);
                      float _1560 = float(_1559);
                      float _1561 = _1558 - _1560;
                      float _1563 = _19[_1559];
                      int _1564 = _1559 + 1;
                      float _1566 = _19[_1564];
                      int _1567 = _1559 + 2;
                      float _1569 = _19[_1567];
                      float _1570 = _1561 * _1561;
                      float _1571 = _1563 * 0.5f;
                      float _1572 = mad(_1566, -1.0f, _1571);
                      float _1573 = mad(_1569, 0.5f, _1572);
                      float _1574 = _1566 - _1563;
                      float _1575 = mad(_1566, 0.5f, _1571);
                      float _1576 = dot(float3(_1570, _1561, 1.0f), float3(_1573, _1574, _1575));
                      _1611 = _1576;
                    } else {
                      bool _1578 = !(_1540 >= _1550);
                      do {
                        if (!_1578) {
                          float _1580 = log2(_1329);
                          float _1581 = _1580 * 0.3010300099849701f;
                          bool _1582 = (_1540 < _1581);
                          if (_1582) {
                            float _1584 = _1539 - _1549;
                            float _1585 = _1584 * 0.9030900001525879f;
                            float _1586 = _1580 - _1549;
                            float _1587 = _1586 * 0.3010300099849701f;
                            float _1588 = _1585 / _1587;
                            int _1589 = int(_1588);
                            float _1590 = float(_1589);
                            float _1591 = _1588 - _1590;
                            float _1593 = _20[_1589];
                            int _1594 = _1589 + 1;
                            float _1596 = _20[_1594];
                            int _1597 = _1589 + 2;
                            float _1599 = _20[_1597];
                            float _1600 = _1591 * _1591;
                            float _1601 = _1593 * 0.5f;
                            float _1602 = mad(_1596, -1.0f, _1601);
                            float _1603 = mad(_1599, 0.5f, _1602);
                            float _1604 = _1596 - _1593;
                            float _1605 = mad(_1596, 0.5f, _1601);
                            float _1606 = dot(float3(_1600, _1591, 1.0f), float3(_1603, _1604, _1605));
                            _1611 = _1606;
                            break;
                          }
                        }
                        float _1608 = log2(_1330);
                        float _1609 = _1608 * 0.3010300099849701f;
                        _1611 = _1609;
                      } while (false);
                    }
                  }
                  float _1612 = _1611 * 3.321928024291992f;
                  float _1613 = exp2(_1612);
                  float _1614 = max(_1536, 1.000000013351432e-10f);
                  float _1615 = log2(_1614);
                  float _1616 = _1615 * 0.3010300099849701f;
                  bool _1617 = !(_1616 <= _1542);
                  do {
                    if (!_1617) {
                      float _1619 = log2(_1328);
                      float _1620 = _1619 * 0.3010300099849701f;
                      _1685 = _1620;
                    } else {
                      bool _1622 = (_1616 > _1542);
                      float _1623 = log2(_1325);
                      float _1624 = _1623 * 0.3010300099849701f;
                      bool _1625 = (_1616 < _1624);
                      bool _1626 = _1622 && _1625;
                      if (_1626) {
                        float _1628 = _1615 - _1541;
                        float _1629 = _1628 * 0.9030900001525879f;
                        float _1630 = _1623 - _1541;
                        float _1631 = _1630 * 0.3010300099849701f;
                        float _1632 = _1629 / _1631;
                        int _1633 = int(_1632);
                        float _1634 = float(_1633);
                        float _1635 = _1632 - _1634;
                        float _1637 = _19[_1633];
                        int _1638 = _1633 + 1;
                        float _1640 = _19[_1638];
                        int _1641 = _1633 + 2;
                        float _1643 = _19[_1641];
                        float _1644 = _1635 * _1635;
                        float _1645 = _1637 * 0.5f;
                        float _1646 = mad(_1640, -1.0f, _1645);
                        float _1647 = mad(_1643, 0.5f, _1646);
                        float _1648 = _1640 - _1637;
                        float _1649 = mad(_1640, 0.5f, _1645);
                        float _1650 = dot(float3(_1644, _1635, 1.0f), float3(_1647, _1648, _1649));
                        _1685 = _1650;
                      } else {
                        bool _1652 = !(_1616 >= _1624);
                        do {
                          if (!_1652) {
                            float _1654 = log2(_1329);
                            float _1655 = _1654 * 0.3010300099849701f;
                            bool _1656 = (_1616 < _1655);
                            if (_1656) {
                              float _1658 = _1615 - _1623;
                              float _1659 = _1658 * 0.9030900001525879f;
                              float _1660 = _1654 - _1623;
                              float _1661 = _1660 * 0.3010300099849701f;
                              float _1662 = _1659 / _1661;
                              int _1663 = int(_1662);
                              float _1664 = float(_1663);
                              float _1665 = _1662 - _1664;
                              float _1667 = _20[_1663];
                              int _1668 = _1663 + 1;
                              float _1670 = _20[_1668];
                              int _1671 = _1663 + 2;
                              float _1673 = _20[_1671];
                              float _1674 = _1665 * _1665;
                              float _1675 = _1667 * 0.5f;
                              float _1676 = mad(_1670, -1.0f, _1675);
                              float _1677 = mad(_1673, 0.5f, _1676);
                              float _1678 = _1670 - _1667;
                              float _1679 = mad(_1670, 0.5f, _1675);
                              float _1680 = dot(float3(_1674, _1665, 1.0f), float3(_1677, _1678, _1679));
                              _1685 = _1680;
                              break;
                            }
                          }
                          float _1682 = log2(_1330);
                          float _1683 = _1682 * 0.3010300099849701f;
                          _1685 = _1683;
                        } while (false);
                      }
                    }
                    float _1686 = _1685 * 3.321928024291992f;
                    float _1687 = exp2(_1686);
                    float _1688 = max(_1537, 1.000000013351432e-10f);
                    float _1689 = log2(_1688);
                    float _1690 = _1689 * 0.3010300099849701f;
                    bool _1691 = !(_1690 <= _1542);
                    do {
                      if (!_1691) {
                        float _1693 = log2(_1328);
                        float _1694 = _1693 * 0.3010300099849701f;
                        _1759 = _1694;
                      } else {
                        bool _1696 = (_1690 > _1542);
                        float _1697 = log2(_1325);
                        float _1698 = _1697 * 0.3010300099849701f;
                        bool _1699 = (_1690 < _1698);
                        bool _1700 = _1696 && _1699;
                        if (_1700) {
                          float _1702 = _1689 - _1541;
                          float _1703 = _1702 * 0.9030900001525879f;
                          float _1704 = _1697 - _1541;
                          float _1705 = _1704 * 0.3010300099849701f;
                          float _1706 = _1703 / _1705;
                          int _1707 = int(_1706);
                          float _1708 = float(_1707);
                          float _1709 = _1706 - _1708;
                          float _1711 = _19[_1707];
                          int _1712 = _1707 + 1;
                          float _1714 = _19[_1712];
                          int _1715 = _1707 + 2;
                          float _1717 = _19[_1715];
                          float _1718 = _1709 * _1709;
                          float _1719 = _1711 * 0.5f;
                          float _1720 = mad(_1714, -1.0f, _1719);
                          float _1721 = mad(_1717, 0.5f, _1720);
                          float _1722 = _1714 - _1711;
                          float _1723 = mad(_1714, 0.5f, _1719);
                          float _1724 = dot(float3(_1718, _1709, 1.0f), float3(_1721, _1722, _1723));
                          _1759 = _1724;
                        } else {
                          bool _1726 = !(_1690 >= _1698);
                          do {
                            if (!_1726) {
                              float _1728 = log2(_1329);
                              float _1729 = _1728 * 0.3010300099849701f;
                              bool _1730 = (_1690 < _1729);
                              if (_1730) {
                                float _1732 = _1689 - _1697;
                                float _1733 = _1732 * 0.9030900001525879f;
                                float _1734 = _1728 - _1697;
                                float _1735 = _1734 * 0.3010300099849701f;
                                float _1736 = _1733 / _1735;
                                int _1737 = int(_1736);
                                float _1738 = float(_1737);
                                float _1739 = _1736 - _1738;
                                float _1741 = _20[_1737];
                                int _1742 = _1737 + 1;
                                float _1744 = _20[_1742];
                                int _1745 = _1737 + 2;
                                float _1747 = _20[_1745];
                                float _1748 = _1739 * _1739;
                                float _1749 = _1741 * 0.5f;
                                float _1750 = mad(_1744, -1.0f, _1749);
                                float _1751 = mad(_1747, 0.5f, _1750);
                                float _1752 = _1744 - _1741;
                                float _1753 = mad(_1744, 0.5f, _1749);
                                float _1754 = dot(float3(_1748, _1739, 1.0f), float3(_1751, _1752, _1753));
                                _1759 = _1754;
                                break;
                              }
                            }
                            float _1756 = log2(_1330);
                            float _1757 = _1756 * 0.3010300099849701f;
                            _1759 = _1757;
                          } while (false);
                        }
                      }
                      float _1760 = _1759 * 3.321928024291992f;
                      float _1761 = exp2(_1760);
                      float _1762 = _1613 - _1328;
                      float _1763 = _1330 - _1328;
                      float _1764 = _1762 / _1763;
                      float _1765 = _1687 - _1328;
                      float _1766 = _1765 / _1763;
                      float _1767 = _1761 - _1328;
                      float _1768 = _1767 / _1763;
                      float _1769 = _1764 * 0.6624541878700256f;
                      float _1770 = mad(0.13400420546531677f, _1766, _1769);
                      float _1771 = mad(0.15618768334388733f, _1768, _1770);
                      float _1772 = _1764 * 0.2722287178039551f;
                      float _1773 = mad(0.6740817427635193f, _1766, _1772);
                      float _1774 = mad(0.053689517080783844f, _1768, _1773);
                      float _1775 = _1764 * -0.005574649665504694f;
                      float _1776 = mad(0.00406073359772563f, _1766, _1775);
                      float _1777 = mad(1.0103391408920288f, _1768, _1776);
                      float _1778 = _1771 * 1.6410233974456787f;
                      float _1779 = mad(-0.32480329275131226f, _1774, _1778);
                      float _1780 = mad(-0.23642469942569733f, _1777, _1779);
                      float _1781 = _1771 * -0.663662850856781f;
                      float _1782 = mad(1.6153316497802734f, _1774, _1781);
                      float _1783 = mad(0.016756348311901093f, _1777, _1782);
                      float _1784 = _1771 * 0.011721894145011902f;
                      float _1785 = mad(-0.008284442126750946f, _1774, _1784);
                      float _1786 = mad(0.9883948564529419f, _1777, _1785);
                      float _1787 = max(_1780, 0.0f);
                      float _1788 = max(_1783, 0.0f);
                      float _1789 = max(_1786, 0.0f);
                      float _1790 = min(_1787, 1.0f);
                      float _1791 = min(_1788, 1.0f);
                      float _1792 = min(_1789, 1.0f);
                      float _1793 = _1790 * 0.6624541878700256f;
                      float _1794 = mad(0.13400420546531677f, _1791, _1793);
                      float _1795 = mad(0.15618768334388733f, _1792, _1794);
                      float _1796 = _1790 * 0.2722287178039551f;
                      float _1797 = mad(0.6740817427635193f, _1791, _1796);
                      float _1798 = mad(0.053689517080783844f, _1792, _1797);
                      float _1799 = _1790 * -0.005574649665504694f;
                      float _1800 = mad(0.00406073359772563f, _1791, _1799);
                      float _1801 = mad(1.0103391408920288f, _1792, _1800);
                      float _1802 = _1795 * 1.6410233974456787f;
                      float _1803 = mad(-0.32480329275131226f, _1798, _1802);
                      float _1804 = mad(-0.23642469942569733f, _1801, _1803);
                      float _1805 = _1795 * -0.663662850856781f;
                      float _1806 = mad(1.6153316497802734f, _1798, _1805);
                      float _1807 = mad(0.016756348311901093f, _1801, _1806);
                      float _1808 = _1795 * 0.011721894145011902f;
                      float _1809 = mad(-0.008284442126750946f, _1798, _1808);
                      float _1810 = mad(0.9883948564529419f, _1801, _1809);
                      float _1811 = max(_1804, 0.0f);
                      float _1812 = max(_1807, 0.0f);
                      float _1813 = max(_1810, 0.0f);
                      float _1814 = min(_1811, 65535.0f);
                      float _1815 = min(_1812, 65535.0f);
                      float _1816 = min(_1813, 65535.0f);
                      float _1817 = _1814 * _1330;
                      float _1818 = _1815 * _1330;
                      float _1819 = _1816 * _1330;
                      float _1820 = max(_1817, 0.0f);
                      float _1821 = max(_1818, 0.0f);
                      float _1822 = max(_1819, 0.0f);
                      float _1823 = min(_1820, 65535.0f);
                      float _1824 = min(_1821, 65535.0f);
                      float _1825 = min(_1822, 65535.0f);
                      bool _1826 = (_1171 == 5);
                      _1838 = _1823;
                      _1839 = _1824;
                      _1840 = _1825;
                      do {
                        if (!_1826) {
                          float _1828 = _1823 * _55;
                          float _1829 = mad(_56, _1824, _1828);
                          float _1830 = mad(_57, _1825, _1829);
                          float _1831 = _1823 * _58;
                          float _1832 = mad(_59, _1824, _1831);
                          float _1833 = mad(_60, _1825, _1832);
                          float _1834 = _1823 * _61;
                          float _1835 = mad(_62, _1824, _1834);
                          float _1836 = mad(_63, _1825, _1835);
                          _1838 = _1830;
                          _1839 = _1833;
                          _1840 = _1836;
                        }
                        float _1841 = _1838 * 9.999999747378752e-05f;
                        float _1842 = _1839 * 9.999999747378752e-05f;
                        float _1843 = _1840 * 9.999999747378752e-05f;
                        float _1844 = log2(_1841);
                        float _1845 = log2(_1842);
                        float _1846 = log2(_1843);
                        float _1847 = _1844 * 0.1593017578125f;
                        float _1848 = _1845 * 0.1593017578125f;
                        float _1849 = _1846 * 0.1593017578125f;
                        float _1850 = exp2(_1847);
                        float _1851 = exp2(_1848);
                        float _1852 = exp2(_1849);
                        float _1853 = _1850 * 18.8515625f;
                        float _1854 = _1851 * 18.8515625f;
                        float _1855 = _1852 * 18.8515625f;
                        float _1856 = _1853 + 0.8359375f;
                        float _1857 = _1854 + 0.8359375f;
                        float _1858 = _1855 + 0.8359375f;
                        float _1859 = _1850 * 18.6875f;
                        float _1860 = _1851 * 18.6875f;
                        float _1861 = _1852 * 18.6875f;
                        float _1862 = _1859 + 1.0f;
                        float _1863 = _1860 + 1.0f;
                        float _1864 = _1861 + 1.0f;
                        float _1865 = 1.0f / _1862;
                        float _1866 = 1.0f / _1863;
                        float _1867 = 1.0f / _1864;
                        float _1868 = _1865 * _1856;
                        float _1869 = _1866 * _1857;
                        float _1870 = _1867 * _1858;
                        float _1871 = log2(_1868);
                        float _1872 = log2(_1869);
                        float _1873 = log2(_1870);
                        float _1874 = _1871 * 78.84375f;
                        float _1875 = _1872 * 78.84375f;
                        float _1876 = _1873 * 78.84375f;
                        float _1877 = exp2(_1874);
                        float _1878 = exp2(_1875);
                        float _1879 = exp2(_1876);
                        _2593 = _1877;
                        _2594 = _1878;
                        _2595 = _1879;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _1881 = _1171 & -3;
        bool _1882 = (_1881 == 4);
        if (_1882) {
          //   %1884 = bitcast [6 x float]* %17 to i8*
          //   %1885 = bitcast [6 x float]* %18 to i8*
          float _1887 = _RootShaderParameters_012z;
          float _1888 = _RootShaderParameters_012y;
          float _1889 = _RootShaderParameters_012x;
          float _1891 = _RootShaderParameters_011x;
          float _1892 = _RootShaderParameters_011y;
          float _1893 = _RootShaderParameters_011z;
          float _1894 = _RootShaderParameters_011w;
          float _1896 = _RootShaderParameters_010x;
          float _1897 = _RootShaderParameters_010y;
          float _1898 = _RootShaderParameters_010z;
          float _1899 = _RootShaderParameters_010w;
          float _1901 = _RootShaderParameters_009x;
          float _1903 = _RootShaderParameters_008x;
          float _1904 = _RootShaderParameters_008y;
          float _1905 = _RootShaderParameters_008z;
          float _1906 = _RootShaderParameters_008w;
          _17[0] = _1896;
          _17[1] = _1897;
          _17[2] = _1898;
          _17[3] = _1899;
          _17[4] = _1889;
          _17[5] = _1889;
          _18[0] = _1891;
          _18[1] = _1892;
          _18[2] = _1893;
          _18[3] = _1894;
          _18[4] = _1888;
          _18[5] = _1888;
          float _1920 = UniformBufferConstants_WorkingColorSpace_016x;
          float _1921 = UniformBufferConstants_WorkingColorSpace_016y;
          float _1922 = UniformBufferConstants_WorkingColorSpace_016z;
          float _1924 = UniformBufferConstants_WorkingColorSpace_017x;
          float _1925 = UniformBufferConstants_WorkingColorSpace_017y;
          float _1926 = UniformBufferConstants_WorkingColorSpace_017z;
          float _1928 = UniformBufferConstants_WorkingColorSpace_018x;
          float _1929 = UniformBufferConstants_WorkingColorSpace_018y;
          float _1930 = UniformBufferConstants_WorkingColorSpace_018z;
          float _1931 = _1887 * _1153;
          float _1932 = _1887 * _1154;
          float _1933 = _1887 * _1155;
          float _1934 = _1920 * _1931;
          float _1935 = mad(_1921, _1932, _1934);
          float _1936 = mad(_1922, _1933, _1935);
          float _1937 = _1924 * _1931;
          float _1938 = mad(_1925, _1932, _1937);
          float _1939 = mad(_1926, _1933, _1938);
          float _1940 = _1928 * _1931;
          float _1941 = mad(_1929, _1932, _1940);
          float _1942 = mad(_1930, _1933, _1941);
          float _1943 = min(_1936, _1939);
          float _1944 = min(_1943, _1942);
          float _1945 = max(_1936, _1939);
          float _1946 = max(_1945, _1942);
          float _1947 = max(_1946, 1.000000013351432e-10f);
          float _1948 = max(_1944, 1.000000013351432e-10f);
          float _1949 = _1947 - _1948;
          float _1950 = max(_1946, 0.009999999776482582f);
          float _1951 = _1949 / _1950;
          float _1952 = _1942 - _1939;
          float _1953 = _1952 * _1942;
          float _1954 = _1939 - _1936;
          float _1955 = _1954 * _1939;
          float _1956 = _1953 + _1955;
          float _1957 = _1936 - _1942;
          float _1958 = _1957 * _1936;
          float _1959 = _1956 + _1958;
          float _1960 = sqrt(_1959);
          float _1961 = _1960 * 1.75f;
          float _1962 = _1939 + _1936;
          float _1963 = _1962 + _1942;
          float _1964 = _1963 + _1961;
          float _1965 = _1964 * 0.3333333432674408f;
          float _1966 = _1951 + -0.4000000059604645f;
          float _1967 = _1966 * 5.0f;
          float _1968 = _1966 * 2.5f;
          float _1969 = abs(_1968);
          float _1970 = 1.0f - _1969;
          float _1971 = max(_1970, 0.0f);
          bool _1972 = (_1967 > 0.0f);
          bool _1973 = (_1967 < 0.0f);
          int _1974 = int(_1972);
          int _1975 = int(_1973);
          int _1976 = _1974 - _1975;
          float _1977 = float(_1976);
          float _1978 = _1971 * _1971;
          float _1979 = 1.0f - _1978;
          float _1980 = _1977 * _1979;
          float _1981 = _1980 + 1.0f;
          float _1982 = _1981 * 0.02500000037252903f;
          bool _1983 = !(_1965 <= 0.0533333346247673f);
          _1991 = _1982;
          do {
            if (_1983) {
              bool _1985 = !(_1965 >= 0.1599999964237213f);
              _1991 = 0.0f;
              if (_1985) {
                float _1987 = 0.23999999463558197f / _1964;
                float _1988 = _1987 + -0.5f;
                float _1989 = _1988 * _1982;
                _1991 = _1989;
              }
            }
            float _1992 = _1991 + 1.0f;
            float _1993 = _1992 * _1936;
            float _1994 = _1992 * _1939;
            float _1995 = _1992 * _1942;
            bool _1996 = (_1993 == _1994);
            bool _1997 = (_1994 == _1995);
            bool _1998 = _1996 && _1997;
            _2027 = 0.0f;
            do {
              if (!_1998) {
                float _2000 = _1993 * 2.0f;
                float _2001 = _2000 - _1994;
                float _2002 = _2001 - _1995;
                float _2003 = _1939 - _1942;
                float _2004 = _2003 * 1.7320507764816284f;
                float _2005 = _2004 * _1992;
                float _2006 = _2005 / _2002;
                float _2007 = atan(_2006);
                float _2008 = _2007 + 3.1415927410125732f;
                float _2009 = _2007 + -3.1415927410125732f;
                bool _2010 = (_2002 < 0.0f);
                bool _2011 = (_2002 == 0.0f);
                bool _2012 = (_2005 >= 0.0f);
                bool _2013 = (_2005 < 0.0f);
                bool _2014 = _2012 && _2010;
                float _2015 = _2014 ? _2008 : _2007;
                bool _2016 = _2013 && _2010;
                float _2017 = _2016 ? _2009 : _2015;
                bool _2018 = _2013 && _2011;
                bool _2019 = _2012 && _2011;
                float _2020 = _2017 * 57.2957763671875f;
                float _2021 = _2018 ? -90.0f : _2020;
                float _2022 = _2019 ? 90.0f : _2021;
                bool _2023 = (_2022 < 0.0f);
                _2027 = _2022;
                if (_2023) {
                  float _2025 = _2022 + 360.0f;
                  _2027 = _2025;
                }
              }
              float _2028 = max(_2027, 0.0f);
              float _2029 = min(_2028, 360.0f);
              bool _2030 = (_2029 < -180.0f);
              do {
                if (_2030) {
                  float _2032 = _2029 + 360.0f;
                  _2038 = _2032;
                } else {
                  bool _2034 = (_2029 > 180.0f);
                  _2038 = _2029;
                  if (_2034) {
                    float _2036 = _2029 + -360.0f;
                    _2038 = _2036;
                  }
                }
                bool _2039 = (_2038 > -67.5f);
                bool _2040 = (_2038 < 67.5f);
                bool _2041 = _2039 && _2040;
                _2077 = 0.0f;
                do {
                  if (_2041) {
                    float _2043 = _2038 + 67.5f;
                    float _2044 = _2043 * 0.029629629105329514f;
                    int _2045 = int(_2044);
                    float _2046 = float(_2045);
                    float _2047 = _2044 - _2046;
                    float _2048 = _2047 * _2047;
                    float _2049 = _2048 * _2047;
                    bool _2050 = (_2045 == 3);
                    if (_2050) {
                      float _2052 = _2049 * 0.1666666716337204f;
                      float _2053 = _2048 * 0.5f;
                      float _2054 = _2047 * 0.5f;
                      float _2055 = 0.1666666716337204f - _2054;
                      float _2056 = _2055 + _2053;
                      float _2057 = _2056 - _2052;
                      _2077 = _2057;
                    } else {
                      bool _2059 = (_2045 == 2);
                      if (_2059) {
                        float _2061 = _2049 * 0.5f;
                        float _2062 = 0.6666666865348816f - _2048;
                        float _2063 = _2062 + _2061;
                        _2077 = _2063;
                      } else {
                        bool _2065 = (_2045 == 1);
                        if (_2065) {
                          float _2067 = _2049 * -0.5f;
                          float _2068 = _2048 + _2047;
                          float _2069 = _2068 * 0.5f;
                          float _2070 = _2067 + 0.1666666716337204f;
                          float _2071 = _2070 + _2069;
                          _2077 = _2071;
                        } else {
                          bool _2073 = (_2045 == 0);
                          float _2074 = _2049 * 0.1666666716337204f;
                          float _2075 = _2073 ? _2074 : 0.0f;
                          _2077 = _2075;
                        }
                      }
                    }
                  }
                  float _2078 = 0.029999999329447746f - _1993;
                  float _2079 = _1951 * 0.27000001072883606f;
                  float _2080 = _2079 * _2078;
                  float _2081 = _2080 * _2077;
                  float _2082 = _2081 + _1993;
                  float _2083 = max(_2082, 0.0f);
                  float _2084 = max(_1994, 0.0f);
                  float _2085 = max(_1995, 0.0f);
                  float _2086 = min(_2083, 65535.0f);
                  float _2087 = min(_2084, 65535.0f);
                  float _2088 = min(_2085, 65535.0f);
                  float _2089 = _2086 * 1.4514392614364624f;
                  float _2090 = mad(-0.2365107536315918f, _2087, _2089);
                  float _2091 = mad(-0.21492856740951538f, _2088, _2090);
                  float _2092 = _2086 * -0.07655377686023712f;
                  float _2093 = mad(1.17622971534729f, _2087, _2092);
                  float _2094 = mad(-0.09967592358589172f, _2088, _2093);
                  float _2095 = _2086 * 0.008316148072481155f;
                  float _2096 = mad(-0.006032449658960104f, _2087, _2095);
                  float _2097 = mad(0.9977163076400757f, _2088, _2096);
                  float _2098 = max(_2091, 0.0f);
                  float _2099 = max(_2094, 0.0f);
                  float _2100 = max(_2097, 0.0f);
                  float _2101 = min(_2098, 65504.0f);
                  float _2102 = min(_2099, 65504.0f);
                  float _2103 = min(_2100, 65504.0f);
                  float _2104 = dot(float3(_2101, _2102, _2103), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2105 = _2101 - _2104;
                  float _2106 = _2102 - _2104;
                  float _2107 = _2103 - _2104;
                  float _2108 = _2105 * 0.9599999785423279f;
                  float _2109 = _2106 * 0.9599999785423279f;
                  float _2110 = _2107 * 0.9599999785423279f;
                  float _2111 = _2108 + _2104;
                  float _2112 = _2109 + _2104;
                  float _2113 = _2110 + _2104;
                  float _2114 = max(_2111, 1.000000013351432e-10f);
                  float _2115 = log2(_2114);
                  float _2116 = _2115 * 0.3010300099849701f;
                  float _2117 = log2(_1903);
                  float _2118 = _2117 * 0.3010300099849701f;
                  bool _2119 = !(_2116 <= _2118);
                  do {
                    if (!_2119) {
                      float _2121 = log2(_1904);
                      float _2122 = _2121 * 0.3010300099849701f;
                      _2187 = _2122;
                    } else {
                      bool _2124 = (_2116 > _2118);
                      float _2125 = log2(_1901);
                      float _2126 = _2125 * 0.3010300099849701f;
                      bool _2127 = (_2116 < _2126);
                      bool _2128 = _2124 && _2127;
                      if (_2128) {
                        float _2130 = _2115 - _2117;
                        float _2131 = _2130 * 0.9030900001525879f;
                        float _2132 = _2125 - _2117;
                        float _2133 = _2132 * 0.3010300099849701f;
                        float _2134 = _2131 / _2133;
                        int _2135 = int(_2134);
                        float _2136 = float(_2135);
                        float _2137 = _2134 - _2136;
                        float _2139 = _17[_2135];
                        int _2140 = _2135 + 1;
                        float _2142 = _17[_2140];
                        int _2143 = _2135 + 2;
                        float _2145 = _17[_2143];
                        float _2146 = _2137 * _2137;
                        float _2147 = _2139 * 0.5f;
                        float _2148 = mad(_2142, -1.0f, _2147);
                        float _2149 = mad(_2145, 0.5f, _2148);
                        float _2150 = _2142 - _2139;
                        float _2151 = mad(_2142, 0.5f, _2147);
                        float _2152 = dot(float3(_2146, _2137, 1.0f), float3(_2149, _2150, _2151));
                        _2187 = _2152;
                      } else {
                        bool _2154 = !(_2116 >= _2126);
                        do {
                          if (!_2154) {
                            float _2156 = log2(_1905);
                            float _2157 = _2156 * 0.3010300099849701f;
                            bool _2158 = (_2116 < _2157);
                            if (_2158) {
                              float _2160 = _2115 - _2125;
                              float _2161 = _2160 * 0.9030900001525879f;
                              float _2162 = _2156 - _2125;
                              float _2163 = _2162 * 0.3010300099849701f;
                              float _2164 = _2161 / _2163;
                              int _2165 = int(_2164);
                              float _2166 = float(_2165);
                              float _2167 = _2164 - _2166;
                              float _2169 = _18[_2165];
                              int _2170 = _2165 + 1;
                              float _2172 = _18[_2170];
                              int _2173 = _2165 + 2;
                              float _2175 = _18[_2173];
                              float _2176 = _2167 * _2167;
                              float _2177 = _2169 * 0.5f;
                              float _2178 = mad(_2172, -1.0f, _2177);
                              float _2179 = mad(_2175, 0.5f, _2178);
                              float _2180 = _2172 - _2169;
                              float _2181 = mad(_2172, 0.5f, _2177);
                              float _2182 = dot(float3(_2176, _2167, 1.0f), float3(_2179, _2180, _2181));
                              _2187 = _2182;
                              break;
                            }
                          }
                          float _2184 = log2(_1906);
                          float _2185 = _2184 * 0.3010300099849701f;
                          _2187 = _2185;
                        } while (false);
                      }
                    }
                    float _2188 = _2187 * 3.321928024291992f;
                    float _2189 = exp2(_2188);
                    float _2190 = max(_2112, 1.000000013351432e-10f);
                    float _2191 = log2(_2190);
                    float _2192 = _2191 * 0.3010300099849701f;
                    bool _2193 = !(_2192 <= _2118);
                    do {
                      if (!_2193) {
                        float _2195 = log2(_1904);
                        float _2196 = _2195 * 0.3010300099849701f;
                        _2261 = _2196;
                      } else {
                        bool _2198 = (_2192 > _2118);
                        float _2199 = log2(_1901);
                        float _2200 = _2199 * 0.3010300099849701f;
                        bool _2201 = (_2192 < _2200);
                        bool _2202 = _2198 && _2201;
                        if (_2202) {
                          float _2204 = _2191 - _2117;
                          float _2205 = _2204 * 0.9030900001525879f;
                          float _2206 = _2199 - _2117;
                          float _2207 = _2206 * 0.3010300099849701f;
                          float _2208 = _2205 / _2207;
                          int _2209 = int(_2208);
                          float _2210 = float(_2209);
                          float _2211 = _2208 - _2210;
                          float _2213 = _17[_2209];
                          int _2214 = _2209 + 1;
                          float _2216 = _17[_2214];
                          int _2217 = _2209 + 2;
                          float _2219 = _17[_2217];
                          float _2220 = _2211 * _2211;
                          float _2221 = _2213 * 0.5f;
                          float _2222 = mad(_2216, -1.0f, _2221);
                          float _2223 = mad(_2219, 0.5f, _2222);
                          float _2224 = _2216 - _2213;
                          float _2225 = mad(_2216, 0.5f, _2221);
                          float _2226 = dot(float3(_2220, _2211, 1.0f), float3(_2223, _2224, _2225));
                          _2261 = _2226;
                        } else {
                          bool _2228 = !(_2192 >= _2200);
                          do {
                            if (!_2228) {
                              float _2230 = log2(_1905);
                              float _2231 = _2230 * 0.3010300099849701f;
                              bool _2232 = (_2192 < _2231);
                              if (_2232) {
                                float _2234 = _2191 - _2199;
                                float _2235 = _2234 * 0.9030900001525879f;
                                float _2236 = _2230 - _2199;
                                float _2237 = _2236 * 0.3010300099849701f;
                                float _2238 = _2235 / _2237;
                                int _2239 = int(_2238);
                                float _2240 = float(_2239);
                                float _2241 = _2238 - _2240;
                                float _2243 = _18[_2239];
                                int _2244 = _2239 + 1;
                                float _2246 = _18[_2244];
                                int _2247 = _2239 + 2;
                                float _2249 = _18[_2247];
                                float _2250 = _2241 * _2241;
                                float _2251 = _2243 * 0.5f;
                                float _2252 = mad(_2246, -1.0f, _2251);
                                float _2253 = mad(_2249, 0.5f, _2252);
                                float _2254 = _2246 - _2243;
                                float _2255 = mad(_2246, 0.5f, _2251);
                                float _2256 = dot(float3(_2250, _2241, 1.0f), float3(_2253, _2254, _2255));
                                _2261 = _2256;
                                break;
                              }
                            }
                            float _2258 = log2(_1906);
                            float _2259 = _2258 * 0.3010300099849701f;
                            _2261 = _2259;
                          } while (false);
                        }
                      }
                      float _2262 = _2261 * 3.321928024291992f;
                      float _2263 = exp2(_2262);
                      float _2264 = max(_2113, 1.000000013351432e-10f);
                      float _2265 = log2(_2264);
                      float _2266 = _2265 * 0.3010300099849701f;
                      bool _2267 = !(_2266 <= _2118);
                      do {
                        if (!_2267) {
                          float _2269 = log2(_1904);
                          float _2270 = _2269 * 0.3010300099849701f;
                          _2335 = _2270;
                        } else {
                          bool _2272 = (_2266 > _2118);
                          float _2273 = log2(_1901);
                          float _2274 = _2273 * 0.3010300099849701f;
                          bool _2275 = (_2266 < _2274);
                          bool _2276 = _2272 && _2275;
                          if (_2276) {
                            float _2278 = _2265 - _2117;
                            float _2279 = _2278 * 0.9030900001525879f;
                            float _2280 = _2273 - _2117;
                            float _2281 = _2280 * 0.3010300099849701f;
                            float _2282 = _2279 / _2281;
                            int _2283 = int(_2282);
                            float _2284 = float(_2283);
                            float _2285 = _2282 - _2284;
                            float _2287 = _17[_2283];
                            int _2288 = _2283 + 1;
                            float _2290 = _17[_2288];
                            int _2291 = _2283 + 2;
                            float _2293 = _17[_2291];
                            float _2294 = _2285 * _2285;
                            float _2295 = _2287 * 0.5f;
                            float _2296 = mad(_2290, -1.0f, _2295);
                            float _2297 = mad(_2293, 0.5f, _2296);
                            float _2298 = _2290 - _2287;
                            float _2299 = mad(_2290, 0.5f, _2295);
                            float _2300 = dot(float3(_2294, _2285, 1.0f), float3(_2297, _2298, _2299));
                            _2335 = _2300;
                          } else {
                            bool _2302 = !(_2266 >= _2274);
                            do {
                              if (!_2302) {
                                float _2304 = log2(_1905);
                                float _2305 = _2304 * 0.3010300099849701f;
                                bool _2306 = (_2266 < _2305);
                                if (_2306) {
                                  float _2308 = _2265 - _2273;
                                  float _2309 = _2308 * 0.9030900001525879f;
                                  float _2310 = _2304 - _2273;
                                  float _2311 = _2310 * 0.3010300099849701f;
                                  float _2312 = _2309 / _2311;
                                  int _2313 = int(_2312);
                                  float _2314 = float(_2313);
                                  float _2315 = _2312 - _2314;
                                  float _2317 = _18[_2313];
                                  int _2318 = _2313 + 1;
                                  float _2320 = _18[_2318];
                                  int _2321 = _2313 + 2;
                                  float _2323 = _18[_2321];
                                  float _2324 = _2315 * _2315;
                                  float _2325 = _2317 * 0.5f;
                                  float _2326 = mad(_2320, -1.0f, _2325);
                                  float _2327 = mad(_2323, 0.5f, _2326);
                                  float _2328 = _2320 - _2317;
                                  float _2329 = mad(_2320, 0.5f, _2325);
                                  float _2330 = dot(float3(_2324, _2315, 1.0f), float3(_2327, _2328, _2329));
                                  _2335 = _2330;
                                  break;
                                }
                              }
                              float _2332 = log2(_1906);
                              float _2333 = _2332 * 0.3010300099849701f;
                              _2335 = _2333;
                            } while (false);
                          }
                        }
                        float _2336 = _2335 * 3.321928024291992f;
                        float _2337 = exp2(_2336);
                        float _2338 = _2189 - _1904;
                        float _2339 = _1906 - _1904;
                        float _2340 = _2338 / _2339;
                        float _2341 = _2263 - _1904;
                        float _2342 = _2341 / _2339;
                        float _2343 = _2337 - _1904;
                        float _2344 = _2343 / _2339;
                        float _2345 = _2340 * 0.6624541878700256f;
                        float _2346 = mad(0.13400420546531677f, _2342, _2345);
                        float _2347 = mad(0.15618768334388733f, _2344, _2346);
                        float _2348 = _2340 * 0.2722287178039551f;
                        float _2349 = mad(0.6740817427635193f, _2342, _2348);
                        float _2350 = mad(0.053689517080783844f, _2344, _2349);
                        float _2351 = _2340 * -0.005574649665504694f;
                        float _2352 = mad(0.00406073359772563f, _2342, _2351);
                        float _2353 = mad(1.0103391408920288f, _2344, _2352);
                        float _2354 = _2347 * 1.6410233974456787f;
                        float _2355 = mad(-0.32480329275131226f, _2350, _2354);
                        float _2356 = mad(-0.23642469942569733f, _2353, _2355);
                        float _2357 = _2347 * -0.663662850856781f;
                        float _2358 = mad(1.6153316497802734f, _2350, _2357);
                        float _2359 = mad(0.016756348311901093f, _2353, _2358);
                        float _2360 = _2347 * 0.011721894145011902f;
                        float _2361 = mad(-0.008284442126750946f, _2350, _2360);
                        float _2362 = mad(0.9883948564529419f, _2353, _2361);
                        float _2363 = max(_2356, 0.0f);
                        float _2364 = max(_2359, 0.0f);
                        float _2365 = max(_2362, 0.0f);
                        float _2366 = min(_2363, 1.0f);
                        float _2367 = min(_2364, 1.0f);
                        float _2368 = min(_2365, 1.0f);
                        float _2369 = _2366 * 0.6624541878700256f;
                        float _2370 = mad(0.13400420546531677f, _2367, _2369);
                        float _2371 = mad(0.15618768334388733f, _2368, _2370);
                        float _2372 = _2366 * 0.2722287178039551f;
                        float _2373 = mad(0.6740817427635193f, _2367, _2372);
                        float _2374 = mad(0.053689517080783844f, _2368, _2373);
                        float _2375 = _2366 * -0.005574649665504694f;
                        float _2376 = mad(0.00406073359772563f, _2367, _2375);
                        float _2377 = mad(1.0103391408920288f, _2368, _2376);
                        float _2378 = _2371 * 1.6410233974456787f;
                        float _2379 = mad(-0.32480329275131226f, _2374, _2378);
                        float _2380 = mad(-0.23642469942569733f, _2377, _2379);
                        float _2381 = _2371 * -0.663662850856781f;
                        float _2382 = mad(1.6153316497802734f, _2374, _2381);
                        float _2383 = mad(0.016756348311901093f, _2377, _2382);
                        float _2384 = _2371 * 0.011721894145011902f;
                        float _2385 = mad(-0.008284442126750946f, _2374, _2384);
                        float _2386 = mad(0.9883948564529419f, _2377, _2385);
                        float _2387 = max(_2380, 0.0f);
                        float _2388 = max(_2383, 0.0f);
                        float _2389 = max(_2386, 0.0f);
                        float _2390 = min(_2387, 65535.0f);
                        float _2391 = min(_2388, 65535.0f);
                        float _2392 = min(_2389, 65535.0f);
                        float _2393 = _2390 * _1906;
                        float _2394 = _2391 * _1906;
                        float _2395 = _2392 * _1906;
                        float _2396 = max(_2393, 0.0f);
                        float _2397 = max(_2394, 0.0f);
                        float _2398 = max(_2395, 0.0f);
                        float _2399 = min(_2396, 65535.0f);
                        float _2400 = min(_2397, 65535.0f);
                        float _2401 = min(_2398, 65535.0f);
                        bool _2402 = (_1171 == 6);
                        _2414 = _2399;
                        _2415 = _2400;
                        _2416 = _2401;
                        do {
                          if (!_2402) {
                            float _2404 = _2399 * _55;
                            float _2405 = mad(_56, _2400, _2404);
                            float _2406 = mad(_57, _2401, _2405);
                            float _2407 = _2399 * _58;
                            float _2408 = mad(_59, _2400, _2407);
                            float _2409 = mad(_60, _2401, _2408);
                            float _2410 = _2399 * _61;
                            float _2411 = mad(_62, _2400, _2410);
                            float _2412 = mad(_63, _2401, _2411);
                            _2414 = _2406;
                            _2415 = _2409;
                            _2416 = _2412;
                          }
                          float _2417 = _2414 * 9.999999747378752e-05f;
                          float _2418 = _2415 * 9.999999747378752e-05f;
                          float _2419 = _2416 * 9.999999747378752e-05f;
                          float _2420 = log2(_2417);
                          float _2421 = log2(_2418);
                          float _2422 = log2(_2419);
                          float _2423 = _2420 * 0.1593017578125f;
                          float _2424 = _2421 * 0.1593017578125f;
                          float _2425 = _2422 * 0.1593017578125f;
                          float _2426 = exp2(_2423);
                          float _2427 = exp2(_2424);
                          float _2428 = exp2(_2425);
                          float _2429 = _2426 * 18.8515625f;
                          float _2430 = _2427 * 18.8515625f;
                          float _2431 = _2428 * 18.8515625f;
                          float _2432 = _2429 + 0.8359375f;
                          float _2433 = _2430 + 0.8359375f;
                          float _2434 = _2431 + 0.8359375f;
                          float _2435 = _2426 * 18.6875f;
                          float _2436 = _2427 * 18.6875f;
                          float _2437 = _2428 * 18.6875f;
                          float _2438 = _2435 + 1.0f;
                          float _2439 = _2436 + 1.0f;
                          float _2440 = _2437 + 1.0f;
                          float _2441 = 1.0f / _2438;
                          float _2442 = 1.0f / _2439;
                          float _2443 = 1.0f / _2440;
                          float _2444 = _2441 * _2432;
                          float _2445 = _2442 * _2433;
                          float _2446 = _2443 * _2434;
                          float _2447 = log2(_2444);
                          float _2448 = log2(_2445);
                          float _2449 = log2(_2446);
                          float _2450 = _2447 * 78.84375f;
                          float _2451 = _2448 * 78.84375f;
                          float _2452 = _2449 * 78.84375f;
                          float _2453 = exp2(_2450);
                          float _2454 = exp2(_2451);
                          float _2455 = exp2(_2452);
                          _2593 = _2453;
                          _2594 = _2454;
                          _2595 = _2455;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2457 = (_1171 == 7);
          if (_2457) {
            float _2460 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2461 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2462 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2464 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2465 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2466 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2468 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2469 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2470 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2471 = _2460 * _1153;
            float _2472 = mad(_2461, _1154, _2471);
            float _2473 = mad(_2462, _1155, _2472);
            float _2474 = _2464 * _1153;
            float _2475 = mad(_2465, _1154, _2474);
            float _2476 = mad(_2466, _1155, _2475);
            float _2477 = _2468 * _1153;
            float _2478 = mad(_2469, _1154, _2477);
            float _2479 = mad(_2470, _1155, _2478);
            float _2480 = _2473 * _55;
            float _2481 = mad(_56, _2476, _2480);
            float _2482 = mad(_57, _2479, _2481);
            float _2483 = _2473 * _58;
            float _2484 = mad(_59, _2476, _2483);
            float _2485 = mad(_60, _2479, _2484);
            float _2486 = _2473 * _61;
            float _2487 = mad(_62, _2476, _2486);
            float _2488 = mad(_63, _2479, _2487);
            float _2489 = _2482 * 9.999999747378752e-05f;
            float _2490 = _2485 * 9.999999747378752e-05f;
            float _2491 = _2488 * 9.999999747378752e-05f;
            float _2492 = log2(_2489);
            float _2493 = log2(_2490);
            float _2494 = log2(_2491);
            float _2495 = _2492 * 0.1593017578125f;
            float _2496 = _2493 * 0.1593017578125f;
            float _2497 = _2494 * 0.1593017578125f;
            float _2498 = exp2(_2495);
            float _2499 = exp2(_2496);
            float _2500 = exp2(_2497);
            float _2501 = _2498 * 18.8515625f;
            float _2502 = _2499 * 18.8515625f;
            float _2503 = _2500 * 18.8515625f;
            float _2504 = _2501 + 0.8359375f;
            float _2505 = _2502 + 0.8359375f;
            float _2506 = _2503 + 0.8359375f;
            float _2507 = _2498 * 18.6875f;
            float _2508 = _2499 * 18.6875f;
            float _2509 = _2500 * 18.6875f;
            float _2510 = _2507 + 1.0f;
            float _2511 = _2508 + 1.0f;
            float _2512 = _2509 + 1.0f;
            float _2513 = 1.0f / _2510;
            float _2514 = 1.0f / _2511;
            float _2515 = 1.0f / _2512;
            float _2516 = _2513 * _2504;
            float _2517 = _2514 * _2505;
            float _2518 = _2515 * _2506;
            float _2519 = log2(_2516);
            float _2520 = log2(_2517);
            float _2521 = log2(_2518);
            float _2522 = _2519 * 78.84375f;
            float _2523 = _2520 * 78.84375f;
            float _2524 = _2521 * 78.84375f;
            float _2525 = exp2(_2522);
            float _2526 = exp2(_2523);
            float _2527 = exp2(_2524);
            _2593 = _2525;
            _2594 = _2526;
            _2595 = _2527;
          } else {
            bool _2529 = (_1171 == 8);
            _2593 = _1153;
            _2594 = _1154;
            _2595 = _1155;
            if (!_2529) {
              bool _2531 = (_1171 == 9);
              float _2533 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2534 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2535 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2537 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2538 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2539 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2541 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2542 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2543 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2531) {
                float _2545 = _2533 * _1141;
                float _2546 = mad(_2534, _1142, _2545);
                float _2547 = mad(_2535, _1143, _2546);
                float _2548 = _2537 * _1141;
                float _2549 = mad(_2538, _1142, _2548);
                float _2550 = mad(_2539, _1143, _2549);
                float _2551 = _2541 * _1141;
                float _2552 = mad(_2542, _1142, _2551);
                float _2553 = mad(_2543, _1143, _2552);
                float _2554 = _2547 * _55;
                float _2555 = mad(_56, _2550, _2554);
                float _2556 = mad(_57, _2553, _2555);
                float _2557 = _2547 * _58;
                float _2558 = mad(_59, _2550, _2557);
                float _2559 = mad(_60, _2553, _2558);
                float _2560 = _2547 * _61;
                float _2561 = mad(_62, _2550, _2560);
                float _2562 = mad(_63, _2553, _2561);
                _2593 = _2556;
                _2594 = _2559;
                _2595 = _2562;
              } else {
                float _2564 = _2533 * _1167;
                float _2565 = mad(_2534, _1168, _2564);
                float _2566 = mad(_2535, _1169, _2565);
                float _2567 = _2537 * _1167;
                float _2568 = mad(_2538, _1168, _2567);
                float _2569 = mad(_2539, _1169, _2568);
                float _2570 = _2541 * _1167;
                float _2571 = mad(_2542, _1168, _2570);
                float _2572 = mad(_2543, _1169, _2571);
                float _2573 = _2566 * _55;
                float _2574 = mad(_56, _2569, _2573);
                float _2575 = mad(_57, _2572, _2574);
                float _2576 = _2566 * _58;
                float _2577 = mad(_59, _2569, _2576);
                float _2578 = mad(_60, _2572, _2577);
                float _2579 = _2566 * _61;
                float _2580 = mad(_62, _2569, _2579);
                float _2581 = mad(_63, _2572, _2580);
                float _2582 = _RootShaderParameters_040z;
                float _2583 = log2(_2575);
                float _2584 = log2(_2578);
                float _2585 = log2(_2581);
                float _2586 = _2583 * _2582;
                float _2587 = _2584 * _2582;
                float _2588 = _2585 * _2582;
                float _2589 = exp2(_2586);
                float _2590 = exp2(_2587);
                float _2591 = exp2(_2588);
                _2593 = _2589;
                _2594 = _2590;
                _2595 = _2591;
              }
            }
          }
        }
      }
    }
  }
  float _2596 = _2593 * 0.9523810148239136f;
  float _2597 = _2594 * 0.9523810148239136f;
  float _2598 = _2595 * 0.9523810148239136f;
  // _2599 = _1;
  RWOutputTexture[int3(_14, _15, _16)] = float4(_2596, _2597, _2598, 0.0f);
}
