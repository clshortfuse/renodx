#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> ColorTexture : register(t0);

Texture2D<float4> BloomTexture : register(t1);

struct _SceneColorApplyParamaters {
  float data[4];
};
StructuredBuffer<_SceneColorApplyParamaters> SceneColorApplyParamaters : register(t2);

Texture3D<float4> LumBilateralGrid : register(t3);

Texture2D<float4> BlurredLogLum : register(t4);

Texture2D<float4> BloomDirtMaskTexture : register(t5);

Texture3D<float4> ColorGradingLUT : register(t6);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_009y : packoffset(c009.y);
  float _RootShaderParameters_009z : packoffset(c009.z);
  float _RootShaderParameters_009w : packoffset(c009.w);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_044x : packoffset(c044.x);
  float _RootShaderParameters_044y : packoffset(c044.y);
  float _RootShaderParameters_044z : packoffset(c044.z);
  float _RootShaderParameters_045x : packoffset(c045.x);
  float _RootShaderParameters_045y : packoffset(c045.y);
  float _RootShaderParameters_045z : packoffset(c045.z);
  float _RootShaderParameters_047x : packoffset(c047.x);
  float _RootShaderParameters_047y : packoffset(c047.y);
  float _RootShaderParameters_048x : packoffset(c048.x);
  float _RootShaderParameters_048y : packoffset(c048.y);
  float _RootShaderParameters_048z : packoffset(c048.z);
  float _RootShaderParameters_048w : packoffset(c048.w);
  float _RootShaderParameters_050y : packoffset(c050.y);
  uint _RootShaderParameters_050z : packoffset(c050.z);
  float _RootShaderParameters_050w : packoffset(c050.w);
  float _RootShaderParameters_051x : packoffset(c051.x);
};

cbuffer UniformBufferConstants_View : register(b1) {
  float UniformBufferConstants_View_140w : packoffset(c140.w);
};

SamplerState ColorSampler : register(s0);

SamplerState BloomSampler : register(s1);

SamplerState LumBilateralGridSampler : register(s2);

SamplerState BlurredLogLumSampler : register(s3);

SamplerState BloomDirtMaskSampler : register(s4);

SamplerState ColorGradingLUTSampler : register(s5);

float4 main(
    noperspective float2 TEXCOORD: TEXCOORD,
    noperspective float4 TEXCOORD_1: TEXCOORD1,
    noperspective float4 TEXCOORD_2: TEXCOORD2,
    noperspective float2 TEXCOORD_3: TEXCOORD3,
    noperspective float2 TEXCOORD_4: TEXCOORD4,
    noperspective float4 SV_Position: SV_Position)
    : SV_Target {
  float4 SV_Target;
  float3 tonemappedPQ, post_srgb, output;
  // texture _1 = ColorGradingLUT;
  // texture _2 = BloomDirtMaskTexture;
  // texture _3 = BlurredLogLum;
  // texture _4 = LumBilateralGrid;
  // texture _5 = SceneColorApplyParamaters;
  // texture _6 = BloomTexture;
  // texture _7 = ColorTexture;
  // SamplerState _8 = ColorGradingLUTSampler;
  // SamplerState _9 = BloomDirtMaskSampler;
  // SamplerState _10 = BlurredLogLumSampler;
  // SamplerState _11 = LumBilateralGridSampler;
  // SamplerState _12 = BloomSampler;
  // SamplerState _13 = ColorSampler;
  // cbuffer _14 = UniformBufferConstants_View;
  // cbuffer _15 = _RootShaderParameters;
  // _16 = _14;
  // _17 = _15;
  float _18 = TEXCOORD_4.x;
  float _19 = TEXCOORD_4.y;
  float _20 = TEXCOORD_3.x;
  float _21 = TEXCOORD_3.y;
  float _22 = TEXCOORD_2.z;
  float _23 = TEXCOORD_2.w;
  float _24 = TEXCOORD_1.x;
  float _25 = TEXCOORD_1.y;
  float _26 = TEXCOORD_1.z;
  float _27 = TEXCOORD_1.w;
  float _28 = TEXCOORD.x;
  float _29 = TEXCOORD.y;
  float _31 = _RootShaderParameters_015z;
  float _32 = _RootShaderParameters_015w;
  float _33 = _RootShaderParameters_015x;
  float _34 = _RootShaderParameters_015y;
  float _35 = max(_28, _33);
  float _36 = max(_29, _34);
  float _37 = min(_35, _31);
  float _38 = min(_36, _32);
  // _39 = _7;
  // _40 = _13;
  float4 _41 = ColorTexture.Sample(ColorSampler, float2(_37, _38));
  float _42 = _41.x;
  float _43 = _41.y;
  float _44 = _41.z;
  float _46 = UniformBufferConstants_View_140w;
  float _47 = _46 * _42;
  float _48 = _46 * _43;
  float _49 = _46 * _44;
  float _51 = _RootShaderParameters_025w;
  float _53 = _RootShaderParameters_027x;
  float _54 = _RootShaderParameters_027y;
  float _55 = _RootShaderParameters_027z;
  float _56 = dot(float3(_47, _48, _49), float3(_53, _54, _55));
  float _57 = max(_56, _51);
  float _58 = log2(_57);
  float _60 = _RootShaderParameters_032w;
  float _62 = _RootShaderParameters_033z;
  float _63 = _RootShaderParameters_033w;
  float _64 = _62 * _18;
  float _65 = _63 * _19;
  float _66 = _RootShaderParameters_025y;
  float _67 = _66 * _58;
  float _68 = _RootShaderParameters_025z;
  float _69 = _67 + _68;
  float _70 = _69 * 0.96875f;
  float _71 = _70 + 0.015625f;
  // _72 = _4;
  // _73 = _11;
  float4 _74 = LumBilateralGrid.Sample(LumBilateralGridSampler, float3(_64, _65, _71));
  float _75 = _74.x;
  float _76 = _74.y;
  float _77 = _75 / _76;
  // _78 = _3;
  // _79 = _10;
  float4 _80 = BlurredLogLum.Sample(BlurredLogLumSampler, float2(_18, _19));
  float _81 = _80.x;
  bool _82 = (_76 < 0.0010000000474974513f);
  float _83 = _82 ? _81 : _77;
  float _84 = _81 - _83;
  float _85 = _84 * _60;
  float _86 = log2(_24);
  float _87 = _83 + _86;
  float _88 = _87 + _85;
  float _90 = _RootShaderParameters_032z;
  float _91 = _RootShaderParameters_032y;
  float _92 = _RootShaderParameters_032x;
  float _93 = _86 + _58;
  float _94 = _93 - _88;
  float _95 = _88 - _25;
  bool _96 = (_95 > 0.0f);
  float _97 = _96 ? _92 : _91;
  float _108;
  float _468;
  float _469;
  float _470;
  if (_96) {
    float _100 = _RootShaderParameters_034x;
    float _101 = _95 - _100;
    float _102 = max(0.0f, _101);
    _108 = _102;
  } else {
    float _104 = _RootShaderParameters_034y;
    float _105 = _104 + _95;
    float _106 = min(0.0f, _105);
    _108 = _106;
  }
  float _109 = _108 * _97;
  float _110 = _94 * _90;
  float _111 = _88 - _93;
  float _112 = _111 + _110;
  float _113 = _112 - _108;
  float _114 = _113 + _109;
  float _115 = exp2(_114);
  float _116 = _115 * _47;
  float _117 = _115 * _48;
  float _118 = _115 * _49;
  float _119 = _115 * _46;
  float _121 = _RootShaderParameters_047y;
  float _122 = dot(float3(_116, _117, _118), float3(0.30000001192092896f, 0.5899999737739563f, 0.10999999940395355f));
  float _124 = _RootShaderParameters_009x;
  float _125 = _RootShaderParameters_009y;
  float _126 = _124 * _28;
  float _127 = _125 * _29;
  float _128 = floor(_126);
  float _129 = floor(_127);
  uint _130 = uint(_128);
  uint _131 = uint(_129);
  int _132 = _130 & 1;
  float _133 = float(_132);
  float _134 = _133 * 2.0f;
  float _135 = _134 + -1.0f;
  int _136 = _131 & 1;
  float _137 = float(_136);
  float _138 = _137 * 2.0f;
  float _139 = _138 + -1.0f;
  float _140 = _RootShaderParameters_009z;
  float _141 = _135 * _140;
  float _142 = _141 + _28;
  float _144 = _RootShaderParameters_015z;
  float _145 = _RootShaderParameters_015w;
  float _146 = _RootShaderParameters_015x;
  float _147 = _RootShaderParameters_015y;
  float _148 = max(_142, _146);
  float _149 = max(_29, _147);
  float _150 = min(_148, _144);
  float _151 = min(_149, _145);
  // _152 = _7;
  // _153 = _13;
  float4 _154 = ColorTexture.Sample(ColorSampler, float2(_150, _151));
  float _155 = _154.x;
  float _156 = _154.y;
  float _157 = _154.z;
  float _158 = _155 * _119;
  float _159 = _156 * _119;
  float _160 = _157 * _119;
  float _162 = _RootShaderParameters_009w;
  float _163 = _162 * _139;
  float _164 = _163 + _29;
  float _166 = _RootShaderParameters_015z;
  float _167 = _RootShaderParameters_015w;
  float _168 = _RootShaderParameters_015x;
  float _169 = _RootShaderParameters_015y;
  float _170 = max(_28, _168);
  float _171 = max(_164, _169);
  float _172 = min(_170, _166);
  float _173 = min(_171, _167);
  // _174 = _7;
  // _175 = _13;
  float4 _176 = ColorTexture.Sample(ColorSampler, float2(_172, _173));
  float _177 = _176.x;
  float _178 = _176.y;
  float _179 = _176.z;
  float _180 = _177 * _119;
  float _181 = _178 * _119;
  float _182 = _179 * _119;
  float _183 = dot(float3(_158, _159, _160), float3(0.30000001192092896f, 0.5899999737739563f, 0.10999999940395355f));
  float _184 = dot(float3(_180, _181, _182), float3(0.30000001192092896f, 0.5899999737739563f, 0.10999999940395355f));
  float _185 = ddx_fine(_116);
  float _186 = _185 * _135;
  float _187 = ddx_fine(_117);
  float _188 = _187 * _135;
  float _189 = ddx_fine(_118);
  float _190 = _189 * _135;
  float _191 = ddy_fine(_116);
  float _192 = _191 * _139;
  float _193 = ddy_fine(_117);
  float _194 = _193 * _139;
  float _195 = ddy_fine(_118);
  float _196 = _195 * _139;
  float _197 = ddx_fine(_122);
  float _198 = _197 * _135;
  float _199 = ddy_fine(_122);
  float _200 = _199 * _139;
  float _201 = _122 - _183;
  float _202 = _122 - _184;
  float _203 = abs(_201);
  float _204 = abs(_202);
  float _205 = abs(_198);
  float _206 = abs(_200);
  float _207 = max(_205, _206);
  float _208 = max(_203, _204);
  float _209 = max(_208, _207);
  float _210 = _209 * _24;
  float _211 = 1.0f - _210;
  float _212 = saturate(_211);
  float _213 = _121 * _212;
  float _214 = -0.0f - _213;
  float _215 = _116 * 4.0f;
  float _216 = _117 * 4.0f;
  float _217 = _118 * 4.0f;
  float _218 = _158 - _215;
  float _219 = _218 + _180;
  float _220 = _219 + _116;
  float _221 = _220 - _186;
  float _222 = _221 + _116;
  float _223 = _222 - _192;
  float _224 = _159 - _216;
  float _225 = _224 + _181;
  float _226 = _225 + _117;
  float _227 = _226 - _188;
  float _228 = _227 + _117;
  float _229 = _228 - _194;
  float _230 = _160 - _217;
  float _231 = _230 + _182;
  float _232 = _231 + _118;
  float _233 = _232 - _190;
  float _234 = _233 + _118;
  float _235 = _234 - _196;
  float _236 = _223 * _214;
  float _237 = _229 * _214;
  float _238 = _235 * _214;
  float _239 = _236 + _116;
  float _240 = _237 + _117;
  float _241 = _238 + _118;
  float _243 = _RootShaderParameters_044x;
  float _244 = _RootShaderParameters_044y;
  float _245 = _RootShaderParameters_044z;
  float _246 = _239 * _243;
  float _247 = _240 * _244;
  float _248 = _241 * _245;
  // _249 = _5;
  float4 _250 = SceneColorApplyParamaters[0].data[0 / 4];
  float _251 = _250.x;
  float _252 = _250.y;
  float _253 = _250.z;
  float _254 = _246 * _251;
  float _255 = _247 * _252;
  float _256 = _248 * _253;
  float _258 = _RootShaderParameters_036x;
  float _259 = _RootShaderParameters_036y;
  float _260 = _RootShaderParameters_036z;
  float _261 = _RootShaderParameters_036w;
  float _262 = _258 * _28;
  float _263 = _259 * _29;
  float _264 = _262 + _260;
  float _265 = _263 + _261;
  float _267 = _RootShaderParameters_037z;
  float _268 = _RootShaderParameters_037w;
  float _269 = _RootShaderParameters_037x;
  float _270 = _RootShaderParameters_037y;
  float _271 = max(_264, _269);
  float _272 = max(_265, _270);
  float _273 = min(_271, _267);
  float _274 = min(_272, _268);
  // _275 = _6;
  // _276 = _12;
  float4 _277 = BloomTexture.Sample(BloomSampler, float2(_273, _274));
  float _278 = _277.x;
  float _279 = _277.y;
  float _280 = _277.z;
  float _282 = UniformBufferConstants_View_140w;
  float _283 = _282 * _278;
  float _284 = _282 * _279;
  float _285 = _282 * _280;
  float _287 = _RootShaderParameters_048x;
  float _288 = _RootShaderParameters_048y;
  float _289 = _RootShaderParameters_048z;
  float _290 = _RootShaderParameters_048w;
  float _291 = _289 * _20;
  float _292 = _290 * _21;
  float _293 = _291 + _287;
  float _294 = _292 + _288;
  float _295 = _293 * 0.5f;
  float _296 = _294 * 0.5f;
  float _297 = _295 + 0.5f;
  float _298 = 0.5f - _296;
  // _299 = _2;
  // _300 = _9;
  float4 _301 = BloomDirtMaskTexture.Sample(BloomDirtMaskSampler, float2(_297, _298));
  float _302 = _301.x;
  float _303 = _301.y;
  float _304 = _301.z;
  float _306 = _RootShaderParameters_045x;
  float _307 = _RootShaderParameters_045y;
  float _308 = _RootShaderParameters_045z;
  float _309 = _306 * _302;
  float _310 = _307 * _303;
  float _311 = _308 * _304;
  float _312 = _309 + 1.0f;
  float _313 = _310 + 1.0f;
  float _314 = _311 + 1.0f;
  float _315 = _283 * _312;
  float _316 = _284 * _313;
  float _317 = _285 * _314;
  float _318 = _315 + _254;
  float _319 = _316 + _255;
  float _320 = _317 + _256;
  float _322 = _RootShaderParameters_047x;
  float _323 = _322 * _26;
  float _324 = _322 * _27;
  float _325 = dot(float2(_323, _324), float2(_323, _324));
  float _326 = _325 + 1.0f;
  float _327 = 1.0f / _326;
  float _328 = _327 * _327;
  float _329 = _24 * 0.009999999776482582f;
  float _330 = _329 * _328;
  float _331 = _330 * _318;
  float _332 = _330 * _319;
  float _333 = _330 * _320;
  float _334 = log2(_331);
  float _335 = log2(_332);
  float _336 = log2(_333);
  float _337 = _334 * 0.1593017578125f;
  float _338 = _335 * 0.1593017578125f;
  float _339 = _336 * 0.1593017578125f;
  float _340 = exp2(_337);
  float _341 = exp2(_338);
  float _342 = exp2(_339);
  float _343 = _340 * 18.8515625f;
  float _344 = _341 * 18.8515625f;
  float _345 = _342 * 18.8515625f;
  float _346 = _343 + 0.8359375f;
  float _347 = _344 + 0.8359375f;
  float _348 = _345 + 0.8359375f;
  float _349 = _340 * 18.6875f;
  float _350 = _341 * 18.6875f;
  float _351 = _342 * 18.6875f;
  float _352 = _349 + 1.0f;
  float _353 = _350 + 1.0f;
  float _354 = _351 + 1.0f;
  float _355 = 1.0f / _352;
  float _356 = 1.0f / _353;
  float _357 = 1.0f / _354;
  float _358 = _355 * _346;
  float _359 = _356 * _347;
  float _360 = _357 * _348;
  float _361 = log2(_358);
  float _362 = log2(_359);
  float _363 = log2(_360);
  float _364 = _361 * 78.84375f;
  float _365 = _362 * 78.84375f;
  float _366 = _363 * 78.84375f;
  float _367 = exp2(_364);
  float _368 = exp2(_365);
  float _369 = exp2(_366);
  float _370 = _367 * 0.96875f;
  float _371 = _368 * 0.96875f;
  float _372 = _369 * 0.96875f;
  float _373 = _370 + 0.015625f;
  float _374 = _371 + 0.015625f;
  float _375 = _372 + 0.015625f;
  // _376 = _1;
  // _377 = _8;

  float4 _378 = ColorGradingLUT.Sample(ColorGradingLUTSampler, float3(_373, _374, _375));
  tonemappedPQ = _378.rgb;
  float3 srgb_input = pqTosRGB(tonemappedPQ);

  float _379 = _378.x;
  float _380 = _378.y;
  float _381 = _378.z;
  if (injectedData.toneMapType > 1.f) {
    _379 = srgb_input.r;
    _380 = srgb_input.g;
    _381 = srgb_input.b;
  }

  float _382 = _379 * 1.0499999523162842f;
  float _383 = _380 * 1.0499999523162842f;
  float _384 = _381 * 1.0499999523162842f;
  float _385 = _23 * 543.3099975585938f;
  float _386 = _385 + _22;
  float _387 = sin(_386);
  float _388 = _387 * 493013.0f;
  float _389 = frac(_388);
  float _390 = _389 * 0.00390625f;
  float _391 = _390 + -0.001953125f;
  float _392 = _391 + _382;
  float _393 = _391 + _383;
  float _394 = _391 + _384;
  uint _396 = _RootShaderParameters_050z;
  bool _397 = (_396 == 0);
  _468 = _392;
  _469 = _393;
  _470 = _394;

  if (!_397) {
    float _399 = log2(_392);
    float _400 = log2(_393);
    float _401 = log2(_394);
    float _402 = _399 * 0.012683313339948654f;
    float _403 = _400 * 0.012683313339948654f;
    float _404 = _401 * 0.012683313339948654f;
    float _405 = exp2(_402);
    float _406 = exp2(_403);
    float _407 = exp2(_404);
    float _408 = _405 + -0.8359375f;
    float _409 = _406 + -0.8359375f;
    float _410 = _407 + -0.8359375f;
    float _411 = max(0.0f, _408);
    float _412 = max(0.0f, _409);
    float _413 = max(0.0f, _410);
    float _414 = _405 * 18.6875f;
    float _415 = _406 * 18.6875f;
    float _416 = _407 * 18.6875f;
    float _417 = 18.8515625f - _414;
    float _418 = 18.8515625f - _415;
    float _419 = 18.8515625f - _416;
    float _420 = _411 / _417;
    float _421 = _412 / _418;
    float _422 = _413 / _419;
    float _423 = log2(_420);
    float _424 = log2(_421);
    float _425 = log2(_422);
    float _426 = _423 * 6.277394771575928f;
    float _427 = _424 * 6.277394771575928f;
    float _428 = _425 * 6.277394771575928f;
    float _429 = exp2(_426);
    float _430 = exp2(_427);
    float _431 = exp2(_428);
    float _432 = _429 * 10000.0f;
    float _433 = _430 * 10000.0f;
    float _434 = _431 * 10000.0f;
    float _436 = _RootShaderParameters_050y;
    float _437 = _432 / _436;
    float _438 = _433 / _436;
    float _439 = _434 / _436;
    float _440 = max(6.103519990574569e-05f, _437);
    float _441 = max(6.103519990574569e-05f, _438);
    float _442 = max(6.103519990574569e-05f, _439);
    float _443 = max(_440, 0.0031306699384003878f);
    float _444 = max(_441, 0.0031306699384003878f);
    float _445 = max(_442, 0.0031306699384003878f);
    float _446 = log2(_443);
    float _447 = log2(_444);
    float _448 = log2(_445);
    float _449 = _446 * 0.4166666567325592f;
    float _450 = _447 * 0.4166666567325592f;
    float _451 = _448 * 0.4166666567325592f;
    float _452 = exp2(_449);
    float _453 = exp2(_450);
    float _454 = exp2(_451);
    float _455 = _452 * 1.0549999475479126f;
    float _456 = _453 * 1.0549999475479126f;
    float _457 = _454 * 1.0549999475479126f;
    float _458 = _455 + -0.054999999701976776f;
    float _459 = _456 + -0.054999999701976776f;
    float _460 = _457 + -0.054999999701976776f;
    float _461 = _440 * 12.920000076293945f;
    float _462 = _441 * 12.920000076293945f;
    float _463 = _442 * 12.920000076293945f;
    float _464 = min(_461, _458);
    float _465 = min(_462, _459);
    float _466 = min(_463, _460);
    _468 = _464;
    _469 = _465;
    _470 = _466;
  }
  /* These apply brightness and contrast, so we skip them */
  float _472 = _RootShaderParameters_051x;
  float _474 = _RootShaderParameters_050w;
  if (injectedData.toneMapType > 0.f) {
    _472 = DEFAULT_CONTRAST;
    _474 = DEFAULT_BRIGHTNESS;
  }
  float _475 = _468 + -0.5f;
  float _476 = _475 + _474;
  float _477 = _469 + -0.5f;
  float _478 = _477 + _474;
  float _479 = _470 + -0.5f;
  float _480 = _479 + _474;
  float _481 = _476 * _472;
  float _482 = _478 * _472;
  float _483 = _480 * _472;
  float _484 = _481 + 0.5f;
  float _485 = _482 + 0.5f;
  float _486 = _483 + 0.5f;
  float _487 = saturate(_484);
  float _488 = saturate(_485);
  float _489 = saturate(_486);
  post_srgb = float3(_487, _488, _489);

  if (injectedData.toneMapType > 1.f) {
    output = upgradeSRGBtoPQ(tonemappedPQ, post_srgb);
    return float4(output, 0.f);
  }

  SV_Target.x = _487;
  SV_Target.y = _488;
  SV_Target.z = _489;
  SV_Target.w = 0.0f;
  return SV_Target;
}
