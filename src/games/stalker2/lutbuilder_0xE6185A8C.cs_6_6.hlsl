#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

Texture2D<float4> Textures_2 : register(t1);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_005z : packoffset(c005.z);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035x : packoffset(c035.x);
  float _RootShaderParameters_035y : packoffset(c035.y);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  uint _RootShaderParameters_038z : packoffset(c038.z);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_000x : packoffset(c000.x);
  float UniformBufferConstants_WorkingColorSpace_000y : packoffset(c000.y);
  float UniformBufferConstants_WorkingColorSpace_000z : packoffset(c000.z);
  float UniformBufferConstants_WorkingColorSpace_001x : packoffset(c001.x);
  float UniformBufferConstants_WorkingColorSpace_001y : packoffset(c001.y);
  float UniformBufferConstants_WorkingColorSpace_001z : packoffset(c001.z);
  float UniformBufferConstants_WorkingColorSpace_002x : packoffset(c002.x);
  float UniformBufferConstants_WorkingColorSpace_002y : packoffset(c002.y);
  float UniformBufferConstants_WorkingColorSpace_002z : packoffset(c002.z);
  float UniformBufferConstants_WorkingColorSpace_004x : packoffset(c004.x);
  float UniformBufferConstants_WorkingColorSpace_004y : packoffset(c004.y);
  float UniformBufferConstants_WorkingColorSpace_004z : packoffset(c004.z);
  float UniformBufferConstants_WorkingColorSpace_005x : packoffset(c005.x);
  float UniformBufferConstants_WorkingColorSpace_005y : packoffset(c005.y);
  float UniformBufferConstants_WorkingColorSpace_005z : packoffset(c005.z);
  float UniformBufferConstants_WorkingColorSpace_006x : packoffset(c006.x);
  float UniformBufferConstants_WorkingColorSpace_006y : packoffset(c006.y);
  float UniformBufferConstants_WorkingColorSpace_006z : packoffset(c006.z);
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

SamplerState Samplers_2 : register(s1);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_2;
  // texture _3 = Textures_1;
  // SamplerState _4 = Samplers_2;
  // SamplerState _5 = Samplers_1;
  // cbuffer _6 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _7 = _RootShaderParameters;
  // _8 = _6;
  // _9 = _7;
  float _13[6];
  float _14[6];
  float _15[6];
  float _16[6];
  float _17 = float(_10);
  float _18 = float(_11);
  float _19 = _17 + 0.5f;
  float _20 = _18 + 0.5f;
  float _22 = _RootShaderParameters_042x;
  float _23 = _RootShaderParameters_042y;
  float _24 = _22 * _19;
  float _25 = _23 * _20;
  float _26 = _24 + -0.015625f;
  float _27 = _25 + -0.015625f;
  float _28 = _26 * 1.0322580337524414f;
  float _29 = _27 * 1.0322580337524414f;
  float _30 = float(_12);
  float _31 = _30 * 0.032258063554763794f;
  uint _33 = _RootShaderParameters_041x;
  bool _34 = (_33 == 1);
  float _51 = 1.379158854484558f;
  float _52 = -0.3088507056236267f;
  float _53 = -0.07034677267074585f;
  float _54 = -0.06933528929948807f;
  float _55 = 1.0822921991348267f;
  float _56 = -0.012962047010660172f;
  float _57 = -0.002159259282052517f;
  float _58 = -0.045465391129255295f;
  float _59 = 1.0477596521377563f;
  float _117;
  float _118;
  float _119;
  float _168;
  float _897;
  float _933;
  float _944;
  float _1008;
  float _1187;
  float _1198;
  float _1209;
  float _1406;
  float _1407;
  float _1408;
  float _1419;
  float _1430;
  float _1612;
  float _1648;
  float _1659;
  float _1698;
  float _1808;
  float _1882;
  float _1956;
  float _2035;
  float _2036;
  float _2037;
  float _2188;
  float _2224;
  float _2235;
  float _2274;
  float _2384;
  float _2458;
  float _2532;
  float _2611;
  float _2612;
  float _2613;
  float _2790;
  float _2791;
  float _2792;
  if (!_34) {
    bool _36 = (_33 == 2);
    _51 = 1.02579927444458f;
    _52 = -0.020052503794431686f;
    _53 = -0.0057713985443115234f;
    _54 = -0.0022350111976265907f;
    _55 = 1.0045825242996216f;
    _56 = -0.002352306619286537f;
    _57 = -0.005014004185795784f;
    _58 = -0.025293385609984398f;
    _59 = 1.0304402112960815f;
    if (!_36) {
      bool _38 = (_33 == 3);
      _51 = 0.6954522132873535f;
      _52 = 0.14067870378494263f;
      _53 = 0.16386906802654266f;
      _54 = 0.044794563204050064f;
      _55 = 0.8596711158752441f;
      _56 = 0.0955343171954155f;
      _57 = -0.005525882821530104f;
      _58 = 0.004025210160762072f;
      _59 = 1.0015007257461548f;
      if (!_38) {
        bool _40 = (_33 == 4);
        float _41 = _40 ? 1.0f : 1.7050515413284302f;
        float _42 = _40 ? 0.0f : -0.6217905879020691f;
        float _43 = _40 ? 0.0f : -0.0832584798336029f;
        float _44 = _40 ? 0.0f : -0.13025718927383423f;
        float _45 = _40 ? 1.0f : 1.1408027410507202f;
        float _46 = _40 ? 0.0f : -0.010548528283834457f;
        float _47 = _40 ? 0.0f : -0.024003278464078903f;
        float _48 = _40 ? 0.0f : -0.1289687603712082f;
        float _49 = _40 ? 1.0f : 1.152971863746643f;
        _51 = _41;
        _52 = _42;
        _53 = _43;
        _54 = _44;
        _55 = _45;
        _56 = _46;
        _57 = _47;
        _58 = _48;
        _59 = _49;
      }
    }
  }
  uint _61 = _RootShaderParameters_040w;
  bool _62 = (_61 > 2);
  if (_62) {
    float _64 = log2(_28);
    float _65 = log2(_29);
    float _66 = log2(_31);
    float _67 = _64 * 0.012683313339948654f;
    float _68 = _65 * 0.012683313339948654f;
    float _69 = _66 * 0.012683313339948654f;
    float _70 = exp2(_67);
    float _71 = exp2(_68);
    float _72 = exp2(_69);
    float _73 = _70 + -0.8359375f;
    float _74 = _71 + -0.8359375f;
    float _75 = _72 + -0.8359375f;
    float _76 = max(0.0f, _73);
    float _77 = max(0.0f, _74);
    float _78 = max(0.0f, _75);
    float _79 = _70 * 18.6875f;
    float _80 = _71 * 18.6875f;
    float _81 = _72 * 18.6875f;
    float _82 = 18.8515625f - _79;
    float _83 = 18.8515625f - _80;
    float _84 = 18.8515625f - _81;
    float _85 = _76 / _82;
    float _86 = _77 / _83;
    float _87 = _78 / _84;
    float _88 = log2(_85);
    float _89 = log2(_86);
    float _90 = log2(_87);
    float _91 = _88 * 6.277394771575928f;
    float _92 = _89 * 6.277394771575928f;
    float _93 = _90 * 6.277394771575928f;
    float _94 = exp2(_91);
    float _95 = exp2(_92);
    float _96 = exp2(_93);
    float _97 = _94 * 100.0f;
    float _98 = _95 * 100.0f;
    float _99 = _96 * 100.0f;
    _117 = _97;
    _118 = _98;
    _119 = _99;
  } else {
    float _101 = _26 * 14.45161247253418f;
    float _102 = _101 + -6.07624626159668f;
    float _103 = _27 * 14.45161247253418f;
    float _104 = _103 + -6.07624626159668f;
    float _105 = _30 * 0.4516128897666931f;
    float _106 = _105 + -6.07624626159668f;
    float _107 = exp2(_102);
    float _108 = exp2(_104);
    float _109 = exp2(_106);
    float _110 = _107 * 0.18000000715255737f;
    float _111 = _108 * 0.18000000715255737f;
    float _112 = _109 * 0.18000000715255737f;
    float _113 = _110 + -0.002667719265446067f;
    float _114 = _111 + -0.002667719265446067f;
    float _115 = _112 + -0.002667719265446067f;
    _117 = _113;
    _118 = _114;
    _119 = _115;
  }
  float3 input_color = float3(_117, _118, _119);  // CustomEdit

  float _121 = UniformBufferConstants_WorkingColorSpace_004x;
  float _122 = UniformBufferConstants_WorkingColorSpace_004y;
  float _123 = UniformBufferConstants_WorkingColorSpace_004z;
  float _125 = UniformBufferConstants_WorkingColorSpace_005x;
  float _126 = UniformBufferConstants_WorkingColorSpace_005y;
  float _127 = UniformBufferConstants_WorkingColorSpace_005z;
  float _129 = UniformBufferConstants_WorkingColorSpace_006x;
  float _130 = UniformBufferConstants_WorkingColorSpace_006y;
  float _131 = UniformBufferConstants_WorkingColorSpace_006z;
  float _133 = UniformBufferConstants_WorkingColorSpace_000x;
  float _134 = UniformBufferConstants_WorkingColorSpace_000y;
  float _135 = UniformBufferConstants_WorkingColorSpace_000z;
  float _137 = UniformBufferConstants_WorkingColorSpace_001x;
  float _138 = UniformBufferConstants_WorkingColorSpace_001y;
  float _139 = UniformBufferConstants_WorkingColorSpace_001z;
  float _141 = UniformBufferConstants_WorkingColorSpace_002x;
  float _142 = UniformBufferConstants_WorkingColorSpace_002y;
  float _143 = UniformBufferConstants_WorkingColorSpace_002z;
  uint _145 = _RootShaderParameters_038z;
  bool _146 = (_145 != 0);
  float _148 = _RootShaderParameters_035y;
  float _149 = _RootShaderParameters_035x;
  float _150 = _149 * 1.0005563497543335f;
  float _151 = 0.9994439482688904f / _149;
  bool _152 = !(_150 <= 7000.0f);
  if (!_152) {
    float _154 = _151 * 4607000064.0f;
    float _155 = 2967800.0f - _154;
    float _156 = _155 * _151;
    float _157 = _156 + 99.11000061035156f;
    float _158 = _157 * _151;
    float _159 = _158 + 0.24406300485134125f;
    _168 = _159;
  } else {
    float _161 = _151 * 2006400000.0f;
    float _162 = 1901800.0f - _161;
    float _163 = _162 * _151;
    float _164 = _163 + 247.47999572753906f;
    float _165 = _164 * _151;
    float _166 = _165 + 0.23703999817371368f;
    _168 = _166;
  }
  float _169 = _168 * _168;
  float _170 = _169 * 3.0f;
  float _171 = _168 * 2.869999885559082f;
  float _172 = _171 + -0.2750000059604645f;
  float _173 = _172 - _170;
  float _174 = _149 * 1.2864121856637212e-07f;
  float _175 = _174 + 0.00015411825734190643f;
  float _176 = _175 * _149;
  float _177 = _176 + 0.8601177334785461f;
  float _178 = _149 * 7.081451371959702e-07f;
  float _179 = _178 + 0.0008424202096648514f;
  float _180 = _179 * _149;
  float _181 = _180 + 1.0f;
  float _182 = _177 / _181;
  float _183 = _149 * 4.204816761443908e-08f;
  float _184 = _183 + 4.228062607580796e-05f;
  float _185 = _184 * _149;
  float _186 = _185 + 0.31739872694015503f;
  float _187 = _149 * 2.8974181986995973e-05f;
  float _188 = 1.0f - _187;
  float _189 = _149 * _149;
  float _190 = _189 * 1.6145605741257896e-07f;
  float _191 = _188 + _190;
  float _192 = _186 / _191;
  float _193 = _182 * 3.0f;
  float _194 = _182 * 2.0f;
  float _195 = _192 * 8.0f;
  float _196 = _194 + 4.0f;
  float _197 = _196 - _195;
  float _198 = _193 / _197;
  float _199 = _192 * 2.0f;
  float _200 = _199 / _197;
  bool _201 = (_149 < 4000.0f);
  float _202 = _201 ? _198 : _168;
  float _203 = _201 ? _200 : _173;
  float _204 = _149 * 1916156.25f;
  float _205 = -1137581184.0f - _204;
  float _206 = _189 * 1.5317699909210205f;
  float _207 = _205 - _206;
  float _208 = _149 + 1189.6199951171875f;
  float _209 = _208 * _149;
  float _210 = _209 + 1412139.875f;
  float _211 = _210 * _210;
  float _212 = _207 / _211;
  float _213 = _149 * 705674.0f;
  float _214 = 1974715392.0f - _213;
  float _215 = _189 * 308.60699462890625f;
  float _216 = _214 - _215;
  float _217 = _149 * 179.45599365234375f;
  float _218 = 6193636.0f - _217;
  float _219 = _218 + _189;
  float _220 = _219 * _219;
  float _221 = _216 / _220;
  float _222 = dot(float2(_212, _221), float2(_212, _221));
  float _223 = rsqrt(_222);
  float _224 = _148 * 0.05000000074505806f;
  float _225 = _224 * _221;
  float _226 = _225 * _223;
  float _227 = _226 + _182;
  float _228 = _224 * _212;
  float _229 = _228 * _223;
  float _230 = _192 - _229;
  float _231 = _227 * 3.0f;
  float _232 = _227 * 2.0f;
  float _233 = _230 * 8.0f;
  float _234 = 4.0f - _233;
  float _235 = _234 + _232;
  float _236 = _231 / _235;
  float _237 = _230 * 2.0f;
  float _238 = _237 / _235;
  float _239 = _236 - _198;
  float _240 = _238 - _200;
  float _241 = _239 + _202;
  float _242 = _240 + _203;
  float _243 = _146 ? _241 : 0.3127000033855438f;
  float _244 = _146 ? _242 : 0.32899999618530273f;
  float _245 = _146 ? 0.3127000033855438f : _241;
  float _246 = _146 ? 0.32899999618530273f : _242;
  float _247 = max(_244, 1.000000013351432e-10f);
  float _248 = _243 / _247;
  float _249 = 1.0f - _243;
  float _250 = _249 - _244;
  float _251 = _250 / _247;
  float _252 = max(_246, 1.000000013351432e-10f);
  float _253 = _245 / _252;
  float _254 = 1.0f - _245;
  float _255 = _254 - _246;
  float _256 = _255 / _252;
  float _257 = _248 * 0.8950999975204468f;
  float _258 = _257 + 0.266400009393692f;
  float _259 = mad(-0.16140000522136688f, _251, _258);
  float _260 = _248 * 0.7501999735832214f;
  float _261 = 1.7135000228881836f - _260;
  float _262 = mad(0.03669999912381172f, _251, _261);
  float _263 = _248 * 0.03889999911189079f;
  float _264 = _263 + -0.06849999725818634f;
  float _265 = mad(1.0296000242233276f, _251, _264);
  float _266 = _253 * 0.8950999975204468f;
  float _267 = _266 + 0.266400009393692f;
  float _268 = mad(-0.16140000522136688f, _256, _267);
  float _269 = _253 * 0.7501999735832214f;
  float _270 = 1.7135000228881836f - _269;
  float _271 = mad(0.03669999912381172f, _256, _270);
  float _272 = _253 * 0.03889999911189079f;
  float _273 = _272 + -0.06849999725818634f;
  float _274 = mad(1.0296000242233276f, _256, _273);
  float _275 = _268 / _259;
  float _276 = _271 / _262;
  float _277 = _274 / _265;
  float _278 = mad(_276, -0.7501999735832214f, 0.0f);
  float _279 = mad(_276, 1.7135000228881836f, 0.0f);
  float _280 = mad(_276, 0.03669999912381172f, -0.0f);
  float _281 = mad(_277, 0.03889999911189079f, 0.0f);
  float _282 = mad(_277, -0.06849999725818634f, 0.0f);
  float _283 = mad(_277, 1.0296000242233276f, 0.0f);
  float _284 = _275 * 0.883457362651825f;
  float _285 = mad(-0.1470542997121811f, _278, _284);
  float _286 = mad(0.1599626988172531f, _281, _285);
  float _287 = _275 * 0.26293492317199707f;
  float _288 = mad(-0.1470542997121811f, _279, _287);
  float _289 = mad(0.1599626988172531f, _282, _288);
  float _290 = _275 * -0.15930065512657166f;
  float _291 = mad(-0.1470542997121811f, _280, _290);
  float _292 = mad(0.1599626988172531f, _283, _291);
  float _293 = _275 * 0.38695648312568665f;
  float _294 = mad(0.5183603167533875f, _278, _293);
  float _295 = mad(0.04929120093584061f, _281, _294);
  float _296 = _275 * 0.11516613513231277f;
  float _297 = mad(0.5183603167533875f, _279, _296);
  float _298 = mad(0.04929120093584061f, _282, _297);
  float _299 = _275 * -0.0697740763425827f;
  float _300 = mad(0.5183603167533875f, _280, _299);
  float _301 = mad(0.04929120093584061f, _283, _300);
  float _302 = _275 * -0.007634039502590895f;
  float _303 = mad(0.04004279896616936f, _278, _302);
  float _304 = mad(0.9684867262840271f, _281, _303);
  float _305 = _275 * -0.0022720457054674625f;
  float _306 = mad(0.04004279896616936f, _279, _305);
  float _307 = mad(0.9684867262840271f, _282, _306);
  float _308 = _275 * 0.0013765322510153055f;
  float _309 = mad(0.04004279896616936f, _280, _308);
  float _310 = mad(0.9684867262840271f, _283, _309);
  float _311 = _286 * _133;
  float _312 = mad(_289, _137, _311);
  float _313 = mad(_292, _141, _312);
  float _314 = _286 * _134;
  float _315 = mad(_289, _138, _314);
  float _316 = mad(_292, _142, _315);
  float _317 = _286 * _135;
  float _318 = mad(_289, _139, _317);
  float _319 = mad(_292, _143, _318);
  float _320 = _295 * _133;
  float _321 = mad(_298, _137, _320);
  float _322 = mad(_301, _141, _321);
  float _323 = _295 * _134;
  float _324 = mad(_298, _138, _323);
  float _325 = mad(_301, _142, _324);
  float _326 = _295 * _135;
  float _327 = mad(_298, _139, _326);
  float _328 = mad(_301, _143, _327);
  float _329 = _304 * _133;
  float _330 = mad(_307, _137, _329);
  float _331 = mad(_310, _141, _330);
  float _332 = _304 * _134;
  float _333 = mad(_307, _138, _332);
  float _334 = mad(_310, _142, _333);
  float _335 = _304 * _135;
  float _336 = mad(_307, _139, _335);
  float _337 = mad(_310, _143, _336);
  float _338 = _313 * _121;
  float _339 = mad(_122, _322, _338);
  float _340 = mad(_123, _331, _339);
  float _341 = _316 * _121;
  float _342 = mad(_122, _325, _341);
  float _343 = mad(_123, _334, _342);
  float _344 = _319 * _121;
  float _345 = mad(_122, _328, _344);
  float _346 = mad(_123, _337, _345);
  float _347 = _313 * _125;
  float _348 = mad(_126, _322, _347);
  float _349 = mad(_127, _331, _348);
  float _350 = _316 * _125;
  float _351 = mad(_126, _325, _350);
  float _352 = mad(_127, _334, _351);
  float _353 = _319 * _125;
  float _354 = mad(_126, _328, _353);
  float _355 = mad(_127, _337, _354);
  float _356 = _313 * _129;
  float _357 = mad(_130, _322, _356);
  float _358 = mad(_131, _331, _357);
  float _359 = _316 * _129;
  float _360 = mad(_130, _325, _359);
  float _361 = mad(_131, _334, _360);
  float _362 = _319 * _129;
  float _363 = mad(_130, _328, _362);
  float _364 = mad(_131, _337, _363);
  float _365 = _340 * _117;
  float _366 = mad(_343, _118, _365);
  float _367 = mad(_346, _119, _366);
  float _368 = _349 * _117;
  float _369 = mad(_352, _118, _368);
  float _370 = mad(_355, _119, _369);
  float _371 = _358 * _117;
  float _372 = mad(_361, _118, _371);
  float _373 = mad(_364, _119, _372);
  float _375 = UniformBufferConstants_WorkingColorSpace_008x;
  float _376 = UniformBufferConstants_WorkingColorSpace_008y;
  float _377 = UniformBufferConstants_WorkingColorSpace_008z;
  float _379 = UniformBufferConstants_WorkingColorSpace_009x;
  float _380 = UniformBufferConstants_WorkingColorSpace_009y;
  float _381 = UniformBufferConstants_WorkingColorSpace_009z;
  float _383 = UniformBufferConstants_WorkingColorSpace_010x;
  float _384 = UniformBufferConstants_WorkingColorSpace_010y;
  float _385 = UniformBufferConstants_WorkingColorSpace_010z;
  float _386 = _375 * _367;
  float _387 = mad(_376, _370, _386);
  float _388 = mad(_377, _373, _387);
  float _389 = _379 * _367;
  float _390 = mad(_380, _370, _389);
  float _391 = mad(_381, _373, _390);
  float _392 = _383 * _367;
  float _393 = mad(_384, _370, _392);
  float _394 = mad(_385, _373, _393);
  float _395 = dot(float3(_388, _391, _394), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _396 = _388 / _395;
  float _397 = _391 / _395;
  float _398 = _394 / _395;
  float _399 = _396 + -1.0f;
  float _400 = _397 + -1.0f;
  float _401 = _398 + -1.0f;
  float _402 = dot(float3(_399, _400, _401), float3(_399, _400, _401));
  float _403 = _402 * -4.0f;
  float _404 = exp2(_403);
  float _405 = 1.0f - _404;
  float _407 = _RootShaderParameters_036z;
  float _408 = _395 * _395;
  float _409 = _408 * -4.0f;
  float _410 = _409 * _407;
  float _411 = exp2(_410);
  float _412 = 1.0f - _411;
  float _413 = _412 * _405;
  float _414 = _388 * 1.370412826538086f;
  float _415 = mad(-0.32929131388664246f, _391, _414);
  float _416 = mad(-0.06368283927440643f, _394, _415);
  float _417 = _388 * -0.08343426138162613f;
  float _418 = mad(1.0970908403396606f, _391, _417);
  float _419 = mad(-0.010861567221581936f, _394, _418);
  float _420 = _388 * -0.02579325996339321f;
  float _421 = mad(-0.09862564504146576f, _391, _420);
  float _422 = mad(1.203694462776184f, _394, _421);
  float _423 = _416 - _388;
  float _424 = _419 - _391;
  float _425 = _422 - _394;
  float _426 = _423 * _413;
  float _427 = _424 * _413;
  float _428 = _425 * _413;
  float _429 = _426 + _388;
  float _430 = _427 + _391;
  float _431 = _428 + _394;
  float _432 = dot(float3(_429, _430, _431), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _434 = _RootShaderParameters_024x;
  float _435 = _RootShaderParameters_024y;
  float _436 = _RootShaderParameters_024z;
  float _437 = _RootShaderParameters_024w;
  float _439 = _RootShaderParameters_019x;
  float _440 = _RootShaderParameters_019y;
  float _441 = _RootShaderParameters_019z;
  float _442 = _RootShaderParameters_019w;
  float _443 = _439 + _434;
  float _444 = _440 + _435;
  float _445 = _441 + _436;
  float _446 = _442 + _437;
  float _448 = _RootShaderParameters_023x;
  float _449 = _RootShaderParameters_023y;
  float _450 = _RootShaderParameters_023z;
  float _451 = _RootShaderParameters_023w;
  float _453 = _RootShaderParameters_018x;
  float _454 = _RootShaderParameters_018y;
  float _455 = _RootShaderParameters_018z;
  float _456 = _RootShaderParameters_018w;
  float _457 = _453 * _448;
  float _458 = _454 * _449;
  float _459 = _455 * _450;
  float _460 = _456 * _451;
  float _462 = _RootShaderParameters_022x;
  float _463 = _RootShaderParameters_022y;
  float _464 = _RootShaderParameters_022z;
  float _465 = _RootShaderParameters_022w;
  float _467 = _RootShaderParameters_017x;
  float _468 = _RootShaderParameters_017y;
  float _469 = _RootShaderParameters_017z;
  float _470 = _RootShaderParameters_017w;
  float _471 = _467 * _462;
  float _472 = _468 * _463;
  float _473 = _469 * _464;
  float _474 = _470 * _465;
  float _476 = _RootShaderParameters_021x;
  float _477 = _RootShaderParameters_021y;
  float _478 = _RootShaderParameters_021z;
  float _479 = _RootShaderParameters_021w;
  float _481 = _RootShaderParameters_016x;
  float _482 = _RootShaderParameters_016y;
  float _483 = _RootShaderParameters_016z;
  float _484 = _RootShaderParameters_016w;
  float _485 = _481 * _476;
  float _486 = _482 * _477;
  float _487 = _483 * _478;
  float _488 = _484 * _479;
  float _490 = _RootShaderParameters_020x;
  float _491 = _RootShaderParameters_020y;
  float _492 = _RootShaderParameters_020z;
  float _493 = _RootShaderParameters_020w;
  float _495 = _RootShaderParameters_015x;
  float _496 = _RootShaderParameters_015y;
  float _497 = _RootShaderParameters_015z;
  float _498 = _RootShaderParameters_015w;
  float _499 = _495 * _490;
  float _500 = _496 * _491;
  float _501 = _497 * _492;
  float _502 = _498 * _493;
  float _503 = _499 * _502;
  float _504 = _500 * _502;
  float _505 = _501 * _502;
  float _506 = _429 - _432;
  float _507 = _430 - _432;
  float _508 = _431 - _432;
  float _509 = _503 * _506;
  float _510 = _504 * _507;
  float _511 = _505 * _508;
  float _512 = _509 + _432;
  float _513 = _510 + _432;
  float _514 = _511 + _432;
  float _515 = max(0.0f, _512);
  float _516 = max(0.0f, _513);
  float _517 = max(0.0f, _514);
  float _518 = _485 * _488;
  float _519 = _486 * _488;
  float _520 = _487 * _488;
  float _521 = _515 * 5.55555534362793f;
  float _522 = _516 * 5.55555534362793f;
  float _523 = _517 * 5.55555534362793f;
  float _524 = log2(_521);
  float _525 = log2(_522);
  float _526 = log2(_523);
  float _527 = _518 * _524;
  float _528 = _519 * _525;
  float _529 = _520 * _526;
  float _530 = exp2(_527);
  float _531 = exp2(_528);
  float _532 = exp2(_529);
  float _533 = _530 * 0.18000000715255737f;
  float _534 = _531 * 0.18000000715255737f;
  float _535 = _532 * 0.18000000715255737f;
  float _536 = _471 * _474;
  float _537 = _472 * _474;
  float _538 = _473 * _474;
  float _539 = 1.0f / _536;
  float _540 = 1.0f / _537;
  float _541 = 1.0f / _538;
  float _542 = log2(_533);
  float _543 = log2(_534);
  float _544 = log2(_535);
  float _545 = _542 * _539;
  float _546 = _543 * _540;
  float _547 = _544 * _541;
  float _548 = exp2(_545);
  float _549 = exp2(_546);
  float _550 = exp2(_547);
  float _551 = _457 * _460;
  float _552 = _458 * _460;
  float _553 = _459 * _460;
  float _554 = _551 * _548;
  float _555 = _552 * _549;
  float _556 = _553 * _550;
  float _557 = _443 + _446;
  float _558 = _444 + _446;
  float _559 = _445 + _446;
  float _560 = _557 + _554;
  float _561 = _558 + _555;
  float _562 = _559 + _556;
  float _563 = _RootShaderParameters_035z;
  float _564 = _432 / _563;
  float _565 = saturate(_564);
  float _566 = _565 * 2.0f;
  float _567 = 3.0f - _566;
  float _568 = _565 * _565;
  float _569 = _568 * _567;
  float _570 = 1.0f - _569;
  float _572 = _RootShaderParameters_034x;
  float _573 = _RootShaderParameters_034y;
  float _574 = _RootShaderParameters_034z;
  float _575 = _RootShaderParameters_034w;
  float _576 = _439 + _572;
  float _577 = _440 + _573;
  float _578 = _441 + _574;
  float _579 = _442 + _575;
  float _581 = _RootShaderParameters_033x;
  float _582 = _RootShaderParameters_033y;
  float _583 = _RootShaderParameters_033z;
  float _584 = _RootShaderParameters_033w;
  float _585 = _453 * _581;
  float _586 = _454 * _582;
  float _587 = _455 * _583;
  float _588 = _456 * _584;
  float _590 = _RootShaderParameters_032x;
  float _591 = _RootShaderParameters_032y;
  float _592 = _RootShaderParameters_032z;
  float _593 = _RootShaderParameters_032w;
  float _594 = _467 * _590;
  float _595 = _468 * _591;
  float _596 = _469 * _592;
  float _597 = _470 * _593;
  float _599 = _RootShaderParameters_031x;
  float _600 = _RootShaderParameters_031y;
  float _601 = _RootShaderParameters_031z;
  float _602 = _RootShaderParameters_031w;
  float _603 = _481 * _599;
  float _604 = _482 * _600;
  float _605 = _483 * _601;
  float _606 = _484 * _602;
  float _608 = _RootShaderParameters_030x;
  float _609 = _RootShaderParameters_030y;
  float _610 = _RootShaderParameters_030z;
  float _611 = _RootShaderParameters_030w;
  float _612 = _495 * _608;
  float _613 = _496 * _609;
  float _614 = _497 * _610;
  float _615 = _498 * _611;
  float _616 = _612 * _615;
  float _617 = _613 * _615;
  float _618 = _614 * _615;
  float _619 = _616 * _506;
  float _620 = _617 * _507;
  float _621 = _618 * _508;
  float _622 = _619 + _432;
  float _623 = _620 + _432;
  float _624 = _621 + _432;
  float _625 = max(0.0f, _622);
  float _626 = max(0.0f, _623);
  float _627 = max(0.0f, _624);
  float _628 = _603 * _606;
  float _629 = _604 * _606;
  float _630 = _605 * _606;
  float _631 = _625 * 5.55555534362793f;
  float _632 = _626 * 5.55555534362793f;
  float _633 = _627 * 5.55555534362793f;
  float _634 = log2(_631);
  float _635 = log2(_632);
  float _636 = log2(_633);
  float _637 = _628 * _634;
  float _638 = _629 * _635;
  float _639 = _630 * _636;
  float _640 = exp2(_637);
  float _641 = exp2(_638);
  float _642 = exp2(_639);
  float _643 = _640 * 0.18000000715255737f;
  float _644 = _641 * 0.18000000715255737f;
  float _645 = _642 * 0.18000000715255737f;
  float _646 = _594 * _597;
  float _647 = _595 * _597;
  float _648 = _596 * _597;
  float _649 = 1.0f / _646;
  float _650 = 1.0f / _647;
  float _651 = 1.0f / _648;
  float _652 = log2(_643);
  float _653 = log2(_644);
  float _654 = log2(_645);
  float _655 = _652 * _649;
  float _656 = _653 * _650;
  float _657 = _654 * _651;
  float _658 = exp2(_655);
  float _659 = exp2(_656);
  float _660 = exp2(_657);
  float _661 = _585 * _588;
  float _662 = _586 * _588;
  float _663 = _587 * _588;
  float _664 = _661 * _658;
  float _665 = _662 * _659;
  float _666 = _663 * _660;
  float _667 = _576 + _579;
  float _668 = _577 + _579;
  float _669 = _578 + _579;
  float _670 = _667 + _664;
  float _671 = _668 + _665;
  float _672 = _669 + _666;
  float _673 = _RootShaderParameters_036x;
  float _675 = _RootShaderParameters_035w;
  float _676 = _673 - _675;
  float _677 = _432 - _675;
  float _678 = _677 / _676;
  float _679 = saturate(_678);
  float _680 = _679 * 2.0f;
  float _681 = 3.0f - _680;
  float _682 = _679 * _679;
  float _683 = _682 * _681;
  float _685 = _RootShaderParameters_029x;
  float _686 = _RootShaderParameters_029y;
  float _687 = _RootShaderParameters_029z;
  float _688 = _RootShaderParameters_029w;
  float _689 = _439 + _685;
  float _690 = _440 + _686;
  float _691 = _441 + _687;
  float _692 = _442 + _688;
  float _694 = _RootShaderParameters_028x;
  float _695 = _RootShaderParameters_028y;
  float _696 = _RootShaderParameters_028z;
  float _697 = _RootShaderParameters_028w;
  float _698 = _453 * _694;
  float _699 = _454 * _695;
  float _700 = _455 * _696;
  float _701 = _456 * _697;
  float _703 = _RootShaderParameters_027x;
  float _704 = _RootShaderParameters_027y;
  float _705 = _RootShaderParameters_027z;
  float _706 = _RootShaderParameters_027w;
  float _707 = _467 * _703;
  float _708 = _468 * _704;
  float _709 = _469 * _705;
  float _710 = _470 * _706;
  float _712 = _RootShaderParameters_026x;
  float _713 = _RootShaderParameters_026y;
  float _714 = _RootShaderParameters_026z;
  float _715 = _RootShaderParameters_026w;
  float _716 = _481 * _712;
  float _717 = _482 * _713;
  float _718 = _483 * _714;
  float _719 = _484 * _715;
  float _721 = _RootShaderParameters_025x;
  float _722 = _RootShaderParameters_025y;
  float _723 = _RootShaderParameters_025z;
  float _724 = _RootShaderParameters_025w;
  float _725 = _495 * _721;
  float _726 = _496 * _722;
  float _727 = _497 * _723;
  float _728 = _498 * _724;
  float _729 = _725 * _728;
  float _730 = _726 * _728;
  float _731 = _727 * _728;
  float _732 = _729 * _506;
  float _733 = _730 * _507;
  float _734 = _731 * _508;
  float _735 = _732 + _432;
  float _736 = _733 + _432;
  float _737 = _734 + _432;
  float _738 = max(0.0f, _735);
  float _739 = max(0.0f, _736);
  float _740 = max(0.0f, _737);
  float _741 = _716 * _719;
  float _742 = _717 * _719;
  float _743 = _718 * _719;
  float _744 = _738 * 5.55555534362793f;
  float _745 = _739 * 5.55555534362793f;
  float _746 = _740 * 5.55555534362793f;
  float _747 = log2(_744);
  float _748 = log2(_745);
  float _749 = log2(_746);
  float _750 = _741 * _747;
  float _751 = _742 * _748;
  float _752 = _743 * _749;
  float _753 = exp2(_750);
  float _754 = exp2(_751);
  float _755 = exp2(_752);
  float _756 = _753 * 0.18000000715255737f;
  float _757 = _754 * 0.18000000715255737f;
  float _758 = _755 * 0.18000000715255737f;
  float _759 = _707 * _710;
  float _760 = _708 * _710;
  float _761 = _709 * _710;
  float _762 = 1.0f / _759;
  float _763 = 1.0f / _760;
  float _764 = 1.0f / _761;
  float _765 = log2(_756);
  float _766 = log2(_757);
  float _767 = log2(_758);
  float _768 = _765 * _762;
  float _769 = _766 * _763;
  float _770 = _767 * _764;
  float _771 = exp2(_768);
  float _772 = exp2(_769);
  float _773 = exp2(_770);
  float _774 = _698 * _701;
  float _775 = _699 * _701;
  float _776 = _700 * _701;
  float _777 = _774 * _771;
  float _778 = _775 * _772;
  float _779 = _776 * _773;
  float _780 = _689 + _692;
  float _781 = _690 + _692;
  float _782 = _691 + _692;
  float _783 = _780 + _777;
  float _784 = _781 + _778;
  float _785 = _782 + _779;
  float _786 = _569 - _683;
  float _787 = _570 * _560;
  float _788 = _570 * _561;
  float _789 = _570 * _562;
  float _790 = _783 * _786;
  float _791 = _784 * _786;
  float _792 = _785 * _786;
  float _793 = _683 * _670;
  float _794 = _683 * _671;
  float _795 = _683 * _672;
  float _796 = _793 + _787;
  float _797 = _796 + _790;
  float _798 = _794 + _788;
  float _799 = _798 + _791;
  float _800 = _795 + _789;
  float _801 = _800 + _792;
  float _803 = UniformBufferConstants_WorkingColorSpace_012x;
  float _804 = UniformBufferConstants_WorkingColorSpace_012y;
  float _805 = UniformBufferConstants_WorkingColorSpace_012z;
  float _807 = UniformBufferConstants_WorkingColorSpace_013x;
  float _808 = UniformBufferConstants_WorkingColorSpace_013y;
  float _809 = UniformBufferConstants_WorkingColorSpace_013z;
  float _811 = UniformBufferConstants_WorkingColorSpace_014x;
  float _812 = UniformBufferConstants_WorkingColorSpace_014y;
  float _813 = UniformBufferConstants_WorkingColorSpace_014z;
  float _814 = _797 * _803;
  float _815 = mad(_804, _799, _814);
  float _816 = mad(_805, _801, _815);
  float _817 = _807 * _797;
  float _818 = mad(_808, _799, _817);
  float _819 = mad(_809, _801, _818);
  float _820 = _811 * _797;
  float _821 = mad(_812, _799, _820);
  float _822 = mad(_813, _801, _821);
  float _823 = _RootShaderParameters_036y;
  float _824 = _797 * 0.9386394023895264f;
  float _825 = mad(-4.540197551250458e-09f, _799, _824);
  float _826 = mad(0.061360642313957214f, _801, _825);
  float _827 = _797 * 6.775371730327606e-08f;
  float _828 = mad(0.8307942152023315f, _799, _827);
  float _829 = mad(0.169205904006958f, _801, _828);
  float _830 = _797 * -9.313225746154785e-10f;
  float _831 = mad(-2.3283064365386963e-10f, _799, _830);
  float _832 = _826 - _797;
  float _833 = _829 - _799;
  float _834 = _832 * _823;
  float _835 = _833 * _823;
  float _836 = _831 * _823;
  float _837 = _834 + _797;
  float _838 = _835 + _799;
  float _839 = _836 + _801;
  float3 ap1_graded_color = float3(_837, _838, _839);  // CustomEdit

  float _840 = _837 * 0.6954522132873535f;
  float _841 = mad(0.14067868888378143f, _838, _840);
  float _842 = mad(0.16386905312538147f, _839, _841);
  float _843 = _837 * 0.044794581830501556f;
  float _844 = mad(0.8596711158752441f, _838, _843);
  float _845 = mad(0.0955343246459961f, _839, _844);
  float _846 = _837 * -0.005525882821530104f;
  float _847 = mad(0.004025210160762072f, _838, _846);
  float _848 = mad(1.0015007257461548f, _839, _847);
  float _849 = min(_842, _845);
  float _850 = min(_849, _848);
  float _851 = max(_842, _845);
  float _852 = max(_851, _848);
  float _853 = max(_852, 1.000000013351432e-10f);
  float _854 = max(_850, 1.000000013351432e-10f);
  float _855 = _853 - _854;
  float _856 = max(_852, 0.009999999776482582f);
  float _857 = _855 / _856;
  float _858 = _848 - _845;
  float _859 = _858 * _848;
  float _860 = _845 - _842;
  float _861 = _860 * _845;
  float _862 = _859 + _861;
  float _863 = _842 - _848;
  float _864 = _863 * _842;
  float _865 = _862 + _864;
  float _866 = sqrt(_865);
  float _867 = _866 * 1.75f;
  float _868 = _845 + _842;
  float _869 = _868 + _848;
  float _870 = _869 + _867;
  float _871 = _870 * 0.3333333432674408f;
  float _872 = _857 + -0.4000000059604645f;
  float _873 = _872 * 5.0f;
  float _874 = _872 * 2.5f;
  float _875 = abs(_874);
  float _876 = 1.0f - _875;
  float _877 = max(_876, 0.0f);
  bool _878 = (_873 > 0.0f);
  bool _879 = (_873 < 0.0f);
  int _880 = int(_878);
  int _881 = int(_879);
  int _882 = _880 - _881;
  float _883 = float(_882);
  float _884 = _877 * _877;
  float _885 = 1.0f - _884;
  float _886 = _883 * _885;
  float _887 = _886 + 1.0f;
  float _888 = _887 * 0.02500000037252903f;
  bool _889 = !(_871 <= 0.0533333346247673f);
  _897 = _888;
  if (_889) {
    bool _891 = !(_871 >= 0.1599999964237213f);
    _897 = 0.0f;
    if (_891) {
      float _893 = 0.23999999463558197f / _870;
      float _894 = _893 + -0.5f;
      float _895 = _894 * _888;
      _897 = _895;
    }
  }
  float _898 = _897 + 1.0f;
  float _899 = _898 * _842;
  float _900 = _898 * _845;
  float _901 = _898 * _848;
  bool _902 = (_899 == _900);
  bool _903 = (_900 == _901);
  bool _904 = _902 && _903;
  _933 = 0.0f;
  if (!_904) {
    float _906 = _899 * 2.0f;
    float _907 = _906 - _900;
    float _908 = _907 - _901;
    float _909 = _845 - _848;
    float _910 = _909 * 1.7320507764816284f;
    float _911 = _910 * _898;
    float _912 = _911 / _908;
    float _913 = atan(_912);
    float _914 = _913 + 3.1415927410125732f;
    float _915 = _913 + -3.1415927410125732f;
    bool _916 = (_908 < 0.0f);
    bool _917 = (_908 == 0.0f);
    bool _918 = (_911 >= 0.0f);
    bool _919 = (_911 < 0.0f);
    bool _920 = _918 && _916;
    float _921 = _920 ? _914 : _913;
    bool _922 = _919 && _916;
    float _923 = _922 ? _915 : _921;
    bool _924 = _919 && _917;
    bool _925 = _918 && _917;
    float _926 = _923 * 57.2957763671875f;
    float _927 = _924 ? -90.0f : _926;
    float _928 = _925 ? 90.0f : _927;
    bool _929 = (_928 < 0.0f);
    _933 = _928;
    if (_929) {
      float _931 = _928 + 360.0f;
      _933 = _931;
    }
  }
  float _934 = max(_933, 0.0f);
  float _935 = min(_934, 360.0f);
  bool _936 = (_935 < -180.0f);
  if (_936) {
    float _938 = _935 + 360.0f;
    _944 = _938;
  } else {
    bool _940 = (_935 > 180.0f);
    _944 = _935;
    if (_940) {
      float _942 = _935 + -360.0f;
      _944 = _942;
    }
  }
  float _945 = _944 * 0.014814814552664757f;
  float _946 = abs(_945);
  float _947 = 1.0f - _946;
  float _948 = saturate(_947);
  float _949 = _948 * 2.0f;
  float _950 = 3.0f - _949;
  float _951 = _948 * _948;
  float _952 = _951 * _950;
  float _953 = 0.029999999329447746f - _899;
  float _954 = _857 * 0.18000000715255737f;
  float _955 = _954 * _953;
  float _956 = _952 * _952;
  float _957 = _956 * _955;
  float _958 = _957 + _899;
  float _959 = _958 * 1.4514392614364624f;
  float _960 = mad(-0.2365107536315918f, _900, _959);
  float _961 = mad(-0.21492856740951538f, _901, _960);
  float _962 = _958 * -0.07655377686023712f;
  float _963 = mad(1.17622971534729f, _900, _962);
  float _964 = mad(-0.09967592358589172f, _901, _963);
  float _965 = _958 * 0.008316148072481155f;
  float _966 = mad(-0.006032449658960104f, _900, _965);
  float _967 = mad(0.9977163076400757f, _901, _966);
  float _968 = max(0.0f, _961);
  float _969 = max(0.0f, _964);
  float _970 = max(0.0f, _967);
  float _971 = dot(float3(_968, _969, _970), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _972 = _968 - _971;
  float _973 = _969 - _971;
  float _974 = _970 - _971;
  float _975 = _972 * 0.9599999785423279f;
  float _976 = _973 * 0.9599999785423279f;
  float _977 = _974 * 0.9599999785423279f;
  float _978 = _975 + _971;
  float _979 = _976 + _971;
  float _980 = _977 + _971;

  float3 ap1_aces_colored = float3(_978, _979, _980);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _982 = _RootShaderParameters_037w;
  float _983 = _982 + 1.0f;
  float _984 = _RootShaderParameters_037y;
  float _985 = _983 - _984;
  float _987 = _RootShaderParameters_038x;
  float _988 = _987 + 1.0f;
  float _989 = _RootShaderParameters_037z;
  float _990 = _988 - _989;
  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _991 = (_984 > 0.800000011920929f);
    float _992 = _RootShaderParameters_037x;
    if (_991) {
      float _994 = 0.8199999928474426f - _984;
      float _995 = _994 / _992;
      float _996 = _995 + -0.7447274923324585f;
      _1008 = _996;
    } else {
      float _998 = _982 + 0.18000000715255737f;
      float _999 = _998 / _985;
      float _1000 = 2.0f - _999;
      float _1001 = _999 / _1000;
      float _1002 = log2(_1001);
      float _1003 = _1002 * 0.3465735912322998f;
      float _1004 = _985 / _992;
      float _1005 = _1003 * _1004;
      float _1006 = -0.7447274923324585f - _1005;
      _1008 = _1006;
    }
    float _1009 = 1.0f - _984;
    float _1010 = _1009 / _992;
    float _1011 = _1010 - _1008;
    float _1012 = _989 / _992;
    float _1013 = _1012 - _1011;
    float _1014 = log2(_978);
    float _1015 = log2(_979);
    float _1016 = log2(_980);
    float _1017 = _1014 * 0.3010300099849701f;
    float _1018 = _1015 * 0.3010300099849701f;
    float _1019 = _1016 * 0.3010300099849701f;
    float _1020 = _1017 + _1011;
    float _1021 = _1018 + _1011;
    float _1022 = _1019 + _1011;
    float _1023 = _992 * _1020;
    float _1024 = _992 * _1021;
    float _1025 = _992 * _1022;
    float _1026 = _985 * 2.0f;
    float _1027 = _992 * -2.0f;
    float _1028 = _1027 / _985;
    float _1029 = _1017 - _1008;
    float _1030 = _1018 - _1008;
    float _1031 = _1019 - _1008;
    float _1032 = _1029 * 1.4426950216293335f;
    float _1033 = _1032 * _1028;
    float _1034 = _1030 * 1.4426950216293335f;
    float _1035 = _1034 * _1028;
    float _1036 = _1031 * 1.4426950216293335f;
    float _1037 = _1036 * _1028;
    float _1038 = exp2(_1033);
    float _1039 = exp2(_1035);
    float _1040 = exp2(_1037);
    float _1041 = _1038 + 1.0f;
    float _1042 = _1039 + 1.0f;
    float _1043 = _1040 + 1.0f;
    float _1044 = _1026 / _1041;
    float _1045 = _1026 / _1042;
    float _1046 = _1026 / _1043;
    float _1047 = _1044 - _982;
    float _1048 = _1045 - _982;
    float _1049 = _1046 - _982;
    float _1050 = _990 * 2.0f;
    float _1051 = _992 * 2.0f;
    float _1052 = _1051 / _990;
    float _1053 = _1017 - _1013;
    float _1054 = _1018 - _1013;
    float _1055 = _1019 - _1013;
    float _1056 = _1053 * 1.4426950216293335f;
    float _1057 = _1056 * _1052;
    float _1058 = _1054 * 1.4426950216293335f;
    float _1059 = _1058 * _1052;
    float _1060 = _1055 * 1.4426950216293335f;
    float _1061 = _1060 * _1052;
    float _1062 = exp2(_1057);
    float _1063 = exp2(_1059);
    float _1064 = exp2(_1061);
    float _1065 = _1062 + 1.0f;
    float _1066 = _1063 + 1.0f;
    float _1067 = _1064 + 1.0f;
    float _1068 = _1050 / _1065;
    float _1069 = _1050 / _1066;
    float _1070 = _1050 / _1067;
    float _1071 = _988 - _1068;
    float _1072 = _988 - _1069;
    float _1073 = _988 - _1070;
    bool _1074 = (_1017 < _1008);
    bool _1075 = (_1018 < _1008);
    bool _1076 = (_1019 < _1008);
    float _1077 = _1074 ? _1047 : _1023;
    float _1078 = _1075 ? _1048 : _1024;
    float _1079 = _1076 ? _1049 : _1025;
    bool _1080 = (_1017 > _1013);
    bool _1081 = (_1018 > _1013);
    bool _1082 = (_1019 > _1013);
    float _1083 = _1080 ? _1071 : _1023;
    float _1084 = _1081 ? _1072 : _1024;
    float _1085 = _1082 ? _1073 : _1025;
    float _1086 = _1013 - _1008;
    float _1087 = _1029 / _1086;
    float _1088 = _1030 / _1086;
    float _1089 = _1031 / _1086;
    float _1090 = saturate(_1087);
    float _1091 = saturate(_1088);
    float _1092 = saturate(_1089);
    bool _1093 = (_1013 < _1008);
    float _1094 = 1.0f - _1090;
    float _1095 = 1.0f - _1091;
    float _1096 = 1.0f - _1092;
    float _1097 = _1093 ? _1094 : _1090;
    float _1098 = _1093 ? _1095 : _1091;
    float _1099 = _1093 ? _1096 : _1092;
    float _1100 = _1097 * 2.0f;
    float _1101 = _1098 * 2.0f;
    float _1102 = _1099 * 2.0f;
    float _1103 = 3.0f - _1100;
    float _1104 = 3.0f - _1101;
    float _1105 = 3.0f - _1102;
    float _1106 = _1083 - _1077;
    float _1107 = _1084 - _1078;
    float _1108 = _1085 - _1079;
    float _1109 = _1097 * _1097;
    float _1110 = _1109 * _1106;
    float _1111 = _1110 * _1103;
    float _1112 = _1098 * _1098;
    float _1113 = _1112 * _1107;
    float _1114 = _1113 * _1104;
    float _1115 = _1099 * _1099;
    float _1116 = _1115 * _1108;
    float _1117 = _1116 * _1105;
    float _1118 = _1111 + _1077;
    float _1119 = _1114 + _1078;
    float _1120 = _1117 + _1079;
    float _1121 = dot(float3(_1118, _1119, _1120), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _1122 = _1118 - _1121;
    float _1123 = _1119 - _1121;
    float _1124 = _1120 - _1121;
    float _1125 = _1122 * 0.9300000071525574f;
    float _1126 = _1123 * 0.9300000071525574f;
    float _1127 = _1124 * 0.9300000071525574f;
    float _1128 = _1125 + _1121;
    float _1129 = _1126 + _1121;
    float _1130 = _1127 + _1121;
    float _1131 = max(0.0f, _1128);
    float _1132 = max(0.0f, _1129);
    float _1133 = max(0.0f, _1130);
    sdr_ap1_color = float3(_1131, _1132, _1133);
    // end of FilmToneMap
  }

  float _1134 = _RootShaderParameters_036w;
  /* float _1135 = _1131 - _837;
  float _1136 = _1132 - _838;
  float _1137 = _1133 - _839; */
  float _1135 = sdr_ap1_color.r - _837;
  float _1136 = sdr_ap1_color.g - _838;
  float _1137 = sdr_ap1_color.b - _839;
  // CustomEdit

  float _1138 = _1134 * _1135;
  float _1139 = _1134 * _1136;
  float _1140 = _1134 * _1137;
  float _1141 = _1138 + _837;
  float _1142 = _1139 + _838;
  float _1143 = _1140 + _839;
  float _1144 = _1141 * 1.065374732017517f;
  float _1145 = mad(1.451815478503704e-06f, _1142, _1144);
  float _1146 = mad(-0.06537103652954102f, _1143, _1145);
  float _1147 = _1141 * -2.57161445915699e-07f;
  float _1148 = mad(1.2036634683609009f, _1142, _1147);
  float _1149 = mad(-0.20366770029067993f, _1143, _1148);
  float _1150 = _1141 * 1.862645149230957e-08f;
  float _1151 = mad(2.0954757928848267e-08f, _1142, _1150);
  float _1152 = mad(0.9999996423721313f, _1143, _1151);
  float _1153 = _1146 - _1141;
  float _1154 = _1149 - _1142;
  float _1155 = _1152 - _1143;
  float _1156 = _1153 * _823;
  float _1157 = _1154 * _823;
  float _1158 = _1155 * _823;
  float _1159 = _1156 + _1141;
  float _1160 = _1157 + _1142;
  float _1161 = _1158 + _1143;
  float _1162 = _803 * _1159;
  float _1163 = mad(_804, _1160, _1162);
  float _1164 = mad(_805, _1161, _1163);
  float _1165 = _807 * _1159;
  float _1166 = mad(_808, _1160, _1165);
  float _1167 = mad(_809, _1161, _1166);
  float _1168 = _811 * _1159;
  float _1169 = mad(_812, _1160, _1168);
  float _1170 = mad(_813, _1161, _1169);
  float _1171 = max(0.0f, _1164);
  float _1172 = max(0.0f, _1167);
  float _1173 = max(0.0f, _1170);
  float3 lut_input_color = float3(_1171, _1172, _1173);  // CustomEdit
  float _1301;                                           // custom branch
  float _1302;                                           // custom branch
  float _1303;                                           // custom branch
  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1301 = post_lut_color.r;
    _1302 = post_lut_color.g;
    _1303 = post_lut_color.b;
  } else {
    float _1174 = saturate(_1171);
    float _1175 = saturate(_1172);
    float _1176 = saturate(_1173);
    bool _1177 = (_1174 < 0.0031306699384003878f);
    if (_1177) {
      float _1179 = _1174 * 12.920000076293945f;
      _1187 = _1179;
    } else {
      float _1181 = log2(_1174);
      float _1182 = _1181 * 0.4166666567325592f;
      float _1183 = exp2(_1182);
      float _1184 = _1183 * 1.0549999475479126f;
      float _1185 = _1184 + -0.054999999701976776f;
      _1187 = _1185;
    }
    bool _1188 = (_1175 < 0.0031306699384003878f);
    if (_1188) {
      float _1190 = _1175 * 12.920000076293945f;
      _1198 = _1190;
    } else {
      float _1192 = log2(_1175);
      float _1193 = _1192 * 0.4166666567325592f;
      float _1194 = exp2(_1193);
      float _1195 = _1194 * 1.0549999475479126f;
      float _1196 = _1195 + -0.054999999701976776f;
      _1198 = _1196;
    }
    bool _1199 = (_1176 < 0.0031306699384003878f);
    if (_1199) {
      float _1201 = _1176 * 12.920000076293945f;
      _1209 = _1201;
    } else {
      float _1203 = log2(_1176);
      float _1204 = _1203 * 0.4166666567325592f;
      float _1205 = exp2(_1204);
      float _1206 = _1205 * 1.0549999475479126f;
      float _1207 = _1206 + -0.054999999701976776f;
      _1209 = _1207;
    }
    float _1210 = _1187 * 0.9375f;
    float _1211 = _1198 * 0.9375f;
    float _1212 = _1210 + 0.03125f;
    float _1213 = _1211 + 0.03125f;
    float _1215 = _RootShaderParameters_005x;
    float _1216 = _1215 * _1187;
    float _1217 = _1215 * _1198;
    float _1218 = _1215 * _1209;
    float _1219 = _RootShaderParameters_005y;
    float _1220 = _1209 * 15.0f;
    float _1221 = floor(_1220);
    float _1222 = _1220 - _1221;
    float _1223 = _1221 + _1212;
    float _1224 = _1223 * 0.0625f;
    // _1225 = _3;
    // _1226 = _5;
    float4 _1227 = Textures_1.SampleLevel(Samplers_1, float2(_1224, _1213), 0.0f);
    float _1228 = _1227.x;
    float _1229 = _1227.y;
    float _1230 = _1227.z;
    float _1231 = _1224 + 0.0625f;
    float4 _1232 = Textures_1.SampleLevel(Samplers_1, float2(_1231, _1213), 0.0f);
    float _1233 = _1232.x;
    float _1234 = _1232.y;
    float _1235 = _1232.z;
    float _1236 = _1233 - _1228;
    float _1237 = _1234 - _1229;
    float _1238 = _1235 - _1230;
    float _1239 = _1236 * _1222;
    float _1240 = _1237 * _1222;
    float _1241 = _1238 * _1222;
    float _1242 = _1239 + _1228;
    float _1243 = _1240 + _1229;
    float _1244 = _1241 + _1230;
    float _1245 = _1242 * _1219;
    float _1246 = _1243 * _1219;
    float _1247 = _1244 * _1219;
    float _1248 = _1245 + _1216;
    float _1249 = _1246 + _1217;
    float _1250 = _1247 + _1218;
    float _1251 = _RootShaderParameters_005z;
    // _1252 = _2;
    // _1253 = _4;
    float4 _1254 = Textures_2.SampleLevel(Samplers_2, float2(_1224, _1213), 0.0f);
    float _1255 = _1254.x;
    float _1256 = _1254.y;
    float _1257 = _1254.z;
    float4 _1258 = Textures_2.SampleLevel(Samplers_2, float2(_1231, _1213), 0.0f);
    float _1259 = _1258.x;
    float _1260 = _1258.y;
    float _1261 = _1258.z;
    float _1262 = _1259 - _1255;
    float _1263 = _1260 - _1256;
    float _1264 = _1261 - _1257;
    float _1265 = _1262 * _1222;
    float _1266 = _1263 * _1222;
    float _1267 = _1264 * _1222;
    float _1268 = _1265 + _1255;
    float _1269 = _1266 + _1256;
    float _1270 = _1267 + _1257;
    float _1271 = _1268 * _1251;
    float _1272 = _1269 * _1251;
    float _1273 = _1270 * _1251;
    float _1274 = _1248 + _1271;
    float _1275 = _1249 + _1272;
    float _1276 = _1250 + _1273;
    float _1277 = max(6.103519990574569e-05f, _1274);
    float _1278 = max(6.103519990574569e-05f, _1275);
    float _1279 = max(6.103519990574569e-05f, _1276);
    float _1280 = _1277 * 0.07739938050508499f;
    float _1281 = _1278 * 0.07739938050508499f;
    float _1282 = _1279 * 0.07739938050508499f;
    float _1283 = _1277 * 0.9478672742843628f;
    float _1284 = _1278 * 0.9478672742843628f;
    float _1285 = _1279 * 0.9478672742843628f;
    float _1286 = _1283 + 0.05213269963860512f;
    float _1287 = _1284 + 0.05213269963860512f;
    float _1288 = _1285 + 0.05213269963860512f;
    float _1289 = log2(_1286);
    float _1290 = log2(_1287);
    float _1291 = log2(_1288);
    float _1292 = _1289 * 2.4000000953674316f;
    float _1293 = _1290 * 2.4000000953674316f;
    float _1294 = _1291 * 2.4000000953674316f;
    float _1295 = exp2(_1292);
    float _1296 = exp2(_1293);
    float _1297 = exp2(_1294);
    bool _1298 = (_1277 > 0.040449999272823334f);
    bool _1299 = (_1278 > 0.040449999272823334f);
    bool _1300 = (_1279 > 0.040449999272823334f);
    /* float _1301 = _1298 ? _1295 : _1280;
    float _1302 = _1299 ? _1296 : _1281;
    float _1303 = _1300 ? _1297 : _1282; */
    _1301 = _1298 ? _1295 : _1280;
    _1302 = _1299 ? _1296 : _1281;
    _1303 = _1300 ? _1297 : _1282;
  }

  float _1305 = _RootShaderParameters_039x;
  float _1306 = _1305 * _1301;
  float _1307 = _1305 * _1302;
  float _1308 = _1305 * _1303;
  float _1309 = _RootShaderParameters_039y;
  float _1310 = _RootShaderParameters_039z;
  float _1311 = _1309 + _1306;
  float _1312 = _1311 * _1301;
  float _1313 = _1312 + _1310;
  float _1314 = _1309 + _1307;
  float _1315 = _1314 * _1302;
  float _1316 = _1315 + _1310;
  float _1317 = _1309 + _1308;
  float _1318 = _1317 * _1303;
  float _1319 = _1318 + _1310;
  float _1321 = _RootShaderParameters_013w;
  float _1322 = _RootShaderParameters_013x;
  float _1323 = _RootShaderParameters_013y;
  float _1324 = _RootShaderParameters_013z;
  float _1326 = _RootShaderParameters_014x;
  float _1327 = _RootShaderParameters_014y;
  float _1328 = _RootShaderParameters_014z;
  float _1329 = _1326 * _1313;
  float _1330 = _1327 * _1316;
  float _1331 = _1328 * _1319;
  float _1332 = _1322 - _1329;
  float _1333 = _1323 - _1330;
  float _1334 = _1324 - _1331;
  float _1335 = _1332 * _1321;
  float _1336 = _1333 * _1321;
  float _1337 = _1334 * _1321;
  float _1338 = _1335 + _1329;
  float _1339 = _1336 + _1330;
  float _1340 = _1337 + _1331;
  float _1341 = _1326 * _816;
  float _1342 = _1327 * _819;
  float _1343 = _1328 * _822;
  float _1344 = _1322 - _1341;
  float _1345 = _1323 - _1342;
  float _1346 = _1324 - _1343;
  float _1347 = _1344 * _1321;
  float _1348 = _1345 * _1321;
  float _1349 = _1346 * _1321;
  float _1350 = _1347 + _1341;
  float _1351 = _1348 + _1342;
  float _1352 = _1349 + _1343;
  float _1354 = _RootShaderParameters_040y;
  float _1355 = max(0.0f, _1338);
  float _1356 = max(0.0f, _1339);
  float _1357 = max(0.0f, _1340);
  float _1358 = log2(_1355);
  float _1359 = log2(_1356);
  float _1360 = log2(_1357);
  float _1361 = _1358 * _1354;
  float _1362 = _1359 * _1354;
  float _1363 = _1360 * _1354;
  float _1364 = exp2(_1361);
  float _1365 = exp2(_1362);
  float _1366 = exp2(_1363);

  // CustomEdit
  float3 film_graded_color = float3(_1364, _1365, _1366);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_10, _11, _12)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }
  
  uint _1368 = _RootShaderParameters_040w;
  bool _1369 = (_1368 == 0);
  if (_1369) {
    uint _1372 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1373 = (_1372 == 0);
    _1406 = _1364;
    _1407 = _1365;
    _1408 = _1366;
    do {
      if (_1373) {
        float _1376 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1377 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1378 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1380 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1381 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1382 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1384 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1385 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1386 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1387 = _1376 * _1364;
        float _1388 = mad(_1377, _1365, _1387);
        float _1389 = mad(_1378, _1366, _1388);
        float _1390 = _1380 * _1364;
        float _1391 = mad(_1381, _1365, _1390);
        float _1392 = mad(_1382, _1366, _1391);
        float _1393 = _1384 * _1364;
        float _1394 = mad(_1385, _1365, _1393);
        float _1395 = mad(_1386, _1366, _1394);
        float _1396 = _1389 * _51;
        float _1397 = mad(_52, _1392, _1396);
        float _1398 = mad(_53, _1395, _1397);
        float _1399 = _1389 * _54;
        float _1400 = mad(_55, _1392, _1399);
        float _1401 = mad(_56, _1395, _1400);
        float _1402 = _1389 * _57;
        float _1403 = mad(_58, _1392, _1402);
        float _1404 = mad(_59, _1395, _1403);
        _1406 = _1398;
        _1407 = _1401;
        _1408 = _1404;
      }
      bool _1409 = (_1406 < 0.0031306699384003878f);
      do {
        if (_1409) {
          float _1411 = _1406 * 12.920000076293945f;
          _1419 = _1411;
        } else {
          float _1413 = log2(_1406);
          float _1414 = _1413 * 0.4166666567325592f;
          float _1415 = exp2(_1414);
          float _1416 = _1415 * 1.0549999475479126f;
          float _1417 = _1416 + -0.054999999701976776f;
          _1419 = _1417;
        }
        bool _1420 = (_1407 < 0.0031306699384003878f);
        do {
          if (_1420) {
            float _1422 = _1407 * 12.920000076293945f;
            _1430 = _1422;
          } else {
            float _1424 = log2(_1407);
            float _1425 = _1424 * 0.4166666567325592f;
            float _1426 = exp2(_1425);
            float _1427 = _1426 * 1.0549999475479126f;
            float _1428 = _1427 + -0.054999999701976776f;
            _1430 = _1428;
          }
          bool _1431 = (_1408 < 0.0031306699384003878f);
          if (_1431) {
            float _1433 = _1408 * 12.920000076293945f;
            _2790 = _1419;
            _2791 = _1430;
            _2792 = _1433;
          } else {
            float _1435 = log2(_1408);
            float _1436 = _1435 * 0.4166666567325592f;
            float _1437 = exp2(_1436);
            float _1438 = _1437 * 1.0549999475479126f;
            float _1439 = _1438 + -0.054999999701976776f;
            _2790 = _1419;
            _2791 = _1430;
            _2792 = _1439;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1441 = (_1368 == 1);
    if (_1441) {
      float _1444 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1445 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1446 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1448 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1449 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1450 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1452 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1453 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1454 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1455 = _1444 * _1364;
      float _1456 = mad(_1445, _1365, _1455);
      float _1457 = mad(_1446, _1366, _1456);
      float _1458 = _1448 * _1364;
      float _1459 = mad(_1449, _1365, _1458);
      float _1460 = mad(_1450, _1366, _1459);
      float _1461 = _1452 * _1364;
      float _1462 = mad(_1453, _1365, _1461);
      float _1463 = mad(_1454, _1366, _1462);
      float _1464 = _1457 * _51;
      float _1465 = mad(_52, _1460, _1464);
      float _1466 = mad(_53, _1463, _1465);
      float _1467 = _1457 * _54;
      float _1468 = mad(_55, _1460, _1467);
      float _1469 = mad(_56, _1463, _1468);
      float _1470 = _1457 * _57;
      float _1471 = mad(_58, _1460, _1470);
      float _1472 = mad(_59, _1463, _1471);
      float _1473 = max(6.103519990574569e-05f, _1466);
      float _1474 = max(6.103519990574569e-05f, _1469);
      float _1475 = max(6.103519990574569e-05f, _1472);
      float _1476 = max(_1473, 0.017999999225139618f);
      float _1477 = max(_1474, 0.017999999225139618f);
      float _1478 = max(_1475, 0.017999999225139618f);
      float _1479 = log2(_1476);
      float _1480 = log2(_1477);
      float _1481 = log2(_1478);
      float _1482 = _1479 * 0.44999998807907104f;
      float _1483 = _1480 * 0.44999998807907104f;
      float _1484 = _1481 * 0.44999998807907104f;
      float _1485 = exp2(_1482);
      float _1486 = exp2(_1483);
      float _1487 = exp2(_1484);
      float _1488 = _1485 * 1.0989999771118164f;
      float _1489 = _1486 * 1.0989999771118164f;
      float _1490 = _1487 * 1.0989999771118164f;
      float _1491 = _1488 + -0.0989999994635582f;
      float _1492 = _1489 + -0.0989999994635582f;
      float _1493 = _1490 + -0.0989999994635582f;
      float _1494 = _1473 * 4.5f;
      float _1495 = _1474 * 4.5f;
      float _1496 = _1475 * 4.5f;
      float _1497 = min(_1494, _1491);
      float _1498 = min(_1495, _1492);
      float _1499 = min(_1496, _1493);
      _2790 = _1497;
      _2791 = _1498;
      _2792 = _1499;
    } else {
      bool _1501 = (_1368 == 3);
      bool _1502 = (_1368 == 5);
      bool _1503 = _1501 || _1502;
      if (_1503) {
        //   %1505 = bitcast [6 x float]* %15 to i8*
        //   %1506 = bitcast [6 x float]* %16 to i8*
        float _1508 = _RootShaderParameters_012z;
        float _1509 = _RootShaderParameters_012y;
        float _1510 = _RootShaderParameters_012x;
        float _1512 = _RootShaderParameters_011x;
        float _1513 = _RootShaderParameters_011y;
        float _1514 = _RootShaderParameters_011z;
        float _1515 = _RootShaderParameters_011w;
        float _1517 = _RootShaderParameters_010x;
        float _1518 = _RootShaderParameters_010y;
        float _1519 = _RootShaderParameters_010z;
        float _1520 = _RootShaderParameters_010w;
        float _1522 = _RootShaderParameters_009x;
        float _1524 = _RootShaderParameters_008x;
        float _1525 = _RootShaderParameters_008y;
        float _1526 = _RootShaderParameters_008z;
        float _1527 = _RootShaderParameters_008w;
        _15[0] = _1517;
        _15[1] = _1518;
        _15[2] = _1519;
        _15[3] = _1520;
        _15[4] = _1510;
        _15[5] = _1510;
        _16[0] = _1512;
        _16[1] = _1513;
        _16[2] = _1514;
        _16[3] = _1515;
        _16[4] = _1509;
        _16[5] = _1509;
        float _1541 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1542 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1543 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1545 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1546 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1547 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1549 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1550 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1551 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1552 = _1508 * _1350;
        float _1553 = _1508 * _1351;
        float _1554 = _1508 * _1352;
        float _1555 = _1541 * _1552;
        float _1556 = mad(_1542, _1553, _1555);
        float _1557 = mad(_1543, _1554, _1556);
        float _1558 = _1545 * _1552;
        float _1559 = mad(_1546, _1553, _1558);
        float _1560 = mad(_1547, _1554, _1559);
        float _1561 = _1549 * _1552;
        float _1562 = mad(_1550, _1553, _1561);
        float _1563 = mad(_1551, _1554, _1562);
        float _1564 = min(_1557, _1560);
        float _1565 = min(_1564, _1563);
        float _1566 = max(_1557, _1560);
        float _1567 = max(_1566, _1563);
        float _1568 = max(_1567, 1.000000013351432e-10f);
        float _1569 = max(_1565, 1.000000013351432e-10f);
        float _1570 = _1568 - _1569;
        float _1571 = max(_1567, 0.009999999776482582f);
        float _1572 = _1570 / _1571;
        float _1573 = _1563 - _1560;
        float _1574 = _1573 * _1563;
        float _1575 = _1560 - _1557;
        float _1576 = _1575 * _1560;
        float _1577 = _1574 + _1576;
        float _1578 = _1557 - _1563;
        float _1579 = _1578 * _1557;
        float _1580 = _1577 + _1579;
        float _1581 = sqrt(_1580);
        float _1582 = _1581 * 1.75f;
        float _1583 = _1560 + _1557;
        float _1584 = _1583 + _1563;
        float _1585 = _1584 + _1582;
        float _1586 = _1585 * 0.3333333432674408f;
        float _1587 = _1572 + -0.4000000059604645f;
        float _1588 = _1587 * 5.0f;
        float _1589 = _1587 * 2.5f;
        float _1590 = abs(_1589);
        float _1591 = 1.0f - _1590;
        float _1592 = max(_1591, 0.0f);
        bool _1593 = (_1588 > 0.0f);
        bool _1594 = (_1588 < 0.0f);
        int _1595 = int(_1593);
        int _1596 = int(_1594);
        int _1597 = _1595 - _1596;
        float _1598 = float(_1597);
        float _1599 = _1592 * _1592;
        float _1600 = 1.0f - _1599;
        float _1601 = _1598 * _1600;
        float _1602 = _1601 + 1.0f;
        float _1603 = _1602 * 0.02500000037252903f;
        bool _1604 = !(_1586 <= 0.0533333346247673f);
        _1612 = _1603;
        do {
          if (_1604) {
            bool _1606 = !(_1586 >= 0.1599999964237213f);
            _1612 = 0.0f;
            if (_1606) {
              float _1608 = 0.23999999463558197f / _1585;
              float _1609 = _1608 + -0.5f;
              float _1610 = _1609 * _1603;
              _1612 = _1610;
            }
          }
          float _1613 = _1612 + 1.0f;
          float _1614 = _1613 * _1557;
          float _1615 = _1613 * _1560;
          float _1616 = _1613 * _1563;
          bool _1617 = (_1614 == _1615);
          bool _1618 = (_1615 == _1616);
          bool _1619 = _1617 && _1618;
          _1648 = 0.0f;
          do {
            if (!_1619) {
              float _1621 = _1614 * 2.0f;
              float _1622 = _1621 - _1615;
              float _1623 = _1622 - _1616;
              float _1624 = _1560 - _1563;
              float _1625 = _1624 * 1.7320507764816284f;
              float _1626 = _1625 * _1613;
              float _1627 = _1626 / _1623;
              float _1628 = atan(_1627);
              float _1629 = _1628 + 3.1415927410125732f;
              float _1630 = _1628 + -3.1415927410125732f;
              bool _1631 = (_1623 < 0.0f);
              bool _1632 = (_1623 == 0.0f);
              bool _1633 = (_1626 >= 0.0f);
              bool _1634 = (_1626 < 0.0f);
              bool _1635 = _1633 && _1631;
              float _1636 = _1635 ? _1629 : _1628;
              bool _1637 = _1634 && _1631;
              float _1638 = _1637 ? _1630 : _1636;
              bool _1639 = _1634 && _1632;
              bool _1640 = _1633 && _1632;
              float _1641 = _1638 * 57.2957763671875f;
              float _1642 = _1639 ? -90.0f : _1641;
              float _1643 = _1640 ? 90.0f : _1642;
              bool _1644 = (_1643 < 0.0f);
              _1648 = _1643;
              if (_1644) {
                float _1646 = _1643 + 360.0f;
                _1648 = _1646;
              }
            }
            float _1649 = max(_1648, 0.0f);
            float _1650 = min(_1649, 360.0f);
            bool _1651 = (_1650 < -180.0f);
            do {
              if (_1651) {
                float _1653 = _1650 + 360.0f;
                _1659 = _1653;
              } else {
                bool _1655 = (_1650 > 180.0f);
                _1659 = _1650;
                if (_1655) {
                  float _1657 = _1650 + -360.0f;
                  _1659 = _1657;
                }
              }
              bool _1660 = (_1659 > -67.5f);
              bool _1661 = (_1659 < 67.5f);
              bool _1662 = _1660 && _1661;
              _1698 = 0.0f;
              do {
                if (_1662) {
                  float _1664 = _1659 + 67.5f;
                  float _1665 = _1664 * 0.029629629105329514f;
                  int _1666 = int(_1665);
                  float _1667 = float(_1666);
                  float _1668 = _1665 - _1667;
                  float _1669 = _1668 * _1668;
                  float _1670 = _1669 * _1668;
                  bool _1671 = (_1666 == 3);
                  if (_1671) {
                    float _1673 = _1670 * 0.1666666716337204f;
                    float _1674 = _1669 * 0.5f;
                    float _1675 = _1668 * 0.5f;
                    float _1676 = 0.1666666716337204f - _1675;
                    float _1677 = _1676 + _1674;
                    float _1678 = _1677 - _1673;
                    _1698 = _1678;
                  } else {
                    bool _1680 = (_1666 == 2);
                    if (_1680) {
                      float _1682 = _1670 * 0.5f;
                      float _1683 = 0.6666666865348816f - _1669;
                      float _1684 = _1683 + _1682;
                      _1698 = _1684;
                    } else {
                      bool _1686 = (_1666 == 1);
                      if (_1686) {
                        float _1688 = _1670 * -0.5f;
                        float _1689 = _1669 + _1668;
                        float _1690 = _1689 * 0.5f;
                        float _1691 = _1688 + 0.1666666716337204f;
                        float _1692 = _1691 + _1690;
                        _1698 = _1692;
                      } else {
                        bool _1694 = (_1666 == 0);
                        float _1695 = _1670 * 0.1666666716337204f;
                        float _1696 = _1694 ? _1695 : 0.0f;
                        _1698 = _1696;
                      }
                    }
                  }
                }
                float _1699 = 0.029999999329447746f - _1614;
                float _1700 = _1572 * 0.27000001072883606f;
                float _1701 = _1700 * _1699;
                float _1702 = _1701 * _1698;
                float _1703 = _1702 + _1614;
                float _1704 = max(_1703, 0.0f);
                float _1705 = max(_1615, 0.0f);
                float _1706 = max(_1616, 0.0f);
                float _1707 = min(_1704, 65535.0f);
                float _1708 = min(_1705, 65535.0f);
                float _1709 = min(_1706, 65535.0f);
                float _1710 = _1707 * 1.4514392614364624f;
                float _1711 = mad(-0.2365107536315918f, _1708, _1710);
                float _1712 = mad(-0.21492856740951538f, _1709, _1711);
                float _1713 = _1707 * -0.07655377686023712f;
                float _1714 = mad(1.17622971534729f, _1708, _1713);
                float _1715 = mad(-0.09967592358589172f, _1709, _1714);
                float _1716 = _1707 * 0.008316148072481155f;
                float _1717 = mad(-0.006032449658960104f, _1708, _1716);
                float _1718 = mad(0.9977163076400757f, _1709, _1717);
                float _1719 = max(_1712, 0.0f);
                float _1720 = max(_1715, 0.0f);
                float _1721 = max(_1718, 0.0f);
                float _1722 = min(_1719, 65504.0f);
                float _1723 = min(_1720, 65504.0f);
                float _1724 = min(_1721, 65504.0f);
                float _1725 = dot(float3(_1722, _1723, _1724), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1726 = _1722 - _1725;
                float _1727 = _1723 - _1725;
                float _1728 = _1724 - _1725;
                float _1729 = _1726 * 0.9599999785423279f;
                float _1730 = _1727 * 0.9599999785423279f;
                float _1731 = _1728 * 0.9599999785423279f;
                float _1732 = _1729 + _1725;
                float _1733 = _1730 + _1725;
                float _1734 = _1731 + _1725;
                float _1735 = max(_1732, 1.000000013351432e-10f);
                float _1736 = log2(_1735);
                float _1737 = _1736 * 0.3010300099849701f;
                float _1738 = log2(_1524);
                float _1739 = _1738 * 0.3010300099849701f;
                bool _1740 = !(_1737 <= _1739);
                do {
                  if (!_1740) {
                    float _1742 = log2(_1525);
                    float _1743 = _1742 * 0.3010300099849701f;
                    _1808 = _1743;
                  } else {
                    bool _1745 = (_1737 > _1739);
                    float _1746 = log2(_1522);
                    float _1747 = _1746 * 0.3010300099849701f;
                    bool _1748 = (_1737 < _1747);
                    bool _1749 = _1745 && _1748;
                    if (_1749) {
                      float _1751 = _1736 - _1738;
                      float _1752 = _1751 * 0.9030900001525879f;
                      float _1753 = _1746 - _1738;
                      float _1754 = _1753 * 0.3010300099849701f;
                      float _1755 = _1752 / _1754;
                      int _1756 = int(_1755);
                      float _1757 = float(_1756);
                      float _1758 = _1755 - _1757;
                      float _1760 = _15[_1756];
                      int _1761 = _1756 + 1;
                      float _1763 = _15[_1761];
                      int _1764 = _1756 + 2;
                      float _1766 = _15[_1764];
                      float _1767 = _1758 * _1758;
                      float _1768 = _1760 * 0.5f;
                      float _1769 = mad(_1763, -1.0f, _1768);
                      float _1770 = mad(_1766, 0.5f, _1769);
                      float _1771 = _1763 - _1760;
                      float _1772 = mad(_1763, 0.5f, _1768);
                      float _1773 = dot(float3(_1767, _1758, 1.0f), float3(_1770, _1771, _1772));
                      _1808 = _1773;
                    } else {
                      bool _1775 = !(_1737 >= _1747);
                      do {
                        if (!_1775) {
                          float _1777 = log2(_1526);
                          float _1778 = _1777 * 0.3010300099849701f;
                          bool _1779 = (_1737 < _1778);
                          if (_1779) {
                            float _1781 = _1736 - _1746;
                            float _1782 = _1781 * 0.9030900001525879f;
                            float _1783 = _1777 - _1746;
                            float _1784 = _1783 * 0.3010300099849701f;
                            float _1785 = _1782 / _1784;
                            int _1786 = int(_1785);
                            float _1787 = float(_1786);
                            float _1788 = _1785 - _1787;
                            float _1790 = _16[_1786];
                            int _1791 = _1786 + 1;
                            float _1793 = _16[_1791];
                            int _1794 = _1786 + 2;
                            float _1796 = _16[_1794];
                            float _1797 = _1788 * _1788;
                            float _1798 = _1790 * 0.5f;
                            float _1799 = mad(_1793, -1.0f, _1798);
                            float _1800 = mad(_1796, 0.5f, _1799);
                            float _1801 = _1793 - _1790;
                            float _1802 = mad(_1793, 0.5f, _1798);
                            float _1803 = dot(float3(_1797, _1788, 1.0f), float3(_1800, _1801, _1802));
                            _1808 = _1803;
                            break;
                          }
                        }
                        float _1805 = log2(_1527);
                        float _1806 = _1805 * 0.3010300099849701f;
                        _1808 = _1806;
                      } while (false);
                    }
                  }
                  float _1809 = _1808 * 3.321928024291992f;
                  float _1810 = exp2(_1809);
                  float _1811 = max(_1733, 1.000000013351432e-10f);
                  float _1812 = log2(_1811);
                  float _1813 = _1812 * 0.3010300099849701f;
                  bool _1814 = !(_1813 <= _1739);
                  do {
                    if (!_1814) {
                      float _1816 = log2(_1525);
                      float _1817 = _1816 * 0.3010300099849701f;
                      _1882 = _1817;
                    } else {
                      bool _1819 = (_1813 > _1739);
                      float _1820 = log2(_1522);
                      float _1821 = _1820 * 0.3010300099849701f;
                      bool _1822 = (_1813 < _1821);
                      bool _1823 = _1819 && _1822;
                      if (_1823) {
                        float _1825 = _1812 - _1738;
                        float _1826 = _1825 * 0.9030900001525879f;
                        float _1827 = _1820 - _1738;
                        float _1828 = _1827 * 0.3010300099849701f;
                        float _1829 = _1826 / _1828;
                        int _1830 = int(_1829);
                        float _1831 = float(_1830);
                        float _1832 = _1829 - _1831;
                        float _1834 = _15[_1830];
                        int _1835 = _1830 + 1;
                        float _1837 = _15[_1835];
                        int _1838 = _1830 + 2;
                        float _1840 = _15[_1838];
                        float _1841 = _1832 * _1832;
                        float _1842 = _1834 * 0.5f;
                        float _1843 = mad(_1837, -1.0f, _1842);
                        float _1844 = mad(_1840, 0.5f, _1843);
                        float _1845 = _1837 - _1834;
                        float _1846 = mad(_1837, 0.5f, _1842);
                        float _1847 = dot(float3(_1841, _1832, 1.0f), float3(_1844, _1845, _1846));
                        _1882 = _1847;
                      } else {
                        bool _1849 = !(_1813 >= _1821);
                        do {
                          if (!_1849) {
                            float _1851 = log2(_1526);
                            float _1852 = _1851 * 0.3010300099849701f;
                            bool _1853 = (_1813 < _1852);
                            if (_1853) {
                              float _1855 = _1812 - _1820;
                              float _1856 = _1855 * 0.9030900001525879f;
                              float _1857 = _1851 - _1820;
                              float _1858 = _1857 * 0.3010300099849701f;
                              float _1859 = _1856 / _1858;
                              int _1860 = int(_1859);
                              float _1861 = float(_1860);
                              float _1862 = _1859 - _1861;
                              float _1864 = _16[_1860];
                              int _1865 = _1860 + 1;
                              float _1867 = _16[_1865];
                              int _1868 = _1860 + 2;
                              float _1870 = _16[_1868];
                              float _1871 = _1862 * _1862;
                              float _1872 = _1864 * 0.5f;
                              float _1873 = mad(_1867, -1.0f, _1872);
                              float _1874 = mad(_1870, 0.5f, _1873);
                              float _1875 = _1867 - _1864;
                              float _1876 = mad(_1867, 0.5f, _1872);
                              float _1877 = dot(float3(_1871, _1862, 1.0f), float3(_1874, _1875, _1876));
                              _1882 = _1877;
                              break;
                            }
                          }
                          float _1879 = log2(_1527);
                          float _1880 = _1879 * 0.3010300099849701f;
                          _1882 = _1880;
                        } while (false);
                      }
                    }
                    float _1883 = _1882 * 3.321928024291992f;
                    float _1884 = exp2(_1883);
                    float _1885 = max(_1734, 1.000000013351432e-10f);
                    float _1886 = log2(_1885);
                    float _1887 = _1886 * 0.3010300099849701f;
                    bool _1888 = !(_1887 <= _1739);
                    do {
                      if (!_1888) {
                        float _1890 = log2(_1525);
                        float _1891 = _1890 * 0.3010300099849701f;
                        _1956 = _1891;
                      } else {
                        bool _1893 = (_1887 > _1739);
                        float _1894 = log2(_1522);
                        float _1895 = _1894 * 0.3010300099849701f;
                        bool _1896 = (_1887 < _1895);
                        bool _1897 = _1893 && _1896;
                        if (_1897) {
                          float _1899 = _1886 - _1738;
                          float _1900 = _1899 * 0.9030900001525879f;
                          float _1901 = _1894 - _1738;
                          float _1902 = _1901 * 0.3010300099849701f;
                          float _1903 = _1900 / _1902;
                          int _1904 = int(_1903);
                          float _1905 = float(_1904);
                          float _1906 = _1903 - _1905;
                          float _1908 = _15[_1904];
                          int _1909 = _1904 + 1;
                          float _1911 = _15[_1909];
                          int _1912 = _1904 + 2;
                          float _1914 = _15[_1912];
                          float _1915 = _1906 * _1906;
                          float _1916 = _1908 * 0.5f;
                          float _1917 = mad(_1911, -1.0f, _1916);
                          float _1918 = mad(_1914, 0.5f, _1917);
                          float _1919 = _1911 - _1908;
                          float _1920 = mad(_1911, 0.5f, _1916);
                          float _1921 = dot(float3(_1915, _1906, 1.0f), float3(_1918, _1919, _1920));
                          _1956 = _1921;
                        } else {
                          bool _1923 = !(_1887 >= _1895);
                          do {
                            if (!_1923) {
                              float _1925 = log2(_1526);
                              float _1926 = _1925 * 0.3010300099849701f;
                              bool _1927 = (_1887 < _1926);
                              if (_1927) {
                                float _1929 = _1886 - _1894;
                                float _1930 = _1929 * 0.9030900001525879f;
                                float _1931 = _1925 - _1894;
                                float _1932 = _1931 * 0.3010300099849701f;
                                float _1933 = _1930 / _1932;
                                int _1934 = int(_1933);
                                float _1935 = float(_1934);
                                float _1936 = _1933 - _1935;
                                float _1938 = _16[_1934];
                                int _1939 = _1934 + 1;
                                float _1941 = _16[_1939];
                                int _1942 = _1934 + 2;
                                float _1944 = _16[_1942];
                                float _1945 = _1936 * _1936;
                                float _1946 = _1938 * 0.5f;
                                float _1947 = mad(_1941, -1.0f, _1946);
                                float _1948 = mad(_1944, 0.5f, _1947);
                                float _1949 = _1941 - _1938;
                                float _1950 = mad(_1941, 0.5f, _1946);
                                float _1951 = dot(float3(_1945, _1936, 1.0f), float3(_1948, _1949, _1950));
                                _1956 = _1951;
                                break;
                              }
                            }
                            float _1953 = log2(_1527);
                            float _1954 = _1953 * 0.3010300099849701f;
                            _1956 = _1954;
                          } while (false);
                        }
                      }
                      float _1957 = _1956 * 3.321928024291992f;
                      float _1958 = exp2(_1957);
                      float _1959 = _1810 - _1525;
                      float _1960 = _1527 - _1525;
                      float _1961 = _1959 / _1960;
                      float _1962 = _1884 - _1525;
                      float _1963 = _1962 / _1960;
                      float _1964 = _1958 - _1525;
                      float _1965 = _1964 / _1960;
                      float _1966 = _1961 * 0.6624541878700256f;
                      float _1967 = mad(0.13400420546531677f, _1963, _1966);
                      float _1968 = mad(0.15618768334388733f, _1965, _1967);
                      float _1969 = _1961 * 0.2722287178039551f;
                      float _1970 = mad(0.6740817427635193f, _1963, _1969);
                      float _1971 = mad(0.053689517080783844f, _1965, _1970);
                      float _1972 = _1961 * -0.005574649665504694f;
                      float _1973 = mad(0.00406073359772563f, _1963, _1972);
                      float _1974 = mad(1.0103391408920288f, _1965, _1973);
                      float _1975 = _1968 * 1.6410233974456787f;
                      float _1976 = mad(-0.32480329275131226f, _1971, _1975);
                      float _1977 = mad(-0.23642469942569733f, _1974, _1976);
                      float _1978 = _1968 * -0.663662850856781f;
                      float _1979 = mad(1.6153316497802734f, _1971, _1978);
                      float _1980 = mad(0.016756348311901093f, _1974, _1979);
                      float _1981 = _1968 * 0.011721894145011902f;
                      float _1982 = mad(-0.008284442126750946f, _1971, _1981);
                      float _1983 = mad(0.9883948564529419f, _1974, _1982);
                      float _1984 = max(_1977, 0.0f);
                      float _1985 = max(_1980, 0.0f);
                      float _1986 = max(_1983, 0.0f);
                      float _1987 = min(_1984, 1.0f);
                      float _1988 = min(_1985, 1.0f);
                      float _1989 = min(_1986, 1.0f);
                      float _1990 = _1987 * 0.6624541878700256f;
                      float _1991 = mad(0.13400420546531677f, _1988, _1990);
                      float _1992 = mad(0.15618768334388733f, _1989, _1991);
                      float _1993 = _1987 * 0.2722287178039551f;
                      float _1994 = mad(0.6740817427635193f, _1988, _1993);
                      float _1995 = mad(0.053689517080783844f, _1989, _1994);
                      float _1996 = _1987 * -0.005574649665504694f;
                      float _1997 = mad(0.00406073359772563f, _1988, _1996);
                      float _1998 = mad(1.0103391408920288f, _1989, _1997);
                      float _1999 = _1992 * 1.6410233974456787f;
                      float _2000 = mad(-0.32480329275131226f, _1995, _1999);
                      float _2001 = mad(-0.23642469942569733f, _1998, _2000);
                      float _2002 = _1992 * -0.663662850856781f;
                      float _2003 = mad(1.6153316497802734f, _1995, _2002);
                      float _2004 = mad(0.016756348311901093f, _1998, _2003);
                      float _2005 = _1992 * 0.011721894145011902f;
                      float _2006 = mad(-0.008284442126750946f, _1995, _2005);
                      float _2007 = mad(0.9883948564529419f, _1998, _2006);
                      float _2008 = max(_2001, 0.0f);
                      float _2009 = max(_2004, 0.0f);
                      float _2010 = max(_2007, 0.0f);
                      float _2011 = min(_2008, 65535.0f);
                      float _2012 = min(_2009, 65535.0f);
                      float _2013 = min(_2010, 65535.0f);
                      float _2014 = _2011 * _1527;
                      float _2015 = _2012 * _1527;
                      float _2016 = _2013 * _1527;
                      float _2017 = max(_2014, 0.0f);
                      float _2018 = max(_2015, 0.0f);
                      float _2019 = max(_2016, 0.0f);
                      float _2020 = min(_2017, 65535.0f);
                      float _2021 = min(_2018, 65535.0f);
                      float _2022 = min(_2019, 65535.0f);
                      bool _2023 = (_1368 == 5);
                      _2035 = _2020;
                      _2036 = _2021;
                      _2037 = _2022;
                      do {
                        if (!_2023) {
                          float _2025 = _2020 * _51;
                          float _2026 = mad(_52, _2021, _2025);
                          float _2027 = mad(_53, _2022, _2026);
                          float _2028 = _2020 * _54;
                          float _2029 = mad(_55, _2021, _2028);
                          float _2030 = mad(_56, _2022, _2029);
                          float _2031 = _2020 * _57;
                          float _2032 = mad(_58, _2021, _2031);
                          float _2033 = mad(_59, _2022, _2032);
                          _2035 = _2027;
                          _2036 = _2030;
                          _2037 = _2033;
                        }
                        float _2038 = _2035 * 9.999999747378752e-05f;
                        float _2039 = _2036 * 9.999999747378752e-05f;
                        float _2040 = _2037 * 9.999999747378752e-05f;
                        float _2041 = log2(_2038);
                        float _2042 = log2(_2039);
                        float _2043 = log2(_2040);
                        float _2044 = _2041 * 0.1593017578125f;
                        float _2045 = _2042 * 0.1593017578125f;
                        float _2046 = _2043 * 0.1593017578125f;
                        float _2047 = exp2(_2044);
                        float _2048 = exp2(_2045);
                        float _2049 = exp2(_2046);
                        float _2050 = _2047 * 18.8515625f;
                        float _2051 = _2048 * 18.8515625f;
                        float _2052 = _2049 * 18.8515625f;
                        float _2053 = _2050 + 0.8359375f;
                        float _2054 = _2051 + 0.8359375f;
                        float _2055 = _2052 + 0.8359375f;
                        float _2056 = _2047 * 18.6875f;
                        float _2057 = _2048 * 18.6875f;
                        float _2058 = _2049 * 18.6875f;
                        float _2059 = _2056 + 1.0f;
                        float _2060 = _2057 + 1.0f;
                        float _2061 = _2058 + 1.0f;
                        float _2062 = 1.0f / _2059;
                        float _2063 = 1.0f / _2060;
                        float _2064 = 1.0f / _2061;
                        float _2065 = _2062 * _2053;
                        float _2066 = _2063 * _2054;
                        float _2067 = _2064 * _2055;
                        float _2068 = log2(_2065);
                        float _2069 = log2(_2066);
                        float _2070 = log2(_2067);
                        float _2071 = _2068 * 78.84375f;
                        float _2072 = _2069 * 78.84375f;
                        float _2073 = _2070 * 78.84375f;
                        float _2074 = exp2(_2071);
                        float _2075 = exp2(_2072);
                        float _2076 = exp2(_2073);
                        _2790 = _2074;
                        _2791 = _2075;
                        _2792 = _2076;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _2078 = _1368 & -3;
        bool _2079 = (_2078 == 4);
        if (_2079) {
          //   %2081 = bitcast [6 x float]* %13 to i8*
          //   %2082 = bitcast [6 x float]* %14 to i8*
          float _2084 = _RootShaderParameters_012z;
          float _2085 = _RootShaderParameters_012y;
          float _2086 = _RootShaderParameters_012x;
          float _2088 = _RootShaderParameters_011x;
          float _2089 = _RootShaderParameters_011y;
          float _2090 = _RootShaderParameters_011z;
          float _2091 = _RootShaderParameters_011w;
          float _2093 = _RootShaderParameters_010x;
          float _2094 = _RootShaderParameters_010y;
          float _2095 = _RootShaderParameters_010z;
          float _2096 = _RootShaderParameters_010w;
          float _2098 = _RootShaderParameters_009x;
          float _2100 = _RootShaderParameters_008x;
          float _2101 = _RootShaderParameters_008y;
          float _2102 = _RootShaderParameters_008z;
          float _2103 = _RootShaderParameters_008w;
          _13[0] = _2093;
          _13[1] = _2094;
          _13[2] = _2095;
          _13[3] = _2096;
          _13[4] = _2086;
          _13[5] = _2086;
          _14[0] = _2088;
          _14[1] = _2089;
          _14[2] = _2090;
          _14[3] = _2091;
          _14[4] = _2085;
          _14[5] = _2085;
          float _2117 = UniformBufferConstants_WorkingColorSpace_016x;
          float _2118 = UniformBufferConstants_WorkingColorSpace_016y;
          float _2119 = UniformBufferConstants_WorkingColorSpace_016z;
          float _2121 = UniformBufferConstants_WorkingColorSpace_017x;
          float _2122 = UniformBufferConstants_WorkingColorSpace_017y;
          float _2123 = UniformBufferConstants_WorkingColorSpace_017z;
          float _2125 = UniformBufferConstants_WorkingColorSpace_018x;
          float _2126 = UniformBufferConstants_WorkingColorSpace_018y;
          float _2127 = UniformBufferConstants_WorkingColorSpace_018z;
          float _2128 = _2084 * _1350;
          float _2129 = _2084 * _1351;
          float _2130 = _2084 * _1352;
          float _2131 = _2117 * _2128;
          float _2132 = mad(_2118, _2129, _2131);
          float _2133 = mad(_2119, _2130, _2132);
          float _2134 = _2121 * _2128;
          float _2135 = mad(_2122, _2129, _2134);
          float _2136 = mad(_2123, _2130, _2135);
          float _2137 = _2125 * _2128;
          float _2138 = mad(_2126, _2129, _2137);
          float _2139 = mad(_2127, _2130, _2138);
          float _2140 = min(_2133, _2136);
          float _2141 = min(_2140, _2139);
          float _2142 = max(_2133, _2136);
          float _2143 = max(_2142, _2139);
          float _2144 = max(_2143, 1.000000013351432e-10f);
          float _2145 = max(_2141, 1.000000013351432e-10f);
          float _2146 = _2144 - _2145;
          float _2147 = max(_2143, 0.009999999776482582f);
          float _2148 = _2146 / _2147;
          float _2149 = _2139 - _2136;
          float _2150 = _2149 * _2139;
          float _2151 = _2136 - _2133;
          float _2152 = _2151 * _2136;
          float _2153 = _2150 + _2152;
          float _2154 = _2133 - _2139;
          float _2155 = _2154 * _2133;
          float _2156 = _2153 + _2155;
          float _2157 = sqrt(_2156);
          float _2158 = _2157 * 1.75f;
          float _2159 = _2136 + _2133;
          float _2160 = _2159 + _2139;
          float _2161 = _2160 + _2158;
          float _2162 = _2161 * 0.3333333432674408f;
          float _2163 = _2148 + -0.4000000059604645f;
          float _2164 = _2163 * 5.0f;
          float _2165 = _2163 * 2.5f;
          float _2166 = abs(_2165);
          float _2167 = 1.0f - _2166;
          float _2168 = max(_2167, 0.0f);
          bool _2169 = (_2164 > 0.0f);
          bool _2170 = (_2164 < 0.0f);
          int _2171 = int(_2169);
          int _2172 = int(_2170);
          int _2173 = _2171 - _2172;
          float _2174 = float(_2173);
          float _2175 = _2168 * _2168;
          float _2176 = 1.0f - _2175;
          float _2177 = _2174 * _2176;
          float _2178 = _2177 + 1.0f;
          float _2179 = _2178 * 0.02500000037252903f;
          bool _2180 = !(_2162 <= 0.0533333346247673f);
          _2188 = _2179;
          do {
            if (_2180) {
              bool _2182 = !(_2162 >= 0.1599999964237213f);
              _2188 = 0.0f;
              if (_2182) {
                float _2184 = 0.23999999463558197f / _2161;
                float _2185 = _2184 + -0.5f;
                float _2186 = _2185 * _2179;
                _2188 = _2186;
              }
            }
            float _2189 = _2188 + 1.0f;
            float _2190 = _2189 * _2133;
            float _2191 = _2189 * _2136;
            float _2192 = _2189 * _2139;
            bool _2193 = (_2190 == _2191);
            bool _2194 = (_2191 == _2192);
            bool _2195 = _2193 && _2194;
            _2224 = 0.0f;
            do {
              if (!_2195) {
                float _2197 = _2190 * 2.0f;
                float _2198 = _2197 - _2191;
                float _2199 = _2198 - _2192;
                float _2200 = _2136 - _2139;
                float _2201 = _2200 * 1.7320507764816284f;
                float _2202 = _2201 * _2189;
                float _2203 = _2202 / _2199;
                float _2204 = atan(_2203);
                float _2205 = _2204 + 3.1415927410125732f;
                float _2206 = _2204 + -3.1415927410125732f;
                bool _2207 = (_2199 < 0.0f);
                bool _2208 = (_2199 == 0.0f);
                bool _2209 = (_2202 >= 0.0f);
                bool _2210 = (_2202 < 0.0f);
                bool _2211 = _2209 && _2207;
                float _2212 = _2211 ? _2205 : _2204;
                bool _2213 = _2210 && _2207;
                float _2214 = _2213 ? _2206 : _2212;
                bool _2215 = _2210 && _2208;
                bool _2216 = _2209 && _2208;
                float _2217 = _2214 * 57.2957763671875f;
                float _2218 = _2215 ? -90.0f : _2217;
                float _2219 = _2216 ? 90.0f : _2218;
                bool _2220 = (_2219 < 0.0f);
                _2224 = _2219;
                if (_2220) {
                  float _2222 = _2219 + 360.0f;
                  _2224 = _2222;
                }
              }
              float _2225 = max(_2224, 0.0f);
              float _2226 = min(_2225, 360.0f);
              bool _2227 = (_2226 < -180.0f);
              do {
                if (_2227) {
                  float _2229 = _2226 + 360.0f;
                  _2235 = _2229;
                } else {
                  bool _2231 = (_2226 > 180.0f);
                  _2235 = _2226;
                  if (_2231) {
                    float _2233 = _2226 + -360.0f;
                    _2235 = _2233;
                  }
                }
                bool _2236 = (_2235 > -67.5f);
                bool _2237 = (_2235 < 67.5f);
                bool _2238 = _2236 && _2237;
                _2274 = 0.0f;
                do {
                  if (_2238) {
                    float _2240 = _2235 + 67.5f;
                    float _2241 = _2240 * 0.029629629105329514f;
                    int _2242 = int(_2241);
                    float _2243 = float(_2242);
                    float _2244 = _2241 - _2243;
                    float _2245 = _2244 * _2244;
                    float _2246 = _2245 * _2244;
                    bool _2247 = (_2242 == 3);
                    if (_2247) {
                      float _2249 = _2246 * 0.1666666716337204f;
                      float _2250 = _2245 * 0.5f;
                      float _2251 = _2244 * 0.5f;
                      float _2252 = 0.1666666716337204f - _2251;
                      float _2253 = _2252 + _2250;
                      float _2254 = _2253 - _2249;
                      _2274 = _2254;
                    } else {
                      bool _2256 = (_2242 == 2);
                      if (_2256) {
                        float _2258 = _2246 * 0.5f;
                        float _2259 = 0.6666666865348816f - _2245;
                        float _2260 = _2259 + _2258;
                        _2274 = _2260;
                      } else {
                        bool _2262 = (_2242 == 1);
                        if (_2262) {
                          float _2264 = _2246 * -0.5f;
                          float _2265 = _2245 + _2244;
                          float _2266 = _2265 * 0.5f;
                          float _2267 = _2264 + 0.1666666716337204f;
                          float _2268 = _2267 + _2266;
                          _2274 = _2268;
                        } else {
                          bool _2270 = (_2242 == 0);
                          float _2271 = _2246 * 0.1666666716337204f;
                          float _2272 = _2270 ? _2271 : 0.0f;
                          _2274 = _2272;
                        }
                      }
                    }
                  }
                  float _2275 = 0.029999999329447746f - _2190;
                  float _2276 = _2148 * 0.27000001072883606f;
                  float _2277 = _2276 * _2275;
                  float _2278 = _2277 * _2274;
                  float _2279 = _2278 + _2190;
                  float _2280 = max(_2279, 0.0f);
                  float _2281 = max(_2191, 0.0f);
                  float _2282 = max(_2192, 0.0f);
                  float _2283 = min(_2280, 65535.0f);
                  float _2284 = min(_2281, 65535.0f);
                  float _2285 = min(_2282, 65535.0f);
                  float _2286 = _2283 * 1.4514392614364624f;
                  float _2287 = mad(-0.2365107536315918f, _2284, _2286);
                  float _2288 = mad(-0.21492856740951538f, _2285, _2287);
                  float _2289 = _2283 * -0.07655377686023712f;
                  float _2290 = mad(1.17622971534729f, _2284, _2289);
                  float _2291 = mad(-0.09967592358589172f, _2285, _2290);
                  float _2292 = _2283 * 0.008316148072481155f;
                  float _2293 = mad(-0.006032449658960104f, _2284, _2292);
                  float _2294 = mad(0.9977163076400757f, _2285, _2293);
                  float _2295 = max(_2288, 0.0f);
                  float _2296 = max(_2291, 0.0f);
                  float _2297 = max(_2294, 0.0f);
                  float _2298 = min(_2295, 65504.0f);
                  float _2299 = min(_2296, 65504.0f);
                  float _2300 = min(_2297, 65504.0f);
                  float _2301 = dot(float3(_2298, _2299, _2300), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2302 = _2298 - _2301;
                  float _2303 = _2299 - _2301;
                  float _2304 = _2300 - _2301;
                  float _2305 = _2302 * 0.9599999785423279f;
                  float _2306 = _2303 * 0.9599999785423279f;
                  float _2307 = _2304 * 0.9599999785423279f;
                  float _2308 = _2305 + _2301;
                  float _2309 = _2306 + _2301;
                  float _2310 = _2307 + _2301;
                  float _2311 = max(_2308, 1.000000013351432e-10f);
                  float _2312 = log2(_2311);
                  float _2313 = _2312 * 0.3010300099849701f;
                  float _2314 = log2(_2100);
                  float _2315 = _2314 * 0.3010300099849701f;
                  bool _2316 = !(_2313 <= _2315);
                  do {
                    if (!_2316) {
                      float _2318 = log2(_2101);
                      float _2319 = _2318 * 0.3010300099849701f;
                      _2384 = _2319;
                    } else {
                      bool _2321 = (_2313 > _2315);
                      float _2322 = log2(_2098);
                      float _2323 = _2322 * 0.3010300099849701f;
                      bool _2324 = (_2313 < _2323);
                      bool _2325 = _2321 && _2324;
                      if (_2325) {
                        float _2327 = _2312 - _2314;
                        float _2328 = _2327 * 0.9030900001525879f;
                        float _2329 = _2322 - _2314;
                        float _2330 = _2329 * 0.3010300099849701f;
                        float _2331 = _2328 / _2330;
                        int _2332 = int(_2331);
                        float _2333 = float(_2332);
                        float _2334 = _2331 - _2333;
                        float _2336 = _13[_2332];
                        int _2337 = _2332 + 1;
                        float _2339 = _13[_2337];
                        int _2340 = _2332 + 2;
                        float _2342 = _13[_2340];
                        float _2343 = _2334 * _2334;
                        float _2344 = _2336 * 0.5f;
                        float _2345 = mad(_2339, -1.0f, _2344);
                        float _2346 = mad(_2342, 0.5f, _2345);
                        float _2347 = _2339 - _2336;
                        float _2348 = mad(_2339, 0.5f, _2344);
                        float _2349 = dot(float3(_2343, _2334, 1.0f), float3(_2346, _2347, _2348));
                        _2384 = _2349;
                      } else {
                        bool _2351 = !(_2313 >= _2323);
                        do {
                          if (!_2351) {
                            float _2353 = log2(_2102);
                            float _2354 = _2353 * 0.3010300099849701f;
                            bool _2355 = (_2313 < _2354);
                            if (_2355) {
                              float _2357 = _2312 - _2322;
                              float _2358 = _2357 * 0.9030900001525879f;
                              float _2359 = _2353 - _2322;
                              float _2360 = _2359 * 0.3010300099849701f;
                              float _2361 = _2358 / _2360;
                              int _2362 = int(_2361);
                              float _2363 = float(_2362);
                              float _2364 = _2361 - _2363;
                              float _2366 = _14[_2362];
                              int _2367 = _2362 + 1;
                              float _2369 = _14[_2367];
                              int _2370 = _2362 + 2;
                              float _2372 = _14[_2370];
                              float _2373 = _2364 * _2364;
                              float _2374 = _2366 * 0.5f;
                              float _2375 = mad(_2369, -1.0f, _2374);
                              float _2376 = mad(_2372, 0.5f, _2375);
                              float _2377 = _2369 - _2366;
                              float _2378 = mad(_2369, 0.5f, _2374);
                              float _2379 = dot(float3(_2373, _2364, 1.0f), float3(_2376, _2377, _2378));
                              _2384 = _2379;
                              break;
                            }
                          }
                          float _2381 = log2(_2103);
                          float _2382 = _2381 * 0.3010300099849701f;
                          _2384 = _2382;
                        } while (false);
                      }
                    }
                    float _2385 = _2384 * 3.321928024291992f;
                    float _2386 = exp2(_2385);
                    float _2387 = max(_2309, 1.000000013351432e-10f);
                    float _2388 = log2(_2387);
                    float _2389 = _2388 * 0.3010300099849701f;
                    bool _2390 = !(_2389 <= _2315);
                    do {
                      if (!_2390) {
                        float _2392 = log2(_2101);
                        float _2393 = _2392 * 0.3010300099849701f;
                        _2458 = _2393;
                      } else {
                        bool _2395 = (_2389 > _2315);
                        float _2396 = log2(_2098);
                        float _2397 = _2396 * 0.3010300099849701f;
                        bool _2398 = (_2389 < _2397);
                        bool _2399 = _2395 && _2398;
                        if (_2399) {
                          float _2401 = _2388 - _2314;
                          float _2402 = _2401 * 0.9030900001525879f;
                          float _2403 = _2396 - _2314;
                          float _2404 = _2403 * 0.3010300099849701f;
                          float _2405 = _2402 / _2404;
                          int _2406 = int(_2405);
                          float _2407 = float(_2406);
                          float _2408 = _2405 - _2407;
                          float _2410 = _13[_2406];
                          int _2411 = _2406 + 1;
                          float _2413 = _13[_2411];
                          int _2414 = _2406 + 2;
                          float _2416 = _13[_2414];
                          float _2417 = _2408 * _2408;
                          float _2418 = _2410 * 0.5f;
                          float _2419 = mad(_2413, -1.0f, _2418);
                          float _2420 = mad(_2416, 0.5f, _2419);
                          float _2421 = _2413 - _2410;
                          float _2422 = mad(_2413, 0.5f, _2418);
                          float _2423 = dot(float3(_2417, _2408, 1.0f), float3(_2420, _2421, _2422));
                          _2458 = _2423;
                        } else {
                          bool _2425 = !(_2389 >= _2397);
                          do {
                            if (!_2425) {
                              float _2427 = log2(_2102);
                              float _2428 = _2427 * 0.3010300099849701f;
                              bool _2429 = (_2389 < _2428);
                              if (_2429) {
                                float _2431 = _2388 - _2396;
                                float _2432 = _2431 * 0.9030900001525879f;
                                float _2433 = _2427 - _2396;
                                float _2434 = _2433 * 0.3010300099849701f;
                                float _2435 = _2432 / _2434;
                                int _2436 = int(_2435);
                                float _2437 = float(_2436);
                                float _2438 = _2435 - _2437;
                                float _2440 = _14[_2436];
                                int _2441 = _2436 + 1;
                                float _2443 = _14[_2441];
                                int _2444 = _2436 + 2;
                                float _2446 = _14[_2444];
                                float _2447 = _2438 * _2438;
                                float _2448 = _2440 * 0.5f;
                                float _2449 = mad(_2443, -1.0f, _2448);
                                float _2450 = mad(_2446, 0.5f, _2449);
                                float _2451 = _2443 - _2440;
                                float _2452 = mad(_2443, 0.5f, _2448);
                                float _2453 = dot(float3(_2447, _2438, 1.0f), float3(_2450, _2451, _2452));
                                _2458 = _2453;
                                break;
                              }
                            }
                            float _2455 = log2(_2103);
                            float _2456 = _2455 * 0.3010300099849701f;
                            _2458 = _2456;
                          } while (false);
                        }
                      }
                      float _2459 = _2458 * 3.321928024291992f;
                      float _2460 = exp2(_2459);
                      float _2461 = max(_2310, 1.000000013351432e-10f);
                      float _2462 = log2(_2461);
                      float _2463 = _2462 * 0.3010300099849701f;
                      bool _2464 = !(_2463 <= _2315);
                      do {
                        if (!_2464) {
                          float _2466 = log2(_2101);
                          float _2467 = _2466 * 0.3010300099849701f;
                          _2532 = _2467;
                        } else {
                          bool _2469 = (_2463 > _2315);
                          float _2470 = log2(_2098);
                          float _2471 = _2470 * 0.3010300099849701f;
                          bool _2472 = (_2463 < _2471);
                          bool _2473 = _2469 && _2472;
                          if (_2473) {
                            float _2475 = _2462 - _2314;
                            float _2476 = _2475 * 0.9030900001525879f;
                            float _2477 = _2470 - _2314;
                            float _2478 = _2477 * 0.3010300099849701f;
                            float _2479 = _2476 / _2478;
                            int _2480 = int(_2479);
                            float _2481 = float(_2480);
                            float _2482 = _2479 - _2481;
                            float _2484 = _13[_2480];
                            int _2485 = _2480 + 1;
                            float _2487 = _13[_2485];
                            int _2488 = _2480 + 2;
                            float _2490 = _13[_2488];
                            float _2491 = _2482 * _2482;
                            float _2492 = _2484 * 0.5f;
                            float _2493 = mad(_2487, -1.0f, _2492);
                            float _2494 = mad(_2490, 0.5f, _2493);
                            float _2495 = _2487 - _2484;
                            float _2496 = mad(_2487, 0.5f, _2492);
                            float _2497 = dot(float3(_2491, _2482, 1.0f), float3(_2494, _2495, _2496));
                            _2532 = _2497;
                          } else {
                            bool _2499 = !(_2463 >= _2471);
                            do {
                              if (!_2499) {
                                float _2501 = log2(_2102);
                                float _2502 = _2501 * 0.3010300099849701f;
                                bool _2503 = (_2463 < _2502);
                                if (_2503) {
                                  float _2505 = _2462 - _2470;
                                  float _2506 = _2505 * 0.9030900001525879f;
                                  float _2507 = _2501 - _2470;
                                  float _2508 = _2507 * 0.3010300099849701f;
                                  float _2509 = _2506 / _2508;
                                  int _2510 = int(_2509);
                                  float _2511 = float(_2510);
                                  float _2512 = _2509 - _2511;
                                  float _2514 = _14[_2510];
                                  int _2515 = _2510 + 1;
                                  float _2517 = _14[_2515];
                                  int _2518 = _2510 + 2;
                                  float _2520 = _14[_2518];
                                  float _2521 = _2512 * _2512;
                                  float _2522 = _2514 * 0.5f;
                                  float _2523 = mad(_2517, -1.0f, _2522);
                                  float _2524 = mad(_2520, 0.5f, _2523);
                                  float _2525 = _2517 - _2514;
                                  float _2526 = mad(_2517, 0.5f, _2522);
                                  float _2527 = dot(float3(_2521, _2512, 1.0f), float3(_2524, _2525, _2526));
                                  _2532 = _2527;
                                  break;
                                }
                              }
                              float _2529 = log2(_2103);
                              float _2530 = _2529 * 0.3010300099849701f;
                              _2532 = _2530;
                            } while (false);
                          }
                        }
                        float _2533 = _2532 * 3.321928024291992f;
                        float _2534 = exp2(_2533);
                        float _2535 = _2386 - _2101;
                        float _2536 = _2103 - _2101;
                        float _2537 = _2535 / _2536;
                        float _2538 = _2460 - _2101;
                        float _2539 = _2538 / _2536;
                        float _2540 = _2534 - _2101;
                        float _2541 = _2540 / _2536;
                        float _2542 = _2537 * 0.6624541878700256f;
                        float _2543 = mad(0.13400420546531677f, _2539, _2542);
                        float _2544 = mad(0.15618768334388733f, _2541, _2543);
                        float _2545 = _2537 * 0.2722287178039551f;
                        float _2546 = mad(0.6740817427635193f, _2539, _2545);
                        float _2547 = mad(0.053689517080783844f, _2541, _2546);
                        float _2548 = _2537 * -0.005574649665504694f;
                        float _2549 = mad(0.00406073359772563f, _2539, _2548);
                        float _2550 = mad(1.0103391408920288f, _2541, _2549);
                        float _2551 = _2544 * 1.6410233974456787f;
                        float _2552 = mad(-0.32480329275131226f, _2547, _2551);
                        float _2553 = mad(-0.23642469942569733f, _2550, _2552);
                        float _2554 = _2544 * -0.663662850856781f;
                        float _2555 = mad(1.6153316497802734f, _2547, _2554);
                        float _2556 = mad(0.016756348311901093f, _2550, _2555);
                        float _2557 = _2544 * 0.011721894145011902f;
                        float _2558 = mad(-0.008284442126750946f, _2547, _2557);
                        float _2559 = mad(0.9883948564529419f, _2550, _2558);
                        float _2560 = max(_2553, 0.0f);
                        float _2561 = max(_2556, 0.0f);
                        float _2562 = max(_2559, 0.0f);
                        float _2563 = min(_2560, 1.0f);
                        float _2564 = min(_2561, 1.0f);
                        float _2565 = min(_2562, 1.0f);
                        float _2566 = _2563 * 0.6624541878700256f;
                        float _2567 = mad(0.13400420546531677f, _2564, _2566);
                        float _2568 = mad(0.15618768334388733f, _2565, _2567);
                        float _2569 = _2563 * 0.2722287178039551f;
                        float _2570 = mad(0.6740817427635193f, _2564, _2569);
                        float _2571 = mad(0.053689517080783844f, _2565, _2570);
                        float _2572 = _2563 * -0.005574649665504694f;
                        float _2573 = mad(0.00406073359772563f, _2564, _2572);
                        float _2574 = mad(1.0103391408920288f, _2565, _2573);
                        float _2575 = _2568 * 1.6410233974456787f;
                        float _2576 = mad(-0.32480329275131226f, _2571, _2575);
                        float _2577 = mad(-0.23642469942569733f, _2574, _2576);
                        float _2578 = _2568 * -0.663662850856781f;
                        float _2579 = mad(1.6153316497802734f, _2571, _2578);
                        float _2580 = mad(0.016756348311901093f, _2574, _2579);
                        float _2581 = _2568 * 0.011721894145011902f;
                        float _2582 = mad(-0.008284442126750946f, _2571, _2581);
                        float _2583 = mad(0.9883948564529419f, _2574, _2582);
                        float _2584 = max(_2577, 0.0f);
                        float _2585 = max(_2580, 0.0f);
                        float _2586 = max(_2583, 0.0f);
                        float _2587 = min(_2584, 65535.0f);
                        float _2588 = min(_2585, 65535.0f);
                        float _2589 = min(_2586, 65535.0f);
                        float _2590 = _2587 * _2103;
                        float _2591 = _2588 * _2103;
                        float _2592 = _2589 * _2103;
                        float _2593 = max(_2590, 0.0f);
                        float _2594 = max(_2591, 0.0f);
                        float _2595 = max(_2592, 0.0f);
                        float _2596 = min(_2593, 65535.0f);
                        float _2597 = min(_2594, 65535.0f);
                        float _2598 = min(_2595, 65535.0f);
                        bool _2599 = (_1368 == 6);
                        _2611 = _2596;
                        _2612 = _2597;
                        _2613 = _2598;
                        do {
                          if (!_2599) {
                            float _2601 = _2596 * _51;
                            float _2602 = mad(_52, _2597, _2601);
                            float _2603 = mad(_53, _2598, _2602);
                            float _2604 = _2596 * _54;
                            float _2605 = mad(_55, _2597, _2604);
                            float _2606 = mad(_56, _2598, _2605);
                            float _2607 = _2596 * _57;
                            float _2608 = mad(_58, _2597, _2607);
                            float _2609 = mad(_59, _2598, _2608);
                            _2611 = _2603;
                            _2612 = _2606;
                            _2613 = _2609;
                          }
                          float _2614 = _2611 * 9.999999747378752e-05f;
                          float _2615 = _2612 * 9.999999747378752e-05f;
                          float _2616 = _2613 * 9.999999747378752e-05f;
                          float _2617 = log2(_2614);
                          float _2618 = log2(_2615);
                          float _2619 = log2(_2616);
                          float _2620 = _2617 * 0.1593017578125f;
                          float _2621 = _2618 * 0.1593017578125f;
                          float _2622 = _2619 * 0.1593017578125f;
                          float _2623 = exp2(_2620);
                          float _2624 = exp2(_2621);
                          float _2625 = exp2(_2622);
                          float _2626 = _2623 * 18.8515625f;
                          float _2627 = _2624 * 18.8515625f;
                          float _2628 = _2625 * 18.8515625f;
                          float _2629 = _2626 + 0.8359375f;
                          float _2630 = _2627 + 0.8359375f;
                          float _2631 = _2628 + 0.8359375f;
                          float _2632 = _2623 * 18.6875f;
                          float _2633 = _2624 * 18.6875f;
                          float _2634 = _2625 * 18.6875f;
                          float _2635 = _2632 + 1.0f;
                          float _2636 = _2633 + 1.0f;
                          float _2637 = _2634 + 1.0f;
                          float _2638 = 1.0f / _2635;
                          float _2639 = 1.0f / _2636;
                          float _2640 = 1.0f / _2637;
                          float _2641 = _2638 * _2629;
                          float _2642 = _2639 * _2630;
                          float _2643 = _2640 * _2631;
                          float _2644 = log2(_2641);
                          float _2645 = log2(_2642);
                          float _2646 = log2(_2643);
                          float _2647 = _2644 * 78.84375f;
                          float _2648 = _2645 * 78.84375f;
                          float _2649 = _2646 * 78.84375f;
                          float _2650 = exp2(_2647);
                          float _2651 = exp2(_2648);
                          float _2652 = exp2(_2649);
                          _2790 = _2650;
                          _2791 = _2651;
                          _2792 = _2652;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2654 = (_1368 == 7);
          if (_2654) {
            float _2657 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2658 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2659 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2661 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2662 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2663 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2665 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2666 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2667 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2668 = _2657 * _1350;
            float _2669 = mad(_2658, _1351, _2668);
            float _2670 = mad(_2659, _1352, _2669);
            float _2671 = _2661 * _1350;
            float _2672 = mad(_2662, _1351, _2671);
            float _2673 = mad(_2663, _1352, _2672);
            float _2674 = _2665 * _1350;
            float _2675 = mad(_2666, _1351, _2674);
            float _2676 = mad(_2667, _1352, _2675);
            float _2677 = _2670 * _51;
            float _2678 = mad(_52, _2673, _2677);
            float _2679 = mad(_53, _2676, _2678);
            float _2680 = _2670 * _54;
            float _2681 = mad(_55, _2673, _2680);
            float _2682 = mad(_56, _2676, _2681);
            float _2683 = _2670 * _57;
            float _2684 = mad(_58, _2673, _2683);
            float _2685 = mad(_59, _2676, _2684);
            float _2686 = _2679 * 9.999999747378752e-05f;
            float _2687 = _2682 * 9.999999747378752e-05f;
            float _2688 = _2685 * 9.999999747378752e-05f;
            float _2689 = log2(_2686);
            float _2690 = log2(_2687);
            float _2691 = log2(_2688);
            float _2692 = _2689 * 0.1593017578125f;
            float _2693 = _2690 * 0.1593017578125f;
            float _2694 = _2691 * 0.1593017578125f;
            float _2695 = exp2(_2692);
            float _2696 = exp2(_2693);
            float _2697 = exp2(_2694);
            float _2698 = _2695 * 18.8515625f;
            float _2699 = _2696 * 18.8515625f;
            float _2700 = _2697 * 18.8515625f;
            float _2701 = _2698 + 0.8359375f;
            float _2702 = _2699 + 0.8359375f;
            float _2703 = _2700 + 0.8359375f;
            float _2704 = _2695 * 18.6875f;
            float _2705 = _2696 * 18.6875f;
            float _2706 = _2697 * 18.6875f;
            float _2707 = _2704 + 1.0f;
            float _2708 = _2705 + 1.0f;
            float _2709 = _2706 + 1.0f;
            float _2710 = 1.0f / _2707;
            float _2711 = 1.0f / _2708;
            float _2712 = 1.0f / _2709;
            float _2713 = _2710 * _2701;
            float _2714 = _2711 * _2702;
            float _2715 = _2712 * _2703;
            float _2716 = log2(_2713);
            float _2717 = log2(_2714);
            float _2718 = log2(_2715);
            float _2719 = _2716 * 78.84375f;
            float _2720 = _2717 * 78.84375f;
            float _2721 = _2718 * 78.84375f;
            float _2722 = exp2(_2719);
            float _2723 = exp2(_2720);
            float _2724 = exp2(_2721);
            _2790 = _2722;
            _2791 = _2723;
            _2792 = _2724;
          } else {
            bool _2726 = (_1368 == 8);
            _2790 = _1350;
            _2791 = _1351;
            _2792 = _1352;
            if (!_2726) {
              bool _2728 = (_1368 == 9);
              float _2730 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2731 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2732 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2734 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2735 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2736 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2738 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2739 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2740 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2728) {
                float _2742 = _2730 * _1338;
                float _2743 = mad(_2731, _1339, _2742);
                float _2744 = mad(_2732, _1340, _2743);
                float _2745 = _2734 * _1338;
                float _2746 = mad(_2735, _1339, _2745);
                float _2747 = mad(_2736, _1340, _2746);
                float _2748 = _2738 * _1338;
                float _2749 = mad(_2739, _1339, _2748);
                float _2750 = mad(_2740, _1340, _2749);
                float _2751 = _2744 * _51;
                float _2752 = mad(_52, _2747, _2751);
                float _2753 = mad(_53, _2750, _2752);
                float _2754 = _2744 * _54;
                float _2755 = mad(_55, _2747, _2754);
                float _2756 = mad(_56, _2750, _2755);
                float _2757 = _2744 * _57;
                float _2758 = mad(_58, _2747, _2757);
                float _2759 = mad(_59, _2750, _2758);
                _2790 = _2753;
                _2791 = _2756;
                _2792 = _2759;
              } else {
                float _2761 = _2730 * _1364;
                float _2762 = mad(_2731, _1365, _2761);
                float _2763 = mad(_2732, _1366, _2762);
                float _2764 = _2734 * _1364;
                float _2765 = mad(_2735, _1365, _2764);
                float _2766 = mad(_2736, _1366, _2765);
                float _2767 = _2738 * _1364;
                float _2768 = mad(_2739, _1365, _2767);
                float _2769 = mad(_2740, _1366, _2768);
                float _2770 = _2763 * _51;
                float _2771 = mad(_52, _2766, _2770);
                float _2772 = mad(_53, _2769, _2771);
                float _2773 = _2763 * _54;
                float _2774 = mad(_55, _2766, _2773);
                float _2775 = mad(_56, _2769, _2774);
                float _2776 = _2763 * _57;
                float _2777 = mad(_58, _2766, _2776);
                float _2778 = mad(_59, _2769, _2777);
                float _2779 = _RootShaderParameters_040z;
                float _2780 = log2(_2772);
                float _2781 = log2(_2775);
                float _2782 = log2(_2778);
                float _2783 = _2780 * _2779;
                float _2784 = _2781 * _2779;
                float _2785 = _2782 * _2779;
                float _2786 = exp2(_2783);
                float _2787 = exp2(_2784);
                float _2788 = exp2(_2785);
                _2790 = _2786;
                _2791 = _2787;
                _2792 = _2788;
              }
            }
          }
        }
      }
    }
  }
  float _2793 = _2790 * 0.9523810148239136f;
  float _2794 = _2791 * 0.9523810148239136f;
  float _2795 = _2792 * 0.9523810148239136f;
  // _2796 = _1;
  RWOutputTexture[int3(_10, _11, _12)] = float4(_2793, _2794, _2795, 0.0f);
}
