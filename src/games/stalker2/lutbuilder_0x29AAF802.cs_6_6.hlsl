#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035x : packoffset(c035.x);
  float _RootShaderParameters_035y : packoffset(c035.y);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  uint _RootShaderParameters_038z : packoffset(c038.z);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_000x : packoffset(c000.x);
  float UniformBufferConstants_WorkingColorSpace_000y : packoffset(c000.y);
  float UniformBufferConstants_WorkingColorSpace_000z : packoffset(c000.z);
  float UniformBufferConstants_WorkingColorSpace_001x : packoffset(c001.x);
  float UniformBufferConstants_WorkingColorSpace_001y : packoffset(c001.y);
  float UniformBufferConstants_WorkingColorSpace_001z : packoffset(c001.z);
  float UniformBufferConstants_WorkingColorSpace_002x : packoffset(c002.x);
  float UniformBufferConstants_WorkingColorSpace_002y : packoffset(c002.y);
  float UniformBufferConstants_WorkingColorSpace_002z : packoffset(c002.z);
  float UniformBufferConstants_WorkingColorSpace_004x : packoffset(c004.x);
  float UniformBufferConstants_WorkingColorSpace_004y : packoffset(c004.y);
  float UniformBufferConstants_WorkingColorSpace_004z : packoffset(c004.z);
  float UniformBufferConstants_WorkingColorSpace_005x : packoffset(c005.x);
  float UniformBufferConstants_WorkingColorSpace_005y : packoffset(c005.y);
  float UniformBufferConstants_WorkingColorSpace_005z : packoffset(c005.z);
  float UniformBufferConstants_WorkingColorSpace_006x : packoffset(c006.x);
  float UniformBufferConstants_WorkingColorSpace_006y : packoffset(c006.y);
  float UniformBufferConstants_WorkingColorSpace_006z : packoffset(c006.z);
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_1;
  // SamplerState _3 = Samplers_1;
  // cbuffer _4 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _5 = _RootShaderParameters;
  // _6 = _4;
  // _7 = _5;
  float _11[6];
  float _12[6];
  float _13[6];
  float _14[6];
  float _15 = float(_8);
  float _16 = float(_9);
  float _17 = _15 + 0.5f;
  float _18 = _16 + 0.5f;
  float _20 = _RootShaderParameters_042x;
  float _21 = _RootShaderParameters_042y;
  float _22 = _20 * _17;
  float _23 = _21 * _18;
  float _24 = _22 + -0.015625f;
  float _25 = _23 + -0.015625f;
  float _26 = _24 * 1.0322580337524414f;
  float _27 = _25 * 1.0322580337524414f;
  float _28 = float(_10);
  float _29 = _28 * 0.032258063554763794f;
  uint _31 = _RootShaderParameters_041x;
  bool _32 = (_31 == 1);
  float _49 = 1.379158854484558f;
  float _50 = -0.3088507056236267f;
  float _51 = -0.07034677267074585f;
  float _52 = -0.06933528929948807f;
  float _53 = 1.0822921991348267f;
  float _54 = -0.012962047010660172f;
  float _55 = -0.002159259282052517f;
  float _56 = -0.045465391129255295f;
  float _57 = 1.0477596521377563f;
  float _115;
  float _116;
  float _117;
  float _166;
  float _895;
  float _931;
  float _942;
  float _1006;
  float _1185;
  float _1196;
  float _1207;
  float _1378;
  float _1379;
  float _1380;
  float _1391;
  float _1402;
  float _1584;
  float _1620;
  float _1631;
  float _1670;
  float _1780;
  float _1854;
  float _1928;
  float _2007;
  float _2008;
  float _2009;
  float _2160;
  float _2196;
  float _2207;
  float _2246;
  float _2356;
  float _2430;
  float _2504;
  float _2583;
  float _2584;
  float _2585;
  float _2762;
  float _2763;
  float _2764;
  if (!_32) {
    bool _34 = (_31 == 2);
    _49 = 1.02579927444458f;
    _50 = -0.020052503794431686f;
    _51 = -0.0057713985443115234f;
    _52 = -0.0022350111976265907f;
    _53 = 1.0045825242996216f;
    _54 = -0.002352306619286537f;
    _55 = -0.005014004185795784f;
    _56 = -0.025293385609984398f;
    _57 = 1.0304402112960815f;
    if (!_34) {
      bool _36 = (_31 == 3);
      _49 = 0.6954522132873535f;
      _50 = 0.14067870378494263f;
      _51 = 0.16386906802654266f;
      _52 = 0.044794563204050064f;
      _53 = 0.8596711158752441f;
      _54 = 0.0955343171954155f;
      _55 = -0.005525882821530104f;
      _56 = 0.004025210160762072f;
      _57 = 1.0015007257461548f;
      if (!_36) {
        bool _38 = (_31 == 4);
        float _39 = _38 ? 1.0f : 1.7050515413284302f;
        float _40 = _38 ? 0.0f : -0.6217905879020691f;
        float _41 = _38 ? 0.0f : -0.0832584798336029f;
        float _42 = _38 ? 0.0f : -0.13025718927383423f;
        float _43 = _38 ? 1.0f : 1.1408027410507202f;
        float _44 = _38 ? 0.0f : -0.010548528283834457f;
        float _45 = _38 ? 0.0f : -0.024003278464078903f;
        float _46 = _38 ? 0.0f : -0.1289687603712082f;
        float _47 = _38 ? 1.0f : 1.152971863746643f;
        _49 = _39;
        _50 = _40;
        _51 = _41;
        _52 = _42;
        _53 = _43;
        _54 = _44;
        _55 = _45;
        _56 = _46;
        _57 = _47;
      }
    }
  }
  uint _59 = _RootShaderParameters_040w;
  bool _60 = (_59 > 2);
  if (_60) {
    float _62 = log2(_26);
    float _63 = log2(_27);
    float _64 = log2(_29);
    float _65 = _62 * 0.012683313339948654f;
    float _66 = _63 * 0.012683313339948654f;
    float _67 = _64 * 0.012683313339948654f;
    float _68 = exp2(_65);
    float _69 = exp2(_66);
    float _70 = exp2(_67);
    float _71 = _68 + -0.8359375f;
    float _72 = _69 + -0.8359375f;
    float _73 = _70 + -0.8359375f;
    float _74 = max(0.0f, _71);
    float _75 = max(0.0f, _72);
    float _76 = max(0.0f, _73);
    float _77 = _68 * 18.6875f;
    float _78 = _69 * 18.6875f;
    float _79 = _70 * 18.6875f;
    float _80 = 18.8515625f - _77;
    float _81 = 18.8515625f - _78;
    float _82 = 18.8515625f - _79;
    float _83 = _74 / _80;
    float _84 = _75 / _81;
    float _85 = _76 / _82;
    float _86 = log2(_83);
    float _87 = log2(_84);
    float _88 = log2(_85);
    float _89 = _86 * 6.277394771575928f;
    float _90 = _87 * 6.277394771575928f;
    float _91 = _88 * 6.277394771575928f;
    float _92 = exp2(_89);
    float _93 = exp2(_90);
    float _94 = exp2(_91);
    float _95 = _92 * 100.0f;
    float _96 = _93 * 100.0f;
    float _97 = _94 * 100.0f;
    _115 = _95;
    _116 = _96;
    _117 = _97;
  } else {
    float _99 = _24 * 14.45161247253418f;
    float _100 = _99 + -6.07624626159668f;
    float _101 = _25 * 14.45161247253418f;
    float _102 = _101 + -6.07624626159668f;
    float _103 = _28 * 0.4516128897666931f;
    float _104 = _103 + -6.07624626159668f;
    float _105 = exp2(_100);
    float _106 = exp2(_102);
    float _107 = exp2(_104);
    float _108 = _105 * 0.18000000715255737f;
    float _109 = _106 * 0.18000000715255737f;
    float _110 = _107 * 0.18000000715255737f;
    float _111 = _108 + -0.002667719265446067f;
    float _112 = _109 + -0.002667719265446067f;
    float _113 = _110 + -0.002667719265446067f;
    _115 = _111;
    _116 = _112;
    _117 = _113;
  }
  float3 input_color = float3(_115, _116, _117);  // CustomEdit

  float _119 = UniformBufferConstants_WorkingColorSpace_004x;
  float _120 = UniformBufferConstants_WorkingColorSpace_004y;
  float _121 = UniformBufferConstants_WorkingColorSpace_004z;
  float _123 = UniformBufferConstants_WorkingColorSpace_005x;
  float _124 = UniformBufferConstants_WorkingColorSpace_005y;
  float _125 = UniformBufferConstants_WorkingColorSpace_005z;
  float _127 = UniformBufferConstants_WorkingColorSpace_006x;
  float _128 = UniformBufferConstants_WorkingColorSpace_006y;
  float _129 = UniformBufferConstants_WorkingColorSpace_006z;
  float _131 = UniformBufferConstants_WorkingColorSpace_000x;
  float _132 = UniformBufferConstants_WorkingColorSpace_000y;
  float _133 = UniformBufferConstants_WorkingColorSpace_000z;
  float _135 = UniformBufferConstants_WorkingColorSpace_001x;
  float _136 = UniformBufferConstants_WorkingColorSpace_001y;
  float _137 = UniformBufferConstants_WorkingColorSpace_001z;
  float _139 = UniformBufferConstants_WorkingColorSpace_002x;
  float _140 = UniformBufferConstants_WorkingColorSpace_002y;
  float _141 = UniformBufferConstants_WorkingColorSpace_002z;
  uint _143 = _RootShaderParameters_038z;
  bool _144 = (_143 != 0);
  float _146 = _RootShaderParameters_035y;
  float _147 = _RootShaderParameters_035x;
  float _148 = _147 * 1.0005563497543335f;
  float _149 = 0.9994439482688904f / _147;
  bool _150 = !(_148 <= 7000.0f);
  if (!_150) {
    float _152 = _149 * 4607000064.0f;
    float _153 = 2967800.0f - _152;
    float _154 = _153 * _149;
    float _155 = _154 + 99.11000061035156f;
    float _156 = _155 * _149;
    float _157 = _156 + 0.24406300485134125f;
    _166 = _157;
  } else {
    float _159 = _149 * 2006400000.0f;
    float _160 = 1901800.0f - _159;
    float _161 = _160 * _149;
    float _162 = _161 + 247.47999572753906f;
    float _163 = _162 * _149;
    float _164 = _163 + 0.23703999817371368f;
    _166 = _164;
  }
  float _167 = _166 * _166;
  float _168 = _167 * 3.0f;
  float _169 = _166 * 2.869999885559082f;
  float _170 = _169 + -0.2750000059604645f;
  float _171 = _170 - _168;
  float _172 = _147 * 1.2864121856637212e-07f;
  float _173 = _172 + 0.00015411825734190643f;
  float _174 = _173 * _147;
  float _175 = _174 + 0.8601177334785461f;
  float _176 = _147 * 7.081451371959702e-07f;
  float _177 = _176 + 0.0008424202096648514f;
  float _178 = _177 * _147;
  float _179 = _178 + 1.0f;
  float _180 = _175 / _179;
  float _181 = _147 * 4.204816761443908e-08f;
  float _182 = _181 + 4.228062607580796e-05f;
  float _183 = _182 * _147;
  float _184 = _183 + 0.31739872694015503f;
  float _185 = _147 * 2.8974181986995973e-05f;
  float _186 = 1.0f - _185;
  float _187 = _147 * _147;
  float _188 = _187 * 1.6145605741257896e-07f;
  float _189 = _186 + _188;
  float _190 = _184 / _189;
  float _191 = _180 * 3.0f;
  float _192 = _180 * 2.0f;
  float _193 = _190 * 8.0f;
  float _194 = _192 + 4.0f;
  float _195 = _194 - _193;
  float _196 = _191 / _195;
  float _197 = _190 * 2.0f;
  float _198 = _197 / _195;
  bool _199 = (_147 < 4000.0f);
  float _200 = _199 ? _196 : _166;
  float _201 = _199 ? _198 : _171;
  float _202 = _147 * 1916156.25f;
  float _203 = -1137581184.0f - _202;
  float _204 = _187 * 1.5317699909210205f;
  float _205 = _203 - _204;
  float _206 = _147 + 1189.6199951171875f;
  float _207 = _206 * _147;
  float _208 = _207 + 1412139.875f;
  float _209 = _208 * _208;
  float _210 = _205 / _209;
  float _211 = _147 * 705674.0f;
  float _212 = 1974715392.0f - _211;
  float _213 = _187 * 308.60699462890625f;
  float _214 = _212 - _213;
  float _215 = _147 * 179.45599365234375f;
  float _216 = 6193636.0f - _215;
  float _217 = _216 + _187;
  float _218 = _217 * _217;
  float _219 = _214 / _218;
  float _220 = dot(float2(_210, _219), float2(_210, _219));
  float _221 = rsqrt(_220);
  float _222 = _146 * 0.05000000074505806f;
  float _223 = _222 * _219;
  float _224 = _223 * _221;
  float _225 = _224 + _180;
  float _226 = _222 * _210;
  float _227 = _226 * _221;
  float _228 = _190 - _227;
  float _229 = _225 * 3.0f;
  float _230 = _225 * 2.0f;
  float _231 = _228 * 8.0f;
  float _232 = 4.0f - _231;
  float _233 = _232 + _230;
  float _234 = _229 / _233;
  float _235 = _228 * 2.0f;
  float _236 = _235 / _233;
  float _237 = _234 - _196;
  float _238 = _236 - _198;
  float _239 = _237 + _200;
  float _240 = _238 + _201;
  float _241 = _144 ? _239 : 0.3127000033855438f;
  float _242 = _144 ? _240 : 0.32899999618530273f;
  float _243 = _144 ? 0.3127000033855438f : _239;
  float _244 = _144 ? 0.32899999618530273f : _240;
  float _245 = max(_242, 1.000000013351432e-10f);
  float _246 = _241 / _245;
  float _247 = 1.0f - _241;
  float _248 = _247 - _242;
  float _249 = _248 / _245;
  float _250 = max(_244, 1.000000013351432e-10f);
  float _251 = _243 / _250;
  float _252 = 1.0f - _243;
  float _253 = _252 - _244;
  float _254 = _253 / _250;
  float _255 = _246 * 0.8950999975204468f;
  float _256 = _255 + 0.266400009393692f;
  float _257 = mad(-0.16140000522136688f, _249, _256);
  float _258 = _246 * 0.7501999735832214f;
  float _259 = 1.7135000228881836f - _258;
  float _260 = mad(0.03669999912381172f, _249, _259);
  float _261 = _246 * 0.03889999911189079f;
  float _262 = _261 + -0.06849999725818634f;
  float _263 = mad(1.0296000242233276f, _249, _262);
  float _264 = _251 * 0.8950999975204468f;
  float _265 = _264 + 0.266400009393692f;
  float _266 = mad(-0.16140000522136688f, _254, _265);
  float _267 = _251 * 0.7501999735832214f;
  float _268 = 1.7135000228881836f - _267;
  float _269 = mad(0.03669999912381172f, _254, _268);
  float _270 = _251 * 0.03889999911189079f;
  float _271 = _270 + -0.06849999725818634f;
  float _272 = mad(1.0296000242233276f, _254, _271);
  float _273 = _266 / _257;
  float _274 = _269 / _260;
  float _275 = _272 / _263;
  float _276 = mad(_274, -0.7501999735832214f, 0.0f);
  float _277 = mad(_274, 1.7135000228881836f, 0.0f);
  float _278 = mad(_274, 0.03669999912381172f, -0.0f);
  float _279 = mad(_275, 0.03889999911189079f, 0.0f);
  float _280 = mad(_275, -0.06849999725818634f, 0.0f);
  float _281 = mad(_275, 1.0296000242233276f, 0.0f);
  float _282 = _273 * 0.883457362651825f;
  float _283 = mad(-0.1470542997121811f, _276, _282);
  float _284 = mad(0.1599626988172531f, _279, _283);
  float _285 = _273 * 0.26293492317199707f;
  float _286 = mad(-0.1470542997121811f, _277, _285);
  float _287 = mad(0.1599626988172531f, _280, _286);
  float _288 = _273 * -0.15930065512657166f;
  float _289 = mad(-0.1470542997121811f, _278, _288);
  float _290 = mad(0.1599626988172531f, _281, _289);
  float _291 = _273 * 0.38695648312568665f;
  float _292 = mad(0.5183603167533875f, _276, _291);
  float _293 = mad(0.04929120093584061f, _279, _292);
  float _294 = _273 * 0.11516613513231277f;
  float _295 = mad(0.5183603167533875f, _277, _294);
  float _296 = mad(0.04929120093584061f, _280, _295);
  float _297 = _273 * -0.0697740763425827f;
  float _298 = mad(0.5183603167533875f, _278, _297);
  float _299 = mad(0.04929120093584061f, _281, _298);
  float _300 = _273 * -0.007634039502590895f;
  float _301 = mad(0.04004279896616936f, _276, _300);
  float _302 = mad(0.9684867262840271f, _279, _301);
  float _303 = _273 * -0.0022720457054674625f;
  float _304 = mad(0.04004279896616936f, _277, _303);
  float _305 = mad(0.9684867262840271f, _280, _304);
  float _306 = _273 * 0.0013765322510153055f;
  float _307 = mad(0.04004279896616936f, _278, _306);
  float _308 = mad(0.9684867262840271f, _281, _307);
  float _309 = _284 * _131;
  float _310 = mad(_287, _135, _309);
  float _311 = mad(_290, _139, _310);
  float _312 = _284 * _132;
  float _313 = mad(_287, _136, _312);
  float _314 = mad(_290, _140, _313);
  float _315 = _284 * _133;
  float _316 = mad(_287, _137, _315);
  float _317 = mad(_290, _141, _316);
  float _318 = _293 * _131;
  float _319 = mad(_296, _135, _318);
  float _320 = mad(_299, _139, _319);
  float _321 = _293 * _132;
  float _322 = mad(_296, _136, _321);
  float _323 = mad(_299, _140, _322);
  float _324 = _293 * _133;
  float _325 = mad(_296, _137, _324);
  float _326 = mad(_299, _141, _325);
  float _327 = _302 * _131;
  float _328 = mad(_305, _135, _327);
  float _329 = mad(_308, _139, _328);
  float _330 = _302 * _132;
  float _331 = mad(_305, _136, _330);
  float _332 = mad(_308, _140, _331);
  float _333 = _302 * _133;
  float _334 = mad(_305, _137, _333);
  float _335 = mad(_308, _141, _334);
  float _336 = _311 * _119;
  float _337 = mad(_120, _320, _336);
  float _338 = mad(_121, _329, _337);
  float _339 = _314 * _119;
  float _340 = mad(_120, _323, _339);
  float _341 = mad(_121, _332, _340);
  float _342 = _317 * _119;
  float _343 = mad(_120, _326, _342);
  float _344 = mad(_121, _335, _343);
  float _345 = _311 * _123;
  float _346 = mad(_124, _320, _345);
  float _347 = mad(_125, _329, _346);
  float _348 = _314 * _123;
  float _349 = mad(_124, _323, _348);
  float _350 = mad(_125, _332, _349);
  float _351 = _317 * _123;
  float _352 = mad(_124, _326, _351);
  float _353 = mad(_125, _335, _352);
  float _354 = _311 * _127;
  float _355 = mad(_128, _320, _354);
  float _356 = mad(_129, _329, _355);
  float _357 = _314 * _127;
  float _358 = mad(_128, _323, _357);
  float _359 = mad(_129, _332, _358);
  float _360 = _317 * _127;
  float _361 = mad(_128, _326, _360);
  float _362 = mad(_129, _335, _361);
  float _363 = _338 * _115;
  float _364 = mad(_341, _116, _363);
  float _365 = mad(_344, _117, _364);
  float _366 = _347 * _115;
  float _367 = mad(_350, _116, _366);
  float _368 = mad(_353, _117, _367);
  float _369 = _356 * _115;
  float _370 = mad(_359, _116, _369);
  float _371 = mad(_362, _117, _370);
  float _373 = UniformBufferConstants_WorkingColorSpace_008x;
  float _374 = UniformBufferConstants_WorkingColorSpace_008y;
  float _375 = UniformBufferConstants_WorkingColorSpace_008z;
  float _377 = UniformBufferConstants_WorkingColorSpace_009x;
  float _378 = UniformBufferConstants_WorkingColorSpace_009y;
  float _379 = UniformBufferConstants_WorkingColorSpace_009z;
  float _381 = UniformBufferConstants_WorkingColorSpace_010x;
  float _382 = UniformBufferConstants_WorkingColorSpace_010y;
  float _383 = UniformBufferConstants_WorkingColorSpace_010z;
  float _384 = _373 * _365;
  float _385 = mad(_374, _368, _384);
  float _386 = mad(_375, _371, _385);
  float _387 = _377 * _365;
  float _388 = mad(_378, _368, _387);
  float _389 = mad(_379, _371, _388);
  float _390 = _381 * _365;
  float _391 = mad(_382, _368, _390);
  float _392 = mad(_383, _371, _391);
  float _393 = dot(float3(_386, _389, _392), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _394 = _386 / _393;
  float _395 = _389 / _393;
  float _396 = _392 / _393;
  float _397 = _394 + -1.0f;
  float _398 = _395 + -1.0f;
  float _399 = _396 + -1.0f;
  float _400 = dot(float3(_397, _398, _399), float3(_397, _398, _399));
  float _401 = _400 * -4.0f;
  float _402 = exp2(_401);
  float _403 = 1.0f - _402;
  float _405 = _RootShaderParameters_036z;
  float _406 = _393 * _393;
  float _407 = _406 * -4.0f;
  float _408 = _407 * _405;
  float _409 = exp2(_408);
  float _410 = 1.0f - _409;
  float _411 = _410 * _403;
  float _412 = _386 * 1.370412826538086f;
  float _413 = mad(-0.32929131388664246f, _389, _412);
  float _414 = mad(-0.06368283927440643f, _392, _413);
  float _415 = _386 * -0.08343426138162613f;
  float _416 = mad(1.0970908403396606f, _389, _415);
  float _417 = mad(-0.010861567221581936f, _392, _416);
  float _418 = _386 * -0.02579325996339321f;
  float _419 = mad(-0.09862564504146576f, _389, _418);
  float _420 = mad(1.203694462776184f, _392, _419);
  float _421 = _414 - _386;
  float _422 = _417 - _389;
  float _423 = _420 - _392;
  float _424 = _421 * _411;
  float _425 = _422 * _411;
  float _426 = _423 * _411;
  float _427 = _424 + _386;
  float _428 = _425 + _389;
  float _429 = _426 + _392;
  float _430 = dot(float3(_427, _428, _429), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _432 = _RootShaderParameters_024x;
  float _433 = _RootShaderParameters_024y;
  float _434 = _RootShaderParameters_024z;
  float _435 = _RootShaderParameters_024w;
  float _437 = _RootShaderParameters_019x;
  float _438 = _RootShaderParameters_019y;
  float _439 = _RootShaderParameters_019z;
  float _440 = _RootShaderParameters_019w;
  float _441 = _437 + _432;
  float _442 = _438 + _433;
  float _443 = _439 + _434;
  float _444 = _440 + _435;
  float _446 = _RootShaderParameters_023x;
  float _447 = _RootShaderParameters_023y;
  float _448 = _RootShaderParameters_023z;
  float _449 = _RootShaderParameters_023w;
  float _451 = _RootShaderParameters_018x;
  float _452 = _RootShaderParameters_018y;
  float _453 = _RootShaderParameters_018z;
  float _454 = _RootShaderParameters_018w;
  float _455 = _451 * _446;
  float _456 = _452 * _447;
  float _457 = _453 * _448;
  float _458 = _454 * _449;
  float _460 = _RootShaderParameters_022x;
  float _461 = _RootShaderParameters_022y;
  float _462 = _RootShaderParameters_022z;
  float _463 = _RootShaderParameters_022w;
  float _465 = _RootShaderParameters_017x;
  float _466 = _RootShaderParameters_017y;
  float _467 = _RootShaderParameters_017z;
  float _468 = _RootShaderParameters_017w;
  float _469 = _465 * _460;
  float _470 = _466 * _461;
  float _471 = _467 * _462;
  float _472 = _468 * _463;
  float _474 = _RootShaderParameters_021x;
  float _475 = _RootShaderParameters_021y;
  float _476 = _RootShaderParameters_021z;
  float _477 = _RootShaderParameters_021w;
  float _479 = _RootShaderParameters_016x;
  float _480 = _RootShaderParameters_016y;
  float _481 = _RootShaderParameters_016z;
  float _482 = _RootShaderParameters_016w;
  float _483 = _479 * _474;
  float _484 = _480 * _475;
  float _485 = _481 * _476;
  float _486 = _482 * _477;
  float _488 = _RootShaderParameters_020x;
  float _489 = _RootShaderParameters_020y;
  float _490 = _RootShaderParameters_020z;
  float _491 = _RootShaderParameters_020w;
  float _493 = _RootShaderParameters_015x;
  float _494 = _RootShaderParameters_015y;
  float _495 = _RootShaderParameters_015z;
  float _496 = _RootShaderParameters_015w;
  float _497 = _493 * _488;
  float _498 = _494 * _489;
  float _499 = _495 * _490;
  float _500 = _496 * _491;
  float _501 = _497 * _500;
  float _502 = _498 * _500;
  float _503 = _499 * _500;
  float _504 = _427 - _430;
  float _505 = _428 - _430;
  float _506 = _429 - _430;
  float _507 = _501 * _504;
  float _508 = _502 * _505;
  float _509 = _503 * _506;
  float _510 = _507 + _430;
  float _511 = _508 + _430;
  float _512 = _509 + _430;
  float _513 = max(0.0f, _510);
  float _514 = max(0.0f, _511);
  float _515 = max(0.0f, _512);
  float _516 = _483 * _486;
  float _517 = _484 * _486;
  float _518 = _485 * _486;
  float _519 = _513 * 5.55555534362793f;
  float _520 = _514 * 5.55555534362793f;
  float _521 = _515 * 5.55555534362793f;
  float _522 = log2(_519);
  float _523 = log2(_520);
  float _524 = log2(_521);
  float _525 = _516 * _522;
  float _526 = _517 * _523;
  float _527 = _518 * _524;
  float _528 = exp2(_525);
  float _529 = exp2(_526);
  float _530 = exp2(_527);
  float _531 = _528 * 0.18000000715255737f;
  float _532 = _529 * 0.18000000715255737f;
  float _533 = _530 * 0.18000000715255737f;
  float _534 = _469 * _472;
  float _535 = _470 * _472;
  float _536 = _471 * _472;
  float _537 = 1.0f / _534;
  float _538 = 1.0f / _535;
  float _539 = 1.0f / _536;
  float _540 = log2(_531);
  float _541 = log2(_532);
  float _542 = log2(_533);
  float _543 = _540 * _537;
  float _544 = _541 * _538;
  float _545 = _542 * _539;
  float _546 = exp2(_543);
  float _547 = exp2(_544);
  float _548 = exp2(_545);
  float _549 = _455 * _458;
  float _550 = _456 * _458;
  float _551 = _457 * _458;
  float _552 = _549 * _546;
  float _553 = _550 * _547;
  float _554 = _551 * _548;
  float _555 = _441 + _444;
  float _556 = _442 + _444;
  float _557 = _443 + _444;
  float _558 = _555 + _552;
  float _559 = _556 + _553;
  float _560 = _557 + _554;
  float _561 = _RootShaderParameters_035z;
  float _562 = _430 / _561;
  float _563 = saturate(_562);
  float _564 = _563 * 2.0f;
  float _565 = 3.0f - _564;
  float _566 = _563 * _563;
  float _567 = _566 * _565;
  float _568 = 1.0f - _567;
  float _570 = _RootShaderParameters_034x;
  float _571 = _RootShaderParameters_034y;
  float _572 = _RootShaderParameters_034z;
  float _573 = _RootShaderParameters_034w;
  float _574 = _437 + _570;
  float _575 = _438 + _571;
  float _576 = _439 + _572;
  float _577 = _440 + _573;
  float _579 = _RootShaderParameters_033x;
  float _580 = _RootShaderParameters_033y;
  float _581 = _RootShaderParameters_033z;
  float _582 = _RootShaderParameters_033w;
  float _583 = _451 * _579;
  float _584 = _452 * _580;
  float _585 = _453 * _581;
  float _586 = _454 * _582;
  float _588 = _RootShaderParameters_032x;
  float _589 = _RootShaderParameters_032y;
  float _590 = _RootShaderParameters_032z;
  float _591 = _RootShaderParameters_032w;
  float _592 = _465 * _588;
  float _593 = _466 * _589;
  float _594 = _467 * _590;
  float _595 = _468 * _591;
  float _597 = _RootShaderParameters_031x;
  float _598 = _RootShaderParameters_031y;
  float _599 = _RootShaderParameters_031z;
  float _600 = _RootShaderParameters_031w;
  float _601 = _479 * _597;
  float _602 = _480 * _598;
  float _603 = _481 * _599;
  float _604 = _482 * _600;
  float _606 = _RootShaderParameters_030x;
  float _607 = _RootShaderParameters_030y;
  float _608 = _RootShaderParameters_030z;
  float _609 = _RootShaderParameters_030w;
  float _610 = _493 * _606;
  float _611 = _494 * _607;
  float _612 = _495 * _608;
  float _613 = _496 * _609;
  float _614 = _610 * _613;
  float _615 = _611 * _613;
  float _616 = _612 * _613;
  float _617 = _614 * _504;
  float _618 = _615 * _505;
  float _619 = _616 * _506;
  float _620 = _617 + _430;
  float _621 = _618 + _430;
  float _622 = _619 + _430;
  float _623 = max(0.0f, _620);
  float _624 = max(0.0f, _621);
  float _625 = max(0.0f, _622);
  float _626 = _601 * _604;
  float _627 = _602 * _604;
  float _628 = _603 * _604;
  float _629 = _623 * 5.55555534362793f;
  float _630 = _624 * 5.55555534362793f;
  float _631 = _625 * 5.55555534362793f;
  float _632 = log2(_629);
  float _633 = log2(_630);
  float _634 = log2(_631);
  float _635 = _626 * _632;
  float _636 = _627 * _633;
  float _637 = _628 * _634;
  float _638 = exp2(_635);
  float _639 = exp2(_636);
  float _640 = exp2(_637);
  float _641 = _638 * 0.18000000715255737f;
  float _642 = _639 * 0.18000000715255737f;
  float _643 = _640 * 0.18000000715255737f;
  float _644 = _592 * _595;
  float _645 = _593 * _595;
  float _646 = _594 * _595;
  float _647 = 1.0f / _644;
  float _648 = 1.0f / _645;
  float _649 = 1.0f / _646;
  float _650 = log2(_641);
  float _651 = log2(_642);
  float _652 = log2(_643);
  float _653 = _650 * _647;
  float _654 = _651 * _648;
  float _655 = _652 * _649;
  float _656 = exp2(_653);
  float _657 = exp2(_654);
  float _658 = exp2(_655);
  float _659 = _583 * _586;
  float _660 = _584 * _586;
  float _661 = _585 * _586;
  float _662 = _659 * _656;
  float _663 = _660 * _657;
  float _664 = _661 * _658;
  float _665 = _574 + _577;
  float _666 = _575 + _577;
  float _667 = _576 + _577;
  float _668 = _665 + _662;
  float _669 = _666 + _663;
  float _670 = _667 + _664;
  float _671 = _RootShaderParameters_036x;
  float _673 = _RootShaderParameters_035w;
  float _674 = _671 - _673;
  float _675 = _430 - _673;
  float _676 = _675 / _674;
  float _677 = saturate(_676);
  float _678 = _677 * 2.0f;
  float _679 = 3.0f - _678;
  float _680 = _677 * _677;
  float _681 = _680 * _679;
  float _683 = _RootShaderParameters_029x;
  float _684 = _RootShaderParameters_029y;
  float _685 = _RootShaderParameters_029z;
  float _686 = _RootShaderParameters_029w;
  float _687 = _437 + _683;
  float _688 = _438 + _684;
  float _689 = _439 + _685;
  float _690 = _440 + _686;
  float _692 = _RootShaderParameters_028x;
  float _693 = _RootShaderParameters_028y;
  float _694 = _RootShaderParameters_028z;
  float _695 = _RootShaderParameters_028w;
  float _696 = _451 * _692;
  float _697 = _452 * _693;
  float _698 = _453 * _694;
  float _699 = _454 * _695;
  float _701 = _RootShaderParameters_027x;
  float _702 = _RootShaderParameters_027y;
  float _703 = _RootShaderParameters_027z;
  float _704 = _RootShaderParameters_027w;
  float _705 = _465 * _701;
  float _706 = _466 * _702;
  float _707 = _467 * _703;
  float _708 = _468 * _704;
  float _710 = _RootShaderParameters_026x;
  float _711 = _RootShaderParameters_026y;
  float _712 = _RootShaderParameters_026z;
  float _713 = _RootShaderParameters_026w;
  float _714 = _479 * _710;
  float _715 = _480 * _711;
  float _716 = _481 * _712;
  float _717 = _482 * _713;
  float _719 = _RootShaderParameters_025x;
  float _720 = _RootShaderParameters_025y;
  float _721 = _RootShaderParameters_025z;
  float _722 = _RootShaderParameters_025w;
  float _723 = _493 * _719;
  float _724 = _494 * _720;
  float _725 = _495 * _721;
  float _726 = _496 * _722;
  float _727 = _723 * _726;
  float _728 = _724 * _726;
  float _729 = _725 * _726;
  float _730 = _727 * _504;
  float _731 = _728 * _505;
  float _732 = _729 * _506;
  float _733 = _730 + _430;
  float _734 = _731 + _430;
  float _735 = _732 + _430;
  float _736 = max(0.0f, _733);
  float _737 = max(0.0f, _734);
  float _738 = max(0.0f, _735);
  float _739 = _714 * _717;
  float _740 = _715 * _717;
  float _741 = _716 * _717;
  float _742 = _736 * 5.55555534362793f;
  float _743 = _737 * 5.55555534362793f;
  float _744 = _738 * 5.55555534362793f;
  float _745 = log2(_742);
  float _746 = log2(_743);
  float _747 = log2(_744);
  float _748 = _739 * _745;
  float _749 = _740 * _746;
  float _750 = _741 * _747;
  float _751 = exp2(_748);
  float _752 = exp2(_749);
  float _753 = exp2(_750);
  float _754 = _751 * 0.18000000715255737f;
  float _755 = _752 * 0.18000000715255737f;
  float _756 = _753 * 0.18000000715255737f;
  float _757 = _705 * _708;
  float _758 = _706 * _708;
  float _759 = _707 * _708;
  float _760 = 1.0f / _757;
  float _761 = 1.0f / _758;
  float _762 = 1.0f / _759;
  float _763 = log2(_754);
  float _764 = log2(_755);
  float _765 = log2(_756);
  float _766 = _763 * _760;
  float _767 = _764 * _761;
  float _768 = _765 * _762;
  float _769 = exp2(_766);
  float _770 = exp2(_767);
  float _771 = exp2(_768);
  float _772 = _696 * _699;
  float _773 = _697 * _699;
  float _774 = _698 * _699;
  float _775 = _772 * _769;
  float _776 = _773 * _770;
  float _777 = _774 * _771;
  float _778 = _687 + _690;
  float _779 = _688 + _690;
  float _780 = _689 + _690;
  float _781 = _778 + _775;
  float _782 = _779 + _776;
  float _783 = _780 + _777;
  float _784 = _567 - _681;
  float _785 = _568 * _558;
  float _786 = _568 * _559;
  float _787 = _568 * _560;
  float _788 = _781 * _784;
  float _789 = _782 * _784;
  float _790 = _783 * _784;
  float _791 = _681 * _668;
  float _792 = _681 * _669;
  float _793 = _681 * _670;
  float _794 = _791 + _785;
  float _795 = _794 + _788;
  float _796 = _792 + _786;
  float _797 = _796 + _789;
  float _798 = _793 + _787;
  float _799 = _798 + _790;
  float _801 = UniformBufferConstants_WorkingColorSpace_012x;
  float _802 = UniformBufferConstants_WorkingColorSpace_012y;
  float _803 = UniformBufferConstants_WorkingColorSpace_012z;
  float _805 = UniformBufferConstants_WorkingColorSpace_013x;
  float _806 = UniformBufferConstants_WorkingColorSpace_013y;
  float _807 = UniformBufferConstants_WorkingColorSpace_013z;
  float _809 = UniformBufferConstants_WorkingColorSpace_014x;
  float _810 = UniformBufferConstants_WorkingColorSpace_014y;
  float _811 = UniformBufferConstants_WorkingColorSpace_014z;
  float _812 = _795 * _801;
  float _813 = mad(_802, _797, _812);
  float _814 = mad(_803, _799, _813);
  float _815 = _805 * _795;
  float _816 = mad(_806, _797, _815);
  float _817 = mad(_807, _799, _816);
  float _818 = _809 * _795;
  float _819 = mad(_810, _797, _818);
  float _820 = mad(_811, _799, _819);
  float _821 = _RootShaderParameters_036y;
  float _822 = _795 * 0.9386394023895264f;
  float _823 = mad(-4.540197551250458e-09f, _797, _822);
  float _824 = mad(0.061360642313957214f, _799, _823);
  float _825 = _795 * 6.775371730327606e-08f;
  float _826 = mad(0.8307942152023315f, _797, _825);
  float _827 = mad(0.169205904006958f, _799, _826);
  float _828 = _795 * -9.313225746154785e-10f;
  float _829 = mad(-2.3283064365386963e-10f, _797, _828);
  float _830 = _824 - _795;
  float _831 = _827 - _797;
  float _832 = _830 * _821;
  float _833 = _831 * _821;
  float _834 = _829 * _821;
  float _835 = _832 + _795;
  float _836 = _833 + _797;
  float _837 = _834 + _799;
  float3 ap1_graded_color = float3(_835, _836, _837);  // CustomEdit

  float _838 = _835 * 0.6954522132873535f;
  float _839 = mad(0.14067868888378143f, _836, _838);
  float _840 = mad(0.16386905312538147f, _837, _839);
  float _841 = _835 * 0.044794581830501556f;
  float _842 = mad(0.8596711158752441f, _836, _841);
  float _843 = mad(0.0955343246459961f, _837, _842);
  float _844 = _835 * -0.005525882821530104f;
  float _845 = mad(0.004025210160762072f, _836, _844);
  float _846 = mad(1.0015007257461548f, _837, _845);
  float _847 = min(_840, _843);
  float _848 = min(_847, _846);
  float _849 = max(_840, _843);
  float _850 = max(_849, _846);
  float _851 = max(_850, 1.000000013351432e-10f);
  float _852 = max(_848, 1.000000013351432e-10f);
  float _853 = _851 - _852;
  float _854 = max(_850, 0.009999999776482582f);
  float _855 = _853 / _854;
  float _856 = _846 - _843;
  float _857 = _856 * _846;
  float _858 = _843 - _840;
  float _859 = _858 * _843;
  float _860 = _857 + _859;
  float _861 = _840 - _846;
  float _862 = _861 * _840;
  float _863 = _860 + _862;
  float _864 = sqrt(_863);
  float _865 = _864 * 1.75f;
  float _866 = _843 + _840;
  float _867 = _866 + _846;
  float _868 = _867 + _865;
  float _869 = _868 * 0.3333333432674408f;
  float _870 = _855 + -0.4000000059604645f;
  float _871 = _870 * 5.0f;
  float _872 = _870 * 2.5f;
  float _873 = abs(_872);
  float _874 = 1.0f - _873;
  float _875 = max(_874, 0.0f);
  bool _876 = (_871 > 0.0f);
  bool _877 = (_871 < 0.0f);
  int _878 = int(_876);
  int _879 = int(_877);
  int _880 = _878 - _879;
  float _881 = float(_880);
  float _882 = _875 * _875;
  float _883 = 1.0f - _882;
  float _884 = _881 * _883;
  float _885 = _884 + 1.0f;
  float _886 = _885 * 0.02500000037252903f;
  bool _887 = !(_869 <= 0.0533333346247673f);
  _895 = _886;
  if (_887) {
    bool _889 = !(_869 >= 0.1599999964237213f);
    _895 = 0.0f;
    if (_889) {
      float _891 = 0.23999999463558197f / _868;
      float _892 = _891 + -0.5f;
      float _893 = _892 * _886;
      _895 = _893;
    }
  }
  float _896 = _895 + 1.0f;
  float _897 = _896 * _840;
  float _898 = _896 * _843;
  float _899 = _896 * _846;
  bool _900 = (_897 == _898);
  bool _901 = (_898 == _899);
  bool _902 = _900 && _901;
  _931 = 0.0f;
  if (!_902) {
    float _904 = _897 * 2.0f;
    float _905 = _904 - _898;
    float _906 = _905 - _899;
    float _907 = _843 - _846;
    float _908 = _907 * 1.7320507764816284f;
    float _909 = _908 * _896;
    float _910 = _909 / _906;
    float _911 = atan(_910);
    float _912 = _911 + 3.1415927410125732f;
    float _913 = _911 + -3.1415927410125732f;
    bool _914 = (_906 < 0.0f);
    bool _915 = (_906 == 0.0f);
    bool _916 = (_909 >= 0.0f);
    bool _917 = (_909 < 0.0f);
    bool _918 = _916 && _914;
    float _919 = _918 ? _912 : _911;
    bool _920 = _917 && _914;
    float _921 = _920 ? _913 : _919;
    bool _922 = _917 && _915;
    bool _923 = _916 && _915;
    float _924 = _921 * 57.2957763671875f;
    float _925 = _922 ? -90.0f : _924;
    float _926 = _923 ? 90.0f : _925;
    bool _927 = (_926 < 0.0f);
    _931 = _926;
    if (_927) {
      float _929 = _926 + 360.0f;
      _931 = _929;
    }
  }
  float _932 = max(_931, 0.0f);
  float _933 = min(_932, 360.0f);
  bool _934 = (_933 < -180.0f);
  if (_934) {
    float _936 = _933 + 360.0f;
    _942 = _936;
  } else {
    bool _938 = (_933 > 180.0f);
    _942 = _933;
    if (_938) {
      float _940 = _933 + -360.0f;
      _942 = _940;
    }
  }
  float _943 = _942 * 0.014814814552664757f;
  float _944 = abs(_943);
  float _945 = 1.0f - _944;
  float _946 = saturate(_945);
  float _947 = _946 * 2.0f;
  float _948 = 3.0f - _947;
  float _949 = _946 * _946;
  float _950 = _949 * _948;
  float _951 = 0.029999999329447746f - _897;
  float _952 = _855 * 0.18000000715255737f;
  float _953 = _952 * _951;
  float _954 = _950 * _950;
  float _955 = _954 * _953;
  float _956 = _955 + _897;
  float _957 = _956 * 1.4514392614364624f;
  float _958 = mad(-0.2365107536315918f, _898, _957);
  float _959 = mad(-0.21492856740951538f, _899, _958);
  float _960 = _956 * -0.07655377686023712f;
  float _961 = mad(1.17622971534729f, _898, _960);
  float _962 = mad(-0.09967592358589172f, _899, _961);
  float _963 = _956 * 0.008316148072481155f;
  float _964 = mad(-0.006032449658960104f, _898, _963);
  float _965 = mad(0.9977163076400757f, _899, _964);
  float _966 = max(0.0f, _959);
  float _967 = max(0.0f, _962);
  float _968 = max(0.0f, _965);
  float _969 = dot(float3(_966, _967, _968), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _970 = _966 - _969;
  float _971 = _967 - _969;
  float _972 = _968 - _969;
  float _973 = _970 * 0.9599999785423279f;
  float _974 = _971 * 0.9599999785423279f;
  float _975 = _972 * 0.9599999785423279f;
  float _976 = _973 + _969;
  float _977 = _974 + _969;
  float _978 = _975 + _969;

  float3 ap1_aces_colored = float3(_976, _977, _978);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _980 = _RootShaderParameters_037w;
  float _981 = _980 + 1.0f;
  float _982 = _RootShaderParameters_037y;
  float _983 = _981 - _982;
  float _985 = _RootShaderParameters_038x;
  float _986 = _985 + 1.0f;
  float _987 = _RootShaderParameters_037z;
  float _988 = _986 - _987;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _989 = (_982 > 0.800000011920929f);
    float _990 = _RootShaderParameters_037x;
    if (_989) {
      float _992 = 0.8199999928474426f - _982;
      float _993 = _992 / _990;
      float _994 = _993 + -0.7447274923324585f;
      _1006 = _994;
    } else {
      float _996 = _980 + 0.18000000715255737f;
      float _997 = _996 / _983;
      float _998 = 2.0f - _997;
      float _999 = _997 / _998;
      float _1000 = log2(_999);
      float _1001 = _1000 * 0.3465735912322998f;
      float _1002 = _983 / _990;
      float _1003 = _1001 * _1002;
      float _1004 = -0.7447274923324585f - _1003;
      _1006 = _1004;
    }
    float _1007 = 1.0f - _982;
    float _1008 = _1007 / _990;
    float _1009 = _1008 - _1006;
    float _1010 = _987 / _990;
    float _1011 = _1010 - _1009;
    float _1012 = log2(_976);
    float _1013 = log2(_977);
    float _1014 = log2(_978);
    float _1015 = _1012 * 0.3010300099849701f;
    float _1016 = _1013 * 0.3010300099849701f;
    float _1017 = _1014 * 0.3010300099849701f;
    float _1018 = _1015 + _1009;
    float _1019 = _1016 + _1009;
    float _1020 = _1017 + _1009;
    float _1021 = _990 * _1018;
    float _1022 = _990 * _1019;
    float _1023 = _990 * _1020;
    float _1024 = _983 * 2.0f;
    float _1025 = _990 * -2.0f;
    float _1026 = _1025 / _983;
    float _1027 = _1015 - _1006;
    float _1028 = _1016 - _1006;
    float _1029 = _1017 - _1006;
    float _1030 = _1027 * 1.4426950216293335f;
    float _1031 = _1030 * _1026;
    float _1032 = _1028 * 1.4426950216293335f;
    float _1033 = _1032 * _1026;
    float _1034 = _1029 * 1.4426950216293335f;
    float _1035 = _1034 * _1026;
    float _1036 = exp2(_1031);
    float _1037 = exp2(_1033);
    float _1038 = exp2(_1035);
    float _1039 = _1036 + 1.0f;
    float _1040 = _1037 + 1.0f;
    float _1041 = _1038 + 1.0f;
    float _1042 = _1024 / _1039;
    float _1043 = _1024 / _1040;
    float _1044 = _1024 / _1041;
    float _1045 = _1042 - _980;
    float _1046 = _1043 - _980;
    float _1047 = _1044 - _980;
    float _1048 = _988 * 2.0f;
    float _1049 = _990 * 2.0f;
    float _1050 = _1049 / _988;
    float _1051 = _1015 - _1011;
    float _1052 = _1016 - _1011;
    float _1053 = _1017 - _1011;
    float _1054 = _1051 * 1.4426950216293335f;
    float _1055 = _1054 * _1050;
    float _1056 = _1052 * 1.4426950216293335f;
    float _1057 = _1056 * _1050;
    float _1058 = _1053 * 1.4426950216293335f;
    float _1059 = _1058 * _1050;
    float _1060 = exp2(_1055);
    float _1061 = exp2(_1057);
    float _1062 = exp2(_1059);
    float _1063 = _1060 + 1.0f;
    float _1064 = _1061 + 1.0f;
    float _1065 = _1062 + 1.0f;
    float _1066 = _1048 / _1063;
    float _1067 = _1048 / _1064;
    float _1068 = _1048 / _1065;
    float _1069 = _986 - _1066;
    float _1070 = _986 - _1067;
    float _1071 = _986 - _1068;
    bool _1072 = (_1015 < _1006);
    bool _1073 = (_1016 < _1006);
    bool _1074 = (_1017 < _1006);
    float _1075 = _1072 ? _1045 : _1021;
    float _1076 = _1073 ? _1046 : _1022;
    float _1077 = _1074 ? _1047 : _1023;
    bool _1078 = (_1015 > _1011);
    bool _1079 = (_1016 > _1011);
    bool _1080 = (_1017 > _1011);
    float _1081 = _1078 ? _1069 : _1021;
    float _1082 = _1079 ? _1070 : _1022;
    float _1083 = _1080 ? _1071 : _1023;
    float _1084 = _1011 - _1006;
    float _1085 = _1027 / _1084;
    float _1086 = _1028 / _1084;
    float _1087 = _1029 / _1084;
    float _1088 = saturate(_1085);
    float _1089 = saturate(_1086);
    float _1090 = saturate(_1087);
    bool _1091 = (_1011 < _1006);
    float _1092 = 1.0f - _1088;
    float _1093 = 1.0f - _1089;
    float _1094 = 1.0f - _1090;
    float _1095 = _1091 ? _1092 : _1088;
    float _1096 = _1091 ? _1093 : _1089;
    float _1097 = _1091 ? _1094 : _1090;
    float _1098 = _1095 * 2.0f;
    float _1099 = _1096 * 2.0f;
    float _1100 = _1097 * 2.0f;
    float _1101 = 3.0f - _1098;
    float _1102 = 3.0f - _1099;
    float _1103 = 3.0f - _1100;
    float _1104 = _1081 - _1075;
    float _1105 = _1082 - _1076;
    float _1106 = _1083 - _1077;
    float _1107 = _1095 * _1095;
    float _1108 = _1107 * _1104;
    float _1109 = _1108 * _1101;
    float _1110 = _1096 * _1096;
    float _1111 = _1110 * _1105;
    float _1112 = _1111 * _1102;
    float _1113 = _1097 * _1097;
    float _1114 = _1113 * _1106;
    float _1115 = _1114 * _1103;
    float _1116 = _1109 + _1075;
    float _1117 = _1112 + _1076;
    float _1118 = _1115 + _1077;
    float _1119 = dot(float3(_1116, _1117, _1118), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _1120 = _1116 - _1119;
    float _1121 = _1117 - _1119;
    float _1122 = _1118 - _1119;
    float _1123 = _1120 * 0.9300000071525574f;
    float _1124 = _1121 * 0.9300000071525574f;
    float _1125 = _1122 * 0.9300000071525574f;
    float _1126 = _1123 + _1119;
    float _1127 = _1124 + _1119;
    float _1128 = _1125 + _1119;
    float _1129 = max(0.0f, _1126);
    float _1130 = max(0.0f, _1127);
    float _1131 = max(0.0f, _1128);
    sdr_ap1_color = float3(_1129, _1130, _1131);
    // end of FilmToneMap
  }

  float _1132 = _RootShaderParameters_036w;
  /* float _1133 = _1129 - _835;
  float _1134 = _1130 - _836;
  float _1135 = _1131 - _837; */
  // CustomEdit
  float _1133 = sdr_ap1_color.r - _835;
  float _1134 = sdr_ap1_color.g - _836;
  float _1135 = sdr_ap1_color.b - _837;

  float _1136 = _1132 * _1133;
  float _1137 = _1132 * _1134;
  float _1138 = _1132 * _1135;
  float _1139 = _1136 + _835;
  float _1140 = _1137 + _836;
  float _1141 = _1138 + _837;
  float _1142 = _1139 * 1.065374732017517f;
  float _1143 = mad(1.451815478503704e-06f, _1140, _1142);
  float _1144 = mad(-0.06537103652954102f, _1141, _1143);
  float _1145 = _1139 * -2.57161445915699e-07f;
  float _1146 = mad(1.2036634683609009f, _1140, _1145);
  float _1147 = mad(-0.20366770029067993f, _1141, _1146);
  float _1148 = _1139 * 1.862645149230957e-08f;
  float _1149 = mad(2.0954757928848267e-08f, _1140, _1148);
  float _1150 = mad(0.9999996423721313f, _1141, _1149);
  float _1151 = _1144 - _1139;
  float _1152 = _1147 - _1140;
  float _1153 = _1150 - _1141;
  float _1154 = _1151 * _821;
  float _1155 = _1152 * _821;
  float _1156 = _1153 * _821;
  float _1157 = _1154 + _1139;
  float _1158 = _1155 + _1140;
  float _1159 = _1156 + _1141;
  float _1160 = _801 * _1157;
  float _1161 = mad(_802, _1158, _1160);
  float _1162 = mad(_803, _1159, _1161);
  float _1163 = _805 * _1157;
  float _1164 = mad(_806, _1158, _1163);
  float _1165 = mad(_807, _1159, _1164);
  float _1166 = _809 * _1157;
  float _1167 = mad(_810, _1158, _1166);
  float _1168 = mad(_811, _1159, _1167);
  float _1169 = max(0.0f, _1162);
  float _1170 = max(0.0f, _1165);
  float _1171 = max(0.0f, _1168);
  float3 lut_input_color = float3(_1169, _1170, _1171);  // CustomEdit
  float _1273;                                           // custom branch
  float _1274;                                           // custom branch
  float _1275;                                           // custom branch

  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1273 = post_lut_color.r;
    _1274 = post_lut_color.g;
    _1275 = post_lut_color.b;
  } else {
    float _1172 = saturate(_1169);
    float _1173 = saturate(_1170);
    float _1174 = saturate(_1171);
    bool _1175 = (_1172 < 0.0031306699384003878f);
    if (_1175) {
      float _1177 = _1172 * 12.920000076293945f;
      _1185 = _1177;
    } else {
      float _1179 = log2(_1172);
      float _1180 = _1179 * 0.4166666567325592f;
      float _1181 = exp2(_1180);
      float _1182 = _1181 * 1.0549999475479126f;
      float _1183 = _1182 + -0.054999999701976776f;
      _1185 = _1183;
    }
    bool _1186 = (_1173 < 0.0031306699384003878f);
    if (_1186) {
      float _1188 = _1173 * 12.920000076293945f;
      _1196 = _1188;
    } else {
      float _1190 = log2(_1173);
      float _1191 = _1190 * 0.4166666567325592f;
      float _1192 = exp2(_1191);
      float _1193 = _1192 * 1.0549999475479126f;
      float _1194 = _1193 + -0.054999999701976776f;
      _1196 = _1194;
    }
    bool _1197 = (_1174 < 0.0031306699384003878f);
    if (_1197) {
      float _1199 = _1174 * 12.920000076293945f;
      _1207 = _1199;
    } else {
      float _1201 = log2(_1174);
      float _1202 = _1201 * 0.4166666567325592f;
      float _1203 = exp2(_1202);
      float _1204 = _1203 * 1.0549999475479126f;
      float _1205 = _1204 + -0.054999999701976776f;
      _1207 = _1205;
    }
    float _1208 = _1185 * 0.9375f;
    float _1209 = _1196 * 0.9375f;
    float _1210 = _1208 + 0.03125f;
    float _1211 = _1209 + 0.03125f;
    float _1213 = _RootShaderParameters_005x;
    float _1214 = _1213 * _1185;
    float _1215 = _1213 * _1196;
    float _1216 = _1213 * _1207;
    float _1217 = _RootShaderParameters_005y;
    float _1218 = _1207 * 15.0f;
    float _1219 = floor(_1218);
    float _1220 = _1218 - _1219;
    float _1221 = _1210 + _1219;
    float _1222 = _1221 * 0.0625f;
    // _1223 = _2;
    // _1224 = _3;
    float4 _1225 = Textures_1.SampleLevel(Samplers_1, float2(_1222, _1211), 0.0f);
    float _1226 = _1225.x;
    float _1227 = _1225.y;
    float _1228 = _1225.z;
    float _1229 = _1222 + 0.0625f;
    float4 _1230 = Textures_1.SampleLevel(Samplers_1, float2(_1229, _1211), 0.0f);
    float _1231 = _1230.x;
    float _1232 = _1230.y;
    float _1233 = _1230.z;
    float _1234 = _1231 - _1226;
    float _1235 = _1232 - _1227;
    float _1236 = _1233 - _1228;
    float _1237 = _1234 * _1220;
    float _1238 = _1235 * _1220;
    float _1239 = _1236 * _1220;
    float _1240 = _1237 + _1226;
    float _1241 = _1238 + _1227;
    float _1242 = _1239 + _1228;
    float _1243 = _1240 * _1217;
    float _1244 = _1241 * _1217;
    float _1245 = _1242 * _1217;
    float _1246 = _1243 + _1214;
    float _1247 = _1244 + _1215;
    float _1248 = _1245 + _1216;
    float _1249 = max(6.103519990574569e-05f, _1246);
    float _1250 = max(6.103519990574569e-05f, _1247);
    float _1251 = max(6.103519990574569e-05f, _1248);
    float _1252 = _1249 * 0.07739938050508499f;
    float _1253 = _1250 * 0.07739938050508499f;
    float _1254 = _1251 * 0.07739938050508499f;
    float _1255 = _1249 * 0.9478672742843628f;
    float _1256 = _1250 * 0.9478672742843628f;
    float _1257 = _1251 * 0.9478672742843628f;
    float _1258 = _1255 + 0.05213269963860512f;
    float _1259 = _1256 + 0.05213269963860512f;
    float _1260 = _1257 + 0.05213269963860512f;
    float _1261 = log2(_1258);
    float _1262 = log2(_1259);
    float _1263 = log2(_1260);
    float _1264 = _1261 * 2.4000000953674316f;
    float _1265 = _1262 * 2.4000000953674316f;
    float _1266 = _1263 * 2.4000000953674316f;
    float _1267 = exp2(_1264);
    float _1268 = exp2(_1265);
    float _1269 = exp2(_1266);
    bool _1270 = (_1249 > 0.040449999272823334f);
    bool _1271 = (_1250 > 0.040449999272823334f);
    bool _1272 = (_1251 > 0.040449999272823334f);
    // CustomEdit
    /* float _1273 = _1270 ? _1267 : _1252;
  float _1274 = _1271 ? _1268 : _1253;
  float _1275 = _1272 ? _1269 : _1254; */
    _1273 = _1270 ? _1267 : _1252;
    _1274 = _1271 ? _1268 : _1253;
    _1275 = _1272 ? _1269 : _1254;
  }

  float _1277 = _RootShaderParameters_039x;
  float _1278 = _1277 * _1273;
  float _1279 = _1277 * _1274;
  float _1280 = _1277 * _1275;
  float _1281 = _RootShaderParameters_039y;
  float _1282 = _RootShaderParameters_039z;
  float _1283 = _1281 + _1278;
  float _1284 = _1283 * _1273;
  float _1285 = _1284 + _1282;
  float _1286 = _1281 + _1279;
  float _1287 = _1286 * _1274;
  float _1288 = _1287 + _1282;
  float _1289 = _1281 + _1280;
  float _1290 = _1289 * _1275;
  float _1291 = _1290 + _1282;
  float _1293 = _RootShaderParameters_013w;
  float _1294 = _RootShaderParameters_013x;
  float _1295 = _RootShaderParameters_013y;
  float _1296 = _RootShaderParameters_013z;
  float _1298 = _RootShaderParameters_014x;
  float _1299 = _RootShaderParameters_014y;
  float _1300 = _RootShaderParameters_014z;
  float _1301 = _1298 * _1285;
  float _1302 = _1299 * _1288;
  float _1303 = _1300 * _1291;
  float _1304 = _1294 - _1301;
  float _1305 = _1295 - _1302;
  float _1306 = _1296 - _1303;
  float _1307 = _1304 * _1293;
  float _1308 = _1305 * _1293;
  float _1309 = _1306 * _1293;
  float _1310 = _1307 + _1301;
  float _1311 = _1308 + _1302;
  float _1312 = _1309 + _1303;
  float _1313 = _1298 * _814;
  float _1314 = _1299 * _817;
  float _1315 = _1300 * _820;
  float _1316 = _1294 - _1313;
  float _1317 = _1295 - _1314;
  float _1318 = _1296 - _1315;
  float _1319 = _1316 * _1293;
  float _1320 = _1317 * _1293;
  float _1321 = _1318 * _1293;
  float _1322 = _1319 + _1313;
  float _1323 = _1320 + _1314;
  float _1324 = _1321 + _1315;
  float _1326 = _RootShaderParameters_040y;
  float _1327 = max(0.0f, _1310);
  float _1328 = max(0.0f, _1311);
  float _1329 = max(0.0f, _1312);
  float _1330 = log2(_1327);
  float _1331 = log2(_1328);
  float _1332 = log2(_1329);
  float _1333 = _1330 * _1326;
  float _1334 = _1331 * _1326;
  float _1335 = _1332 * _1326;
  float _1336 = exp2(_1333);
  float _1337 = exp2(_1334);
  float _1338 = exp2(_1335);

  // CustomEdit
  float3 film_graded_color = float3(_1336, _1337, _1338);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_8, _9, _10)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _1340 = _RootShaderParameters_040w;
  bool _1341 = (_1340 == 0);
  if (_1341) {
    uint _1344 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1345 = (_1344 == 0);
    _1378 = _1336;
    _1379 = _1337;
    _1380 = _1338;
    do {
      if (_1345) {
        float _1348 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1349 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1350 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1352 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1353 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1354 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1356 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1357 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1358 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1359 = _1348 * _1336;
        float _1360 = mad(_1349, _1337, _1359);
        float _1361 = mad(_1350, _1338, _1360);
        float _1362 = _1352 * _1336;
        float _1363 = mad(_1353, _1337, _1362);
        float _1364 = mad(_1354, _1338, _1363);
        float _1365 = _1356 * _1336;
        float _1366 = mad(_1357, _1337, _1365);
        float _1367 = mad(_1358, _1338, _1366);
        float _1368 = _1361 * _49;
        float _1369 = mad(_50, _1364, _1368);
        float _1370 = mad(_51, _1367, _1369);
        float _1371 = _1361 * _52;
        float _1372 = mad(_53, _1364, _1371);
        float _1373 = mad(_54, _1367, _1372);
        float _1374 = _1361 * _55;
        float _1375 = mad(_56, _1364, _1374);
        float _1376 = mad(_57, _1367, _1375);
        _1378 = _1370;
        _1379 = _1373;
        _1380 = _1376;
      }
      bool _1381 = (_1378 < 0.0031306699384003878f);
      do {
        if (_1381) {
          float _1383 = _1378 * 12.920000076293945f;
          _1391 = _1383;
        } else {
          float _1385 = log2(_1378);
          float _1386 = _1385 * 0.4166666567325592f;
          float _1387 = exp2(_1386);
          float _1388 = _1387 * 1.0549999475479126f;
          float _1389 = _1388 + -0.054999999701976776f;
          _1391 = _1389;
        }
        bool _1392 = (_1379 < 0.0031306699384003878f);
        do {
          if (_1392) {
            float _1394 = _1379 * 12.920000076293945f;
            _1402 = _1394;
          } else {
            float _1396 = log2(_1379);
            float _1397 = _1396 * 0.4166666567325592f;
            float _1398 = exp2(_1397);
            float _1399 = _1398 * 1.0549999475479126f;
            float _1400 = _1399 + -0.054999999701976776f;
            _1402 = _1400;
          }
          bool _1403 = (_1380 < 0.0031306699384003878f);
          if (_1403) {
            float _1405 = _1380 * 12.920000076293945f;
            _2762 = _1391;
            _2763 = _1402;
            _2764 = _1405;
          } else {
            float _1407 = log2(_1380);
            float _1408 = _1407 * 0.4166666567325592f;
            float _1409 = exp2(_1408);
            float _1410 = _1409 * 1.0549999475479126f;
            float _1411 = _1410 + -0.054999999701976776f;
            _2762 = _1391;
            _2763 = _1402;
            _2764 = _1411;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1413 = (_1340 == 1);
    if (_1413) {
      float _1416 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1417 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1418 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1420 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1421 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1422 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1424 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1425 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1426 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1427 = _1416 * _1336;
      float _1428 = mad(_1417, _1337, _1427);
      float _1429 = mad(_1418, _1338, _1428);
      float _1430 = _1420 * _1336;
      float _1431 = mad(_1421, _1337, _1430);
      float _1432 = mad(_1422, _1338, _1431);
      float _1433 = _1424 * _1336;
      float _1434 = mad(_1425, _1337, _1433);
      float _1435 = mad(_1426, _1338, _1434);
      float _1436 = _1429 * _49;
      float _1437 = mad(_50, _1432, _1436);
      float _1438 = mad(_51, _1435, _1437);
      float _1439 = _1429 * _52;
      float _1440 = mad(_53, _1432, _1439);
      float _1441 = mad(_54, _1435, _1440);
      float _1442 = _1429 * _55;
      float _1443 = mad(_56, _1432, _1442);
      float _1444 = mad(_57, _1435, _1443);
      float _1445 = max(6.103519990574569e-05f, _1438);
      float _1446 = max(6.103519990574569e-05f, _1441);
      float _1447 = max(6.103519990574569e-05f, _1444);
      float _1448 = max(_1445, 0.017999999225139618f);
      float _1449 = max(_1446, 0.017999999225139618f);
      float _1450 = max(_1447, 0.017999999225139618f);
      float _1451 = log2(_1448);
      float _1452 = log2(_1449);
      float _1453 = log2(_1450);
      float _1454 = _1451 * 0.44999998807907104f;
      float _1455 = _1452 * 0.44999998807907104f;
      float _1456 = _1453 * 0.44999998807907104f;
      float _1457 = exp2(_1454);
      float _1458 = exp2(_1455);
      float _1459 = exp2(_1456);
      float _1460 = _1457 * 1.0989999771118164f;
      float _1461 = _1458 * 1.0989999771118164f;
      float _1462 = _1459 * 1.0989999771118164f;
      float _1463 = _1460 + -0.0989999994635582f;
      float _1464 = _1461 + -0.0989999994635582f;
      float _1465 = _1462 + -0.0989999994635582f;
      float _1466 = _1445 * 4.5f;
      float _1467 = _1446 * 4.5f;
      float _1468 = _1447 * 4.5f;
      float _1469 = min(_1466, _1463);
      float _1470 = min(_1467, _1464);
      float _1471 = min(_1468, _1465);
      _2762 = _1469;
      _2763 = _1470;
      _2764 = _1471;
    } else {
      bool _1473 = (_1340 == 3);
      bool _1474 = (_1340 == 5);
      bool _1475 = _1473 || _1474;
      if (_1475) {
        //   %1477 = bitcast [6 x float]* %13 to i8*
        //   %1478 = bitcast [6 x float]* %14 to i8*
        float _1480 = _RootShaderParameters_012z;
        float _1481 = _RootShaderParameters_012y;
        float _1482 = _RootShaderParameters_012x;
        float _1484 = _RootShaderParameters_011x;
        float _1485 = _RootShaderParameters_011y;
        float _1486 = _RootShaderParameters_011z;
        float _1487 = _RootShaderParameters_011w;
        float _1489 = _RootShaderParameters_010x;
        float _1490 = _RootShaderParameters_010y;
        float _1491 = _RootShaderParameters_010z;
        float _1492 = _RootShaderParameters_010w;
        float _1494 = _RootShaderParameters_009x;
        float _1496 = _RootShaderParameters_008x;
        float _1497 = _RootShaderParameters_008y;
        float _1498 = _RootShaderParameters_008z;
        float _1499 = _RootShaderParameters_008w;
        _13[0] = _1489;
        _13[1] = _1490;
        _13[2] = _1491;
        _13[3] = _1492;
        _13[4] = _1482;
        _13[5] = _1482;
        _14[0] = _1484;
        _14[1] = _1485;
        _14[2] = _1486;
        _14[3] = _1487;
        _14[4] = _1481;
        _14[5] = _1481;
        float _1513 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1514 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1515 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1517 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1518 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1519 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1521 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1522 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1523 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1524 = _1480 * _1322;
        float _1525 = _1480 * _1323;
        float _1526 = _1480 * _1324;
        float _1527 = _1513 * _1524;
        float _1528 = mad(_1514, _1525, _1527);
        float _1529 = mad(_1515, _1526, _1528);
        float _1530 = _1517 * _1524;
        float _1531 = mad(_1518, _1525, _1530);
        float _1532 = mad(_1519, _1526, _1531);
        float _1533 = _1521 * _1524;
        float _1534 = mad(_1522, _1525, _1533);
        float _1535 = mad(_1523, _1526, _1534);
        float _1536 = min(_1529, _1532);
        float _1537 = min(_1536, _1535);
        float _1538 = max(_1529, _1532);
        float _1539 = max(_1538, _1535);
        float _1540 = max(_1539, 1.000000013351432e-10f);
        float _1541 = max(_1537, 1.000000013351432e-10f);
        float _1542 = _1540 - _1541;
        float _1543 = max(_1539, 0.009999999776482582f);
        float _1544 = _1542 / _1543;
        float _1545 = _1535 - _1532;
        float _1546 = _1545 * _1535;
        float _1547 = _1532 - _1529;
        float _1548 = _1547 * _1532;
        float _1549 = _1546 + _1548;
        float _1550 = _1529 - _1535;
        float _1551 = _1550 * _1529;
        float _1552 = _1549 + _1551;
        float _1553 = sqrt(_1552);
        float _1554 = _1553 * 1.75f;
        float _1555 = _1532 + _1529;
        float _1556 = _1555 + _1535;
        float _1557 = _1556 + _1554;
        float _1558 = _1557 * 0.3333333432674408f;
        float _1559 = _1544 + -0.4000000059604645f;
        float _1560 = _1559 * 5.0f;
        float _1561 = _1559 * 2.5f;
        float _1562 = abs(_1561);
        float _1563 = 1.0f - _1562;
        float _1564 = max(_1563, 0.0f);
        bool _1565 = (_1560 > 0.0f);
        bool _1566 = (_1560 < 0.0f);
        int _1567 = int(_1565);
        int _1568 = int(_1566);
        int _1569 = _1567 - _1568;
        float _1570 = float(_1569);
        float _1571 = _1564 * _1564;
        float _1572 = 1.0f - _1571;
        float _1573 = _1570 * _1572;
        float _1574 = _1573 + 1.0f;
        float _1575 = _1574 * 0.02500000037252903f;
        bool _1576 = !(_1558 <= 0.0533333346247673f);
        _1584 = _1575;
        do {
          if (_1576) {
            bool _1578 = !(_1558 >= 0.1599999964237213f);
            _1584 = 0.0f;
            if (_1578) {
              float _1580 = 0.23999999463558197f / _1557;
              float _1581 = _1580 + -0.5f;
              float _1582 = _1581 * _1575;
              _1584 = _1582;
            }
          }
          float _1585 = _1584 + 1.0f;
          float _1586 = _1585 * _1529;
          float _1587 = _1585 * _1532;
          float _1588 = _1585 * _1535;
          bool _1589 = (_1586 == _1587);
          bool _1590 = (_1587 == _1588);
          bool _1591 = _1589 && _1590;
          _1620 = 0.0f;
          do {
            if (!_1591) {
              float _1593 = _1586 * 2.0f;
              float _1594 = _1593 - _1587;
              float _1595 = _1594 - _1588;
              float _1596 = _1532 - _1535;
              float _1597 = _1596 * 1.7320507764816284f;
              float _1598 = _1597 * _1585;
              float _1599 = _1598 / _1595;
              float _1600 = atan(_1599);
              float _1601 = _1600 + 3.1415927410125732f;
              float _1602 = _1600 + -3.1415927410125732f;
              bool _1603 = (_1595 < 0.0f);
              bool _1604 = (_1595 == 0.0f);
              bool _1605 = (_1598 >= 0.0f);
              bool _1606 = (_1598 < 0.0f);
              bool _1607 = _1605 && _1603;
              float _1608 = _1607 ? _1601 : _1600;
              bool _1609 = _1606 && _1603;
              float _1610 = _1609 ? _1602 : _1608;
              bool _1611 = _1606 && _1604;
              bool _1612 = _1605 && _1604;
              float _1613 = _1610 * 57.2957763671875f;
              float _1614 = _1611 ? -90.0f : _1613;
              float _1615 = _1612 ? 90.0f : _1614;
              bool _1616 = (_1615 < 0.0f);
              _1620 = _1615;
              if (_1616) {
                float _1618 = _1615 + 360.0f;
                _1620 = _1618;
              }
            }
            float _1621 = max(_1620, 0.0f);
            float _1622 = min(_1621, 360.0f);
            bool _1623 = (_1622 < -180.0f);
            do {
              if (_1623) {
                float _1625 = _1622 + 360.0f;
                _1631 = _1625;
              } else {
                bool _1627 = (_1622 > 180.0f);
                _1631 = _1622;
                if (_1627) {
                  float _1629 = _1622 + -360.0f;
                  _1631 = _1629;
                }
              }
              bool _1632 = (_1631 > -67.5f);
              bool _1633 = (_1631 < 67.5f);
              bool _1634 = _1632 && _1633;
              _1670 = 0.0f;
              do {
                if (_1634) {
                  float _1636 = _1631 + 67.5f;
                  float _1637 = _1636 * 0.029629629105329514f;
                  int _1638 = int(_1637);
                  float _1639 = float(_1638);
                  float _1640 = _1637 - _1639;
                  float _1641 = _1640 * _1640;
                  float _1642 = _1641 * _1640;
                  bool _1643 = (_1638 == 3);
                  if (_1643) {
                    float _1645 = _1642 * 0.1666666716337204f;
                    float _1646 = _1641 * 0.5f;
                    float _1647 = _1640 * 0.5f;
                    float _1648 = 0.1666666716337204f - _1647;
                    float _1649 = _1648 + _1646;
                    float _1650 = _1649 - _1645;
                    _1670 = _1650;
                  } else {
                    bool _1652 = (_1638 == 2);
                    if (_1652) {
                      float _1654 = _1642 * 0.5f;
                      float _1655 = 0.6666666865348816f - _1641;
                      float _1656 = _1655 + _1654;
                      _1670 = _1656;
                    } else {
                      bool _1658 = (_1638 == 1);
                      if (_1658) {
                        float _1660 = _1642 * -0.5f;
                        float _1661 = _1641 + _1640;
                        float _1662 = _1661 * 0.5f;
                        float _1663 = _1660 + 0.1666666716337204f;
                        float _1664 = _1663 + _1662;
                        _1670 = _1664;
                      } else {
                        bool _1666 = (_1638 == 0);
                        float _1667 = _1642 * 0.1666666716337204f;
                        float _1668 = _1666 ? _1667 : 0.0f;
                        _1670 = _1668;
                      }
                    }
                  }
                }
                float _1671 = 0.029999999329447746f - _1586;
                float _1672 = _1544 * 0.27000001072883606f;
                float _1673 = _1672 * _1671;
                float _1674 = _1673 * _1670;
                float _1675 = _1674 + _1586;
                float _1676 = max(_1675, 0.0f);
                float _1677 = max(_1587, 0.0f);
                float _1678 = max(_1588, 0.0f);
                float _1679 = min(_1676, 65535.0f);
                float _1680 = min(_1677, 65535.0f);
                float _1681 = min(_1678, 65535.0f);
                float _1682 = _1679 * 1.4514392614364624f;
                float _1683 = mad(-0.2365107536315918f, _1680, _1682);
                float _1684 = mad(-0.21492856740951538f, _1681, _1683);
                float _1685 = _1679 * -0.07655377686023712f;
                float _1686 = mad(1.17622971534729f, _1680, _1685);
                float _1687 = mad(-0.09967592358589172f, _1681, _1686);
                float _1688 = _1679 * 0.008316148072481155f;
                float _1689 = mad(-0.006032449658960104f, _1680, _1688);
                float _1690 = mad(0.9977163076400757f, _1681, _1689);
                float _1691 = max(_1684, 0.0f);
                float _1692 = max(_1687, 0.0f);
                float _1693 = max(_1690, 0.0f);
                float _1694 = min(_1691, 65504.0f);
                float _1695 = min(_1692, 65504.0f);
                float _1696 = min(_1693, 65504.0f);
                float _1697 = dot(float3(_1694, _1695, _1696), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1698 = _1694 - _1697;
                float _1699 = _1695 - _1697;
                float _1700 = _1696 - _1697;
                float _1701 = _1698 * 0.9599999785423279f;
                float _1702 = _1699 * 0.9599999785423279f;
                float _1703 = _1700 * 0.9599999785423279f;
                float _1704 = _1701 + _1697;
                float _1705 = _1702 + _1697;
                float _1706 = _1703 + _1697;
                float _1707 = max(_1704, 1.000000013351432e-10f);
                float _1708 = log2(_1707);
                float _1709 = _1708 * 0.3010300099849701f;
                float _1710 = log2(_1496);
                float _1711 = _1710 * 0.3010300099849701f;
                bool _1712 = !(_1709 <= _1711);
                do {
                  if (!_1712) {
                    float _1714 = log2(_1497);
                    float _1715 = _1714 * 0.3010300099849701f;
                    _1780 = _1715;
                  } else {
                    bool _1717 = (_1709 > _1711);
                    float _1718 = log2(_1494);
                    float _1719 = _1718 * 0.3010300099849701f;
                    bool _1720 = (_1709 < _1719);
                    bool _1721 = _1717 && _1720;
                    if (_1721) {
                      float _1723 = _1708 - _1710;
                      float _1724 = _1723 * 0.9030900001525879f;
                      float _1725 = _1718 - _1710;
                      float _1726 = _1725 * 0.3010300099849701f;
                      float _1727 = _1724 / _1726;
                      int _1728 = int(_1727);
                      float _1729 = float(_1728);
                      float _1730 = _1727 - _1729;
                      float _1732 = _13[_1728];
                      int _1733 = _1728 + 1;
                      float _1735 = _13[_1733];
                      int _1736 = _1728 + 2;
                      float _1738 = _13[_1736];
                      float _1739 = _1730 * _1730;
                      float _1740 = _1732 * 0.5f;
                      float _1741 = mad(_1735, -1.0f, _1740);
                      float _1742 = mad(_1738, 0.5f, _1741);
                      float _1743 = _1735 - _1732;
                      float _1744 = mad(_1735, 0.5f, _1740);
                      float _1745 = dot(float3(_1739, _1730, 1.0f), float3(_1742, _1743, _1744));
                      _1780 = _1745;
                    } else {
                      bool _1747 = !(_1709 >= _1719);
                      do {
                        if (!_1747) {
                          float _1749 = log2(_1498);
                          float _1750 = _1749 * 0.3010300099849701f;
                          bool _1751 = (_1709 < _1750);
                          if (_1751) {
                            float _1753 = _1708 - _1718;
                            float _1754 = _1753 * 0.9030900001525879f;
                            float _1755 = _1749 - _1718;
                            float _1756 = _1755 * 0.3010300099849701f;
                            float _1757 = _1754 / _1756;
                            int _1758 = int(_1757);
                            float _1759 = float(_1758);
                            float _1760 = _1757 - _1759;
                            float _1762 = _14[_1758];
                            int _1763 = _1758 + 1;
                            float _1765 = _14[_1763];
                            int _1766 = _1758 + 2;
                            float _1768 = _14[_1766];
                            float _1769 = _1760 * _1760;
                            float _1770 = _1762 * 0.5f;
                            float _1771 = mad(_1765, -1.0f, _1770);
                            float _1772 = mad(_1768, 0.5f, _1771);
                            float _1773 = _1765 - _1762;
                            float _1774 = mad(_1765, 0.5f, _1770);
                            float _1775 = dot(float3(_1769, _1760, 1.0f), float3(_1772, _1773, _1774));
                            _1780 = _1775;
                            break;
                          }
                        }
                        float _1777 = log2(_1499);
                        float _1778 = _1777 * 0.3010300099849701f;
                        _1780 = _1778;
                      } while (false);
                    }
                  }
                  float _1781 = _1780 * 3.321928024291992f;
                  float _1782 = exp2(_1781);
                  float _1783 = max(_1705, 1.000000013351432e-10f);
                  float _1784 = log2(_1783);
                  float _1785 = _1784 * 0.3010300099849701f;
                  bool _1786 = !(_1785 <= _1711);
                  do {
                    if (!_1786) {
                      float _1788 = log2(_1497);
                      float _1789 = _1788 * 0.3010300099849701f;
                      _1854 = _1789;
                    } else {
                      bool _1791 = (_1785 > _1711);
                      float _1792 = log2(_1494);
                      float _1793 = _1792 * 0.3010300099849701f;
                      bool _1794 = (_1785 < _1793);
                      bool _1795 = _1791 && _1794;
                      if (_1795) {
                        float _1797 = _1784 - _1710;
                        float _1798 = _1797 * 0.9030900001525879f;
                        float _1799 = _1792 - _1710;
                        float _1800 = _1799 * 0.3010300099849701f;
                        float _1801 = _1798 / _1800;
                        int _1802 = int(_1801);
                        float _1803 = float(_1802);
                        float _1804 = _1801 - _1803;
                        float _1806 = _13[_1802];
                        int _1807 = _1802 + 1;
                        float _1809 = _13[_1807];
                        int _1810 = _1802 + 2;
                        float _1812 = _13[_1810];
                        float _1813 = _1804 * _1804;
                        float _1814 = _1806 * 0.5f;
                        float _1815 = mad(_1809, -1.0f, _1814);
                        float _1816 = mad(_1812, 0.5f, _1815);
                        float _1817 = _1809 - _1806;
                        float _1818 = mad(_1809, 0.5f, _1814);
                        float _1819 = dot(float3(_1813, _1804, 1.0f), float3(_1816, _1817, _1818));
                        _1854 = _1819;
                      } else {
                        bool _1821 = !(_1785 >= _1793);
                        do {
                          if (!_1821) {
                            float _1823 = log2(_1498);
                            float _1824 = _1823 * 0.3010300099849701f;
                            bool _1825 = (_1785 < _1824);
                            if (_1825) {
                              float _1827 = _1784 - _1792;
                              float _1828 = _1827 * 0.9030900001525879f;
                              float _1829 = _1823 - _1792;
                              float _1830 = _1829 * 0.3010300099849701f;
                              float _1831 = _1828 / _1830;
                              int _1832 = int(_1831);
                              float _1833 = float(_1832);
                              float _1834 = _1831 - _1833;
                              float _1836 = _14[_1832];
                              int _1837 = _1832 + 1;
                              float _1839 = _14[_1837];
                              int _1840 = _1832 + 2;
                              float _1842 = _14[_1840];
                              float _1843 = _1834 * _1834;
                              float _1844 = _1836 * 0.5f;
                              float _1845 = mad(_1839, -1.0f, _1844);
                              float _1846 = mad(_1842, 0.5f, _1845);
                              float _1847 = _1839 - _1836;
                              float _1848 = mad(_1839, 0.5f, _1844);
                              float _1849 = dot(float3(_1843, _1834, 1.0f), float3(_1846, _1847, _1848));
                              _1854 = _1849;
                              break;
                            }
                          }
                          float _1851 = log2(_1499);
                          float _1852 = _1851 * 0.3010300099849701f;
                          _1854 = _1852;
                        } while (false);
                      }
                    }
                    float _1855 = _1854 * 3.321928024291992f;
                    float _1856 = exp2(_1855);
                    float _1857 = max(_1706, 1.000000013351432e-10f);
                    float _1858 = log2(_1857);
                    float _1859 = _1858 * 0.3010300099849701f;
                    bool _1860 = !(_1859 <= _1711);
                    do {
                      if (!_1860) {
                        float _1862 = log2(_1497);
                        float _1863 = _1862 * 0.3010300099849701f;
                        _1928 = _1863;
                      } else {
                        bool _1865 = (_1859 > _1711);
                        float _1866 = log2(_1494);
                        float _1867 = _1866 * 0.3010300099849701f;
                        bool _1868 = (_1859 < _1867);
                        bool _1869 = _1865 && _1868;
                        if (_1869) {
                          float _1871 = _1858 - _1710;
                          float _1872 = _1871 * 0.9030900001525879f;
                          float _1873 = _1866 - _1710;
                          float _1874 = _1873 * 0.3010300099849701f;
                          float _1875 = _1872 / _1874;
                          int _1876 = int(_1875);
                          float _1877 = float(_1876);
                          float _1878 = _1875 - _1877;
                          float _1880 = _13[_1876];
                          int _1881 = _1876 + 1;
                          float _1883 = _13[_1881];
                          int _1884 = _1876 + 2;
                          float _1886 = _13[_1884];
                          float _1887 = _1878 * _1878;
                          float _1888 = _1880 * 0.5f;
                          float _1889 = mad(_1883, -1.0f, _1888);
                          float _1890 = mad(_1886, 0.5f, _1889);
                          float _1891 = _1883 - _1880;
                          float _1892 = mad(_1883, 0.5f, _1888);
                          float _1893 = dot(float3(_1887, _1878, 1.0f), float3(_1890, _1891, _1892));
                          _1928 = _1893;
                        } else {
                          bool _1895 = !(_1859 >= _1867);
                          do {
                            if (!_1895) {
                              float _1897 = log2(_1498);
                              float _1898 = _1897 * 0.3010300099849701f;
                              bool _1899 = (_1859 < _1898);
                              if (_1899) {
                                float _1901 = _1858 - _1866;
                                float _1902 = _1901 * 0.9030900001525879f;
                                float _1903 = _1897 - _1866;
                                float _1904 = _1903 * 0.3010300099849701f;
                                float _1905 = _1902 / _1904;
                                int _1906 = int(_1905);
                                float _1907 = float(_1906);
                                float _1908 = _1905 - _1907;
                                float _1910 = _14[_1906];
                                int _1911 = _1906 + 1;
                                float _1913 = _14[_1911];
                                int _1914 = _1906 + 2;
                                float _1916 = _14[_1914];
                                float _1917 = _1908 * _1908;
                                float _1918 = _1910 * 0.5f;
                                float _1919 = mad(_1913, -1.0f, _1918);
                                float _1920 = mad(_1916, 0.5f, _1919);
                                float _1921 = _1913 - _1910;
                                float _1922 = mad(_1913, 0.5f, _1918);
                                float _1923 = dot(float3(_1917, _1908, 1.0f), float3(_1920, _1921, _1922));
                                _1928 = _1923;
                                break;
                              }
                            }
                            float _1925 = log2(_1499);
                            float _1926 = _1925 * 0.3010300099849701f;
                            _1928 = _1926;
                          } while (false);
                        }
                      }
                      float _1929 = _1928 * 3.321928024291992f;
                      float _1930 = exp2(_1929);
                      float _1931 = _1782 - _1497;
                      float _1932 = _1499 - _1497;
                      float _1933 = _1931 / _1932;
                      float _1934 = _1856 - _1497;
                      float _1935 = _1934 / _1932;
                      float _1936 = _1930 - _1497;
                      float _1937 = _1936 / _1932;
                      float _1938 = _1933 * 0.6624541878700256f;
                      float _1939 = mad(0.13400420546531677f, _1935, _1938);
                      float _1940 = mad(0.15618768334388733f, _1937, _1939);
                      float _1941 = _1933 * 0.2722287178039551f;
                      float _1942 = mad(0.6740817427635193f, _1935, _1941);
                      float _1943 = mad(0.053689517080783844f, _1937, _1942);
                      float _1944 = _1933 * -0.005574649665504694f;
                      float _1945 = mad(0.00406073359772563f, _1935, _1944);
                      float _1946 = mad(1.0103391408920288f, _1937, _1945);
                      float _1947 = _1940 * 1.6410233974456787f;
                      float _1948 = mad(-0.32480329275131226f, _1943, _1947);
                      float _1949 = mad(-0.23642469942569733f, _1946, _1948);
                      float _1950 = _1940 * -0.663662850856781f;
                      float _1951 = mad(1.6153316497802734f, _1943, _1950);
                      float _1952 = mad(0.016756348311901093f, _1946, _1951);
                      float _1953 = _1940 * 0.011721894145011902f;
                      float _1954 = mad(-0.008284442126750946f, _1943, _1953);
                      float _1955 = mad(0.9883948564529419f, _1946, _1954);
                      float _1956 = max(_1949, 0.0f);
                      float _1957 = max(_1952, 0.0f);
                      float _1958 = max(_1955, 0.0f);
                      float _1959 = min(_1956, 1.0f);
                      float _1960 = min(_1957, 1.0f);
                      float _1961 = min(_1958, 1.0f);
                      float _1962 = _1959 * 0.6624541878700256f;
                      float _1963 = mad(0.13400420546531677f, _1960, _1962);
                      float _1964 = mad(0.15618768334388733f, _1961, _1963);
                      float _1965 = _1959 * 0.2722287178039551f;
                      float _1966 = mad(0.6740817427635193f, _1960, _1965);
                      float _1967 = mad(0.053689517080783844f, _1961, _1966);
                      float _1968 = _1959 * -0.005574649665504694f;
                      float _1969 = mad(0.00406073359772563f, _1960, _1968);
                      float _1970 = mad(1.0103391408920288f, _1961, _1969);
                      float _1971 = _1964 * 1.6410233974456787f;
                      float _1972 = mad(-0.32480329275131226f, _1967, _1971);
                      float _1973 = mad(-0.23642469942569733f, _1970, _1972);
                      float _1974 = _1964 * -0.663662850856781f;
                      float _1975 = mad(1.6153316497802734f, _1967, _1974);
                      float _1976 = mad(0.016756348311901093f, _1970, _1975);
                      float _1977 = _1964 * 0.011721894145011902f;
                      float _1978 = mad(-0.008284442126750946f, _1967, _1977);
                      float _1979 = mad(0.9883948564529419f, _1970, _1978);
                      float _1980 = max(_1973, 0.0f);
                      float _1981 = max(_1976, 0.0f);
                      float _1982 = max(_1979, 0.0f);
                      float _1983 = min(_1980, 65535.0f);
                      float _1984 = min(_1981, 65535.0f);
                      float _1985 = min(_1982, 65535.0f);
                      float _1986 = _1983 * _1499;
                      float _1987 = _1984 * _1499;
                      float _1988 = _1985 * _1499;
                      float _1989 = max(_1986, 0.0f);
                      float _1990 = max(_1987, 0.0f);
                      float _1991 = max(_1988, 0.0f);
                      float _1992 = min(_1989, 65535.0f);
                      float _1993 = min(_1990, 65535.0f);
                      float _1994 = min(_1991, 65535.0f);
                      bool _1995 = (_1340 == 5);
                      _2007 = _1992;
                      _2008 = _1993;
                      _2009 = _1994;
                      do {
                        if (!_1995) {
                          float _1997 = _1992 * _49;
                          float _1998 = mad(_50, _1993, _1997);
                          float _1999 = mad(_51, _1994, _1998);
                          float _2000 = _1992 * _52;
                          float _2001 = mad(_53, _1993, _2000);
                          float _2002 = mad(_54, _1994, _2001);
                          float _2003 = _1992 * _55;
                          float _2004 = mad(_56, _1993, _2003);
                          float _2005 = mad(_57, _1994, _2004);
                          _2007 = _1999;
                          _2008 = _2002;
                          _2009 = _2005;
                        }
                        float _2010 = _2007 * 9.999999747378752e-05f;
                        float _2011 = _2008 * 9.999999747378752e-05f;
                        float _2012 = _2009 * 9.999999747378752e-05f;
                        float _2013 = log2(_2010);
                        float _2014 = log2(_2011);
                        float _2015 = log2(_2012);
                        float _2016 = _2013 * 0.1593017578125f;
                        float _2017 = _2014 * 0.1593017578125f;
                        float _2018 = _2015 * 0.1593017578125f;
                        float _2019 = exp2(_2016);
                        float _2020 = exp2(_2017);
                        float _2021 = exp2(_2018);
                        float _2022 = _2019 * 18.8515625f;
                        float _2023 = _2020 * 18.8515625f;
                        float _2024 = _2021 * 18.8515625f;
                        float _2025 = _2022 + 0.8359375f;
                        float _2026 = _2023 + 0.8359375f;
                        float _2027 = _2024 + 0.8359375f;
                        float _2028 = _2019 * 18.6875f;
                        float _2029 = _2020 * 18.6875f;
                        float _2030 = _2021 * 18.6875f;
                        float _2031 = _2028 + 1.0f;
                        float _2032 = _2029 + 1.0f;
                        float _2033 = _2030 + 1.0f;
                        float _2034 = 1.0f / _2031;
                        float _2035 = 1.0f / _2032;
                        float _2036 = 1.0f / _2033;
                        float _2037 = _2034 * _2025;
                        float _2038 = _2035 * _2026;
                        float _2039 = _2036 * _2027;
                        float _2040 = log2(_2037);
                        float _2041 = log2(_2038);
                        float _2042 = log2(_2039);
                        float _2043 = _2040 * 78.84375f;
                        float _2044 = _2041 * 78.84375f;
                        float _2045 = _2042 * 78.84375f;
                        float _2046 = exp2(_2043);
                        float _2047 = exp2(_2044);
                        float _2048 = exp2(_2045);
                        _2762 = _2046;
                        _2763 = _2047;
                        _2764 = _2048;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _2050 = _1340 & -3;
        bool _2051 = (_2050 == 4);
        if (_2051) {
          //   %2053 = bitcast [6 x float]* %11 to i8*
          //   %2054 = bitcast [6 x float]* %12 to i8*
          float _2056 = _RootShaderParameters_012z;
          float _2057 = _RootShaderParameters_012y;
          float _2058 = _RootShaderParameters_012x;
          float _2060 = _RootShaderParameters_011x;
          float _2061 = _RootShaderParameters_011y;
          float _2062 = _RootShaderParameters_011z;
          float _2063 = _RootShaderParameters_011w;
          float _2065 = _RootShaderParameters_010x;
          float _2066 = _RootShaderParameters_010y;
          float _2067 = _RootShaderParameters_010z;
          float _2068 = _RootShaderParameters_010w;
          float _2070 = _RootShaderParameters_009x;
          float _2072 = _RootShaderParameters_008x;
          float _2073 = _RootShaderParameters_008y;
          float _2074 = _RootShaderParameters_008z;
          float _2075 = _RootShaderParameters_008w;
          _11[0] = _2065;
          _11[1] = _2066;
          _11[2] = _2067;
          _11[3] = _2068;
          _11[4] = _2058;
          _11[5] = _2058;
          _12[0] = _2060;
          _12[1] = _2061;
          _12[2] = _2062;
          _12[3] = _2063;
          _12[4] = _2057;
          _12[5] = _2057;
          float _2089 = UniformBufferConstants_WorkingColorSpace_016x;
          float _2090 = UniformBufferConstants_WorkingColorSpace_016y;
          float _2091 = UniformBufferConstants_WorkingColorSpace_016z;
          float _2093 = UniformBufferConstants_WorkingColorSpace_017x;
          float _2094 = UniformBufferConstants_WorkingColorSpace_017y;
          float _2095 = UniformBufferConstants_WorkingColorSpace_017z;
          float _2097 = UniformBufferConstants_WorkingColorSpace_018x;
          float _2098 = UniformBufferConstants_WorkingColorSpace_018y;
          float _2099 = UniformBufferConstants_WorkingColorSpace_018z;
          float _2100 = _2056 * _1322;
          float _2101 = _2056 * _1323;
          float _2102 = _2056 * _1324;
          float _2103 = _2089 * _2100;
          float _2104 = mad(_2090, _2101, _2103);
          float _2105 = mad(_2091, _2102, _2104);
          float _2106 = _2093 * _2100;
          float _2107 = mad(_2094, _2101, _2106);
          float _2108 = mad(_2095, _2102, _2107);
          float _2109 = _2097 * _2100;
          float _2110 = mad(_2098, _2101, _2109);
          float _2111 = mad(_2099, _2102, _2110);
          float _2112 = min(_2105, _2108);
          float _2113 = min(_2112, _2111);
          float _2114 = max(_2105, _2108);
          float _2115 = max(_2114, _2111);
          float _2116 = max(_2115, 1.000000013351432e-10f);
          float _2117 = max(_2113, 1.000000013351432e-10f);
          float _2118 = _2116 - _2117;
          float _2119 = max(_2115, 0.009999999776482582f);
          float _2120 = _2118 / _2119;
          float _2121 = _2111 - _2108;
          float _2122 = _2121 * _2111;
          float _2123 = _2108 - _2105;
          float _2124 = _2123 * _2108;
          float _2125 = _2122 + _2124;
          float _2126 = _2105 - _2111;
          float _2127 = _2126 * _2105;
          float _2128 = _2125 + _2127;
          float _2129 = sqrt(_2128);
          float _2130 = _2129 * 1.75f;
          float _2131 = _2108 + _2105;
          float _2132 = _2131 + _2111;
          float _2133 = _2132 + _2130;
          float _2134 = _2133 * 0.3333333432674408f;
          float _2135 = _2120 + -0.4000000059604645f;
          float _2136 = _2135 * 5.0f;
          float _2137 = _2135 * 2.5f;
          float _2138 = abs(_2137);
          float _2139 = 1.0f - _2138;
          float _2140 = max(_2139, 0.0f);
          bool _2141 = (_2136 > 0.0f);
          bool _2142 = (_2136 < 0.0f);
          int _2143 = int(_2141);
          int _2144 = int(_2142);
          int _2145 = _2143 - _2144;
          float _2146 = float(_2145);
          float _2147 = _2140 * _2140;
          float _2148 = 1.0f - _2147;
          float _2149 = _2146 * _2148;
          float _2150 = _2149 + 1.0f;
          float _2151 = _2150 * 0.02500000037252903f;
          bool _2152 = !(_2134 <= 0.0533333346247673f);
          _2160 = _2151;
          do {
            if (_2152) {
              bool _2154 = !(_2134 >= 0.1599999964237213f);
              _2160 = 0.0f;
              if (_2154) {
                float _2156 = 0.23999999463558197f / _2133;
                float _2157 = _2156 + -0.5f;
                float _2158 = _2157 * _2151;
                _2160 = _2158;
              }
            }
            float _2161 = _2160 + 1.0f;
            float _2162 = _2161 * _2105;
            float _2163 = _2161 * _2108;
            float _2164 = _2161 * _2111;
            bool _2165 = (_2162 == _2163);
            bool _2166 = (_2163 == _2164);
            bool _2167 = _2165 && _2166;
            _2196 = 0.0f;
            do {
              if (!_2167) {
                float _2169 = _2162 * 2.0f;
                float _2170 = _2169 - _2163;
                float _2171 = _2170 - _2164;
                float _2172 = _2108 - _2111;
                float _2173 = _2172 * 1.7320507764816284f;
                float _2174 = _2173 * _2161;
                float _2175 = _2174 / _2171;
                float _2176 = atan(_2175);
                float _2177 = _2176 + 3.1415927410125732f;
                float _2178 = _2176 + -3.1415927410125732f;
                bool _2179 = (_2171 < 0.0f);
                bool _2180 = (_2171 == 0.0f);
                bool _2181 = (_2174 >= 0.0f);
                bool _2182 = (_2174 < 0.0f);
                bool _2183 = _2181 && _2179;
                float _2184 = _2183 ? _2177 : _2176;
                bool _2185 = _2182 && _2179;
                float _2186 = _2185 ? _2178 : _2184;
                bool _2187 = _2182 && _2180;
                bool _2188 = _2181 && _2180;
                float _2189 = _2186 * 57.2957763671875f;
                float _2190 = _2187 ? -90.0f : _2189;
                float _2191 = _2188 ? 90.0f : _2190;
                bool _2192 = (_2191 < 0.0f);
                _2196 = _2191;
                if (_2192) {
                  float _2194 = _2191 + 360.0f;
                  _2196 = _2194;
                }
              }
              float _2197 = max(_2196, 0.0f);
              float _2198 = min(_2197, 360.0f);
              bool _2199 = (_2198 < -180.0f);
              do {
                if (_2199) {
                  float _2201 = _2198 + 360.0f;
                  _2207 = _2201;
                } else {
                  bool _2203 = (_2198 > 180.0f);
                  _2207 = _2198;
                  if (_2203) {
                    float _2205 = _2198 + -360.0f;
                    _2207 = _2205;
                  }
                }
                bool _2208 = (_2207 > -67.5f);
                bool _2209 = (_2207 < 67.5f);
                bool _2210 = _2208 && _2209;
                _2246 = 0.0f;
                do {
                  if (_2210) {
                    float _2212 = _2207 + 67.5f;
                    float _2213 = _2212 * 0.029629629105329514f;
                    int _2214 = int(_2213);
                    float _2215 = float(_2214);
                    float _2216 = _2213 - _2215;
                    float _2217 = _2216 * _2216;
                    float _2218 = _2217 * _2216;
                    bool _2219 = (_2214 == 3);
                    if (_2219) {
                      float _2221 = _2218 * 0.1666666716337204f;
                      float _2222 = _2217 * 0.5f;
                      float _2223 = _2216 * 0.5f;
                      float _2224 = 0.1666666716337204f - _2223;
                      float _2225 = _2224 + _2222;
                      float _2226 = _2225 - _2221;
                      _2246 = _2226;
                    } else {
                      bool _2228 = (_2214 == 2);
                      if (_2228) {
                        float _2230 = _2218 * 0.5f;
                        float _2231 = 0.6666666865348816f - _2217;
                        float _2232 = _2231 + _2230;
                        _2246 = _2232;
                      } else {
                        bool _2234 = (_2214 == 1);
                        if (_2234) {
                          float _2236 = _2218 * -0.5f;
                          float _2237 = _2217 + _2216;
                          float _2238 = _2237 * 0.5f;
                          float _2239 = _2236 + 0.1666666716337204f;
                          float _2240 = _2239 + _2238;
                          _2246 = _2240;
                        } else {
                          bool _2242 = (_2214 == 0);
                          float _2243 = _2218 * 0.1666666716337204f;
                          float _2244 = _2242 ? _2243 : 0.0f;
                          _2246 = _2244;
                        }
                      }
                    }
                  }
                  float _2247 = 0.029999999329447746f - _2162;
                  float _2248 = _2120 * 0.27000001072883606f;
                  float _2249 = _2248 * _2247;
                  float _2250 = _2249 * _2246;
                  float _2251 = _2250 + _2162;
                  float _2252 = max(_2251, 0.0f);
                  float _2253 = max(_2163, 0.0f);
                  float _2254 = max(_2164, 0.0f);
                  float _2255 = min(_2252, 65535.0f);
                  float _2256 = min(_2253, 65535.0f);
                  float _2257 = min(_2254, 65535.0f);
                  float _2258 = _2255 * 1.4514392614364624f;
                  float _2259 = mad(-0.2365107536315918f, _2256, _2258);
                  float _2260 = mad(-0.21492856740951538f, _2257, _2259);
                  float _2261 = _2255 * -0.07655377686023712f;
                  float _2262 = mad(1.17622971534729f, _2256, _2261);
                  float _2263 = mad(-0.09967592358589172f, _2257, _2262);
                  float _2264 = _2255 * 0.008316148072481155f;
                  float _2265 = mad(-0.006032449658960104f, _2256, _2264);
                  float _2266 = mad(0.9977163076400757f, _2257, _2265);
                  float _2267 = max(_2260, 0.0f);
                  float _2268 = max(_2263, 0.0f);
                  float _2269 = max(_2266, 0.0f);
                  float _2270 = min(_2267, 65504.0f);
                  float _2271 = min(_2268, 65504.0f);
                  float _2272 = min(_2269, 65504.0f);
                  float _2273 = dot(float3(_2270, _2271, _2272), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2274 = _2270 - _2273;
                  float _2275 = _2271 - _2273;
                  float _2276 = _2272 - _2273;
                  float _2277 = _2274 * 0.9599999785423279f;
                  float _2278 = _2275 * 0.9599999785423279f;
                  float _2279 = _2276 * 0.9599999785423279f;
                  float _2280 = _2277 + _2273;
                  float _2281 = _2278 + _2273;
                  float _2282 = _2279 + _2273;
                  float _2283 = max(_2280, 1.000000013351432e-10f);
                  float _2284 = log2(_2283);
                  float _2285 = _2284 * 0.3010300099849701f;
                  float _2286 = log2(_2072);
                  float _2287 = _2286 * 0.3010300099849701f;
                  bool _2288 = !(_2285 <= _2287);
                  do {
                    if (!_2288) {
                      float _2290 = log2(_2073);
                      float _2291 = _2290 * 0.3010300099849701f;
                      _2356 = _2291;
                    } else {
                      bool _2293 = (_2285 > _2287);
                      float _2294 = log2(_2070);
                      float _2295 = _2294 * 0.3010300099849701f;
                      bool _2296 = (_2285 < _2295);
                      bool _2297 = _2293 && _2296;
                      if (_2297) {
                        float _2299 = _2284 - _2286;
                        float _2300 = _2299 * 0.9030900001525879f;
                        float _2301 = _2294 - _2286;
                        float _2302 = _2301 * 0.3010300099849701f;
                        float _2303 = _2300 / _2302;
                        int _2304 = int(_2303);
                        float _2305 = float(_2304);
                        float _2306 = _2303 - _2305;
                        float _2308 = _11[_2304];
                        int _2309 = _2304 + 1;
                        float _2311 = _11[_2309];
                        int _2312 = _2304 + 2;
                        float _2314 = _11[_2312];
                        float _2315 = _2306 * _2306;
                        float _2316 = _2308 * 0.5f;
                        float _2317 = mad(_2311, -1.0f, _2316);
                        float _2318 = mad(_2314, 0.5f, _2317);
                        float _2319 = _2311 - _2308;
                        float _2320 = mad(_2311, 0.5f, _2316);
                        float _2321 = dot(float3(_2315, _2306, 1.0f), float3(_2318, _2319, _2320));
                        _2356 = _2321;
                      } else {
                        bool _2323 = !(_2285 >= _2295);
                        do {
                          if (!_2323) {
                            float _2325 = log2(_2074);
                            float _2326 = _2325 * 0.3010300099849701f;
                            bool _2327 = (_2285 < _2326);
                            if (_2327) {
                              float _2329 = _2284 - _2294;
                              float _2330 = _2329 * 0.9030900001525879f;
                              float _2331 = _2325 - _2294;
                              float _2332 = _2331 * 0.3010300099849701f;
                              float _2333 = _2330 / _2332;
                              int _2334 = int(_2333);
                              float _2335 = float(_2334);
                              float _2336 = _2333 - _2335;
                              float _2338 = _12[_2334];
                              int _2339 = _2334 + 1;
                              float _2341 = _12[_2339];
                              int _2342 = _2334 + 2;
                              float _2344 = _12[_2342];
                              float _2345 = _2336 * _2336;
                              float _2346 = _2338 * 0.5f;
                              float _2347 = mad(_2341, -1.0f, _2346);
                              float _2348 = mad(_2344, 0.5f, _2347);
                              float _2349 = _2341 - _2338;
                              float _2350 = mad(_2341, 0.5f, _2346);
                              float _2351 = dot(float3(_2345, _2336, 1.0f), float3(_2348, _2349, _2350));
                              _2356 = _2351;
                              break;
                            }
                          }
                          float _2353 = log2(_2075);
                          float _2354 = _2353 * 0.3010300099849701f;
                          _2356 = _2354;
                        } while (false);
                      }
                    }
                    float _2357 = _2356 * 3.321928024291992f;
                    float _2358 = exp2(_2357);
                    float _2359 = max(_2281, 1.000000013351432e-10f);
                    float _2360 = log2(_2359);
                    float _2361 = _2360 * 0.3010300099849701f;
                    bool _2362 = !(_2361 <= _2287);
                    do {
                      if (!_2362) {
                        float _2364 = log2(_2073);
                        float _2365 = _2364 * 0.3010300099849701f;
                        _2430 = _2365;
                      } else {
                        bool _2367 = (_2361 > _2287);
                        float _2368 = log2(_2070);
                        float _2369 = _2368 * 0.3010300099849701f;
                        bool _2370 = (_2361 < _2369);
                        bool _2371 = _2367 && _2370;
                        if (_2371) {
                          float _2373 = _2360 - _2286;
                          float _2374 = _2373 * 0.9030900001525879f;
                          float _2375 = _2368 - _2286;
                          float _2376 = _2375 * 0.3010300099849701f;
                          float _2377 = _2374 / _2376;
                          int _2378 = int(_2377);
                          float _2379 = float(_2378);
                          float _2380 = _2377 - _2379;
                          float _2382 = _11[_2378];
                          int _2383 = _2378 + 1;
                          float _2385 = _11[_2383];
                          int _2386 = _2378 + 2;
                          float _2388 = _11[_2386];
                          float _2389 = _2380 * _2380;
                          float _2390 = _2382 * 0.5f;
                          float _2391 = mad(_2385, -1.0f, _2390);
                          float _2392 = mad(_2388, 0.5f, _2391);
                          float _2393 = _2385 - _2382;
                          float _2394 = mad(_2385, 0.5f, _2390);
                          float _2395 = dot(float3(_2389, _2380, 1.0f), float3(_2392, _2393, _2394));
                          _2430 = _2395;
                        } else {
                          bool _2397 = !(_2361 >= _2369);
                          do {
                            if (!_2397) {
                              float _2399 = log2(_2074);
                              float _2400 = _2399 * 0.3010300099849701f;
                              bool _2401 = (_2361 < _2400);
                              if (_2401) {
                                float _2403 = _2360 - _2368;
                                float _2404 = _2403 * 0.9030900001525879f;
                                float _2405 = _2399 - _2368;
                                float _2406 = _2405 * 0.3010300099849701f;
                                float _2407 = _2404 / _2406;
                                int _2408 = int(_2407);
                                float _2409 = float(_2408);
                                float _2410 = _2407 - _2409;
                                float _2412 = _12[_2408];
                                int _2413 = _2408 + 1;
                                float _2415 = _12[_2413];
                                int _2416 = _2408 + 2;
                                float _2418 = _12[_2416];
                                float _2419 = _2410 * _2410;
                                float _2420 = _2412 * 0.5f;
                                float _2421 = mad(_2415, -1.0f, _2420);
                                float _2422 = mad(_2418, 0.5f, _2421);
                                float _2423 = _2415 - _2412;
                                float _2424 = mad(_2415, 0.5f, _2420);
                                float _2425 = dot(float3(_2419, _2410, 1.0f), float3(_2422, _2423, _2424));
                                _2430 = _2425;
                                break;
                              }
                            }
                            float _2427 = log2(_2075);
                            float _2428 = _2427 * 0.3010300099849701f;
                            _2430 = _2428;
                          } while (false);
                        }
                      }
                      float _2431 = _2430 * 3.321928024291992f;
                      float _2432 = exp2(_2431);
                      float _2433 = max(_2282, 1.000000013351432e-10f);
                      float _2434 = log2(_2433);
                      float _2435 = _2434 * 0.3010300099849701f;
                      bool _2436 = !(_2435 <= _2287);
                      do {
                        if (!_2436) {
                          float _2438 = log2(_2073);
                          float _2439 = _2438 * 0.3010300099849701f;
                          _2504 = _2439;
                        } else {
                          bool _2441 = (_2435 > _2287);
                          float _2442 = log2(_2070);
                          float _2443 = _2442 * 0.3010300099849701f;
                          bool _2444 = (_2435 < _2443);
                          bool _2445 = _2441 && _2444;
                          if (_2445) {
                            float _2447 = _2434 - _2286;
                            float _2448 = _2447 * 0.9030900001525879f;
                            float _2449 = _2442 - _2286;
                            float _2450 = _2449 * 0.3010300099849701f;
                            float _2451 = _2448 / _2450;
                            int _2452 = int(_2451);
                            float _2453 = float(_2452);
                            float _2454 = _2451 - _2453;
                            float _2456 = _11[_2452];
                            int _2457 = _2452 + 1;
                            float _2459 = _11[_2457];
                            int _2460 = _2452 + 2;
                            float _2462 = _11[_2460];
                            float _2463 = _2454 * _2454;
                            float _2464 = _2456 * 0.5f;
                            float _2465 = mad(_2459, -1.0f, _2464);
                            float _2466 = mad(_2462, 0.5f, _2465);
                            float _2467 = _2459 - _2456;
                            float _2468 = mad(_2459, 0.5f, _2464);
                            float _2469 = dot(float3(_2463, _2454, 1.0f), float3(_2466, _2467, _2468));
                            _2504 = _2469;
                          } else {
                            bool _2471 = !(_2435 >= _2443);
                            do {
                              if (!_2471) {
                                float _2473 = log2(_2074);
                                float _2474 = _2473 * 0.3010300099849701f;
                                bool _2475 = (_2435 < _2474);
                                if (_2475) {
                                  float _2477 = _2434 - _2442;
                                  float _2478 = _2477 * 0.9030900001525879f;
                                  float _2479 = _2473 - _2442;
                                  float _2480 = _2479 * 0.3010300099849701f;
                                  float _2481 = _2478 / _2480;
                                  int _2482 = int(_2481);
                                  float _2483 = float(_2482);
                                  float _2484 = _2481 - _2483;
                                  float _2486 = _12[_2482];
                                  int _2487 = _2482 + 1;
                                  float _2489 = _12[_2487];
                                  int _2490 = _2482 + 2;
                                  float _2492 = _12[_2490];
                                  float _2493 = _2484 * _2484;
                                  float _2494 = _2486 * 0.5f;
                                  float _2495 = mad(_2489, -1.0f, _2494);
                                  float _2496 = mad(_2492, 0.5f, _2495);
                                  float _2497 = _2489 - _2486;
                                  float _2498 = mad(_2489, 0.5f, _2494);
                                  float _2499 = dot(float3(_2493, _2484, 1.0f), float3(_2496, _2497, _2498));
                                  _2504 = _2499;
                                  break;
                                }
                              }
                              float _2501 = log2(_2075);
                              float _2502 = _2501 * 0.3010300099849701f;
                              _2504 = _2502;
                            } while (false);
                          }
                        }
                        float _2505 = _2504 * 3.321928024291992f;
                        float _2506 = exp2(_2505);
                        float _2507 = _2358 - _2073;
                        float _2508 = _2075 - _2073;
                        float _2509 = _2507 / _2508;
                        float _2510 = _2432 - _2073;
                        float _2511 = _2510 / _2508;
                        float _2512 = _2506 - _2073;
                        float _2513 = _2512 / _2508;
                        float _2514 = _2509 * 0.6624541878700256f;
                        float _2515 = mad(0.13400420546531677f, _2511, _2514);
                        float _2516 = mad(0.15618768334388733f, _2513, _2515);
                        float _2517 = _2509 * 0.2722287178039551f;
                        float _2518 = mad(0.6740817427635193f, _2511, _2517);
                        float _2519 = mad(0.053689517080783844f, _2513, _2518);
                        float _2520 = _2509 * -0.005574649665504694f;
                        float _2521 = mad(0.00406073359772563f, _2511, _2520);
                        float _2522 = mad(1.0103391408920288f, _2513, _2521);
                        float _2523 = _2516 * 1.6410233974456787f;
                        float _2524 = mad(-0.32480329275131226f, _2519, _2523);
                        float _2525 = mad(-0.23642469942569733f, _2522, _2524);
                        float _2526 = _2516 * -0.663662850856781f;
                        float _2527 = mad(1.6153316497802734f, _2519, _2526);
                        float _2528 = mad(0.016756348311901093f, _2522, _2527);
                        float _2529 = _2516 * 0.011721894145011902f;
                        float _2530 = mad(-0.008284442126750946f, _2519, _2529);
                        float _2531 = mad(0.9883948564529419f, _2522, _2530);
                        float _2532 = max(_2525, 0.0f);
                        float _2533 = max(_2528, 0.0f);
                        float _2534 = max(_2531, 0.0f);
                        float _2535 = min(_2532, 1.0f);
                        float _2536 = min(_2533, 1.0f);
                        float _2537 = min(_2534, 1.0f);
                        float _2538 = _2535 * 0.6624541878700256f;
                        float _2539 = mad(0.13400420546531677f, _2536, _2538);
                        float _2540 = mad(0.15618768334388733f, _2537, _2539);
                        float _2541 = _2535 * 0.2722287178039551f;
                        float _2542 = mad(0.6740817427635193f, _2536, _2541);
                        float _2543 = mad(0.053689517080783844f, _2537, _2542);
                        float _2544 = _2535 * -0.005574649665504694f;
                        float _2545 = mad(0.00406073359772563f, _2536, _2544);
                        float _2546 = mad(1.0103391408920288f, _2537, _2545);
                        float _2547 = _2540 * 1.6410233974456787f;
                        float _2548 = mad(-0.32480329275131226f, _2543, _2547);
                        float _2549 = mad(-0.23642469942569733f, _2546, _2548);
                        float _2550 = _2540 * -0.663662850856781f;
                        float _2551 = mad(1.6153316497802734f, _2543, _2550);
                        float _2552 = mad(0.016756348311901093f, _2546, _2551);
                        float _2553 = _2540 * 0.011721894145011902f;
                        float _2554 = mad(-0.008284442126750946f, _2543, _2553);
                        float _2555 = mad(0.9883948564529419f, _2546, _2554);
                        float _2556 = max(_2549, 0.0f);
                        float _2557 = max(_2552, 0.0f);
                        float _2558 = max(_2555, 0.0f);
                        float _2559 = min(_2556, 65535.0f);
                        float _2560 = min(_2557, 65535.0f);
                        float _2561 = min(_2558, 65535.0f);
                        float _2562 = _2559 * _2075;
                        float _2563 = _2560 * _2075;
                        float _2564 = _2561 * _2075;
                        float _2565 = max(_2562, 0.0f);
                        float _2566 = max(_2563, 0.0f);
                        float _2567 = max(_2564, 0.0f);
                        float _2568 = min(_2565, 65535.0f);
                        float _2569 = min(_2566, 65535.0f);
                        float _2570 = min(_2567, 65535.0f);
                        bool _2571 = (_1340 == 6);
                        _2583 = _2568;
                        _2584 = _2569;
                        _2585 = _2570;
                        do {
                          if (!_2571) {
                            float _2573 = _2568 * _49;
                            float _2574 = mad(_50, _2569, _2573);
                            float _2575 = mad(_51, _2570, _2574);
                            float _2576 = _2568 * _52;
                            float _2577 = mad(_53, _2569, _2576);
                            float _2578 = mad(_54, _2570, _2577);
                            float _2579 = _2568 * _55;
                            float _2580 = mad(_56, _2569, _2579);
                            float _2581 = mad(_57, _2570, _2580);
                            _2583 = _2575;
                            _2584 = _2578;
                            _2585 = _2581;
                          }
                          float _2586 = _2583 * 9.999999747378752e-05f;
                          float _2587 = _2584 * 9.999999747378752e-05f;
                          float _2588 = _2585 * 9.999999747378752e-05f;
                          float _2589 = log2(_2586);
                          float _2590 = log2(_2587);
                          float _2591 = log2(_2588);
                          float _2592 = _2589 * 0.1593017578125f;
                          float _2593 = _2590 * 0.1593017578125f;
                          float _2594 = _2591 * 0.1593017578125f;
                          float _2595 = exp2(_2592);
                          float _2596 = exp2(_2593);
                          float _2597 = exp2(_2594);
                          float _2598 = _2595 * 18.8515625f;
                          float _2599 = _2596 * 18.8515625f;
                          float _2600 = _2597 * 18.8515625f;
                          float _2601 = _2598 + 0.8359375f;
                          float _2602 = _2599 + 0.8359375f;
                          float _2603 = _2600 + 0.8359375f;
                          float _2604 = _2595 * 18.6875f;
                          float _2605 = _2596 * 18.6875f;
                          float _2606 = _2597 * 18.6875f;
                          float _2607 = _2604 + 1.0f;
                          float _2608 = _2605 + 1.0f;
                          float _2609 = _2606 + 1.0f;
                          float _2610 = 1.0f / _2607;
                          float _2611 = 1.0f / _2608;
                          float _2612 = 1.0f / _2609;
                          float _2613 = _2610 * _2601;
                          float _2614 = _2611 * _2602;
                          float _2615 = _2612 * _2603;
                          float _2616 = log2(_2613);
                          float _2617 = log2(_2614);
                          float _2618 = log2(_2615);
                          float _2619 = _2616 * 78.84375f;
                          float _2620 = _2617 * 78.84375f;
                          float _2621 = _2618 * 78.84375f;
                          float _2622 = exp2(_2619);
                          float _2623 = exp2(_2620);
                          float _2624 = exp2(_2621);
                          _2762 = _2622;
                          _2763 = _2623;
                          _2764 = _2624;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2626 = (_1340 == 7);
          if (_2626) {
            float _2629 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2630 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2631 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2633 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2634 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2635 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2637 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2638 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2639 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2640 = _2629 * _1322;
            float _2641 = mad(_2630, _1323, _2640);
            float _2642 = mad(_2631, _1324, _2641);
            float _2643 = _2633 * _1322;
            float _2644 = mad(_2634, _1323, _2643);
            float _2645 = mad(_2635, _1324, _2644);
            float _2646 = _2637 * _1322;
            float _2647 = mad(_2638, _1323, _2646);
            float _2648 = mad(_2639, _1324, _2647);
            float _2649 = _2642 * _49;
            float _2650 = mad(_50, _2645, _2649);
            float _2651 = mad(_51, _2648, _2650);
            float _2652 = _2642 * _52;
            float _2653 = mad(_53, _2645, _2652);
            float _2654 = mad(_54, _2648, _2653);
            float _2655 = _2642 * _55;
            float _2656 = mad(_56, _2645, _2655);
            float _2657 = mad(_57, _2648, _2656);
            float _2658 = _2651 * 9.999999747378752e-05f;
            float _2659 = _2654 * 9.999999747378752e-05f;
            float _2660 = _2657 * 9.999999747378752e-05f;
            float _2661 = log2(_2658);
            float _2662 = log2(_2659);
            float _2663 = log2(_2660);
            float _2664 = _2661 * 0.1593017578125f;
            float _2665 = _2662 * 0.1593017578125f;
            float _2666 = _2663 * 0.1593017578125f;
            float _2667 = exp2(_2664);
            float _2668 = exp2(_2665);
            float _2669 = exp2(_2666);
            float _2670 = _2667 * 18.8515625f;
            float _2671 = _2668 * 18.8515625f;
            float _2672 = _2669 * 18.8515625f;
            float _2673 = _2670 + 0.8359375f;
            float _2674 = _2671 + 0.8359375f;
            float _2675 = _2672 + 0.8359375f;
            float _2676 = _2667 * 18.6875f;
            float _2677 = _2668 * 18.6875f;
            float _2678 = _2669 * 18.6875f;
            float _2679 = _2676 + 1.0f;
            float _2680 = _2677 + 1.0f;
            float _2681 = _2678 + 1.0f;
            float _2682 = 1.0f / _2679;
            float _2683 = 1.0f / _2680;
            float _2684 = 1.0f / _2681;
            float _2685 = _2682 * _2673;
            float _2686 = _2683 * _2674;
            float _2687 = _2684 * _2675;
            float _2688 = log2(_2685);
            float _2689 = log2(_2686);
            float _2690 = log2(_2687);
            float _2691 = _2688 * 78.84375f;
            float _2692 = _2689 * 78.84375f;
            float _2693 = _2690 * 78.84375f;
            float _2694 = exp2(_2691);
            float _2695 = exp2(_2692);
            float _2696 = exp2(_2693);
            _2762 = _2694;
            _2763 = _2695;
            _2764 = _2696;
          } else {
            bool _2698 = (_1340 == 8);
            _2762 = _1322;
            _2763 = _1323;
            _2764 = _1324;
            if (!_2698) {
              bool _2700 = (_1340 == 9);
              float _2702 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2703 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2704 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2706 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2707 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2708 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2710 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2711 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2712 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2700) {
                float _2714 = _2702 * _1310;
                float _2715 = mad(_2703, _1311, _2714);
                float _2716 = mad(_2704, _1312, _2715);
                float _2717 = _2706 * _1310;
                float _2718 = mad(_2707, _1311, _2717);
                float _2719 = mad(_2708, _1312, _2718);
                float _2720 = _2710 * _1310;
                float _2721 = mad(_2711, _1311, _2720);
                float _2722 = mad(_2712, _1312, _2721);
                float _2723 = _2716 * _49;
                float _2724 = mad(_50, _2719, _2723);
                float _2725 = mad(_51, _2722, _2724);
                float _2726 = _2716 * _52;
                float _2727 = mad(_53, _2719, _2726);
                float _2728 = mad(_54, _2722, _2727);
                float _2729 = _2716 * _55;
                float _2730 = mad(_56, _2719, _2729);
                float _2731 = mad(_57, _2722, _2730);
                _2762 = _2725;
                _2763 = _2728;
                _2764 = _2731;
              } else {
                float _2733 = _2702 * _1336;
                float _2734 = mad(_2703, _1337, _2733);
                float _2735 = mad(_2704, _1338, _2734);
                float _2736 = _2706 * _1336;
                float _2737 = mad(_2707, _1337, _2736);
                float _2738 = mad(_2708, _1338, _2737);
                float _2739 = _2710 * _1336;
                float _2740 = mad(_2711, _1337, _2739);
                float _2741 = mad(_2712, _1338, _2740);
                float _2742 = _2735 * _49;
                float _2743 = mad(_50, _2738, _2742);
                float _2744 = mad(_51, _2741, _2743);
                float _2745 = _2735 * _52;
                float _2746 = mad(_53, _2738, _2745);
                float _2747 = mad(_54, _2741, _2746);
                float _2748 = _2735 * _55;
                float _2749 = mad(_56, _2738, _2748);
                float _2750 = mad(_57, _2741, _2749);
                float _2751 = _RootShaderParameters_040z;
                float _2752 = log2(_2744);
                float _2753 = log2(_2747);
                float _2754 = log2(_2750);
                float _2755 = _2752 * _2751;
                float _2756 = _2753 * _2751;
                float _2757 = _2754 * _2751;
                float _2758 = exp2(_2755);
                float _2759 = exp2(_2756);
                float _2760 = exp2(_2757);
                _2762 = _2758;
                _2763 = _2759;
                _2764 = _2760;
              }
            }
          }
        }
      }
    }
  }
  float _2765 = _2762 * 0.9523810148239136f;
  float _2766 = _2763 * 0.9523810148239136f;
  float _2767 = _2764 * 0.9523810148239136f;
  // _2768 = _1;
  RWOutputTexture[int3(_8, _9, _10)] = float4(_2765, _2766, _2767, 0.0f);
}
