#include "./shared.h"
#include "./tonemapper.hlsl"

Texture2D<float4> Textures_1 : register(t0);

Texture2D<float4> Textures_2 : register(t1);

Texture2D<float4> Textures_3 : register(t2);

Texture2D<float4> Textures_4 : register(t3);

RWTexture3D<float> RWOutputTexture : register(u0);

cbuffer _RootShaderParameters : register(b0) {
  float _RootShaderParameters_005x : packoffset(c005.x);
  float _RootShaderParameters_005y : packoffset(c005.y);
  float _RootShaderParameters_005z : packoffset(c005.z);
  float _RootShaderParameters_005w : packoffset(c005.w);
  float _RootShaderParameters_006x : packoffset(c006.x);
  float _RootShaderParameters_008x : packoffset(c008.x);
  float _RootShaderParameters_008y : packoffset(c008.y);
  float _RootShaderParameters_008z : packoffset(c008.z);
  float _RootShaderParameters_008w : packoffset(c008.w);
  float _RootShaderParameters_009x : packoffset(c009.x);
  float _RootShaderParameters_010x : packoffset(c010.x);
  float _RootShaderParameters_010y : packoffset(c010.y);
  float _RootShaderParameters_010z : packoffset(c010.z);
  float _RootShaderParameters_010w : packoffset(c010.w);
  float _RootShaderParameters_011x : packoffset(c011.x);
  float _RootShaderParameters_011y : packoffset(c011.y);
  float _RootShaderParameters_011z : packoffset(c011.z);
  float _RootShaderParameters_011w : packoffset(c011.w);
  float _RootShaderParameters_012x : packoffset(c012.x);
  float _RootShaderParameters_012y : packoffset(c012.y);
  float _RootShaderParameters_012z : packoffset(c012.z);
  float _RootShaderParameters_013x : packoffset(c013.x);
  float _RootShaderParameters_013y : packoffset(c013.y);
  float _RootShaderParameters_013z : packoffset(c013.z);
  float _RootShaderParameters_013w : packoffset(c013.w);
  float _RootShaderParameters_014x : packoffset(c014.x);
  float _RootShaderParameters_014y : packoffset(c014.y);
  float _RootShaderParameters_014z : packoffset(c014.z);
  float _RootShaderParameters_015x : packoffset(c015.x);
  float _RootShaderParameters_015y : packoffset(c015.y);
  float _RootShaderParameters_015z : packoffset(c015.z);
  float _RootShaderParameters_015w : packoffset(c015.w);
  float _RootShaderParameters_016x : packoffset(c016.x);
  float _RootShaderParameters_016y : packoffset(c016.y);
  float _RootShaderParameters_016z : packoffset(c016.z);
  float _RootShaderParameters_016w : packoffset(c016.w);
  float _RootShaderParameters_017x : packoffset(c017.x);
  float _RootShaderParameters_017y : packoffset(c017.y);
  float _RootShaderParameters_017z : packoffset(c017.z);
  float _RootShaderParameters_017w : packoffset(c017.w);
  float _RootShaderParameters_018x : packoffset(c018.x);
  float _RootShaderParameters_018y : packoffset(c018.y);
  float _RootShaderParameters_018z : packoffset(c018.z);
  float _RootShaderParameters_018w : packoffset(c018.w);
  float _RootShaderParameters_019x : packoffset(c019.x);
  float _RootShaderParameters_019y : packoffset(c019.y);
  float _RootShaderParameters_019z : packoffset(c019.z);
  float _RootShaderParameters_019w : packoffset(c019.w);
  float _RootShaderParameters_020x : packoffset(c020.x);
  float _RootShaderParameters_020y : packoffset(c020.y);
  float _RootShaderParameters_020z : packoffset(c020.z);
  float _RootShaderParameters_020w : packoffset(c020.w);
  float _RootShaderParameters_021x : packoffset(c021.x);
  float _RootShaderParameters_021y : packoffset(c021.y);
  float _RootShaderParameters_021z : packoffset(c021.z);
  float _RootShaderParameters_021w : packoffset(c021.w);
  float _RootShaderParameters_022x : packoffset(c022.x);
  float _RootShaderParameters_022y : packoffset(c022.y);
  float _RootShaderParameters_022z : packoffset(c022.z);
  float _RootShaderParameters_022w : packoffset(c022.w);
  float _RootShaderParameters_023x : packoffset(c023.x);
  float _RootShaderParameters_023y : packoffset(c023.y);
  float _RootShaderParameters_023z : packoffset(c023.z);
  float _RootShaderParameters_023w : packoffset(c023.w);
  float _RootShaderParameters_024x : packoffset(c024.x);
  float _RootShaderParameters_024y : packoffset(c024.y);
  float _RootShaderParameters_024z : packoffset(c024.z);
  float _RootShaderParameters_024w : packoffset(c024.w);
  float _RootShaderParameters_025x : packoffset(c025.x);
  float _RootShaderParameters_025y : packoffset(c025.y);
  float _RootShaderParameters_025z : packoffset(c025.z);
  float _RootShaderParameters_025w : packoffset(c025.w);
  float _RootShaderParameters_026x : packoffset(c026.x);
  float _RootShaderParameters_026y : packoffset(c026.y);
  float _RootShaderParameters_026z : packoffset(c026.z);
  float _RootShaderParameters_026w : packoffset(c026.w);
  float _RootShaderParameters_027x : packoffset(c027.x);
  float _RootShaderParameters_027y : packoffset(c027.y);
  float _RootShaderParameters_027z : packoffset(c027.z);
  float _RootShaderParameters_027w : packoffset(c027.w);
  float _RootShaderParameters_028x : packoffset(c028.x);
  float _RootShaderParameters_028y : packoffset(c028.y);
  float _RootShaderParameters_028z : packoffset(c028.z);
  float _RootShaderParameters_028w : packoffset(c028.w);
  float _RootShaderParameters_029x : packoffset(c029.x);
  float _RootShaderParameters_029y : packoffset(c029.y);
  float _RootShaderParameters_029z : packoffset(c029.z);
  float _RootShaderParameters_029w : packoffset(c029.w);
  float _RootShaderParameters_030x : packoffset(c030.x);
  float _RootShaderParameters_030y : packoffset(c030.y);
  float _RootShaderParameters_030z : packoffset(c030.z);
  float _RootShaderParameters_030w : packoffset(c030.w);
  float _RootShaderParameters_031x : packoffset(c031.x);
  float _RootShaderParameters_031y : packoffset(c031.y);
  float _RootShaderParameters_031z : packoffset(c031.z);
  float _RootShaderParameters_031w : packoffset(c031.w);
  float _RootShaderParameters_032x : packoffset(c032.x);
  float _RootShaderParameters_032y : packoffset(c032.y);
  float _RootShaderParameters_032z : packoffset(c032.z);
  float _RootShaderParameters_032w : packoffset(c032.w);
  float _RootShaderParameters_033x : packoffset(c033.x);
  float _RootShaderParameters_033y : packoffset(c033.y);
  float _RootShaderParameters_033z : packoffset(c033.z);
  float _RootShaderParameters_033w : packoffset(c033.w);
  float _RootShaderParameters_034x : packoffset(c034.x);
  float _RootShaderParameters_034y : packoffset(c034.y);
  float _RootShaderParameters_034z : packoffset(c034.z);
  float _RootShaderParameters_034w : packoffset(c034.w);
  float _RootShaderParameters_035x : packoffset(c035.x);
  float _RootShaderParameters_035y : packoffset(c035.y);
  float _RootShaderParameters_035z : packoffset(c035.z);
  float _RootShaderParameters_035w : packoffset(c035.w);
  float _RootShaderParameters_036x : packoffset(c036.x);
  float _RootShaderParameters_036y : packoffset(c036.y);
  float _RootShaderParameters_036z : packoffset(c036.z);
  float _RootShaderParameters_036w : packoffset(c036.w);
  float _RootShaderParameters_037x : packoffset(c037.x);
  float _RootShaderParameters_037y : packoffset(c037.y);
  float _RootShaderParameters_037z : packoffset(c037.z);
  float _RootShaderParameters_037w : packoffset(c037.w);
  float _RootShaderParameters_038x : packoffset(c038.x);
  uint _RootShaderParameters_038z : packoffset(c038.z);
  float _RootShaderParameters_039x : packoffset(c039.x);
  float _RootShaderParameters_039y : packoffset(c039.y);
  float _RootShaderParameters_039z : packoffset(c039.z);
  float _RootShaderParameters_040y : packoffset(c040.y);
  float _RootShaderParameters_040z : packoffset(c040.z);
  uint _RootShaderParameters_040w : packoffset(c040.w);
  uint _RootShaderParameters_041x : packoffset(c041.x);
  float _RootShaderParameters_042x : packoffset(c042.x);
  float _RootShaderParameters_042y : packoffset(c042.y);
};

cbuffer UniformBufferConstants_WorkingColorSpace : register(b1) {
  float UniformBufferConstants_WorkingColorSpace_000x : packoffset(c000.x);
  float UniformBufferConstants_WorkingColorSpace_000y : packoffset(c000.y);
  float UniformBufferConstants_WorkingColorSpace_000z : packoffset(c000.z);
  float UniformBufferConstants_WorkingColorSpace_001x : packoffset(c001.x);
  float UniformBufferConstants_WorkingColorSpace_001y : packoffset(c001.y);
  float UniformBufferConstants_WorkingColorSpace_001z : packoffset(c001.z);
  float UniformBufferConstants_WorkingColorSpace_002x : packoffset(c002.x);
  float UniformBufferConstants_WorkingColorSpace_002y : packoffset(c002.y);
  float UniformBufferConstants_WorkingColorSpace_002z : packoffset(c002.z);
  float UniformBufferConstants_WorkingColorSpace_004x : packoffset(c004.x);
  float UniformBufferConstants_WorkingColorSpace_004y : packoffset(c004.y);
  float UniformBufferConstants_WorkingColorSpace_004z : packoffset(c004.z);
  float UniformBufferConstants_WorkingColorSpace_005x : packoffset(c005.x);
  float UniformBufferConstants_WorkingColorSpace_005y : packoffset(c005.y);
  float UniformBufferConstants_WorkingColorSpace_005z : packoffset(c005.z);
  float UniformBufferConstants_WorkingColorSpace_006x : packoffset(c006.x);
  float UniformBufferConstants_WorkingColorSpace_006y : packoffset(c006.y);
  float UniformBufferConstants_WorkingColorSpace_006z : packoffset(c006.z);
  float UniformBufferConstants_WorkingColorSpace_008x : packoffset(c008.x);
  float UniformBufferConstants_WorkingColorSpace_008y : packoffset(c008.y);
  float UniformBufferConstants_WorkingColorSpace_008z : packoffset(c008.z);
  float UniformBufferConstants_WorkingColorSpace_009x : packoffset(c009.x);
  float UniformBufferConstants_WorkingColorSpace_009y : packoffset(c009.y);
  float UniformBufferConstants_WorkingColorSpace_009z : packoffset(c009.z);
  float UniformBufferConstants_WorkingColorSpace_010x : packoffset(c010.x);
  float UniformBufferConstants_WorkingColorSpace_010y : packoffset(c010.y);
  float UniformBufferConstants_WorkingColorSpace_010z : packoffset(c010.z);
  float UniformBufferConstants_WorkingColorSpace_012x : packoffset(c012.x);
  float UniformBufferConstants_WorkingColorSpace_012y : packoffset(c012.y);
  float UniformBufferConstants_WorkingColorSpace_012z : packoffset(c012.z);
  float UniformBufferConstants_WorkingColorSpace_013x : packoffset(c013.x);
  float UniformBufferConstants_WorkingColorSpace_013y : packoffset(c013.y);
  float UniformBufferConstants_WorkingColorSpace_013z : packoffset(c013.z);
  float UniformBufferConstants_WorkingColorSpace_014x : packoffset(c014.x);
  float UniformBufferConstants_WorkingColorSpace_014y : packoffset(c014.y);
  float UniformBufferConstants_WorkingColorSpace_014z : packoffset(c014.z);
  float UniformBufferConstants_WorkingColorSpace_016x : packoffset(c016.x);
  float UniformBufferConstants_WorkingColorSpace_016y : packoffset(c016.y);
  float UniformBufferConstants_WorkingColorSpace_016z : packoffset(c016.z);
  float UniformBufferConstants_WorkingColorSpace_017x : packoffset(c017.x);
  float UniformBufferConstants_WorkingColorSpace_017y : packoffset(c017.y);
  float UniformBufferConstants_WorkingColorSpace_017z : packoffset(c017.z);
  float UniformBufferConstants_WorkingColorSpace_018x : packoffset(c018.x);
  float UniformBufferConstants_WorkingColorSpace_018y : packoffset(c018.y);
  float UniformBufferConstants_WorkingColorSpace_018z : packoffset(c018.z);
  uint UniformBufferConstants_WorkingColorSpace_020x : packoffset(c020.x);
};

SamplerState Samplers_1 : register(s0);

SamplerState Samplers_2 : register(s1);

SamplerState Samplers_3 : register(s2);

SamplerState Samplers_4 : register(s3);

void main() {
  // rwtexture _1 = RWOutputTexture;
  // texture _2 = Textures_4;
  // texture _3 = Textures_3;
  // texture _4 = Textures_2;
  // texture _5 = Textures_1;
  // SamplerState _6 = Samplers_4;
  // SamplerState _7 = Samplers_3;
  // SamplerState _8 = Samplers_2;
  // SamplerState _9 = Samplers_1;
  // cbuffer _10 = UniformBufferConstants_WorkingColorSpace;
  // cbuffer _11 = _RootShaderParameters;
  // _12 = _10;
  // _13 = _11;
  float _17[6];
  float _18[6];
  float _19[6];
  float _20[6];
  float _21 = float(_14);
  float _22 = float(_15);
  float _23 = _21 + 0.5f;
  float _24 = _22 + 0.5f;
  float _26 = _RootShaderParameters_042x;
  float _27 = _RootShaderParameters_042y;
  float _28 = _26 * _23;
  float _29 = _27 * _24;
  float _30 = _28 + -0.015625f;
  float _31 = _29 + -0.015625f;
  float _32 = _30 * 1.0322580337524414f;
  float _33 = _31 * 1.0322580337524414f;
  float _34 = float(_16);
  float _35 = _34 * 0.032258063554763794f;
  uint _37 = _RootShaderParameters_041x;
  bool _38 = (_37 == 1);
  float _55 = 1.379158854484558f;
  float _56 = -0.3088507056236267f;
  float _57 = -0.07034677267074585f;
  float _58 = -0.06933528929948807f;
  float _59 = 1.0822921991348267f;
  float _60 = -0.012962047010660172f;
  float _61 = -0.002159259282052517f;
  float _62 = -0.045465391129255295f;
  float _63 = 1.0477596521377563f;
  float _121;
  float _122;
  float _123;
  float _172;
  float _901;
  float _937;
  float _948;
  float _1012;
  float _1191;
  float _1202;
  float _1213;
  float _1463;
  float _1464;
  float _1465;
  float _1476;
  float _1487;
  float _1669;
  float _1705;
  float _1716;
  float _1755;
  float _1865;
  float _1939;
  float _2013;
  float _2092;
  float _2093;
  float _2094;
  float _2245;
  float _2281;
  float _2292;
  float _2331;
  float _2441;
  float _2515;
  float _2589;
  float _2668;
  float _2669;
  float _2670;
  float _2847;
  float _2848;
  float _2849;
  if (!_38) {
    bool _40 = (_37 == 2);
    _55 = 1.02579927444458f;
    _56 = -0.020052503794431686f;
    _57 = -0.0057713985443115234f;
    _58 = -0.0022350111976265907f;
    _59 = 1.0045825242996216f;
    _60 = -0.002352306619286537f;
    _61 = -0.005014004185795784f;
    _62 = -0.025293385609984398f;
    _63 = 1.0304402112960815f;
    if (!_40) {
      bool _42 = (_37 == 3);
      _55 = 0.6954522132873535f;
      _56 = 0.14067870378494263f;
      _57 = 0.16386906802654266f;
      _58 = 0.044794563204050064f;
      _59 = 0.8596711158752441f;
      _60 = 0.0955343171954155f;
      _61 = -0.005525882821530104f;
      _62 = 0.004025210160762072f;
      _63 = 1.0015007257461548f;
      if (!_42) {
        bool _44 = (_37 == 4);
        float _45 = _44 ? 1.0f : 1.7050515413284302f;
        float _46 = _44 ? 0.0f : -0.6217905879020691f;
        float _47 = _44 ? 0.0f : -0.0832584798336029f;
        float _48 = _44 ? 0.0f : -0.13025718927383423f;
        float _49 = _44 ? 1.0f : 1.1408027410507202f;
        float _50 = _44 ? 0.0f : -0.010548528283834457f;
        float _51 = _44 ? 0.0f : -0.024003278464078903f;
        float _52 = _44 ? 0.0f : -0.1289687603712082f;
        float _53 = _44 ? 1.0f : 1.152971863746643f;
        _55 = _45;
        _56 = _46;
        _57 = _47;
        _58 = _48;
        _59 = _49;
        _60 = _50;
        _61 = _51;
        _62 = _52;
        _63 = _53;
      }
    }
  }
  uint _65 = _RootShaderParameters_040w;
  bool _66 = (_65 > 2);
  if (_66) {
    float _68 = log2(_32);
    float _69 = log2(_33);
    float _70 = log2(_35);
    float _71 = _68 * 0.012683313339948654f;
    float _72 = _69 * 0.012683313339948654f;
    float _73 = _70 * 0.012683313339948654f;
    float _74 = exp2(_71);
    float _75 = exp2(_72);
    float _76 = exp2(_73);
    float _77 = _74 + -0.8359375f;
    float _78 = _75 + -0.8359375f;
    float _79 = _76 + -0.8359375f;
    float _80 = max(0.0f, _77);
    float _81 = max(0.0f, _78);
    float _82 = max(0.0f, _79);
    float _83 = _74 * 18.6875f;
    float _84 = _75 * 18.6875f;
    float _85 = _76 * 18.6875f;
    float _86 = 18.8515625f - _83;
    float _87 = 18.8515625f - _84;
    float _88 = 18.8515625f - _85;
    float _89 = _80 / _86;
    float _90 = _81 / _87;
    float _91 = _82 / _88;
    float _92 = log2(_89);
    float _93 = log2(_90);
    float _94 = log2(_91);
    float _95 = _92 * 6.277394771575928f;
    float _96 = _93 * 6.277394771575928f;
    float _97 = _94 * 6.277394771575928f;
    float _98 = exp2(_95);
    float _99 = exp2(_96);
    float _100 = exp2(_97);
    float _101 = _98 * 100.0f;
    float _102 = _99 * 100.0f;
    float _103 = _100 * 100.0f;
    _121 = _101;
    _122 = _102;
    _123 = _103;
  } else {
    float _105 = _30 * 14.45161247253418f;
    float _106 = _105 + -6.07624626159668f;
    float _107 = _31 * 14.45161247253418f;
    float _108 = _107 + -6.07624626159668f;
    float _109 = _34 * 0.4516128897666931f;
    float _110 = _109 + -6.07624626159668f;
    float _111 = exp2(_106);
    float _112 = exp2(_108);
    float _113 = exp2(_110);
    float _114 = _111 * 0.18000000715255737f;
    float _115 = _112 * 0.18000000715255737f;
    float _116 = _113 * 0.18000000715255737f;
    float _117 = _114 + -0.002667719265446067f;
    float _118 = _115 + -0.002667719265446067f;
    float _119 = _116 + -0.002667719265446067f;
    _121 = _117;
    _122 = _118;
    _123 = _119;
  }
  float3 input_color = float3(_121, _122, _123);  // CustomEdit

  float _125 = UniformBufferConstants_WorkingColorSpace_004x;
  float _126 = UniformBufferConstants_WorkingColorSpace_004y;
  float _127 = UniformBufferConstants_WorkingColorSpace_004z;
  float _129 = UniformBufferConstants_WorkingColorSpace_005x;
  float _130 = UniformBufferConstants_WorkingColorSpace_005y;
  float _131 = UniformBufferConstants_WorkingColorSpace_005z;
  float _133 = UniformBufferConstants_WorkingColorSpace_006x;
  float _134 = UniformBufferConstants_WorkingColorSpace_006y;
  float _135 = UniformBufferConstants_WorkingColorSpace_006z;
  float _137 = UniformBufferConstants_WorkingColorSpace_000x;
  float _138 = UniformBufferConstants_WorkingColorSpace_000y;
  float _139 = UniformBufferConstants_WorkingColorSpace_000z;
  float _141 = UniformBufferConstants_WorkingColorSpace_001x;
  float _142 = UniformBufferConstants_WorkingColorSpace_001y;
  float _143 = UniformBufferConstants_WorkingColorSpace_001z;
  float _145 = UniformBufferConstants_WorkingColorSpace_002x;
  float _146 = UniformBufferConstants_WorkingColorSpace_002y;
  float _147 = UniformBufferConstants_WorkingColorSpace_002z;
  uint _149 = _RootShaderParameters_038z;
  bool _150 = (_149 != 0);
  float _152 = _RootShaderParameters_035y;
  float _153 = _RootShaderParameters_035x;
  float _154 = _153 * 1.0005563497543335f;
  float _155 = 0.9994439482688904f / _153;
  bool _156 = !(_154 <= 7000.0f);
  if (!_156) {
    float _158 = _155 * 4607000064.0f;
    float _159 = 2967800.0f - _158;
    float _160 = _159 * _155;
    float _161 = _160 + 99.11000061035156f;
    float _162 = _161 * _155;
    float _163 = _162 + 0.24406300485134125f;
    _172 = _163;
  } else {
    float _165 = _155 * 2006400000.0f;
    float _166 = 1901800.0f - _165;
    float _167 = _166 * _155;
    float _168 = _167 + 247.47999572753906f;
    float _169 = _168 * _155;
    float _170 = _169 + 0.23703999817371368f;
    _172 = _170;
  }
  float _173 = _172 * _172;
  float _174 = _173 * 3.0f;
  float _175 = _172 * 2.869999885559082f;
  float _176 = _175 + -0.2750000059604645f;
  float _177 = _176 - _174;
  float _178 = _153 * 1.2864121856637212e-07f;
  float _179 = _178 + 0.00015411825734190643f;
  float _180 = _179 * _153;
  float _181 = _180 + 0.8601177334785461f;
  float _182 = _153 * 7.081451371959702e-07f;
  float _183 = _182 + 0.0008424202096648514f;
  float _184 = _183 * _153;
  float _185 = _184 + 1.0f;
  float _186 = _181 / _185;
  float _187 = _153 * 4.204816761443908e-08f;
  float _188 = _187 + 4.228062607580796e-05f;
  float _189 = _188 * _153;
  float _190 = _189 + 0.31739872694015503f;
  float _191 = _153 * 2.8974181986995973e-05f;
  float _192 = 1.0f - _191;
  float _193 = _153 * _153;
  float _194 = _193 * 1.6145605741257896e-07f;
  float _195 = _192 + _194;
  float _196 = _190 / _195;
  float _197 = _186 * 3.0f;
  float _198 = _186 * 2.0f;
  float _199 = _196 * 8.0f;
  float _200 = _198 + 4.0f;
  float _201 = _200 - _199;
  float _202 = _197 / _201;
  float _203 = _196 * 2.0f;
  float _204 = _203 / _201;
  bool _205 = (_153 < 4000.0f);
  float _206 = _205 ? _202 : _172;
  float _207 = _205 ? _204 : _177;
  float _208 = _153 * 1916156.25f;
  float _209 = -1137581184.0f - _208;
  float _210 = _193 * 1.5317699909210205f;
  float _211 = _209 - _210;
  float _212 = _153 + 1189.6199951171875f;
  float _213 = _212 * _153;
  float _214 = _213 + 1412139.875f;
  float _215 = _214 * _214;
  float _216 = _211 / _215;
  float _217 = _153 * 705674.0f;
  float _218 = 1974715392.0f - _217;
  float _219 = _193 * 308.60699462890625f;
  float _220 = _218 - _219;
  float _221 = _153 * 179.45599365234375f;
  float _222 = 6193636.0f - _221;
  float _223 = _222 + _193;
  float _224 = _223 * _223;
  float _225 = _220 / _224;
  float _226 = dot(float2(_216, _225), float2(_216, _225));
  float _227 = rsqrt(_226);
  float _228 = _152 * 0.05000000074505806f;
  float _229 = _228 * _225;
  float _230 = _229 * _227;
  float _231 = _230 + _186;
  float _232 = _228 * _216;
  float _233 = _232 * _227;
  float _234 = _196 - _233;
  float _235 = _231 * 3.0f;
  float _236 = _231 * 2.0f;
  float _237 = _234 * 8.0f;
  float _238 = 4.0f - _237;
  float _239 = _238 + _236;
  float _240 = _235 / _239;
  float _241 = _234 * 2.0f;
  float _242 = _241 / _239;
  float _243 = _240 - _202;
  float _244 = _242 - _204;
  float _245 = _243 + _206;
  float _246 = _244 + _207;
  float _247 = _150 ? _245 : 0.3127000033855438f;
  float _248 = _150 ? _246 : 0.32899999618530273f;
  float _249 = _150 ? 0.3127000033855438f : _245;
  float _250 = _150 ? 0.32899999618530273f : _246;
  float _251 = max(_248, 1.000000013351432e-10f);
  float _252 = _247 / _251;
  float _253 = 1.0f - _247;
  float _254 = _253 - _248;
  float _255 = _254 / _251;
  float _256 = max(_250, 1.000000013351432e-10f);
  float _257 = _249 / _256;
  float _258 = 1.0f - _249;
  float _259 = _258 - _250;
  float _260 = _259 / _256;
  float _261 = _252 * 0.8950999975204468f;
  float _262 = _261 + 0.266400009393692f;
  float _263 = mad(-0.16140000522136688f, _255, _262);
  float _264 = _252 * 0.7501999735832214f;
  float _265 = 1.7135000228881836f - _264;
  float _266 = mad(0.03669999912381172f, _255, _265);
  float _267 = _252 * 0.03889999911189079f;
  float _268 = _267 + -0.06849999725818634f;
  float _269 = mad(1.0296000242233276f, _255, _268);
  float _270 = _257 * 0.8950999975204468f;
  float _271 = _270 + 0.266400009393692f;
  float _272 = mad(-0.16140000522136688f, _260, _271);
  float _273 = _257 * 0.7501999735832214f;
  float _274 = 1.7135000228881836f - _273;
  float _275 = mad(0.03669999912381172f, _260, _274);
  float _276 = _257 * 0.03889999911189079f;
  float _277 = _276 + -0.06849999725818634f;
  float _278 = mad(1.0296000242233276f, _260, _277);
  float _279 = _272 / _263;
  float _280 = _275 / _266;
  float _281 = _278 / _269;
  float _282 = mad(_280, -0.7501999735832214f, 0.0f);
  float _283 = mad(_280, 1.7135000228881836f, 0.0f);
  float _284 = mad(_280, 0.03669999912381172f, -0.0f);
  float _285 = mad(_281, 0.03889999911189079f, 0.0f);
  float _286 = mad(_281, -0.06849999725818634f, 0.0f);
  float _287 = mad(_281, 1.0296000242233276f, 0.0f);
  float _288 = _279 * 0.883457362651825f;
  float _289 = mad(-0.1470542997121811f, _282, _288);
  float _290 = mad(0.1599626988172531f, _285, _289);
  float _291 = _279 * 0.26293492317199707f;
  float _292 = mad(-0.1470542997121811f, _283, _291);
  float _293 = mad(0.1599626988172531f, _286, _292);
  float _294 = _279 * -0.15930065512657166f;
  float _295 = mad(-0.1470542997121811f, _284, _294);
  float _296 = mad(0.1599626988172531f, _287, _295);
  float _297 = _279 * 0.38695648312568665f;
  float _298 = mad(0.5183603167533875f, _282, _297);
  float _299 = mad(0.04929120093584061f, _285, _298);
  float _300 = _279 * 0.11516613513231277f;
  float _301 = mad(0.5183603167533875f, _283, _300);
  float _302 = mad(0.04929120093584061f, _286, _301);
  float _303 = _279 * -0.0697740763425827f;
  float _304 = mad(0.5183603167533875f, _284, _303);
  float _305 = mad(0.04929120093584061f, _287, _304);
  float _306 = _279 * -0.007634039502590895f;
  float _307 = mad(0.04004279896616936f, _282, _306);
  float _308 = mad(0.9684867262840271f, _285, _307);
  float _309 = _279 * -0.0022720457054674625f;
  float _310 = mad(0.04004279896616936f, _283, _309);
  float _311 = mad(0.9684867262840271f, _286, _310);
  float _312 = _279 * 0.0013765322510153055f;
  float _313 = mad(0.04004279896616936f, _284, _312);
  float _314 = mad(0.9684867262840271f, _287, _313);
  float _315 = _290 * _137;
  float _316 = mad(_293, _141, _315);
  float _317 = mad(_296, _145, _316);
  float _318 = _290 * _138;
  float _319 = mad(_293, _142, _318);
  float _320 = mad(_296, _146, _319);
  float _321 = _290 * _139;
  float _322 = mad(_293, _143, _321);
  float _323 = mad(_296, _147, _322);
  float _324 = _299 * _137;
  float _325 = mad(_302, _141, _324);
  float _326 = mad(_305, _145, _325);
  float _327 = _299 * _138;
  float _328 = mad(_302, _142, _327);
  float _329 = mad(_305, _146, _328);
  float _330 = _299 * _139;
  float _331 = mad(_302, _143, _330);
  float _332 = mad(_305, _147, _331);
  float _333 = _308 * _137;
  float _334 = mad(_311, _141, _333);
  float _335 = mad(_314, _145, _334);
  float _336 = _308 * _138;
  float _337 = mad(_311, _142, _336);
  float _338 = mad(_314, _146, _337);
  float _339 = _308 * _139;
  float _340 = mad(_311, _143, _339);
  float _341 = mad(_314, _147, _340);
  float _342 = _317 * _125;
  float _343 = mad(_126, _326, _342);
  float _344 = mad(_127, _335, _343);
  float _345 = _320 * _125;
  float _346 = mad(_126, _329, _345);
  float _347 = mad(_127, _338, _346);
  float _348 = _323 * _125;
  float _349 = mad(_126, _332, _348);
  float _350 = mad(_127, _341, _349);
  float _351 = _317 * _129;
  float _352 = mad(_130, _326, _351);
  float _353 = mad(_131, _335, _352);
  float _354 = _320 * _129;
  float _355 = mad(_130, _329, _354);
  float _356 = mad(_131, _338, _355);
  float _357 = _323 * _129;
  float _358 = mad(_130, _332, _357);
  float _359 = mad(_131, _341, _358);
  float _360 = _317 * _133;
  float _361 = mad(_134, _326, _360);
  float _362 = mad(_135, _335, _361);
  float _363 = _320 * _133;
  float _364 = mad(_134, _329, _363);
  float _365 = mad(_135, _338, _364);
  float _366 = _323 * _133;
  float _367 = mad(_134, _332, _366);
  float _368 = mad(_135, _341, _367);
  float _369 = _344 * _121;
  float _370 = mad(_347, _122, _369);
  float _371 = mad(_350, _123, _370);
  float _372 = _353 * _121;
  float _373 = mad(_356, _122, _372);
  float _374 = mad(_359, _123, _373);
  float _375 = _362 * _121;
  float _376 = mad(_365, _122, _375);
  float _377 = mad(_368, _123, _376);
  float _379 = UniformBufferConstants_WorkingColorSpace_008x;
  float _380 = UniformBufferConstants_WorkingColorSpace_008y;
  float _381 = UniformBufferConstants_WorkingColorSpace_008z;
  float _383 = UniformBufferConstants_WorkingColorSpace_009x;
  float _384 = UniformBufferConstants_WorkingColorSpace_009y;
  float _385 = UniformBufferConstants_WorkingColorSpace_009z;
  float _387 = UniformBufferConstants_WorkingColorSpace_010x;
  float _388 = UniformBufferConstants_WorkingColorSpace_010y;
  float _389 = UniformBufferConstants_WorkingColorSpace_010z;
  float _390 = _379 * _371;
  float _391 = mad(_380, _374, _390);
  float _392 = mad(_381, _377, _391);
  float _393 = _383 * _371;
  float _394 = mad(_384, _374, _393);
  float _395 = mad(_385, _377, _394);
  float _396 = _387 * _371;
  float _397 = mad(_388, _374, _396);
  float _398 = mad(_389, _377, _397);
  float _399 = dot(float3(_392, _395, _398), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _400 = _392 / _399;
  float _401 = _395 / _399;
  float _402 = _398 / _399;
  float _403 = _400 + -1.0f;
  float _404 = _401 + -1.0f;
  float _405 = _402 + -1.0f;
  float _406 = dot(float3(_403, _404, _405), float3(_403, _404, _405));
  float _407 = _406 * -4.0f;
  float _408 = exp2(_407);
  float _409 = 1.0f - _408;
  float _411 = _RootShaderParameters_036z;
  float _412 = _399 * _399;
  float _413 = _412 * -4.0f;
  float _414 = _413 * _411;
  float _415 = exp2(_414);
  float _416 = 1.0f - _415;
  float _417 = _416 * _409;
  float _418 = _392 * 1.370412826538086f;
  float _419 = mad(-0.32929131388664246f, _395, _418);
  float _420 = mad(-0.06368283927440643f, _398, _419);
  float _421 = _392 * -0.08343426138162613f;
  float _422 = mad(1.0970908403396606f, _395, _421);
  float _423 = mad(-0.010861567221581936f, _398, _422);
  float _424 = _392 * -0.02579325996339321f;
  float _425 = mad(-0.09862564504146576f, _395, _424);
  float _426 = mad(1.203694462776184f, _398, _425);
  float _427 = _420 - _392;
  float _428 = _423 - _395;
  float _429 = _426 - _398;
  float _430 = _427 * _417;
  float _431 = _428 * _417;
  float _432 = _429 * _417;
  float _433 = _430 + _392;
  float _434 = _431 + _395;
  float _435 = _432 + _398;
  float _436 = dot(float3(_433, _434, _435), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _438 = _RootShaderParameters_024x;
  float _439 = _RootShaderParameters_024y;
  float _440 = _RootShaderParameters_024z;
  float _441 = _RootShaderParameters_024w;
  float _443 = _RootShaderParameters_019x;
  float _444 = _RootShaderParameters_019y;
  float _445 = _RootShaderParameters_019z;
  float _446 = _RootShaderParameters_019w;
  float _447 = _443 + _438;
  float _448 = _444 + _439;
  float _449 = _445 + _440;
  float _450 = _446 + _441;
  float _452 = _RootShaderParameters_023x;
  float _453 = _RootShaderParameters_023y;
  float _454 = _RootShaderParameters_023z;
  float _455 = _RootShaderParameters_023w;
  float _457 = _RootShaderParameters_018x;
  float _458 = _RootShaderParameters_018y;
  float _459 = _RootShaderParameters_018z;
  float _460 = _RootShaderParameters_018w;
  float _461 = _457 * _452;
  float _462 = _458 * _453;
  float _463 = _459 * _454;
  float _464 = _460 * _455;
  float _466 = _RootShaderParameters_022x;
  float _467 = _RootShaderParameters_022y;
  float _468 = _RootShaderParameters_022z;
  float _469 = _RootShaderParameters_022w;
  float _471 = _RootShaderParameters_017x;
  float _472 = _RootShaderParameters_017y;
  float _473 = _RootShaderParameters_017z;
  float _474 = _RootShaderParameters_017w;
  float _475 = _471 * _466;
  float _476 = _472 * _467;
  float _477 = _473 * _468;
  float _478 = _474 * _469;
  float _480 = _RootShaderParameters_021x;
  float _481 = _RootShaderParameters_021y;
  float _482 = _RootShaderParameters_021z;
  float _483 = _RootShaderParameters_021w;
  float _485 = _RootShaderParameters_016x;
  float _486 = _RootShaderParameters_016y;
  float _487 = _RootShaderParameters_016z;
  float _488 = _RootShaderParameters_016w;
  float _489 = _485 * _480;
  float _490 = _486 * _481;
  float _491 = _487 * _482;
  float _492 = _488 * _483;
  float _494 = _RootShaderParameters_020x;
  float _495 = _RootShaderParameters_020y;
  float _496 = _RootShaderParameters_020z;
  float _497 = _RootShaderParameters_020w;
  float _499 = _RootShaderParameters_015x;
  float _500 = _RootShaderParameters_015y;
  float _501 = _RootShaderParameters_015z;
  float _502 = _RootShaderParameters_015w;
  float _503 = _499 * _494;
  float _504 = _500 * _495;
  float _505 = _501 * _496;
  float _506 = _502 * _497;
  float _507 = _503 * _506;
  float _508 = _504 * _506;
  float _509 = _505 * _506;
  float _510 = _433 - _436;
  float _511 = _434 - _436;
  float _512 = _435 - _436;
  float _513 = _507 * _510;
  float _514 = _508 * _511;
  float _515 = _509 * _512;
  float _516 = _513 + _436;
  float _517 = _514 + _436;
  float _518 = _515 + _436;
  float _519 = max(0.0f, _516);
  float _520 = max(0.0f, _517);
  float _521 = max(0.0f, _518);
  float _522 = _489 * _492;
  float _523 = _490 * _492;
  float _524 = _491 * _492;
  float _525 = _519 * 5.55555534362793f;
  float _526 = _520 * 5.55555534362793f;
  float _527 = _521 * 5.55555534362793f;
  float _528 = log2(_525);
  float _529 = log2(_526);
  float _530 = log2(_527);
  float _531 = _522 * _528;
  float _532 = _523 * _529;
  float _533 = _524 * _530;
  float _534 = exp2(_531);
  float _535 = exp2(_532);
  float _536 = exp2(_533);
  float _537 = _534 * 0.18000000715255737f;
  float _538 = _535 * 0.18000000715255737f;
  float _539 = _536 * 0.18000000715255737f;
  float _540 = _475 * _478;
  float _541 = _476 * _478;
  float _542 = _477 * _478;
  float _543 = 1.0f / _540;
  float _544 = 1.0f / _541;
  float _545 = 1.0f / _542;
  float _546 = log2(_537);
  float _547 = log2(_538);
  float _548 = log2(_539);
  float _549 = _546 * _543;
  float _550 = _547 * _544;
  float _551 = _548 * _545;
  float _552 = exp2(_549);
  float _553 = exp2(_550);
  float _554 = exp2(_551);
  float _555 = _461 * _464;
  float _556 = _462 * _464;
  float _557 = _463 * _464;
  float _558 = _555 * _552;
  float _559 = _556 * _553;
  float _560 = _557 * _554;
  float _561 = _447 + _450;
  float _562 = _448 + _450;
  float _563 = _449 + _450;
  float _564 = _561 + _558;
  float _565 = _562 + _559;
  float _566 = _563 + _560;
  float _567 = _RootShaderParameters_035z;
  float _568 = _436 / _567;
  float _569 = saturate(_568);
  float _570 = _569 * 2.0f;
  float _571 = 3.0f - _570;
  float _572 = _569 * _569;
  float _573 = _572 * _571;
  float _574 = 1.0f - _573;
  float _576 = _RootShaderParameters_034x;
  float _577 = _RootShaderParameters_034y;
  float _578 = _RootShaderParameters_034z;
  float _579 = _RootShaderParameters_034w;
  float _580 = _443 + _576;
  float _581 = _444 + _577;
  float _582 = _445 + _578;
  float _583 = _446 + _579;
  float _585 = _RootShaderParameters_033x;
  float _586 = _RootShaderParameters_033y;
  float _587 = _RootShaderParameters_033z;
  float _588 = _RootShaderParameters_033w;
  float _589 = _457 * _585;
  float _590 = _458 * _586;
  float _591 = _459 * _587;
  float _592 = _460 * _588;
  float _594 = _RootShaderParameters_032x;
  float _595 = _RootShaderParameters_032y;
  float _596 = _RootShaderParameters_032z;
  float _597 = _RootShaderParameters_032w;
  float _598 = _471 * _594;
  float _599 = _472 * _595;
  float _600 = _473 * _596;
  float _601 = _474 * _597;
  float _603 = _RootShaderParameters_031x;
  float _604 = _RootShaderParameters_031y;
  float _605 = _RootShaderParameters_031z;
  float _606 = _RootShaderParameters_031w;
  float _607 = _485 * _603;
  float _608 = _486 * _604;
  float _609 = _487 * _605;
  float _610 = _488 * _606;
  float _612 = _RootShaderParameters_030x;
  float _613 = _RootShaderParameters_030y;
  float _614 = _RootShaderParameters_030z;
  float _615 = _RootShaderParameters_030w;
  float _616 = _499 * _612;
  float _617 = _500 * _613;
  float _618 = _501 * _614;
  float _619 = _502 * _615;
  float _620 = _616 * _619;
  float _621 = _617 * _619;
  float _622 = _618 * _619;
  float _623 = _620 * _510;
  float _624 = _621 * _511;
  float _625 = _622 * _512;
  float _626 = _623 + _436;
  float _627 = _624 + _436;
  float _628 = _625 + _436;
  float _629 = max(0.0f, _626);
  float _630 = max(0.0f, _627);
  float _631 = max(0.0f, _628);
  float _632 = _607 * _610;
  float _633 = _608 * _610;
  float _634 = _609 * _610;
  float _635 = _629 * 5.55555534362793f;
  float _636 = _630 * 5.55555534362793f;
  float _637 = _631 * 5.55555534362793f;
  float _638 = log2(_635);
  float _639 = log2(_636);
  float _640 = log2(_637);
  float _641 = _632 * _638;
  float _642 = _633 * _639;
  float _643 = _634 * _640;
  float _644 = exp2(_641);
  float _645 = exp2(_642);
  float _646 = exp2(_643);
  float _647 = _644 * 0.18000000715255737f;
  float _648 = _645 * 0.18000000715255737f;
  float _649 = _646 * 0.18000000715255737f;
  float _650 = _598 * _601;
  float _651 = _599 * _601;
  float _652 = _600 * _601;
  float _653 = 1.0f / _650;
  float _654 = 1.0f / _651;
  float _655 = 1.0f / _652;
  float _656 = log2(_647);
  float _657 = log2(_648);
  float _658 = log2(_649);
  float _659 = _656 * _653;
  float _660 = _657 * _654;
  float _661 = _658 * _655;
  float _662 = exp2(_659);
  float _663 = exp2(_660);
  float _664 = exp2(_661);
  float _665 = _589 * _592;
  float _666 = _590 * _592;
  float _667 = _591 * _592;
  float _668 = _665 * _662;
  float _669 = _666 * _663;
  float _670 = _667 * _664;
  float _671 = _580 + _583;
  float _672 = _581 + _583;
  float _673 = _582 + _583;
  float _674 = _671 + _668;
  float _675 = _672 + _669;
  float _676 = _673 + _670;
  float _677 = _RootShaderParameters_036x;
  float _679 = _RootShaderParameters_035w;
  float _680 = _677 - _679;
  float _681 = _436 - _679;
  float _682 = _681 / _680;
  float _683 = saturate(_682);
  float _684 = _683 * 2.0f;
  float _685 = 3.0f - _684;
  float _686 = _683 * _683;
  float _687 = _686 * _685;
  float _689 = _RootShaderParameters_029x;
  float _690 = _RootShaderParameters_029y;
  float _691 = _RootShaderParameters_029z;
  float _692 = _RootShaderParameters_029w;
  float _693 = _443 + _689;
  float _694 = _444 + _690;
  float _695 = _445 + _691;
  float _696 = _446 + _692;
  float _698 = _RootShaderParameters_028x;
  float _699 = _RootShaderParameters_028y;
  float _700 = _RootShaderParameters_028z;
  float _701 = _RootShaderParameters_028w;
  float _702 = _457 * _698;
  float _703 = _458 * _699;
  float _704 = _459 * _700;
  float _705 = _460 * _701;
  float _707 = _RootShaderParameters_027x;
  float _708 = _RootShaderParameters_027y;
  float _709 = _RootShaderParameters_027z;
  float _710 = _RootShaderParameters_027w;
  float _711 = _471 * _707;
  float _712 = _472 * _708;
  float _713 = _473 * _709;
  float _714 = _474 * _710;
  float _716 = _RootShaderParameters_026x;
  float _717 = _RootShaderParameters_026y;
  float _718 = _RootShaderParameters_026z;
  float _719 = _RootShaderParameters_026w;
  float _720 = _485 * _716;
  float _721 = _486 * _717;
  float _722 = _487 * _718;
  float _723 = _488 * _719;
  float _725 = _RootShaderParameters_025x;
  float _726 = _RootShaderParameters_025y;
  float _727 = _RootShaderParameters_025z;
  float _728 = _RootShaderParameters_025w;
  float _729 = _499 * _725;
  float _730 = _500 * _726;
  float _731 = _501 * _727;
  float _732 = _502 * _728;
  float _733 = _729 * _732;
  float _734 = _730 * _732;
  float _735 = _731 * _732;
  float _736 = _733 * _510;
  float _737 = _734 * _511;
  float _738 = _735 * _512;
  float _739 = _736 + _436;
  float _740 = _737 + _436;
  float _741 = _738 + _436;
  float _742 = max(0.0f, _739);
  float _743 = max(0.0f, _740);
  float _744 = max(0.0f, _741);
  float _745 = _720 * _723;
  float _746 = _721 * _723;
  float _747 = _722 * _723;
  float _748 = _742 * 5.55555534362793f;
  float _749 = _743 * 5.55555534362793f;
  float _750 = _744 * 5.55555534362793f;
  float _751 = log2(_748);
  float _752 = log2(_749);
  float _753 = log2(_750);
  float _754 = _745 * _751;
  float _755 = _746 * _752;
  float _756 = _747 * _753;
  float _757 = exp2(_754);
  float _758 = exp2(_755);
  float _759 = exp2(_756);
  float _760 = _757 * 0.18000000715255737f;
  float _761 = _758 * 0.18000000715255737f;
  float _762 = _759 * 0.18000000715255737f;
  float _763 = _711 * _714;
  float _764 = _712 * _714;
  float _765 = _713 * _714;
  float _766 = 1.0f / _763;
  float _767 = 1.0f / _764;
  float _768 = 1.0f / _765;
  float _769 = log2(_760);
  float _770 = log2(_761);
  float _771 = log2(_762);
  float _772 = _769 * _766;
  float _773 = _770 * _767;
  float _774 = _771 * _768;
  float _775 = exp2(_772);
  float _776 = exp2(_773);
  float _777 = exp2(_774);
  float _778 = _702 * _705;
  float _779 = _703 * _705;
  float _780 = _704 * _705;
  float _781 = _778 * _775;
  float _782 = _779 * _776;
  float _783 = _780 * _777;
  float _784 = _693 + _696;
  float _785 = _694 + _696;
  float _786 = _695 + _696;
  float _787 = _784 + _781;
  float _788 = _785 + _782;
  float _789 = _786 + _783;
  float _790 = _573 - _687;
  float _791 = _574 * _564;
  float _792 = _574 * _565;
  float _793 = _574 * _566;
  float _794 = _787 * _790;
  float _795 = _788 * _790;
  float _796 = _789 * _790;
  float _797 = _687 * _674;
  float _798 = _687 * _675;
  float _799 = _687 * _676;
  float _800 = _797 + _791;
  float _801 = _800 + _794;
  float _802 = _798 + _792;
  float _803 = _802 + _795;
  float _804 = _799 + _793;
  float _805 = _804 + _796;
  float _807 = UniformBufferConstants_WorkingColorSpace_012x;
  float _808 = UniformBufferConstants_WorkingColorSpace_012y;
  float _809 = UniformBufferConstants_WorkingColorSpace_012z;
  float _811 = UniformBufferConstants_WorkingColorSpace_013x;
  float _812 = UniformBufferConstants_WorkingColorSpace_013y;
  float _813 = UniformBufferConstants_WorkingColorSpace_013z;
  float _815 = UniformBufferConstants_WorkingColorSpace_014x;
  float _816 = UniformBufferConstants_WorkingColorSpace_014y;
  float _817 = UniformBufferConstants_WorkingColorSpace_014z;
  float _818 = _801 * _807;
  float _819 = mad(_808, _803, _818);
  float _820 = mad(_809, _805, _819);
  float _821 = _811 * _801;
  float _822 = mad(_812, _803, _821);
  float _823 = mad(_813, _805, _822);
  float _824 = _815 * _801;
  float _825 = mad(_816, _803, _824);
  float _826 = mad(_817, _805, _825);
  float _827 = _RootShaderParameters_036y;
  float _828 = _801 * 0.9386394023895264f;
  float _829 = mad(-4.540197551250458e-09f, _803, _828);
  float _830 = mad(0.061360642313957214f, _805, _829);
  float _831 = _801 * 6.775371730327606e-08f;
  float _832 = mad(0.8307942152023315f, _803, _831);
  float _833 = mad(0.169205904006958f, _805, _832);
  float _834 = _801 * -9.313225746154785e-10f;
  float _835 = mad(-2.3283064365386963e-10f, _803, _834);
  float _836 = _830 - _801;
  float _837 = _833 - _803;
  float _838 = _836 * _827;
  float _839 = _837 * _827;
  float _840 = _835 * _827;
  float _841 = _838 + _801;
  float _842 = _839 + _803;
  float _843 = _840 + _805;
  float3 ap1_graded_color = float3(_841, _842, _843);  // CustomEdit

  float _844 = _841 * 0.6954522132873535f;
  float _845 = mad(0.14067868888378143f, _842, _844);
  float _846 = mad(0.16386905312538147f, _843, _845);
  float _847 = _841 * 0.044794581830501556f;
  float _848 = mad(0.8596711158752441f, _842, _847);
  float _849 = mad(0.0955343246459961f, _843, _848);
  float _850 = _841 * -0.005525882821530104f;
  float _851 = mad(0.004025210160762072f, _842, _850);
  float _852 = mad(1.0015007257461548f, _843, _851);
  float _853 = min(_846, _849);
  float _854 = min(_853, _852);
  float _855 = max(_846, _849);
  float _856 = max(_855, _852);
  float _857 = max(_856, 1.000000013351432e-10f);
  float _858 = max(_854, 1.000000013351432e-10f);
  float _859 = _857 - _858;
  float _860 = max(_856, 0.009999999776482582f);
  float _861 = _859 / _860;
  float _862 = _852 - _849;
  float _863 = _862 * _852;
  float _864 = _849 - _846;
  float _865 = _864 * _849;
  float _866 = _863 + _865;
  float _867 = _846 - _852;
  float _868 = _867 * _846;
  float _869 = _866 + _868;
  float _870 = sqrt(_869);
  float _871 = _870 * 1.75f;
  float _872 = _849 + _846;
  float _873 = _872 + _852;
  float _874 = _873 + _871;
  float _875 = _874 * 0.3333333432674408f;
  float _876 = _861 + -0.4000000059604645f;
  float _877 = _876 * 5.0f;
  float _878 = _876 * 2.5f;
  float _879 = abs(_878);
  float _880 = 1.0f - _879;
  float _881 = max(_880, 0.0f);
  bool _882 = (_877 > 0.0f);
  bool _883 = (_877 < 0.0f);
  int _884 = int(_882);
  int _885 = int(_883);
  int _886 = _884 - _885;
  float _887 = float(_886);
  float _888 = _881 * _881;
  float _889 = 1.0f - _888;
  float _890 = _887 * _889;
  float _891 = _890 + 1.0f;
  float _892 = _891 * 0.02500000037252903f;
  bool _893 = !(_875 <= 0.0533333346247673f);
  _901 = _892;
  if (_893) {
    bool _895 = !(_875 >= 0.1599999964237213f);
    _901 = 0.0f;
    if (_895) {
      float _897 = 0.23999999463558197f / _874;
      float _898 = _897 + -0.5f;
      float _899 = _898 * _892;
      _901 = _899;
    }
  }
  float _902 = _901 + 1.0f;
  float _903 = _902 * _846;
  float _904 = _902 * _849;
  float _905 = _902 * _852;
  bool _906 = (_903 == _904);
  bool _907 = (_904 == _905);
  bool _908 = _906 && _907;
  _937 = 0.0f;
  if (!_908) {
    float _910 = _903 * 2.0f;
    float _911 = _910 - _904;
    float _912 = _911 - _905;
    float _913 = _849 - _852;
    float _914 = _913 * 1.7320507764816284f;
    float _915 = _914 * _902;
    float _916 = _915 / _912;
    float _917 = atan(_916);
    float _918 = _917 + 3.1415927410125732f;
    float _919 = _917 + -3.1415927410125732f;
    bool _920 = (_912 < 0.0f);
    bool _921 = (_912 == 0.0f);
    bool _922 = (_915 >= 0.0f);
    bool _923 = (_915 < 0.0f);
    bool _924 = _922 && _920;
    float _925 = _924 ? _918 : _917;
    bool _926 = _923 && _920;
    float _927 = _926 ? _919 : _925;
    bool _928 = _923 && _921;
    bool _929 = _922 && _921;
    float _930 = _927 * 57.2957763671875f;
    float _931 = _928 ? -90.0f : _930;
    float _932 = _929 ? 90.0f : _931;
    bool _933 = (_932 < 0.0f);
    _937 = _932;
    if (_933) {
      float _935 = _932 + 360.0f;
      _937 = _935;
    }
  }
  float _938 = max(_937, 0.0f);
  float _939 = min(_938, 360.0f);
  bool _940 = (_939 < -180.0f);
  if (_940) {
    float _942 = _939 + 360.0f;
    _948 = _942;
  } else {
    bool _944 = (_939 > 180.0f);
    _948 = _939;
    if (_944) {
      float _946 = _939 + -360.0f;
      _948 = _946;
    }
  }
  float _949 = _948 * 0.014814814552664757f;
  float _950 = abs(_949);
  float _951 = 1.0f - _950;
  float _952 = saturate(_951);
  float _953 = _952 * 2.0f;
  float _954 = 3.0f - _953;
  float _955 = _952 * _952;
  float _956 = _955 * _954;
  float _957 = 0.029999999329447746f - _903;
  float _958 = _861 * 0.18000000715255737f;
  float _959 = _958 * _957;
  float _960 = _956 * _956;
  float _961 = _960 * _959;
  float _962 = _961 + _903;
  float _963 = _962 * 1.4514392614364624f;
  float _964 = mad(-0.2365107536315918f, _904, _963);
  float _965 = mad(-0.21492856740951538f, _905, _964);
  float _966 = _962 * -0.07655377686023712f;
  float _967 = mad(1.17622971534729f, _904, _966);
  float _968 = mad(-0.09967592358589172f, _905, _967);
  float _969 = _962 * 0.008316148072481155f;
  float _970 = mad(-0.006032449658960104f, _904, _969);
  float _971 = mad(0.9977163076400757f, _905, _970);
  float _972 = max(0.0f, _965);
  float _973 = max(0.0f, _968);
  float _974 = max(0.0f, _971);
  float _975 = dot(float3(_972, _973, _974), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
  float _976 = _972 - _975;
  float _977 = _973 - _975;
  float _978 = _974 - _975;
  float _979 = _976 * 0.9599999785423279f;
  float _980 = _977 * 0.9599999785423279f;
  float _981 = _978 * 0.9599999785423279f;
  float _982 = _979 + _975;
  float _983 = _980 + _975;
  float _984 = _981 + _975;

  float3 ap1_aces_colored = float3(_982, _983, _984);  // CustomEdit

  // Now SDR Tonemapping/Split
  // Early out with cbuffer
  // (Unreal runs the entire SDR process even if discarding)
  uint output_type = _RootShaderParameters_040w;

  float3 sdr_color;
  float3 hdr_color;
  float3 sdr_ap1_color;

  float _986 = _RootShaderParameters_037w;
  float _987 = _986 + 1.0f;
  float _988 = _RootShaderParameters_037y;
  float _989 = _987 - _988;
  float _991 = _RootShaderParameters_038x;
  float _992 = _991 + 1.0f;
  float _993 = _RootShaderParameters_037z;
  float _994 = _992 - _993;

  bool is_hdr = (output_type >= 3u && output_type <= 6u);
  if (injectedData.toneMapType != 0.f && is_hdr) {
    renodx::tonemap::Config config = getCommonConfig();

    float3 config_color = renodx::color::bt709::from::AP1(ap1_graded_color);

    renodx::tonemap::config::DualToneMap dual_tone_map = renodx::tonemap::config::ApplyToneMaps(config_color, config);
    hdr_color = dual_tone_map.color_hdr;
    sdr_color = dual_tone_map.color_sdr;
    sdr_ap1_color = renodx::color::ap1::from::BT709(sdr_color);
  } else {
    bool _995 = (_988 > 0.800000011920929f);
    float _996 = _RootShaderParameters_037x;
    if (_995) {
      float _998 = 0.8199999928474426f - _988;
      float _999 = _998 / _996;
      float _1000 = _999 + -0.7447274923324585f;
      _1012 = _1000;
    } else {
      float _1002 = _986 + 0.18000000715255737f;
      float _1003 = _1002 / _989;
      float _1004 = 2.0f - _1003;
      float _1005 = _1003 / _1004;
      float _1006 = log2(_1005);
      float _1007 = _1006 * 0.3465735912322998f;
      float _1008 = _989 / _996;
      float _1009 = _1007 * _1008;
      float _1010 = -0.7447274923324585f - _1009;
      _1012 = _1010;
    }
    float _1013 = 1.0f - _988;
    float _1014 = _1013 / _996;
    float _1015 = _1014 - _1012;
    float _1016 = _993 / _996;
    float _1017 = _1016 - _1015;
    float _1018 = log2(_982);
    float _1019 = log2(_983);
    float _1020 = log2(_984);
    float _1021 = _1018 * 0.3010300099849701f;
    float _1022 = _1019 * 0.3010300099849701f;
    float _1023 = _1020 * 0.3010300099849701f;
    float _1024 = _1021 + _1015;
    float _1025 = _1022 + _1015;
    float _1026 = _1023 + _1015;
    float _1027 = _996 * _1024;
    float _1028 = _996 * _1025;
    float _1029 = _996 * _1026;
    float _1030 = _989 * 2.0f;
    float _1031 = _996 * -2.0f;
    float _1032 = _1031 / _989;
    float _1033 = _1021 - _1012;
    float _1034 = _1022 - _1012;
    float _1035 = _1023 - _1012;
    float _1036 = _1033 * 1.4426950216293335f;
    float _1037 = _1036 * _1032;
    float _1038 = _1034 * 1.4426950216293335f;
    float _1039 = _1038 * _1032;
    float _1040 = _1035 * 1.4426950216293335f;
    float _1041 = _1040 * _1032;
    float _1042 = exp2(_1037);
    float _1043 = exp2(_1039);
    float _1044 = exp2(_1041);
    float _1045 = _1042 + 1.0f;
    float _1046 = _1043 + 1.0f;
    float _1047 = _1044 + 1.0f;
    float _1048 = _1030 / _1045;
    float _1049 = _1030 / _1046;
    float _1050 = _1030 / _1047;
    float _1051 = _1048 - _986;
    float _1052 = _1049 - _986;
    float _1053 = _1050 - _986;
    float _1054 = _994 * 2.0f;
    float _1055 = _996 * 2.0f;
    float _1056 = _1055 / _994;
    float _1057 = _1021 - _1017;
    float _1058 = _1022 - _1017;
    float _1059 = _1023 - _1017;
    float _1060 = _1057 * 1.4426950216293335f;
    float _1061 = _1060 * _1056;
    float _1062 = _1058 * 1.4426950216293335f;
    float _1063 = _1062 * _1056;
    float _1064 = _1059 * 1.4426950216293335f;
    float _1065 = _1064 * _1056;
    float _1066 = exp2(_1061);
    float _1067 = exp2(_1063);
    float _1068 = exp2(_1065);
    float _1069 = _1066 + 1.0f;
    float _1070 = _1067 + 1.0f;
    float _1071 = _1068 + 1.0f;
    float _1072 = _1054 / _1069;
    float _1073 = _1054 / _1070;
    float _1074 = _1054 / _1071;
    float _1075 = _992 - _1072;
    float _1076 = _992 - _1073;
    float _1077 = _992 - _1074;
    bool _1078 = (_1021 < _1012);
    bool _1079 = (_1022 < _1012);
    bool _1080 = (_1023 < _1012);
    float _1081 = _1078 ? _1051 : _1027;
    float _1082 = _1079 ? _1052 : _1028;
    float _1083 = _1080 ? _1053 : _1029;
    bool _1084 = (_1021 > _1017);
    bool _1085 = (_1022 > _1017);
    bool _1086 = (_1023 > _1017);
    float _1087 = _1084 ? _1075 : _1027;
    float _1088 = _1085 ? _1076 : _1028;
    float _1089 = _1086 ? _1077 : _1029;
    float _1090 = _1017 - _1012;
    float _1091 = _1033 / _1090;
    float _1092 = _1034 / _1090;
    float _1093 = _1035 / _1090;
    float _1094 = saturate(_1091);
    float _1095 = saturate(_1092);
    float _1096 = saturate(_1093);
    bool _1097 = (_1017 < _1012);
    float _1098 = 1.0f - _1094;
    float _1099 = 1.0f - _1095;
    float _1100 = 1.0f - _1096;
    float _1101 = _1097 ? _1098 : _1094;
    float _1102 = _1097 ? _1099 : _1095;
    float _1103 = _1097 ? _1100 : _1096;
    float _1104 = _1101 * 2.0f;
    float _1105 = _1102 * 2.0f;
    float _1106 = _1103 * 2.0f;
    float _1107 = 3.0f - _1104;
    float _1108 = 3.0f - _1105;
    float _1109 = 3.0f - _1106;
    float _1110 = _1087 - _1081;
    float _1111 = _1088 - _1082;
    float _1112 = _1089 - _1083;
    float _1113 = _1101 * _1101;
    float _1114 = _1113 * _1110;
    float _1115 = _1114 * _1107;
    float _1116 = _1102 * _1102;
    float _1117 = _1116 * _1111;
    float _1118 = _1117 * _1108;
    float _1119 = _1103 * _1103;
    float _1120 = _1119 * _1112;
    float _1121 = _1120 * _1109;
    float _1122 = _1115 + _1081;
    float _1123 = _1118 + _1082;
    float _1124 = _1121 + _1083;
    float _1125 = dot(float3(_1122, _1123, _1124), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
    float _1126 = _1122 - _1125;
    float _1127 = _1123 - _1125;
    float _1128 = _1124 - _1125;
    float _1129 = _1126 * 0.9300000071525574f;
    float _1130 = _1127 * 0.9300000071525574f;
    float _1131 = _1128 * 0.9300000071525574f;
    float _1132 = _1129 + _1125;
    float _1133 = _1130 + _1125;
    float _1134 = _1131 + _1125;
    float _1135 = max(0.0f, _1132);
    float _1136 = max(0.0f, _1133);
    float _1137 = max(0.0f, _1134);

    // CustomEdit
    sdr_ap1_color = float3(_1135, _1136, _1137);
  }

  float _1138 = _RootShaderParameters_036w;
  /* float _1139 = _1135 - _841;
  float _1140 = _1136 - _842;
  float _1141 = _1137 - _843; */
  float _1139 = sdr_ap1_color.r - _841;
  float _1140 = sdr_ap1_color.g - _842;
  float _1141 = sdr_ap1_color.b - _843;

  float _1142 = _1138 * _1139;
  float _1143 = _1138 * _1140;
  float _1144 = _1138 * _1141;
  float _1145 = _1142 + _841;
  float _1146 = _1143 + _842;
  float _1147 = _1144 + _843;
  float _1148 = _1145 * 1.065374732017517f;
  float _1149 = mad(1.451815478503704e-06f, _1146, _1148);
  float _1150 = mad(-0.06537103652954102f, _1147, _1149);
  float _1151 = _1145 * -2.57161445915699e-07f;
  float _1152 = mad(1.2036634683609009f, _1146, _1151);
  float _1153 = mad(-0.20366770029067993f, _1147, _1152);
  float _1154 = _1145 * 1.862645149230957e-08f;
  float _1155 = mad(2.0954757928848267e-08f, _1146, _1154);
  float _1156 = mad(0.9999996423721313f, _1147, _1155);
  float _1157 = _1150 - _1145;
  float _1158 = _1153 - _1146;
  float _1159 = _1156 - _1147;
  float _1160 = _1157 * _827;
  float _1161 = _1158 * _827;
  float _1162 = _1159 * _827;
  float _1163 = _1160 + _1145;
  float _1164 = _1161 + _1146;
  float _1165 = _1162 + _1147;
  float _1166 = _807 * _1163;
  float _1167 = mad(_808, _1164, _1166);
  float _1168 = mad(_809, _1165, _1167);
  float _1169 = _811 * _1163;
  float _1170 = mad(_812, _1164, _1169);
  float _1171 = mad(_813, _1165, _1170);
  float _1172 = _815 * _1163;
  float _1173 = mad(_816, _1164, _1172);
  float _1174 = mad(_817, _1165, _1173);
  float _1175 = max(0.0f, _1168);
  float _1176 = max(0.0f, _1171);
  float _1177 = max(0.0f, _1174);

  float3 lut_input_color = float3(_1175, _1176, _1177);  // CustomEdit
  float _1358;                                           // custom branch
  float _1359;                                           // custom branch
  float _1360;                                           // custom branch
  if (injectedData.colorGradeLUTStrength != 1.f || injectedData.colorGradeLUTScaling != 0.f) {
    renodx::lut::Config lut_config = renodx::lut::config::Create(
        s0,
        injectedData.colorGradeLUTStrength,
        injectedData.colorGradeLUTScaling, renodx::lut::config::type::SRGB, renodx::lut::config::type::SRGB, 16);

    float3 post_lut_color = renodx::lut::Sample(t0, lut_config, lut_input_color);
    _1358 = post_lut_color.r;
    _1359 = post_lut_color.g;
    _1360 = post_lut_color.b;
  } else {
    float _1178 = saturate(_1175);
    float _1179 = saturate(_1176);
    float _1180 = saturate(_1177);
    bool _1181 = (_1178 < 0.0031306699384003878f);
    if (_1181) {
      float _1183 = _1178 * 12.920000076293945f;
      _1191 = _1183;
    } else {
      float _1185 = log2(_1178);
      float _1186 = _1185 * 0.4166666567325592f;
      float _1187 = exp2(_1186);
      float _1188 = _1187 * 1.0549999475479126f;
      float _1189 = _1188 + -0.054999999701976776f;
      _1191 = _1189;
    }
    bool _1192 = (_1179 < 0.0031306699384003878f);
    if (_1192) {
      float _1194 = _1179 * 12.920000076293945f;
      _1202 = _1194;
    } else {
      float _1196 = log2(_1179);
      float _1197 = _1196 * 0.4166666567325592f;
      float _1198 = exp2(_1197);
      float _1199 = _1198 * 1.0549999475479126f;
      float _1200 = _1199 + -0.054999999701976776f;
      _1202 = _1200;
    }
    bool _1203 = (_1180 < 0.0031306699384003878f);
    if (_1203) {
      float _1205 = _1180 * 12.920000076293945f;
      _1213 = _1205;
    } else {
      float _1207 = log2(_1180);
      float _1208 = _1207 * 0.4166666567325592f;
      float _1209 = exp2(_1208);
      float _1210 = _1209 * 1.0549999475479126f;
      float _1211 = _1210 + -0.054999999701976776f;
      _1213 = _1211;
    }
    float _1214 = _1191 * 0.9375f;
    float _1215 = _1202 * 0.9375f;
    float _1216 = _1214 + 0.03125f;
    float _1217 = _1215 + 0.03125f;
    float _1219 = _RootShaderParameters_005x;
    float _1220 = _1219 * _1191;
    float _1221 = _1219 * _1202;
    float _1222 = _1219 * _1213;
    float _1223 = _RootShaderParameters_005y;
    float _1224 = _1213 * 15.0f;
    float _1225 = floor(_1224);
    float _1226 = _1224 - _1225;
    float _1227 = _1225 + _1216;
    float _1228 = _1227 * 0.0625f;
    // _1229 = _5;
    // _1230 = _9;
    float4 _1231 = Textures_1.SampleLevel(Samplers_1, float2(_1228, _1217), 0.0f);
    float _1232 = _1231.x;
    float _1233 = _1231.y;
    float _1234 = _1231.z;
    float _1235 = _1228 + 0.0625f;
    float4 _1236 = Textures_1.SampleLevel(Samplers_1, float2(_1235, _1217), 0.0f);
    float _1237 = _1236.x;
    float _1238 = _1236.y;
    float _1239 = _1236.z;
    float _1240 = _1237 - _1232;
    float _1241 = _1238 - _1233;
    float _1242 = _1239 - _1234;
    float _1243 = _1240 * _1226;
    float _1244 = _1241 * _1226;
    float _1245 = _1242 * _1226;
    float _1246 = _1243 + _1232;
    float _1247 = _1244 + _1233;
    float _1248 = _1245 + _1234;
    float _1249 = _1246 * _1223;
    float _1250 = _1247 * _1223;
    float _1251 = _1248 * _1223;
    float _1252 = _1249 + _1220;
    float _1253 = _1250 + _1221;
    float _1254 = _1251 + _1222;
    float _1255 = _RootShaderParameters_005z;
    // _1256 = _4;
    // _1257 = _8;
    float4 _1258 = Textures_2.SampleLevel(Samplers_2, float2(_1228, _1217), 0.0f);
    float _1259 = _1258.x;
    float _1260 = _1258.y;
    float _1261 = _1258.z;
    float4 _1262 = Textures_2.SampleLevel(Samplers_2, float2(_1235, _1217), 0.0f);
    float _1263 = _1262.x;
    float _1264 = _1262.y;
    float _1265 = _1262.z;
    float _1266 = _1263 - _1259;
    float _1267 = _1264 - _1260;
    float _1268 = _1265 - _1261;
    float _1269 = _1266 * _1226;
    float _1270 = _1267 * _1226;
    float _1271 = _1268 * _1226;
    float _1272 = _1269 + _1259;
    float _1273 = _1270 + _1260;
    float _1274 = _1271 + _1261;
    float _1275 = _1272 * _1255;
    float _1276 = _1273 * _1255;
    float _1277 = _1274 * _1255;
    float _1278 = _1252 + _1275;
    float _1279 = _1253 + _1276;
    float _1280 = _1254 + _1277;
    float _1281 = _RootShaderParameters_005w;
    // _1282 = _3;
    // _1283 = _7;
    float4 _1284 = Textures_3.SampleLevel(Samplers_3, float2(_1228, _1217), 0.0f);
    float _1285 = _1284.x;
    float _1286 = _1284.y;
    float _1287 = _1284.z;
    float4 _1288 = Textures_3.SampleLevel(Samplers_3, float2(_1235, _1217), 0.0f);
    float _1289 = _1288.x;
    float _1290 = _1288.y;
    float _1291 = _1288.z;
    float _1292 = _1289 - _1285;
    float _1293 = _1290 - _1286;
    float _1294 = _1291 - _1287;
    float _1295 = _1292 * _1226;
    float _1296 = _1293 * _1226;
    float _1297 = _1294 * _1226;
    float _1298 = _1295 + _1285;
    float _1299 = _1296 + _1286;
    float _1300 = _1297 + _1287;
    float _1301 = _1298 * _1281;
    float _1302 = _1299 * _1281;
    float _1303 = _1300 * _1281;
    float _1304 = _1278 + _1301;
    float _1305 = _1279 + _1302;
    float _1306 = _1280 + _1303;
    float _1308 = _RootShaderParameters_006x;
    // _1309 = _2;
    // _1310 = _6;
    float4 _1311 = Textures_4.SampleLevel(Samplers_4, float2(_1228, _1217), 0.0f);
    float _1312 = _1311.x;
    float _1313 = _1311.y;
    float _1314 = _1311.z;
    float4 _1315 = Textures_4.SampleLevel(Samplers_4, float2(_1235, _1217), 0.0f);
    float _1316 = _1315.x;
    float _1317 = _1315.y;
    float _1318 = _1315.z;
    float _1319 = _1316 - _1312;
    float _1320 = _1317 - _1313;
    float _1321 = _1318 - _1314;
    float _1322 = _1319 * _1226;
    float _1323 = _1320 * _1226;
    float _1324 = _1321 * _1226;
    float _1325 = _1322 + _1312;
    float _1326 = _1323 + _1313;
    float _1327 = _1324 + _1314;
    float _1328 = _1325 * _1308;
    float _1329 = _1326 * _1308;
    float _1330 = _1327 * _1308;
    float _1331 = _1304 + _1328;
    float _1332 = _1305 + _1329;
    float _1333 = _1306 + _1330;
    float _1334 = max(6.103519990574569e-05f, _1331);
    float _1335 = max(6.103519990574569e-05f, _1332);
    float _1336 = max(6.103519990574569e-05f, _1333);
    float _1337 = _1334 * 0.07739938050508499f;
    float _1338 = _1335 * 0.07739938050508499f;
    float _1339 = _1336 * 0.07739938050508499f;
    float _1340 = _1334 * 0.9478672742843628f;
    float _1341 = _1335 * 0.9478672742843628f;
    float _1342 = _1336 * 0.9478672742843628f;
    float _1343 = _1340 + 0.05213269963860512f;
    float _1344 = _1341 + 0.05213269963860512f;
    float _1345 = _1342 + 0.05213269963860512f;
    float _1346 = log2(_1343);
    float _1347 = log2(_1344);
    float _1348 = log2(_1345);
    float _1349 = _1346 * 2.4000000953674316f;
    float _1350 = _1347 * 2.4000000953674316f;
    float _1351 = _1348 * 2.4000000953674316f;
    float _1352 = exp2(_1349);
    float _1353 = exp2(_1350);
    float _1354 = exp2(_1351);
    bool _1355 = (_1334 > 0.040449999272823334f);
    bool _1356 = (_1335 > 0.040449999272823334f);
    bool _1357 = (_1336 > 0.040449999272823334f);

    // CustomEdit
    /* float _1358 = _1355 ? _1352 : _1337;
    float _1359 = _1356 ? _1353 : _1338;
    float _1360 = _1357 ? _1354 : _1339; */
    _1358 = _1355 ? _1352 : _1337;
    _1359 = _1356 ? _1353 : _1338;
    _1360 = _1357 ? _1354 : _1339;
  }

  float _1362 = _RootShaderParameters_039x;
  float _1363 = _1362 * _1358;
  float _1364 = _1362 * _1359;
  float _1365 = _1362 * _1360;
  float _1366 = _RootShaderParameters_039y;
  float _1367 = _RootShaderParameters_039z;
  float _1368 = _1366 + _1363;
  float _1369 = _1368 * _1358;
  float _1370 = _1369 + _1367;
  float _1371 = _1366 + _1364;
  float _1372 = _1371 * _1359;
  float _1373 = _1372 + _1367;
  float _1374 = _1366 + _1365;
  float _1375 = _1374 * _1360;
  float _1376 = _1375 + _1367;
  float _1378 = _RootShaderParameters_013w;
  float _1379 = _RootShaderParameters_013x;
  float _1380 = _RootShaderParameters_013y;
  float _1381 = _RootShaderParameters_013z;
  float _1383 = _RootShaderParameters_014x;
  float _1384 = _RootShaderParameters_014y;
  float _1385 = _RootShaderParameters_014z;
  float _1386 = _1383 * _1370;
  float _1387 = _1384 * _1373;
  float _1388 = _1385 * _1376;
  float _1389 = _1379 - _1386;
  float _1390 = _1380 - _1387;
  float _1391 = _1381 - _1388;
  float _1392 = _1389 * _1378;
  float _1393 = _1390 * _1378;
  float _1394 = _1391 * _1378;
  float _1395 = _1392 + _1386;
  float _1396 = _1393 + _1387;
  float _1397 = _1394 + _1388;
  float _1398 = _1383 * _820;
  float _1399 = _1384 * _823;
  float _1400 = _1385 * _826;
  float _1401 = _1379 - _1398;
  float _1402 = _1380 - _1399;
  float _1403 = _1381 - _1400;
  float _1404 = _1401 * _1378;
  float _1405 = _1402 * _1378;
  float _1406 = _1403 * _1378;
  float _1407 = _1404 + _1398;
  float _1408 = _1405 + _1399;
  float _1409 = _1406 + _1400;
  float _1411 = _RootShaderParameters_040y;
  float _1412 = max(0.0f, _1395);
  float _1413 = max(0.0f, _1396);
  float _1414 = max(0.0f, _1397);
  float _1415 = log2(_1412);
  float _1416 = log2(_1413);
  float _1417 = log2(_1414);
  float _1418 = _1415 * _1411;
  float _1419 = _1416 * _1411;
  float _1420 = _1417 * _1411;
  float _1421 = exp2(_1418);
  float _1422 = exp2(_1419);
  float _1423 = exp2(_1420);

  // CustomEdit
  float3 film_graded_color = float3(_1421, _1422, _1423);

  if (is_hdr) {
    float3 final_color = saturate(film_graded_color);
    if (injectedData.toneMapType != 0.f) {
      final_color = renodx::tonemap::UpgradeToneMap(hdr_color, sdr_color, final_color, 1.f);
    }
    if (injectedData.toneMapGammaCorrection == 1.f) {
      final_color = renodx::color::correct::GammaSafe(final_color);
    }
    bool is_pq = (output_type == 3u || output_type == 4u);
    if (is_pq) {
      final_color = renodx::color::bt2020::from::BT709(final_color);
      final_color = renodx::color::pq::Encode(final_color, injectedData.toneMapGameNits);
    }

    // return float4(final_color * 0.9523810148239136f, 0);
    RWOutputTexture[int3(_14, _15, _16)] = float4(final_color * 0.9523810148239136f, 0.0f);
    return;
  }

  uint _1425 = _RootShaderParameters_040w;
  bool _1426 = (_1425 == 0);
  if (_1426) {
    uint _1429 = UniformBufferConstants_WorkingColorSpace_020x;
    bool _1430 = (_1429 == 0);
    _1463 = _1421;
    _1464 = _1422;
    _1465 = _1423;
    do {
      if (_1430) {
        float _1433 = UniformBufferConstants_WorkingColorSpace_008x;
        float _1434 = UniformBufferConstants_WorkingColorSpace_008y;
        float _1435 = UniformBufferConstants_WorkingColorSpace_008z;
        float _1437 = UniformBufferConstants_WorkingColorSpace_009x;
        float _1438 = UniformBufferConstants_WorkingColorSpace_009y;
        float _1439 = UniformBufferConstants_WorkingColorSpace_009z;
        float _1441 = UniformBufferConstants_WorkingColorSpace_010x;
        float _1442 = UniformBufferConstants_WorkingColorSpace_010y;
        float _1443 = UniformBufferConstants_WorkingColorSpace_010z;
        float _1444 = _1433 * _1421;
        float _1445 = mad(_1434, _1422, _1444);
        float _1446 = mad(_1435, _1423, _1445);
        float _1447 = _1437 * _1421;
        float _1448 = mad(_1438, _1422, _1447);
        float _1449 = mad(_1439, _1423, _1448);
        float _1450 = _1441 * _1421;
        float _1451 = mad(_1442, _1422, _1450);
        float _1452 = mad(_1443, _1423, _1451);
        float _1453 = _1446 * _55;
        float _1454 = mad(_56, _1449, _1453);
        float _1455 = mad(_57, _1452, _1454);
        float _1456 = _1446 * _58;
        float _1457 = mad(_59, _1449, _1456);
        float _1458 = mad(_60, _1452, _1457);
        float _1459 = _1446 * _61;
        float _1460 = mad(_62, _1449, _1459);
        float _1461 = mad(_63, _1452, _1460);
        _1463 = _1455;
        _1464 = _1458;
        _1465 = _1461;
      }
      bool _1466 = (_1463 < 0.0031306699384003878f);
      do {
        if (_1466) {
          float _1468 = _1463 * 12.920000076293945f;
          _1476 = _1468;
        } else {
          float _1470 = log2(_1463);
          float _1471 = _1470 * 0.4166666567325592f;
          float _1472 = exp2(_1471);
          float _1473 = _1472 * 1.0549999475479126f;
          float _1474 = _1473 + -0.054999999701976776f;
          _1476 = _1474;
        }
        bool _1477 = (_1464 < 0.0031306699384003878f);
        do {
          if (_1477) {
            float _1479 = _1464 * 12.920000076293945f;
            _1487 = _1479;
          } else {
            float _1481 = log2(_1464);
            float _1482 = _1481 * 0.4166666567325592f;
            float _1483 = exp2(_1482);
            float _1484 = _1483 * 1.0549999475479126f;
            float _1485 = _1484 + -0.054999999701976776f;
            _1487 = _1485;
          }
          bool _1488 = (_1465 < 0.0031306699384003878f);
          if (_1488) {
            float _1490 = _1465 * 12.920000076293945f;
            _2847 = _1476;
            _2848 = _1487;
            _2849 = _1490;
          } else {
            float _1492 = log2(_1465);
            float _1493 = _1492 * 0.4166666567325592f;
            float _1494 = exp2(_1493);
            float _1495 = _1494 * 1.0549999475479126f;
            float _1496 = _1495 + -0.054999999701976776f;
            _2847 = _1476;
            _2848 = _1487;
            _2849 = _1496;
          }
        } while (false);
      } while (false);
    } while (false);
  } else {
    bool _1498 = (_1425 == 1);
    if (_1498) {
      float _1501 = UniformBufferConstants_WorkingColorSpace_008x;
      float _1502 = UniformBufferConstants_WorkingColorSpace_008y;
      float _1503 = UniformBufferConstants_WorkingColorSpace_008z;
      float _1505 = UniformBufferConstants_WorkingColorSpace_009x;
      float _1506 = UniformBufferConstants_WorkingColorSpace_009y;
      float _1507 = UniformBufferConstants_WorkingColorSpace_009z;
      float _1509 = UniformBufferConstants_WorkingColorSpace_010x;
      float _1510 = UniformBufferConstants_WorkingColorSpace_010y;
      float _1511 = UniformBufferConstants_WorkingColorSpace_010z;
      float _1512 = _1501 * _1421;
      float _1513 = mad(_1502, _1422, _1512);
      float _1514 = mad(_1503, _1423, _1513);
      float _1515 = _1505 * _1421;
      float _1516 = mad(_1506, _1422, _1515);
      float _1517 = mad(_1507, _1423, _1516);
      float _1518 = _1509 * _1421;
      float _1519 = mad(_1510, _1422, _1518);
      float _1520 = mad(_1511, _1423, _1519);
      float _1521 = _1514 * _55;
      float _1522 = mad(_56, _1517, _1521);
      float _1523 = mad(_57, _1520, _1522);
      float _1524 = _1514 * _58;
      float _1525 = mad(_59, _1517, _1524);
      float _1526 = mad(_60, _1520, _1525);
      float _1527 = _1514 * _61;
      float _1528 = mad(_62, _1517, _1527);
      float _1529 = mad(_63, _1520, _1528);
      float _1530 = max(6.103519990574569e-05f, _1523);
      float _1531 = max(6.103519990574569e-05f, _1526);
      float _1532 = max(6.103519990574569e-05f, _1529);
      float _1533 = max(_1530, 0.017999999225139618f);
      float _1534 = max(_1531, 0.017999999225139618f);
      float _1535 = max(_1532, 0.017999999225139618f);
      float _1536 = log2(_1533);
      float _1537 = log2(_1534);
      float _1538 = log2(_1535);
      float _1539 = _1536 * 0.44999998807907104f;
      float _1540 = _1537 * 0.44999998807907104f;
      float _1541 = _1538 * 0.44999998807907104f;
      float _1542 = exp2(_1539);
      float _1543 = exp2(_1540);
      float _1544 = exp2(_1541);
      float _1545 = _1542 * 1.0989999771118164f;
      float _1546 = _1543 * 1.0989999771118164f;
      float _1547 = _1544 * 1.0989999771118164f;
      float _1548 = _1545 + -0.0989999994635582f;
      float _1549 = _1546 + -0.0989999994635582f;
      float _1550 = _1547 + -0.0989999994635582f;
      float _1551 = _1530 * 4.5f;
      float _1552 = _1531 * 4.5f;
      float _1553 = _1532 * 4.5f;
      float _1554 = min(_1551, _1548);
      float _1555 = min(_1552, _1549);
      float _1556 = min(_1553, _1550);
      _2847 = _1554;
      _2848 = _1555;
      _2849 = _1556;
    } else {
      bool _1558 = (_1425 == 3);
      bool _1559 = (_1425 == 5);
      bool _1560 = _1558 || _1559;
      if (_1560) {
        //   %1562 = bitcast [6 x float]* %19 to i8*
        //   %1563 = bitcast [6 x float]* %20 to i8*
        float _1565 = _RootShaderParameters_012z;
        float _1566 = _RootShaderParameters_012y;
        float _1567 = _RootShaderParameters_012x;
        float _1569 = _RootShaderParameters_011x;
        float _1570 = _RootShaderParameters_011y;
        float _1571 = _RootShaderParameters_011z;
        float _1572 = _RootShaderParameters_011w;
        float _1574 = _RootShaderParameters_010x;
        float _1575 = _RootShaderParameters_010y;
        float _1576 = _RootShaderParameters_010z;
        float _1577 = _RootShaderParameters_010w;
        float _1579 = _RootShaderParameters_009x;
        float _1581 = _RootShaderParameters_008x;
        float _1582 = _RootShaderParameters_008y;
        float _1583 = _RootShaderParameters_008z;
        float _1584 = _RootShaderParameters_008w;
        _19[0] = _1574;
        _19[1] = _1575;
        _19[2] = _1576;
        _19[3] = _1577;
        _19[4] = _1567;
        _19[5] = _1567;
        _20[0] = _1569;
        _20[1] = _1570;
        _20[2] = _1571;
        _20[3] = _1572;
        _20[4] = _1566;
        _20[5] = _1566;
        float _1598 = UniformBufferConstants_WorkingColorSpace_016x;
        float _1599 = UniformBufferConstants_WorkingColorSpace_016y;
        float _1600 = UniformBufferConstants_WorkingColorSpace_016z;
        float _1602 = UniformBufferConstants_WorkingColorSpace_017x;
        float _1603 = UniformBufferConstants_WorkingColorSpace_017y;
        float _1604 = UniformBufferConstants_WorkingColorSpace_017z;
        float _1606 = UniformBufferConstants_WorkingColorSpace_018x;
        float _1607 = UniformBufferConstants_WorkingColorSpace_018y;
        float _1608 = UniformBufferConstants_WorkingColorSpace_018z;
        float _1609 = _1565 * _1407;
        float _1610 = _1565 * _1408;
        float _1611 = _1565 * _1409;
        float _1612 = _1598 * _1609;
        float _1613 = mad(_1599, _1610, _1612);
        float _1614 = mad(_1600, _1611, _1613);
        float _1615 = _1602 * _1609;
        float _1616 = mad(_1603, _1610, _1615);
        float _1617 = mad(_1604, _1611, _1616);
        float _1618 = _1606 * _1609;
        float _1619 = mad(_1607, _1610, _1618);
        float _1620 = mad(_1608, _1611, _1619);
        float _1621 = min(_1614, _1617);
        float _1622 = min(_1621, _1620);
        float _1623 = max(_1614, _1617);
        float _1624 = max(_1623, _1620);
        float _1625 = max(_1624, 1.000000013351432e-10f);
        float _1626 = max(_1622, 1.000000013351432e-10f);
        float _1627 = _1625 - _1626;
        float _1628 = max(_1624, 0.009999999776482582f);
        float _1629 = _1627 / _1628;
        float _1630 = _1620 - _1617;
        float _1631 = _1630 * _1620;
        float _1632 = _1617 - _1614;
        float _1633 = _1632 * _1617;
        float _1634 = _1631 + _1633;
        float _1635 = _1614 - _1620;
        float _1636 = _1635 * _1614;
        float _1637 = _1634 + _1636;
        float _1638 = sqrt(_1637);
        float _1639 = _1638 * 1.75f;
        float _1640 = _1617 + _1614;
        float _1641 = _1640 + _1620;
        float _1642 = _1641 + _1639;
        float _1643 = _1642 * 0.3333333432674408f;
        float _1644 = _1629 + -0.4000000059604645f;
        float _1645 = _1644 * 5.0f;
        float _1646 = _1644 * 2.5f;
        float _1647 = abs(_1646);
        float _1648 = 1.0f - _1647;
        float _1649 = max(_1648, 0.0f);
        bool _1650 = (_1645 > 0.0f);
        bool _1651 = (_1645 < 0.0f);
        int _1652 = int(_1650);
        int _1653 = int(_1651);
        int _1654 = _1652 - _1653;
        float _1655 = float(_1654);
        float _1656 = _1649 * _1649;
        float _1657 = 1.0f - _1656;
        float _1658 = _1655 * _1657;
        float _1659 = _1658 + 1.0f;
        float _1660 = _1659 * 0.02500000037252903f;
        bool _1661 = !(_1643 <= 0.0533333346247673f);
        _1669 = _1660;
        do {
          if (_1661) {
            bool _1663 = !(_1643 >= 0.1599999964237213f);
            _1669 = 0.0f;
            if (_1663) {
              float _1665 = 0.23999999463558197f / _1642;
              float _1666 = _1665 + -0.5f;
              float _1667 = _1666 * _1660;
              _1669 = _1667;
            }
          }
          float _1670 = _1669 + 1.0f;
          float _1671 = _1670 * _1614;
          float _1672 = _1670 * _1617;
          float _1673 = _1670 * _1620;
          bool _1674 = (_1671 == _1672);
          bool _1675 = (_1672 == _1673);
          bool _1676 = _1674 && _1675;
          _1705 = 0.0f;
          do {
            if (!_1676) {
              float _1678 = _1671 * 2.0f;
              float _1679 = _1678 - _1672;
              float _1680 = _1679 - _1673;
              float _1681 = _1617 - _1620;
              float _1682 = _1681 * 1.7320507764816284f;
              float _1683 = _1682 * _1670;
              float _1684 = _1683 / _1680;
              float _1685 = atan(_1684);
              float _1686 = _1685 + 3.1415927410125732f;
              float _1687 = _1685 + -3.1415927410125732f;
              bool _1688 = (_1680 < 0.0f);
              bool _1689 = (_1680 == 0.0f);
              bool _1690 = (_1683 >= 0.0f);
              bool _1691 = (_1683 < 0.0f);
              bool _1692 = _1690 && _1688;
              float _1693 = _1692 ? _1686 : _1685;
              bool _1694 = _1691 && _1688;
              float _1695 = _1694 ? _1687 : _1693;
              bool _1696 = _1691 && _1689;
              bool _1697 = _1690 && _1689;
              float _1698 = _1695 * 57.2957763671875f;
              float _1699 = _1696 ? -90.0f : _1698;
              float _1700 = _1697 ? 90.0f : _1699;
              bool _1701 = (_1700 < 0.0f);
              _1705 = _1700;
              if (_1701) {
                float _1703 = _1700 + 360.0f;
                _1705 = _1703;
              }
            }
            float _1706 = max(_1705, 0.0f);
            float _1707 = min(_1706, 360.0f);
            bool _1708 = (_1707 < -180.0f);
            do {
              if (_1708) {
                float _1710 = _1707 + 360.0f;
                _1716 = _1710;
              } else {
                bool _1712 = (_1707 > 180.0f);
                _1716 = _1707;
                if (_1712) {
                  float _1714 = _1707 + -360.0f;
                  _1716 = _1714;
                }
              }
              bool _1717 = (_1716 > -67.5f);
              bool _1718 = (_1716 < 67.5f);
              bool _1719 = _1717 && _1718;
              _1755 = 0.0f;
              do {
                if (_1719) {
                  float _1721 = _1716 + 67.5f;
                  float _1722 = _1721 * 0.029629629105329514f;
                  int _1723 = int(_1722);
                  float _1724 = float(_1723);
                  float _1725 = _1722 - _1724;
                  float _1726 = _1725 * _1725;
                  float _1727 = _1726 * _1725;
                  bool _1728 = (_1723 == 3);
                  if (_1728) {
                    float _1730 = _1727 * 0.1666666716337204f;
                    float _1731 = _1726 * 0.5f;
                    float _1732 = _1725 * 0.5f;
                    float _1733 = 0.1666666716337204f - _1732;
                    float _1734 = _1733 + _1731;
                    float _1735 = _1734 - _1730;
                    _1755 = _1735;
                  } else {
                    bool _1737 = (_1723 == 2);
                    if (_1737) {
                      float _1739 = _1727 * 0.5f;
                      float _1740 = 0.6666666865348816f - _1726;
                      float _1741 = _1740 + _1739;
                      _1755 = _1741;
                    } else {
                      bool _1743 = (_1723 == 1);
                      if (_1743) {
                        float _1745 = _1727 * -0.5f;
                        float _1746 = _1726 + _1725;
                        float _1747 = _1746 * 0.5f;
                        float _1748 = _1745 + 0.1666666716337204f;
                        float _1749 = _1748 + _1747;
                        _1755 = _1749;
                      } else {
                        bool _1751 = (_1723 == 0);
                        float _1752 = _1727 * 0.1666666716337204f;
                        float _1753 = _1751 ? _1752 : 0.0f;
                        _1755 = _1753;
                      }
                    }
                  }
                }
                float _1756 = 0.029999999329447746f - _1671;
                float _1757 = _1629 * 0.27000001072883606f;
                float _1758 = _1757 * _1756;
                float _1759 = _1758 * _1755;
                float _1760 = _1759 + _1671;
                float _1761 = max(_1760, 0.0f);
                float _1762 = max(_1672, 0.0f);
                float _1763 = max(_1673, 0.0f);
                float _1764 = min(_1761, 65535.0f);
                float _1765 = min(_1762, 65535.0f);
                float _1766 = min(_1763, 65535.0f);
                float _1767 = _1764 * 1.4514392614364624f;
                float _1768 = mad(-0.2365107536315918f, _1765, _1767);
                float _1769 = mad(-0.21492856740951538f, _1766, _1768);
                float _1770 = _1764 * -0.07655377686023712f;
                float _1771 = mad(1.17622971534729f, _1765, _1770);
                float _1772 = mad(-0.09967592358589172f, _1766, _1771);
                float _1773 = _1764 * 0.008316148072481155f;
                float _1774 = mad(-0.006032449658960104f, _1765, _1773);
                float _1775 = mad(0.9977163076400757f, _1766, _1774);
                float _1776 = max(_1769, 0.0f);
                float _1777 = max(_1772, 0.0f);
                float _1778 = max(_1775, 0.0f);
                float _1779 = min(_1776, 65504.0f);
                float _1780 = min(_1777, 65504.0f);
                float _1781 = min(_1778, 65504.0f);
                float _1782 = dot(float3(_1779, _1780, _1781), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                float _1783 = _1779 - _1782;
                float _1784 = _1780 - _1782;
                float _1785 = _1781 - _1782;
                float _1786 = _1783 * 0.9599999785423279f;
                float _1787 = _1784 * 0.9599999785423279f;
                float _1788 = _1785 * 0.9599999785423279f;
                float _1789 = _1786 + _1782;
                float _1790 = _1787 + _1782;
                float _1791 = _1788 + _1782;
                float _1792 = max(_1789, 1.000000013351432e-10f);
                float _1793 = log2(_1792);
                float _1794 = _1793 * 0.3010300099849701f;
                float _1795 = log2(_1581);
                float _1796 = _1795 * 0.3010300099849701f;
                bool _1797 = !(_1794 <= _1796);
                do {
                  if (!_1797) {
                    float _1799 = log2(_1582);
                    float _1800 = _1799 * 0.3010300099849701f;
                    _1865 = _1800;
                  } else {
                    bool _1802 = (_1794 > _1796);
                    float _1803 = log2(_1579);
                    float _1804 = _1803 * 0.3010300099849701f;
                    bool _1805 = (_1794 < _1804);
                    bool _1806 = _1802 && _1805;
                    if (_1806) {
                      float _1808 = _1793 - _1795;
                      float _1809 = _1808 * 0.9030900001525879f;
                      float _1810 = _1803 - _1795;
                      float _1811 = _1810 * 0.3010300099849701f;
                      float _1812 = _1809 / _1811;
                      int _1813 = int(_1812);
                      float _1814 = float(_1813);
                      float _1815 = _1812 - _1814;
                      float _1817 = _19[_1813];
                      int _1818 = _1813 + 1;
                      float _1820 = _19[_1818];
                      int _1821 = _1813 + 2;
                      float _1823 = _19[_1821];
                      float _1824 = _1815 * _1815;
                      float _1825 = _1817 * 0.5f;
                      float _1826 = mad(_1820, -1.0f, _1825);
                      float _1827 = mad(_1823, 0.5f, _1826);
                      float _1828 = _1820 - _1817;
                      float _1829 = mad(_1820, 0.5f, _1825);
                      float _1830 = dot(float3(_1824, _1815, 1.0f), float3(_1827, _1828, _1829));
                      _1865 = _1830;
                    } else {
                      bool _1832 = !(_1794 >= _1804);
                      do {
                        if (!_1832) {
                          float _1834 = log2(_1583);
                          float _1835 = _1834 * 0.3010300099849701f;
                          bool _1836 = (_1794 < _1835);
                          if (_1836) {
                            float _1838 = _1793 - _1803;
                            float _1839 = _1838 * 0.9030900001525879f;
                            float _1840 = _1834 - _1803;
                            float _1841 = _1840 * 0.3010300099849701f;
                            float _1842 = _1839 / _1841;
                            int _1843 = int(_1842);
                            float _1844 = float(_1843);
                            float _1845 = _1842 - _1844;
                            float _1847 = _20[_1843];
                            int _1848 = _1843 + 1;
                            float _1850 = _20[_1848];
                            int _1851 = _1843 + 2;
                            float _1853 = _20[_1851];
                            float _1854 = _1845 * _1845;
                            float _1855 = _1847 * 0.5f;
                            float _1856 = mad(_1850, -1.0f, _1855);
                            float _1857 = mad(_1853, 0.5f, _1856);
                            float _1858 = _1850 - _1847;
                            float _1859 = mad(_1850, 0.5f, _1855);
                            float _1860 = dot(float3(_1854, _1845, 1.0f), float3(_1857, _1858, _1859));
                            _1865 = _1860;
                            break;
                          }
                        }
                        float _1862 = log2(_1584);
                        float _1863 = _1862 * 0.3010300099849701f;
                        _1865 = _1863;
                      } while (false);
                    }
                  }
                  float _1866 = _1865 * 3.321928024291992f;
                  float _1867 = exp2(_1866);
                  float _1868 = max(_1790, 1.000000013351432e-10f);
                  float _1869 = log2(_1868);
                  float _1870 = _1869 * 0.3010300099849701f;
                  bool _1871 = !(_1870 <= _1796);
                  do {
                    if (!_1871) {
                      float _1873 = log2(_1582);
                      float _1874 = _1873 * 0.3010300099849701f;
                      _1939 = _1874;
                    } else {
                      bool _1876 = (_1870 > _1796);
                      float _1877 = log2(_1579);
                      float _1878 = _1877 * 0.3010300099849701f;
                      bool _1879 = (_1870 < _1878);
                      bool _1880 = _1876 && _1879;
                      if (_1880) {
                        float _1882 = _1869 - _1795;
                        float _1883 = _1882 * 0.9030900001525879f;
                        float _1884 = _1877 - _1795;
                        float _1885 = _1884 * 0.3010300099849701f;
                        float _1886 = _1883 / _1885;
                        int _1887 = int(_1886);
                        float _1888 = float(_1887);
                        float _1889 = _1886 - _1888;
                        float _1891 = _19[_1887];
                        int _1892 = _1887 + 1;
                        float _1894 = _19[_1892];
                        int _1895 = _1887 + 2;
                        float _1897 = _19[_1895];
                        float _1898 = _1889 * _1889;
                        float _1899 = _1891 * 0.5f;
                        float _1900 = mad(_1894, -1.0f, _1899);
                        float _1901 = mad(_1897, 0.5f, _1900);
                        float _1902 = _1894 - _1891;
                        float _1903 = mad(_1894, 0.5f, _1899);
                        float _1904 = dot(float3(_1898, _1889, 1.0f), float3(_1901, _1902, _1903));
                        _1939 = _1904;
                      } else {
                        bool _1906 = !(_1870 >= _1878);
                        do {
                          if (!_1906) {
                            float _1908 = log2(_1583);
                            float _1909 = _1908 * 0.3010300099849701f;
                            bool _1910 = (_1870 < _1909);
                            if (_1910) {
                              float _1912 = _1869 - _1877;
                              float _1913 = _1912 * 0.9030900001525879f;
                              float _1914 = _1908 - _1877;
                              float _1915 = _1914 * 0.3010300099849701f;
                              float _1916 = _1913 / _1915;
                              int _1917 = int(_1916);
                              float _1918 = float(_1917);
                              float _1919 = _1916 - _1918;
                              float _1921 = _20[_1917];
                              int _1922 = _1917 + 1;
                              float _1924 = _20[_1922];
                              int _1925 = _1917 + 2;
                              float _1927 = _20[_1925];
                              float _1928 = _1919 * _1919;
                              float _1929 = _1921 * 0.5f;
                              float _1930 = mad(_1924, -1.0f, _1929);
                              float _1931 = mad(_1927, 0.5f, _1930);
                              float _1932 = _1924 - _1921;
                              float _1933 = mad(_1924, 0.5f, _1929);
                              float _1934 = dot(float3(_1928, _1919, 1.0f), float3(_1931, _1932, _1933));
                              _1939 = _1934;
                              break;
                            }
                          }
                          float _1936 = log2(_1584);
                          float _1937 = _1936 * 0.3010300099849701f;
                          _1939 = _1937;
                        } while (false);
                      }
                    }
                    float _1940 = _1939 * 3.321928024291992f;
                    float _1941 = exp2(_1940);
                    float _1942 = max(_1791, 1.000000013351432e-10f);
                    float _1943 = log2(_1942);
                    float _1944 = _1943 * 0.3010300099849701f;
                    bool _1945 = !(_1944 <= _1796);
                    do {
                      if (!_1945) {
                        float _1947 = log2(_1582);
                        float _1948 = _1947 * 0.3010300099849701f;
                        _2013 = _1948;
                      } else {
                        bool _1950 = (_1944 > _1796);
                        float _1951 = log2(_1579);
                        float _1952 = _1951 * 0.3010300099849701f;
                        bool _1953 = (_1944 < _1952);
                        bool _1954 = _1950 && _1953;
                        if (_1954) {
                          float _1956 = _1943 - _1795;
                          float _1957 = _1956 * 0.9030900001525879f;
                          float _1958 = _1951 - _1795;
                          float _1959 = _1958 * 0.3010300099849701f;
                          float _1960 = _1957 / _1959;
                          int _1961 = int(_1960);
                          float _1962 = float(_1961);
                          float _1963 = _1960 - _1962;
                          float _1965 = _19[_1961];
                          int _1966 = _1961 + 1;
                          float _1968 = _19[_1966];
                          int _1969 = _1961 + 2;
                          float _1971 = _19[_1969];
                          float _1972 = _1963 * _1963;
                          float _1973 = _1965 * 0.5f;
                          float _1974 = mad(_1968, -1.0f, _1973);
                          float _1975 = mad(_1971, 0.5f, _1974);
                          float _1976 = _1968 - _1965;
                          float _1977 = mad(_1968, 0.5f, _1973);
                          float _1978 = dot(float3(_1972, _1963, 1.0f), float3(_1975, _1976, _1977));
                          _2013 = _1978;
                        } else {
                          bool _1980 = !(_1944 >= _1952);
                          do {
                            if (!_1980) {
                              float _1982 = log2(_1583);
                              float _1983 = _1982 * 0.3010300099849701f;
                              bool _1984 = (_1944 < _1983);
                              if (_1984) {
                                float _1986 = _1943 - _1951;
                                float _1987 = _1986 * 0.9030900001525879f;
                                float _1988 = _1982 - _1951;
                                float _1989 = _1988 * 0.3010300099849701f;
                                float _1990 = _1987 / _1989;
                                int _1991 = int(_1990);
                                float _1992 = float(_1991);
                                float _1993 = _1990 - _1992;
                                float _1995 = _20[_1991];
                                int _1996 = _1991 + 1;
                                float _1998 = _20[_1996];
                                int _1999 = _1991 + 2;
                                float _2001 = _20[_1999];
                                float _2002 = _1993 * _1993;
                                float _2003 = _1995 * 0.5f;
                                float _2004 = mad(_1998, -1.0f, _2003);
                                float _2005 = mad(_2001, 0.5f, _2004);
                                float _2006 = _1998 - _1995;
                                float _2007 = mad(_1998, 0.5f, _2003);
                                float _2008 = dot(float3(_2002, _1993, 1.0f), float3(_2005, _2006, _2007));
                                _2013 = _2008;
                                break;
                              }
                            }
                            float _2010 = log2(_1584);
                            float _2011 = _2010 * 0.3010300099849701f;
                            _2013 = _2011;
                          } while (false);
                        }
                      }
                      float _2014 = _2013 * 3.321928024291992f;
                      float _2015 = exp2(_2014);
                      float _2016 = _1867 - _1582;
                      float _2017 = _1584 - _1582;
                      float _2018 = _2016 / _2017;
                      float _2019 = _1941 - _1582;
                      float _2020 = _2019 / _2017;
                      float _2021 = _2015 - _1582;
                      float _2022 = _2021 / _2017;
                      float _2023 = _2018 * 0.6624541878700256f;
                      float _2024 = mad(0.13400420546531677f, _2020, _2023);
                      float _2025 = mad(0.15618768334388733f, _2022, _2024);
                      float _2026 = _2018 * 0.2722287178039551f;
                      float _2027 = mad(0.6740817427635193f, _2020, _2026);
                      float _2028 = mad(0.053689517080783844f, _2022, _2027);
                      float _2029 = _2018 * -0.005574649665504694f;
                      float _2030 = mad(0.00406073359772563f, _2020, _2029);
                      float _2031 = mad(1.0103391408920288f, _2022, _2030);
                      float _2032 = _2025 * 1.6410233974456787f;
                      float _2033 = mad(-0.32480329275131226f, _2028, _2032);
                      float _2034 = mad(-0.23642469942569733f, _2031, _2033);
                      float _2035 = _2025 * -0.663662850856781f;
                      float _2036 = mad(1.6153316497802734f, _2028, _2035);
                      float _2037 = mad(0.016756348311901093f, _2031, _2036);
                      float _2038 = _2025 * 0.011721894145011902f;
                      float _2039 = mad(-0.008284442126750946f, _2028, _2038);
                      float _2040 = mad(0.9883948564529419f, _2031, _2039);
                      float _2041 = max(_2034, 0.0f);
                      float _2042 = max(_2037, 0.0f);
                      float _2043 = max(_2040, 0.0f);
                      float _2044 = min(_2041, 1.0f);
                      float _2045 = min(_2042, 1.0f);
                      float _2046 = min(_2043, 1.0f);
                      float _2047 = _2044 * 0.6624541878700256f;
                      float _2048 = mad(0.13400420546531677f, _2045, _2047);
                      float _2049 = mad(0.15618768334388733f, _2046, _2048);
                      float _2050 = _2044 * 0.2722287178039551f;
                      float _2051 = mad(0.6740817427635193f, _2045, _2050);
                      float _2052 = mad(0.053689517080783844f, _2046, _2051);
                      float _2053 = _2044 * -0.005574649665504694f;
                      float _2054 = mad(0.00406073359772563f, _2045, _2053);
                      float _2055 = mad(1.0103391408920288f, _2046, _2054);
                      float _2056 = _2049 * 1.6410233974456787f;
                      float _2057 = mad(-0.32480329275131226f, _2052, _2056);
                      float _2058 = mad(-0.23642469942569733f, _2055, _2057);
                      float _2059 = _2049 * -0.663662850856781f;
                      float _2060 = mad(1.6153316497802734f, _2052, _2059);
                      float _2061 = mad(0.016756348311901093f, _2055, _2060);
                      float _2062 = _2049 * 0.011721894145011902f;
                      float _2063 = mad(-0.008284442126750946f, _2052, _2062);
                      float _2064 = mad(0.9883948564529419f, _2055, _2063);
                      float _2065 = max(_2058, 0.0f);
                      float _2066 = max(_2061, 0.0f);
                      float _2067 = max(_2064, 0.0f);
                      float _2068 = min(_2065, 65535.0f);
                      float _2069 = min(_2066, 65535.0f);
                      float _2070 = min(_2067, 65535.0f);
                      float _2071 = _2068 * _1584;
                      float _2072 = _2069 * _1584;
                      float _2073 = _2070 * _1584;
                      float _2074 = max(_2071, 0.0f);
                      float _2075 = max(_2072, 0.0f);
                      float _2076 = max(_2073, 0.0f);
                      float _2077 = min(_2074, 65535.0f);
                      float _2078 = min(_2075, 65535.0f);
                      float _2079 = min(_2076, 65535.0f);
                      bool _2080 = (_1425 == 5);
                      _2092 = _2077;
                      _2093 = _2078;
                      _2094 = _2079;
                      do {
                        if (!_2080) {
                          float _2082 = _2077 * _55;
                          float _2083 = mad(_56, _2078, _2082);
                          float _2084 = mad(_57, _2079, _2083);
                          float _2085 = _2077 * _58;
                          float _2086 = mad(_59, _2078, _2085);
                          float _2087 = mad(_60, _2079, _2086);
                          float _2088 = _2077 * _61;
                          float _2089 = mad(_62, _2078, _2088);
                          float _2090 = mad(_63, _2079, _2089);
                          _2092 = _2084;
                          _2093 = _2087;
                          _2094 = _2090;
                        }
                        float _2095 = _2092 * 9.999999747378752e-05f;
                        float _2096 = _2093 * 9.999999747378752e-05f;
                        float _2097 = _2094 * 9.999999747378752e-05f;
                        float _2098 = log2(_2095);
                        float _2099 = log2(_2096);
                        float _2100 = log2(_2097);
                        float _2101 = _2098 * 0.1593017578125f;
                        float _2102 = _2099 * 0.1593017578125f;
                        float _2103 = _2100 * 0.1593017578125f;
                        float _2104 = exp2(_2101);
                        float _2105 = exp2(_2102);
                        float _2106 = exp2(_2103);
                        float _2107 = _2104 * 18.8515625f;
                        float _2108 = _2105 * 18.8515625f;
                        float _2109 = _2106 * 18.8515625f;
                        float _2110 = _2107 + 0.8359375f;
                        float _2111 = _2108 + 0.8359375f;
                        float _2112 = _2109 + 0.8359375f;
                        float _2113 = _2104 * 18.6875f;
                        float _2114 = _2105 * 18.6875f;
                        float _2115 = _2106 * 18.6875f;
                        float _2116 = _2113 + 1.0f;
                        float _2117 = _2114 + 1.0f;
                        float _2118 = _2115 + 1.0f;
                        float _2119 = 1.0f / _2116;
                        float _2120 = 1.0f / _2117;
                        float _2121 = 1.0f / _2118;
                        float _2122 = _2119 * _2110;
                        float _2123 = _2120 * _2111;
                        float _2124 = _2121 * _2112;
                        float _2125 = log2(_2122);
                        float _2126 = log2(_2123);
                        float _2127 = log2(_2124);
                        float _2128 = _2125 * 78.84375f;
                        float _2129 = _2126 * 78.84375f;
                        float _2130 = _2127 * 78.84375f;
                        float _2131 = exp2(_2128);
                        float _2132 = exp2(_2129);
                        float _2133 = exp2(_2130);
                        _2847 = _2131;
                        _2848 = _2132;
                        _2849 = _2133;
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } while (false);
      } else {
        int _2135 = _1425 & -3;
        bool _2136 = (_2135 == 4);
        if (_2136) {
          //   %2138 = bitcast [6 x float]* %17 to i8*
          //   %2139 = bitcast [6 x float]* %18 to i8*
          float _2141 = _RootShaderParameters_012z;
          float _2142 = _RootShaderParameters_012y;
          float _2143 = _RootShaderParameters_012x;
          float _2145 = _RootShaderParameters_011x;
          float _2146 = _RootShaderParameters_011y;
          float _2147 = _RootShaderParameters_011z;
          float _2148 = _RootShaderParameters_011w;
          float _2150 = _RootShaderParameters_010x;
          float _2151 = _RootShaderParameters_010y;
          float _2152 = _RootShaderParameters_010z;
          float _2153 = _RootShaderParameters_010w;
          float _2155 = _RootShaderParameters_009x;
          float _2157 = _RootShaderParameters_008x;
          float _2158 = _RootShaderParameters_008y;
          float _2159 = _RootShaderParameters_008z;
          float _2160 = _RootShaderParameters_008w;
          _17[0] = _2150;
          _17[1] = _2151;
          _17[2] = _2152;
          _17[3] = _2153;
          _17[4] = _2143;
          _17[5] = _2143;
          _18[0] = _2145;
          _18[1] = _2146;
          _18[2] = _2147;
          _18[3] = _2148;
          _18[4] = _2142;
          _18[5] = _2142;
          float _2174 = UniformBufferConstants_WorkingColorSpace_016x;
          float _2175 = UniformBufferConstants_WorkingColorSpace_016y;
          float _2176 = UniformBufferConstants_WorkingColorSpace_016z;
          float _2178 = UniformBufferConstants_WorkingColorSpace_017x;
          float _2179 = UniformBufferConstants_WorkingColorSpace_017y;
          float _2180 = UniformBufferConstants_WorkingColorSpace_017z;
          float _2182 = UniformBufferConstants_WorkingColorSpace_018x;
          float _2183 = UniformBufferConstants_WorkingColorSpace_018y;
          float _2184 = UniformBufferConstants_WorkingColorSpace_018z;
          float _2185 = _2141 * _1407;
          float _2186 = _2141 * _1408;
          float _2187 = _2141 * _1409;
          float _2188 = _2174 * _2185;
          float _2189 = mad(_2175, _2186, _2188);
          float _2190 = mad(_2176, _2187, _2189);
          float _2191 = _2178 * _2185;
          float _2192 = mad(_2179, _2186, _2191);
          float _2193 = mad(_2180, _2187, _2192);
          float _2194 = _2182 * _2185;
          float _2195 = mad(_2183, _2186, _2194);
          float _2196 = mad(_2184, _2187, _2195);
          float _2197 = min(_2190, _2193);
          float _2198 = min(_2197, _2196);
          float _2199 = max(_2190, _2193);
          float _2200 = max(_2199, _2196);
          float _2201 = max(_2200, 1.000000013351432e-10f);
          float _2202 = max(_2198, 1.000000013351432e-10f);
          float _2203 = _2201 - _2202;
          float _2204 = max(_2200, 0.009999999776482582f);
          float _2205 = _2203 / _2204;
          float _2206 = _2196 - _2193;
          float _2207 = _2206 * _2196;
          float _2208 = _2193 - _2190;
          float _2209 = _2208 * _2193;
          float _2210 = _2207 + _2209;
          float _2211 = _2190 - _2196;
          float _2212 = _2211 * _2190;
          float _2213 = _2210 + _2212;
          float _2214 = sqrt(_2213);
          float _2215 = _2214 * 1.75f;
          float _2216 = _2193 + _2190;
          float _2217 = _2216 + _2196;
          float _2218 = _2217 + _2215;
          float _2219 = _2218 * 0.3333333432674408f;
          float _2220 = _2205 + -0.4000000059604645f;
          float _2221 = _2220 * 5.0f;
          float _2222 = _2220 * 2.5f;
          float _2223 = abs(_2222);
          float _2224 = 1.0f - _2223;
          float _2225 = max(_2224, 0.0f);
          bool _2226 = (_2221 > 0.0f);
          bool _2227 = (_2221 < 0.0f);
          int _2228 = int(_2226);
          int _2229 = int(_2227);
          int _2230 = _2228 - _2229;
          float _2231 = float(_2230);
          float _2232 = _2225 * _2225;
          float _2233 = 1.0f - _2232;
          float _2234 = _2231 * _2233;
          float _2235 = _2234 + 1.0f;
          float _2236 = _2235 * 0.02500000037252903f;
          bool _2237 = !(_2219 <= 0.0533333346247673f);
          _2245 = _2236;
          do {
            if (_2237) {
              bool _2239 = !(_2219 >= 0.1599999964237213f);
              _2245 = 0.0f;
              if (_2239) {
                float _2241 = 0.23999999463558197f / _2218;
                float _2242 = _2241 + -0.5f;
                float _2243 = _2242 * _2236;
                _2245 = _2243;
              }
            }
            float _2246 = _2245 + 1.0f;
            float _2247 = _2246 * _2190;
            float _2248 = _2246 * _2193;
            float _2249 = _2246 * _2196;
            bool _2250 = (_2247 == _2248);
            bool _2251 = (_2248 == _2249);
            bool _2252 = _2250 && _2251;
            _2281 = 0.0f;
            do {
              if (!_2252) {
                float _2254 = _2247 * 2.0f;
                float _2255 = _2254 - _2248;
                float _2256 = _2255 - _2249;
                float _2257 = _2193 - _2196;
                float _2258 = _2257 * 1.7320507764816284f;
                float _2259 = _2258 * _2246;
                float _2260 = _2259 / _2256;
                float _2261 = atan(_2260);
                float _2262 = _2261 + 3.1415927410125732f;
                float _2263 = _2261 + -3.1415927410125732f;
                bool _2264 = (_2256 < 0.0f);
                bool _2265 = (_2256 == 0.0f);
                bool _2266 = (_2259 >= 0.0f);
                bool _2267 = (_2259 < 0.0f);
                bool _2268 = _2266 && _2264;
                float _2269 = _2268 ? _2262 : _2261;
                bool _2270 = _2267 && _2264;
                float _2271 = _2270 ? _2263 : _2269;
                bool _2272 = _2267 && _2265;
                bool _2273 = _2266 && _2265;
                float _2274 = _2271 * 57.2957763671875f;
                float _2275 = _2272 ? -90.0f : _2274;
                float _2276 = _2273 ? 90.0f : _2275;
                bool _2277 = (_2276 < 0.0f);
                _2281 = _2276;
                if (_2277) {
                  float _2279 = _2276 + 360.0f;
                  _2281 = _2279;
                }
              }
              float _2282 = max(_2281, 0.0f);
              float _2283 = min(_2282, 360.0f);
              bool _2284 = (_2283 < -180.0f);
              do {
                if (_2284) {
                  float _2286 = _2283 + 360.0f;
                  _2292 = _2286;
                } else {
                  bool _2288 = (_2283 > 180.0f);
                  _2292 = _2283;
                  if (_2288) {
                    float _2290 = _2283 + -360.0f;
                    _2292 = _2290;
                  }
                }
                bool _2293 = (_2292 > -67.5f);
                bool _2294 = (_2292 < 67.5f);
                bool _2295 = _2293 && _2294;
                _2331 = 0.0f;
                do {
                  if (_2295) {
                    float _2297 = _2292 + 67.5f;
                    float _2298 = _2297 * 0.029629629105329514f;
                    int _2299 = int(_2298);
                    float _2300 = float(_2299);
                    float _2301 = _2298 - _2300;
                    float _2302 = _2301 * _2301;
                    float _2303 = _2302 * _2301;
                    bool _2304 = (_2299 == 3);
                    if (_2304) {
                      float _2306 = _2303 * 0.1666666716337204f;
                      float _2307 = _2302 * 0.5f;
                      float _2308 = _2301 * 0.5f;
                      float _2309 = 0.1666666716337204f - _2308;
                      float _2310 = _2309 + _2307;
                      float _2311 = _2310 - _2306;
                      _2331 = _2311;
                    } else {
                      bool _2313 = (_2299 == 2);
                      if (_2313) {
                        float _2315 = _2303 * 0.5f;
                        float _2316 = 0.6666666865348816f - _2302;
                        float _2317 = _2316 + _2315;
                        _2331 = _2317;
                      } else {
                        bool _2319 = (_2299 == 1);
                        if (_2319) {
                          float _2321 = _2303 * -0.5f;
                          float _2322 = _2302 + _2301;
                          float _2323 = _2322 * 0.5f;
                          float _2324 = _2321 + 0.1666666716337204f;
                          float _2325 = _2324 + _2323;
                          _2331 = _2325;
                        } else {
                          bool _2327 = (_2299 == 0);
                          float _2328 = _2303 * 0.1666666716337204f;
                          float _2329 = _2327 ? _2328 : 0.0f;
                          _2331 = _2329;
                        }
                      }
                    }
                  }
                  float _2332 = 0.029999999329447746f - _2247;
                  float _2333 = _2205 * 0.27000001072883606f;
                  float _2334 = _2333 * _2332;
                  float _2335 = _2334 * _2331;
                  float _2336 = _2335 + _2247;
                  float _2337 = max(_2336, 0.0f);
                  float _2338 = max(_2248, 0.0f);
                  float _2339 = max(_2249, 0.0f);
                  float _2340 = min(_2337, 65535.0f);
                  float _2341 = min(_2338, 65535.0f);
                  float _2342 = min(_2339, 65535.0f);
                  float _2343 = _2340 * 1.4514392614364624f;
                  float _2344 = mad(-0.2365107536315918f, _2341, _2343);
                  float _2345 = mad(-0.21492856740951538f, _2342, _2344);
                  float _2346 = _2340 * -0.07655377686023712f;
                  float _2347 = mad(1.17622971534729f, _2341, _2346);
                  float _2348 = mad(-0.09967592358589172f, _2342, _2347);
                  float _2349 = _2340 * 0.008316148072481155f;
                  float _2350 = mad(-0.006032449658960104f, _2341, _2349);
                  float _2351 = mad(0.9977163076400757f, _2342, _2350);
                  float _2352 = max(_2345, 0.0f);
                  float _2353 = max(_2348, 0.0f);
                  float _2354 = max(_2351, 0.0f);
                  float _2355 = min(_2352, 65504.0f);
                  float _2356 = min(_2353, 65504.0f);
                  float _2357 = min(_2354, 65504.0f);
                  float _2358 = dot(float3(_2355, _2356, _2357), float3(0.2722287178039551f, 0.6740817427635193f, 0.053689517080783844f));
                  float _2359 = _2355 - _2358;
                  float _2360 = _2356 - _2358;
                  float _2361 = _2357 - _2358;
                  float _2362 = _2359 * 0.9599999785423279f;
                  float _2363 = _2360 * 0.9599999785423279f;
                  float _2364 = _2361 * 0.9599999785423279f;
                  float _2365 = _2362 + _2358;
                  float _2366 = _2363 + _2358;
                  float _2367 = _2364 + _2358;
                  float _2368 = max(_2365, 1.000000013351432e-10f);
                  float _2369 = log2(_2368);
                  float _2370 = _2369 * 0.3010300099849701f;
                  float _2371 = log2(_2157);
                  float _2372 = _2371 * 0.3010300099849701f;
                  bool _2373 = !(_2370 <= _2372);
                  do {
                    if (!_2373) {
                      float _2375 = log2(_2158);
                      float _2376 = _2375 * 0.3010300099849701f;
                      _2441 = _2376;
                    } else {
                      bool _2378 = (_2370 > _2372);
                      float _2379 = log2(_2155);
                      float _2380 = _2379 * 0.3010300099849701f;
                      bool _2381 = (_2370 < _2380);
                      bool _2382 = _2378 && _2381;
                      if (_2382) {
                        float _2384 = _2369 - _2371;
                        float _2385 = _2384 * 0.9030900001525879f;
                        float _2386 = _2379 - _2371;
                        float _2387 = _2386 * 0.3010300099849701f;
                        float _2388 = _2385 / _2387;
                        int _2389 = int(_2388);
                        float _2390 = float(_2389);
                        float _2391 = _2388 - _2390;
                        float _2393 = _17[_2389];
                        int _2394 = _2389 + 1;
                        float _2396 = _17[_2394];
                        int _2397 = _2389 + 2;
                        float _2399 = _17[_2397];
                        float _2400 = _2391 * _2391;
                        float _2401 = _2393 * 0.5f;
                        float _2402 = mad(_2396, -1.0f, _2401);
                        float _2403 = mad(_2399, 0.5f, _2402);
                        float _2404 = _2396 - _2393;
                        float _2405 = mad(_2396, 0.5f, _2401);
                        float _2406 = dot(float3(_2400, _2391, 1.0f), float3(_2403, _2404, _2405));
                        _2441 = _2406;
                      } else {
                        bool _2408 = !(_2370 >= _2380);
                        do {
                          if (!_2408) {
                            float _2410 = log2(_2159);
                            float _2411 = _2410 * 0.3010300099849701f;
                            bool _2412 = (_2370 < _2411);
                            if (_2412) {
                              float _2414 = _2369 - _2379;
                              float _2415 = _2414 * 0.9030900001525879f;
                              float _2416 = _2410 - _2379;
                              float _2417 = _2416 * 0.3010300099849701f;
                              float _2418 = _2415 / _2417;
                              int _2419 = int(_2418);
                              float _2420 = float(_2419);
                              float _2421 = _2418 - _2420;
                              float _2423 = _18[_2419];
                              int _2424 = _2419 + 1;
                              float _2426 = _18[_2424];
                              int _2427 = _2419 + 2;
                              float _2429 = _18[_2427];
                              float _2430 = _2421 * _2421;
                              float _2431 = _2423 * 0.5f;
                              float _2432 = mad(_2426, -1.0f, _2431);
                              float _2433 = mad(_2429, 0.5f, _2432);
                              float _2434 = _2426 - _2423;
                              float _2435 = mad(_2426, 0.5f, _2431);
                              float _2436 = dot(float3(_2430, _2421, 1.0f), float3(_2433, _2434, _2435));
                              _2441 = _2436;
                              break;
                            }
                          }
                          float _2438 = log2(_2160);
                          float _2439 = _2438 * 0.3010300099849701f;
                          _2441 = _2439;
                        } while (false);
                      }
                    }
                    float _2442 = _2441 * 3.321928024291992f;
                    float _2443 = exp2(_2442);
                    float _2444 = max(_2366, 1.000000013351432e-10f);
                    float _2445 = log2(_2444);
                    float _2446 = _2445 * 0.3010300099849701f;
                    bool _2447 = !(_2446 <= _2372);
                    do {
                      if (!_2447) {
                        float _2449 = log2(_2158);
                        float _2450 = _2449 * 0.3010300099849701f;
                        _2515 = _2450;
                      } else {
                        bool _2452 = (_2446 > _2372);
                        float _2453 = log2(_2155);
                        float _2454 = _2453 * 0.3010300099849701f;
                        bool _2455 = (_2446 < _2454);
                        bool _2456 = _2452 && _2455;
                        if (_2456) {
                          float _2458 = _2445 - _2371;
                          float _2459 = _2458 * 0.9030900001525879f;
                          float _2460 = _2453 - _2371;
                          float _2461 = _2460 * 0.3010300099849701f;
                          float _2462 = _2459 / _2461;
                          int _2463 = int(_2462);
                          float _2464 = float(_2463);
                          float _2465 = _2462 - _2464;
                          float _2467 = _17[_2463];
                          int _2468 = _2463 + 1;
                          float _2470 = _17[_2468];
                          int _2471 = _2463 + 2;
                          float _2473 = _17[_2471];
                          float _2474 = _2465 * _2465;
                          float _2475 = _2467 * 0.5f;
                          float _2476 = mad(_2470, -1.0f, _2475);
                          float _2477 = mad(_2473, 0.5f, _2476);
                          float _2478 = _2470 - _2467;
                          float _2479 = mad(_2470, 0.5f, _2475);
                          float _2480 = dot(float3(_2474, _2465, 1.0f), float3(_2477, _2478, _2479));
                          _2515 = _2480;
                        } else {
                          bool _2482 = !(_2446 >= _2454);
                          do {
                            if (!_2482) {
                              float _2484 = log2(_2159);
                              float _2485 = _2484 * 0.3010300099849701f;
                              bool _2486 = (_2446 < _2485);
                              if (_2486) {
                                float _2488 = _2445 - _2453;
                                float _2489 = _2488 * 0.9030900001525879f;
                                float _2490 = _2484 - _2453;
                                float _2491 = _2490 * 0.3010300099849701f;
                                float _2492 = _2489 / _2491;
                                int _2493 = int(_2492);
                                float _2494 = float(_2493);
                                float _2495 = _2492 - _2494;
                                float _2497 = _18[_2493];
                                int _2498 = _2493 + 1;
                                float _2500 = _18[_2498];
                                int _2501 = _2493 + 2;
                                float _2503 = _18[_2501];
                                float _2504 = _2495 * _2495;
                                float _2505 = _2497 * 0.5f;
                                float _2506 = mad(_2500, -1.0f, _2505);
                                float _2507 = mad(_2503, 0.5f, _2506);
                                float _2508 = _2500 - _2497;
                                float _2509 = mad(_2500, 0.5f, _2505);
                                float _2510 = dot(float3(_2504, _2495, 1.0f), float3(_2507, _2508, _2509));
                                _2515 = _2510;
                                break;
                              }
                            }
                            float _2512 = log2(_2160);
                            float _2513 = _2512 * 0.3010300099849701f;
                            _2515 = _2513;
                          } while (false);
                        }
                      }
                      float _2516 = _2515 * 3.321928024291992f;
                      float _2517 = exp2(_2516);
                      float _2518 = max(_2367, 1.000000013351432e-10f);
                      float _2519 = log2(_2518);
                      float _2520 = _2519 * 0.3010300099849701f;
                      bool _2521 = !(_2520 <= _2372);
                      do {
                        if (!_2521) {
                          float _2523 = log2(_2158);
                          float _2524 = _2523 * 0.3010300099849701f;
                          _2589 = _2524;
                        } else {
                          bool _2526 = (_2520 > _2372);
                          float _2527 = log2(_2155);
                          float _2528 = _2527 * 0.3010300099849701f;
                          bool _2529 = (_2520 < _2528);
                          bool _2530 = _2526 && _2529;
                          if (_2530) {
                            float _2532 = _2519 - _2371;
                            float _2533 = _2532 * 0.9030900001525879f;
                            float _2534 = _2527 - _2371;
                            float _2535 = _2534 * 0.3010300099849701f;
                            float _2536 = _2533 / _2535;
                            int _2537 = int(_2536);
                            float _2538 = float(_2537);
                            float _2539 = _2536 - _2538;
                            float _2541 = _17[_2537];
                            int _2542 = _2537 + 1;
                            float _2544 = _17[_2542];
                            int _2545 = _2537 + 2;
                            float _2547 = _17[_2545];
                            float _2548 = _2539 * _2539;
                            float _2549 = _2541 * 0.5f;
                            float _2550 = mad(_2544, -1.0f, _2549);
                            float _2551 = mad(_2547, 0.5f, _2550);
                            float _2552 = _2544 - _2541;
                            float _2553 = mad(_2544, 0.5f, _2549);
                            float _2554 = dot(float3(_2548, _2539, 1.0f), float3(_2551, _2552, _2553));
                            _2589 = _2554;
                          } else {
                            bool _2556 = !(_2520 >= _2528);
                            do {
                              if (!_2556) {
                                float _2558 = log2(_2159);
                                float _2559 = _2558 * 0.3010300099849701f;
                                bool _2560 = (_2520 < _2559);
                                if (_2560) {
                                  float _2562 = _2519 - _2527;
                                  float _2563 = _2562 * 0.9030900001525879f;
                                  float _2564 = _2558 - _2527;
                                  float _2565 = _2564 * 0.3010300099849701f;
                                  float _2566 = _2563 / _2565;
                                  int _2567 = int(_2566);
                                  float _2568 = float(_2567);
                                  float _2569 = _2566 - _2568;
                                  float _2571 = _18[_2567];
                                  int _2572 = _2567 + 1;
                                  float _2574 = _18[_2572];
                                  int _2575 = _2567 + 2;
                                  float _2577 = _18[_2575];
                                  float _2578 = _2569 * _2569;
                                  float _2579 = _2571 * 0.5f;
                                  float _2580 = mad(_2574, -1.0f, _2579);
                                  float _2581 = mad(_2577, 0.5f, _2580);
                                  float _2582 = _2574 - _2571;
                                  float _2583 = mad(_2574, 0.5f, _2579);
                                  float _2584 = dot(float3(_2578, _2569, 1.0f), float3(_2581, _2582, _2583));
                                  _2589 = _2584;
                                  break;
                                }
                              }
                              float _2586 = log2(_2160);
                              float _2587 = _2586 * 0.3010300099849701f;
                              _2589 = _2587;
                            } while (false);
                          }
                        }
                        float _2590 = _2589 * 3.321928024291992f;
                        float _2591 = exp2(_2590);
                        float _2592 = _2443 - _2158;
                        float _2593 = _2160 - _2158;
                        float _2594 = _2592 / _2593;
                        float _2595 = _2517 - _2158;
                        float _2596 = _2595 / _2593;
                        float _2597 = _2591 - _2158;
                        float _2598 = _2597 / _2593;
                        float _2599 = _2594 * 0.6624541878700256f;
                        float _2600 = mad(0.13400420546531677f, _2596, _2599);
                        float _2601 = mad(0.15618768334388733f, _2598, _2600);
                        float _2602 = _2594 * 0.2722287178039551f;
                        float _2603 = mad(0.6740817427635193f, _2596, _2602);
                        float _2604 = mad(0.053689517080783844f, _2598, _2603);
                        float _2605 = _2594 * -0.005574649665504694f;
                        float _2606 = mad(0.00406073359772563f, _2596, _2605);
                        float _2607 = mad(1.0103391408920288f, _2598, _2606);
                        float _2608 = _2601 * 1.6410233974456787f;
                        float _2609 = mad(-0.32480329275131226f, _2604, _2608);
                        float _2610 = mad(-0.23642469942569733f, _2607, _2609);
                        float _2611 = _2601 * -0.663662850856781f;
                        float _2612 = mad(1.6153316497802734f, _2604, _2611);
                        float _2613 = mad(0.016756348311901093f, _2607, _2612);
                        float _2614 = _2601 * 0.011721894145011902f;
                        float _2615 = mad(-0.008284442126750946f, _2604, _2614);
                        float _2616 = mad(0.9883948564529419f, _2607, _2615);
                        float _2617 = max(_2610, 0.0f);
                        float _2618 = max(_2613, 0.0f);
                        float _2619 = max(_2616, 0.0f);
                        float _2620 = min(_2617, 1.0f);
                        float _2621 = min(_2618, 1.0f);
                        float _2622 = min(_2619, 1.0f);
                        float _2623 = _2620 * 0.6624541878700256f;
                        float _2624 = mad(0.13400420546531677f, _2621, _2623);
                        float _2625 = mad(0.15618768334388733f, _2622, _2624);
                        float _2626 = _2620 * 0.2722287178039551f;
                        float _2627 = mad(0.6740817427635193f, _2621, _2626);
                        float _2628 = mad(0.053689517080783844f, _2622, _2627);
                        float _2629 = _2620 * -0.005574649665504694f;
                        float _2630 = mad(0.00406073359772563f, _2621, _2629);
                        float _2631 = mad(1.0103391408920288f, _2622, _2630);
                        float _2632 = _2625 * 1.6410233974456787f;
                        float _2633 = mad(-0.32480329275131226f, _2628, _2632);
                        float _2634 = mad(-0.23642469942569733f, _2631, _2633);
                        float _2635 = _2625 * -0.663662850856781f;
                        float _2636 = mad(1.6153316497802734f, _2628, _2635);
                        float _2637 = mad(0.016756348311901093f, _2631, _2636);
                        float _2638 = _2625 * 0.011721894145011902f;
                        float _2639 = mad(-0.008284442126750946f, _2628, _2638);
                        float _2640 = mad(0.9883948564529419f, _2631, _2639);
                        float _2641 = max(_2634, 0.0f);
                        float _2642 = max(_2637, 0.0f);
                        float _2643 = max(_2640, 0.0f);
                        float _2644 = min(_2641, 65535.0f);
                        float _2645 = min(_2642, 65535.0f);
                        float _2646 = min(_2643, 65535.0f);
                        float _2647 = _2644 * _2160;
                        float _2648 = _2645 * _2160;
                        float _2649 = _2646 * _2160;
                        float _2650 = max(_2647, 0.0f);
                        float _2651 = max(_2648, 0.0f);
                        float _2652 = max(_2649, 0.0f);
                        float _2653 = min(_2650, 65535.0f);
                        float _2654 = min(_2651, 65535.0f);
                        float _2655 = min(_2652, 65535.0f);
                        bool _2656 = (_1425 == 6);
                        _2668 = _2653;
                        _2669 = _2654;
                        _2670 = _2655;
                        do {
                          if (!_2656) {
                            float _2658 = _2653 * _55;
                            float _2659 = mad(_56, _2654, _2658);
                            float _2660 = mad(_57, _2655, _2659);
                            float _2661 = _2653 * _58;
                            float _2662 = mad(_59, _2654, _2661);
                            float _2663 = mad(_60, _2655, _2662);
                            float _2664 = _2653 * _61;
                            float _2665 = mad(_62, _2654, _2664);
                            float _2666 = mad(_63, _2655, _2665);
                            _2668 = _2660;
                            _2669 = _2663;
                            _2670 = _2666;
                          }
                          float _2671 = _2668 * 9.999999747378752e-05f;
                          float _2672 = _2669 * 9.999999747378752e-05f;
                          float _2673 = _2670 * 9.999999747378752e-05f;
                          float _2674 = log2(_2671);
                          float _2675 = log2(_2672);
                          float _2676 = log2(_2673);
                          float _2677 = _2674 * 0.1593017578125f;
                          float _2678 = _2675 * 0.1593017578125f;
                          float _2679 = _2676 * 0.1593017578125f;
                          float _2680 = exp2(_2677);
                          float _2681 = exp2(_2678);
                          float _2682 = exp2(_2679);
                          float _2683 = _2680 * 18.8515625f;
                          float _2684 = _2681 * 18.8515625f;
                          float _2685 = _2682 * 18.8515625f;
                          float _2686 = _2683 + 0.8359375f;
                          float _2687 = _2684 + 0.8359375f;
                          float _2688 = _2685 + 0.8359375f;
                          float _2689 = _2680 * 18.6875f;
                          float _2690 = _2681 * 18.6875f;
                          float _2691 = _2682 * 18.6875f;
                          float _2692 = _2689 + 1.0f;
                          float _2693 = _2690 + 1.0f;
                          float _2694 = _2691 + 1.0f;
                          float _2695 = 1.0f / _2692;
                          float _2696 = 1.0f / _2693;
                          float _2697 = 1.0f / _2694;
                          float _2698 = _2695 * _2686;
                          float _2699 = _2696 * _2687;
                          float _2700 = _2697 * _2688;
                          float _2701 = log2(_2698);
                          float _2702 = log2(_2699);
                          float _2703 = log2(_2700);
                          float _2704 = _2701 * 78.84375f;
                          float _2705 = _2702 * 78.84375f;
                          float _2706 = _2703 * 78.84375f;
                          float _2707 = exp2(_2704);
                          float _2708 = exp2(_2705);
                          float _2709 = exp2(_2706);
                          _2847 = _2707;
                          _2848 = _2708;
                          _2849 = _2709;
                        } while (false);
                      } while (false);
                    } while (false);
                  } while (false);
                } while (false);
              } while (false);
            } while (false);
          } while (false);
        } else {
          bool _2711 = (_1425 == 7);
          if (_2711) {
            float _2714 = UniformBufferConstants_WorkingColorSpace_008x;
            float _2715 = UniformBufferConstants_WorkingColorSpace_008y;
            float _2716 = UniformBufferConstants_WorkingColorSpace_008z;
            float _2718 = UniformBufferConstants_WorkingColorSpace_009x;
            float _2719 = UniformBufferConstants_WorkingColorSpace_009y;
            float _2720 = UniformBufferConstants_WorkingColorSpace_009z;
            float _2722 = UniformBufferConstants_WorkingColorSpace_010x;
            float _2723 = UniformBufferConstants_WorkingColorSpace_010y;
            float _2724 = UniformBufferConstants_WorkingColorSpace_010z;
            float _2725 = _2714 * _1407;
            float _2726 = mad(_2715, _1408, _2725);
            float _2727 = mad(_2716, _1409, _2726);
            float _2728 = _2718 * _1407;
            float _2729 = mad(_2719, _1408, _2728);
            float _2730 = mad(_2720, _1409, _2729);
            float _2731 = _2722 * _1407;
            float _2732 = mad(_2723, _1408, _2731);
            float _2733 = mad(_2724, _1409, _2732);
            float _2734 = _2727 * _55;
            float _2735 = mad(_56, _2730, _2734);
            float _2736 = mad(_57, _2733, _2735);
            float _2737 = _2727 * _58;
            float _2738 = mad(_59, _2730, _2737);
            float _2739 = mad(_60, _2733, _2738);
            float _2740 = _2727 * _61;
            float _2741 = mad(_62, _2730, _2740);
            float _2742 = mad(_63, _2733, _2741);
            float _2743 = _2736 * 9.999999747378752e-05f;
            float _2744 = _2739 * 9.999999747378752e-05f;
            float _2745 = _2742 * 9.999999747378752e-05f;
            float _2746 = log2(_2743);
            float _2747 = log2(_2744);
            float _2748 = log2(_2745);
            float _2749 = _2746 * 0.1593017578125f;
            float _2750 = _2747 * 0.1593017578125f;
            float _2751 = _2748 * 0.1593017578125f;
            float _2752 = exp2(_2749);
            float _2753 = exp2(_2750);
            float _2754 = exp2(_2751);
            float _2755 = _2752 * 18.8515625f;
            float _2756 = _2753 * 18.8515625f;
            float _2757 = _2754 * 18.8515625f;
            float _2758 = _2755 + 0.8359375f;
            float _2759 = _2756 + 0.8359375f;
            float _2760 = _2757 + 0.8359375f;
            float _2761 = _2752 * 18.6875f;
            float _2762 = _2753 * 18.6875f;
            float _2763 = _2754 * 18.6875f;
            float _2764 = _2761 + 1.0f;
            float _2765 = _2762 + 1.0f;
            float _2766 = _2763 + 1.0f;
            float _2767 = 1.0f / _2764;
            float _2768 = 1.0f / _2765;
            float _2769 = 1.0f / _2766;
            float _2770 = _2767 * _2758;
            float _2771 = _2768 * _2759;
            float _2772 = _2769 * _2760;
            float _2773 = log2(_2770);
            float _2774 = log2(_2771);
            float _2775 = log2(_2772);
            float _2776 = _2773 * 78.84375f;
            float _2777 = _2774 * 78.84375f;
            float _2778 = _2775 * 78.84375f;
            float _2779 = exp2(_2776);
            float _2780 = exp2(_2777);
            float _2781 = exp2(_2778);
            _2847 = _2779;
            _2848 = _2780;
            _2849 = _2781;
          } else {
            bool _2783 = (_1425 == 8);
            _2847 = _1407;
            _2848 = _1408;
            _2849 = _1409;
            if (!_2783) {
              bool _2785 = (_1425 == 9);
              float _2787 = UniformBufferConstants_WorkingColorSpace_008x;
              float _2788 = UniformBufferConstants_WorkingColorSpace_008y;
              float _2789 = UniformBufferConstants_WorkingColorSpace_008z;
              float _2791 = UniformBufferConstants_WorkingColorSpace_009x;
              float _2792 = UniformBufferConstants_WorkingColorSpace_009y;
              float _2793 = UniformBufferConstants_WorkingColorSpace_009z;
              float _2795 = UniformBufferConstants_WorkingColorSpace_010x;
              float _2796 = UniformBufferConstants_WorkingColorSpace_010y;
              float _2797 = UniformBufferConstants_WorkingColorSpace_010z;
              if (_2785) {
                float _2799 = _2787 * _1395;
                float _2800 = mad(_2788, _1396, _2799);
                float _2801 = mad(_2789, _1397, _2800);
                float _2802 = _2791 * _1395;
                float _2803 = mad(_2792, _1396, _2802);
                float _2804 = mad(_2793, _1397, _2803);
                float _2805 = _2795 * _1395;
                float _2806 = mad(_2796, _1396, _2805);
                float _2807 = mad(_2797, _1397, _2806);
                float _2808 = _2801 * _55;
                float _2809 = mad(_56, _2804, _2808);
                float _2810 = mad(_57, _2807, _2809);
                float _2811 = _2801 * _58;
                float _2812 = mad(_59, _2804, _2811);
                float _2813 = mad(_60, _2807, _2812);
                float _2814 = _2801 * _61;
                float _2815 = mad(_62, _2804, _2814);
                float _2816 = mad(_63, _2807, _2815);
                _2847 = _2810;
                _2848 = _2813;
                _2849 = _2816;
              } else {
                float _2818 = _2787 * _1421;
                float _2819 = mad(_2788, _1422, _2818);
                float _2820 = mad(_2789, _1423, _2819);
                float _2821 = _2791 * _1421;
                float _2822 = mad(_2792, _1422, _2821);
                float _2823 = mad(_2793, _1423, _2822);
                float _2824 = _2795 * _1421;
                float _2825 = mad(_2796, _1422, _2824);
                float _2826 = mad(_2797, _1423, _2825);
                float _2827 = _2820 * _55;
                float _2828 = mad(_56, _2823, _2827);
                float _2829 = mad(_57, _2826, _2828);
                float _2830 = _2820 * _58;
                float _2831 = mad(_59, _2823, _2830);
                float _2832 = mad(_60, _2826, _2831);
                float _2833 = _2820 * _61;
                float _2834 = mad(_62, _2823, _2833);
                float _2835 = mad(_63, _2826, _2834);
                float _2836 = _RootShaderParameters_040z;
                float _2837 = log2(_2829);
                float _2838 = log2(_2832);
                float _2839 = log2(_2835);
                float _2840 = _2837 * _2836;
                float _2841 = _2838 * _2836;
                float _2842 = _2839 * _2836;
                float _2843 = exp2(_2840);
                float _2844 = exp2(_2841);
                float _2845 = exp2(_2842);
                _2847 = _2843;
                _2848 = _2844;
                _2849 = _2845;
              }
            }
          }
        }
      }
    }
  }
  float _2850 = _2847 * 0.9523810148239136f;
  float _2851 = _2848 * 0.9523810148239136f;
  float _2852 = _2849 * 0.9523810148239136f;
  // _2853 = _1;
  // CustomEdit
  RWOutputTexture[int3(_14, _15, _16)] = float4(_2850, _2851, _2852, 0.0f);
}
