#include "../common.hlsl"

Texture2D<float4> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture3D<float4> t2 : register(t2);

cbuffer cb0 : register(b0) {
  float cb0_037y : packoffset(c037.y);
  float cb0_037z : packoffset(c037.z);
  float cb0_037w : packoffset(c037.w);
  float cb0_038x : packoffset(c038.x);
  float cb0_038y : packoffset(c038.y);
  float cb0_038z : packoffset(c038.z);
  float cb0_048x : packoffset(c048.x);
  float cb0_048y : packoffset(c048.y);
  float cb0_048z : packoffset(c048.z);
  float cb0_048w : packoffset(c048.w);
  float cb0_049x : packoffset(c049.x);
  float cb0_049y : packoffset(c049.y);
  float cb0_053z : packoffset(c053.z);
  float cb0_053w : packoffset(c053.w);
  float cb0_054x : packoffset(c054.x);
  float cb0_054y : packoffset(c054.y);
  float cb0_060z : packoffset(c060.z);
  float cb0_060w : packoffset(c060.w);
  float cb0_061x : packoffset(c061.x);
  float cb0_061y : packoffset(c061.y);
  float cb0_068z : packoffset(c068.z);
  float cb0_068w : packoffset(c068.w);
  float cb0_069x : packoffset(c069.x);
  float cb0_069y : packoffset(c069.y);
  float cb0_070x : packoffset(c070.x);
  float cb0_070y : packoffset(c070.y);
  float cb0_070z : packoffset(c070.z);
  float cb0_072x : packoffset(c072.x);
  float cb0_072z : packoffset(c072.z);
  float cb0_072w : packoffset(c072.w);
  float cb0_073x : packoffset(c073.x);
  float cb0_073y : packoffset(c073.y);
  float cb0_073z : packoffset(c073.z);
  float cb0_073w : packoffset(c073.w);
  float cb0_074x : packoffset(c074.x);
  float cb0_074y : packoffset(c074.y);
  float cb0_074z : packoffset(c074.z);
  float cb0_075x : packoffset(c075.x);
  float cb0_075z : packoffset(c075.z);
  float cb0_075w : packoffset(c075.w);
  float cb0_076x : packoffset(c076.x);
  float cb0_076y : packoffset(c076.y);
  float cb0_076z : packoffset(c076.z);
  float cb0_076w : packoffset(c076.w);
  float cb0_077x : packoffset(c077.x);
  float cb0_077y : packoffset(c077.y);
  float cb0_077z : packoffset(c077.z);
  float cb0_079x : packoffset(c079.x);
  float cb0_079y : packoffset(c079.y);
  float cb0_079z : packoffset(c079.z);
  float cb0_080x : packoffset(c080.x);
  uint cb0_089w : packoffset(c089.w);
  float cb0_090x : packoffset(c090.x);
  float cb0_090y : packoffset(c090.y);
  float cb0_090z : packoffset(c090.z);
  float cb0_091x : packoffset(c091.x);
  uint cb0_091y : packoffset(c091.y);
  uint cb0_091z : packoffset(c091.z);
  uint cb0_091w : packoffset(c091.w);
  uint cb0_092x : packoffset(c092.x);
};

SamplerState s0 : register(s0);

SamplerState s1 : register(s1);

SamplerState s2 : register(s2);

float4 main(
  noperspective float2 TEXCOORD : TEXCOORD,
  noperspective float4 TEXCOORD_1 : TEXCOORD1,
  noperspective float4 TEXCOORD_2 : TEXCOORD2,
  noperspective float2 TEXCOORD_3 : TEXCOORD3,
  noperspective float2 TEXCOORD_4 : TEXCOORD4,
  noperspective float4 SV_Position : SV_Position
) : SV_Target {
  float4 SV_Target;
  float _29 = ((cb0_048z * TEXCOORD_3.x) + cb0_049x) * cb0_048x;
  float _30 = ((cb0_048w * TEXCOORD_3.y) + cb0_049y) * cb0_048y;
  float _31 = TEXCOORD_2.w * 543.3099975585938f;
  float _35 = frac(sin(_31 + TEXCOORD_2.z) * 493013.0f);
  float _59;
  float _60;
  float _253;
  float _254;
  float _255;
  float _287;
  float _288;
  float _289;
  float _337;
  float _338;
  float _339;
  float _412;
  float _415;
  float _416;
  float _417;
  float _441;
  float _444;
  float _445;
  float _446;
  float _481;
  float _482;
  float _483;
  float _596;
  float _597;
  float _598;
  float _605;
  float _619;
  if (cb0_080x > 0.0f) {
    _59 = ((cb0_080x * (frac((sin((TEXCOORD_2.z + 33.9900016784668f) + _31) * 493013.0f) + 7.177000045776367f) - _35)) + _35);
    _60 = ((cb0_080x * (frac((sin((TEXCOORD_2.z + 66.98999786376953f) + _31) * 493013.0f) + 14.298999786376953f) - _35)) + _35);
  } else {
    _59 = _35;
    _60 = _35;
  }
  float _65 = cb0_079z * (1.0f - (_35 * _35));
  float _70 = (_65 * (TEXCOORD_2.x - _29)) + _29;
  float _71 = (_65 * (TEXCOORD_2.y - _30)) + _30;
  float4 _82 = t0.Sample(s0, float2(min(max(_70, cb0_053z), cb0_054x), min(max(_71, cb0_053w), cb0_054y)));

  float4 _110 = t1.Sample(s1, float2(min(max(((cb0_068z * _70) + cb0_069x), cb0_060z), cb0_061x), min(max(((cb0_068w * _71) + cb0_069y), cb0_060w), cb0_061y)));
  _110.rgb *= RENODX_WUWA_BLOOM;

  float _138 = TEXCOORD_1.z + -1.0f;
  float _140 = TEXCOORD_1.w + -1.0f;
  float _143 = ((_138 + (cb0_074x * 2.0f)) * cb0_072z) * cb0_072x;
  float _145 = ((_140 + (cb0_074y * 2.0f)) * cb0_072w) * cb0_072x;
  float _152 = 1.0f / ((((saturate(cb0_073w) * 9.0f) + 1.0f) * dot(float2(_143, _145), float2(_143, _145))) + 1.0f);
  float _153 = _152 * _152;
  float _154 = cb0_074z + 1.0f;
  float _182 = ((_138 + (cb0_077x * 2.0f)) * cb0_075z) * cb0_075x;
  float _184 = ((_140 + (cb0_077y * 2.0f)) * cb0_075w) * cb0_075x;
  float _191 = 1.0f / ((((saturate(cb0_076w) * 9.0f) + 1.0f) * dot(float2(_182, _184), float2(_182, _184))) + 1.0f);
  float _192 = _191 * _191;
  float _193 = cb0_077z + 1.0f;
  float _214 = ((((_153 * (_154 - cb0_073x)) + cb0_073x) * (_110.x + ((_82.x * TEXCOORD_1.x) * cb0_070x))) * ((_192 * (_193 - cb0_076x)) + cb0_076x)) * ((cb0_079x * _35) + cb0_079y);
  float _217 = ((((_153 * (_154 - cb0_073y)) + cb0_073y) * (_110.y + ((_82.y * TEXCOORD_1.x) * cb0_070y))) * ((_192 * (_193 - cb0_076y)) + cb0_076y)) * ((cb0_079x * _59) + cb0_079y);
  float _220 = ((((_153 * (_154 - cb0_073z)) + cb0_073z) * (_110.z + ((_82.z * TEXCOORD_1.x) * cb0_070z))) * ((_192 * (_193 - cb0_076z)) + cb0_076z)) * ((cb0_079x * _60) + cb0_079y);

  CAPTURE_UNTONEMAPPED(untonemapped, float3(_214, _217, _220));

  [branch]
  // if (!((uint)(cb0_091z) == 0)) {
  if (!((uint)(RENODX_WUWA_TM) == 1)) {
    // _253 = saturate((((_214 * 1.3600000143051147f) + 0.04699999839067459f) * _214) / ((((_214 * 0.9599999785423279f) + 0.5600000023841858f) * _214) + 0.14000000059604645f));
    // _254 = saturate((((_217 * 1.3600000143051147f) + 0.04699999839067459f) * _217) / ((((_217 * 0.9599999785423279f) + 0.5600000023841858f) * _217) + 0.14000000059604645f));
    // _255 = saturate((((_220 * 1.3600000143051147f) + 0.04699999839067459f) * _220) / ((((_220 * 0.9599999785423279f) + 0.5600000023841858f) * _220) + 0.14000000059604645f));
    _253 = ((((_214 * 1.3600000143051147f) + 0.04699999839067459f) * _214) / ((((_214 * 0.9599999785423279f) + 0.5600000023841858f) * _214) + 0.14000000059604645f));
    _254 = ((((_217 * 1.3600000143051147f) + 0.04699999839067459f) * _217) / ((((_217 * 0.9599999785423279f) + 0.5600000023841858f) * _217) + 0.14000000059604645f));
    _255 = ((((_220 * 1.3600000143051147f) + 0.04699999839067459f) * _220) / ((((_220 * 0.9599999785423279f) + 0.5600000023841858f) * _220) + 0.14000000059604645f));
  } else {
    _253 = _214;
    _254 = _217;
    _255 = _220;
  }
  [branch]
  // if (!((uint)(cb0_091w) == 0)) {
  if (!((uint)(RENODX_WUWA_TM) == 2)) {
    float _265 = 1.0049500465393066f - (0.16398000717163086f / (_253 + -0.19505000114440918f));
    float _266 = 1.0049500465393066f - (0.16398000717163086f / (_254 + -0.19505000114440918f));
    float _267 = 1.0049500465393066f - (0.16398000717163086f / (_255 + -0.19505000114440918f));
    // _287 = saturate(((_253 - _265) * select((_253 > 0.6000000238418579f), 0.0f, 1.0f)) + _265);
    // _288 = saturate(((_254 - _266) * select((_254 > 0.6000000238418579f), 0.0f, 1.0f)) + _266);
    // _289 = saturate(((_255 - _267) * select((_255 > 0.6000000238418579f), 0.0f, 1.0f)) + _267);
    _287 = (((_253 - _265) * select((_253 > 0.6000000238418579f), 0.0f, 1.0f)) + _265);
    _288 = (((_254 - _266) * select((_254 > 0.6000000238418579f), 0.0f, 1.0f)) + _266);
    _289 = (((_255 - _267) * select((_255 > 0.6000000238418579f), 0.0f, 1.0f)) + _267);
  } else {
    _287 = _253;
    _288 = _254;
    _289 = _255;
  }
  [branch]
  // if (!((uint)(cb0_092x) == 0)) {
  if (!((uint)(RENODX_WUWA_TM) == 3)) {
    float _296 = cb0_037y * _287;
    float _297 = cb0_037y * _288;
    float _298 = cb0_037y * _289;
    float _301 = cb0_037z * cb0_037w;
    float _311 = cb0_038y * cb0_038x;
    float _322 = cb0_038z * cb0_038x;
    float _329 = cb0_038y / cb0_038z;
    // _337 = saturate(((((_301 + _296) * _287) + _311) / (_322 + ((_296 + cb0_037z) * _287))) - _329);
    // _338 = saturate(((((_301 + _297) * _288) + _311) / (_322 + ((_297 + cb0_037z) * _288))) - _329);
    // _339 = saturate(((((_301 + _298) * _289) + _311) / (_322 + ((_298 + cb0_037z) * _289))) - _329);
    _337 = (((((_301 + _296) * _287) + _311) / (_322 + ((_296 + cb0_037z) * _287))) - _329);
    _338 = (((((_301 + _297) * _288) + _311) / (_322 + ((_297 + cb0_037z) * _288))) - _329);
    _339 = (((((_301 + _298) * _289) + _311) / (_322 + ((_298 + cb0_037z) * _289))) - _329);
  } else {
    _337 = _287;
    _338 = _288;
    _339 = _289;
  }
  [branch]
  if (!((uint)(cb0_089w) == 0)) {
    if (!((bool)(cb0_090x <= 0.0f) && (bool)(cb0_090y <= 0.0f))) {
      float _351 = dot(float3(_337, _338, _339), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      if (!(_351 <= 9.999999747378752e-05f)) {
        float _360 = (pow(_337, 0.1593017578125f));
        float _361 = (pow(_338, 0.1593017578125f));
        float _362 = (pow(_339, 0.1593017578125f));
        float _384 = exp2(log2(((_360 * 18.8515625f) + 0.8359375f) / ((_360 * 18.6875f) + 1.0f)) * 78.84375f);
        float _385 = exp2(log2(((_361 * 18.8515625f) + 0.8359375f) / ((_361 * 18.6875f) + 1.0f)) * 78.84375f);
        float _386 = exp2(log2(((_362 * 18.8515625f) + 0.8359375f) / ((_362 * 18.6875f) + 1.0f)) * 78.84375f);
        if ((bool)(cb0_090y > 0.0f) && (bool)((_351 / cb0_090y) > 1.0f)) {
          float _395 = (pow(cb0_090y, 0.1593017578125f));
          float _403 = exp2(log2(((_395 * 18.8515625f) + 0.8359375f) / ((_395 * 18.6875f) + 1.0f)) * 78.84375f);
          if (_384 > _403) {
            float _406 = _384 - _403;
            _412 = ((_406 / ((_406 * cb0_090z) + 1.0f)) + _403);
          } else {
            _412 = _384;
          }
          if (_385 > _403) {
            float _613 = _385 - _403;
            _619 = ((_613 / ((_613 * cb0_090z) + 1.0f)) + _403);
            if (_386 > _403) {
              float _622 = _386 - _403;
              _415 = ((_622 / ((_622 * cb0_090z) + 1.0f)) + _403);
              _416 = _619;
              _417 = _412;
            } else {
              _415 = _386;
              _416 = _619;
              _417 = _412;
            }
          } else {
            _619 = _385;
            if (_386 > _403) {
              float _622 = _386 - _403;
              _415 = ((_622 / ((_622 * cb0_090z) + 1.0f)) + _403);
              _416 = _619;
              _417 = _412;
            } else {
              _415 = _386;
              _416 = _619;
              _417 = _412;
            }
          }
          while(true) {
            if (cb0_090x > 0.0f) {
              if (_351 < cb0_090x) {
                float _425 = (pow(cb0_090x, 0.1593017578125f));
                float _433 = exp2(log2(((_425 * 18.8515625f) + 0.8359375f) / ((_425 * 18.6875f) + 1.0f)) * 78.84375f);
                if (_417 < _433) {
                  _441 = (((cb0_090z * 0.30000001192092896f) * (_433 - _417)) + _417);
                } else {
                  _441 = _417;
                }
                if (_416 < _433) {
                  _605 = (((cb0_090z * 0.30000001192092896f) * (_433 - _416)) + _416);
                  if (_415 < _433) {
                    _444 = (((cb0_090z * 0.30000001192092896f) * (_433 - _415)) + _415);
                    _445 = _605;
                    _446 = _441;
                  } else {
                    _444 = _415;
                    _445 = _605;
                    _446 = _441;
                  }
                } else {
                  _605 = _416;
                  if (_415 < _433) {
                    _444 = (((cb0_090z * 0.30000001192092896f) * (_433 - _415)) + _415);
                    _445 = _605;
                    _446 = _441;
                  } else {
                    _444 = _415;
                    _445 = _605;
                    _446 = _441;
                  }
                }
              } else {
                _444 = _415;
                _445 = _416;
                _446 = _417;
              }
            } else {
              _444 = _415;
              _445 = _416;
              _446 = _417;
            }
            while(true) {
              float _453 = (pow(_446, 0.012683313339948654f));
              float _454 = (pow(_445, 0.012683313339948654f));
              float _455 = (pow(_444, 0.012683313339948654f));
              _481 = exp2(log2(max((_453 + -0.8359375f), 0.0f) / (18.8515625f - (_453 * 18.6875f))) * 6.277394771575928f);
              _482 = exp2(log2(max((_454 + -0.8359375f), 0.0f) / (18.8515625f - (_454 * 18.6875f))) * 6.277394771575928f);
              _483 = exp2(log2(max((_455 + -0.8359375f), 0.0f) / (18.8515625f - (_455 * 18.6875f))) * 6.277394771575928f);
              break;
            }
            break;
          }
        } else {
          _415 = _386;
          _416 = _385;
          _417 = _384;
          while(true) {
            if (cb0_090x > 0.0f) {
              if (_351 < cb0_090x) {
                float _425 = (pow(cb0_090x, 0.1593017578125f));
                float _433 = exp2(log2(((_425 * 18.8515625f) + 0.8359375f) / ((_425 * 18.6875f) + 1.0f)) * 78.84375f);
                if (_417 < _433) {
                  _441 = (((cb0_090z * 0.30000001192092896f) * (_433 - _417)) + _417);
                } else {
                  _441 = _417;
                }
                if (_416 < _433) {
                  _605 = (((cb0_090z * 0.30000001192092896f) * (_433 - _416)) + _416);
                  if (_415 < _433) {
                    _444 = (((cb0_090z * 0.30000001192092896f) * (_433 - _415)) + _415);
                    _445 = _605;
                    _446 = _441;
                  } else {
                    _444 = _415;
                    _445 = _605;
                    _446 = _441;
                  }
                } else {
                  _605 = _416;
                  if (_415 < _433) {
                    _444 = (((cb0_090z * 0.30000001192092896f) * (_433 - _415)) + _415);
                    _445 = _605;
                    _446 = _441;
                  } else {
                    _444 = _415;
                    _445 = _605;
                    _446 = _441;
                  }
                }
              } else {
                _444 = _415;
                _445 = _416;
                _446 = _417;
              }
            } else {
              _444 = _415;
              _445 = _416;
              _446 = _417;
            }
            while(true) {
              float _453 = (pow(_446, 0.012683313339948654f));
              float _454 = (pow(_445, 0.012683313339948654f));
              float _455 = (pow(_444, 0.012683313339948654f));
              _481 = exp2(log2(max((_453 + -0.8359375f), 0.0f) / (18.8515625f - (_453 * 18.6875f))) * 6.277394771575928f);
              _482 = exp2(log2(max((_454 + -0.8359375f), 0.0f) / (18.8515625f - (_454 * 18.6875f))) * 6.277394771575928f);
              _483 = exp2(log2(max((_455 + -0.8359375f), 0.0f) / (18.8515625f - (_455 * 18.6875f))) * 6.277394771575928f);
              break;
            }
            break;
          }
        }
      } else {
        _481 = _337;
        _482 = _338;
        _483 = _339;
      }
    } else {
      _481 = _337;
      _482 = _338;
      _483 = _339;
    }
  } else {
    _481 = _337;
    _482 = _338;
    _483 = _339;
  }

  CLAMP_IF_SDR(_481); CLAMP_IF_SDR(_482); CLAMP_IF_SDR(_483);
  CAPTURE_TONEMAPPED(tonemapped, float3(_481, _482, _483));

  float4 _505 = t2.Sample(s2, float3(((saturate((log2(_481 + 0.002667719265446067f) * 0.0714285746216774f) + 0.6107269525527954f) * 0.96875f) + 0.015625f), ((saturate((log2(_482 + 0.002667719265446067f) * 0.0714285746216774f) + 0.6107269525527954f) * 0.96875f) + 0.015625f), ((saturate((log2(_483 + 0.002667719265446067f) * 0.0714285746216774f) + 0.6107269525527954f) * 0.96875f) + 0.015625f)));
  _505.rgb = HandleLUTOutput(_505.rgb, untonemapped, tonemapped);

  float _509 = _505.x * 1.0499999523162842f;
  float _510 = _505.y * 1.0499999523162842f;
  float _511 = _505.z * 1.0499999523162842f;
  float _519 = ((_35 * 0.00390625f) + -0.001953125f) + _509;
  float _520 = ((_59 * 0.00390625f) + -0.001953125f) + _510;
  float _521 = ((_60 * 0.00390625f) + -0.001953125f) + _511;
  [branch]
  if (!((uint)(cb0_091y) == 0)) {
    float _533 = (pow(_519, 0.012683313339948654f));
    float _534 = (pow(_520, 0.012683313339948654f));
    float _535 = (pow(_521, 0.012683313339948654f));
    float _568 = max(6.103519990574569e-05f, ((exp2(log2(max(0.0f, (_533 + -0.8359375f)) / (18.8515625f - (_533 * 18.6875f))) * 6.277394771575928f) * 10000.0f) / cb0_091x));
    float _569 = max(6.103519990574569e-05f, ((exp2(log2(max(0.0f, (_534 + -0.8359375f)) / (18.8515625f - (_534 * 18.6875f))) * 6.277394771575928f) * 10000.0f) / cb0_091x));
    float _570 = max(6.103519990574569e-05f, ((exp2(log2(max(0.0f, (_535 + -0.8359375f)) / (18.8515625f - (_535 * 18.6875f))) * 6.277394771575928f) * 10000.0f) / cb0_091x));
    _596 = min((_568 * 12.920000076293945f), ((exp2(log2(max(_568, 0.0031306699384003878f)) * 0.4166666567325592f) * 1.0549999475479126f) + -0.054999999701976776f));
    _597 = min((_569 * 12.920000076293945f), ((exp2(log2(max(_569, 0.0031306699384003878f)) * 0.4166666567325592f) * 1.0549999475479126f) + -0.054999999701976776f));
    _598 = min((_570 * 12.920000076293945f), ((exp2(log2(max(_570, 0.0031306699384003878f)) * 0.4166666567325592f) * 1.0549999475479126f) + -0.054999999701976776f));
  } else {
    _596 = _519;
    _597 = _520;
    _598 = _521;
  }
  SV_Target.x = _596;
  SV_Target.y = _597;
  SV_Target.z = _598;

  // SV_Target.w = saturate(dot(float3(_509, _510, _511), float3(0.29899999499320984f, 0.5870000123977661f, 0.11400000005960464f)));
  SV_Target.w = (dot(float3(_509, _510, _511), float3(0.29899999499320984f, 0.5870000123977661f, 0.11400000005960464f)));
  CLAMP_IF_SDR(SV_Target.w);

  return SV_Target;
}
