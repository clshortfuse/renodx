#include "../common.hlsl"

Texture2D<float4> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture3D<float4> t2 : register(t2);

cbuffer cb0 : register(b0) {
  float cb0_037y : packoffset(c037.y);
  float cb0_037z : packoffset(c037.z);
  float cb0_037w : packoffset(c037.w);
  float cb0_038x : packoffset(c038.x);
  float cb0_038y : packoffset(c038.y);
  float cb0_038z : packoffset(c038.z);
  float cb0_048x : packoffset(c048.x);
  float cb0_048y : packoffset(c048.y);
  float cb0_048z : packoffset(c048.z);
  float cb0_048w : packoffset(c048.w);
  float cb0_049x : packoffset(c049.x);
  float cb0_049y : packoffset(c049.y);
  float cb0_053z : packoffset(c053.z);
  float cb0_053w : packoffset(c053.w);
  float cb0_054x : packoffset(c054.x);
  float cb0_054y : packoffset(c054.y);
  float cb0_060z : packoffset(c060.z);
  float cb0_060w : packoffset(c060.w);
  float cb0_061x : packoffset(c061.x);
  float cb0_061y : packoffset(c061.y);
  float cb0_068z : packoffset(c068.z);
  float cb0_068w : packoffset(c068.w);
  float cb0_069x : packoffset(c069.x);
  float cb0_069y : packoffset(c069.y);
  float cb0_070x : packoffset(c070.x);
  float cb0_070y : packoffset(c070.y);
  float cb0_070z : packoffset(c070.z);
  float cb0_072x : packoffset(c072.x);
  float cb0_072z : packoffset(c072.z);
  float cb0_072w : packoffset(c072.w);
  float cb0_073x : packoffset(c073.x);
  float cb0_073y : packoffset(c073.y);
  float cb0_073z : packoffset(c073.z);
  float cb0_073w : packoffset(c073.w);
  float cb0_074x : packoffset(c074.x);
  float cb0_074y : packoffset(c074.y);
  float cb0_074z : packoffset(c074.z);
  float cb0_075x : packoffset(c075.x);
  float cb0_075z : packoffset(c075.z);
  float cb0_075w : packoffset(c075.w);
  float cb0_076x : packoffset(c076.x);
  float cb0_076y : packoffset(c076.y);
  float cb0_076z : packoffset(c076.z);
  float cb0_076w : packoffset(c076.w);
  float cb0_077x : packoffset(c077.x);
  float cb0_077y : packoffset(c077.y);
  float cb0_077z : packoffset(c077.z);
  float cb0_079z : packoffset(c079.z);
  float cb0_080x : packoffset(c080.x);
  uint cb0_089w : packoffset(c089.w);
  float cb0_090x : packoffset(c090.x);
  float cb0_090y : packoffset(c090.y);
  float cb0_090z : packoffset(c090.z);
  float cb0_091x : packoffset(c091.x);
  uint cb0_091y : packoffset(c091.y);
  uint cb0_091z : packoffset(c091.z);
  uint cb0_091w : packoffset(c091.w);
  uint cb0_092x : packoffset(c092.x);
};

SamplerState s0 : register(s0);

SamplerState s1 : register(s1);

SamplerState s2 : register(s2);

float4 main(
  noperspective float2 TEXCOORD : TEXCOORD,
  noperspective float4 TEXCOORD_1 : TEXCOORD1,
  noperspective float4 TEXCOORD_2 : TEXCOORD2,
  noperspective float2 TEXCOORD_3 : TEXCOORD3,
  noperspective float2 TEXCOORD_4 : TEXCOORD4,
  noperspective float4 SV_Position : SV_Position
) : SV_Target {
  float4 SV_Target;
  float _29 = ((cb0_048z * TEXCOORD_3.x) + cb0_049x) * cb0_048x;
  float _30 = ((cb0_048w * TEXCOORD_3.y) + cb0_049y) * cb0_048y;
  float _31 = TEXCOORD_2.w * 543.3099975585938f;
  float _35 = frac(sin(_31 + TEXCOORD_2.z) * 493013.0f);
  float _59;
  float _60;
  float _241;
  float _242;
  float _243;
  float _275;
  float _276;
  float _277;
  float _325;
  float _326;
  float _327;
  float _400;
  float _403;
  float _404;
  float _405;
  float _429;
  float _432;
  float _433;
  float _434;
  float _469;
  float _470;
  float _471;
  float _584;
  float _585;
  float _586;
  float _593;
  float _607;
  if (cb0_080x > 0.0f) {
    _59 = ((cb0_080x * (frac((sin((TEXCOORD_2.z + 33.9900016784668f) + _31) * 493013.0f) + 7.177000045776367f) - _35)) + _35);
    _60 = ((cb0_080x * (frac((sin((TEXCOORD_2.z + 66.98999786376953f) + _31) * 493013.0f) + 14.298999786376953f) - _35)) + _35);
  } else {
    _59 = _35;
    _60 = _35;
  }
  float _65 = cb0_079z * (1.0f - (_35 * _35));
  float _70 = (_65 * (TEXCOORD_2.x - _29)) + _29;
  float _71 = (_65 * (TEXCOORD_2.y - _30)) + _30;
  float4 _82 = t0.Sample(s0, float2(min(max(_70, cb0_053z), cb0_054x), min(max(_71, cb0_053w), cb0_054y)));

  float4 _110 = t1.Sample(s1, float2(min(max(((cb0_068z * _70) + cb0_069x), cb0_060z), cb0_061x), min(max(((cb0_068w * _71) + cb0_069y), cb0_060w), cb0_061y)));
  _110.rgb *= RENODX_WUWA_BLOOM;

  float _138 = TEXCOORD_1.z + -1.0f;
  float _140 = TEXCOORD_1.w + -1.0f;
  float _143 = ((_138 + (cb0_074x * 2.0f)) * cb0_072z) * cb0_072x;
  float _145 = ((_140 + (cb0_074y * 2.0f)) * cb0_072w) * cb0_072x;
  float _152 = 1.0f / ((((saturate(cb0_073w) * 9.0f) + 1.0f) * dot(float2(_143, _145), float2(_143, _145))) + 1.0f);
  float _153 = _152 * _152;
  float _154 = cb0_074z + 1.0f;
  float _182 = ((_138 + (cb0_077x * 2.0f)) * cb0_075z) * cb0_075x;
  float _184 = ((_140 + (cb0_077y * 2.0f)) * cb0_075w) * cb0_075x;
  float _191 = 1.0f / ((((saturate(cb0_076w) * 9.0f) + 1.0f) * dot(float2(_182, _184), float2(_182, _184))) + 1.0f);
  float _192 = _191 * _191;
  float _193 = cb0_077z + 1.0f;
  float _204 = (((_153 * (_154 - cb0_073x)) + cb0_073x) * (_110.x + ((_82.x * TEXCOORD_1.x) * cb0_070x))) * ((_192 * (_193 - cb0_076x)) + cb0_076x);
  float _206 = (((_153 * (_154 - cb0_073y)) + cb0_073y) * (_110.y + ((_82.y * TEXCOORD_1.x) * cb0_070y))) * ((_192 * (_193 - cb0_076y)) + cb0_076y);
  float _208 = (((_153 * (_154 - cb0_073z)) + cb0_073z) * (_110.z + ((_82.z * TEXCOORD_1.x) * cb0_070z))) * ((_192 * (_193 - cb0_076z)) + cb0_076z);

  CAPTURE_UNTONEMAPPED(untonemapped, float3(_204, _206, _208));

  [branch]
  // if (!((uint)(cb0_091z) == 0)) {
  if (!((uint)(RENODX_WUWA_TM) == 1)) {
    // _241 = saturate((((_204 * 1.3600000143051147f) + 0.04699999839067459f) * _204) / ((((_204 * 0.9599999785423279f) + 0.5600000023841858f) * _204) + 0.14000000059604645f));
    // _242 = saturate((((_206 * 1.3600000143051147f) + 0.04699999839067459f) * _206) / ((((_206 * 0.9599999785423279f) + 0.5600000023841858f) * _206) + 0.14000000059604645f));
    // _243 = saturate((((_208 * 1.3600000143051147f) + 0.04699999839067459f) * _208) / ((((_208 * 0.9599999785423279f) + 0.5600000023841858f) * _208) + 0.14000000059604645f));
    _241 = ((((_204 * 1.3600000143051147f) + 0.04699999839067459f) * _204) / ((((_204 * 0.9599999785423279f) + 0.5600000023841858f) * _204) + 0.14000000059604645f));
    _242 = ((((_206 * 1.3600000143051147f) + 0.04699999839067459f) * _206) / ((((_206 * 0.9599999785423279f) + 0.5600000023841858f) * _206) + 0.14000000059604645f));
    _243 = ((((_208 * 1.3600000143051147f) + 0.04699999839067459f) * _208) / ((((_208 * 0.9599999785423279f) + 0.5600000023841858f) * _208) + 0.14000000059604645f));
  } else {
    _241 = _204;
    _242 = _206;
    _243 = _208;
  }
  [branch]
  // if (!((uint)(cb0_091w) == 0)) {
  if (!((uint)(RENODX_WUWA_TM) == 2)) {
    float _253 = 1.0049500465393066f - (0.16398000717163086f / (_241 + -0.19505000114440918f));
    float _254 = 1.0049500465393066f - (0.16398000717163086f / (_242 + -0.19505000114440918f));
    float _255 = 1.0049500465393066f - (0.16398000717163086f / (_243 + -0.19505000114440918f));
    // _275 = saturate(((_241 - _253) * select((_241 > 0.6000000238418579f), 0.0f, 1.0f)) + _253);
    // _276 = saturate(((_242 - _254) * select((_242 > 0.6000000238418579f), 0.0f, 1.0f)) + _254);
    // _277 = saturate(((_243 - _255) * select((_243 > 0.6000000238418579f), 0.0f, 1.0f)) + _255);
    _275 = (((_241 - _253) * select((_241 > 0.6000000238418579f), 0.0f, 1.0f)) + _253);
    _276 = (((_242 - _254) * select((_242 > 0.6000000238418579f), 0.0f, 1.0f)) + _254);
    _277 = (((_243 - _255) * select((_243 > 0.6000000238418579f), 0.0f, 1.0f)) + _255);
  } else {
    _275 = _241;
    _276 = _242;
    _277 = _243;
  }
  [branch]
  // if (!((uint)(cb0_092x) == 0)) {
  if (!((uint)(RENODX_WUWA_TM) == 3)) {
    float _284 = cb0_037y * _275;
    float _285 = cb0_037y * _276;
    float _286 = cb0_037y * _277;
    float _289 = cb0_037z * cb0_037w;
    float _299 = cb0_038y * cb0_038x;
    float _310 = cb0_038z * cb0_038x;
    float _317 = cb0_038y / cb0_038z;
    // _325 = saturate(((((_289 + _284) * _275) + _299) / (_310 + ((_284 + cb0_037z) * _275))) - _317);
    // _326 = saturate(((((_289 + _285) * _276) + _299) / (_310 + ((_285 + cb0_037z) * _276))) - _317);
    // _327 = saturate(((((_289 + _286) * _277) + _299) / (_310 + ((_286 + cb0_037z) * _277))) - _317);
    _325 = (((((_289 + _284) * _275) + _299) / (_310 + ((_284 + cb0_037z) * _275))) - _317);
    _326 = (((((_289 + _285) * _276) + _299) / (_310 + ((_285 + cb0_037z) * _276))) - _317);
    _327 = (((((_289 + _286) * _277) + _299) / (_310 + ((_286 + cb0_037z) * _277))) - _317);
  } else {
    _325 = _275;
    _326 = _276;
    _327 = _277;
  }
  [branch]
  if (!((uint)(cb0_089w) == 0)) {
    if (!((bool)(cb0_090x <= 0.0f) && (bool)(cb0_090y <= 0.0f))) {
      float _339 = dot(float3(_325, _326, _327), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      if (!(_339 <= 9.999999747378752e-05f)) {
        float _348 = (pow(_325, 0.1593017578125f));
        float _349 = (pow(_326, 0.1593017578125f));
        float _350 = (pow(_327, 0.1593017578125f));
        float _372 = exp2(log2(((_348 * 18.8515625f) + 0.8359375f) / ((_348 * 18.6875f) + 1.0f)) * 78.84375f);
        float _373 = exp2(log2(((_349 * 18.8515625f) + 0.8359375f) / ((_349 * 18.6875f) + 1.0f)) * 78.84375f);
        float _374 = exp2(log2(((_350 * 18.8515625f) + 0.8359375f) / ((_350 * 18.6875f) + 1.0f)) * 78.84375f);
        if ((bool)(cb0_090y > 0.0f) && (bool)((_339 / cb0_090y) > 1.0f)) {
          float _383 = (pow(cb0_090y, 0.1593017578125f));
          float _391 = exp2(log2(((_383 * 18.8515625f) + 0.8359375f) / ((_383 * 18.6875f) + 1.0f)) * 78.84375f);
          if (_372 > _391) {
            float _394 = _372 - _391;
            _400 = ((_394 / ((_394 * cb0_090z) + 1.0f)) + _391);
          } else {
            _400 = _372;
          }
          if (_373 > _391) {
            float _601 = _373 - _391;
            _607 = ((_601 / ((_601 * cb0_090z) + 1.0f)) + _391);
            if (_374 > _391) {
              float _610 = _374 - _391;
              _403 = ((_610 / ((_610 * cb0_090z) + 1.0f)) + _391);
              _404 = _607;
              _405 = _400;
            } else {
              _403 = _374;
              _404 = _607;
              _405 = _400;
            }
          } else {
            _607 = _373;
            if (_374 > _391) {
              float _610 = _374 - _391;
              _403 = ((_610 / ((_610 * cb0_090z) + 1.0f)) + _391);
              _404 = _607;
              _405 = _400;
            } else {
              _403 = _374;
              _404 = _607;
              _405 = _400;
            }
          }
          while(true) {
            if (cb0_090x > 0.0f) {
              if (_339 < cb0_090x) {
                float _413 = (pow(cb0_090x, 0.1593017578125f));
                float _421 = exp2(log2(((_413 * 18.8515625f) + 0.8359375f) / ((_413 * 18.6875f) + 1.0f)) * 78.84375f);
                if (_405 < _421) {
                  _429 = (((cb0_090z * 0.30000001192092896f) * (_421 - _405)) + _405);
                } else {
                  _429 = _405;
                }
                if (_404 < _421) {
                  _593 = (((cb0_090z * 0.30000001192092896f) * (_421 - _404)) + _404);
                  if (_403 < _421) {
                    _432 = (((cb0_090z * 0.30000001192092896f) * (_421 - _403)) + _403);
                    _433 = _593;
                    _434 = _429;
                  } else {
                    _432 = _403;
                    _433 = _593;
                    _434 = _429;
                  }
                } else {
                  _593 = _404;
                  if (_403 < _421) {
                    _432 = (((cb0_090z * 0.30000001192092896f) * (_421 - _403)) + _403);
                    _433 = _593;
                    _434 = _429;
                  } else {
                    _432 = _403;
                    _433 = _593;
                    _434 = _429;
                  }
                }
              } else {
                _432 = _403;
                _433 = _404;
                _434 = _405;
              }
            } else {
              _432 = _403;
              _433 = _404;
              _434 = _405;
            }
            while(true) {
              float _441 = (pow(_434, 0.012683313339948654f));
              float _442 = (pow(_433, 0.012683313339948654f));
              float _443 = (pow(_432, 0.012683313339948654f));
              _469 = exp2(log2(max((_441 + -0.8359375f), 0.0f) / (18.8515625f - (_441 * 18.6875f))) * 6.277394771575928f);
              _470 = exp2(log2(max((_442 + -0.8359375f), 0.0f) / (18.8515625f - (_442 * 18.6875f))) * 6.277394771575928f);
              _471 = exp2(log2(max((_443 + -0.8359375f), 0.0f) / (18.8515625f - (_443 * 18.6875f))) * 6.277394771575928f);
              break;
            }
            break;
          }
        } else {
          _403 = _374;
          _404 = _373;
          _405 = _372;
          while(true) {
            if (cb0_090x > 0.0f) {
              if (_339 < cb0_090x) {
                float _413 = (pow(cb0_090x, 0.1593017578125f));
                float _421 = exp2(log2(((_413 * 18.8515625f) + 0.8359375f) / ((_413 * 18.6875f) + 1.0f)) * 78.84375f);
                if (_405 < _421) {
                  _429 = (((cb0_090z * 0.30000001192092896f) * (_421 - _405)) + _405);
                } else {
                  _429 = _405;
                }
                if (_404 < _421) {
                  _593 = (((cb0_090z * 0.30000001192092896f) * (_421 - _404)) + _404);
                  if (_403 < _421) {
                    _432 = (((cb0_090z * 0.30000001192092896f) * (_421 - _403)) + _403);
                    _433 = _593;
                    _434 = _429;
                  } else {
                    _432 = _403;
                    _433 = _593;
                    _434 = _429;
                  }
                } else {
                  _593 = _404;
                  if (_403 < _421) {
                    _432 = (((cb0_090z * 0.30000001192092896f) * (_421 - _403)) + _403);
                    _433 = _593;
                    _434 = _429;
                  } else {
                    _432 = _403;
                    _433 = _593;
                    _434 = _429;
                  }
                }
              } else {
                _432 = _403;
                _433 = _404;
                _434 = _405;
              }
            } else {
              _432 = _403;
              _433 = _404;
              _434 = _405;
            }
            while(true) {
              float _441 = (pow(_434, 0.012683313339948654f));
              float _442 = (pow(_433, 0.012683313339948654f));
              float _443 = (pow(_432, 0.012683313339948654f));
              _469 = exp2(log2(max((_441 + -0.8359375f), 0.0f) / (18.8515625f - (_441 * 18.6875f))) * 6.277394771575928f);
              _470 = exp2(log2(max((_442 + -0.8359375f), 0.0f) / (18.8515625f - (_442 * 18.6875f))) * 6.277394771575928f);
              _471 = exp2(log2(max((_443 + -0.8359375f), 0.0f) / (18.8515625f - (_443 * 18.6875f))) * 6.277394771575928f);
              break;
            }
            break;
          }
        }
      } else {
        _469 = _325;
        _470 = _326;
        _471 = _327;
      }
    } else {
      _469 = _325;
      _470 = _326;
      _471 = _327;
    }
  } else {
    _469 = _325;
    _470 = _326;
    _471 = _327;
  }

  CLAMP_IF_SDR(_469); CLAMP_IF_SDR(_470); CLAMP_IF_SDR(_471);
  CAPTURE_TONEMAPPED(tonemapped, float3(_469, _470, _471));

  float4 _493 = t2.Sample(s2, float3(((saturate((log2(_469 + 0.002667719265446067f) * 0.0714285746216774f) + 0.6107269525527954f) * 0.96875f) + 0.015625f), ((saturate((log2(_470 + 0.002667719265446067f) * 0.0714285746216774f) + 0.6107269525527954f) * 0.96875f) + 0.015625f), ((saturate((log2(_471 + 0.002667719265446067f) * 0.0714285746216774f) + 0.6107269525527954f) * 0.96875f) + 0.015625f)));
  _493.rgb = HandleLUTOutput(_493.rgb, untonemapped, tonemapped);

  float _497 = _493.x * 1.0499999523162842f;
  float _498 = _493.y * 1.0499999523162842f;
  float _499 = _493.z * 1.0499999523162842f;
  float _507 = ((_35 * 0.00390625f) + -0.001953125f) + _497;
  float _508 = ((_59 * 0.00390625f) + -0.001953125f) + _498;
  float _509 = ((_60 * 0.00390625f) + -0.001953125f) + _499;
  [branch]
  if (!((uint)(cb0_091y) == 0)) {
    float _521 = (pow(_507, 0.012683313339948654f));
    float _522 = (pow(_508, 0.012683313339948654f));
    float _523 = (pow(_509, 0.012683313339948654f));
    float _556 = max(6.103519990574569e-05f, ((exp2(log2(max(0.0f, (_521 + -0.8359375f)) / (18.8515625f - (_521 * 18.6875f))) * 6.277394771575928f) * 10000.0f) / cb0_091x));
    float _557 = max(6.103519990574569e-05f, ((exp2(log2(max(0.0f, (_522 + -0.8359375f)) / (18.8515625f - (_522 * 18.6875f))) * 6.277394771575928f) * 10000.0f) / cb0_091x));
    float _558 = max(6.103519990574569e-05f, ((exp2(log2(max(0.0f, (_523 + -0.8359375f)) / (18.8515625f - (_523 * 18.6875f))) * 6.277394771575928f) * 10000.0f) / cb0_091x));
    _584 = min((_556 * 12.920000076293945f), ((exp2(log2(max(_556, 0.0031306699384003878f)) * 0.4166666567325592f) * 1.0549999475479126f) + -0.054999999701976776f));
    _585 = min((_557 * 12.920000076293945f), ((exp2(log2(max(_557, 0.0031306699384003878f)) * 0.4166666567325592f) * 1.0549999475479126f) + -0.054999999701976776f));
    _586 = min((_558 * 12.920000076293945f), ((exp2(log2(max(_558, 0.0031306699384003878f)) * 0.4166666567325592f) * 1.0549999475479126f) + -0.054999999701976776f));
  } else {
    _584 = _507;
    _585 = _508;
    _586 = _509;
  }
  SV_Target.x = _584;
  SV_Target.y = _585;
  SV_Target.z = _586;

  // SV_Target.w = saturate(dot(float3(_497, _498, _499), float3(0.29899999499320984f, 0.5870000123977661f, 0.11400000005960464f)));
  SV_Target.w = (dot(float3(_497, _498, _499), float3(0.29899999499320984f, 0.5870000123977661f, 0.11400000005960464f)));
  CLAMP_IF_SDR(SV_Target.w);

  return SV_Target;
}
