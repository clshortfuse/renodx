cbuffer HDRMappingUBO : register(b0, space0)
{
    float4 HDRMapping_m0[15] : packoffset(c0);
};

RWTexture2D<float4> RWResult : register(u0, space0);

static uint3 gl_WorkGroupID;
static uint3 gl_LocalInvocationID;
struct SPIRV_Cross_Input
{
    uint3 gl_WorkGroupID : SV_GroupID;
    uint3 gl_LocalInvocationID : SV_GroupThreadID;
};

void comp_main()
{
    uint _32 = uint(gl_LocalInvocationID.x);
    uint _35 = _32 >> 1u;
    uint _39 = _32 >> 2u;
    uint _43 = _32 >> 3u;
    float _69;
    float _72;
    float _74;
    if (asuint(HDRMapping_m0[14u]).y == 0u)
    {
        _69 = 0.0f;
        _72 = 0.0f;
        _74 = 0.0f;
    }
    else
    {
        float _187 = exp2(log2(0.0f) * 0.1593017578125f);
        float _196 = clamp(exp2(log2(((_187 * 18.8515625f) + 0.8359375f) / ((_187 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
        float _198 = (_196 + _196) * 0.5f;
        float _220 = exp2(log2(clamp(_198, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
        float _231 = exp2(log2(max(0.0f, _220 + (-0.8359375f)) / (18.8515625f - (_220 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
        float _246 = exp2(log2(((HDRMapping_m0[14u].z * 0.00999999977648258209228515625f) * _231) * ((_231 * (HDRMapping_m0[14u].z + (-1.0f))) + 1.0f)) * 0.1593017578125f);
        float _255 = clamp(exp2(log2(((_246 * 18.8515625f) + 0.8359375f) / ((_246 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
        float _258 = min(_198 / _255, _255 / _198);
        float _259 = ((dot(_196.xxx, float3(6610.0f, -13613.0f, 7003.0f)) * 0.000244140625f) * HDRMapping_m0[14u].w) * _258;
        float _260 = ((dot(_196.xxx, float3(17933.0f, -17390.0f, -543.0f)) * 0.000244140625f) * HDRMapping_m0[14u].w) * _258;
        float _276 = exp2(log2(clamp(mad(0.111000001430511474609375f, _260, mad(0.0089999996125698089599609375f, _259, _255)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
        float _284 = exp2(log2(max(0.0f, _276 + (-0.8359375f)) / (18.8515625f - (_276 * 18.6875f))) * 6.277394771575927734375f);
        float _288 = exp2(log2(clamp(mad(-0.111000001430511474609375f, _260, mad(-0.0089999996125698089599609375f, _259, _255)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
        float _297 = exp2(log2(max(0.0f, _288 + (-0.8359375f)) / (18.8515625f - (_288 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
        float _301 = exp2(log2(clamp(mad(-0.3210000097751617431640625f, _260, mad(0.560000002384185791015625f, _259, _255)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
        float _310 = exp2(log2(max(0.0f, _301 + (-0.8359375f)) / (18.8515625f - (_301 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
        float _315 = mad(0.20700000226497650146484375f, _310, mad(-1.32700002193450927734375f, _297, _284 * 207.100006103515625f));
        float _321 = mad(-0.04500000178813934326171875f, _310, mad(0.6809999942779541015625f, _297, _284 * 36.5f));
        float _327 = mad(1.1879999637603759765625f, _310, mad(-0.0500000007450580596923828125f, _297, _284 * (-4.900000095367431640625f)));
        _69 = mad(-0.498610794544219970703125f, _327, mad(-1.53738319873809814453125f, _321, _315 * 3.2409698963165283203125f));
        _72 = mad(0.0415550954639911651611328125f, _327, mad(1.8759677410125732421875f, _321, _315 * (-0.969243705272674560546875f)));
        _74 = mad(1.05697143077850341796875f, _327, mad(-0.2039768397808074951171875f, _321, _315 * 0.0556300692260265350341796875f));
    }
    float _85 = mad(0.043313600122928619384765625f, _74, mad(0.329281985759735107421875f, _72, _69 * 0.6274039745330810546875f));
    float _91 = mad(0.0113612003624439239501953125f, _74, mad(0.919539988040924072265625f, _72, _69 * 0.06909699738025665283203125f));
    float _97 = mad(0.895595014095306396484375f, _74, mad(0.0880132019519805908203125f, _72, _69 * 0.01639159955084323883056640625f));
    float _125 = 10000.0f / HDRMapping_m0[10u].y;
    float _137 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_69 - _85)) + _85) * HDRMapping_m0[7u].y) / _125, 0.0f, 1.0f)) * 0.1593017578125f);
    float _150 = clamp(exp2(log2(((_137 * 18.8515625f) + 0.8359375f) / ((_137 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
    float _153 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_72 - _91)) + _91) * HDRMapping_m0[7u].y) / _125, 0.0f, 1.0f)) * 0.1593017578125f);
    float _162 = clamp(exp2(log2(((_153 * 18.8515625f) + 0.8359375f) / ((_153 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
    float _165 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_74 - _97)) + _97) * HDRMapping_m0[7u].y) / _125, 0.0f, 1.0f)) * 0.1593017578125f);
    float _174 = clamp(exp2(log2(((_165 * 18.8515625f) + 0.8359375f) / ((_165 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
    float _344;
    float _346;
    float _348;
    if ((asuint(HDRMapping_m0[7u]).x & 2u) == 0u)
    {
        _344 = _150;
        _346 = _162;
        _348 = _174;
    }
    else
    {
        float _364 = exp2(log2(clamp(HDRMapping_m0[0u].z * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
        float _373 = clamp(exp2(log2(((_364 * 18.8515625f) + 0.8359375f) / ((_364 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
        float _379 = exp2(log2(clamp(HDRMapping_m0[0u].w * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
        float _389 = _373 - clamp(exp2(log2(((_379 * 18.8515625f) + 0.8359375f) / ((_379 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
        float _393 = clamp(_150 / _373, 0.0f, 1.0f);
        float _394 = clamp(_162 / _373, 0.0f, 1.0f);
        float _395 = clamp(_174 / _373, 0.0f, 1.0f);
        _344 = min((((2.0f - (_393 + _393)) * _389) + (_393 * _373)) * _393, _150);
        _346 = min((((2.0f - (_394 + _394)) * _389) + (_394 * _373)) * _394, _162);
        _348 = min((((2.0f - (_395 + _395)) * _389) + (_395 * _373)) * _395, _174);
    }
    RWResult[uint2(uint(((((_32 & 1u) | (uint(gl_WorkGroupID.x) << 4u)) | (_35 & 2u)) | (_39 & 4u)) | (_43 & 8u)), uint(((((_35 & 1u) | (uint(gl_WorkGroupID.y) << 4u)) | (_39 & 2u)) | (_43 & 4u)) | ((_32 >> 4u) & 8u)))] = float4(_344, _346, _348, _344);
}

[numthreads(256, 1, 1)]
void main(SPIRV_Cross_Input stage_input)
{
    gl_WorkGroupID = stage_input.gl_WorkGroupID;
    gl_LocalInvocationID = stage_input.gl_LocalInvocationID;
    comp_main();
}
