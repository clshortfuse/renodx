Texture2D<float4> inputTexture : register(t0);

cbuffer HDRMapping : register(b0) {
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_000w : packoffset(c000.w);
  uint HDRMapping_007x : packoffset(c007.x);
  float HDRMapping_007y : packoffset(c007.y);
  float HDRMapping_008y : packoffset(c008.y);
  float HDRMapping_010y : packoffset(c010.y);
};

float4 main(
  noperspective float4 SV_Position : SV_Position
) : SV_Target {
  float4 SV_Target;
  uint _6 = uint((SV_Position.x));
  uint _7 = uint((SV_Position.y));
  float4 _9 = inputTexture.Load(int3(_6, _7, 0));
  float _16 = (_9.x) * 0.627403974533081f;
  float _17 = mad(0.3292819857597351f, (_9.y), _16);
  float _18 = mad(0.04331360012292862f, (_9.z), _17);
  float _19 = (_9.x) * 0.06909699738025665f;
  float _20 = mad(0.9195399880409241f, (_9.y), _19);
  float _21 = mad(0.011361200362443924f, (_9.z), _20);
  float _22 = (_9.x) * 0.01639159955084324f;
  float _23 = mad(0.08801320195198059f, (_9.y), _22);
  float _24 = mad(0.8955950140953064f, (_9.z), _23);
  float _27 = (_9.x) - _18;
  float _28 = (_9.y) - _21;
  float _29 = (_9.z) - _24;
  float _30 = (HDRMapping_008y) * _27;
  float _31 = (HDRMapping_008y) * _28;
  float _32 = (HDRMapping_008y) * _29;
  float _33 = _30 + _18;
  float _34 = _31 + _21;
  float _35 = _32 + _24;
  float _38 = log2(_33);
  float _39 = log2(_34);
  float _40 = log2(_35);
  float _41 = _38 * (HDRMapping_007y);
  float _42 = _39 * (HDRMapping_007y);
  float _43 = _40 * (HDRMapping_007y);
  float _44 = exp2(_41);
  float _45 = exp2(_42);
  float _46 = exp2(_43);
  float _47 = 10000.0f / (HDRMapping_010y);
  float _48 = _44 / _47;
  float _49 = _45 / _47;
  float _50 = _46 / _47;
  float _51 = saturate(_48);
  float _52 = saturate(_49);
  float _53 = saturate(_50);
  float _54 = log2(_51);
  float _55 = _54 * 0.1593017578125f;
  float _56 = exp2(_55);
  float _57 = _56 * 18.8515625f;
  float _58 = _57 + 0.8359375f;
  float _59 = _56 * 18.6875f;
  float _60 = _59 + 1.0f;
  float _61 = _58 / _60;
  float _62 = log2(_61);
  float _63 = _62 * 78.84375f;
  float _64 = exp2(_63);
  float _65 = saturate(_64);
  float _66 = log2(_52);
  float _67 = _66 * 0.1593017578125f;
  float _68 = exp2(_67);
  float _69 = _68 * 18.8515625f;
  float _70 = _69 + 0.8359375f;
  float _71 = _68 * 18.6875f;
  float _72 = _71 + 1.0f;
  float _73 = _70 / _72;
  float _74 = log2(_73);
  float _75 = _74 * 78.84375f;
  float _76 = exp2(_75);
  float _77 = saturate(_76);
  float _78 = log2(_53);
  float _79 = _78 * 0.1593017578125f;
  float _80 = exp2(_79);
  float _81 = _80 * 18.8515625f;
  float _82 = _81 + 0.8359375f;
  float _83 = _80 * 18.6875f;
  float _84 = _83 + 1.0f;
  float _85 = _82 / _84;
  float _86 = log2(_85);
  float _87 = _86 * 78.84375f;
  float _88 = exp2(_87);
  float _89 = saturate(_88);
  int _92 = ((uint)(HDRMapping_007x)) & 2;
  bool _93 = (_92 == 0);
  float _155 = _65;
  float _156 = _77;
  float _157 = _89;
  if (!_93) {
    float _97 = (HDRMapping_000z) * 9.999999747378752e-05f;
    float _98 = saturate(_97);
    float _99 = log2(_98);
    float _100 = _99 * 0.1593017578125f;
    float _101 = exp2(_100);
    float _102 = _101 * 18.8515625f;
    float _103 = _102 + 0.8359375f;
    float _104 = _101 * 18.6875f;
    float _105 = _104 + 1.0f;
    float _106 = _103 / _105;
    float _107 = log2(_106);
    float _108 = _107 * 78.84375f;
    float _109 = exp2(_108);
    float _110 = saturate(_109);
    float _112 = (HDRMapping_000w) * 9.999999747378752e-05f;
    float _113 = saturate(_112);
    float _114 = log2(_113);
    float _115 = _114 * 0.1593017578125f;
    float _116 = exp2(_115);
    float _117 = _116 * 18.8515625f;
    float _118 = _117 + 0.8359375f;
    float _119 = _116 * 18.6875f;
    float _120 = _119 + 1.0f;
    float _121 = _118 / _120;
    float _122 = log2(_121);
    float _123 = _122 * 78.84375f;
    float _124 = exp2(_123);
    float _125 = saturate(_124);
    float _126 = _110 - _125;
    float _127 = _65 / _110;
    float _128 = _77 / _110;
    float _129 = _89 / _110;
    float _130 = saturate(_127);
    float _131 = saturate(_128);
    float _132 = saturate(_129);
    float _133 = _130 * _110;
    float _134 = _131 * _110;
    float _135 = _132 * _110;
    float _136 = _130 + _130;
    float _137 = 2.0f - _136;
    float _138 = _137 * _126;
    float _139 = _138 + _133;
    float _140 = _139 * _130;
    float _141 = _131 + _131;
    float _142 = 2.0f - _141;
    float _143 = _142 * _126;
    float _144 = _143 + _134;
    float _145 = _144 * _131;
    float _146 = _132 + _132;
    float _147 = 2.0f - _146;
    float _148 = _147 * _126;
    float _149 = _148 + _135;
    float _150 = _149 * _132;
    float _151 = min(_140, _65);
    float _152 = min(_145, _77);
    float _153 = min(_150, _89);
    _155 = _151;
    _156 = _152;
    _157 = _153;
  }
  SV_Target.x = _155;
  SV_Target.y = _156;
  SV_Target.z = _157;
  SV_Target.w = (_9.w);
  return SV_Target;
}
