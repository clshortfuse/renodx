Texture2D<float4> tConfigImage : register(t0);

cbuffer RootConstant : register(b0, space32) {
  uint RootConstant_000x : packoffset(c000.x);
};

cbuffer HDRMapping : register(b0) {
  float HDRMapping_000x : packoffset(c000.x);
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_012z : packoffset(c012.z);
};

SamplerState PointClamp : register(s1, space32);

float4 main(
  noperspective float4 SV_Position : SV_Position,
  linear float2 TEXCOORD : TEXCOORD
) : SV_Target {
  float4 SV_Target;
  float4 _11 = tConfigImage.SampleLevel(PointClamp, float2((TEXCOORD.x), (TEXCOORD.y)), 0.0f);
  int _18 = ((uint)(RootConstant_000x)) & 2;
  bool _19 = (_18 == 0);
  float _22 = 10000.0f / (HDRMapping_000x);
  float _169;
  float _170;
  float _171;
  if (!_19) {
    float _24 = (_11.x) * 100.0f;
    float _25 = (_11.y) * 100.0f;
    float _26 = (_11.z) * 100.0f;
    float _27 = _24 / _22;
    float _28 = _25 / _22;
    float _29 = _26 / _22;
    float _30 = saturate(_27);
    float _31 = saturate(_28);
    float _32 = saturate(_29);
    float _33 = log2(_30);
    float _34 = _33 * 0.1593017578125f;
    float _35 = exp2(_34);
    float _36 = _35 * 18.8515625f;
    float _37 = _36 + 0.8359375f;
    float _38 = _35 * 18.6875f;
    float _39 = _38 + 1.0f;
    float _40 = _37 / _39;
    float _41 = log2(_40);
    float _42 = _41 * 78.84375f;
    float _43 = exp2(_42);
    float _44 = saturate(_43);
    float _45 = log2(_31);
    float _46 = _45 * 0.1593017578125f;
    float _47 = exp2(_46);
    float _48 = _47 * 18.8515625f;
    float _49 = _48 + 0.8359375f;
    float _50 = _47 * 18.6875f;
    float _51 = _50 + 1.0f;
    float _52 = _49 / _51;
    float _53 = log2(_52);
    float _54 = _53 * 78.84375f;
    float _55 = exp2(_54);
    float _56 = saturate(_55);
    float _57 = log2(_32);
    float _58 = _57 * 0.1593017578125f;
    float _59 = exp2(_58);
    float _60 = _59 * 18.8515625f;
    float _61 = _60 + 0.8359375f;
    float _62 = _59 * 18.6875f;
    float _63 = _62 + 1.0f;
    float _64 = _61 / _63;
    float _65 = log2(_64);
    float _66 = _65 * 78.84375f;
    float _67 = exp2(_66);
    float _68 = saturate(_67);
    _169 = _44;
    _170 = _56;
    _171 = _68;
  } else {
    int _70 = ((uint)(RootConstant_000x)) & 1;
    bool _71 = (_70 == 0);
    float _72 = (HDRMapping_000x) * _22;
    if (!_71) {
      float _76 = (HDRMapping_012z) * (_11.x);
      float _77 = (HDRMapping_012z) * (_11.y);
      float _78 = (HDRMapping_012z) * (_11.z);
      float _79 = _76 / _72;
      float _80 = _77 / _72;
      float _81 = _78 / _72;
      float _82 = saturate(_79);
      float _83 = saturate(_80);
      float _84 = saturate(_81);
      float _85 = log2(_82);
      float _86 = _85 * 0.1593017578125f;
      float _87 = exp2(_86);
      float _88 = _87 * 18.8515625f;
      float _89 = _88 + 0.8359375f;
      float _90 = _87 * 18.6875f;
      float _91 = _90 + 1.0f;
      float _92 = _89 / _91;
      float _93 = log2(_92);
      float _94 = _93 * 78.84375f;
      float _95 = exp2(_94);
      float _96 = saturate(_95);
      float _97 = log2(_83);
      float _98 = _97 * 0.1593017578125f;
      float _99 = exp2(_98);
      float _100 = _99 * 18.8515625f;
      float _101 = _100 + 0.8359375f;
      float _102 = _99 * 18.6875f;
      float _103 = _102 + 1.0f;
      float _104 = _101 / _103;
      float _105 = log2(_104);
      float _106 = _105 * 78.84375f;
      float _107 = exp2(_106);
      float _108 = saturate(_107);
      float _109 = log2(_84);
      float _110 = _109 * 0.1593017578125f;
      float _111 = exp2(_110);
      float _112 = _111 * 18.8515625f;
      float _113 = _112 + 0.8359375f;
      float _114 = _111 * 18.6875f;
      float _115 = _114 + 1.0f;
      float _116 = _113 / _115;
      float _117 = log2(_116);
      float _118 = _117 * 78.84375f;
      float _119 = exp2(_118);
      float _120 = saturate(_119);
      _169 = _96;
      _170 = _108;
      _171 = _120;
    } else {
      float _123 = (HDRMapping_000z) * (_11.x);
      float _124 = (HDRMapping_000z) * (_11.y);
      float _125 = (HDRMapping_000z) * (_11.z);
      float _126 = _123 / _72;
      float _127 = _124 / _72;
      float _128 = _125 / _72;
      float _129 = saturate(_126);
      float _130 = saturate(_127);
      float _131 = saturate(_128);
      float _132 = log2(_129);
      float _133 = _132 * 0.1593017578125f;
      float _134 = exp2(_133);
      float _135 = _134 * 18.8515625f;
      float _136 = _135 + 0.8359375f;
      float _137 = _134 * 18.6875f;
      float _138 = _137 + 1.0f;
      float _139 = _136 / _138;
      float _140 = log2(_139);
      float _141 = _140 * 78.84375f;
      float _142 = exp2(_141);
      float _143 = saturate(_142);
      float _144 = log2(_130);
      float _145 = _144 * 0.1593017578125f;
      float _146 = exp2(_145);
      float _147 = _146 * 18.8515625f;
      float _148 = _147 + 0.8359375f;
      float _149 = _146 * 18.6875f;
      float _150 = _149 + 1.0f;
      float _151 = _148 / _150;
      float _152 = log2(_151);
      float _153 = _152 * 78.84375f;
      float _154 = exp2(_153);
      float _155 = saturate(_154);
      float _156 = log2(_131);
      float _157 = _156 * 0.1593017578125f;
      float _158 = exp2(_157);
      float _159 = _158 * 18.8515625f;
      float _160 = _159 + 0.8359375f;
      float _161 = _158 * 18.6875f;
      float _162 = _161 + 1.0f;
      float _163 = _160 / _162;
      float _164 = log2(_163);
      float _165 = _164 * 78.84375f;
      float _166 = exp2(_165);
      float _167 = saturate(_166);
      _169 = _143;
      _170 = _155;
      _171 = _167;
    }
  }
  float _172 = (_11.w) + -9.999999747378752e-05f;
  bool _173 = (_172 < 0.0f);
  if (_173) discard;
  SV_Target.x = _169;
  SV_Target.y = _170;
  SV_Target.z = _171;
  SV_Target.w = (_11.w);
  return SV_Target;
}
