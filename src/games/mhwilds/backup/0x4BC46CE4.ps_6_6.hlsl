Texture2D<float4> tLinearImage : register(t0);

cbuffer HDRMapping : register(b0) {
  float HDRMapping_000x : packoffset(c000.x);
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_000w : packoffset(c000.w);
  uint HDRMapping_007x : packoffset(c007.x);
  float HDRMapping_007y : packoffset(c007.y);
  float HDRMapping_008y : packoffset(c008.y);
};

SamplerState PointBorder : register(s2, space32);

float4 main(
  noperspective float4 SV_Position : SV_Position,
  linear float2 TEXCOORD : TEXCOORD
) : SV_Target {
  float4 SV_Target;
  float4 _9 = tLinearImage.SampleLevel(PointBorder, float2((TEXCOORD.x), (TEXCOORD.y)), 0.0f);
  float _15 = (_9.x) * 0.627403974533081f;
  float _16 = mad(0.3292819857597351f, (_9.y), _15);
  float _17 = mad(0.04331360012292862f, (_9.z), _16);
  float _18 = (_9.x) * 0.06909699738025665f;
  float _19 = mad(0.9195399880409241f, (_9.y), _18);
  float _20 = mad(0.011361200362443924f, (_9.z), _19);
  float _21 = (_9.x) * 0.01639159955084324f;
  float _22 = mad(0.08801320195198059f, (_9.y), _21);
  float _23 = mad(0.8955950140953064f, (_9.z), _22);
  float _26 = (_9.x) - _17;
  float _27 = (_9.y) - _20;
  float _28 = (_9.z) - _23;
  float _29 = (HDRMapping_008y) * _26;
  float _30 = (HDRMapping_008y) * _27;
  float _31 = (HDRMapping_008y) * _28;
  float _32 = _29 + _17;
  float _33 = _30 + _20;
  float _34 = _31 + _23;
  float _37 = log2(_32);
  float _38 = log2(_33);
  float _39 = log2(_34);
  float _40 = _37 * (HDRMapping_007y);
  float _41 = _38 * (HDRMapping_007y);
  float _42 = _39 * (HDRMapping_007y);
  float _43 = exp2(_40);
  float _44 = exp2(_41);
  float _45 = exp2(_42);
  float _46 = 10000.0f / (HDRMapping_000x);
  float _47 = _43 / _46;
  float _48 = _44 / _46;
  float _49 = _45 / _46;
  float _50 = saturate(_47);
  float _51 = saturate(_48);
  float _52 = saturate(_49);
  float _53 = log2(_50);
  float _54 = _53 * 0.1593017578125f;
  float _55 = exp2(_54);
  float _56 = _55 * 18.8515625f;
  float _57 = _56 + 0.8359375f;
  float _58 = _55 * 18.6875f;
  float _59 = _58 + 1.0f;
  float _60 = _57 / _59;
  float _61 = log2(_60);
  float _62 = _61 * 78.84375f;
  float _63 = exp2(_62);
  float _64 = saturate(_63);
  float _65 = log2(_51);
  float _66 = _65 * 0.1593017578125f;
  float _67 = exp2(_66);
  float _68 = _67 * 18.8515625f;
  float _69 = _68 + 0.8359375f;
  float _70 = _67 * 18.6875f;
  float _71 = _70 + 1.0f;
  float _72 = _69 / _71;
  float _73 = log2(_72);
  float _74 = _73 * 78.84375f;
  float _75 = exp2(_74);
  float _76 = saturate(_75);
  float _77 = log2(_52);
  float _78 = _77 * 0.1593017578125f;
  float _79 = exp2(_78);
  float _80 = _79 * 18.8515625f;
  float _81 = _80 + 0.8359375f;
  float _82 = _79 * 18.6875f;
  float _83 = _82 + 1.0f;
  float _84 = _81 / _83;
  float _85 = log2(_84);
  float _86 = _85 * 78.84375f;
  float _87 = exp2(_86);
  float _88 = saturate(_87);
  int _91 = ((uint)(HDRMapping_007x)) & 2;
  bool _92 = (_91 == 0);
  float _153 = _64;
  float _154 = _76;
  float _155 = _88;
  if (!_92) {
    float _95 = (HDRMapping_000z) * 9.999999747378752e-05f;
    float _96 = saturate(_95);
    float _97 = log2(_96);
    float _98 = _97 * 0.1593017578125f;
    float _99 = exp2(_98);
    float _100 = _99 * 18.8515625f;
    float _101 = _100 + 0.8359375f;
    float _102 = _99 * 18.6875f;
    float _103 = _102 + 1.0f;
    float _104 = _101 / _103;
    float _105 = log2(_104);
    float _106 = _105 * 78.84375f;
    float _107 = exp2(_106);
    float _108 = saturate(_107);
    float _110 = (HDRMapping_000w) * 9.999999747378752e-05f;
    float _111 = saturate(_110);
    float _112 = log2(_111);
    float _113 = _112 * 0.1593017578125f;
    float _114 = exp2(_113);
    float _115 = _114 * 18.8515625f;
    float _116 = _115 + 0.8359375f;
    float _117 = _114 * 18.6875f;
    float _118 = _117 + 1.0f;
    float _119 = _116 / _118;
    float _120 = log2(_119);
    float _121 = _120 * 78.84375f;
    float _122 = exp2(_121);
    float _123 = saturate(_122);
    float _124 = _108 - _123;
    float _125 = _64 / _108;
    float _126 = _76 / _108;
    float _127 = _88 / _108;
    float _128 = saturate(_125);
    float _129 = saturate(_126);
    float _130 = saturate(_127);
    float _131 = _128 * _108;
    float _132 = _129 * _108;
    float _133 = _130 * _108;
    float _134 = _128 + _128;
    float _135 = 2.0f - _134;
    float _136 = _135 * _124;
    float _137 = _136 + _131;
    float _138 = _137 * _128;
    float _139 = _129 + _129;
    float _140 = 2.0f - _139;
    float _141 = _140 * _124;
    float _142 = _141 + _132;
    float _143 = _142 * _129;
    float _144 = _130 + _130;
    float _145 = 2.0f - _144;
    float _146 = _145 * _124;
    float _147 = _146 + _133;
    float _148 = _147 * _130;
    float _149 = min(_138, _64);
    float _150 = min(_143, _76);
    float _151 = min(_148, _88);
    _153 = _149;
    _154 = _150;
    _155 = _151;
  }
  SV_Target.x = _153;
  SV_Target.y = _154;
  SV_Target.z = _155;
  SV_Target.w = 1.0f;
  return SV_Target;
}
