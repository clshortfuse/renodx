cbuffer HDRMappingUBO : register(b0, space0)
{
    float4 HDRMapping_m0[15] : packoffset(c0);
};

RWTexture2D<float4> RWResult : register(u0, space0);

static uint3 gl_WorkGroupID;
static uint3 gl_LocalInvocationID;
struct SPIRV_Cross_Input
{
    uint3 gl_WorkGroupID : SV_GroupID;
    uint3 gl_LocalInvocationID : SV_GroupThreadID;
};

void comp_main()
{
    uint _32 = uint(gl_LocalInvocationID.x);
    uint _35 = _32 >> 1u;
    uint _39 = _32 >> 2u;
    uint _43 = _32 >> 3u;
    float _69;
    float _72;
    float _74;
    if (asuint(HDRMapping_m0[14u]).y == 0u)
    {
        _69 = 0.0f;
        _72 = 0.0f;
        _74 = 0.300000011920928955078125f;
    }
    else
    {
        float _201 = exp2(log2((HDRMapping_m0[14u].z * 0.00029237972921691834926605224609375f) * (((HDRMapping_m0[14u].z + (-1.0f)) * 0.02923797257244586944580078125f) + 1.0f)) * 0.1593017578125f);
        float _210 = clamp(exp2(log2(((_201 * 18.8515625f) + 0.8359375f) / ((_201 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
        float _215 = min(0.21167314052581787109375f / _210, _210 * 4.72426509857177734375f);
        float _216 = (HDRMapping_m0[14u].w * 0.2199458181858062744140625f) * _215;
        float _217 = (HDRMapping_m0[14u].w * (-0.1216485500335693359375f)) * _215;
        float _234 = exp2(log2(clamp(mad(0.111000001430511474609375f, _217, mad(0.0089999996125698089599609375f, _216, _210)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
        float _244 = exp2(log2(max(0.0f, _234 + (-0.8359375f)) / (18.8515625f - (_234 * 18.6875f))) * 6.277394771575927734375f);
        float _248 = exp2(log2(clamp(mad(-0.111000001430511474609375f, _217, mad(-0.0089999996125698089599609375f, _216, _210)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
        float _257 = exp2(log2(max(0.0f, _248 + (-0.8359375f)) / (18.8515625f - (_248 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
        float _262 = exp2(log2(clamp(mad(-0.3210000097751617431640625f, _217, mad(0.560000002384185791015625f, _216, _210)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
        float _271 = exp2(log2(max(0.0f, _262 + (-0.8359375f)) / (18.8515625f - (_262 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
        float _276 = mad(0.20700000226497650146484375f, _271, mad(-1.32700002193450927734375f, _257, _244 * 207.100006103515625f));
        float _282 = mad(-0.04500000178813934326171875f, _271, mad(0.6809999942779541015625f, _257, _244 * 36.5f));
        float _288 = mad(1.1879999637603759765625f, _271, mad(-0.0500000007450580596923828125f, _257, _244 * (-4.900000095367431640625f)));
        _69 = mad(-0.498610794544219970703125f, _288, mad(-1.53738319873809814453125f, _282, _276 * 3.2409698963165283203125f));
        _72 = mad(0.0415550954639911651611328125f, _288, mad(1.8759677410125732421875f, _282, _276 * (-0.969243705272674560546875f)));
        _74 = mad(1.05697143077850341796875f, _288, mad(-0.2039768397808074951171875f, _282, _276 * 0.0556300692260265350341796875f));
    }
    float _86 = mad(0.043313600122928619384765625f, _74, mad(0.329281985759735107421875f, _72, _69 * 0.6274039745330810546875f));
    float _92 = mad(0.0113612003624439239501953125f, _74, mad(0.919539988040924072265625f, _72, _69 * 0.06909699738025665283203125f));
    float _98 = mad(0.895595014095306396484375f, _74, mad(0.0880132019519805908203125f, _72, _69 * 0.01639159955084323883056640625f));
    float _126 = 10000.0f / HDRMapping_m0[10u].y;
    float _138 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_69 - _86)) + _86) * HDRMapping_m0[7u].y) / _126, 0.0f, 1.0f)) * 0.1593017578125f);
    float _151 = clamp(exp2(log2(((_138 * 18.8515625f) + 0.8359375f) / ((_138 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
    float _154 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_72 - _92)) + _92) * HDRMapping_m0[7u].y) / _126, 0.0f, 1.0f)) * 0.1593017578125f);
    float _163 = clamp(exp2(log2(((_154 * 18.8515625f) + 0.8359375f) / ((_154 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
    float _166 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_74 - _98)) + _98) * HDRMapping_m0[7u].y) / _126, 0.0f, 1.0f)) * 0.1593017578125f);
    float _175 = clamp(exp2(log2(((_166 * 18.8515625f) + 0.8359375f) / ((_166 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
    float _305;
    float _307;
    float _309;
    if ((asuint(HDRMapping_m0[7u]).x & 2u) == 0u)
    {
        _305 = _151;
        _307 = _163;
        _309 = _175;
    }
    else
    {
        float _325 = exp2(log2(clamp(HDRMapping_m0[0u].z * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
        float _334 = clamp(exp2(log2(((_325 * 18.8515625f) + 0.8359375f) / ((_325 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
        float _340 = exp2(log2(clamp(HDRMapping_m0[0u].w * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
        float _350 = _334 - clamp(exp2(log2(((_340 * 18.8515625f) + 0.8359375f) / ((_340 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
        float _354 = clamp(_151 / _334, 0.0f, 1.0f);
        float _355 = clamp(_163 / _334, 0.0f, 1.0f);
        float _356 = clamp(_175 / _334, 0.0f, 1.0f);
        _305 = min((((2.0f - (_354 + _354)) * _350) + (_354 * _334)) * _354, _151);
        _307 = min((((2.0f - (_355 + _355)) * _350) + (_355 * _334)) * _355, _163);
        _309 = min((((2.0f - (_356 + _356)) * _350) + (_356 * _334)) * _356, _175);
    }
    RWResult[uint2(uint(((((_32 & 1u) | (uint(gl_WorkGroupID.x) << 4u)) | (_35 & 2u)) | (_39 & 4u)) | (_43 & 8u)), uint(((((_35 & 1u) | (uint(gl_WorkGroupID.y) << 4u)) | (_39 & 2u)) | (_43 & 4u)) | ((_32 >> 4u) & 8u)))] = float4(_305, _307, _309, _305);
}

[numthreads(256, 1, 1)]
void main(SPIRV_Cross_Input stage_input)
{
    gl_WorkGroupID = stage_input.gl_WorkGroupID;
    gl_LocalInvocationID = stage_input.gl_LocalInvocationID;
    comp_main();
}
