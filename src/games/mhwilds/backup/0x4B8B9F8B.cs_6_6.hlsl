cbuffer SceneInfoUBO : register(b0, space0)
{
    float4 SceneInfo_m0[39] : packoffset(c0);
};

cbuffer HDRMappingUBO : register(b1, space0)
{
    float4 HDRMapping_m0[15] : packoffset(c0);
};

cbuffer GUIConstantUBO : register(b2, space0)
{
    float4 GUIConstant_m0[18] : packoffset(c0);
};

cbuffer UserMaterialUBO : register(b3, space0)
{
    float4 UserMaterial_m0[10] : packoffset(c0);
};

Texture2D<float4> primSceneTex : register(t0, space0);
Texture2D<float4> Tex2D_1 : register(t1, space0);
RWTexture2D<float> RWResult : register(u0, space0);
SamplerState BilinearWrap : register(s4, space32);
SamplerState TrilinearClamp : register(s9, space32);

static uint3 gl_WorkGroupID;
static uint3 gl_LocalInvocationID;
struct SPIRV_Cross_Input
{
    uint3 gl_WorkGroupID : SV_GroupID;
    uint3 gl_LocalInvocationID : SV_GroupThreadID;
};

uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param)
{
    uint2 ret;
    Tex.GetDimensions(Level, ret.x, ret.y, Param);
    return ret;
}

void comp_main()
{
    uint _55 = uint(gl_LocalInvocationID.x);
    uint _58 = _55 >> 1u;
    uint _62 = _55 >> 2u;
    uint _66 = _55 >> 3u;
    uint _77 = ((((_55 & 1u) | (uint(gl_WorkGroupID.x) << 4u)) | (_58 & 2u)) | (_62 & 4u)) | (_66 & 8u);
    uint _82 = ((((_58 & 1u) | (uint(gl_WorkGroupID.y) << 4u)) | (_62 & 2u)) | (_66 & 4u)) | ((_55 >> 4u) & 8u);
    float _85 = float(_77) + 0.5f;
    float _87 = float(_82) + 0.5f;
    float _94 = _85 * SceneInfo_m0[23u].z;
    float _95 = _87 * SceneInfo_m0[23u].w;
    float _102 = round(UserMaterial_m0[4u].x);
    float _103 = round(UserMaterial_m0[4u].y);
    float _104 = 110.0f / _103;
    float _106 = 110.0f / _102;
    float _112 = _102 * 0.00390625f;
    float _114 = _103 * 0.00390625f;
    float _124 = (_104 < _95) ? 0.0f : 1.0f;
    float _142 = (frac((_94 - _106) * (_102 / (_102 * 0.140625f))) * 0.140625f) + 0.4296875f;
    float _146 = (frac((_95 - _104) * (_103 / (_103 * 0.140625f))) * 0.140625f) + 0.4296875f;
    float _151 = (((_112 * _94) - _142) * ((_106 < _94) ? 0.0f : 1.0f)) + _142;
    float _154 = ((((_114 * _95) * _124) - _146) * _124) + _146;
    float4 _165 = Tex2D_1.SampleGrad(BilinearWrap, float2(((((_112 * (_94 + (-1.0f))) + 1.0f) - _151) * ((_94 < (1.0f - _106)) ? 0.0f : 1.0f)) + _151, ((((_114 * (_95 + (-1.0f))) + 1.0f) - _154) * ((_95 < (1.0f - _104)) ? 0.0f : 1.0f)) + _154), 0.0f.xx, 0.0f.xx);
    float _170 = _165.x;
    float _173 = clamp(_95 + (-0.20000000298023223876953125f), 0.0f, 1.0f);
    float _179 = (_173 * _173) * (3.0f - (_173 * 2.0f));
    float _180 = 1.0f - _179;
    float _200 = clamp((UserMaterial_m0[0u].x * _180) + (UserMaterial_m0[1u].x * _179), 0.0f, 1.0f);
    float _201 = clamp((_180 * UserMaterial_m0[0u].y) + (UserMaterial_m0[1u].y * _179), 0.0f, 1.0f);
    float _202 = clamp((_180 * UserMaterial_m0[0u].z) + (_179 * UserMaterial_m0[1u].z), 0.0f, 1.0f);
    float _291;
    float _292;
    float _293;
    if (UserMaterial_m0[8u].y > 0.0f)
    {
        _291 = (_200 * 0.89999997615814208984375f) + 0.0199999995529651641845703125f;
        _292 = (_201 * 0.89999997615814208984375f) + 0.0199999995529651641845703125f;
        _293 = (_202 * 0.89999997615814208984375f) + 0.0199999995529651641845703125f;
    }
    else
    {
        float _221 = clamp((_95 + (-1.5f)) * (-0.666666686534881591796875f), 0.0f, 1.0f);
        uint _228_dummy_parameter;
        uint2 _228 = spvTextureSize(primSceneTex, 0u, _228_dummy_parameter);
        float _232 = float(int(_228.y));
        float _236 = _232 / SceneInfo_m0[23u].y;
        float _239 = SceneInfo_m0[23u].x * 4.0689486922929063439369201660156e-05f;
        float4 _247 = primSceneTex.SampleLevel(TrilinearClamp, float2((_236 / float(int(_228.x))) * (_85 - _239), (_236 / _232) * (_87 - _239)), 1.0f);
        float _277 = max((exp2(log2(_247.x * 0.901960790157318115234375f) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f), 0.0f);
        float _278 = max((exp2(log2(_247.y * 0.870588243007659912109375f) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f), 0.0f);
        float _279 = max((exp2(log2(_247.z * 0.81176471710205078125f) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f), 0.0f);
        float _280 = clamp((_221 * _221) * (3.0f - (_221 * 2.0f)), 0.0f, 1.0f) * 0.699999988079071044921875f;
        _291 = (_280 * (_200 - _277)) + _277;
        _292 = (_280 * (_201 - _278)) + _278;
        _293 = (_280 * (_202 - _279)) + _279;
    }
    float _298 = _291 + 0.00999999977648258209228515625f;
    float _300 = _292 + 0.00999999977648258209228515625f;
    float _301 = _293 + 0.00999999977648258209228515625f;
    float _305 = (((UserMaterial_m0[8u].w * _170) - _170) * UserMaterial_m0[8u].y) + _170;
    float _322;
    float _323;
    float _324;
    if (_305 > 0.0f)
    {
        float _318 = 1.0f / ((float((asuint(GUIConstant_m0[15u]).w >> 8u) & 1u) * (1.0f - _305)) + _305);
        _322 = _318 * _298;
        _323 = _318 * _300;
        _324 = _318 * _301;
    }
    else
    {
        _322 = _298;
        _323 = _300;
        _324 = _301;
    }
    bool _327 = max(max(_322, _323), _324) == 0.0f;
    bool _328 = _305 == 0.0f;
    if (!(_328 && _327))
    {
        float _336;
        float _338;
        float _340;
        if (asuint(HDRMapping_m0[14u]).y == 0u)
        {
            _336 = _322;
            _338 = _323;
            _340 = _324;
        }
        else
        {
            float _368 = exp2(log2(mad(0.0810546875f, _324, mad(0.623046875f, _323, _322 * 0.295654296875f)) * 0.00999999977648258209228515625f) * 0.1593017578125f);
            float _381 = clamp(exp2(log2(((_368 * 18.8515625f) + 0.8359375f) / ((_368 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _385 = exp2(log2(mad(0.116455078125f, _324, mad(0.727294921875f, _323, _322 * 0.15625f)) * 0.00999999977648258209228515625f) * 0.1593017578125f);
            float _394 = clamp(exp2(log2(((_385 * 18.8515625f) + 0.8359375f) / ((_385 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _398 = exp2(log2(mad(0.808349609375f, _324, mad(0.156494140625f, _323, _322 * 0.03515625f)) * 0.00999999977648258209228515625f) * 0.1593017578125f);
            float _407 = clamp(exp2(log2(((_398 * 18.8515625f) + 0.8359375f) / ((_398 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _409 = (_394 + _381) * 0.5f;
            float _430 = exp2(log2(clamp(_409, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _441 = exp2(log2(max(0.0f, _430 + (-0.8359375f)) / (18.8515625f - (_430 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
            float _455 = exp2(log2(((HDRMapping_m0[14u].z * 0.00999999977648258209228515625f) * _441) * ((((HDRMapping_m0[14u].z + (-1.0f)) * _305) * _441) + 1.0f)) * 0.1593017578125f);
            float _464 = clamp(exp2(log2(((_455 * 18.8515625f) + 0.8359375f) / ((_455 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _467 = min(_409 / _464, _464 / _409);
            float _468 = ((dot(float3(_381, _394, _407), float3(6610.0f, -13613.0f, 7003.0f)) * 0.000244140625f) * HDRMapping_m0[14u].w) * _467;
            float _469 = ((dot(float3(_381, _394, _407), float3(17933.0f, -17390.0f, -543.0f)) * 0.000244140625f) * HDRMapping_m0[14u].w) * _467;
            float _485 = exp2(log2(clamp(mad(0.111000001430511474609375f, _469, mad(0.0089999996125698089599609375f, _468, _464)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _493 = exp2(log2(max(0.0f, _485 + (-0.8359375f)) / (18.8515625f - (_485 * 18.6875f))) * 6.277394771575927734375f);
            float _497 = exp2(log2(clamp(mad(-0.111000001430511474609375f, _469, mad(-0.0089999996125698089599609375f, _468, _464)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _506 = exp2(log2(max(0.0f, _497 + (-0.8359375f)) / (18.8515625f - (_497 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
            float _510 = exp2(log2(clamp(mad(-0.3210000097751617431640625f, _469, mad(0.560000002384185791015625f, _468, _464)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _519 = exp2(log2(max(0.0f, _510 + (-0.8359375f)) / (18.8515625f - (_510 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
            float _524 = mad(0.20700000226497650146484375f, _519, mad(-1.32700002193450927734375f, _506, _493 * 207.100006103515625f));
            float _530 = mad(-0.04500000178813934326171875f, _519, mad(0.6809999942779541015625f, _506, _493 * 36.5f));
            float _536 = mad(1.1879999637603759765625f, _519, mad(-0.0500000007450580596923828125f, _506, _493 * (-4.900000095367431640625f)));
            _336 = mad(-0.498610794544219970703125f, _536, mad(-1.53738319873809814453125f, _530, _524 * 3.2409698963165283203125f));
            _338 = mad(0.0415550954639911651611328125f, _536, mad(1.8759677410125732421875f, _530, _524 * (-0.969243705272674560546875f)));
            _340 = mad(1.05697143077850341796875f, _536, mad(-0.2039768397808074951171875f, _530, _524 * 0.0556300692260265350341796875f));
        }
        float _650;
        float _654;
        float _658;
        if (_305 == 1.0f)
        {
            float _560 = mad(0.043313600122928619384765625f, _340, mad(0.329281985759735107421875f, _338, _336 * 0.6274039745330810546875f));
            float _566 = mad(0.0113612003624439239501953125f, _340, mad(0.919539988040924072265625f, _338, _336 * 0.06909699738025665283203125f));
            float _572 = mad(0.895595014095306396484375f, _340, mad(0.0880132019519805908203125f, _338, _336 * 0.01639159955084323883056640625f));
            float _599 = 10000.0f / HDRMapping_m0[10u].y;
            float _609 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_336 - _560)) + _560) * HDRMapping_m0[7u].y) / _599, 0.0f, 1.0f)) * 0.1593017578125f);
            float _618 = clamp(exp2(log2(((_609 * 18.8515625f) + 0.8359375f) / ((_609 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _621 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_338 - _566)) + _566) * HDRMapping_m0[7u].y) / _599, 0.0f, 1.0f)) * 0.1593017578125f);
            float _630 = clamp(exp2(log2(((_621 * 18.8515625f) + 0.8359375f) / ((_621 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _633 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_340 - _572)) + _572) * HDRMapping_m0[7u].y) / _599, 0.0f, 1.0f)) * 0.1593017578125f);
            float _642 = clamp(exp2(log2(((_633 * 18.8515625f) + 0.8359375f) / ((_633 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float frontier_phi_12_10_ladder;
            float frontier_phi_12_10_ladder_1;
            float frontier_phi_12_10_ladder_2;
            if ((asuint(HDRMapping_m0[7u]).x & 2u) == 0u)
            {
                frontier_phi_12_10_ladder = _618;
                frontier_phi_12_10_ladder_1 = _630;
                frontier_phi_12_10_ladder_2 = _642;
            }
            else
            {
                float _675 = exp2(log2(clamp(HDRMapping_m0[0u].z * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _684 = clamp(exp2(log2(((_675 * 18.8515625f) + 0.8359375f) / ((_675 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _690 = exp2(log2(clamp(HDRMapping_m0[0u].w * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _700 = _684 - clamp(exp2(log2(((_690 * 18.8515625f) + 0.8359375f) / ((_690 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _704 = clamp(_618 / _684, 0.0f, 1.0f);
                float _705 = clamp(_630 / _684, 0.0f, 1.0f);
                float _706 = clamp(_642 / _684, 0.0f, 1.0f);
                frontier_phi_12_10_ladder = min((((2.0f - (_704 + _704)) * _700) + (_704 * _684)) * _704, _618);
                frontier_phi_12_10_ladder_1 = min((((2.0f - (_705 + _705)) * _700) + (_705 * _684)) * _705, _630);
                frontier_phi_12_10_ladder_2 = min((((2.0f - (_706 + _706)) * _700) + (_706 * _684)) * _706, _642);
            }
            _650 = frontier_phi_12_10_ladder;
            _654 = frontier_phi_12_10_ladder_1;
            _658 = frontier_phi_12_10_ladder_2;
        }
        else
        {
            bool _726;
            if (_328)
            {
                _726 = !_327;
            }
            else
            {
                _726 = false;
            }
            float4 _731 = RWResult[uint2(uint(_77), uint(_82))].xxxx;
            float _745 = exp2(log2(clamp(_731.x, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _746 = exp2(log2(clamp(_731.y, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _747 = exp2(log2(clamp(_731.z, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _775 = 10000.0f / HDRMapping_m0[10u].y;
            float _776 = _775 * exp2(log2(max(0.0f, _745 + (-0.8359375f)) / (18.8515625f - (_745 * 18.6875f))) * 6.277394771575927734375f);
            float _777 = _775 * exp2(log2(max(0.0f, _746 + (-0.8359375f)) / (18.8515625f - (_746 * 18.6875f))) * 6.277394771575927734375f);
            float _778 = _775 * exp2(log2(max(0.0f, _747 + (-0.8359375f)) / (18.8515625f - (_747 * 18.6875f))) * 6.277394771575927734375f);
            float _783 = mad(-0.07285170257091522216796875f, _778, mad(-0.587639987468719482421875f, _777, _776 * 1.66049098968505859375f));
            float _789 = mad(-0.008348000235855579376220703125f, _778, mad(1.1328999996185302734375f, _777, _776 * (-0.12454999983310699462890625f)));
            float _795 = mad(1.11872994899749755859375f, _778, mad(-0.100579001009464263916015625f, _777, _776 * (-0.01815100014209747314453125f)));
            float _797;
            float _799;
            float _801;
            if (_726)
            {
                _797 = _336;
                _799 = _338;
                _801 = _340;
            }
            else
            {
                _797 = (_336 - _783) * _305;
                _799 = (_338 - _789) * _305;
                _801 = (_340 - _795) * _305;
            }
            float _803 = _797 + _783;
            float _804 = _799 + _789;
            float _805 = _801 + _795;
            float _808 = mad(0.043313600122928619384765625f, _805, mad(0.329281985759735107421875f, _804, _803 * 0.6274039745330810546875f));
            float _811 = mad(0.0113612003624439239501953125f, _805, mad(0.919539988040924072265625f, _804, _803 * 0.06909699738025665283203125f));
            float _814 = mad(0.895595014095306396484375f, _805, mad(0.0880132019519805908203125f, _804, _803 * 0.01639159955084323883056640625f));
            float _847 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_803 - _808)) + _808) * HDRMapping_m0[7u].y) / _775, 0.0f, 1.0f)) * 0.1593017578125f);
            float _653 = clamp(exp2(log2(((_847 * 18.8515625f) + 0.8359375f) / ((_847 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _858 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_804 - _811)) + _811) * HDRMapping_m0[7u].y) / _775, 0.0f, 1.0f)) * 0.1593017578125f);
            float _657 = clamp(exp2(log2(((_858 * 18.8515625f) + 0.8359375f) / ((_858 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _869 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_805 - _814)) + _814) * HDRMapping_m0[7u].y) / _775, 0.0f, 1.0f)) * 0.1593017578125f);
            float _661 = clamp(exp2(log2(((_869 * 18.8515625f) + 0.8359375f) / ((_869 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float frontier_phi_12_16_ladder;
            float frontier_phi_12_16_ladder_1;
            float frontier_phi_12_16_ladder_2;
            if ((asuint(HDRMapping_m0[7u]).x & 2u) == 0u)
            {
                frontier_phi_12_16_ladder = _653;
                frontier_phi_12_16_ladder_1 = _657;
                frontier_phi_12_16_ladder_2 = _661;
            }
            else
            {
                float _894 = exp2(log2(clamp(HDRMapping_m0[0u].z * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _903 = clamp(exp2(log2(((_894 * 18.8515625f) + 0.8359375f) / ((_894 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _909 = exp2(log2(clamp(HDRMapping_m0[0u].w * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _919 = _903 - clamp(exp2(log2(((_909 * 18.8515625f) + 0.8359375f) / ((_909 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _923 = clamp(_653 / _903, 0.0f, 1.0f);
                float _924 = clamp(_657 / _903, 0.0f, 1.0f);
                float _925 = clamp(_661 / _903, 0.0f, 1.0f);
                frontier_phi_12_16_ladder = min((((2.0f - (_923 + _923)) * _919) + (_923 * _903)) * _923, _653);
                frontier_phi_12_16_ladder_1 = min((((2.0f - (_924 + _924)) * _919) + (_924 * _903)) * _924, _657);
                frontier_phi_12_16_ladder_2 = min((((2.0f - (_925 + _925)) * _919) + (_925 * _903)) * _925, _661);
            }
            _650 = frontier_phi_12_16_ladder;
            _654 = frontier_phi_12_16_ladder_1;
            _658 = frontier_phi_12_16_ladder_2;
        }
        RWResult[uint2(uint(_77), uint(_82))] = float4(_650, _654, _658, _650).x;
    }
}

[numthreads(256, 1, 1)]
void main(SPIRV_Cross_Input stage_input)
{
    gl_WorkGroupID = stage_input.gl_WorkGroupID;
    gl_LocalInvocationID = stage_input.gl_LocalInvocationID;
    comp_main();
}
