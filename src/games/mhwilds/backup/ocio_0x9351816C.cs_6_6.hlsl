RWTexture3D<float4> OutLUT : register(u0);

cbuffer HDRMapping : register(b0) {
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_009x : packoffset(c009.x);
  float HDRMapping_009y : packoffset(c009.y);
  float HDRMapping_009z : packoffset(c009.z);
  float HDRMapping_009w : packoffset(c009.w);
  float HDRMapping_010x : packoffset(c010.x);
  float HDRMapping_010z : packoffset(c010.z);
  float HDRMapping_014x : packoffset(c014.x);
};

cbuffer OCIOTransformXYZMatrix : register(b1) {
  float OCIOTransformXYZMatrix_000x : packoffset(c000.x);
  float OCIOTransformXYZMatrix_000y : packoffset(c000.y);
  float OCIOTransformXYZMatrix_000z : packoffset(c000.z);
  float OCIOTransformXYZMatrix_001x : packoffset(c001.x);
  float OCIOTransformXYZMatrix_001y : packoffset(c001.y);
  float OCIOTransformXYZMatrix_001z : packoffset(c001.z);
  float OCIOTransformXYZMatrix_002x : packoffset(c002.x);
  float OCIOTransformXYZMatrix_002y : packoffset(c002.y);
  float OCIOTransformXYZMatrix_002z : packoffset(c002.z);
  float OCIOTransformXYZMatrix_004x : packoffset(c004.x);
  float OCIOTransformXYZMatrix_004y : packoffset(c004.y);
  float OCIOTransformXYZMatrix_004z : packoffset(c004.z);
  float OCIOTransformXYZMatrix_005x : packoffset(c005.x);
  float OCIOTransformXYZMatrix_005y : packoffset(c005.y);
  float OCIOTransformXYZMatrix_005z : packoffset(c005.z);
  float OCIOTransformXYZMatrix_006x : packoffset(c006.x);
  float OCIOTransformXYZMatrix_006y : packoffset(c006.y);
  float OCIOTransformXYZMatrix_006z : packoffset(c006.z);
};

[numthreads(8, 8, 8)]
void main(uint3 SV_DispatchThreadID: SV_DispatchThreadID) {
  float _11 = (HDRMapping_000z) * 0.009999999776482582f;
  float _14 = _11 * (HDRMapping_009w);
  float _15 = float((uint)(SV_DispatchThreadID.x));
  float _16 = float((uint)(SV_DispatchThreadID.y));
  float _17 = float((uint)(SV_DispatchThreadID.z));
  float _18 = _15 * 0.01587301678955555f;
  float _19 = _16 * 0.01587301678955555f;
  float _20 = _17 * 0.01587301678955555f;
  bool _21 = !(_18 <= -0.3013699948787689f);
  float _34;
  float _48;
  float _62;
  float _238;
  float _246;
  float _291;
  float _296;
  if (!_21) {
    float _23 = _15 * 0.2780952751636505f;
    float _24 = _23 + -8.720000267028809f;
    float _25 = exp2(_24);
    float _26 = _25 + -3.0517578125e-05f;
    _34 = _26;
  } else {
    bool _28 = (_18 < 1.468000054359436f);
    _34 = 65504.0f;
    if (_28) {
      float _30 = _15 * 0.2780952751636505f;
      float _31 = _30 + -9.720000267028809f;
      float _32 = exp2(_31);
      _34 = _32;
    }
  }
  bool _35 = !(_19 <= -0.3013699948787689f);
  if (!_35) {
    float _37 = _16 * 0.2780952751636505f;
    float _38 = _37 + -8.720000267028809f;
    float _39 = exp2(_38);
    float _40 = _39 + -3.0517578125e-05f;
    _48 = _40;
  } else {
    bool _42 = (_19 < 1.468000054359436f);
    _48 = 65504.0f;
    if (_42) {
      float _44 = _16 * 0.2780952751636505f;
      float _45 = _44 + -9.720000267028809f;
      float _46 = exp2(_45);
      _48 = _46;
    }
  }
  bool _49 = !(_20 <= -0.3013699948787689f);
  if (!_49) {
    float _51 = _17 * 0.2780952751636505f;
    float _52 = _51 + -8.720000267028809f;
    float _53 = exp2(_52);
    float _54 = _53 + -3.0517578125e-05f;
    _62 = _54;
  } else {
    bool _56 = (_20 < 1.468000054359436f);
    _62 = 65504.0f;
    if (_56) {
      float _58 = _17 * 0.2780952751636505f;
      float _59 = _58 + -9.720000267028809f;
      float _60 = exp2(_59);
      _62 = _60;
    }
  }
  float _87 = (OCIOTransformXYZMatrix_000x) * 0.35920000076293945f;
  float _88 = mad(0.6976000070571899f, (OCIOTransformXYZMatrix_001x), _87);
  float _89 = mad(-0.03579999879002571f, (OCIOTransformXYZMatrix_002x), _88);
  float _90 = (OCIOTransformXYZMatrix_000y) * 0.35920000076293945f;
  float _91 = mad(0.6976000070571899f, (OCIOTransformXYZMatrix_001y), _90);
  float _92 = mad(-0.03579999879002571f, (OCIOTransformXYZMatrix_002y), _91);
  float _93 = (OCIOTransformXYZMatrix_000z) * 0.35920000076293945f;
  float _94 = mad(0.6976000070571899f, (OCIOTransformXYZMatrix_001z), _93);
  float _95 = mad(-0.03579999879002571f, (OCIOTransformXYZMatrix_002z), _94);
  float _96 = (OCIOTransformXYZMatrix_000x) * -0.19220000505447388f;
  float _97 = mad(1.1003999710083008f, (OCIOTransformXYZMatrix_001x), _96);
  float _98 = mad(0.0754999965429306f, (OCIOTransformXYZMatrix_002x), _97);
  float _99 = (OCIOTransformXYZMatrix_000y) * -0.19220000505447388f;
  float _100 = mad(1.1003999710083008f, (OCIOTransformXYZMatrix_001y), _99);
  float _101 = mad(0.0754999965429306f, (OCIOTransformXYZMatrix_002y), _100);
  float _102 = (OCIOTransformXYZMatrix_000z) * -0.19220000505447388f;
  float _103 = mad(1.1003999710083008f, (OCIOTransformXYZMatrix_001z), _102);
  float _104 = mad(0.0754999965429306f, (OCIOTransformXYZMatrix_002z), _103);
  float _105 = (OCIOTransformXYZMatrix_000x) * 0.007000000216066837f;
  float _106 = mad(0.07490000128746033f, (OCIOTransformXYZMatrix_001x), _105);
  float _107 = mad(0.8434000015258789f, (OCIOTransformXYZMatrix_002x), _106);
  float _108 = (OCIOTransformXYZMatrix_000y) * 0.007000000216066837f;
  float _109 = mad(0.07490000128746033f, (OCIOTransformXYZMatrix_001y), _108);
  float _110 = mad(0.8434000015258789f, (OCIOTransformXYZMatrix_002y), _109);
  float _111 = (OCIOTransformXYZMatrix_000z) * 0.007000000216066837f;
  float _112 = mad(0.07490000128746033f, (OCIOTransformXYZMatrix_001z), _111);
  float _113 = mad(0.8434000015258789f, (OCIOTransformXYZMatrix_002z), _112);
  float _114 = _89 * 4096.0f;
  float _115 = _92 * 4096.0f;
  float _116 = _95 * 4096.0f;
  float _117 = round(_114);
  float _118 = round(_115);
  float _119 = round(_116);
  float _120 = _118 * 0.000244140625f;
  float _121 = _119 * 0.000244140625f;
  float _122 = _98 * 4096.0f;
  float _123 = _101 * 4096.0f;
  float _124 = _104 * 4096.0f;
  float _125 = round(_122);
  float _126 = round(_123);
  float _127 = round(_124);
  float _128 = _126 * 0.000244140625f;
  float _129 = _127 * 0.000244140625f;
  float _130 = _107 * 4096.0f;
  float _131 = _110 * 4096.0f;
  float _132 = _113 * 4096.0f;
  float _133 = round(_130);
  float _134 = round(_131);
  float _135 = round(_132);
  float _136 = _134 * 0.000244140625f;
  float _137 = _135 * 0.000244140625f;
  float _138 = _34 * 0.000244140625f;
  float _139 = _138 * _117;
  float _140 = mad(_120, _48, _139);
  float _141 = mad(_121, _62, _140);
  float _142 = _138 * _125;
  float _143 = mad(_128, _48, _142);
  float _144 = mad(_129, _62, _143);
  float _145 = _138 * _133;
  float _146 = mad(_136, _48, _145);
  float _147 = mad(_137, _62, _146);
  float _148 = _141 * 0.009999999776482582f;
  float _149 = log2(_148);
  float _150 = _149 * 0.1593017578125f;
  float _151 = exp2(_150);
  float _152 = _151 * 18.8515625f;
  float _153 = _152 + 0.8359375f;
  float _154 = _151 * 18.6875f;
  float _155 = _154 + 1.0f;
  float _156 = _153 / _155;
  float _157 = log2(_156);
  float _158 = _157 * 78.84375f;
  float _159 = exp2(_158);
  float _160 = saturate(_159);
  float _161 = _144 * 0.009999999776482582f;
  float _162 = log2(_161);
  float _163 = _162 * 0.1593017578125f;
  float _164 = exp2(_163);
  float _165 = _164 * 18.8515625f;
  float _166 = _165 + 0.8359375f;
  float _167 = _164 * 18.6875f;
  float _168 = _167 + 1.0f;
  float _169 = _166 / _168;
  float _170 = log2(_169);
  float _171 = _170 * 78.84375f;
  float _172 = exp2(_171);
  float _173 = saturate(_172);
  float _174 = _147 * 0.009999999776482582f;
  float _175 = log2(_174);
  float _176 = _175 * 0.1593017578125f;
  float _177 = exp2(_176);
  float _178 = _177 * 18.8515625f;
  float _179 = _178 + 0.8359375f;
  float _180 = _177 * 18.6875f;
  float _181 = _180 + 1.0f;
  float _182 = _179 / _181;
  float _183 = log2(_182);
  float _184 = _183 * 78.84375f;
  float _185 = exp2(_184);
  float _186 = saturate(_185);
  float _187 = _173 + _160;
  float _188 = _187 * 0.5f;
  float _189 = dot(float3(_160, _173, _186), float3(6610.0f, -13613.0f, 7003.0f));
  float _190 = _189 * 0.000244140625f;
  float _191 = dot(float3(_160, _173, _186), float3(17933.0f, -17390.0f, -543.0f));
  float _192 = _191 * 0.000244140625f;
  float _194 = (HDRMapping_009x) * 0.009999999776482582f;
  float _196 = (HDRMapping_009z) * 0.009999999776482582f;
  float _198 = saturate(_188);
  float _199 = log2(_198);
  float _200 = _199 * 0.012683313339948654f;
  float _201 = exp2(_200);
  float _202 = _201 + -0.8359375f;
  float _203 = max(0.0f, _202);
  float _204 = _201 * 18.6875f;
  float _205 = 18.8515625f - _204;
  float _206 = _203 / _205;
  float _207 = log2(_206);
  float _208 = _207 * 6.277394771575928f;
  float _209 = exp2(_208);
  float _210 = _209 * 100.0f;
  bool _211 = (_194 == 0.0f);
  _246 = _210;
  if (!_211) {
    float _213 = max(_196, 0.0f);
    float _214 = _194 - _213;
    float _215 = _210 - _213;
    float _216 = _215 / _214;
    float _217 = saturate(_216);
    float _218 = _217 * 2.0f;
    float _219 = 3.0f - _218;
    float _220 = _217 * _217;
    float _221 = _220 * _219;
    float _222 = 1.0f - _221;
    bool _223 = !(_210 <= _196);
    _238 = 0.0f;
    do {
      if (_223) {
        bool _225 = !(_196 >= 0.0f);
        if (!_225) {
          float _227 = _196 + -1.0f;
          float _228 = -1.0f / _227;
          float _229 = 1.0f - _228;
          float _230 = _228 * _210;
          float _231 = _229 + _230;
          _238 = _231;
        } else {
          float _233 = -1.0f - _196;
          float _234 = -0.0f - _196;
          float _235 = _210 * _233;
          float _236 = _234 - _235;
          _238 = _236;
        }
      }
      float _239 = log2(_238);
      float _240 = _239 * (HDRMapping_009y);
      float _241 = exp2(_240);
      float _242 = _241 - _210;
      float _243 = _242 * _222;
      float _244 = _243 + _210;
      _246 = _244;
    } while (false);
  }
  bool _247 = (_14 == _11);
  bool _248 = (_246 > _11);
  bool _249 = _247 && _248;
  _296 = _11;
  if (!_249) {
    float _253 = 1.0f - (HDRMapping_009w);
    float _254 = _253 * _11;
    float _255 = _11 - _254;
    float _256 = exp2((HDRMapping_010x));
    float _257 = 1.0f / _256;
    float _258 = _257 * _246;
    float _259 = _255 / _256;
    float _260 = _11 - _259;
    float _261 = _258 - _11;
    bool _262 = (_261 < -0.0f);
    _291 = -0.0f;
    do {
      if (_262) {
        float _266 = (HDRMapping_014x) + -0.5f;
        float _267 = min((HDRMapping_010x), 1.0f);
        float _268 = _266 * _267;
        float _269 = _268 + 0.5f;
        float _270 = _269 * 2.0f;
        bool _271 = (_259 == 0.0f);
        float _272 = _255 / _259;
        float _273 = (_271 ? 1.0f : _272);
        float _274 = _270 * _273;
        float _275 = -0.0f - _261;
        float _276 = _274 * _260;
        float _277 = _276 / _254;
        float _278 = log2(_254);
        float _279 = log2(_260);
        float _280 = _277 * -0.6931471824645996f;
        float _281 = _280 * _279;
        float _282 = log2(_275);
        float _283 = _282 * _277;
        float _284 = _283 + _278;
        float _285 = _284 * 0.6931471824645996f;
        float _286 = _285 + _281;
        float _287 = _286 * 1.4426950216293335f;
        float _288 = exp2(_287);
        float _289 = -0.0f - _288;
        _291 = _289;
      }
      float _292 = _291 + _11;
      bool _293 = (_246 <= _14);
      float _294 = (_293 ? _246 : _292);
      _296 = _294;
    } while (false);
  }
  float _297 = _296 * 0.009999999776482582f;
  float _298 = log2(_297);
  float _299 = _298 * 0.1593017578125f;
  float _300 = exp2(_299);
  float _301 = _300 * 18.8515625f;
  float _302 = _301 + 0.8359375f;
  float _303 = _300 * 18.6875f;
  float _304 = _303 + 1.0f;
  float _305 = _302 / _304;
  float _306 = log2(_305);
  float _307 = _306 * 78.84375f;
  float _308 = exp2(_307);
  float _309 = saturate(_308);
  float _312 = _190 * (HDRMapping_010z);
  float _313 = _192 * (HDRMapping_010z);
  float _314 = _309 / _188;
  float _315 = _188 / _309;
  float _316 = min(_315, _314);
  float _317 = _312 * _316;
  float _318 = _313 * _316;
  float _319 = mad(0.008999999612569809f, _317, _309);
  float _320 = mad(0.11100000143051147f, _318, _319);
  float _321 = mad(-0.008999999612569809f, _317, _309);
  float _322 = mad(-0.11100000143051147f, _318, _321);
  float _323 = mad(0.5600000023841858f, _317, _309);
  float _324 = mad(-0.32100000977516174f, _318, _323);
  float _325 = saturate(_320);
  float _326 = log2(_325);
  float _327 = _326 * 0.012683313339948654f;
  float _328 = exp2(_327);
  float _329 = _328 + -0.8359375f;
  float _330 = max(0.0f, _329);
  float _331 = _328 * 18.6875f;
  float _332 = 18.8515625f - _331;
  float _333 = _330 / _332;
  float _334 = log2(_333);
  float _335 = _334 * 6.277394771575928f;
  float _336 = exp2(_335);
  float _337 = saturate(_322);
  float _338 = log2(_337);
  float _339 = _338 * 0.012683313339948654f;
  float _340 = exp2(_339);
  float _341 = _340 + -0.8359375f;
  float _342 = max(0.0f, _341);
  float _343 = _340 * 18.6875f;
  float _344 = 18.8515625f - _343;
  float _345 = _342 / _344;
  float _346 = log2(_345);
  float _347 = _346 * 6.277394771575928f;
  float _348 = exp2(_347);
  float _349 = _348 * 100.0f;
  float _350 = saturate(_324);
  float _351 = log2(_350);
  float _352 = _351 * 0.012683313339948654f;
  float _353 = exp2(_352);
  float _354 = _353 + -0.8359375f;
  float _355 = max(0.0f, _354);
  float _356 = _353 * 18.6875f;
  float _357 = 18.8515625f - _356;
  float _358 = _355 / _357;
  float _359 = log2(_358);
  float _360 = _359 * 6.277394771575928f;
  float _361 = exp2(_360);
  float _362 = _361 * 100.0f;
  float _363 = _336 * 207.10000610351562f;
  float _364 = mad(-1.3270000219345093f, _349, _363);
  float _365 = mad(0.2070000022649765f, _362, _364);
  float _366 = _336 * 36.5f;
  float _367 = mad(0.6809999942779541f, _349, _366);
  float _368 = mad(-0.04500000178813934f, _362, _367);
  float _369 = _336 * -4.900000095367432f;
  float _370 = mad(-0.05000000074505806f, _349, _369);
  float _371 = mad(1.187999963760376f, _362, _370);
  float _372 = _365 * (OCIOTransformXYZMatrix_004x);
  float _373 = mad((OCIOTransformXYZMatrix_004y), _368, _372);
  float _374 = mad((OCIOTransformXYZMatrix_004z), _371, _373);
  float _375 = _365 * (OCIOTransformXYZMatrix_005x);
  float _376 = mad((OCIOTransformXYZMatrix_005y), _368, _375);
  float _377 = mad((OCIOTransformXYZMatrix_005z), _371, _376);
  float _378 = _365 * (OCIOTransformXYZMatrix_006x);
  float _379 = mad((OCIOTransformXYZMatrix_006y), _368, _378);
  float _380 = mad((OCIOTransformXYZMatrix_006z), _371, _379);
  float _381 = _374 * 0.6131157279014587f;
  float _382 = mad(_377, 0.33951008319854736f, _381);
  float _383 = mad(_380, 0.047374799847602844f, _382);
  float _384 = _374 * 0.07019715756177902f;
  float _385 = mad(_377, 0.9163550138473511f, _384);
  float _386 = mad(_380, 0.013449129648506641f, _385);
  float _387 = _374 * 0.020619075745344162f;
  float _388 = mad(_377, 0.10957999527454376f, _387);
  float _389 = mad(_380, 0.8698007464408875f, _388);
  OutLUT[int3(((uint)(SV_DispatchThreadID.x)), ((uint)(SV_DispatchThreadID.y)), ((uint)(SV_DispatchThreadID.z)))] = float4(_383, _386, _389, 1.0f);
}
