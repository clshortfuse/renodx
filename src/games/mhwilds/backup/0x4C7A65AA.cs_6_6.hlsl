cbuffer SceneInfoUBO : register(b0, space0)
{
    float4 SceneInfo_m0[39] : packoffset(c0);
};

cbuffer EnvironmentInfoUBO : register(b1, space0)
{
    float4 EnvironmentInfo_m0[324] : packoffset(c0);
};

cbuffer HDRMappingUBO : register(b2, space0)
{
    float4 HDRMapping_m0[15] : packoffset(c0);
};

cbuffer GUIConstantUBO : register(b3, space0)
{
    float4 GUIConstant_m0[18] : packoffset(c0);
};

cbuffer UserMaterialUBO : register(b4, space0)
{
    float4 UserMaterial_m0[4] : packoffset(c0);
};

RWTexture2D<float> RWResult : register(u0, space0);

static uint3 gl_WorkGroupID;
static uint3 gl_LocalInvocationID;
struct SPIRV_Cross_Input
{
    uint3 gl_WorkGroupID : SV_GroupID;
    uint3 gl_LocalInvocationID : SV_GroupThreadID;
};

void comp_main()
{
    uint _52 = uint(gl_LocalInvocationID.x);
    uint _55 = _52 >> 1u;
    uint _59 = _52 >> 2u;
    uint _63 = _52 >> 3u;
    uint _74 = ((((_52 & 1u) | (uint(gl_WorkGroupID.x) << 4u)) | (_55 & 2u)) | (_59 & 4u)) | (_63 & 8u);
    uint _79 = ((((_55 & 1u) | (uint(gl_WorkGroupID.y) << 4u)) | (_59 & 2u)) | (_63 & 4u)) | ((_52 >> 4u) & 8u);
    float _91 = (float(_79) + 0.5f) * SceneInfo_m0[23u].w;
    float _96 = ((SceneInfo_m0[23u].z * 2.0f) * (float(_74) + 0.5f)) + (-1.0f);
    float _98 = (_91 * 2.0f) + (-1.0f);
    float _103 = sqrt((_96 * _96) + (_98 * _98));
    float _132 = clamp(0.89999997615814208984375f - clamp(_103, 0.0f, 1.0f), 0.0f, 1.0f);
    float _138 = ((_132 * _132) * abs(sin((exp2((2.4500000476837158203125f - _103) * 1.80735492706298828125f) + (frac(EnvironmentInfo_m0[4u].y * 9.9999997473787516355514526367188e-05f) * 6.280000209808349609375f)) + (UserMaterial_m0[2u].x * 5.0f)))) * (3.0f - (_132 * 2.0f));
    float _139 = _138 * 0.88999998569488525390625f;
    float _144 = _139 + 0.72166669368743896484375f;
    float _146 = _139 + 1.0f;
    float _147 = _138 * ((_91 < 0.5f) ? 0.0f : 1.0f);
    float _165;
    float _166;
    float _167;
    if (_147 > 0.0f)
    {
        float _161 = 1.0f / ((float((asuint(GUIConstant_m0[15u]).w >> 8u) & 1u) * (1.0f - _147)) + _147);
        _165 = _161 * _144;
        _166 = _161 * _146;
        _167 = _161 * _139;
    }
    else
    {
        _165 = _144;
        _166 = _146;
        _167 = _139;
    }
    bool _170 = max(max(_165, _166), _167) == 0.0f;
    bool _171 = _147 == 0.0f;
    if (!(_171 && _170))
    {
        float _179;
        float _181;
        float _183;
        if (asuint(HDRMapping_m0[14u]).y == 0u)
        {
            _179 = _165;
            _181 = _166;
            _183 = _167;
        }
        else
        {
            float _212 = exp2(log2(mad(0.0810546875f, _167, mad(0.623046875f, _166, _165 * 0.295654296875f)) * 0.00999999977648258209228515625f) * 0.1593017578125f);
            float _225 = clamp(exp2(log2(((_212 * 18.8515625f) + 0.8359375f) / ((_212 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _229 = exp2(log2(mad(0.116455078125f, _167, mad(0.727294921875f, _166, _165 * 0.15625f)) * 0.00999999977648258209228515625f) * 0.1593017578125f);
            float _238 = clamp(exp2(log2(((_229 * 18.8515625f) + 0.8359375f) / ((_229 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _242 = exp2(log2(mad(0.808349609375f, _167, mad(0.156494140625f, _166, _165 * 0.03515625f)) * 0.00999999977648258209228515625f) * 0.1593017578125f);
            float _251 = clamp(exp2(log2(((_242 * 18.8515625f) + 0.8359375f) / ((_242 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _253 = (_238 + _225) * 0.5f;
            float _274 = exp2(log2(clamp(_253, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _285 = exp2(log2(max(0.0f, _274 + (-0.8359375f)) / (18.8515625f - (_274 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
            float _299 = exp2(log2(((HDRMapping_m0[14u].z * 0.00999999977648258209228515625f) * _285) * ((((HDRMapping_m0[14u].z + (-1.0f)) * _147) * _285) + 1.0f)) * 0.1593017578125f);
            float _308 = clamp(exp2(log2(((_299 * 18.8515625f) + 0.8359375f) / ((_299 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _311 = min(_253 / _308, _308 / _253);
            float _312 = ((dot(float3(_225, _238, _251), float3(6610.0f, -13613.0f, 7003.0f)) * 0.000244140625f) * HDRMapping_m0[14u].w) * _311;
            float _313 = ((dot(float3(_225, _238, _251), float3(17933.0f, -17390.0f, -543.0f)) * 0.000244140625f) * HDRMapping_m0[14u].w) * _311;
            float _329 = exp2(log2(clamp(mad(0.111000001430511474609375f, _313, mad(0.0089999996125698089599609375f, _312, _308)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _337 = exp2(log2(max(0.0f, _329 + (-0.8359375f)) / (18.8515625f - (_329 * 18.6875f))) * 6.277394771575927734375f);
            float _341 = exp2(log2(clamp(mad(-0.111000001430511474609375f, _313, mad(-0.0089999996125698089599609375f, _312, _308)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _350 = exp2(log2(max(0.0f, _341 + (-0.8359375f)) / (18.8515625f - (_341 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
            float _354 = exp2(log2(clamp(mad(-0.3210000097751617431640625f, _313, mad(0.560000002384185791015625f, _312, _308)), 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _363 = exp2(log2(max(0.0f, _354 + (-0.8359375f)) / (18.8515625f - (_354 * 18.6875f))) * 6.277394771575927734375f) * 100.0f;
            float _368 = mad(0.20700000226497650146484375f, _363, mad(-1.32700002193450927734375f, _350, _337 * 207.100006103515625f));
            float _374 = mad(-0.04500000178813934326171875f, _363, mad(0.6809999942779541015625f, _350, _337 * 36.5f));
            float _380 = mad(1.1879999637603759765625f, _363, mad(-0.0500000007450580596923828125f, _350, _337 * (-4.900000095367431640625f)));
            _179 = mad(-0.498610794544219970703125f, _380, mad(-1.53738319873809814453125f, _374, _368 * 3.2409698963165283203125f));
            _181 = mad(0.0415550954639911651611328125f, _380, mad(1.8759677410125732421875f, _374, _368 * (-0.969243705272674560546875f)));
            _183 = mad(1.05697143077850341796875f, _380, mad(-0.2039768397808074951171875f, _374, _368 * 0.0556300692260265350341796875f));
        }
        float _494;
        float _498;
        float _502;
        if (_147 == 1.0f)
        {
            float _405 = mad(0.043313600122928619384765625f, _183, mad(0.329281985759735107421875f, _181, _179 * 0.6274039745330810546875f));
            float _411 = mad(0.0113612003624439239501953125f, _183, mad(0.919539988040924072265625f, _181, _179 * 0.06909699738025665283203125f));
            float _417 = mad(0.895595014095306396484375f, _183, mad(0.0880132019519805908203125f, _181, _179 * 0.01639159955084323883056640625f));
            float _444 = 10000.0f / HDRMapping_m0[10u].y;
            float _454 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_179 - _405)) + _405) * HDRMapping_m0[7u].y) / _444, 0.0f, 1.0f)) * 0.1593017578125f);
            float _463 = clamp(exp2(log2(((_454 * 18.8515625f) + 0.8359375f) / ((_454 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _466 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_181 - _411)) + _411) * HDRMapping_m0[7u].y) / _444, 0.0f, 1.0f)) * 0.1593017578125f);
            float _475 = clamp(exp2(log2(((_466 * 18.8515625f) + 0.8359375f) / ((_466 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _478 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_183 - _417)) + _417) * HDRMapping_m0[7u].y) / _444, 0.0f, 1.0f)) * 0.1593017578125f);
            float _487 = clamp(exp2(log2(((_478 * 18.8515625f) + 0.8359375f) / ((_478 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float frontier_phi_9_7_ladder;
            float frontier_phi_9_7_ladder_1;
            float frontier_phi_9_7_ladder_2;
            if ((asuint(HDRMapping_m0[7u]).x & 2u) == 0u)
            {
                frontier_phi_9_7_ladder = _463;
                frontier_phi_9_7_ladder_1 = _475;
                frontier_phi_9_7_ladder_2 = _487;
            }
            else
            {
                float _519 = exp2(log2(clamp(HDRMapping_m0[0u].z * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _528 = clamp(exp2(log2(((_519 * 18.8515625f) + 0.8359375f) / ((_519 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _534 = exp2(log2(clamp(HDRMapping_m0[0u].w * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _544 = _528 - clamp(exp2(log2(((_534 * 18.8515625f) + 0.8359375f) / ((_534 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _548 = clamp(_463 / _528, 0.0f, 1.0f);
                float _549 = clamp(_475 / _528, 0.0f, 1.0f);
                float _550 = clamp(_487 / _528, 0.0f, 1.0f);
                frontier_phi_9_7_ladder = min((((2.0f - (_548 + _548)) * _544) + (_548 * _528)) * _548, _463);
                frontier_phi_9_7_ladder_1 = min((((2.0f - (_549 + _549)) * _544) + (_549 * _528)) * _549, _475);
                frontier_phi_9_7_ladder_2 = min((((2.0f - (_550 + _550)) * _544) + (_550 * _528)) * _550, _487);
            }
            _494 = frontier_phi_9_7_ladder;
            _498 = frontier_phi_9_7_ladder_1;
            _502 = frontier_phi_9_7_ladder_2;
        }
        else
        {
            bool _570;
            if (_171)
            {
                _570 = !_170;
            }
            else
            {
                _570 = false;
            }
            float4 _575 = RWResult[uint2(uint(_74), uint(_79))].xxxx;
            float _589 = exp2(log2(clamp(_575.x, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _590 = exp2(log2(clamp(_575.y, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _591 = exp2(log2(clamp(_575.z, 0.0f, 1.0f)) * 0.0126833133399486541748046875f);
            float _619 = 10000.0f / HDRMapping_m0[10u].y;
            float _620 = _619 * exp2(log2(max(0.0f, _589 + (-0.8359375f)) / (18.8515625f - (_589 * 18.6875f))) * 6.277394771575927734375f);
            float _621 = _619 * exp2(log2(max(0.0f, _590 + (-0.8359375f)) / (18.8515625f - (_590 * 18.6875f))) * 6.277394771575927734375f);
            float _622 = _619 * exp2(log2(max(0.0f, _591 + (-0.8359375f)) / (18.8515625f - (_591 * 18.6875f))) * 6.277394771575927734375f);
            float _627 = mad(-0.07285170257091522216796875f, _622, mad(-0.587639987468719482421875f, _621, _620 * 1.66049098968505859375f));
            float _633 = mad(-0.008348000235855579376220703125f, _622, mad(1.1328999996185302734375f, _621, _620 * (-0.12454999983310699462890625f)));
            float _639 = mad(1.11872994899749755859375f, _622, mad(-0.100579001009464263916015625f, _621, _620 * (-0.01815100014209747314453125f)));
            float _641;
            float _643;
            float _645;
            if (_570)
            {
                _641 = _179;
                _643 = _181;
                _645 = _183;
            }
            else
            {
                _641 = (_179 - _627) * _147;
                _643 = (_181 - _633) * _147;
                _645 = (_183 - _639) * _147;
            }
            float _647 = _641 + _627;
            float _648 = _643 + _633;
            float _649 = _645 + _639;
            float _652 = mad(0.043313600122928619384765625f, _649, mad(0.329281985759735107421875f, _648, _647 * 0.6274039745330810546875f));
            float _655 = mad(0.0113612003624439239501953125f, _649, mad(0.919539988040924072265625f, _648, _647 * 0.06909699738025665283203125f));
            float _658 = mad(0.895595014095306396484375f, _649, mad(0.0880132019519805908203125f, _648, _647 * 0.01639159955084323883056640625f));
            float _691 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_647 - _652)) + _652) * HDRMapping_m0[7u].y) / _619, 0.0f, 1.0f)) * 0.1593017578125f);
            float _497 = clamp(exp2(log2(((_691 * 18.8515625f) + 0.8359375f) / ((_691 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _702 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_648 - _655)) + _655) * HDRMapping_m0[7u].y) / _619, 0.0f, 1.0f)) * 0.1593017578125f);
            float _501 = clamp(exp2(log2(((_702 * 18.8515625f) + 0.8359375f) / ((_702 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float _713 = exp2(log2(clamp(exp2(log2((HDRMapping_m0[8u].y * (_649 - _658)) + _658) * HDRMapping_m0[7u].y) / _619, 0.0f, 1.0f)) * 0.1593017578125f);
            float _505 = clamp(exp2(log2(((_713 * 18.8515625f) + 0.8359375f) / ((_713 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
            float frontier_phi_9_13_ladder;
            float frontier_phi_9_13_ladder_1;
            float frontier_phi_9_13_ladder_2;
            if ((asuint(HDRMapping_m0[7u]).x & 2u) == 0u)
            {
                frontier_phi_9_13_ladder = _497;
                frontier_phi_9_13_ladder_1 = _501;
                frontier_phi_9_13_ladder_2 = _505;
            }
            else
            {
                float _738 = exp2(log2(clamp(HDRMapping_m0[0u].z * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _747 = clamp(exp2(log2(((_738 * 18.8515625f) + 0.8359375f) / ((_738 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _753 = exp2(log2(clamp(HDRMapping_m0[0u].w * 9.9999997473787516355514526367188e-05f, 0.0f, 1.0f)) * 0.1593017578125f);
                float _763 = _747 - clamp(exp2(log2(((_753 * 18.8515625f) + 0.8359375f) / ((_753 * 18.6875f) + 1.0f)) * 78.84375f), 0.0f, 1.0f);
                float _767 = clamp(_497 / _747, 0.0f, 1.0f);
                float _768 = clamp(_501 / _747, 0.0f, 1.0f);
                float _769 = clamp(_505 / _747, 0.0f, 1.0f);
                frontier_phi_9_13_ladder = min((((2.0f - (_767 + _767)) * _763) + (_767 * _747)) * _767, _497);
                frontier_phi_9_13_ladder_1 = min((((2.0f - (_768 + _768)) * _763) + (_768 * _747)) * _768, _501);
                frontier_phi_9_13_ladder_2 = min((((2.0f - (_769 + _769)) * _763) + (_769 * _747)) * _769, _505);
            }
            _494 = frontier_phi_9_13_ladder;
            _498 = frontier_phi_9_13_ladder_1;
            _502 = frontier_phi_9_13_ladder_2;
        }
        RWResult[uint2(uint(_74), uint(_79))] = float4(_494, _498, _502, _494).x;
    }
}

[numthreads(256, 1, 1)]
void main(SPIRV_Cross_Input stage_input)
{
    gl_WorkGroupID = stage_input.gl_WorkGroupID;
    gl_LocalInvocationID = stage_input.gl_LocalInvocationID;
    comp_main();
}
