Texture2D<float4> tLinearImage : register(t0);

Texture2D<float4> StandardMaxNitsImage : register(t1);

Texture2D<float4> DisplayMaxNitsImage : register(t2);

cbuffer HDRMapping : register(b0) {
  float HDRMapping_000x : packoffset(c000.x);
  float HDRMapping_000y : packoffset(c000.y);
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_000w : packoffset(c000.w);
  float HDRMapping_001x : packoffset(c001.x);
  float HDRMapping_001y : packoffset(c001.y);
  float HDRMapping_001z : packoffset(c001.z);
  float HDRMapping_001w : packoffset(c001.w);
  float HDRMapping_003x : packoffset(c003.x);
  float HDRMapping_003y : packoffset(c003.y);
  float HDRMapping_003z : packoffset(c003.z);
  float HDRMapping_003w : packoffset(c003.w);
  float HDRMapping_005x : packoffset(c005.x);
  float HDRMapping_005y : packoffset(c005.y);
  float HDRMapping_005z : packoffset(c005.z);
  float HDRMapping_005w : packoffset(c005.w);
  float HDRMapping_006x : packoffset(c006.x);
  float HDRMapping_006y : packoffset(c006.y);
  float HDRMapping_006z : packoffset(c006.z);
  float HDRMapping_006w : packoffset(c006.w);
  uint HDRMapping_007x : packoffset(c007.x);
  float HDRMapping_007y : packoffset(c007.y);
  float HDRMapping_008y : packoffset(c008.y);
};

SamplerState PointClamp : register(s1, space32);

SamplerState PointBorder : register(s2, space32);

float4 main(
  noperspective float4 SV_Position : SV_Position,
  linear float2 TEXCOORD : TEXCOORD
) : SV_Target {
  float4 SV_Target;
  float4 _12 = tLinearImage.SampleLevel(PointBorder, float2((TEXCOORD.x), (TEXCOORD.y)), 0.0f);
  float _18 = (_12.x) * 0.627403974533081f;
  float _19 = mad(0.3292819857597351f, (_12.y), _18);
  float _20 = mad(0.04331360012292862f, (_12.z), _19);
  float _21 = (_12.x) * 0.06909699738025665f;
  float _22 = mad(0.9195399880409241f, (_12.y), _21);
  float _23 = mad(0.011361200362443924f, (_12.z), _22);
  float _24 = (_12.x) * 0.01639159955084324f;
  float _25 = mad(0.08801320195198059f, (_12.y), _24);
  float _26 = mad(0.8955950140953064f, (_12.z), _25);
  float _29 = (_12.x) - _20;
  float _30 = (_12.y) - _23;
  float _31 = (_12.z) - _26;
  float _32 = (HDRMapping_008y) * _29;
  float _33 = (HDRMapping_008y) * _30;
  float _34 = (HDRMapping_008y) * _31;
  float _35 = _32 + _20;
  float _36 = _33 + _23;
  float _37 = _34 + _26;
  float _40 = log2(_35);
  float _41 = log2(_36);
  float _42 = log2(_37);
  float _43 = _40 * (HDRMapping_007y);
  float _44 = _41 * (HDRMapping_007y);
  float _45 = _42 * (HDRMapping_007y);
  float _46 = exp2(_43);
  float _47 = exp2(_44);
  float _48 = exp2(_45);
  float _49 = 10000.0f / (HDRMapping_000x);
  float _50 = _46 / _49;
  float _51 = _47 / _49;
  float _52 = _48 / _49;
  float _53 = saturate(_50);
  float _54 = saturate(_51);
  float _55 = saturate(_52);
  float _56 = log2(_53);
  float _57 = _56 * 0.1593017578125f;
  float _58 = exp2(_57);
  float _59 = _58 * 18.8515625f;
  float _60 = _59 + 0.8359375f;
  float _61 = _58 * 18.6875f;
  float _62 = _61 + 1.0f;
  float _63 = _60 / _62;
  float _64 = log2(_63);
  float _65 = _64 * 78.84375f;
  float _66 = exp2(_65);
  float _67 = saturate(_66);
  float _68 = log2(_54);
  float _69 = _68 * 0.1593017578125f;
  float _70 = exp2(_69);
  float _71 = _70 * 18.8515625f;
  float _72 = _71 + 0.8359375f;
  float _73 = _70 * 18.6875f;
  float _74 = _73 + 1.0f;
  float _75 = _72 / _74;
  float _76 = log2(_75);
  float _77 = _76 * 78.84375f;
  float _78 = exp2(_77);
  float _79 = saturate(_78);
  float _80 = log2(_55);
  float _81 = _80 * 0.1593017578125f;
  float _82 = exp2(_81);
  float _83 = _82 * 18.8515625f;
  float _84 = _83 + 0.8359375f;
  float _85 = _82 * 18.6875f;
  float _86 = _85 + 1.0f;
  float _87 = _84 / _86;
  float _88 = log2(_87);
  float _89 = _88 * 78.84375f;
  float _90 = exp2(_89);
  float _91 = saturate(_90);
  int _94 = ((uint)(HDRMapping_007x)) & 1;
  bool _95 = (_94 == 0);
  float _123 = _67;
  float _124 = _79;
  float _125 = _91;
  float _188;
  float _189;
  float _190;
  float _271;
  float _272;
  float _273;
  float _274;
  float _364;
  float _365;
  float _366;
  float _367;
  float _378;
  float _379;
  float _380;
  if (!_95) {
    float _97 = max((_12.x), (_12.y));
    float _98 = max(_97, (_12.z));
    float _99 = (HDRMapping_000x) * 9.999999747378752e-05f;
    float _100 = _99 * _98;
    float _101 = saturate(_100);
    float _102 = _101 * 10000.0f;
    bool _105 = !((TEXCOORD.x) >= (HDRMapping_006x));
    bool _107 = !((TEXCOORD.x) <= (HDRMapping_006z));
    bool _108 = _105 || _107;
    bool _110 = !((TEXCOORD.y) >= (HDRMapping_006y));
    bool _111 = _108 || _110;
    bool _113 = !((TEXCOORD.y) <= (HDRMapping_006w));
    bool _114 = _111 || _113;
    do {
      if (!_114) {
        bool _117 = !(_102 >= (HDRMapping_000z));
        _123 = 0.5f;
        _124 = 0.0f;
        _125 = 0.0f;
        do {
          if (_117) {
            bool _120 = !(_102 <= (HDRMapping_000w));
            _123 = 0.0f;
            _124 = 0.0f;
            _125 = 0.5f;
            if (_120) {
              break;
            }
          }
          break;
        } while (false);
      }
      _123 = _67;
      _124 = _79;
      _125 = _91;
    } while (false);
  }
  int _126 = ((uint)(HDRMapping_007x)) & 2;
  bool _127 = (_126 == 0);
  _188 = _123;
  _189 = _124;
  _190 = _125;
  if (!_127) {
    float _130 = (HDRMapping_000z) * 9.999999747378752e-05f;
    float _131 = saturate(_130);
    float _132 = log2(_131);
    float _133 = _132 * 0.1593017578125f;
    float _134 = exp2(_133);
    float _135 = _134 * 18.8515625f;
    float _136 = _135 + 0.8359375f;
    float _137 = _134 * 18.6875f;
    float _138 = _137 + 1.0f;
    float _139 = _136 / _138;
    float _140 = log2(_139);
    float _141 = _140 * 78.84375f;
    float _142 = exp2(_141);
    float _143 = saturate(_142);
    float _145 = (HDRMapping_000w) * 9.999999747378752e-05f;
    float _146 = saturate(_145);
    float _147 = log2(_146);
    float _148 = _147 * 0.1593017578125f;
    float _149 = exp2(_148);
    float _150 = _149 * 18.8515625f;
    float _151 = _150 + 0.8359375f;
    float _152 = _149 * 18.6875f;
    float _153 = _152 + 1.0f;
    float _154 = _151 / _153;
    float _155 = log2(_154);
    float _156 = _155 * 78.84375f;
    float _157 = exp2(_156);
    float _158 = saturate(_157);
    float _159 = _143 - _158;
    float _160 = _123 / _143;
    float _161 = _124 / _143;
    float _162 = _125 / _143;
    float _163 = saturate(_160);
    float _164 = saturate(_161);
    float _165 = saturate(_162);
    float _166 = _163 * _143;
    float _167 = _164 * _143;
    float _168 = _165 * _143;
    float _169 = _163 + _163;
    float _170 = 2.0f - _169;
    float _171 = _170 * _159;
    float _172 = _171 + _166;
    float _173 = _172 * _163;
    float _174 = _164 + _164;
    float _175 = 2.0f - _174;
    float _176 = _175 * _159;
    float _177 = _176 + _167;
    float _178 = _177 * _164;
    float _179 = _165 + _165;
    float _180 = 2.0f - _179;
    float _181 = _180 * _159;
    float _182 = _181 + _168;
    float _183 = _182 * _165;
    float _184 = min(_173, _123);
    float _185 = min(_178, _124);
    float _186 = min(_183, _125);
    _188 = _184;
    _189 = _185;
    _190 = _186;
  }
  int _191 = ((uint)(HDRMapping_007x)) & 4;
  bool _192 = (_191 == 0);
  _378 = _188;
  _379 = _189;
  _380 = _190;
  if (!_192) {
    bool _196 = !((TEXCOORD.x) >= (HDRMapping_003x));
    _271 = 0.0f;
    _272 = 0.0f;
    _273 = 0.0f;
    _274 = 0.0f;
    do {
      if (!_196) {
        bool _199 = !((TEXCOORD.x) <= (HDRMapping_003z));
        bool _201 = !((TEXCOORD.y) >= (HDRMapping_003y));
        bool _202 = _199 || _201;
        _271 = 0.0f;
        _272 = 0.0f;
        _273 = 0.0f;
        _274 = 0.0f;
        if (!_202) {
          bool _205 = !((TEXCOORD.y) <= (HDRMapping_003w));
          _271 = 0.0f;
          _272 = 0.0f;
          _273 = 0.0f;
          _274 = 0.0f;
          if (!_205) {
            float _210 = (HDRMapping_003z) - (TEXCOORD.x);
            float _211 = _210 / (HDRMapping_005z);
            float _212 = 1.0f - _211;
            float _213 = (HDRMapping_003w) - (TEXCOORD.y);
            float _214 = _213 / (HDRMapping_005w);
            float _215 = 1.0f - _214;
            float4 _218 = StandardMaxNitsImage.SampleLevel(PointClamp, float2(_212, _215), 0.0f);
            float _223 = (_218.x) * 100.0f;
            float _224 = (_218.y) * 100.0f;
            float _225 = (_218.z) * 100.0f;
            float _226 = _223 / _49;
            float _227 = _224 / _49;
            float _228 = _225 / _49;
            float _229 = saturate(_226);
            float _230 = saturate(_227);
            float _231 = saturate(_228);
            float _232 = log2(_229);
            float _233 = _232 * 0.1593017578125f;
            float _234 = exp2(_233);
            float _235 = _234 * 18.8515625f;
            float _236 = _235 + 0.8359375f;
            float _237 = _234 * 18.6875f;
            float _238 = _237 + 1.0f;
            float _239 = _236 / _238;
            float _240 = log2(_239);
            float _241 = _240 * 78.84375f;
            float _242 = exp2(_241);
            float _243 = saturate(_242);
            float _244 = log2(_230);
            float _245 = _244 * 0.1593017578125f;
            float _246 = exp2(_245);
            float _247 = _246 * 18.8515625f;
            float _248 = _247 + 0.8359375f;
            float _249 = _246 * 18.6875f;
            float _250 = _249 + 1.0f;
            float _251 = _248 / _250;
            float _252 = log2(_251);
            float _253 = _252 * 78.84375f;
            float _254 = exp2(_253);
            float _255 = saturate(_254);
            float _256 = log2(_231);
            float _257 = _256 * 0.1593017578125f;
            float _258 = exp2(_257);
            float _259 = _258 * 18.8515625f;
            float _260 = _259 + 0.8359375f;
            float _261 = _258 * 18.6875f;
            float _262 = _261 + 1.0f;
            float _263 = _260 / _262;
            float _264 = log2(_263);
            float _265 = _264 * 78.84375f;
            float _266 = exp2(_265);
            float _267 = saturate(_266);
            float _269 = (HDRMapping_000y) * (_218.w);
            _271 = _243;
            _272 = _255;
            _273 = _267;
            _274 = _269;
          }
        }
      }
      bool _277 = !((TEXCOORD.x) >= (HDRMapping_001x));
      _364 = _271;
      _365 = _272;
      _366 = _273;
      _367 = _274;
      do {
        if (!_277) {
          bool _280 = !((TEXCOORD.x) <= (HDRMapping_001z));
          bool _282 = !((TEXCOORD.y) >= (HDRMapping_001y));
          bool _283 = _280 || _282;
          _364 = _271;
          _365 = _272;
          _366 = _273;
          _367 = _274;
          if (!_283) {
            bool _286 = !((TEXCOORD.y) <= (HDRMapping_001w));
            _364 = _271;
            _365 = _272;
            _366 = _273;
            _367 = _274;
            if (!_286) {
              float _291 = (HDRMapping_001z) - (TEXCOORD.x);
              float _292 = _291 / (HDRMapping_005x);
              float _293 = 1.0f - _292;
              float _294 = (HDRMapping_001w) - (TEXCOORD.y);
              float _295 = _294 / (HDRMapping_005y);
              float _296 = 1.0f - _295;
              float4 _299 = DisplayMaxNitsImage.SampleLevel(PointClamp, float2(_293, _296), 0.0f);
              float _305 = (HDRMapping_000z) * (_299.x);
              float _306 = (HDRMapping_000z) * (_299.y);
              float _307 = (HDRMapping_000z) * (_299.z);
              float _308 = (HDRMapping_000x) * _49;
              float _309 = _305 / _308;
              float _310 = _306 / _308;
              float _311 = _307 / _308;
              float _312 = saturate(_309);
              float _313 = saturate(_310);
              float _314 = saturate(_311);
              float _315 = log2(_312);
              float _316 = _315 * 0.1593017578125f;
              float _317 = exp2(_316);
              float _318 = _317 * 18.8515625f;
              float _319 = _318 + 0.8359375f;
              float _320 = _317 * 18.6875f;
              float _321 = _320 + 1.0f;
              float _322 = _319 / _321;
              float _323 = log2(_322);
              float _324 = _323 * 78.84375f;
              float _325 = exp2(_324);
              float _326 = saturate(_325);
              float _327 = log2(_313);
              float _328 = _327 * 0.1593017578125f;
              float _329 = exp2(_328);
              float _330 = _329 * 18.8515625f;
              float _331 = _330 + 0.8359375f;
              float _332 = _329 * 18.6875f;
              float _333 = _332 + 1.0f;
              float _334 = _331 / _333;
              float _335 = log2(_334);
              float _336 = _335 * 78.84375f;
              float _337 = exp2(_336);
              float _338 = saturate(_337);
              float _339 = log2(_314);
              float _340 = _339 * 0.1593017578125f;
              float _341 = exp2(_340);
              float _342 = _341 * 18.8515625f;
              float _343 = _342 + 0.8359375f;
              float _344 = _341 * 18.6875f;
              float _345 = _344 + 1.0f;
              float _346 = _343 / _345;
              float _347 = log2(_346);
              float _348 = _347 * 78.84375f;
              float _349 = exp2(_348);
              float _350 = saturate(_349);
              float _352 = (HDRMapping_000y) * (_299.w);
              float _353 = _326 - _271;
              float _354 = _338 - _272;
              float _355 = _350 - _273;
              float _356 = _352 * _353;
              float _357 = _352 * _354;
              float _358 = _352 * _355;
              float _359 = _356 + _271;
              float _360 = _357 + _272;
              float _361 = _358 + _273;
              float _362 = max(_274, _352);
              _364 = _359;
              _365 = _360;
              _366 = _361;
              _367 = _362;
            }
          }
        }
        float _368 = _364 - _188;
        float _369 = _365 - _189;
        float _370 = _366 - _190;
        float _371 = _367 * _368;
        float _372 = _367 * _369;
        float _373 = _367 * _370;
        float _374 = _371 + _188;
        float _375 = _372 + _189;
        float _376 = _373 + _190;
        _378 = _374;
        _379 = _375;
        _380 = _376;
      } while (false);
    } while (false);
  }
  SV_Target.x = _378;
  SV_Target.y = _379;
  SV_Target.z = _380;
  SV_Target.w = 1.0f;
  return SV_Target;
}
