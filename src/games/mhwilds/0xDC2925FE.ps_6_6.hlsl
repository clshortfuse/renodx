Texture2D<float4> SrcTexture : register(t0);

cbuffer HDRMapping : register(b0) {
  float HDRMapping_000x : packoffset(c000.x);
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_009x : packoffset(c009.x);
  float HDRMapping_009y : packoffset(c009.y);
  float HDRMapping_009z : packoffset(c009.z);
  float HDRMapping_009w : packoffset(c009.w);
  float HDRMapping_010x : packoffset(c010.x);
  float HDRMapping_010z : packoffset(c010.z);
  float HDRMapping_014x : packoffset(c014.x);
};

cbuffer OCIOTransformXYZMatrix : register(b1) {
  float OCIOTransformXYZMatrix_000x : packoffset(c000.x);
  float OCIOTransformXYZMatrix_000y : packoffset(c000.y);
  float OCIOTransformXYZMatrix_000z : packoffset(c000.z);
  float OCIOTransformXYZMatrix_001x : packoffset(c001.x);
  float OCIOTransformXYZMatrix_001y : packoffset(c001.y);
  float OCIOTransformXYZMatrix_001z : packoffset(c001.z);
  float OCIOTransformXYZMatrix_002x : packoffset(c002.x);
  float OCIOTransformXYZMatrix_002y : packoffset(c002.y);
  float OCIOTransformXYZMatrix_002z : packoffset(c002.z);
  float OCIOTransformXYZMatrix_004x : packoffset(c004.x);
  float OCIOTransformXYZMatrix_004y : packoffset(c004.y);
  float OCIOTransformXYZMatrix_004z : packoffset(c004.z);
  float OCIOTransformXYZMatrix_005x : packoffset(c005.x);
  float OCIOTransformXYZMatrix_005y : packoffset(c005.y);
  float OCIOTransformXYZMatrix_005z : packoffset(c005.z);
  float OCIOTransformXYZMatrix_006x : packoffset(c006.x);
  float OCIOTransformXYZMatrix_006y : packoffset(c006.y);
  float OCIOTransformXYZMatrix_006z : packoffset(c006.z);
};

SamplerState PointBorder : register(s2, space32);

float4 main(
  noperspective float4 SV_Position : SV_Position,
  linear float2 TEXCOORD : TEXCOORD
) : SV_Target {
  float4 SV_Target;
  float _11 = (HDRMapping_000z) * 0.009999999776482582f;
  float _14 = _11 * (HDRMapping_009w);
  float4 _17 = SrcTexture.SampleLevel(PointBorder, float2((TEXCOORD.x), (TEXCOORD.y)), 0.0f);
  float _22 = (HDRMapping_000x) * 0.009999999776482582f;
  float _23 = _22 * (_17.x);
  float _24 = _22 * (_17.y);
  float _25 = _22 * (_17.z);
  float _50 = (OCIOTransformXYZMatrix_000x) * 0.35920000076293945f;
  float _51 = mad(0.6976000070571899f, (OCIOTransformXYZMatrix_001x), _50);
  float _52 = mad(-0.03579999879002571f, (OCIOTransformXYZMatrix_002x), _51);
  float _53 = (OCIOTransformXYZMatrix_000y) * 0.35920000076293945f;
  float _54 = mad(0.6976000070571899f, (OCIOTransformXYZMatrix_001y), _53);
  float _55 = mad(-0.03579999879002571f, (OCIOTransformXYZMatrix_002y), _54);
  float _56 = (OCIOTransformXYZMatrix_000z) * 0.35920000076293945f;
  float _57 = mad(0.6976000070571899f, (OCIOTransformXYZMatrix_001z), _56);
  float _58 = mad(-0.03579999879002571f, (OCIOTransformXYZMatrix_002z), _57);
  float _59 = (OCIOTransformXYZMatrix_000x) * -0.19220000505447388f;
  float _60 = mad(1.1003999710083008f, (OCIOTransformXYZMatrix_001x), _59);
  float _61 = mad(0.0754999965429306f, (OCIOTransformXYZMatrix_002x), _60);
  float _62 = (OCIOTransformXYZMatrix_000y) * -0.19220000505447388f;
  float _63 = mad(1.1003999710083008f, (OCIOTransformXYZMatrix_001y), _62);
  float _64 = mad(0.0754999965429306f, (OCIOTransformXYZMatrix_002y), _63);
  float _65 = (OCIOTransformXYZMatrix_000z) * -0.19220000505447388f;
  float _66 = mad(1.1003999710083008f, (OCIOTransformXYZMatrix_001z), _65);
  float _67 = mad(0.0754999965429306f, (OCIOTransformXYZMatrix_002z), _66);
  float _68 = (OCIOTransformXYZMatrix_000x) * 0.007000000216066837f;
  float _69 = mad(0.07490000128746033f, (OCIOTransformXYZMatrix_001x), _68);
  float _70 = mad(0.8434000015258789f, (OCIOTransformXYZMatrix_002x), _69);
  float _71 = (OCIOTransformXYZMatrix_000y) * 0.007000000216066837f;
  float _72 = mad(0.07490000128746033f, (OCIOTransformXYZMatrix_001y), _71);
  float _73 = mad(0.8434000015258789f, (OCIOTransformXYZMatrix_002y), _72);
  float _74 = (OCIOTransformXYZMatrix_000z) * 0.007000000216066837f;
  float _75 = mad(0.07490000128746033f, (OCIOTransformXYZMatrix_001z), _74);
  float _76 = mad(0.8434000015258789f, (OCIOTransformXYZMatrix_002z), _75);
  float _77 = _52 * 4096.0f;
  float _78 = _55 * 4096.0f;
  float _79 = _58 * 4096.0f;
  float _80 = round(_77);
  float _81 = round(_78);
  float _82 = round(_79);
  float _83 = _81 * 0.000244140625f;
  float _84 = _82 * 0.000244140625f;
  float _85 = _61 * 4096.0f;
  float _86 = _64 * 4096.0f;
  float _87 = _67 * 4096.0f;
  float _88 = round(_85);
  float _89 = round(_86);
  float _90 = round(_87);
  float _91 = _89 * 0.000244140625f;
  float _92 = _90 * 0.000244140625f;
  float _93 = _70 * 4096.0f;
  float _94 = _73 * 4096.0f;
  float _95 = _76 * 4096.0f;
  float _96 = round(_93);
  float _97 = round(_94);
  float _98 = round(_95);
  float _99 = _97 * 0.000244140625f;
  float _100 = _98 * 0.000244140625f;
  float _101 = _23 * 0.000244140625f;
  float _102 = _101 * _80;
  float _103 = mad(_83, _24, _102);
  float _104 = mad(_84, _25, _103);
  float _105 = _101 * _88;
  float _106 = mad(_91, _24, _105);
  float _107 = mad(_92, _25, _106);
  float _108 = _101 * _96;
  float _109 = mad(_99, _24, _108);
  float _110 = mad(_100, _25, _109);
  float _111 = _104 * 0.009999999776482582f;
  float _112 = log2(_111);
  float _113 = _112 * 0.1593017578125f;
  float _114 = exp2(_113);
  float _115 = _114 * 18.8515625f;
  float _116 = _115 + 0.8359375f;
  float _117 = _114 * 18.6875f;
  float _118 = _117 + 1.0f;
  float _119 = _116 / _118;
  float _120 = log2(_119);
  float _121 = _120 * 78.84375f;
  float _122 = exp2(_121);
  float _123 = saturate(_122);
  float _124 = _107 * 0.009999999776482582f;
  float _125 = log2(_124);
  float _126 = _125 * 0.1593017578125f;
  float _127 = exp2(_126);
  float _128 = _127 * 18.8515625f;
  float _129 = _128 + 0.8359375f;
  float _130 = _127 * 18.6875f;
  float _131 = _130 + 1.0f;
  float _132 = _129 / _131;
  float _133 = log2(_132);
  float _134 = _133 * 78.84375f;
  float _135 = exp2(_134);
  float _136 = saturate(_135);
  float _137 = _110 * 0.009999999776482582f;
  float _138 = log2(_137);
  float _139 = _138 * 0.1593017578125f;
  float _140 = exp2(_139);
  float _141 = _140 * 18.8515625f;
  float _142 = _141 + 0.8359375f;
  float _143 = _140 * 18.6875f;
  float _144 = _143 + 1.0f;
  float _145 = _142 / _144;
  float _146 = log2(_145);
  float _147 = _146 * 78.84375f;
  float _148 = exp2(_147);
  float _149 = saturate(_148);
  float _150 = _136 + _123;
  float _151 = _150 * 0.5f;
  float _152 = dot(float3(_123, _136, _149), float3(6610.0f, -13613.0f, 7003.0f));
  float _153 = _152 * 0.000244140625f;
  float _154 = dot(float3(_123, _136, _149), float3(17933.0f, -17390.0f, -543.0f));
  float _155 = _154 * 0.000244140625f;
  float _157 = (HDRMapping_009x) * 0.009999999776482582f;
  float _159 = (HDRMapping_009z) * 0.009999999776482582f;
  float _161 = saturate(_151);
  float _162 = log2(_161);
  float _163 = _162 * 0.012683313339948654f;
  float _164 = exp2(_163);
  float _165 = _164 + -0.8359375f;
  float _166 = max(0.0f, _165);
  float _167 = _164 * 18.6875f;
  float _168 = 18.8515625f - _167;
  float _169 = _166 / _168;
  float _170 = log2(_169);
  float _171 = _170 * 6.277394771575928f;
  float _172 = exp2(_171);
  float _173 = _172 * 100.0f;
  bool _174 = (_157 == 0.0f);
  float _201;
  float _209 = _173;
  float _254;
  float _259;
  if (!_174) {
    float _176 = max(_159, 0.0f);
    float _177 = _157 - _176;
    float _178 = _173 - _176;
    float _179 = _178 / _177;
    float _180 = saturate(_179);
    float _181 = _180 * 2.0f;
    float _182 = 3.0f - _181;
    float _183 = _180 * _180;
    float _184 = _183 * _182;
    float _185 = 1.0f - _184;
    bool _186 = !(_173 <= _159);
    _201 = 0.0f;
    do {
      if (_186) {
        bool _188 = !(_159 >= 0.0f);
        if (!_188) {
          float _190 = _159 + -1.0f;
          float _191 = -1.0f / _190;
          float _192 = 1.0f - _191;
          float _193 = _191 * _173;
          float _194 = _192 + _193;
          _201 = _194;
        } else {
          float _196 = -1.0f - _159;
          float _197 = -0.0f - _159;
          float _198 = _173 * _196;
          float _199 = _197 - _198;
          _201 = _199;
        }
      }
      float _202 = log2(_201);
      float _203 = _202 * (HDRMapping_009y);
      float _204 = exp2(_203);
      float _205 = _204 - _173;
      float _206 = _205 * _185;
      float _207 = _206 + _173;
      _209 = _207;
    } while (false);
  }
  bool _210 = (_14 == _11);
  bool _211 = (_209 > _11);
  bool _212 = _210 && _211;
  _259 = _11;
  if (!_212) {
    float _216 = 1.0f - (HDRMapping_009w);
    float _217 = _216 * _11;
    float _218 = _11 - _217;
    float _219 = exp2((HDRMapping_010x));
    float _220 = 1.0f / _219;
    float _221 = _220 * _209;
    float _222 = _218 / _219;
    float _223 = _11 - _222;
    float _224 = _221 - _11;
    bool _225 = (_224 < -0.0f);
    _254 = -0.0f;
    do {
      if (_225) {
        float _229 = (HDRMapping_014x) + -0.5f;
        float _230 = min((HDRMapping_010x), 1.0f);
        float _231 = _229 * _230;
        float _232 = _231 + 0.5f;
        float _233 = _232 * 2.0f;
        bool _234 = (_222 == 0.0f);
        float _235 = _218 / _222;
        float _236 = (_234 ? 1.0f : _235);
        float _237 = _233 * _236;
        float _238 = -0.0f - _224;
        float _239 = _237 * _223;
        float _240 = _239 / _217;
        float _241 = log2(_217);
        float _242 = log2(_223);
        float _243 = _240 * -0.6931471824645996f;
        float _244 = _243 * _242;
        float _245 = log2(_238);
        float _246 = _245 * _240;
        float _247 = _246 + _241;
        float _248 = _247 * 0.6931471824645996f;
        float _249 = _248 + _244;
        float _250 = _249 * 1.4426950216293335f;
        float _251 = exp2(_250);
        float _252 = -0.0f - _251;
        _254 = _252;
      }
      float _255 = _254 + _11;
      bool _256 = (_209 <= _14);
      float _257 = (_256 ? _209 : _255);
      _259 = _257;
    } while (false);
  }
  float _260 = _259 * 0.009999999776482582f;
  float _261 = log2(_260);
  float _262 = _261 * 0.1593017578125f;
  float _263 = exp2(_262);
  float _264 = _263 * 18.8515625f;
  float _265 = _264 + 0.8359375f;
  float _266 = _263 * 18.6875f;
  float _267 = _266 + 1.0f;
  float _268 = _265 / _267;
  float _269 = log2(_268);
  float _270 = _269 * 78.84375f;
  float _271 = exp2(_270);
  float _272 = saturate(_271);
  float _275 = _153 * (HDRMapping_010z);
  float _276 = _155 * (HDRMapping_010z);
  float _277 = _272 / _151;
  float _278 = _151 / _272;
  float _279 = min(_278, _277);
  float _280 = _275 * _279;
  float _281 = _276 * _279;
  float _282 = mad(0.008999999612569809f, _280, _272);
  float _283 = mad(0.11100000143051147f, _281, _282);
  float _284 = mad(-0.008999999612569809f, _280, _272);
  float _285 = mad(-0.11100000143051147f, _281, _284);
  float _286 = mad(0.5600000023841858f, _280, _272);
  float _287 = mad(-0.32100000977516174f, _281, _286);
  float _288 = saturate(_283);
  float _289 = log2(_288);
  float _290 = _289 * 0.012683313339948654f;
  float _291 = exp2(_290);
  float _292 = _291 + -0.8359375f;
  float _293 = max(0.0f, _292);
  float _294 = _291 * 18.6875f;
  float _295 = 18.8515625f - _294;
  float _296 = _293 / _295;
  float _297 = log2(_296);
  float _298 = _297 * 6.277394771575928f;
  float _299 = exp2(_298);
  float _300 = saturate(_285);
  float _301 = log2(_300);
  float _302 = _301 * 0.012683313339948654f;
  float _303 = exp2(_302);
  float _304 = _303 + -0.8359375f;
  float _305 = max(0.0f, _304);
  float _306 = _303 * 18.6875f;
  float _307 = 18.8515625f - _306;
  float _308 = _305 / _307;
  float _309 = log2(_308);
  float _310 = _309 * 6.277394771575928f;
  float _311 = exp2(_310);
  float _312 = _311 * 100.0f;
  float _313 = saturate(_287);
  float _314 = log2(_313);
  float _315 = _314 * 0.012683313339948654f;
  float _316 = exp2(_315);
  float _317 = _316 + -0.8359375f;
  float _318 = max(0.0f, _317);
  float _319 = _316 * 18.6875f;
  float _320 = 18.8515625f - _319;
  float _321 = _318 / _320;
  float _322 = log2(_321);
  float _323 = _322 * 6.277394771575928f;
  float _324 = exp2(_323);
  float _325 = _324 * 100.0f;
  float _326 = _299 * 207.10000610351562f;
  float _327 = mad(-1.3270000219345093f, _312, _326);
  float _328 = mad(0.2070000022649765f, _325, _327);
  float _329 = _299 * 36.5f;
  float _330 = mad(0.6809999942779541f, _312, _329);
  float _331 = mad(-0.04500000178813934f, _325, _330);
  float _332 = _299 * -4.900000095367432f;
  float _333 = mad(-0.05000000074505806f, _312, _332);
  float _334 = mad(1.187999963760376f, _325, _333);
  float _335 = _328 * (OCIOTransformXYZMatrix_004x);
  float _336 = mad((OCIOTransformXYZMatrix_004y), _331, _335);
  float _337 = mad((OCIOTransformXYZMatrix_004z), _334, _336);
  float _338 = _328 * (OCIOTransformXYZMatrix_005x);
  float _339 = mad((OCIOTransformXYZMatrix_005y), _331, _338);
  float _340 = mad((OCIOTransformXYZMatrix_005z), _334, _339);
  float _341 = _328 * (OCIOTransformXYZMatrix_006x);
  float _342 = mad((OCIOTransformXYZMatrix_006y), _331, _341);
  float _343 = mad((OCIOTransformXYZMatrix_006z), _334, _342);
  float _344 = _337 * 0.6131157279014587f;
  float _345 = mad(_340, 0.33951008319854736f, _344);
  float _346 = mad(_343, 0.047374799847602844f, _345);
  float _347 = _337 * 0.07019715756177902f;
  float _348 = mad(_340, 0.9163550138473511f, _347);
  float _349 = mad(_343, 0.013449129648506641f, _348);
  float _350 = _337 * 0.020619075745344162f;
  float _351 = mad(_340, 0.10957999527454376f, _350);
  float _352 = mad(_343, 0.8698007464408875f, _351);
  SV_Target.x = _346;
  SV_Target.y = _349;
  SV_Target.z = _352;
  SV_Target.w = 1.0f;
  return SV_Target;
}
