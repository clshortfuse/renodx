Texture2D<float4> GUIImage : register(t0);

RWTexture2D<float> RWResult : register(u0);

cbuffer SceneInfo : register(b0) {
  float SceneInfo_023z : packoffset(c023.z);
  float SceneInfo_023w : packoffset(c023.w);
};

cbuffer HDRMapping : register(b1) {
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_000w : packoffset(c000.w);
  uint HDRMapping_007x : packoffset(c007.x);
  float HDRMapping_007y : packoffset(c007.y);
  float HDRMapping_008y : packoffset(c008.y);
  float HDRMapping_010y : packoffset(c010.y);
  uint HDRMapping_014y : packoffset(c014.y);
  float HDRMapping_014z : packoffset(c014.z);
  float HDRMapping_014w : packoffset(c014.w);
};

cbuffer GUIConstant : register(b2) {
  uint GUIConstant_015w : packoffset(c015.w);
};

SamplerState PointClamp : register(s1, space32);

[numthreads(256, 1, 1)]
void main(
 uint3 SV_DispatchThreadID : SV_DispatchThreadID,
 uint3 SV_GroupID : SV_GroupID,
 uint3 SV_GroupThreadID : SV_GroupThreadID,
 uint SV_GroupIndex : SV_GroupIndex
) {
  // fn:start 0
  // %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  // rwtexture _1 = RWResult;
  // %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  // texture _2 = GUIImage;
  // %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 32, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  // SamplerState _3 = PointClamp;
  // %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  // cbuffer _4 = GUIConstant;
  // %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  // cbuffer _5 = HDRMapping;
  // %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  // cbuffer _6 = SceneInfo;
  // %7 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 13, i32 276 })  ; AnnotateHandle(res,props)  resource: CBuffer
  // auto _7 = _4;
  // %8 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 13, i32 240 })  ; AnnotateHandle(res,props)  resource: CBuffer
  // auto _8 = _5;
  // %9 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 13, i32 624 })  ; AnnotateHandle(res,props)  resource: CBuffer
  // auto _9 = _6;
  // %10 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  // uint _10 = SV_GroupID.x;
  // %11 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  // uint _11 = SV_GroupID.y;
  // %12 = trunc i32 %10 to i16
  min16int _12 = min16int(((uint)(SV_GroupID.x)));
  // %13 = trunc i32 %11 to i16
  min16int _13 = min16int(((uint)(SV_GroupID.y)));
  // %14 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  // uint _14 = SV_GroupThreadID.x;
  // %15 = trunc i32 %14 to i16
  min16int _15 = min16int(((uint)(SV_GroupThreadID.x)));
  // %16 = and i16 %15, 1
  min16int _16 = _15 & 1;
  // %17 = lshr i16 %15, 1
  min16int _17 = (uint)(_15) >> 1;
  // %18 = and i16 %17, 1
  min16int _18 = _17 & 1;
  // %19 = and i16 %17, 2
  min16int _19 = _17 & 2;
  // %20 = lshr i16 %15, 2
  min16int _20 = (uint)(_15) >> 2;
  // %21 = and i16 %20, 2
  min16int _21 = _20 & 2;
  // %22 = and i16 %20, 4
  min16int _22 = _20 & 4;
  // %23 = lshr i16 %15, 3
  min16int _23 = (uint)(_15) >> 3;
  // %24 = and i16 %23, 4
  min16int _24 = _23 & 4;
  // %25 = and i16 %23, 8
  min16int _25 = _23 & 8;
  // %26 = lshr i16 %15, 4
  min16int _26 = (uint)(_15) >> 4;
  // %27 = and i16 %26, 8
  min16int _27 = _26 & 8;
  // %28 = shl i16 %12, 4
  min16uint _28 = _12 << 4;
  // %29 = or i16 %16, %28
  min16int _29 = _16 | _28;
  // %30 = or i16 %29, %19
  min16int _30 = _29 | _19;
  // %31 = or i16 %30, %22
  min16int _31 = _30 | _22;
  // %32 = or i16 %31, %25
  min16int _32 = _31 | _25;
  // %33 = shl i16 %13, 4
  min16uint _33 = _13 << 4;
  // %34 = or i16 %18, %33
  min16int _34 = _18 | _33;
  // %35 = or i16 %34, %21
  min16int _35 = _34 | _21;
  // %36 = or i16 %35, %24
  min16int _36 = _35 | _24;
  // %37 = or i16 %36, %27
  min16int _37 = _36 | _27;
  // %38 = uitofp i16 %32 to float
  float _38 = float((uint)_32);
  // %39 = uitofp i16 %37 to float
  float _39 = float((uint)_37);
  // %40 = fadd fast float %38, 5.000000e-01
  float _40 = _38 + 0.5f;
  // %41 = fadd fast float %39, 5.000000e-01
  float _41 = _39 + 0.5f;
  // %43 = extractvalue %dx.types.CBufRet.f32 %42, 2
  // float _43 = SceneInfo_023z;
  // %44 = extractvalue %dx.types.CBufRet.f32 %42, 3
  // float _44 = SceneInfo_023w;
  // %45 = fmul fast float %40, %43
  float _45 = _40 * (SceneInfo_023z);
  // %46 = fmul fast float %41, %44
  float _46 = _41 * (SceneInfo_023w);
  // %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  // auto _47 = _2;
  // %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  // auto _48 = _3;
  // %49 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %47, %dx.types.Handle %48, float %45, float %46, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  float4 _49 = GUIImage.SampleLevel(PointClamp, float2(_45, _46), 0.0f);
  // %50 = extractvalue %dx.types.ResRet.f32 %49, 0
  // float _50 = _49.x;
  // %51 = extractvalue %dx.types.ResRet.f32 %49, 1
  // float _51 = _49.y;
  // %52 = extractvalue %dx.types.ResRet.f32 %49, 2
  // float _52 = _49.z;
  // %53 = extractvalue %dx.types.ResRet.f32 %49, 3
  // float _53 = _49.w;
  // %54 = fadd fast float %53, 0xBF689374C0000000
  float _54 = (_49.w) + -0.003000000026077032f;
  // %55 = fcmp fast olt float %54, 0.000000e+00
  bool _55 = (_54 < 0.0f);
  // %56 = fdiv fast float 1.000000e+00, %53
  float _56 = 1.0f / (_49.w);
  // %57 = fmul fast float %50, %56
  float _57 = (_49.x) * _56;
  // %58 = fmul fast float %51, %56
  float _58 = (_49.y) * _56;
  // %59 = fmul fast float %52, %56
  float _59 = (_49.z) * _56;
  // %60 = call float @dx.op.unary.f32(i32 7, float %57)  ; Saturate(value)
  float _60 = saturate(_57);
  // %61 = call float @dx.op.unary.f32(i32 7, float %58)  ; Saturate(value)
  float _61 = saturate(_58);
  // %62 = call float @dx.op.unary.f32(i32 7, float %59)  ; Saturate(value)
  float _62 = saturate(_59);
  // %63 = fadd fast float %60, 0x3FAC28F5C0000000
  float _63 = _60 + 0.054999999701976776f;
  // %64 = fadd fast float %61, 0x3FAC28F5C0000000
  float _64 = _61 + 0.054999999701976776f;
  // %65 = fadd fast float %62, 0x3FAC28F5C0000000
  float _65 = _62 + 0.054999999701976776f;
  // %66 = fmul fast float %63, 0x3FEE54EDE0000000
  float _66 = _63 * 0.9478673338890076f;
  // %67 = fmul fast float %64, 0x3FEE54EDE0000000
  float _67 = _64 * 0.9478673338890076f;
  // %68 = fmul fast float %65, 0x3FEE54EDE0000000
  float _68 = _65 * 0.9478673338890076f;
  // %69 = call float @dx.op.unary.f32(i32 23, float %66)  ; Log(value)
  float _69 = log2(_66);
  // %70 = call float @dx.op.unary.f32(i32 23, float %67)  ; Log(value)
  float _70 = log2(_67);
  // %71 = call float @dx.op.unary.f32(i32 23, float %68)  ; Log(value)
  float _71 = log2(_68);
  // %72 = fmul fast float %69, 0x4003333340000000
  float _72 = _69 * 2.4000000953674316f;
  // %73 = fmul fast float %70, 0x4003333340000000
  float _73 = _70 * 2.4000000953674316f;
  // %74 = fmul fast float %71, 0x4003333340000000
  float _74 = _71 * 2.4000000953674316f;
  // %75 = call float @dx.op.unary.f32(i32 21, float %72)  ; Exp(value)
  float _75 = exp2(_72);
  // %76 = call float @dx.op.unary.f32(i32 21, float %73)  ; Exp(value)
  float _76 = exp2(_73);
  // %77 = call float @dx.op.unary.f32(i32 21, float %74)  ; Exp(value)
  float _77 = exp2(_74);
  // %78 = fcmp ugt float %60, 0x3FA4B5DCC0000000
  bool _78 = !(_60 <= 0.040449999272823334f);
  // %79 = fcmp ugt float %61, 0x3FA4B5DCC0000000
  bool _79 = !(_61 <= 0.040449999272823334f);
  // %80 = fcmp ugt float %62, 0x3FA4B5DCC0000000
  bool _80 = !(_62 <= 0.040449999272823334f);
  // %81 = uitofp i1 %78 to float
  float _81 = float((uint)_78);
  // %82 = uitofp i1 %79 to float
  float _82 = float((uint)_79);
  // %83 = uitofp i1 %80 to float
  float _83 = float((uint)_80);
  // %84 = fmul fast float %75, %81
  float _84 = _75 * _81;
  // %85 = fmul fast float %76, %82
  float _85 = _76 * _82;
  // %86 = fmul fast float %77, %83
  float _86 = _77 * _83;
  // %87 = fmul fast float %60, 0x3FB3D07220000000
  float _87 = _60 * 0.07739938050508499f;
  // %88 = fmul fast float %61, 0x3FB3D07220000000
  float _88 = _61 * 0.07739938050508499f;
  // %89 = fmul fast float %62, 0x3FB3D07220000000
  float _89 = _62 * 0.07739938050508499f;
  // %90 = fcmp fast ole float %60, 0x3FA4B5DCC0000000
  bool _90 = (_60 <= 0.040449999272823334f);
  // %91 = fcmp fast ole float %61, 0x3FA4B5DCC0000000
  bool _91 = (_61 <= 0.040449999272823334f);
  // %92 = fcmp fast ole float %62, 0x3FA4B5DCC0000000
  bool _92 = (_62 <= 0.040449999272823334f);
  // %93 = uitofp i1 %90 to float
  float _93 = float((uint)_90);
  // %94 = uitofp i1 %91 to float
  float _94 = float((uint)_91);
  // %95 = uitofp i1 %92 to float
  float _95 = float((uint)_92);
  // %96 = fmul fast float %87, %93
  float _96 = _87 * _93;
  // %97 = fmul fast float %88, %94
  float _97 = _88 * _94;
  // %98 = fmul fast float %89, %95
  float _98 = _89 * _95;
  // %99 = fadd fast float %84, %96
  float _99 = _84 + _96;
  // %100 = fadd fast float %85, %97
  float _100 = _85 + _97;
  // %101 = fadd fast float %86, %98
  float _101 = _86 + _98;
  float _118;
  float _119;
  float _120;
  float _290;
  float _291;
  float _292;
  bool _439;
  float _506;
  float _507;
  float _508;
  float _650;
  float _651;
  float _652;
  if (!_55) {
    // fn:start 102
    // fn:pending 656
    // %103 = fcmp fast ogt float %53, 0.000000e+00
    bool _103 = ((_49.w) > 0.0f);
    _118 = _99;
    _119 = _100;
    _120 = _101;
    do {
      if (_103) {
        // fn:start 104
        // fn:pending 656, 117
        // %105 = fsub fast float 1.000000e+00, %53
        float _105 = 1.0f - (_49.w);
        // %107 = extractvalue %dx.types.CBufRet.i32 %106, 3
        // uint _107 = GUIConstant_015w;
        // %108 = lshr i32 %107, 8
        int _108 = (uint)((GUIConstant_015w)) >> 8;
        // %109 = and i32 %108, 1
        int _109 = _108 & 1;
        // %110 = uitofp i32 %109 to float
        float _110 = float((uint)_109);
        // %111 = fmul fast float %110, %105
        float _111 = _110 * _105;
        // %112 = fadd fast float %111, %53
        float _112 = _111 + (_49.w);
        // %113 = fdiv fast float 1.000000e+00, %112
        float _113 = 1.0f / _112;
        // %114 = fmul fast float %113, %99
        float _114 = _113 * _99;
        // %115 = fmul fast float %113, %100
        float _115 = _113 * _100;
        // %116 = fmul fast float %113, %101
        float _116 = _113 * _101;
        _118 = _114;
        _119 = _115;
        _120 = _116;
        // fn:converge 104 => 117
      }
      // fn:start 117
      // fn:pending 656
      // %121 = call float @dx.op.binary.f32(i32 35, float %118, float %119)  ; FMax(a,b)
      float _121 = max(_118, _119);
      // %122 = call float @dx.op.binary.f32(i32 35, float %121, float %120)  ; FMax(a,b)
      float _122 = max(_121, _120);
      // %123 = fcmp fast oeq float %122, 0.000000e+00
      bool _123 = (_122 == 0.0f);
      // %124 = fcmp fast oeq float %53, 0.000000e+00
      bool _124 = ((_49.w) == 0.0f);
      // %125 = and i1 %124, %123
      bool _125 = _124 && _123;
      if (!_125) {
        // fn:start 126
        // fn:pending 656
        // %128 = extractvalue %dx.types.CBufRet.i32 %127, 1
        // uint _128 = HDRMapping_014y;
        // %129 = icmp eq i32 %128, 0
        bool _129 = (((uint)(HDRMapping_014y)) == 0);
        _290 = _118;
        _291 = _119;
        _292 = _120;
        do {
          if (!_129) {
            // fn:start 130
            // fn:pending 656, 289
            // %132 = extractvalue %dx.types.CBufRet.f32 %131, 2
            // float _132 = HDRMapping_014z;
            // %133 = fmul fast float %118, 0x3FD2EC0000000000
            float _133 = _118 * 0.295654296875f;
            // %134 = call float @dx.op.tertiary.f32(i32 46, float 0x3FE3F00000000000, float %119, float %133)  ; FMad(a,b,c)
            float _134 = mad(0.623046875f, _119, _133);
            // %135 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB4C00000000000, float %120, float %134)  ; FMad(a,b,c)
            float _135 = mad(0.0810546875f, _120, _134);
            // %136 = fmul fast float %118, 1.562500e-01
            float _136 = _118 * 0.15625f;
            // %137 = call float @dx.op.tertiary.f32(i32 46, float 0x3FE7460000000000, float %119, float %136)  ; FMad(a,b,c)
            float _137 = mad(0.727294921875f, _119, _136);
            // %138 = call float @dx.op.tertiary.f32(i32 46, float 0x3FBDD00000000000, float %120, float %137)  ; FMad(a,b,c)
            float _138 = mad(0.116455078125f, _120, _137);
            // %139 = fmul fast float %118, 3.515625e-02
            float _139 = _118 * 0.03515625f;
            // %140 = call float @dx.op.tertiary.f32(i32 46, float 0x3FC4080000000000, float %119, float %139)  ; FMad(a,b,c)
            float _140 = mad(0.156494140625f, _119, _139);
            // %141 = call float @dx.op.tertiary.f32(i32 46, float 0x3FE9DE0000000000, float %120, float %140)  ; FMad(a,b,c)
            float _141 = mad(0.808349609375f, _120, _140);
            // %142 = fmul fast float %135, 0x3F847AE140000000
            float _142 = _135 * 0.009999999776482582f;
            // %143 = call float @dx.op.unary.f32(i32 23, float %142)  ; Log(value)
            float _143 = log2(_142);
            // %144 = fmul fast float %143, 0x3FC4640000000000
            float _144 = _143 * 0.1593017578125f;
            // %145 = call float @dx.op.unary.f32(i32 21, float %144)  ; Exp(value)
            float _145 = exp2(_144);
            // %146 = fmul fast float %145, 0x4032DA0000000000
            float _146 = _145 * 18.8515625f;
            // %147 = fadd fast float %146, 8.359375e-01
            float _147 = _146 + 0.8359375f;
            // %148 = fmul fast float %145, 1.868750e+01
            float _148 = _145 * 18.6875f;
            // %149 = fadd fast float %148, 1.000000e+00
            float _149 = _148 + 1.0f;
            // %150 = fdiv fast float %147, %149
            float _150 = _147 / _149;
            // %151 = call float @dx.op.unary.f32(i32 23, float %150)  ; Log(value)
            float _151 = log2(_150);
            // %152 = fmul fast float %151, 7.884375e+01
            float _152 = _151 * 78.84375f;
            // %153 = call float @dx.op.unary.f32(i32 21, float %152)  ; Exp(value)
            float _153 = exp2(_152);
            // %154 = call float @dx.op.unary.f32(i32 7, float %153)  ; Saturate(value)
            float _154 = saturate(_153);
            // %155 = fmul fast float %138, 0x3F847AE140000000
            float _155 = _138 * 0.009999999776482582f;
            // %156 = call float @dx.op.unary.f32(i32 23, float %155)  ; Log(value)
            float _156 = log2(_155);
            // %157 = fmul fast float %156, 0x3FC4640000000000
            float _157 = _156 * 0.1593017578125f;
            // %158 = call float @dx.op.unary.f32(i32 21, float %157)  ; Exp(value)
            float _158 = exp2(_157);
            // %159 = fmul fast float %158, 0x4032DA0000000000
            float _159 = _158 * 18.8515625f;
            // %160 = fadd fast float %159, 8.359375e-01
            float _160 = _159 + 0.8359375f;
            // %161 = fmul fast float %158, 1.868750e+01
            float _161 = _158 * 18.6875f;
            // %162 = fadd fast float %161, 1.000000e+00
            float _162 = _161 + 1.0f;
            // %163 = fdiv fast float %160, %162
            float _163 = _160 / _162;
            // %164 = call float @dx.op.unary.f32(i32 23, float %163)  ; Log(value)
            float _164 = log2(_163);
            // %165 = fmul fast float %164, 7.884375e+01
            float _165 = _164 * 78.84375f;
            // %166 = call float @dx.op.unary.f32(i32 21, float %165)  ; Exp(value)
            float _166 = exp2(_165);
            // %167 = call float @dx.op.unary.f32(i32 7, float %166)  ; Saturate(value)
            float _167 = saturate(_166);
            // %168 = fmul fast float %141, 0x3F847AE140000000
            float _168 = _141 * 0.009999999776482582f;
            // %169 = call float @dx.op.unary.f32(i32 23, float %168)  ; Log(value)
            float _169 = log2(_168);
            // %170 = fmul fast float %169, 0x3FC4640000000000
            float _170 = _169 * 0.1593017578125f;
            // %171 = call float @dx.op.unary.f32(i32 21, float %170)  ; Exp(value)
            float _171 = exp2(_170);
            // %172 = fmul fast float %171, 0x4032DA0000000000
            float _172 = _171 * 18.8515625f;
            // %173 = fadd fast float %172, 8.359375e-01
            float _173 = _172 + 0.8359375f;
            // %174 = fmul fast float %171, 1.868750e+01
            float _174 = _171 * 18.6875f;
            // %175 = fadd fast float %174, 1.000000e+00
            float _175 = _174 + 1.0f;
            // %176 = fdiv fast float %173, %175
            float _176 = _173 / _175;
            // %177 = call float @dx.op.unary.f32(i32 23, float %176)  ; Log(value)
            float _177 = log2(_176);
            // %178 = fmul fast float %177, 7.884375e+01
            float _178 = _177 * 78.84375f;
            // %179 = call float @dx.op.unary.f32(i32 21, float %178)  ; Exp(value)
            float _179 = exp2(_178);
            // %180 = call float @dx.op.unary.f32(i32 7, float %179)  ; Saturate(value)
            float _180 = saturate(_179);
            // %181 = fadd fast float %167, %154
            float _181 = _167 + _154;
            // %182 = fmul fast float %181, 5.000000e-01
            float _182 = _181 * 0.5f;
            // %183 = call float @dx.op.dot3.f32(i32 55, float %154, float %167, float %180, float 6.610000e+03, float -1.361300e+04, float 7.003000e+03)  ; Dot3(ax,ay,az,bx,by,bz)
            float _183 = dot(float3(_154, _167, _180), float3(6610.0f, -13613.0f, 7003.0f));
            // %184 = fmul fast float %183, 0x3F30000000000000
            float _184 = _183 * 0.000244140625f;
            // %185 = call float @dx.op.dot3.f32(i32 55, float %154, float %167, float %180, float 1.793300e+04, float -1.739000e+04, float -5.430000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
            float _185 = dot(float3(_154, _167, _180), float3(17933.0f, -17390.0f, -543.0f));
            // %186 = fmul fast float %185, 0x3F30000000000000
            float _186 = _185 * 0.000244140625f;
            // %187 = call float @dx.op.unary.f32(i32 7, float %182)  ; Saturate(value)
            float _187 = saturate(_182);
            // %188 = call float @dx.op.unary.f32(i32 23, float %187)  ; Log(value)
            float _188 = log2(_187);
            // %189 = fmul fast float %188, 0x3F89F9B580000000
            float _189 = _188 * 0.012683313339948654f;
            // %190 = call float @dx.op.unary.f32(i32 21, float %189)  ; Exp(value)
            float _190 = exp2(_189);
            // %191 = fadd fast float %190, -8.359375e-01
            float _191 = _190 + -0.8359375f;
            // %192 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %191)  ; FMax(a,b)
            float _192 = max(0.0f, _191);
            // %193 = fmul fast float %190, 1.868750e+01
            float _193 = _190 * 18.6875f;
            // %194 = fsub fast float 0x4032DA0000000000, %193
            float _194 = 18.8515625f - _193;
            // %195 = fdiv fast float %192, %194
            float _195 = _192 / _194;
            // %196 = call float @dx.op.unary.f32(i32 23, float %195)  ; Log(value)
            float _196 = log2(_195);
            // %197 = fmul fast float %196, 0x40191C0D60000000
            float _197 = _196 * 6.277394771575928f;
            // %198 = call float @dx.op.unary.f32(i32 21, float %197)  ; Exp(value)
            float _198 = exp2(_197);
            // %199 = fmul fast float %198, 1.000000e+02
            float _199 = _198 * 100.0f;
            // %200 = fadd fast float %132, -1.000000e+00
            float _200 = (HDRMapping_014z) + -1.0f;
            // %201 = fmul fast float %200, %53
            float _201 = _200 * (_49.w);
            // %202 = fmul fast float %201, %199
            float _202 = _201 * _199;
            // %203 = fadd fast float %202, 1.000000e+00
            float _203 = _202 + 1.0f;
            // %204 = extractvalue %dx.types.CBufRet.f32 %131, 3
            // float _204 = HDRMapping_014w;
            // %205 = fmul fast float %184, %204
            float _205 = _184 * (HDRMapping_014w);
            // %206 = fmul fast float %186, %204
            float _206 = _186 * (HDRMapping_014w);
            // %207 = fmul fast float %132, 0x3F847AE140000000
            float _207 = (HDRMapping_014z) * 0.009999999776482582f;
            // %208 = fmul fast float %207, %199
            float _208 = _207 * _199;
            // %209 = fmul fast float %208, %203
            float _209 = _208 * _203;
            // %210 = call float @dx.op.unary.f32(i32 23, float %209)  ; Log(value)
            float _210 = log2(_209);
            // %211 = fmul fast float %210, 0x3FC4640000000000
            float _211 = _210 * 0.1593017578125f;
            // %212 = call float @dx.op.unary.f32(i32 21, float %211)  ; Exp(value)
            float _212 = exp2(_211);
            // %213 = fmul fast float %212, 0x4032DA0000000000
            float _213 = _212 * 18.8515625f;
            // %214 = fadd fast float %213, 8.359375e-01
            float _214 = _213 + 0.8359375f;
            // %215 = fmul fast float %212, 1.868750e+01
            float _215 = _212 * 18.6875f;
            // %216 = fadd fast float %215, 1.000000e+00
            float _216 = _215 + 1.0f;
            // %217 = fdiv fast float %214, %216
            float _217 = _214 / _216;
            // %218 = call float @dx.op.unary.f32(i32 23, float %217)  ; Log(value)
            float _218 = log2(_217);
            // %219 = fmul fast float %218, 7.884375e+01
            float _219 = _218 * 78.84375f;
            // %220 = call float @dx.op.unary.f32(i32 21, float %219)  ; Exp(value)
            float _220 = exp2(_219);
            // %221 = call float @dx.op.unary.f32(i32 7, float %220)  ; Saturate(value)
            float _221 = saturate(_220);
            // %222 = fdiv fast float %221, %182
            float _222 = _221 / _182;
            // %223 = fdiv fast float %182, %221
            float _223 = _182 / _221;
            // %224 = call float @dx.op.binary.f32(i32 36, float %223, float %222)  ; FMin(a,b)
            float _224 = min(_223, _222);
            // %225 = fmul fast float %205, %224
            float _225 = _205 * _224;
            // %226 = fmul fast float %206, %224
            float _226 = _206 * _224;
            // %227 = call float @dx.op.tertiary.f32(i32 46, float 0x3F826E9780000000, float %225, float %221)  ; FMad(a,b,c)
            float _227 = mad(0.008999999612569809f, _225, _221);
            // %228 = call float @dx.op.tertiary.f32(i32 46, float 0x3FBC6A7F00000000, float %226, float %227)  ; FMad(a,b,c)
            float _228 = mad(0.11100000143051147f, _226, _227);
            // %229 = call float @dx.op.tertiary.f32(i32 46, float 0xBF826E9780000000, float %225, float %221)  ; FMad(a,b,c)
            float _229 = mad(-0.008999999612569809f, _225, _221);
            // %230 = call float @dx.op.tertiary.f32(i32 46, float 0xBFBC6A7F00000000, float %226, float %229)  ; FMad(a,b,c)
            float _230 = mad(-0.11100000143051147f, _226, _229);
            // %231 = call float @dx.op.tertiary.f32(i32 46, float 0x3FE1EB8520000000, float %225, float %221)  ; FMad(a,b,c)
            float _231 = mad(0.5600000023841858f, _225, _221);
            // %232 = call float @dx.op.tertiary.f32(i32 46, float 0xBFD48B43A0000000, float %226, float %231)  ; FMad(a,b,c)
            float _232 = mad(-0.32100000977516174f, _226, _231);
            // %233 = call float @dx.op.unary.f32(i32 7, float %228)  ; Saturate(value)
            float _233 = saturate(_228);
            // %234 = call float @dx.op.unary.f32(i32 23, float %233)  ; Log(value)
            float _234 = log2(_233);
            // %235 = fmul fast float %234, 0x3F89F9B580000000
            float _235 = _234 * 0.012683313339948654f;
            // %236 = call float @dx.op.unary.f32(i32 21, float %235)  ; Exp(value)
            float _236 = exp2(_235);
            // %237 = fadd fast float %236, -8.359375e-01
            float _237 = _236 + -0.8359375f;
            // %238 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %237)  ; FMax(a,b)
            float _238 = max(0.0f, _237);
            // %239 = fmul fast float %236, 1.868750e+01
            float _239 = _236 * 18.6875f;
            // %240 = fsub fast float 0x4032DA0000000000, %239
            float _240 = 18.8515625f - _239;
            // %241 = fdiv fast float %238, %240
            float _241 = _238 / _240;
            // %242 = call float @dx.op.unary.f32(i32 23, float %241)  ; Log(value)
            float _242 = log2(_241);
            // %243 = fmul fast float %242, 0x40191C0D60000000
            float _243 = _242 * 6.277394771575928f;
            // %244 = call float @dx.op.unary.f32(i32 21, float %243)  ; Exp(value)
            float _244 = exp2(_243);
            // %245 = call float @dx.op.unary.f32(i32 7, float %230)  ; Saturate(value)
            float _245 = saturate(_230);
            // %246 = call float @dx.op.unary.f32(i32 23, float %245)  ; Log(value)
            float _246 = log2(_245);
            // %247 = fmul fast float %246, 0x3F89F9B580000000
            float _247 = _246 * 0.012683313339948654f;
            // %248 = call float @dx.op.unary.f32(i32 21, float %247)  ; Exp(value)
            float _248 = exp2(_247);
            // %249 = fadd fast float %248, -8.359375e-01
            float _249 = _248 + -0.8359375f;
            // %250 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %249)  ; FMax(a,b)
            float _250 = max(0.0f, _249);
            // %251 = fmul fast float %248, 1.868750e+01
            float _251 = _248 * 18.6875f;
            // %252 = fsub fast float 0x4032DA0000000000, %251
            float _252 = 18.8515625f - _251;
            // %253 = fdiv fast float %250, %252
            float _253 = _250 / _252;
            // %254 = call float @dx.op.unary.f32(i32 23, float %253)  ; Log(value)
            float _254 = log2(_253);
            // %255 = fmul fast float %254, 0x40191C0D60000000
            float _255 = _254 * 6.277394771575928f;
            // %256 = call float @dx.op.unary.f32(i32 21, float %255)  ; Exp(value)
            float _256 = exp2(_255);
            // %257 = fmul fast float %256, 1.000000e+02
            float _257 = _256 * 100.0f;
            // %258 = call float @dx.op.unary.f32(i32 7, float %232)  ; Saturate(value)
            float _258 = saturate(_232);
            // %259 = call float @dx.op.unary.f32(i32 23, float %258)  ; Log(value)
            float _259 = log2(_258);
            // %260 = fmul fast float %259, 0x3F89F9B580000000
            float _260 = _259 * 0.012683313339948654f;
            // %261 = call float @dx.op.unary.f32(i32 21, float %260)  ; Exp(value)
            float _261 = exp2(_260);
            // %262 = fadd fast float %261, -8.359375e-01
            float _262 = _261 + -0.8359375f;
            // %263 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %262)  ; FMax(a,b)
            float _263 = max(0.0f, _262);
            // %264 = fmul fast float %261, 1.868750e+01
            float _264 = _261 * 18.6875f;
            // %265 = fsub fast float 0x4032DA0000000000, %264
            float _265 = 18.8515625f - _264;
            // %266 = fdiv fast float %263, %265
            float _266 = _263 / _265;
            // %267 = call float @dx.op.unary.f32(i32 23, float %266)  ; Log(value)
            float _267 = log2(_266);
            // %268 = fmul fast float %267, 0x40191C0D60000000
            float _268 = _267 * 6.277394771575928f;
            // %269 = call float @dx.op.unary.f32(i32 21, float %268)  ; Exp(value)
            float _269 = exp2(_268);
            // %270 = fmul fast float %269, 1.000000e+02
            float _270 = _269 * 100.0f;
            // %271 = fmul fast float %244, 0x4069E33340000000
            float _271 = _244 * 207.10000610351562f;
            // %272 = call float @dx.op.tertiary.f32(i32 46, float 0xBFF53B6460000000, float %257, float %271)  ; FMad(a,b,c)
            float _272 = mad(-1.3270000219345093f, _257, _271);
            // %273 = call float @dx.op.tertiary.f32(i32 46, float 0x3FCA7EF9E0000000, float %270, float %272)  ; FMad(a,b,c)
            float _273 = mad(0.2070000022649765f, _270, _272);
            // %274 = fmul fast float %244, 3.650000e+01
            float _274 = _244 * 36.5f;
            // %275 = call float @dx.op.tertiary.f32(i32 46, float 0x3FE5CAC080000000, float %257, float %274)  ; FMad(a,b,c)
            float _275 = mad(0.6809999942779541f, _257, _274);
            // %276 = call float @dx.op.tertiary.f32(i32 46, float 0xBFA70A3D80000000, float %270, float %275)  ; FMad(a,b,c)
            float _276 = mad(-0.04500000178813934f, _270, _275);
            // %277 = fmul fast float %244, 0xC0139999A0000000
            float _277 = _244 * -4.900000095367432f;
            // %278 = call float @dx.op.tertiary.f32(i32 46, float 0xBFA99999A0000000, float %257, float %277)  ; FMad(a,b,c)
            float _278 = mad(-0.05000000074505806f, _257, _277);
            // %279 = call float @dx.op.tertiary.f32(i32 46, float 0x3FF3020C40000000, float %270, float %278)  ; FMad(a,b,c)
            float _279 = mad(1.187999963760376f, _270, _278);
            // %280 = fmul fast float %273, 0x4009ED81A0000000
            float _280 = _273 * 3.2409698963165283f;
            // %281 = call float @dx.op.tertiary.f32(i32 46, float 0xBFF8991F20000000, float %276, float %280)  ; FMad(a,b,c)
            float _281 = mad(-1.5373831987380981f, _276, _280);
            // %282 = call float @dx.op.tertiary.f32(i32 46, float 0xBFDFE93D40000000, float %279, float %281)  ; FMad(a,b,c)
            float _282 = mad(-0.49861079454421997f, _279, _281);
            // %283 = fmul fast float %273, 0xBFEF040B60000000
            float _283 = _273 * -0.9692437052726746f;
            // %284 = call float @dx.op.tertiary.f32(i32 46, float 0x3FFE03F6C0000000, float %276, float %283)  ; FMad(a,b,c)
            float _284 = mad(1.8759677410125732f, _276, _283);
            // %285 = call float @dx.op.tertiary.f32(i32 46, float 0x3FA546B5A0000000, float %279, float %284)  ; FMad(a,b,c)
            float _285 = mad(0.041555095463991165f, _279, _284);
            // %286 = fmul fast float %273, 0x3FAC7B8B60000000
            float _286 = _273 * 0.055630069226026535f;
            // %287 = call float @dx.op.tertiary.f32(i32 46, float 0xBFCA1BE9C0000000, float %276, float %286)  ; FMad(a,b,c)
            float _287 = mad(-0.2039768397808075f, _276, _286);
            // %288 = call float @dx.op.tertiary.f32(i32 46, float 0x3FF0E95AE0000000, float %279, float %287)  ; FMad(a,b,c)
            float _288 = mad(1.0569714307785034f, _279, _287);
            _290 = _282;
            _291 = _285;
            _292 = _288;
            // fn:converge 130 => 289
          }
          // fn:start 289
          // fn:pending 656
          // %293 = fcmp fast oeq float %53, 1.000000e+00
          bool _293 = ((_49.w) == 1.0f);
          do {
            if (_293) {
              // fn:start 294
              // fn:pending 656, 649
              // %296 = extractvalue %dx.types.CBufRet.f32 %295, 1
              // float _296 = HDRMapping_010y;
              // %297 = fmul fast float %290, 0x3FE413B180000000
              float _297 = _290 * 0.627403974533081f;
              // %298 = call float @dx.op.tertiary.f32(i32 46, float 0x3FD512F4C0000000, float %291, float %297)  ; FMad(a,b,c)
              float _298 = mad(0.3292819857597351f, _291, _297);
              // %299 = call float @dx.op.tertiary.f32(i32 46, float 0x3FA62D3340000000, float %292, float %298)  ; FMad(a,b,c)
              float _299 = mad(0.04331360012292862f, _292, _298);
              // %300 = fmul fast float %290, 0x3FB1B05740000000
              float _300 = _290 * 0.06909699738025665f;
              // %301 = call float @dx.op.tertiary.f32(i32 46, float 0x3FED6CDF20000000, float %291, float %300)  ; FMad(a,b,c)
              float _301 = mad(0.9195399880409241f, _291, _300);
              // %302 = call float @dx.op.tertiary.f32(i32 46, float 0x3F87448A80000000, float %292, float %301)  ; FMad(a,b,c)
              float _302 = mad(0.011361200362443924f, _292, _301);
              // %303 = fmul fast float %290, 0x3F90C8F5A0000000
              float _303 = _290 * 0.01639159955084324f;
              // %304 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB6880880000000, float %291, float %303)  ; FMad(a,b,c)
              float _304 = mad(0.08801320195198059f, _291, _303);
              // %305 = call float @dx.op.tertiary.f32(i32 46, float 0x3FECA8B6E0000000, float %292, float %304)  ; FMad(a,b,c)
              float _305 = mad(0.8955950140953064f, _292, _304);
              // %307 = extractvalue %dx.types.CBufRet.f32 %306, 1
              // float _307 = HDRMapping_008y;
              // %308 = fsub fast float %290, %299
              float _308 = _290 - _299;
              // %309 = fsub fast float %291, %302
              float _309 = _291 - _302;
              // %310 = fsub fast float %292, %305
              float _310 = _292 - _305;
              // %311 = fmul fast float %307, %308
              float _311 = (HDRMapping_008y) * _308;
              // %312 = fmul fast float %307, %309
              float _312 = (HDRMapping_008y) * _309;
              // %313 = fmul fast float %307, %310
              float _313 = (HDRMapping_008y) * _310;
              // %314 = fadd fast float %311, %299
              float _314 = _311 + _299;
              // %315 = fadd fast float %312, %302
              float _315 = _312 + _302;
              // %316 = fadd fast float %313, %305
              float _316 = _313 + _305;
              // %318 = extractvalue %dx.types.CBufRet.f32 %317, 1
              // float _318 = HDRMapping_007y;
              // %319 = call float @dx.op.unary.f32(i32 23, float %314)  ; Log(value)
              float _319 = log2(_314);
              // %320 = call float @dx.op.unary.f32(i32 23, float %315)  ; Log(value)
              float _320 = log2(_315);
              // %321 = call float @dx.op.unary.f32(i32 23, float %316)  ; Log(value)
              float _321 = log2(_316);
              // %322 = fmul fast float %319, %318
              float _322 = _319 * (HDRMapping_007y);
              // %323 = fmul fast float %320, %318
              float _323 = _320 * (HDRMapping_007y);
              // %324 = fmul fast float %321, %318
              float _324 = _321 * (HDRMapping_007y);
              // %325 = call float @dx.op.unary.f32(i32 21, float %322)  ; Exp(value)
              float _325 = exp2(_322);
              // %326 = call float @dx.op.unary.f32(i32 21, float %323)  ; Exp(value)
              float _326 = exp2(_323);
              // %327 = call float @dx.op.unary.f32(i32 21, float %324)  ; Exp(value)
              float _327 = exp2(_324);
              // %328 = fdiv fast float 1.000000e+04, %296
              float _328 = 10000.0f / (HDRMapping_010y);
              // %329 = fdiv fast float %325, %328
              float _329 = _325 / _328;
              // %330 = fdiv fast float %326, %328
              float _330 = _326 / _328;
              // %331 = fdiv fast float %327, %328
              float _331 = _327 / _328;
              // %332 = call float @dx.op.unary.f32(i32 7, float %329)  ; Saturate(value)
              float _332 = saturate(_329);
              // %333 = call float @dx.op.unary.f32(i32 7, float %330)  ; Saturate(value)
              float _333 = saturate(_330);
              // %334 = call float @dx.op.unary.f32(i32 7, float %331)  ; Saturate(value)
              float _334 = saturate(_331);
              // %335 = call float @dx.op.unary.f32(i32 23, float %332)  ; Log(value)
              float _335 = log2(_332);
              // %336 = fmul fast float %335, 0x3FC4640000000000
              float _336 = _335 * 0.1593017578125f;
              // %337 = call float @dx.op.unary.f32(i32 21, float %336)  ; Exp(value)
              float _337 = exp2(_336);
              // %338 = fmul fast float %337, 0x4032DA0000000000
              float _338 = _337 * 18.8515625f;
              // %339 = fadd fast float %338, 8.359375e-01
              float _339 = _338 + 0.8359375f;
              // %340 = fmul fast float %337, 1.868750e+01
              float _340 = _337 * 18.6875f;
              // %341 = fadd fast float %340, 1.000000e+00
              float _341 = _340 + 1.0f;
              // %342 = fdiv fast float %339, %341
              float _342 = _339 / _341;
              // %343 = call float @dx.op.unary.f32(i32 23, float %342)  ; Log(value)
              float _343 = log2(_342);
              // %344 = fmul fast float %343, 7.884375e+01
              float _344 = _343 * 78.84375f;
              // %345 = call float @dx.op.unary.f32(i32 21, float %344)  ; Exp(value)
              float _345 = exp2(_344);
              // %346 = call float @dx.op.unary.f32(i32 7, float %345)  ; Saturate(value)
              float _346 = saturate(_345);
              // %347 = call float @dx.op.unary.f32(i32 23, float %333)  ; Log(value)
              float _347 = log2(_333);
              // %348 = fmul fast float %347, 0x3FC4640000000000
              float _348 = _347 * 0.1593017578125f;
              // %349 = call float @dx.op.unary.f32(i32 21, float %348)  ; Exp(value)
              float _349 = exp2(_348);
              // %350 = fmul fast float %349, 0x4032DA0000000000
              float _350 = _349 * 18.8515625f;
              // %351 = fadd fast float %350, 8.359375e-01
              float _351 = _350 + 0.8359375f;
              // %352 = fmul fast float %349, 1.868750e+01
              float _352 = _349 * 18.6875f;
              // %353 = fadd fast float %352, 1.000000e+00
              float _353 = _352 + 1.0f;
              // %354 = fdiv fast float %351, %353
              float _354 = _351 / _353;
              // %355 = call float @dx.op.unary.f32(i32 23, float %354)  ; Log(value)
              float _355 = log2(_354);
              // %356 = fmul fast float %355, 7.884375e+01
              float _356 = _355 * 78.84375f;
              // %357 = call float @dx.op.unary.f32(i32 21, float %356)  ; Exp(value)
              float _357 = exp2(_356);
              // %358 = call float @dx.op.unary.f32(i32 7, float %357)  ; Saturate(value)
              float _358 = saturate(_357);
              // %359 = call float @dx.op.unary.f32(i32 23, float %334)  ; Log(value)
              float _359 = log2(_334);
              // %360 = fmul fast float %359, 0x3FC4640000000000
              float _360 = _359 * 0.1593017578125f;
              // %361 = call float @dx.op.unary.f32(i32 21, float %360)  ; Exp(value)
              float _361 = exp2(_360);
              // %362 = fmul fast float %361, 0x4032DA0000000000
              float _362 = _361 * 18.8515625f;
              // %363 = fadd fast float %362, 8.359375e-01
              float _363 = _362 + 0.8359375f;
              // %364 = fmul fast float %361, 1.868750e+01
              float _364 = _361 * 18.6875f;
              // %365 = fadd fast float %364, 1.000000e+00
              float _365 = _364 + 1.0f;
              // %366 = fdiv fast float %363, %365
              float _366 = _363 / _365;
              // %367 = call float @dx.op.unary.f32(i32 23, float %366)  ; Log(value)
              float _367 = log2(_366);
              // %368 = fmul fast float %367, 7.884375e+01
              float _368 = _367 * 78.84375f;
              // %369 = call float @dx.op.unary.f32(i32 21, float %368)  ; Exp(value)
              float _369 = exp2(_368);
              // %370 = call float @dx.op.unary.f32(i32 7, float %369)  ; Saturate(value)
              float _370 = saturate(_369);
              // %372 = extractvalue %dx.types.CBufRet.i32 %371, 0
              // uint _372 = HDRMapping_007x;
              // %373 = and i32 %372, 2
              int _373 = ((uint)(HDRMapping_007x)) & 2;
              // %374 = icmp eq i32 %373, 0
              bool _374 = (_373 == 0);
              _650 = _346;
              _651 = _358;
              _652 = _370;
              if (!_374) {
                // fn:start 375
                // fn:pending 656, 649
                // %377 = extractvalue %dx.types.CBufRet.f32 %376, 2
                // float _377 = HDRMapping_000z;
                // %378 = fmul fast float %377, 0x3F1A36E2E0000000
                float _378 = (HDRMapping_000z) * 9.999999747378752e-05f;
                // %379 = call float @dx.op.unary.f32(i32 7, float %378)  ; Saturate(value)
                float _379 = saturate(_378);
                // %380 = call float @dx.op.unary.f32(i32 23, float %379)  ; Log(value)
                float _380 = log2(_379);
                // %381 = fmul fast float %380, 0x3FC4640000000000
                float _381 = _380 * 0.1593017578125f;
                // %382 = call float @dx.op.unary.f32(i32 21, float %381)  ; Exp(value)
                float _382 = exp2(_381);
                // %383 = fmul fast float %382, 0x4032DA0000000000
                float _383 = _382 * 18.8515625f;
                // %384 = fadd fast float %383, 8.359375e-01
                float _384 = _383 + 0.8359375f;
                // %385 = fmul fast float %382, 1.868750e+01
                float _385 = _382 * 18.6875f;
                // %386 = fadd fast float %385, 1.000000e+00
                float _386 = _385 + 1.0f;
                // %387 = fdiv fast float %384, %386
                float _387 = _384 / _386;
                // %388 = call float @dx.op.unary.f32(i32 23, float %387)  ; Log(value)
                float _388 = log2(_387);
                // %389 = fmul fast float %388, 7.884375e+01
                float _389 = _388 * 78.84375f;
                // %390 = call float @dx.op.unary.f32(i32 21, float %389)  ; Exp(value)
                float _390 = exp2(_389);
                // %391 = call float @dx.op.unary.f32(i32 7, float %390)  ; Saturate(value)
                float _391 = saturate(_390);
                // %392 = extractvalue %dx.types.CBufRet.f32 %376, 3
                // float _392 = HDRMapping_000w;
                // %393 = fmul fast float %392, 0x3F1A36E2E0000000
                float _393 = (HDRMapping_000w) * 9.999999747378752e-05f;
                // %394 = call float @dx.op.unary.f32(i32 7, float %393)  ; Saturate(value)
                float _394 = saturate(_393);
                // %395 = call float @dx.op.unary.f32(i32 23, float %394)  ; Log(value)
                float _395 = log2(_394);
                // %396 = fmul fast float %395, 0x3FC4640000000000
                float _396 = _395 * 0.1593017578125f;
                // %397 = call float @dx.op.unary.f32(i32 21, float %396)  ; Exp(value)
                float _397 = exp2(_396);
                // %398 = fmul fast float %397, 0x4032DA0000000000
                float _398 = _397 * 18.8515625f;
                // %399 = fadd fast float %398, 8.359375e-01
                float _399 = _398 + 0.8359375f;
                // %400 = fmul fast float %397, 1.868750e+01
                float _400 = _397 * 18.6875f;
                // %401 = fadd fast float %400, 1.000000e+00
                float _401 = _400 + 1.0f;
                // %402 = fdiv fast float %399, %401
                float _402 = _399 / _401;
                // %403 = call float @dx.op.unary.f32(i32 23, float %402)  ; Log(value)
                float _403 = log2(_402);
                // %404 = fmul fast float %403, 7.884375e+01
                float _404 = _403 * 78.84375f;
                // %405 = call float @dx.op.unary.f32(i32 21, float %404)  ; Exp(value)
                float _405 = exp2(_404);
                // %406 = call float @dx.op.unary.f32(i32 7, float %405)  ; Saturate(value)
                float _406 = saturate(_405);
                // %407 = fsub fast float %391, %406
                float _407 = _391 - _406;
                // %408 = fdiv fast float %346, %391
                float _408 = _346 / _391;
                // %409 = fdiv fast float %358, %391
                float _409 = _358 / _391;
                // %410 = fdiv fast float %370, %391
                float _410 = _370 / _391;
                // %411 = call float @dx.op.unary.f32(i32 7, float %408)  ; Saturate(value)
                float _411 = saturate(_408);
                // %412 = call float @dx.op.unary.f32(i32 7, float %409)  ; Saturate(value)
                float _412 = saturate(_409);
                // %413 = call float @dx.op.unary.f32(i32 7, float %410)  ; Saturate(value)
                float _413 = saturate(_410);
                // %414 = fmul fast float %411, %391
                float _414 = _411 * _391;
                // %415 = fmul fast float %412, %391
                float _415 = _412 * _391;
                // %416 = fmul fast float %413, %391
                float _416 = _413 * _391;
                // %417 = fadd fast float %411, %411
                float _417 = _411 + _411;
                // %418 = fsub fast float 2.000000e+00, %417
                float _418 = 2.0f - _417;
                // %419 = fmul fast float %418, %407
                float _419 = _418 * _407;
                // %420 = fadd fast float %419, %414
                float _420 = _419 + _414;
                // %421 = fmul fast float %420, %411
                float _421 = _420 * _411;
                // %422 = fadd fast float %412, %412
                float _422 = _412 + _412;
                // %423 = fsub fast float 2.000000e+00, %422
                float _423 = 2.0f - _422;
                // %424 = fmul fast float %423, %407
                float _424 = _423 * _407;
                // %425 = fadd fast float %424, %415
                float _425 = _424 + _415;
                // %426 = fmul fast float %425, %412
                float _426 = _425 * _412;
                // %427 = fadd fast float %413, %413
                float _427 = _413 + _413;
                // %428 = fsub fast float 2.000000e+00, %427
                float _428 = 2.0f - _427;
                // %429 = fmul fast float %428, %407
                float _429 = _428 * _407;
                // %430 = fadd fast float %429, %416
                float _430 = _429 + _416;
                // %431 = fmul fast float %430, %413
                float _431 = _430 * _413;
                // %432 = call float @dx.op.binary.f32(i32 36, float %421, float %346)  ; FMin(a,b)
                float _432 = min(_421, _346);
                // %433 = call float @dx.op.binary.f32(i32 36, float %426, float %358)  ; FMin(a,b)
                float _433 = min(_426, _358);
                // %434 = call float @dx.op.binary.f32(i32 36, float %431, float %370)  ; FMin(a,b)
                float _434 = min(_431, _370);
                _650 = _432;
                _651 = _433;
                _652 = _434;
                // fn:converge 375 => 649
              }
            } else {
              // fn:start 435
              // fn:pending 656, 649
              _439 = false;
              do {
                if (_124) {
                  // fn:start 436
                  // fn:pending 656, 649, 438
                  // %437 = xor i1 %123, true
                  bool _437 = 437 ^ _123;
                  _439 = _437;
                  // fn:converge 436 => 438
                }
                // fn:start 438
                // fn:pending 656, 649
                // %440 = zext i16 %32 to i32
                int _440 = int(_32);
                // %441 = zext i16 %37 to i32
                int _441 = int(_37);
                // %442 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
                // auto _442 = _1;
                // %443 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %442, i32 undef, i32 %440, i32 %441, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
                float4 _443 = RWResult.Load(int2(_440, _441));
                // %444 = extractvalue %dx.types.ResRet.f32 %443, 0
                // float _444 = _443.x;
                // %445 = extractvalue %dx.types.ResRet.f32 %443, 1
                // float _445 = _443.y;
                // %446 = extractvalue %dx.types.ResRet.f32 %443, 2
                // float _446 = _443.z;
                // %447 = call float @dx.op.unary.f32(i32 7, float %444)  ; Saturate(value)
                float _447 = saturate((_443.x));
                // %448 = call float @dx.op.unary.f32(i32 7, float %445)  ; Saturate(value)
                float _448 = saturate((_443.y));
                // %449 = call float @dx.op.unary.f32(i32 7, float %446)  ; Saturate(value)
                float _449 = saturate((_443.z));
                // %450 = call float @dx.op.unary.f32(i32 23, float %447)  ; Log(value)
                float _450 = log2(_447);
                // %451 = call float @dx.op.unary.f32(i32 23, float %448)  ; Log(value)
                float _451 = log2(_448);
                // %452 = call float @dx.op.unary.f32(i32 23, float %449)  ; Log(value)
                float _452 = log2(_449);
                // %453 = fmul fast float %450, 0x3F89F9B580000000
                float _453 = _450 * 0.012683313339948654f;
                // %454 = fmul fast float %451, 0x3F89F9B580000000
                float _454 = _451 * 0.012683313339948654f;
                // %455 = fmul fast float %452, 0x3F89F9B580000000
                float _455 = _452 * 0.012683313339948654f;
                // %456 = call float @dx.op.unary.f32(i32 21, float %453)  ; Exp(value)
                float _456 = exp2(_453);
                // %457 = call float @dx.op.unary.f32(i32 21, float %454)  ; Exp(value)
                float _457 = exp2(_454);
                // %458 = call float @dx.op.unary.f32(i32 21, float %455)  ; Exp(value)
                float _458 = exp2(_455);
                // %459 = fadd fast float %456, -8.359375e-01
                float _459 = _456 + -0.8359375f;
                // %460 = fadd fast float %457, -8.359375e-01
                float _460 = _457 + -0.8359375f;
                // %461 = fadd fast float %458, -8.359375e-01
                float _461 = _458 + -0.8359375f;
                // %462 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %459)  ; FMax(a,b)
                float _462 = max(0.0f, _459);
                // %463 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %460)  ; FMax(a,b)
                float _463 = max(0.0f, _460);
                // %464 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %461)  ; FMax(a,b)
                float _464 = max(0.0f, _461);
                // %465 = fmul fast float %456, 1.868750e+01
                float _465 = _456 * 18.6875f;
                // %466 = fmul fast float %457, 1.868750e+01
                float _466 = _457 * 18.6875f;
                // %467 = fmul fast float %458, 1.868750e+01
                float _467 = _458 * 18.6875f;
                // %468 = fsub fast float 0x4032DA0000000000, %465
                float _468 = 18.8515625f - _465;
                // %469 = fsub fast float 0x4032DA0000000000, %466
                float _469 = 18.8515625f - _466;
                // %470 = fsub fast float 0x4032DA0000000000, %467
                float _470 = 18.8515625f - _467;
                // %471 = fdiv fast float %462, %468
                float _471 = _462 / _468;
                // %472 = fdiv fast float %463, %469
                float _472 = _463 / _469;
                // %473 = fdiv fast float %464, %470
                float _473 = _464 / _470;
                // %474 = call float @dx.op.unary.f32(i32 23, float %471)  ; Log(value)
                float _474 = log2(_471);
                // %475 = call float @dx.op.unary.f32(i32 23, float %472)  ; Log(value)
                float _475 = log2(_472);
                // %476 = call float @dx.op.unary.f32(i32 23, float %473)  ; Log(value)
                float _476 = log2(_473);
                // %477 = fmul fast float %474, 0x40191C0D60000000
                float _477 = _474 * 6.277394771575928f;
                // %478 = fmul fast float %475, 0x40191C0D60000000
                float _478 = _475 * 6.277394771575928f;
                // %479 = fmul fast float %476, 0x40191C0D60000000
                float _479 = _476 * 6.277394771575928f;
                // %480 = call float @dx.op.unary.f32(i32 21, float %477)  ; Exp(value)
                float _480 = exp2(_477);
                // %481 = call float @dx.op.unary.f32(i32 21, float %478)  ; Exp(value)
                float _481 = exp2(_478);
                // %482 = call float @dx.op.unary.f32(i32 21, float %479)  ; Exp(value)
                float _482 = exp2(_479);
                // %484 = extractvalue %dx.types.CBufRet.f32 %483, 1
                // float _484 = HDRMapping_010y;
                // %485 = fdiv fast float 1.000000e+04, %484
                float _485 = 10000.0f / (HDRMapping_010y);
                // %486 = fmul fast float %485, %480
                float _486 = _485 * _480;
                // %487 = fmul fast float %485, %481
                float _487 = _485 * _481;
                // %488 = fmul fast float %485, %482
                float _488 = _485 * _482;
                // %489 = fmul fast float %486, 0x3FFA915F00000000
                float _489 = _486 * 1.6604909896850586f;
                // %490 = call float @dx.op.tertiary.f32(i32 46, float 0xBFE2CDF260000000, float %487, float %489)  ; FMad(a,b,c)
                float _490 = mad(-0.5876399874687195f, _487, _489);
                // %491 = call float @dx.op.tertiary.f32(i32 46, float 0xBFB2A668C0000000, float %488, float %490)  ; FMad(a,b,c)
                float _491 = mad(-0.07285170257091522f, _488, _490);
                // %492 = fmul fast float %486, 0xBFBFE28240000000
                float _492 = _486 * -0.124549999833107f;
                // %493 = call float @dx.op.tertiary.f32(i32 46, float 0x3FF2205BC0000000, float %487, float %492)  ; FMad(a,b,c)
                float _493 = mad(1.1328999996185303f, _487, _492);
                // %494 = call float @dx.op.tertiary.f32(i32 46, float 0xBF8118C1A0000000, float %488, float %493)  ; FMad(a,b,c)
                float _494 = mad(-0.00834800023585558f, _488, _493);
                // %495 = fmul fast float %486, 0xBF92962D00000000
                float _495 = _486 * -0.018151000142097473f;
                // %496 = call float @dx.op.tertiary.f32(i32 46, float 0xBFB9BF8BA0000000, float %487, float %495)  ; FMad(a,b,c)
                float _496 = mad(-0.10057900100946426f, _487, _495);
                // %497 = call float @dx.op.tertiary.f32(i32 46, float 0x3FF1E65160000000, float %488, float %496)  ; FMad(a,b,c)
                float _497 = mad(1.1187299489974976f, _488, _496);
                _506 = _290;
                _507 = _291;
                _508 = _292;
                do {
                  if (!_439) {
                    // fn:start 498
                    // fn:pending 656, 649, 505
                    // %499 = fsub fast float %290, %491
                    float _499 = _290 - _491;
                    // %500 = fsub fast float %291, %494
                    float _500 = _291 - _494;
                    // %501 = fsub fast float %292, %497
                    float _501 = _292 - _497;
                    // %502 = fmul fast float %499, %53
                    float _502 = _499 * (_49.w);
                    // %503 = fmul fast float %500, %53
                    float _503 = _500 * (_49.w);
                    // %504 = fmul fast float %501, %53
                    float _504 = _501 * (_49.w);
                    _506 = _502;
                    _507 = _503;
                    _508 = _504;
                    // fn:converge 498 => 505
                  }
                  // fn:start 505
                  // fn:pending 656, 649
                  // %509 = fadd fast float %506, %491
                  float _509 = _506 + _491;
                  // %510 = fadd fast float %507, %494
                  float _510 = _507 + _494;
                  // %511 = fadd fast float %508, %497
                  float _511 = _508 + _497;
                  // %512 = fmul fast float %509, 0x3FE413B180000000
                  float _512 = _509 * 0.627403974533081f;
                  // %513 = call float @dx.op.tertiary.f32(i32 46, float 0x3FD512F4C0000000, float %510, float %512)  ; FMad(a,b,c)
                  float _513 = mad(0.3292819857597351f, _510, _512);
                  // %514 = call float @dx.op.tertiary.f32(i32 46, float 0x3FA62D3340000000, float %511, float %513)  ; FMad(a,b,c)
                  float _514 = mad(0.04331360012292862f, _511, _513);
                  // %515 = fmul fast float %509, 0x3FB1B05740000000
                  float _515 = _509 * 0.06909699738025665f;
                  // %516 = call float @dx.op.tertiary.f32(i32 46, float 0x3FED6CDF20000000, float %510, float %515)  ; FMad(a,b,c)
                  float _516 = mad(0.9195399880409241f, _510, _515);
                  // %517 = call float @dx.op.tertiary.f32(i32 46, float 0x3F87448A80000000, float %511, float %516)  ; FMad(a,b,c)
                  float _517 = mad(0.011361200362443924f, _511, _516);
                  // %518 = fmul fast float %509, 0x3F90C8F5A0000000
                  float _518 = _509 * 0.01639159955084324f;
                  // %519 = call float @dx.op.tertiary.f32(i32 46, float 0x3FB6880880000000, float %510, float %518)  ; FMad(a,b,c)
                  float _519 = mad(0.08801320195198059f, _510, _518);
                  // %520 = call float @dx.op.tertiary.f32(i32 46, float 0x3FECA8B6E0000000, float %511, float %519)  ; FMad(a,b,c)
                  float _520 = mad(0.8955950140953064f, _511, _519);
                  // %522 = extractvalue %dx.types.CBufRet.f32 %521, 1
                  // float _522 = HDRMapping_008y;
                  // %523 = fsub fast float %509, %514
                  float _523 = _509 - _514;
                  // %524 = fsub fast float %510, %517
                  float _524 = _510 - _517;
                  // %525 = fsub fast float %511, %520
                  float _525 = _511 - _520;
                  // %526 = fmul fast float %522, %523
                  float _526 = (HDRMapping_008y) * _523;
                  // %527 = fmul fast float %522, %524
                  float _527 = (HDRMapping_008y) * _524;
                  // %528 = fmul fast float %522, %525
                  float _528 = (HDRMapping_008y) * _525;
                  // %529 = fadd fast float %526, %514
                  float _529 = _526 + _514;
                  // %530 = fadd fast float %527, %517
                  float _530 = _527 + _517;
                  // %531 = fadd fast float %528, %520
                  float _531 = _528 + _520;
                  // %533 = extractvalue %dx.types.CBufRet.f32 %532, 1
                  // float _533 = HDRMapping_007y;
                  // %534 = call float @dx.op.unary.f32(i32 23, float %529)  ; Log(value)
                  float _534 = log2(_529);
                  // %535 = call float @dx.op.unary.f32(i32 23, float %530)  ; Log(value)
                  float _535 = log2(_530);
                  // %536 = call float @dx.op.unary.f32(i32 23, float %531)  ; Log(value)
                  float _536 = log2(_531);
                  // %537 = fmul fast float %534, %533
                  float _537 = _534 * (HDRMapping_007y);
                  // %538 = fmul fast float %535, %533
                  float _538 = _535 * (HDRMapping_007y);
                  // %539 = fmul fast float %536, %533
                  float _539 = _536 * (HDRMapping_007y);
                  // %540 = call float @dx.op.unary.f32(i32 21, float %537)  ; Exp(value)
                  float _540 = exp2(_537);
                  // %541 = call float @dx.op.unary.f32(i32 21, float %538)  ; Exp(value)
                  float _541 = exp2(_538);
                  // %542 = call float @dx.op.unary.f32(i32 21, float %539)  ; Exp(value)
                  float _542 = exp2(_539);
                  // %543 = fdiv fast float %540, %485
                  float _543 = _540 / _485;
                  // %544 = fdiv fast float %541, %485
                  float _544 = _541 / _485;
                  // %545 = fdiv fast float %542, %485
                  float _545 = _542 / _485;
                  // %546 = call float @dx.op.unary.f32(i32 7, float %543)  ; Saturate(value)
                  float _546 = saturate(_543);
                  // %547 = call float @dx.op.unary.f32(i32 7, float %544)  ; Saturate(value)
                  float _547 = saturate(_544);
                  // %548 = call float @dx.op.unary.f32(i32 7, float %545)  ; Saturate(value)
                  float _548 = saturate(_545);
                  // %549 = call float @dx.op.unary.f32(i32 23, float %546)  ; Log(value)
                  float _549 = log2(_546);
                  // %550 = fmul fast float %549, 0x3FC4640000000000
                  float _550 = _549 * 0.1593017578125f;
                  // %551 = call float @dx.op.unary.f32(i32 21, float %550)  ; Exp(value)
                  float _551 = exp2(_550);
                  // %552 = fmul fast float %551, 0x4032DA0000000000
                  float _552 = _551 * 18.8515625f;
                  // %553 = fadd fast float %552, 8.359375e-01
                  float _553 = _552 + 0.8359375f;
                  // %554 = fmul fast float %551, 1.868750e+01
                  float _554 = _551 * 18.6875f;
                  // %555 = fadd fast float %554, 1.000000e+00
                  float _555 = _554 + 1.0f;
                  // %556 = fdiv fast float %553, %555
                  float _556 = _553 / _555;
                  // %557 = call float @dx.op.unary.f32(i32 23, float %556)  ; Log(value)
                  float _557 = log2(_556);
                  // %558 = fmul fast float %557, 7.884375e+01
                  float _558 = _557 * 78.84375f;
                  // %559 = call float @dx.op.unary.f32(i32 21, float %558)  ; Exp(value)
                  float _559 = exp2(_558);
                  // %560 = call float @dx.op.unary.f32(i32 7, float %559)  ; Saturate(value)
                  float _560 = saturate(_559);
                  // %561 = call float @dx.op.unary.f32(i32 23, float %547)  ; Log(value)
                  float _561 = log2(_547);
                  // %562 = fmul fast float %561, 0x3FC4640000000000
                  float _562 = _561 * 0.1593017578125f;
                  // %563 = call float @dx.op.unary.f32(i32 21, float %562)  ; Exp(value)
                  float _563 = exp2(_562);
                  // %564 = fmul fast float %563, 0x4032DA0000000000
                  float _564 = _563 * 18.8515625f;
                  // %565 = fadd fast float %564, 8.359375e-01
                  float _565 = _564 + 0.8359375f;
                  // %566 = fmul fast float %563, 1.868750e+01
                  float _566 = _563 * 18.6875f;
                  // %567 = fadd fast float %566, 1.000000e+00
                  float _567 = _566 + 1.0f;
                  // %568 = fdiv fast float %565, %567
                  float _568 = _565 / _567;
                  // %569 = call float @dx.op.unary.f32(i32 23, float %568)  ; Log(value)
                  float _569 = log2(_568);
                  // %570 = fmul fast float %569, 7.884375e+01
                  float _570 = _569 * 78.84375f;
                  // %571 = call float @dx.op.unary.f32(i32 21, float %570)  ; Exp(value)
                  float _571 = exp2(_570);
                  // %572 = call float @dx.op.unary.f32(i32 7, float %571)  ; Saturate(value)
                  float _572 = saturate(_571);
                  // %573 = call float @dx.op.unary.f32(i32 23, float %548)  ; Log(value)
                  float _573 = log2(_548);
                  // %574 = fmul fast float %573, 0x3FC4640000000000
                  float _574 = _573 * 0.1593017578125f;
                  // %575 = call float @dx.op.unary.f32(i32 21, float %574)  ; Exp(value)
                  float _575 = exp2(_574);
                  // %576 = fmul fast float %575, 0x4032DA0000000000
                  float _576 = _575 * 18.8515625f;
                  // %577 = fadd fast float %576, 8.359375e-01
                  float _577 = _576 + 0.8359375f;
                  // %578 = fmul fast float %575, 1.868750e+01
                  float _578 = _575 * 18.6875f;
                  // %579 = fadd fast float %578, 1.000000e+00
                  float _579 = _578 + 1.0f;
                  // %580 = fdiv fast float %577, %579
                  float _580 = _577 / _579;
                  // %581 = call float @dx.op.unary.f32(i32 23, float %580)  ; Log(value)
                  float _581 = log2(_580);
                  // %582 = fmul fast float %581, 7.884375e+01
                  float _582 = _581 * 78.84375f;
                  // %583 = call float @dx.op.unary.f32(i32 21, float %582)  ; Exp(value)
                  float _583 = exp2(_582);
                  // %584 = call float @dx.op.unary.f32(i32 7, float %583)  ; Saturate(value)
                  float _584 = saturate(_583);
                  // %586 = extractvalue %dx.types.CBufRet.i32 %585, 0
                  // uint _586 = HDRMapping_007x;
                  // %587 = and i32 %586, 2
                  int _587 = ((uint)(HDRMapping_007x)) & 2;
                  // %588 = icmp eq i32 %587, 0
                  bool _588 = (_587 == 0);
                  _650 = _560;
                  _651 = _572;
                  _652 = _584;
                  if (!_588) {
                    // fn:start 589
                    // fn:pending 656, 649
                    // %591 = extractvalue %dx.types.CBufRet.f32 %590, 2
                    // float _591 = HDRMapping_000z;
                    // %592 = fmul fast float %591, 0x3F1A36E2E0000000
                    float _592 = (HDRMapping_000z) * 9.999999747378752e-05f;
                    // %593 = call float @dx.op.unary.f32(i32 7, float %592)  ; Saturate(value)
                    float _593 = saturate(_592);
                    // %594 = call float @dx.op.unary.f32(i32 23, float %593)  ; Log(value)
                    float _594 = log2(_593);
                    // %595 = fmul fast float %594, 0x3FC4640000000000
                    float _595 = _594 * 0.1593017578125f;
                    // %596 = call float @dx.op.unary.f32(i32 21, float %595)  ; Exp(value)
                    float _596 = exp2(_595);
                    // %597 = fmul fast float %596, 0x4032DA0000000000
                    float _597 = _596 * 18.8515625f;
                    // %598 = fadd fast float %597, 8.359375e-01
                    float _598 = _597 + 0.8359375f;
                    // %599 = fmul fast float %596, 1.868750e+01
                    float _599 = _596 * 18.6875f;
                    // %600 = fadd fast float %599, 1.000000e+00
                    float _600 = _599 + 1.0f;
                    // %601 = fdiv fast float %598, %600
                    float _601 = _598 / _600;
                    // %602 = call float @dx.op.unary.f32(i32 23, float %601)  ; Log(value)
                    float _602 = log2(_601);
                    // %603 = fmul fast float %602, 7.884375e+01
                    float _603 = _602 * 78.84375f;
                    // %604 = call float @dx.op.unary.f32(i32 21, float %603)  ; Exp(value)
                    float _604 = exp2(_603);
                    // %605 = call float @dx.op.unary.f32(i32 7, float %604)  ; Saturate(value)
                    float _605 = saturate(_604);
                    // %606 = extractvalue %dx.types.CBufRet.f32 %590, 3
                    // float _606 = HDRMapping_000w;
                    // %607 = fmul fast float %606, 0x3F1A36E2E0000000
                    float _607 = (HDRMapping_000w) * 9.999999747378752e-05f;
                    // %608 = call float @dx.op.unary.f32(i32 7, float %607)  ; Saturate(value)
                    float _608 = saturate(_607);
                    // %609 = call float @dx.op.unary.f32(i32 23, float %608)  ; Log(value)
                    float _609 = log2(_608);
                    // %610 = fmul fast float %609, 0x3FC4640000000000
                    float _610 = _609 * 0.1593017578125f;
                    // %611 = call float @dx.op.unary.f32(i32 21, float %610)  ; Exp(value)
                    float _611 = exp2(_610);
                    // %612 = fmul fast float %611, 0x4032DA0000000000
                    float _612 = _611 * 18.8515625f;
                    // %613 = fadd fast float %612, 8.359375e-01
                    float _613 = _612 + 0.8359375f;
                    // %614 = fmul fast float %611, 1.868750e+01
                    float _614 = _611 * 18.6875f;
                    // %615 = fadd fast float %614, 1.000000e+00
                    float _615 = _614 + 1.0f;
                    // %616 = fdiv fast float %613, %615
                    float _616 = _613 / _615;
                    // %617 = call float @dx.op.unary.f32(i32 23, float %616)  ; Log(value)
                    float _617 = log2(_616);
                    // %618 = fmul fast float %617, 7.884375e+01
                    float _618 = _617 * 78.84375f;
                    // %619 = call float @dx.op.unary.f32(i32 21, float %618)  ; Exp(value)
                    float _619 = exp2(_618);
                    // %620 = call float @dx.op.unary.f32(i32 7, float %619)  ; Saturate(value)
                    float _620 = saturate(_619);
                    // %621 = fsub fast float %605, %620
                    float _621 = _605 - _620;
                    // %622 = fdiv fast float %560, %605
                    float _622 = _560 / _605;
                    // %623 = fdiv fast float %572, %605
                    float _623 = _572 / _605;
                    // %624 = fdiv fast float %584, %605
                    float _624 = _584 / _605;
                    // %625 = call float @dx.op.unary.f32(i32 7, float %622)  ; Saturate(value)
                    float _625 = saturate(_622);
                    // %626 = call float @dx.op.unary.f32(i32 7, float %623)  ; Saturate(value)
                    float _626 = saturate(_623);
                    // %627 = call float @dx.op.unary.f32(i32 7, float %624)  ; Saturate(value)
                    float _627 = saturate(_624);
                    // %628 = fmul fast float %625, %605
                    float _628 = _625 * _605;
                    // %629 = fmul fast float %626, %605
                    float _629 = _626 * _605;
                    // %630 = fmul fast float %627, %605
                    float _630 = _627 * _605;
                    // %631 = fadd fast float %625, %625
                    float _631 = _625 + _625;
                    // %632 = fsub fast float 2.000000e+00, %631
                    float _632 = 2.0f - _631;
                    // %633 = fmul fast float %632, %621
                    float _633 = _632 * _621;
                    // %634 = fadd fast float %633, %628
                    float _634 = _633 + _628;
                    // %635 = fmul fast float %634, %625
                    float _635 = _634 * _625;
                    // %636 = fadd fast float %626, %626
                    float _636 = _626 + _626;
                    // %637 = fsub fast float 2.000000e+00, %636
                    float _637 = 2.0f - _636;
                    // %638 = fmul fast float %637, %621
                    float _638 = _637 * _621;
                    // %639 = fadd fast float %638, %629
                    float _639 = _638 + _629;
                    // %640 = fmul fast float %639, %626
                    float _640 = _639 * _626;
                    // %641 = fadd fast float %627, %627
                    float _641 = _627 + _627;
                    // %642 = fsub fast float 2.000000e+00, %641
                    float _642 = 2.0f - _641;
                    // %643 = fmul fast float %642, %621
                    float _643 = _642 * _621;
                    // %644 = fadd fast float %643, %630
                    float _644 = _643 + _630;
                    // %645 = fmul fast float %644, %627
                    float _645 = _644 * _627;
                    // %646 = call float @dx.op.binary.f32(i32 36, float %635, float %560)  ; FMin(a,b)
                    float _646 = min(_635, _560);
                    // %647 = call float @dx.op.binary.f32(i32 36, float %640, float %572)  ; FMin(a,b)
                    float _647 = min(_640, _572);
                    // %648 = call float @dx.op.binary.f32(i32 36, float %645, float %584)  ; FMin(a,b)
                    float _648 = min(_645, _584);
                    _650 = _646;
                    _651 = _647;
                    _652 = _648;
                    // fn:converge 589 => 649
                  }
                } while (false);
              } while (false);
            }
            // fn:start 649
            // fn:pending 656
            // %653 = zext i16 %32 to i32
            int _653 = int(_32);
            // %654 = zext i16 %37 to i32
            int _654 = int(_37);
            // %655 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
            // auto _655 = _1;
            RWResult[int2(_653, _654)] = float4(_650, _651, _652, _650);
            // fn:converge 649 => 656
          } while (false);
        } while (false);
      }
    } while (false);
  }
  // fn:start 656
}
