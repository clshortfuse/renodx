// HUD Shader

#include "./colormath.hlsl"
#include "./cp2077.h"
#include "./injectedBuffer.hlsl"

static float _307;

cbuffer _32_34 : register(b0, space0) {
  float4 cb0[30] : packoffset(c0);
};

cbuffer _41_43 : register(b6, space0) {
  float4 cb6[30] : packoffset(c0);
};

cbuffer _37_39 : register(b12, space0) {
  float4 cb12[99] : packoffset(c0);
};

Texture2D<float4> _13 : register(t0, space0);
Texture2D<float4> _14 : register(t1, space0);
Texture2D<float4> _15 : register(t2, space0);
Texture2D<float4> _16 : register(t3, space0);
Texture2D<float4> _17 : register(t5, space0);
Texture2D<float4> _18 : register(t6, space0);
StructuredBuffer<uint> _21 : register(t7, space0);
Texture2D<float4> _22 : register(t8, space0);
StructuredBuffer<float> _23 : register(t9, space0);
Texture2D<float4> _24 : register(t10, space0);
Texture2D<float4> _8 : register(t32, space0);
Texture2D<uint2> _12 : register(t51, space0);

RWTexture2D<float4> _27 : register(u0, space0);
RWTexture2D<float4> _28 : register(u1, space0);

SamplerState _46 : register(s0, space0);

static uint3 gl_WorkGroupID;
static uint3 gl_LocalInvocationID;

struct SPIRV_Cross_Input {
  uint3 gl_WorkGroupID : SV_GroupID;
  uint3 gl_LocalInvocationID : SV_GroupThreadID;
};

void comp_main() {
  uint4 _76 = _21.Load(gl_WorkGroupID.x);
  uint _77 = _76.x;
  uint _85 = ((_77 << 4u) & 1048560u) + gl_LocalInvocationID.x;
  uint _86 = ((_77 >> 16u) << 4u) + gl_LocalInvocationID.y;
  float _87 = float(_85);
  float _88 = float(_86);
  float _98 = (_87 + 0.5f) / cb6[12u].z;
  float _99 = (_88 + 0.5f) / cb6[12u].w;
  bool _115 = ((_98 < cb6[9u].y) || (_99 < cb6[9u].z)) || (((1.0f - cb6[9u].y) < _98) || ((1.0f - cb6[9u].z) < _99));
  float _116;
  float _120;
  float _123;
  if (_115) {
    _116 = 0.0f;
    _120 = 0.0f;
    _123 = 0.0f;
  } else {
    bool _135 = cb6[0u].x > 0.0f;
    float _137 = _98 + (-0.5f);
    float _139 = _99 + (-0.5f);
    float _143 = cb6[0u].y + 0.119999997317790985107421875f;
    float _147 = max(_143 + abs(_137), 0.0f);
    float _148 = max(_143 + abs(_139), 0.0f);
    float _155 = clamp(sqrt((_148 * _148) + (_147 * _147)) * 20.0f, 0.0f, 1.0f);
    float _162 = ((_155 * _155) * cb6[0u].x) * (3.0f - (_155 * 2.0f));
    float _163 = _162 * 0.699999988079071044921875f;
    float _166 = ceil(_163) - _163;
    float _169 = (_166 * 50.0f) + 1.0f;
    float _178 = (((cos(cb0[0u].x) * 2.0f) + 200.0f) * _166) + 1.0f;
    float _190 = frac(floor(_169 * _98) * 0.103100001811981201171875f);
    float _191 = frac(floor(_178 * _99) * 0.103100001811981201171875f);
    float _192 = _191 + 33.3300018310546875f;
    float _194 = _190 + 33.3300018310546875f;
    float _195 = dot(float3(_190, _191, _190), float3(_192, _194, _194));
    float _201 = _191 + _190;
    float _204 = frac((_201 + (_195 * 2.0f)) * (_195 + _190));
    float _229 = abs(sin((_162 * 0.1680000126361846923828125f) * cb0[0u].x));
    float _234 = (_162 * 0.14000000059604644775390625f) + 1.0f;
    float _240 = dot(float3(_191, _190, _191), float3(_194, _192, _192));
    float _253 = (floor(frac(frac((_201 + (_240 * 2.0f)) * (_240 + _191)) + _229) * _234) * (1.0f / (((cos(frac(_204 + abs(sin(cb0[0u].x * 5000.0f))) * cb0[0u].x) * 0.0199999995529651641845703125f) + 1.0f) * _178))) + _99;
    float _255 = _253 * cb6[12u].w;
    float _264 = frac(round((_162 * 0.125f) * _255) * 0.103100001811981201171875f);
    float _265 = frac((_162 * 2.0620000362396240234375f) * cb0[0u].x);
    float _266 = _265 + 33.3300018310546875f;
    float _267 = _264 + 33.3300018310546875f;
    float _268 = dot(float3(_264, _265, _264), float3(_266, _267, _267));
    float _282 = frac(round((_162 * 0.012500000186264514923095703125f) * _255) * 0.103100001811981201171875f);
    float _283 = _282 + 33.3300018310546875f;
    float _284 = dot(float3(_282, _265, _282), float3(_266, _283, _283));
    float _301 = _135 ? ((((cb6[12u].z * ((floor(frac(_204 + _229) * _234) * (1.0f / (((sin(frac(_204 + abs(sin(cb0[0u].x * 100.0f))) * cb0[0u].x) * 0.0199999995529651641845703125f) + 1.0f) * _169))) + _98)) + 2.0f) + ((((_162 * _162) * 960.0f) * frac(((_265 + _264) + (_268 * 2.0f)) * (_268 + _264))) * frac(((_265 + _282) + (_284 * 2.0f)) * (_284 + _282)))) / cb6[12u].z) : _98;
    float _302 = _135 ? _253 : _99;
    bool _303 = cb6[0u].y > 0.0f;
    bool _305 = cb6[12u].x > 0.0f;
    float _969;
    float _970;
    float _971;
    float _973;
    float _975;
    if (_303) {
      float _331 = floor(_301 * 2.5f) * 0.4000000059604644775390625f;
      float _333 = floor(_302 * 10.0f) * 0.100000001490116119384765625f;
      float _335 = _331 + 0.20000000298023223876953125f;
      float _337 = _333 + 0.0500000007450580596923828125f;
      float _341 = floor((cb0[0u].x * 2.0f) + (cb6[0u].y * 20.0f));
      float _342 = _341 * 0.00999999977648258209228515625f;
      float _356 = _335 + (((_342 + 1.0f) - (floor(_341 * 9.9999997473787516355514526367188e-05f) * 100.0f)) * 0.00999999977648258209228515625f);
      float _357 = _337 + (((_341 + 1.0f) - (floor(_342) * 100.0f)) * 0.00999999977648258209228515625f);
      float _367 = frac(_356 * 0.103100001811981201171875f);
      float _368 = frac(_357 * 0.103100001811981201171875f);
      float _370 = _367 + 33.3300018310546875f;
      float _371 = dot(float3(_367, _368, _367), float3(_368 + 33.3300018310546875f, _370, _370));
      float _379 = frac(((_368 + _367) + (_371 * 2.0f)) * (_371 + _367));
      float _382 = ((1.0f - _379) * ((cb6[0u].y * 0.75f) + (-0.100000001490116119384765625f))) + _379;
      float _385 = round(_382 - (_382 * (0.5f - (cb6[0u].y * 0.375f))));
      float _386 = _385 * _385;
      float _387 = _301 - _335;
      float _388 = _302 - _337;
      float _389 = _335 * _356;
      float _390 = _337 * _357;
      float _395 = (_331 + 0.300000011920928955078125f) * _356;
      float _396 = (_333 + 0.1500000059604644775390625f) * _357;
      float _399 = frac(_389 * 0.103100001811981201171875f);
      float _400 = frac(_390 * 0.103100001811981201171875f);
      float _402 = _399 + 33.3300018310546875f;
      float _403 = dot(float3(_399, _400, _399), float3(_400 + 33.3300018310546875f, _402, _402));
      float _416 = frac((_389 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _417 = frac((_390 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _419 = _416 + 33.3300018310546875f;
      float _420 = dot(float3(_416, _417, _416), float3(_417 + 33.3300018310546875f, _419, _419));
      float _434 = floor(frac(((_400 + _399) + (_403 * 2.0f)) * (_403 + _399)) * 3.25f) * 0.100000001490116119384765625f;
      float _435 = floor(frac(((_417 + _416) + (_420 * 2.0f)) * (_420 + _416)) * 3.25f) * 0.02500000037252902984619140625f;
      float _437 = _434 + (-0.20000000298023223876953125f);
      float _439 = _435 + (-0.0500000007450580596923828125f);
      float _443 = frac(_395 * 0.103100001811981201171875f);
      float _444 = frac(_396 * 0.103100001811981201171875f);
      float _446 = _443 + 33.3300018310546875f;
      float _447 = dot(float3(_443, _444, _443), float3(_444 + 33.3300018310546875f, _446, _446));
      float _460 = frac((_395 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _461 = frac((_396 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _463 = _460 + 33.3300018310546875f;
      float _464 = dot(float3(_460, _461, _460), float3(_461 + 33.3300018310546875f, _463, _463));
      float _477 = floor(frac(((_444 + _443) + (_447 * 2.0f)) * (_447 + _443)) * 3.25f) * 0.100000001490116119384765625f;
      float _478 = floor(frac(((_461 + _460) + (_464 * 2.0f)) * (_464 + _460)) * 3.25f) * 0.02500000037252902984619140625f;
      float _479 = _477 + (-0.20000000298023223876953125f);
      float _480 = _478 + (-0.0500000007450580596923828125f);
      float _483 = _387 - _437;
      float _484 = _388 - _439;
      float _494 = (-0.0250000059604644775390625f) - _387;
      float _496 = _494 + _434;
      float _497 = (-0.006250001490116119384765625f) - _388;
      float _499 = _497 + _435;
      uint _514 = (((((uint(_496 > 0.0f) + ((_496 < 0.0f) ? 4294967295u : 0u)) + ((_483 < 0.0f) ? 4294967295u : 0u)) + uint(_483 > 0.0f)) + ((_484 < 0.0f) ? 4294967295u : 0u)) + uint(_484 > 0.0f)) + (uint(_499 > 0.0f) - uint(_499 < 0.0f));
      float _522 = min(float(int(uint(int(_514) > int(3u)) - uint(int(_514) < int(3u)))), 0.0f);
      float _527 = _387 - _479;
      float _528 = _388 - _480;
      float _537 = _494 + _477;
      float _538 = _497 + _478;
      uint _553 = (((((uint(_537 > 0.0f) + ((_537 < 0.0f) ? 4294967295u : 0u)) + ((_527 < 0.0f) ? 4294967295u : 0u)) + uint(_527 > 0.0f)) + ((_528 < 0.0f) ? 4294967295u : 0u)) + uint(_528 > 0.0f)) + (uint(_538 > 0.0f) - uint(_538 < 0.0f));
      float _560 = min(float(int(uint(int(_553) > int(3u)) - uint(int(_553) < int(3u)))), 0.0f);
      float _567 = _301 + ((_386 * (((_437 - _479) * _560) + ((_479 - _437) * _522))) * 1.2000000476837158203125f);
      float _571 = _302 + ((_386 * (((_439 - _480) * _560) + ((_480 - _439) * _522))) * 1.2000000476837158203125f);
      uint _572 = uint(_98);
      uint _573 = uint(_99);
      float4 _574 = _8.Load(int3(uint2(_572, _573), 0u));
      float _576 = _574.y;
      float _751;
      if (_305) {
        float4 _666 = _14.Load(int3(uint2(_572 & 255u, _573 & 255u), 0u));
        uint _662 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * float(_572)), uint(cb12[79u].y * float(_573))), 0u)).y & 31u);
        float _669 = _666.y;
        float _673 = ((_666.x + _669) + _666.z) * 0.3333333432674407958984375f;
        float _675 = cb6[12u].x * _576;
        float _684 = _669 - _673;
        float _686 = _673 + (-0.5f);
        uint4 _693 = asuint(cb6[17u]);
        float _745 = (((((((_686 + (cb6[18u].w * _684)) * cb6[18u].y)
                          * float(min((_693.x & _662), 1u)))
                         + 1.0f)
                        * (_675 / max(1.0f - _675, 9.9999999747524270787835121154785e-07f)))
                       * ((((_686 + (cb6[19u].w * _684)) * cb6[19u].y) * float(min((_693.y & _662), 1u))) + 1.0f))
                      * ((((_686 + (cb6[20u].w * _684)) * cb6[20u].y) * float(min((_693.z & _662), 1u))) + 1.0f))
                     * ((((_686 + (cb6[21u].w * _684)) * cb6[21u].y) * float(min((_693.w & _662), 1u))) + 1.0f);
        _751 = cb6[12u].y * (_745 / max(_745 + 1.0f, 1.0f));
      } else {
        _751 = _576;
      }
      float _753 = _751 * cb6[0u].y;
      float _755 = (_567 + (-0.5f)) + _753;
      float _757 = (0.5f - _571) + _753;
      float _759 = atan(_757 / _755);
      bool _764 = _755 < 0.0f;
      bool _765 = _755 == 0.0f;
      bool _766 = _757 >= 0.0f;
      bool _767 = _757 < 0.0f;
      float _781 = sqrt((_755 * _755) + (_757 * _757));
      float _784 = ((_765 && _766) ? 1.57079637050628662109375f : ((_765 && _767) ? (-1.57079637050628662109375f) : ((_764 && _767) ? (_759 + (-3.1415927410125732421875f)) : ((_764 && _766) ? (_759 + 3.1415927410125732421875f) : _759)))) + clamp(cb6[0u].y * (_751 * 0.5f), 0.0f, 1.0f);
      uint _795 = uint(cb6[12u].z * frac((cos(_784) * _781) + 0.5f));
      uint _796 = uint(cb6[12u].w * frac(0.5f - (sin(_784) * _781)));
      float4 _797 = _8.Load(int3(uint2(_795, _796), 0u));
      float _799 = _797.x;
      float _800 = _797.y;
      float _801 = _797.z;
      float frontier_phi_13_11_ladder;
      float frontier_phi_13_11_ladder_1;
      float frontier_phi_13_11_ladder_2;
      float frontier_phi_13_11_ladder_3;
      float frontier_phi_13_11_ladder_4;
      if (_305) {
        float4 _1075 = _14.Load(int3(uint2(_795 & 255u, _796 & 255u), 0u));
        // Custom: Replace Film Grain
        if (injectedData.fxFilmGrain) {
          float3 grainedColor = renodx::effects::ApplyFilmGrain(
              float3(_799, _800, _801),
              _1075.xy,
              frac(cb0[0u].x / 1000.f),
              injectedData.fxFilmGrain * 0.03f,
              (cb6[12u].y == 1.f) ? 1.f : (203.f / 100.f));
          frontier_phi_13_11_ladder = grainedColor.b;
          frontier_phi_13_11_ladder_1 = grainedColor.g;
          frontier_phi_13_11_ladder_2 = grainedColor.r;
          frontier_phi_13_11_ladder_3 = _571;
          frontier_phi_13_11_ladder_4 = _567;
        } else {
          uint _1072 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * float(_795)), uint(cb12[79u].y * float(_796))), 0u)).y & 31u);
          float _1077 = _1075.x;
          float _1078 = _1075.y;
          float _1079 = _1075.z;
          float _1082 = ((_1077 + _1078) + _1079) * 0.3333333432674407958984375f;
          float _1083 = cb6[12u].x * _799;
          float _1084 = cb6[12u].x * _800;
          float _1085 = cb6[12u].x * _801;
          float _1098 = _1077 - _1082;
          float _1099 = _1078 - _1082;
          float _1100 = _1079 - _1082;
          float _1104 = _1082 + (-0.5f);
          uint4 _1116 = asuint(cb6[17u]);
          float _1120 = float(min((_1116.x & _1072), 1u));
          float _1148 = float(min((_1116.y & _1072), 1u));
          float _1176 = float(min((_1116.z & _1072), 1u));
          float _1204 = float(min((_1116.w & _1072), 1u));
          float _1211 = (((((((_1104 + (cb6[18u].w * _1098)) * cb6[18u].x) * _1120) + 1.0f) * (_1083 / max(1.0f - _1083, 9.9999999747524270787835121154785e-07f))) * ((((_1104 + (cb6[19u].w * _1098)) * cb6[19u].x) * _1148) + 1.0f)) * ((((_1104 + (cb6[20u].w * _1098)) * cb6[20u].x) * _1176) + 1.0f)) * ((((_1104 + (cb6[21u].w * _1098)) * cb6[21u].x) * _1204) + 1.0f);
          float _1212 = (((((((_1104 + (cb6[18u].w * _1099)) * cb6[18u].y) * _1120) + 1.0f) * (_1084 / max(1.0f - _1084, 9.9999999747524270787835121154785e-07f))) * ((((_1104 + (cb6[19u].w * _1099)) * cb6[19u].y) * _1148) + 1.0f)) * ((((_1104 + (cb6[20u].w * _1099)) * cb6[20u].y) * _1176) + 1.0f)) * ((((_1104 + (cb6[21u].w * _1099)) * cb6[21u].y) * _1204) + 1.0f);
          float _1213 = (((((((_1104 + (cb6[18u].w * _1100)) * cb6[18u].z) * _1120) + 1.0f) * (_1085 / max(1.0f - _1085, 9.9999999747524270787835121154785e-07f))) * ((((_1104 + (cb6[19u].w * _1100)) * cb6[19u].z) * _1148) + 1.0f)) * ((((_1104 + (cb6[20u].w * _1100)) * cb6[20u].z) * _1176) + 1.0f)) * ((((_1104 + (cb6[21u].w * _1100)) * cb6[21u].z) * _1204) + 1.0f);
          frontier_phi_13_11_ladder = cb6[12u].y * (_1213 / max(_1213 + 1.0f, 1.0f));
          frontier_phi_13_11_ladder_1 = cb6[12u].y * (_1212 / max(_1212 + 1.0f, 1.0f));
          frontier_phi_13_11_ladder_2 = cb6[12u].y * (_1211 / max(_1211 + 1.0f, 1.0f));
          frontier_phi_13_11_ladder_3 = _571;
          frontier_phi_13_11_ladder_4 = _567;
        }
      } else {
        frontier_phi_13_11_ladder = _801;
        frontier_phi_13_11_ladder_1 = _800;
        frontier_phi_13_11_ladder_2 = _799;
        frontier_phi_13_11_ladder_3 = _571;
        frontier_phi_13_11_ladder_4 = _567;
      }
      _969 = frontier_phi_13_11_ladder_4;
      _970 = frontier_phi_13_11_ladder_3;
      _971 = frontier_phi_13_11_ladder_2;
      _973 = frontier_phi_13_11_ladder_1;
      _975 = frontier_phi_13_11_ladder;
    } else {
      float4 _577 = _8.Load(int3(uint2(_85, _86), 0u));
      float _579 = _577.x;
      float _580 = _577.y;
      float _581 = _577.z;
      float frontier_phi_13_6_ladder;
      float frontier_phi_13_6_ladder_1;
      float frontier_phi_13_6_ladder_2;
      float frontier_phi_13_6_ladder_3;
      float frontier_phi_13_6_ladder_4;
      if (_305) {
        float4 _817 = _14.Load(int3(uint2(_85 & 255u, _86 & 255u), 0u));
        // Custom: Add Film Grain
        if (injectedData.fxFilmGrain) {
          float3 grainedColor = renodx::effects::ApplyFilmGrain(
              float3(_579, _580, _581),
              _817.xy,
              frac(cb0[0u].x / 1000.f),
              injectedData.fxFilmGrain * 0.03f,
              (cb6[12u].y == 1.f) ? 1.f : (203.f / 100.f));
          frontier_phi_13_6_ladder = grainedColor.b;
          frontier_phi_13_6_ladder_1 = grainedColor.g;
          frontier_phi_13_6_ladder_2 = grainedColor.r;
          frontier_phi_13_6_ladder_3 = _302;
          frontier_phi_13_6_ladder_4 = _301;
        } else {
          uint _814 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * _87), uint(cb12[79u].y * _88)), 0u)).y & 31u);
          float _819 = _817.x;
          float _820 = _817.y;
          float _821 = _817.z;
          float _824 = ((_819 + _820) + _821) * 0.3333333432674407958984375f;
          float _825 = cb6[12u].x * _579;
          float _826 = cb6[12u].x * _580;
          float _827 = cb6[12u].x * _581;
          float _840 = _819 - _824;
          float _841 = _820 - _824;
          float _842 = _821 - _824;
          float _846 = _824 + (-0.5f);
          uint4 _858 = asuint(cb6[17u]);
          float _862 = float(min((_858.x & _814), 1u));
          float _890 = float(min((_858.y & _814), 1u));
          float _918 = float(min((_858.z & _814), 1u));
          float _946 = float(min((_858.w & _814), 1u));
          float _953 = (((((((_846 + (cb6[18u].w * _840)) * cb6[18u].x) * _862) + 1.0f) * (_825 / max(1.0f - _825, 9.9999999747524270787835121154785e-07f))) * ((((_846 + (cb6[19u].w * _840)) * cb6[19u].x) * _890) + 1.0f)) * ((((_846 + (cb6[20u].w * _840)) * cb6[20u].x) * _918) + 1.0f)) * ((((_846 + (cb6[21u].w * _840)) * cb6[21u].x) * _946) + 1.0f);
          float _954 = (((((((_846 + (cb6[18u].w * _841)) * cb6[18u].y) * _862) + 1.0f) * (_826 / max(1.0f - _826, 9.9999999747524270787835121154785e-07f))) * ((((_846 + (cb6[19u].w * _841)) * cb6[19u].y) * _890) + 1.0f)) * ((((_846 + (cb6[20u].w * _841)) * cb6[20u].y) * _918) + 1.0f)) * ((((_846 + (cb6[21u].w * _841)) * cb6[21u].y) * _946) + 1.0f);
          float _955 = (((((((_846 + (cb6[18u].w * _842)) * cb6[18u].z) * _862) + 1.0f) * (_827 / max(1.0f - _827, 9.9999999747524270787835121154785e-07f))) * ((((_846 + (cb6[19u].w * _842)) * cb6[19u].z) * _890) + 1.0f)) * ((((_846 + (cb6[20u].w * _842)) * cb6[20u].z) * _918) + 1.0f)) * ((((_846 + (cb6[21u].w * _842)) * cb6[21u].z) * _946) + 1.0f);
          frontier_phi_13_6_ladder = cb6[12u].y * (_955 / max(_955 + 1.0f, 1.0f));
          frontier_phi_13_6_ladder_1 = cb6[12u].y * (_954 / max(_954 + 1.0f, 1.0f));
          frontier_phi_13_6_ladder_2 = cb6[12u].y * (_953 / max(_953 + 1.0f, 1.0f));
          frontier_phi_13_6_ladder_3 = _302;
          frontier_phi_13_6_ladder_4 = _301;
        }
      } else {
        frontier_phi_13_6_ladder = _581;
        frontier_phi_13_6_ladder_1 = _580;
        frontier_phi_13_6_ladder_2 = _579;
        frontier_phi_13_6_ladder_3 = _302;
        frontier_phi_13_6_ladder_4 = _301;
      }
      _969 = frontier_phi_13_6_ladder_4;
      _970 = frontier_phi_13_6_ladder_3;
      _971 = frontier_phi_13_6_ladder_2;
      _973 = frontier_phi_13_6_ladder_1;
      _975 = frontier_phi_13_6_ladder;
    }
    bool _985 = cb6[1u].z > 0.0f;
    float _1232;
    if ((asuint(cb6[13u]).z != 0u) && _985) {
      _1232 = (cb6[1u].z * (asfloat(_23.Load(6u).x) + (-1.0f))) + 1.0f;
    } else {
      _1232 = 1.0f;
    }
    float _1237 = _969 + (-0.5f);
    float _1239 = (_970 + (-0.5f)) * 2.0f;
    float _1247 = _969 - (((_1239 * _1239) * _1237) * cb6[3u].x);
    float _1248 = _970 - ((((_1237 * _1237) * 2.0f) * _1239) * cb6[3u].y);
    float _1251 = (_1247 + (-0.5f)) * 2.0f;
    float _1252 = (_1248 + (-0.5f)) * 2.0f;
    float _1254 = cb0[0u].x * 0.004999999888241291046142578125f;
    float _1257 = (clamp(_1248, 0.0f, 1.0f) + 1.0f) - _1254;
    float _1262 = clamp(abs(cos(_1257 * 650.0f)), 0.0f, 1.0f);
    float _1268 = clamp(_1247, 0.0f, 1.0f) + 1.0f;
    float _1269 = _1268 - _1254;
    float _1275 = sin(cb0[0u].x);
    float _1276 = _1268 + _1254;
    float _1291 = clamp(((((_1275 + _1275) * 0.100000001490116119384765625f) + 0.540000021457672119140625f) + ((clamp(abs(cos(_1276 * 550.0f)), 0.0f, 1.0f) + clamp(abs(cos(_1269 * 250.0f)), 0.0f, 1.0f)) * 0.1799999773502349853515625f)) * ((_1262 * 0.39999997615814208984375f) + 0.60000002384185791015625f), 0.0f, 1.0f);
    float _1443;
    float _1445;
    float _1447;
    if (cb6[1u].w > 0.0f) {
      float4 _1416 = _18.SampleLevel(_46, float2(_98, _99), 0.0f);
      float _1427 = (clamp(abs(cos(_1257 * 250.0f)), 0.0f, 1.0f) * 0.0007999999797903001308441162109375f) + 0.00120000005699694156646728515625f;
      float _1434 = (_1262 * 0.001199999940581619739532470703125f) + 0.001800000085495412349700927734375f;
      float _1436 = (_1427 + _1416.x) - _1434;
      float _1437 = (_1427 + _1416.y) - _1434;
      float _1438 = (_1427 + _1416.z) - _1434;
      float _1604;
      float _1605;
      float _1606;
      if (cb6[6u].x > 0.0f) {
        float _1594 = clamp((sqrt((_139 * _139) + (_137 * _137)) - cb6[5u].z) / (cb6[5u].w - cb6[5u].z), 0.0f, 1.0f);
        float _1600 = 1.0f - (((_1594 * _1594) * (3.0f - (_1594 * 2.0f))) * cb6[6u].x);
        _1604 = _1600 * _1436;
        _1605 = _1600 * _1437;
        _1606 = _1600 * _1438;
      } else {
        _1604 = _1436;
        _1605 = _1437;
        _1606 = _1438;
      }
      float _1608 = dot(float3(_1604, _1605, _1606), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      _1443 = (((_1604 - _1608) * cb6[6u].y) + _1608) * cb6[1u].w;
      _1445 = (((_1605 - _1608) * cb6[6u].y) + _1608) * cb6[1u].w;
      _1447 = (((_1606 - _1608) * cb6[6u].y) + _1608) * cb6[1u].w;
    } else {
      _1443 = 0.0f;
      _1445 = 0.0f;
      _1447 = 0.0f;
    }
    float _1636;
    float _1637;
    float _1638;
    if (cb6[2u].x > 0.0f) {
      float4 _1625 = _17.SampleLevel(_46, float2(_1247, 1.0f - _1248), 0.0f);

      // Custom
      if (injectedData.toneMapGammaCorrection == 1.f) {
        _1625 = pow(renodx::color::srgb::from::BT709(max(0, _1625)), 2.2f);
      }
      _1636 = (cb6[2u].x * _1625.x) + _1443;
      _1637 = (cb6[2u].x * _1625.y) + _1445;
      _1638 = (cb6[2u].x * _1625.z) + _1447;
    } else {
      _1636 = _1443;
      _1637 = _1445;
      _1638 = _1447;
    }
    float _1816;
    float _1817;
    float _1818;
    if (_985) {
      float4 _1779 = _16.SampleLevel(_46, float2(_969, _970), 0.0f);
      float4 _1786 = _15.SampleLevel(_46, float2(_969, _970), 0.0f);
      float _1791 = _1786.w;
      float _1792 = 1.0f - _1791;
      float _1797 = (_1792 * _1779.w) + _1791;
      _1816 = (((_1797 * ((_1786.x - _971) + (_1792 * _1779.x))) + _971) * cb6[1u].z) + _1636;
      _1817 = (((_1797 * ((_1786.y - _973) + (_1792 * _1779.y))) + _973) * cb6[1u].z) + _1637;
      _1818 = (((_1797 * ((_1786.z - _975) + (_1792 * _1779.z))) + _975) * cb6[1u].z) + _1638;
    } else {
      _1816 = _1636;
      _1817 = _1637;
      _1818 = _1638;
    }
    float _1988;
    float _1990;
    float _1992;
    if (cb6[1u].x > 0.0f) {
      float _1895 = cb6[6u].w * _1251;
      float _1896 = cb6[6u].w * _1252;
      float4 _1900 = _13.SampleLevel(_46, float2(_1895 + _1247, _1896 + _1248), 0.0f);
      float4 _1904 = _13.SampleLevel(_46, float2(_1247, _1248), 0.0f);
      float4 _1911 = _13.SampleLevel(_46, float2(_1247 - _1895, _1248 - _1896), 0.0f);
      float4 _1926 = _13.SampleLevel(_46, float2((cb6[7u].x * _1251) + _1247, (cb6[7u].y * _1252) + _1248), 1.0f);
      float4 _1937 = _13.SampleLevel(_46, float2((cb6[7u].z * _1251) + _1247, (cb6[7u].w * _1252) + _1248), 2.0f);
      float4 _1952 = _13.SampleLevel(_46, float2((cb6[8u].x * _1251) + _1247, (cb6[8u].y * _1252) + _1248), 4.0f);

      // Custom
      if (injectedData.toneMapGammaCorrection == 1.f) {
        _1900 = pow(renodx::color::srgb::from::BT709(max(0, _1900)), 2.2f);
        _1904 = pow(renodx::color::srgb::from::BT709(max(0, _1904)), 2.2f);
        _1911 = pow(renodx::color::srgb::from::BT709(max(0, _1911)), 2.2f);
        _1926 = pow(renodx::color::srgb::from::BT709(max(0, _1926)), 2.2f);
        _1937 = pow(renodx::color::srgb::from::BT709(max(0, _1937)), 2.2f);
        _1952 = pow(renodx::color::srgb::from::BT709(max(0, _1952)), 2.2f);
      }

      float _1984 = 1.0f - (((_1904.w + _1900.w) + _1911.w) * 0.3333333432674407958984375f);
      float _1985 = clamp(_1291 * (((cb6[8u].w * _1937.x) + (cb6[8u].z * _1926.x)) + (cb6[9u].x * _1952.x)), 0.0f, 1.0f) * _1984;
      float _1986 = clamp(_1291 * (((cb6[8u].w * _1937.y) + (cb6[8u].z * _1926.y)) + (cb6[9u].x * _1952.y)), 0.0f, 1.0f) * _1984;
      float _1987 = clamp(_1291 * (((cb6[8u].w * _1937.z) + (cb6[8u].z * _1926.z)) + (cb6[9u].x * _1952.z)), 0.0f, 1.0f) * _1984;
      float _2079;
      float _2080;
      float _2081;
      if (_985) {
        float _2075 = 1.0f - (dot(float3(cb6[1u].z * _971, cb6[1u].z * _973, cb6[1u].z * _975), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f)) * 0.699999988079071044921875f);
        _2079 = _2075 * _1985;
        _2080 = _2075 * _1986;
        _2081 = _2075 * _1987;
      } else {
        _2079 = _1985;
        _2080 = _1986;
        _2081 = _1987;
      }
      float _2083 = dot(float3(_2079, _2080, _2081), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      float _2095 = cb6[1u].x * _1232;
      float _2108 = _1247 - cb6[3u].z;
      float _2109 = _1248 - cb6[3u].w;
      float4 _2115 = _13.SampleLevel(_46, float2(_2108, _2109), 0.0f);
      float _2117 = _2115.w;
      float _2130 = 1.0f - (cb6[4u].x * clamp(exp2(log2(abs((clamp(cb6[4u].y, 0.0f, 1.0f) * (_22.SampleLevel(_46, float2(_2108, _2109), cb6[4u].y + (-1.0f)).w - _2117)) + _2117)) * 0.819999992847442626953125f), 0.0f, 1.0f));
      float _2131 = _1275 * 0.00999999977648258209228515625f;
      float _2159 = (((clamp((cos((_2131 + _1248) * 1700.0f) + 1.0f) * 0.75f, 0.0f, 1.0f) * 0.00850000046193599700927734375f) + 0.00150000001303851604461669921875f) * (((_2131 + 0.540000021457672119140625f) + (_1275 * 0.100000001490116119384765625f)) + ((clamp(abs(cos(_1276 * 350.0f)), 0.0f, 1.0f) + clamp(abs(cos(_1269 * 350.0f)), 0.0f, 1.0f)) * 0.1799999773502349853515625f))) + 0.9900000095367431640625f;
      float _2161 = (_1900.x * 2.0f) * _2159;
      float _2162 = (_1904.y * 2.0f) * _2159;
      float _2163 = (_1911.z * 2.0f) * _2159;
      float _2164 = dot(float3(_2161, _2162, _2163), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      float _2191 = cb6[5u].x * _1232;
      float4 _2193 = _22.SampleLevel(_46, float2(_1247, _1248), cb6[5u].y);
      _1988 = (((((_2161 - _2164) * cb6[6u].z) + _2164) * _1232) + ((((_2095 * (((_2079 - _2083) * cb6[6u].z) + _2083)) + _1816) * _1984) * _2130)) + (_2193.x * _2191);
      _1990 = (((((_2162 - _2164) * cb6[6u].z) + _2164) * _1232) + ((((_2095 * (((_2080 - _2083) * cb6[6u].z) + _2083)) + _1817) * _1984) * _2130)) + (_2193.y * _2191);
      _1992 = (((((_2163 - _2164) * cb6[6u].z) + _2164) * _1232) + ((((_2095 * (((_2081 - _2083) * cb6[6u].z) + _2083)) + _1818) * _1984) * _2130)) + (_2193.z * _2191);
    } else {
      _1988 = _1816;
      _1990 = _1817;
      _1992 = _1818;
    }
    float _119;
    float _122;
    float _125;
    if (cb6[1u].y > 0.0f) {
      float4 _2201 = _13.Load(int3(uint2(_85, _86), 0u));
      float _2207 = (_1232 * 2.0f) * cb6[1u].y;
      _119 = (_2207 * _2201.x) + _1988;
      _122 = (_2207 * _2201.y) + _1990;
      _125 = (_2207 * _2201.z) + _1992;
    } else {
      _119 = _1988;
      _122 = _1990;
      _125 = _1992;
    }
    float frontier_phi_1_55_ladder;
    float frontier_phi_1_55_ladder_1;
    float frontier_phi_1_55_ladder_2;
    if (_303) {
      float _2291;
      float _2293;
      float _2295;
      float _2297;
      float _2299;
      float _2301;
      uint _2303;
      _2291 = 1.0f;
      _2293 = 1.0f;
      _2295 = 1.0f;
      _2297 = ((_87 / cb6[12u].z) * 0.800000011920928955078125f) * (cb6[12u].z / cb6[12u].w);
      _2299 = (_88 / cb6[12u].w) * 5.0f;
      _2301 = 1.0f;
      _2303 = 1u;
      float _2292;
      float _2294;
      float _2296;
      for (;;) {
        // Looks like hash44
        float _2305 = float(int(_2303));
        float _2306 = _2305 + _2297;
        float _2307 = _2305 + _2299;
        float _2308 = floor(_2306);
        float _2309 = floor(_2307);
        float _2317 = frac(_2308 * 0.103100001811981201171875f);
        float _2318 = frac(_2309 * 0.10300000011920928955078125f);
        float _2319 = frac(_2308 * 0.097300000488758087158203125f);
        float _2320 = frac(_2309 * 0.109899997711181640625f);
        float _2325 = dot(float4(_2317, _2318, _2319, _2320), float4(_2320 + 33.3300018310546875f, _2319 + 33.3300018310546875f, _2317 + 33.3300018310546875f, _2318 + 33.3300018310546875f));
        float _2328 = _2325 + _2317;
        float _2329 = _2325 + _2318;
        float _2330 = _2325 + _2319;
        float _2331 = _2325 + _2320;
        float _2340 = frac((_2328 + _2329) * _2330);
        float _2341 = frac((_2328 + _2330) * _2329);
        float _2342 = frac((_2329 + _2330) * _2331);
        bool _2361 = frac((_2330 + _2331) * _2328) > 0.5f;
        _2292 = (_2361 ? _2340 : 1.0f) * _2291;
        _2294 = (_2361 ? _2341 : 1.0f) * _2293;
        _2296 = (_2361 ? _2342 : 1.0f) * _2295;
        uint _2304 = _2303 + 1u;
        if (_2304 == 15u) {
          break;
        } else {
          _2291 = _2292;
          _2293 = _2294;
          _2295 = _2296;
          _2297 = (((_2342 * 0.20000000298023223876953125f) * (frac(_2306) - _2301)) * frac(floor(((cb0[0u].x * 0.1500000059604644775390625f) + 300.0f) / _2340) * _2340)) + _2297;
          _2299 = ((_2342 * _2341) * (frac(_2307) - _2301)) + _2299;
          _2301 *= (-2.0f);
          _2303 = _2304;
        }
      }
      float _2379 = floor((cb0[0u].x * 2.0f) + cb6[0u].y);
      float _2380 = _2379 * 0.00999999977648258209228515625f;
      float _2390 = ((_2380 + 1.0f) - (floor(_2379 * 9.9999997473787516355514526367188e-05f) * 100.0f)) * 0.00999999977648258209228515625f;
      float _2391 = ((_2379 + 1.0f) - (floor(_2380) * 100.0f)) * 0.00999999977648258209228515625f;
      float _2396 = 0.5f - (cb6[0u].y * 0.375f);
      float _2397 = (cb6[0u].y * 0.75f) + (-0.100000001490116119384765625f);
      float _2400 = frac((((floor(_969 * 10.0f) * 0.100000001490116119384765625f) + 0.0500000007450580596923828125f) + _2390) * 0.103100001811981201171875f);
      float _2401 = frac((((floor(_970 * 33.33333587646484375f) * 0.02999999932944774627685546875f) + 0.014999999664723873138427734375f) + _2391) * 0.103100001811981201171875f);
      float _2403 = _2400 + 33.3300018310546875f;
      float _2404 = dot(float3(_2400, _2401, _2400), float3(_2401 + 33.3300018310546875f, _2403, _2403));
      float _2412 = frac(((_2401 + _2400) + (_2404 * 2.0f)) * (_2404 + _2400));
      float _2415 = ((1.0f - _2412) * _2397) + _2412;
      float _2436 = frac((((floor(_969 * 11.111110687255859375f) * 0.0900000035762786865234375f) + 0.04500000178813934326171875f) + _2390) * 0.103100001811981201171875f);
      float _2437 = frac((((floor(_970 * 25.0f) * 0.039999999105930328369140625f) + 0.0199999995529651641845703125f) + _2391) * 0.103100001811981201171875f);
      float _2439 = _2436 + 33.3300018310546875f;
      float _2440 = dot(float3(_2436, _2437, _2436), float3(_2437 + 33.3300018310546875f, _2439, _2439));
      float _2448 = frac(((_2437 + _2436) + (_2440 * 2.0f)) * (_2440 + _2436));
      float _2451 = ((1.0f - _2448) * _2397) + _2448;
      float _2455 = max(0.0f, _2292);
      float _2456 = max(0.0f, _2294);
      float _2457 = max(0.0f, _2296);
      float _2459 = max(_2455, max(_2456, _2457));
      float _2460 = _2459 * _2459;
      float _2461 = _2455 * 2.0f;
      float _2462 = _2456 * 0.100000001490116119384765625f;
      float _2463 = _2457 * 0.25f;
      float _2471 = clamp((round(_2415 - (_2415 * _2396)) * 5.0f) * round(_2451 - (_2451 * _2396)), 0.0f, 1.0f) * 3.0f;
      frontier_phi_1_55_ladder = (((_2463 - _125) + (_2460 * _2463)) * _2471) + _125;
      frontier_phi_1_55_ladder_1 = (((_2462 - _122) + (_2460 * _2462)) * _2471) + _122;
      frontier_phi_1_55_ladder_2 = (((_2461 - _119) + (_2460 * _2461)) * _2471) + _119;
    } else {
      frontier_phi_1_55_ladder = _125;
      frontier_phi_1_55_ladder_1 = _122;
      frontier_phi_1_55_ladder_2 = _119;
    }
    _116 = frontier_phi_1_55_ladder_2;
    _120 = frontier_phi_1_55_ladder_1;
    _123 = frontier_phi_1_55_ladder;
  }
  bool _131 = asuint(cb6[15u]).x == 0u;
  float _306;
  float _309;
  float _311;
  if (_131) {
    _306 = _307;
    _309 = _307;
    _311 = _307;
  } else {
    float4 _318 = _8.Load(int3(uint2(_85, _86), 0u));
    float _321 = _318.x;
    float _322 = _318.y;
    float _323 = _318.z;
    float frontier_phi_3_4_ladder;
    float frontier_phi_3_4_ladder_1;
    float frontier_phi_3_4_ladder_2;
    if (_115) {
      frontier_phi_3_4_ladder = 0.0f;
      frontier_phi_3_4_ladder_1 = 0.0f;
      frontier_phi_3_4_ladder_2 = 0.0f;
    } else {
      float4 _611 = _16.SampleLevel(_46, float2(_98, _99), 0.0f);
      float4 _619 = _15.SampleLevel(_46, float2(_98, _99), 0.0f);
      float _624 = _619.w;
      float _625 = 1.0f - _624;
      float _630 = (_625 * _611.w) + _624;
      frontier_phi_3_4_ladder = ((_630 * ((_619.z - _323) + (_625 * _611.z))) + _323) * cb6[1u].z;
      frontier_phi_3_4_ladder_1 = ((_630 * ((_619.y - _322) + (_625 * _611.y))) + _322) * cb6[1u].z;
      frontier_phi_3_4_ladder_2 = ((_630 * ((_619.x - _321) + (_625 * _611.x))) + _321) * cb6[1u].z;
    }
    _306 = frontier_phi_3_4_ladder_2;
    _309 = frontier_phi_3_4_ladder_1;
    _311 = frontier_phi_3_4_ladder;
  }
  float _597;
  float _599;
  float _601;
  if (cb6[14u].w > 0.0f) {
    uint4 _585 = asuint(cb6[10u]);
    uint _586 = _585.x;
    uint _588 = _585.z;
    uint _591 = _585.y;
    uint _594 = _585.w;
    float frontier_phi_8_7_ladder;
    float frontier_phi_8_7_ladder_1;
    float frontier_phi_8_7_ladder_2;
    if ((((_85 >= _586) && (_85 < _588)) && (_86 >= _591)) && (_86 < _594)) {
      float4 _1009 = _24.SampleLevel(_46, float2((cb6[11u].z * ((_87 - float(int(_586))) / float(int(_588 - _586)))) + cb6[11u].x, (cb6[11u].w * ((_88 - float(int(_591))) / float(int(_594 - _591)))) + cb6[11u].y), 0.0f);
      frontier_phi_8_7_ladder = _1009.z * cb6[14u].w;
      frontier_phi_8_7_ladder_1 = _1009.y * cb6[14u].w;
      frontier_phi_8_7_ladder_2 = _1009.x * cb6[14u].w;
    } else {
      frontier_phi_8_7_ladder = _123;
      frontier_phi_8_7_ladder_1 = _120;
      frontier_phi_8_7_ladder_2 = _116;
    }
    _597 = frontier_phi_8_7_ladder_2;
    _599 = frontier_phi_8_7_ladder_1;
    _601 = frontier_phi_8_7_ladder;
  } else {
    _597 = _116;
    _599 = _120;
    _601 = _123;
  }

  // Custom: Switch to colormath
  /*
  uint4 _606 = asuint(cb6[13u]);
  float _1014;
  float _1020;
  float _1026;
  if (_606.y == 0u) {
    _1014 = _597;
    _1020 = _599;
    _1026 = _601;
  } else {
    uint _1056 = _606.w;
    float _1359;
    float _1360;
    float _1361;
    if (cb6[14u].z != 1.0f) {
      _1359 = exp2(log2(abs(_597)) * cb6[14u].z);
      _1360 = exp2(log2(abs(_599)) * cb6[14u].z);
      _1361 = exp2(log2(abs(_601)) * cb6[14u].z);
    } else {
      _1359 = _597;
      _1360 = _599;
      _1361 = _601;
    }
    float _1371 = frac(_87 * 211.1488037109375f);
    float _1372 = frac(_88 * 210.944000244140625f);
    float _1373 = frac(cb0[0u].x * 6.227200031280517578125f);
    float _1376 = _1373 + 33.3300018310546875f;
    float _1377 = dot(float3(_1371, _1372, _1373), float3(_1372 + 33.3300018310546875f, _1371 + 33.3300018310546875f, _1376));
    float _1380 = _1377 + _1371;
    float _1381 = _1377 + _1372;
    float _1383 = _1380 + _1381;
    float _1388 = frac(_1383 * (_1377 + _1373));
    float _1389 = frac((_1380 * 2.0f) * _1381);
    float _1390 = frac(_1383 * _1380);
    float _1396 = frac((_87 + 64.0f) * 211.1488037109375f);
    float _1397 = frac((_88 + 64.0f) * 210.944000244140625f);
    float _1400 = dot(float3(_1396, _1397, _1373), float3(_1397 + 33.3300018310546875f, _1396 + 33.3300018310546875f, _1376));
    float _1403 = _1400 + _1396;
    float _1404 = _1400 + _1397;
    float _1406 = _1403 + _1404;
    float _1411 = frac(_1406 * (_1400 + _1373));
    float _1412 = frac((_1403 * 2.0f) * _1404);
    float _1413 = frac(_1406 * _1403);
    float frontier_phi_15_23_ladder;
    float frontier_phi_15_23_ladder_1;
    float frontier_phi_15_23_ladder_2;
    if (_1056 == 0u) {
      float _1549 = (_1359 <= 0.003130800090730190277099609375f) ? (_1359 * 12.9200000762939453125f) : ((exp2(log2(abs(_1359)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1550 = (_1360 <= 0.003130800090730190277099609375f) ? (_1360 * 12.9200000762939453125f) : ((exp2(log2(abs(_1360)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1551 = (_1361 <= 0.003130800090730190277099609375f) ? (_1361 * 12.9200000762939453125f) : ((exp2(log2(abs(_1361)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1552 = _1549 * 510.0f;
      float _1554 = _1550 * 510.0f;
      float _1555 = _1551 * 510.0f;
      frontier_phi_15_23_ladder = (((_1389 + (-0.5f)) + (min(min(1.0f, _1554), 510.0f - _1554) * (_1412 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1550;
      frontier_phi_15_23_ladder_1 = (((_1390 + (-0.5f)) + (min(min(1.0f, _1555), 510.0f - _1555) * (_1413 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1551;
      frontier_phi_15_23_ladder_2 = (((_1388 + (-0.5f)) + (min(min(1.0f, _1552), 510.0f - _1552) * (_1411 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1549;
    } else {
      float frontier_phi_15_23_ladder_31_ladder;
      float frontier_phi_15_23_ladder_31_ladder_1;
      float frontier_phi_15_23_ladder_31_ladder_2;
      if (_1056 == 1u) {
        float _1698 = mad(0.043306000530719757080078125f, _1361, mad(0.329291999340057373046875f, _1360, _1359 * 0.627402007579803466796875f));
        float _1704 = mad(0.011359999887645244598388671875f, _1361, mad(0.9195439815521240234375f, _1360, _1359 * 0.06909500062465667724609375f));
        float _1710 = mad(0.89557802677154541015625f, _1361, mad(0.08802799880504608154296875f, _1360, _1359 * 0.0163940005004405975341796875f));
        float _1746 = exp2(log2(abs((((clamp(mad(_1710, cb6[22u].z, mad(_1704, cb6[22u].y, _1698 * cb6[22u].x)), 0.0f, 1.0f) - _1698) * cb6[16u].x) + _1698) * cb6[14u].x)) * 0.1593017578125f);
        float _1747 = exp2(log2(abs((((clamp(mad(_1710, cb6[23u].z, mad(_1704, cb6[23u].y, _1698 * cb6[23u].x)), 0.0f, 1.0f) - _1704) * cb6[16u].x) + _1704) * cb6[14u].x)) * 0.1593017578125f);
        float _1748 = exp2(log2(abs((((clamp(mad(_1710, cb6[24u].z, mad(_1704, cb6[24u].y, _1698 * cb6[24u].x)), 0.0f, 1.0f) - _1710) * cb6[16u].x) + _1710) * cb6[14u].x)) * 0.1593017578125f);
        frontier_phi_15_23_ladder_31_ladder = exp2(log2(abs(((_1747 * 18.8515625f) + 0.8359375f) / ((_1747 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_15_23_ladder_31_ladder_1 = exp2(log2(abs(((_1748 * 18.8515625f) + 0.8359375f) / ((_1748 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_15_23_ladder_31_ladder_2 = exp2(log2(abs(((_1746 * 18.8515625f) + 0.8359375f) / ((_1746 * 18.6875f) + 1.0f))) * 78.84375f);
      } else {
        float frontier_phi_15_23_ladder_31_ladder_39_ladder;
        float frontier_phi_15_23_ladder_31_ladder_39_ladder_1;
        float frontier_phi_15_23_ladder_31_ladder_39_ladder_2;
        if (_1056 == 2u) {
          frontier_phi_15_23_ladder_31_ladder_39_ladder = _1360 * cb6[14u].x;
          frontier_phi_15_23_ladder_31_ladder_39_ladder_1 = _1361 * cb6[14u].x;
          frontier_phi_15_23_ladder_31_ladder_39_ladder_2 = _1359 * cb6[14u].x;
        } else {
          float frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder;
          float frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_1;
          float frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_2;
          if (_1056 == 3u) {
            float _2006 = mad(_1361, cb6[22u].z, mad(_1360, cb6[22u].y, _1359 * cb6[22u].x)) * cb6[14u].x;
            float _2007 = mad(_1361, cb6[23u].z, mad(_1360, cb6[23u].y, _1359 * cb6[23u].x)) * cb6[14u].x;
            float _2008 = mad(_1361, cb6[24u].z, mad(_1360, cb6[24u].y, _1359 * cb6[24u].x)) * cb6[14u].x;
            float _2033 = (_2006 <= 0.003130800090730190277099609375f) ? (_2006 * 12.9200000762939453125f) : ((exp2(log2(abs(_2006)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2034 = (_2007 <= 0.003130800090730190277099609375f) ? (_2007 * 12.9200000762939453125f) : ((exp2(log2(abs(_2007)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2035 = (_2008 <= 0.003130800090730190277099609375f) ? (_2008 * 12.9200000762939453125f) : ((exp2(log2(abs(_2008)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2036 = _2033 * 2046.0f;
            float _2038 = _2034 * 2046.0f;
            float _2039 = _2035 * 2046.0f;
            frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder = (((_1389 + (-0.5f)) + (min(min(1.0f, _2038), 2046.0f - _2038) * (_1412 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2034;
            frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_1 = (((_1390 + (-0.5f)) + (min(min(1.0f, _2039), 2046.0f - _2039) * (_1413 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2035;
            frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_2 = (((_1388 + (-0.5f)) + (min(min(1.0f, _2036), 2046.0f - _2036) * (_1411 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2033;
          } else {
            frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder = (_1360 * cb6[14u].x) + cb6[14u].y;
            frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_1 = (_1361 * cb6[14u].x) + cb6[14u].y;
            frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_2 = (_1359 * cb6[14u].x) + cb6[14u].y;
          }
          frontier_phi_15_23_ladder_31_ladder_39_ladder = frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder;
          frontier_phi_15_23_ladder_31_ladder_39_ladder_1 = frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_1;
          frontier_phi_15_23_ladder_31_ladder_39_ladder_2 = frontier_phi_15_23_ladder_31_ladder_39_ladder_45_ladder_2;
        }
        frontier_phi_15_23_ladder_31_ladder = frontier_phi_15_23_ladder_31_ladder_39_ladder;
        frontier_phi_15_23_ladder_31_ladder_1 = frontier_phi_15_23_ladder_31_ladder_39_ladder_1;
        frontier_phi_15_23_ladder_31_ladder_2 = frontier_phi_15_23_ladder_31_ladder_39_ladder_2;
      }
      frontier_phi_15_23_ladder = frontier_phi_15_23_ladder_31_ladder;
      frontier_phi_15_23_ladder_1 = frontier_phi_15_23_ladder_31_ladder_1;
      frontier_phi_15_23_ladder_2 = frontier_phi_15_23_ladder_31_ladder_2;
    }
    _1014 = frontier_phi_15_23_ladder_2;
    _1020 = frontier_phi_15_23_ladder;
    _1026 = frontier_phi_15_23_ladder_1;
  }
  float _1294;
  float _1300;
  float _1306;
  if (_131) {
    _1294 = _306;
    _1300 = _309;
    _1306 = _311;
  } else {
    uint _1345 = _606.w;
    float _1468;
    float _1469;
    float _1470;
    if (cb6[15u].w != 1.0f) {
      _1468 = exp2(log2(abs(_306)) * cb6[15u].w);
      _1469 = exp2(log2(abs(_309)) * cb6[15u].w);
      _1470 = exp2(log2(abs(_311)) * cb6[15u].w);
    } else {
      _1468 = _306;
      _1469 = _309;
      _1470 = _311;
    }
    float _1477 = frac(_87 * 211.1488037109375f);
    float _1478 = frac(_88 * 210.944000244140625f);
    float _1479 = frac(cb0[0u].x * 6.227200031280517578125f);
    float _1482 = _1479 + 33.3300018310546875f;
    float _1483 = dot(float3(_1477, _1478, _1479), float3(_1478 + 33.3300018310546875f, _1477 + 33.3300018310546875f, _1482));
    float _1486 = _1483 + _1477;
    float _1487 = _1483 + _1478;
    float _1489 = _1486 + _1487;
    float _1494 = frac(_1489 * (_1483 + _1479));
    float _1495 = frac((_1486 * 2.0f) * _1487);
    float _1496 = frac(_1489 * _1486);
    float _1501 = frac((_87 + 64.0f) * 211.1488037109375f);
    float _1502 = frac((_88 + 64.0f) * 210.944000244140625f);
    float _1505 = dot(float3(_1501, _1502, _1479), float3(_1502 + 33.3300018310546875f, _1501 + 33.3300018310546875f, _1482));
    float _1508 = _1505 + _1501;
    float _1509 = _1505 + _1502;
    float _1511 = _1508 + _1509;
    float _1516 = frac(_1511 * (_1505 + _1479));
    float _1517 = frac((_1508 * 2.0f) * _1509);
    float _1518 = frac(_1511 * _1508);
    float frontier_phi_20_29_ladder;
    float frontier_phi_20_29_ladder_1;
    float frontier_phi_20_29_ladder_2;
    if (_1345 == 0u) {
      float _1663 = (_1468 <= 0.003130800090730190277099609375f) ? (_1468 * 12.9200000762939453125f) : ((exp2(log2(abs(_1468)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1664 = (_1469 <= 0.003130800090730190277099609375f) ? (_1469 * 12.9200000762939453125f) : ((exp2(log2(abs(_1469)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1665 = (_1470 <= 0.003130800090730190277099609375f) ? (_1470 * 12.9200000762939453125f) : ((exp2(log2(abs(_1470)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1666 = _1663 * 510.0f;
      float _1667 = _1664 * 510.0f;
      float _1668 = _1665 * 510.0f;
      frontier_phi_20_29_ladder = (((_1495 + (-0.5f)) + (min(min(1.0f, _1667), 510.0f - _1667) * (_1517 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1664;
      frontier_phi_20_29_ladder_1 = (((_1496 + (-0.5f)) + (min(min(1.0f, _1668), 510.0f - _1668) * (_1518 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1665;
      frontier_phi_20_29_ladder_2 = (((_1494 + (-0.5f)) + (min(min(1.0f, _1666), 510.0f - _1666) * (_1516 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1663;
    } else {
      float frontier_phi_20_29_ladder_37_ladder;
      float frontier_phi_20_29_ladder_37_ladder_1;
      float frontier_phi_20_29_ladder_37_ladder_2;
      if (_1345 == 1u) {
        float _1823 = mad(0.043306000530719757080078125f, _1470, mad(0.329291999340057373046875f, _1469, _1468 * 0.627402007579803466796875f));
        float _1826 = mad(0.011359999887645244598388671875f, _1470, mad(0.9195439815521240234375f, _1469, _1468 * 0.06909500062465667724609375f));
        float _1829 = mad(0.89557802677154541015625f, _1470, mad(0.08802799880504608154296875f, _1469, _1468 * 0.0163940005004405975341796875f));
        float _1863 = exp2(log2(abs((((clamp(mad(_1829, cb6[26u].z, mad(_1826, cb6[26u].y, _1823 * cb6[26u].x)), 0.0f, 1.0f) - _1823) * cb6[16u].x) + _1823) * cb6[15u].y)) * 0.1593017578125f);
        float _1864 = exp2(log2(abs((((clamp(mad(_1829, cb6[27u].z, mad(_1826, cb6[27u].y, _1823 * cb6[27u].x)), 0.0f, 1.0f) - _1826) * cb6[16u].x) + _1826) * cb6[15u].y)) * 0.1593017578125f);
        float _1865 = exp2(log2(abs((((clamp(mad(_1829, cb6[28u].z, mad(_1826, cb6[28u].y, _1823 * cb6[28u].x)), 0.0f, 1.0f) - _1829) * cb6[16u].x) + _1829) * cb6[15u].y)) * 0.1593017578125f);
        frontier_phi_20_29_ladder_37_ladder = exp2(log2(abs(((_1864 * 18.8515625f) + 0.8359375f) / ((_1864 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_20_29_ladder_37_ladder_1 = exp2(log2(abs(((_1865 * 18.8515625f) + 0.8359375f) / ((_1865 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_20_29_ladder_37_ladder_2 = exp2(log2(abs(((_1863 * 18.8515625f) + 0.8359375f) / ((_1863 * 18.6875f) + 1.0f))) * 78.84375f);
      } else {
        float frontier_phi_20_29_ladder_37_ladder_43_ladder;
        float frontier_phi_20_29_ladder_37_ladder_43_ladder_1;
        float frontier_phi_20_29_ladder_37_ladder_43_ladder_2;
        if (_1345 == 2u) {
          frontier_phi_20_29_ladder_37_ladder_43_ladder = _1469 * cb6[15u].y;
          frontier_phi_20_29_ladder_37_ladder_43_ladder_1 = _1470 * cb6[15u].y;
          frontier_phi_20_29_ladder_37_ladder_43_ladder_2 = _1468 * cb6[15u].y;
        } else {
          float frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder;
          float frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_1;
          float frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_2;
          if (_1345 == 3u) {
            float _2223 = mad(_1470, cb6[26u].z, mad(_1469, cb6[26u].y, _1468 * cb6[26u].x)) * cb6[15u].y;
            float _2224 = mad(_1470, cb6[27u].z, mad(_1469, cb6[27u].y, _1468 * cb6[27u].x)) * cb6[15u].y;
            float _2225 = mad(_1470, cb6[28u].z, mad(_1469, cb6[28u].y, _1468 * cb6[28u].x)) * cb6[15u].y;
            float _2250 = (_2223 <= 0.003130800090730190277099609375f) ? (_2223 * 12.9200000762939453125f) : ((exp2(log2(abs(_2223)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2251 = (_2224 <= 0.003130800090730190277099609375f) ? (_2224 * 12.9200000762939453125f) : ((exp2(log2(abs(_2224)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2252 = (_2225 <= 0.003130800090730190277099609375f) ? (_2225 * 12.9200000762939453125f) : ((exp2(log2(abs(_2225)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2253 = _2250 * 2046.0f;
            float _2254 = _2251 * 2046.0f;
            float _2255 = _2252 * 2046.0f;
            frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder = (((_1495 + (-0.5f)) + (min(min(1.0f, _2254), 2046.0f - _2254) * (_1517 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2251;
            frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_1 = (((_1496 + (-0.5f)) + (min(min(1.0f, _2255), 2046.0f - _2255) * (_1518 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2252;
            frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_2 = (((_1494 + (-0.5f)) + (min(min(1.0f, _2253), 2046.0f - _2253) * (_1516 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2250;
          } else {
            frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder = (_1469 * cb6[15u].y) + cb6[15u].z;
            frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_1 = (_1470 * cb6[15u].y) + cb6[15u].z;
            frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_2 = (_1468 * cb6[15u].y) + cb6[15u].z;
          }
          frontier_phi_20_29_ladder_37_ladder_43_ladder = frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder;
          frontier_phi_20_29_ladder_37_ladder_43_ladder_1 = frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_1;
          frontier_phi_20_29_ladder_37_ladder_43_ladder_2 = frontier_phi_20_29_ladder_37_ladder_43_ladder_49_ladder_2;
        }
        frontier_phi_20_29_ladder_37_ladder = frontier_phi_20_29_ladder_37_ladder_43_ladder;
        frontier_phi_20_29_ladder_37_ladder_1 = frontier_phi_20_29_ladder_37_ladder_43_ladder_1;
        frontier_phi_20_29_ladder_37_ladder_2 = frontier_phi_20_29_ladder_37_ladder_43_ladder_2;
      }
      frontier_phi_20_29_ladder = frontier_phi_20_29_ladder_37_ladder;
      frontier_phi_20_29_ladder_1 = frontier_phi_20_29_ladder_37_ladder_1;
      frontier_phi_20_29_ladder_2 = frontier_phi_20_29_ladder_37_ladder_2;
    }
    _1294 = frontier_phi_20_29_ladder_2;
    _1300 = frontier_phi_20_29_ladder;
    _1306 = frontier_phi_20_29_ladder_1;
  }
  _27[uint2(_85, _86)] = float4(_1014, _1020, _1026, 1.0f);
  if (!(asuint(cb6[15u]).x == 0u)) {
    _28[uint2(_85, _86)] = float4(_1294, _1300, _1306, 1.0f);
  }
  */

  uint outputTypeEnum = asuint(cb6[13u].w);

  float3 outputColor1 = float3(_597, _599, _601);
  if (asuint(cb6[13u].y) != 0u) {
    ConvertColorParams params = {
        outputTypeEnum,  // outputTypeEnum
        cb6[14u].x,      // paperWhiteScaling
        cb6[14u].y,      // blackFloorAdjust
        cb6[14u].z,      // gammaCorrection
        cb6[16u].x,      // pqSaturation
        float3x3(
            cb6[22u].x, cb6[22u].y, cb6[22u].z,
            cb6[23u].x, cb6[23u].y, cb6[23u].z,
            cb6[24u].x, cb6[24u].y, cb6[24u].z),  // pqMatrix
        float3(_87, _88, cb0[0u].x)               // random3
    };
    outputColor1 = convertColor(outputColor1, params);
  }

  _27[uint2(_85, _86)] = float4(outputColor1.rgb, 1.0f);

  if (!_131) {
    float3 outputColor2 = float3(_306, _309, _311);
    ConvertColorParams params = {
        outputTypeEnum,  // outputTypeEnum
        cb6[15u].y,      // paperWhiteScaling
        cb6[15u].z,      // blackFloorAdjust
        cb6[15u].w,      // gammaCorrection
        cb6[16u].x,      // pqSaturation
        float3x3(
            cb6[26u].x, cb6[26u].y, cb6[26u].z,
            cb6[27u].x, cb6[27u].y, cb6[27u].z,
            cb6[28u].x, cb6[28u].y, cb6[28u].z),  // pqMatrix
        float3(_87, _88, cb0[0u].x)               // random3
    };

    outputColor2 = convertColor(outputColor2, params);
    _28[uint2(_85, _86)] = float4(outputColor2.rgb, 1.0f);
  }
}

[numthreads(16, 16, 1)] void main(SPIRV_Cross_Input stage_input) {
  gl_WorkGroupID = stage_input.gl_WorkGroupID;
  gl_LocalInvocationID = stage_input.gl_LocalInvocationID;
  comp_main();
}
