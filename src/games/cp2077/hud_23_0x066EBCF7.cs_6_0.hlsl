
// HUD Shader

#include "./colormath.hlsl"
#include "./cp2077.h"
#include "./injectedBuffer.hlsl"

static float _298;

cbuffer _34_36 : register(b0, space0) {
  float4 cb0[30] : packoffset(c0);
};

cbuffer _44_46 : register(b6, space0) {
  float4 cb6[34] : packoffset(c0);
};

cbuffer _39_41 : register(b12, space0) {
  float4 cb12[99] : packoffset(c0);
};

Texture2D<float4> _8 : register(t32, space0);
Texture2D<uint4> _12 : register(t51, space0);
Texture2D<float4> _13 : register(t0, space0);
Texture2D<float4> _14 : register(t1, space0);
Texture2D<float4> _15 : register(t2, space0);
Texture2D<float4> _16 : register(t3, space0);
Texture2D<float4> _17 : register(t5, space0);
Texture2D<float4> _18 : register(t6, space0);
Texture3D<float4> _21 : register(t7, space0);
Texture2D<float4> _22 : register(t8, space0);
StructuredBuffer<uint> _25 : register(t9, space0);
Texture2D<float4> _26 : register(t10, space0);
RWTexture2D<float4> _29 : register(u0, space0);
RWTexture2D<float4> _30 : register(u1, space0);
SamplerState _49 : register(s11, space0);
SamplerState _50 : register(s0, space0);

static uint3 gl_GlobalInvocationID;
struct SPIRV_Cross_Input {
  uint3 gl_GlobalInvocationID : SV_DispatchThreadID;
};

void comp_main() {
  float _77 = float(gl_GlobalInvocationID.x);
  float _78 = float(gl_GlobalInvocationID.y);
  float _88 = (_77 + 0.5f) / cb6[16u].z;
  float _89 = (_78 + 0.5f) / cb6[16u].w;
  bool _105 = ((_88 < cb6[9u].y) || (_89 < cb6[9u].z)) || (((1.0f - cb6[9u].y) < _88) || ((1.0f - cb6[9u].z) < _89));
  float _106;
  float _110;
  float _113;
  if (_105) {
    _106 = 0.0f;
    _110 = 0.0f;
    _113 = 0.0f;
  } else {
    bool _126 = cb6[0u].x > 0.0f;
    float _128 = _88 + (-0.5f);
    float _130 = _89 + (-0.5f);
    float _134 = cb6[0u].y + 0.119999997317790985107421875f;
    float _138 = max(_134 + abs(_128), 0.0f);
    float _139 = max(_134 + abs(_130), 0.0f);
    float _146 = clamp(sqrt((_139 * _139) + (_138 * _138)) * 20.0f, 0.0f, 1.0f);
    float _153 = ((_146 * _146) * cb6[0u].x) * (3.0f - (_146 * 2.0f));
    float _154 = _153 * 0.699999988079071044921875f;
    float _157 = ceil(_154) - _154;
    float _160 = (_157 * 50.0f) + 1.0f;
    float _169 = (((cos(cb0[0u].x) * 2.0f) + 200.0f) * _157) + 1.0f;
    float _181 = frac(floor(_160 * _88) * 0.103100001811981201171875f);
    float _182 = frac(floor(_169 * _89) * 0.103100001811981201171875f);
    float _183 = _182 + 33.3300018310546875f;
    float _185 = _181 + 33.3300018310546875f;
    float _186 = dot(float3(_181, _182, _181), float3(_183, _185, _185));
    float _192 = _182 + _181;
    float _195 = frac((_192 + (_186 * 2.0f)) * (_186 + _181));
    float _220 = abs(sin((_153 * 0.1680000126361846923828125f) * cb0[0u].x));
    float _225 = (_153 * 0.14000000059604644775390625f) + 1.0f;
    float _231 = dot(float3(_182, _181, _182), float3(_185, _183, _183));
    float _244 = (floor(frac(frac((_192 + (_231 * 2.0f)) * (_231 + _182)) + _220) * _225) * (1.0f / (((cos(frac(_195 + abs(sin(cb0[0u].x * 5000.0f))) * cb0[0u].x) * 0.0199999995529651641845703125f) + 1.0f) * _169))) + _89;
    float _246 = _244 * cb6[16u].w;
    float _255 = frac(round((_153 * 0.125f) * _246) * 0.103100001811981201171875f);
    float _256 = frac((_153 * 2.0620000362396240234375f) * cb0[0u].x);
    float _257 = _256 + 33.3300018310546875f;
    float _258 = _255 + 33.3300018310546875f;
    float _259 = dot(float3(_255, _256, _255), float3(_257, _258, _258));
    float _273 = frac(round((_153 * 0.012500000186264514923095703125f) * _246) * 0.103100001811981201171875f);
    float _274 = _273 + 33.3300018310546875f;
    float _275 = dot(float3(_273, _256, _273), float3(_257, _274, _274));
    float _292 = _126 ? ((((cb6[16u].z * ((floor(frac(_195 + _220) * _225) * (1.0f / (((sin(frac(_195 + abs(sin(cb0[0u].x * 100.0f))) * cb0[0u].x) * 0.0199999995529651641845703125f) + 1.0f) * _160))) + _88)) + 2.0f) + ((((_153 * _153) * 960.0f) * frac(((_256 + _255) + (_259 * 2.0f)) * (_259 + _255))) * frac(((_256 + _273) + (_275 * 2.0f)) * (_275 + _273)))) / cb6[16u].z) : _88;
    float _293 = _126 ? _244 : _89;
    bool _294 = cb6[0u].y > 0.0f;
    bool _296 = cb6[16u].x > 0.0f;
    float _1096;
    float _1097;
    float _1098;
    float _1100;
    float _1102;
    if (_294) {
      float _325 = floor(_292 * 2.5f) * 0.4000000059604644775390625f;
      float _327 = floor(_293 * 10.0f) * 0.100000001490116119384765625f;
      float _329 = _325 + 0.20000000298023223876953125f;
      float _331 = _327 + 0.0500000007450580596923828125f;
      float _335 = floor((cb0[0u].x * 2.0f) + (cb6[0u].y * 20.0f));
      float _336 = _335 * 0.00999999977648258209228515625f;
      float _350 = _329 + (((_336 + 1.0f) - (floor(_335 * 9.9999997473787516355514526367188e-05f) * 100.0f)) * 0.00999999977648258209228515625f);
      float _351 = _331 + (((_335 + 1.0f) - (floor(_336) * 100.0f)) * 0.00999999977648258209228515625f);
      float _361 = frac(_350 * 0.103100001811981201171875f);
      float _362 = frac(_351 * 0.103100001811981201171875f);
      float _364 = _361 + 33.3300018310546875f;
      float _365 = dot(float3(_361, _362, _361), float3(_362 + 33.3300018310546875f, _364, _364));
      float _373 = frac(((_362 + _361) + (_365 * 2.0f)) * (_365 + _361));
      float _376 = ((1.0f - _373) * ((cb6[0u].y * 0.75f) + (-0.100000001490116119384765625f))) + _373;
      float _379 = round(_376 - (_376 * (0.5f - (cb6[0u].y * 0.375f))));
      float _380 = _379 * _379;
      float _381 = _292 - _329;
      float _382 = _293 - _331;
      float _383 = _329 * _350;
      float _384 = _331 * _351;
      float _389 = (_325 + 0.300000011920928955078125f) * _350;
      float _390 = (_327 + 0.1500000059604644775390625f) * _351;
      float _393 = frac(_383 * 0.103100001811981201171875f);
      float _394 = frac(_384 * 0.103100001811981201171875f);
      float _396 = _393 + 33.3300018310546875f;
      float _397 = dot(float3(_393, _394, _393), float3(_394 + 33.3300018310546875f, _396, _396));
      float _410 = frac((_383 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _411 = frac((_384 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _413 = _410 + 33.3300018310546875f;
      float _414 = dot(float3(_410, _411, _410), float3(_411 + 33.3300018310546875f, _413, _413));
      float _428 = floor(frac(((_394 + _393) + (_397 * 2.0f)) * (_397 + _393)) * 3.25f) * 0.100000001490116119384765625f;
      float _429 = floor(frac(((_411 + _410) + (_414 * 2.0f)) * (_414 + _410)) * 3.25f) * 0.02500000037252902984619140625f;
      float _431 = _428 + (-0.20000000298023223876953125f);
      float _433 = _429 + (-0.0500000007450580596923828125f);
      float _437 = frac(_389 * 0.103100001811981201171875f);
      float _438 = frac(_390 * 0.103100001811981201171875f);
      float _440 = _437 + 33.3300018310546875f;
      float _441 = dot(float3(_437, _438, _437), float3(_438 + 33.3300018310546875f, _440, _440));
      float _454 = frac((_389 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _455 = frac((_390 + 0.100000001490116119384765625f) * 0.103100001811981201171875f);
      float _457 = _454 + 33.3300018310546875f;
      float _458 = dot(float3(_454, _455, _454), float3(_455 + 33.3300018310546875f, _457, _457));
      float _471 = floor(frac(((_438 + _437) + (_441 * 2.0f)) * (_441 + _437)) * 3.25f) * 0.100000001490116119384765625f;
      float _472 = floor(frac(((_455 + _454) + (_458 * 2.0f)) * (_458 + _454)) * 3.25f) * 0.02500000037252902984619140625f;
      float _473 = _471 + (-0.20000000298023223876953125f);
      float _474 = _472 + (-0.0500000007450580596923828125f);
      float _477 = _381 - _431;
      float _478 = _382 - _433;
      float _488 = (-0.0250000059604644775390625f) - _381;
      float _490 = _488 + _428;
      float _491 = (-0.006250001490116119384765625f) - _382;
      float _493 = _491 + _429;
      uint _508 = (((((uint(_490 > 0.0f) + ((_490 < 0.0f) ? 4294967295u : 0u)) + ((_477 < 0.0f) ? 4294967295u : 0u)) + uint(_477 > 0.0f)) + ((_478 < 0.0f) ? 4294967295u : 0u)) + uint(_478 > 0.0f)) + (uint(_493 > 0.0f) - uint(_493 < 0.0f));
      float _516 = min(float(int(uint(int(_508) > int(3u)) - uint(int(_508) < int(3u)))), 0.0f);
      float _521 = _381 - _473;
      float _522 = _382 - _474;
      float _531 = _488 + _471;
      float _532 = _491 + _472;
      uint _547 = (((((uint(_531 > 0.0f) + ((_531 < 0.0f) ? 4294967295u : 0u)) + ((_521 < 0.0f) ? 4294967295u : 0u)) + uint(_521 > 0.0f)) + ((_522 < 0.0f) ? 4294967295u : 0u)) + uint(_522 > 0.0f)) + (uint(_532 > 0.0f) - uint(_532 < 0.0f));
      float _554 = min(float(int(uint(int(_547) > int(3u)) - uint(int(_547) < int(3u)))), 0.0f);
      float _561 = _292 + ((_380 * (((_431 - _473) * _554) + ((_473 - _431) * _516))) * 1.2000000476837158203125f);
      float _565 = _293 + ((_380 * (((_433 - _474) * _554) + ((_474 - _433) * _516))) * 1.2000000476837158203125f);
      uint _566 = uint(_88);
      uint _567 = uint(_89);
      float4 _568 = _8.Load(int3(uint2(_566, _567), 0u));
      float _570 = _568.y;
      float _878;
      if (_296) {
        uint _797 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * float(_566)), uint(cb12[79u].y * float(_567))), 0u)).y & 31u);
        float4 _800 = _14.Load(int3(uint2(_566 & 255u, _567 & 255u), 0u));
        float _803 = _800.y;
        float _807 = ((_800.x + _803) + _800.z) * 0.3333333432674407958984375f;
        float _808 = cb6[16u].x * _570;
        float _815 = _803 - _807;
        float _817 = _807 + (-0.5f);
        uint4 _823 = asuint(cb6[21u]);
        float _872 = (((((((_817 + (cb6[22u].w * _815)) * cb6[22u].y) * float(min((_823.x & _797), 1u))) + 1.0f) * (_808 / max(1.0f - _808, 9.9999999747524270787835121154785e-07f))) * ((((_817 + (cb6[23u].w * _815)) * cb6[23u].y) * float(min((_823.y & _797), 1u))) + 1.0f)) * ((((_817 + (cb6[24u].w * _815)) * cb6[24u].y) * float(min((_823.z & _797), 1u))) + 1.0f)) * ((((_817 + (cb6[25u].w * _815)) * cb6[25u].y) * float(min((_823.w & _797), 1u))) + 1.0f);
        _878 = cb6[16u].y * (_872 / max(_872 + 1.0f, 1.0f));
      } else {
        _878 = _570;
      }
      float _880 = _878 * cb6[0u].y;
      float _882 = (_561 + (-0.5f)) + _880;
      float _884 = (0.5f - _565) + _880;
      float _886 = atan(_884 / _882);
      bool _891 = _882 < 0.0f;
      bool _892 = _882 == 0.0f;
      bool _893 = _884 >= 0.0f;
      bool _894 = _884 < 0.0f;
      float _908 = sqrt((_882 * _882) + (_884 * _884));
      float _911 = ((_892 && _893) ? 1.57079637050628662109375f : ((_892 && _894) ? (-1.57079637050628662109375f) : ((_891 && _894) ? (_886 + (-3.1415927410125732421875f)) : ((_891 && _893) ? (_886 + 3.1415927410125732421875f) : _886)))) + clamp(cb6[0u].y * (_878 * 0.5f), 0.0f, 1.0f);
      uint _922 = uint(cb6[16u].z * frac((cos(_911) * _908) + 0.5f));
      uint _923 = uint(cb6[16u].w * frac(0.5f - (sin(_911) * _908)));
      float4 _924 = _8.Load(int3(uint2(_922, _923), 0u));
      float _926 = _924.x;
      float _927 = _924.y;
      float _928 = _924.z;
      float frontier_phi_14_12_ladder;
      float frontier_phi_14_12_ladder_1;
      float frontier_phi_14_12_ladder_2;
      float frontier_phi_14_12_ladder_3;
      float frontier_phi_14_12_ladder_4;
      if (_296) {
        uint _1265 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * float(_922)), uint(cb12[79u].y * float(_923))), 0u)).y & 31u);
        float4 _1268 = _14.Load(int3(uint2(_922 & 255u, _923 & 255u), 0u));
        float _1270 = _1268.x;
        float _1271 = _1268.y;
        float _1272 = _1268.z;
        float _1275 = ((_1270 + _1271) + _1272) * 0.3333333432674407958984375f;
        float _1276 = cb6[16u].x * _926;
        float _1277 = cb6[16u].x * _927;
        float _1278 = cb6[16u].x * _928;
        float _1291 = _1270 - _1275;
        float _1292 = _1271 - _1275;
        float _1293 = _1272 - _1275;
        float _1297 = _1275 + (-0.5f);
        uint4 _1309 = asuint(cb6[21u]);
        float _1313 = float(min((_1309.x & _1265), 1u));
        float _1341 = float(min((_1309.y & _1265), 1u));
        float _1369 = float(min((_1309.z & _1265), 1u));
        float _1397 = float(min((_1309.w & _1265), 1u));
        float _1404 = (((((((_1297 + (cb6[22u].w * _1291)) * cb6[22u].x) * _1313) + 1.0f) * (_1276 / max(1.0f - _1276, 9.9999999747524270787835121154785e-07f))) * ((((_1297 + (cb6[23u].w * _1291)) * cb6[23u].x) * _1341) + 1.0f)) * ((((_1297 + (cb6[24u].w * _1291)) * cb6[24u].x) * _1369) + 1.0f)) * ((((_1297 + (cb6[25u].w * _1291)) * cb6[25u].x) * _1397) + 1.0f);
        float _1405 = (((((((_1297 + (cb6[22u].w * _1292)) * cb6[22u].y) * _1313) + 1.0f) * (_1277 / max(1.0f - _1277, 9.9999999747524270787835121154785e-07f))) * ((((_1297 + (cb6[23u].w * _1292)) * cb6[23u].y) * _1341) + 1.0f)) * ((((_1297 + (cb6[24u].w * _1292)) * cb6[24u].y) * _1369) + 1.0f)) * ((((_1297 + (cb6[25u].w * _1292)) * cb6[25u].y) * _1397) + 1.0f);
        float _1406 = (((((((_1297 + (cb6[22u].w * _1293)) * cb6[22u].z) * _1313) + 1.0f) * (_1278 / max(1.0f - _1278, 9.9999999747524270787835121154785e-07f))) * ((((_1297 + (cb6[23u].w * _1293)) * cb6[23u].z) * _1341) + 1.0f)) * ((((_1297 + (cb6[24u].w * _1293)) * cb6[24u].z) * _1369) + 1.0f)) * ((((_1297 + (cb6[25u].w * _1293)) * cb6[25u].z) * _1397) + 1.0f);
        frontier_phi_14_12_ladder = cb6[16u].y * (_1406 / max(_1406 + 1.0f, 1.0f));
        frontier_phi_14_12_ladder_1 = cb6[16u].y * (_1405 / max(_1405 + 1.0f, 1.0f));
        frontier_phi_14_12_ladder_2 = cb6[16u].y * (_1404 / max(_1404 + 1.0f, 1.0f));
        frontier_phi_14_12_ladder_3 = _565;
        frontier_phi_14_12_ladder_4 = _561;
      } else {
        frontier_phi_14_12_ladder = _928;
        frontier_phi_14_12_ladder_1 = _927;
        frontier_phi_14_12_ladder_2 = _926;
        frontier_phi_14_12_ladder_3 = _565;
        frontier_phi_14_12_ladder_4 = _561;
      }
      _1096 = frontier_phi_14_12_ladder_4;
      _1097 = frontier_phi_14_12_ladder_3;
      _1098 = frontier_phi_14_12_ladder_2;
      _1100 = frontier_phi_14_12_ladder_1;
      _1102 = frontier_phi_14_12_ladder;
    } else {
      float4 _571 = _8.Load(int3(uint2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), 0u));
      float _573 = _571.x;
      float _574 = _571.y;
      float _575 = _571.z;
      float frontier_phi_14_6_ladder;
      float frontier_phi_14_6_ladder_1;
      float frontier_phi_14_6_ladder_2;
      float frontier_phi_14_6_ladder_3;
      float frontier_phi_14_6_ladder_4;
      if (_296) {
        float4 _944 = _14.Load(int3(uint2(gl_GlobalInvocationID.x & 255u, gl_GlobalInvocationID.y & 255u), 0u));
        // Custom: Add Film Grain
        [branch]
        if (injectedData.fxFilmGrain) {
          float3 grainedColor = renodx::effects::ApplyFilmGrain(
              float3(_573, _574, _575),
              _944.xy,
              frac(cb0[0u].x / 1000.f),
              injectedData.fxFilmGrain * 0.03f,
              (cb6[12u].y == 1.f) ? 1.f : (203.f / 100.f));
          frontier_phi_14_6_ladder = grainedColor.b;
          frontier_phi_14_6_ladder_1 = grainedColor.g;
          frontier_phi_14_6_ladder_2 = grainedColor.r;
          frontier_phi_14_6_ladder_3 = _293;
          frontier_phi_14_6_ladder_4 = _292;
        } else {
          uint _941 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * _77), uint(cb12[79u].y * _78)), 0u)).y & 31u);
          float _946 = _944.x;
          float _947 = _944.y;
          float _948 = _944.z;
          float _951 = ((_946 + _947) + _948) * 0.3333333432674407958984375f;
          float _952 = cb6[16u].x * _573;
          float _953 = cb6[16u].x * _574;
          float _954 = cb6[16u].x * _575;
          float _967 = _946 - _951;
          float _968 = _947 - _951;
          float _969 = _948 - _951;
          float _973 = _951 + (-0.5f);
          uint4 _985 = asuint(cb6[21u]);
          float _989 = float(min((_985.x & _941), 1u));
          float _1017 = float(min((_985.y & _941), 1u));
          float _1045 = float(min((_985.z & _941), 1u));
          float _1073 = float(min((_985.w & _941), 1u));
          float _1080 = (((((((_973 + (cb6[22u].w * _967)) * cb6[22u].x) * _989) + 1.0f) * (_952 / max(1.0f - _952, 9.9999999747524270787835121154785e-07f))) * ((((_973 + (cb6[23u].w * _967)) * cb6[23u].x) * _1017) + 1.0f)) * ((((_973 + (cb6[24u].w * _967)) * cb6[24u].x) * _1045) + 1.0f)) * ((((_973 + (cb6[25u].w * _967)) * cb6[25u].x) * _1073) + 1.0f);
          float _1081 = (((((((_973 + (cb6[22u].w * _968)) * cb6[22u].y) * _989) + 1.0f) * (_953 / max(1.0f - _953, 9.9999999747524270787835121154785e-07f))) * ((((_973 + (cb6[23u].w * _968)) * cb6[23u].y) * _1017) + 1.0f)) * ((((_973 + (cb6[24u].w * _968)) * cb6[24u].y) * _1045) + 1.0f)) * ((((_973 + (cb6[25u].w * _968)) * cb6[25u].y) * _1073) + 1.0f);
          float _1082 = (((((((_973 + (cb6[22u].w * _969)) * cb6[22u].z) * _989) + 1.0f) * (_954 / max(1.0f - _954, 9.9999999747524270787835121154785e-07f))) * ((((_973 + (cb6[23u].w * _969)) * cb6[23u].z) * _1017) + 1.0f)) * ((((_973 + (cb6[24u].w * _969)) * cb6[24u].z) * _1045) + 1.0f)) * ((((_973 + (cb6[25u].w * _969)) * cb6[25u].z) * _1073) + 1.0f);
          frontier_phi_14_6_ladder = cb6[16u].y * (_1082 / max(_1082 + 1.0f, 1.0f));
          frontier_phi_14_6_ladder_1 = cb6[16u].y * (_1081 / max(_1081 + 1.0f, 1.0f));
          frontier_phi_14_6_ladder_2 = cb6[16u].y * (_1080 / max(_1080 + 1.0f, 1.0f));
          frontier_phi_14_6_ladder_3 = _293;
          frontier_phi_14_6_ladder_4 = _292;
        }
      } else {
        frontier_phi_14_6_ladder = _575;
        frontier_phi_14_6_ladder_1 = _574;
        frontier_phi_14_6_ladder_2 = _573;
        frontier_phi_14_6_ladder_3 = _293;
        frontier_phi_14_6_ladder_4 = _292;
      }
      _1096 = frontier_phi_14_6_ladder_4;
      _1097 = frontier_phi_14_6_ladder_3;
      _1098 = frontier_phi_14_6_ladder_2;
      _1100 = frontier_phi_14_6_ladder_1;
      _1102 = frontier_phi_14_6_ladder;
    }
    bool _1112 = cb6[1u].z > 0.0f;
    float _1424;
    if ((asuint(cb6[17u]).z != 0u) && _1112) {
      _1424 = (cb6[1u].z * (asfloat(_25.Load(6u).x) + (-1.0f))) + 1.0f;
    } else {
      _1424 = 1.0f;
    }
    float _1429 = _1096 + (-0.5f);
    float _1431 = (_1097 + (-0.5f)) * 2.0f;
    float _1439 = _1096 - (((_1431 * _1431) * _1429) * cb6[3u].x);
    float _1440 = _1097 - ((((_1429 * _1429) * 2.0f) * _1431) * cb6[3u].y);
    float _1443 = (_1439 + (-0.5f)) * 2.0f;
    float _1444 = (_1440 + (-0.5f)) * 2.0f;
    float _1446 = cb0[0u].x * 0.004999999888241291046142578125f;
    float _1449 = (clamp(_1440, 0.0f, 1.0f) + 1.0f) - _1446;
    float _1454 = clamp(abs(cos(_1449 * 650.0f)), 0.0f, 1.0f);
    float _1460 = clamp(_1439, 0.0f, 1.0f) + 1.0f;
    float _1461 = _1460 - _1446;
    float _1467 = sin(cb0[0u].x);
    float _1468 = _1460 + _1446;
    float _1483 = clamp(((((_1467 + _1467) * 0.100000001490116119384765625f) + 0.540000021457672119140625f) + ((clamp(abs(cos(_1468 * 550.0f)), 0.0f, 1.0f) + clamp(abs(cos(_1461 * 250.0f)), 0.0f, 1.0f)) * 0.1799999773502349853515625f)) * ((_1454 * 0.39999997615814208984375f) + 0.60000002384185791015625f), 0.0f, 1.0f);
    float _1712;
    float _1714;
    float _1716;
    if (cb6[1u].w > 0.0f) {
      float4 _1685 = _18.SampleLevel(_50, float2(_88, _89), 0.0f);
      float _1696 = (clamp(abs(cos(_1449 * 250.0f)), 0.0f, 1.0f) * 0.0007999999797903001308441162109375f) + 0.00120000005699694156646728515625f;
      float _1703 = (_1454 * 0.001199999940581619739532470703125f) + 0.001800000085495412349700927734375f;
      float _1705 = (_1696 + _1685.x) - _1703;
      float _1706 = (_1696 + _1685.y) - _1703;
      float _1707 = (_1696 + _1685.z) - _1703;
      float _1873;
      float _1874;
      float _1875;
      if (cb6[6u].x > 0.0f) {
        float _1863 = clamp((sqrt((_130 * _130) + (_128 * _128)) - cb6[5u].z) / (cb6[5u].w - cb6[5u].z), 0.0f, 1.0f);
        float _1869 = 1.0f - (((_1863 * _1863) * (3.0f - (_1863 * 2.0f))) * cb6[6u].x);
        _1873 = _1869 * _1705;
        _1874 = _1869 * _1706;
        _1875 = _1869 * _1707;
      } else {
        _1873 = _1705;
        _1874 = _1706;
        _1875 = _1707;
      }
      float _1877 = dot(float3(_1873, _1874, _1875), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      _1712 = (((_1873 - _1877) * cb6[6u].y) + _1877) * cb6[1u].w;
      _1714 = (((_1874 - _1877) * cb6[6u].y) + _1877) * cb6[1u].w;
      _1716 = (((_1875 - _1877) * cb6[6u].y) + _1877) * cb6[1u].w;
    } else {
      _1712 = 0.0f;
      _1714 = 0.0f;
      _1716 = 0.0f;
    }
    float _1902;
    float _1903;
    float _1904;
    if (cb6[2u].x > 0.0f) {
      float4 _1891 = _17.SampleLevel(_50, float2(_1439, 1.0f - _1440), 0.0f);

      if (RENODX_GAMMA_CORRECTION >= 1.f) {
        _1891 = renodx::color::correct::Gamma(max(0.f, _1891));
      }
      _1902 = (cb6[2u].x * _1891.x) + _1712;
      _1903 = (cb6[2u].x * _1891.y) + _1714;
      _1904 = (cb6[2u].x * _1891.z) + _1716;
    } else {
      _1902 = _1712;
      _1903 = _1714;
      _1904 = _1716;
    }
    float _2082;
    float _2083;
    float _2084;
    if (_1112) {
      float4 _2045 = _16.SampleLevel(_50, float2(_1096, _1097), 0.0f);
      float4 _2052 = _15.SampleLevel(_50, float2(_1096, _1097), 0.0f);
      float _2057 = _2052.w;
      float _2058 = 1.0f - _2057;
      float _2063 = (_2058 * _2045.w) + _2057;
      _2082 = (((_2063 * ((_2052.x - _1098) + (_2058 * _2045.x))) + _1098) * cb6[1u].z) + _1902;
      _2083 = (((_2063 * ((_2052.y - _1100) + (_2058 * _2045.y))) + _1100) * cb6[1u].z) + _1903;
      _2084 = (((_2063 * ((_2052.z - _1102) + (_2058 * _2045.z))) + _1102) * cb6[1u].z) + _1904;
    } else {
      _2082 = _1902;
      _2083 = _1903;
      _2084 = _1904;
    }
    float _2254;
    float _2256;
    float _2258;
    if (cb6[1u].x > 0.0f) {
      float _2161 = cb6[6u].w * _1443;
      float _2162 = cb6[6u].w * _1444;
      float4 _2166 = _13.SampleLevel(_50, float2(_2161 + _1439, _2162 + _1440), 0.0f);
      float4 _2170 = _13.SampleLevel(_50, float2(_1439, _1440), 0.0f);
      float4 _2177 = _13.SampleLevel(_50, float2(_1439 - _2161, _1440 - _2162), 0.0f);
      float4 _2192 = _13.SampleLevel(_50, float2((cb6[7u].x * _1443) + _1439, (cb6[7u].y * _1444) + _1440), 1.0f);
      float4 _2203 = _13.SampleLevel(_50, float2((cb6[7u].z * _1443) + _1439, (cb6[7u].w * _1444) + _1440), 2.0f);
      float4 _2218 = _13.SampleLevel(_50, float2((cb6[8u].x * _1443) + _1439, (cb6[8u].y * _1444) + _1440), 4.0f);

      if (RENODX_GAMMA_CORRECTION >= 1.f) {
        _2166 = renodx::color::correct::Gamma(max(0.f, _2166));
        _2170 = renodx::color::correct::Gamma(max(0.f, _2170));
        _2177 = renodx::color::correct::Gamma(max(0.f, _2177));
        _2192 = renodx::color::correct::Gamma(max(0.f, _2192));
        _2203 = renodx::color::correct::Gamma(max(0.f, _2203));
        _2218 = renodx::color::correct::Gamma(max(0.f, _2218));
      }

      float _2250 = 1.0f - (((_2170.w + _2166.w) + _2177.w) * 0.3333333432674407958984375f);
      float _2251 = clamp(_1483 * (((cb6[8u].w * _2203.x) + (cb6[8u].z * _2192.x)) + (cb6[9u].x * _2218.x)), 0.0f, 1.0f) * _2250;
      float _2252 = clamp(_1483 * (((cb6[8u].w * _2203.y) + (cb6[8u].z * _2192.y)) + (cb6[9u].x * _2218.y)), 0.0f, 1.0f) * _2250;
      float _2253 = clamp(_1483 * (((cb6[8u].w * _2203.z) + (cb6[8u].z * _2192.z)) + (cb6[9u].x * _2218.z)), 0.0f, 1.0f) * _2250;
      float _2345;
      float _2346;
      float _2347;
      if (_1112) {
        float _2341 = 1.0f - (dot(float3(cb6[1u].z * _1098, cb6[1u].z * _1100, cb6[1u].z * _1102), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f)) * 0.699999988079071044921875f);
        _2345 = _2341 * _2251;
        _2346 = _2341 * _2252;
        _2347 = _2341 * _2253;
      } else {
        _2345 = _2251;
        _2346 = _2252;
        _2347 = _2253;
      }
      float _2349 = dot(float3(_2345, _2346, _2347), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      float _2361 = cb6[1u].x * _1424;
      float _2375 = _1439 - cb6[3u].z;
      float _2376 = _1440 - cb6[3u].w;
      float4 _2382 = _13.SampleLevel(_50, float2(_2375, _2376), 0.0f);
      float _2384 = _2382.w;
      float _2397 = 1.0f - (cb6[4u].x * clamp(exp2(log2(abs((clamp(cb6[4u].y, 0.0f, 1.0f) * (_22.SampleLevel(_50, float2(_2375, _2376), cb6[4u].y + (-1.0f)).w - _2384)) + _2384)) * 0.819999992847442626953125f), 0.0f, 1.0f));
      float _2398 = _1467 * 0.00999999977648258209228515625f;
      float _2426 = (((clamp((cos((_2398 + _1440) * 1700.0f) + 1.0f) * 0.75f, 0.0f, 1.0f) * 0.00850000046193599700927734375f) + 0.00150000001303851604461669921875f) * (((_2398 + 0.540000021457672119140625f) + (_1467 * 0.100000001490116119384765625f)) + ((clamp(abs(cos(_1468 * 350.0f)), 0.0f, 1.0f) + clamp(abs(cos(_1461 * 350.0f)), 0.0f, 1.0f)) * 0.1799999773502349853515625f))) + 0.9900000095367431640625f;
      float _2428 = (_2166.x * 2.0f) * _2426;
      float _2429 = (_2170.y * 2.0f) * _2426;
      float _2430 = (_2177.z * 2.0f) * _2426;
      float _2431 = dot(float3(_2428, _2429, _2430), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      float _2458 = cb6[5u].x * _1424;
      float4 _2460 = _22.SampleLevel(_50, float2(_1439, _1440), cb6[5u].y);
      _2254 = (((((_2428 - _2431) * cb6[6u].z) + _2431) * _1424) + ((((_2361 * (((_2345 - _2349) * cb6[6u].z) + _2349)) + _2082) * _2250) * _2397)) + (_2460.x * _2458);
      _2256 = (((((_2429 - _2431) * cb6[6u].z) + _2431) * _1424) + ((((_2361 * (((_2346 - _2349) * cb6[6u].z) + _2349)) + _2083) * _2250) * _2397)) + (_2460.y * _2458);
      _2258 = (((((_2430 - _2431) * cb6[6u].z) + _2431) * _1424) + ((((_2361 * (((_2347 - _2349) * cb6[6u].z) + _2349)) + _2084) * _2250) * _2397)) + (_2460.z * _2458);
    } else {
      _2254 = _2082;
      _2256 = _2083;
      _2258 = _2084;
    }
    float _109;
    float _112;
    float _115;
    if (cb6[1u].y > 0.0f) {
      float4 _2468 = _13.Load(int3(uint2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), 0u));
      float _2474 = (_1424 * 2.0f) * cb6[1u].y;
      _109 = (_2474 * _2468.x) + _2254;
      _112 = (_2474 * _2468.y) + _2256;
      _115 = (_2474 * _2468.z) + _2258;
    } else {
      _109 = _2254;
      _112 = _2256;
      _115 = _2258;
    }
    float frontier_phi_1_59_ladder;
    float frontier_phi_1_59_ladder_1;
    float frontier_phi_1_59_ladder_2;
    if (_294) {
      float _2558;
      float _2560;
      float _2562;
      float _2564;
      float _2566;
      float _2568;
      uint _2570;
      _2558 = 1.0f;
      _2560 = 1.0f;
      _2562 = 1.0f;
      _2564 = ((_77 / cb6[16u].z) * 0.800000011920928955078125f) * (cb6[16u].z / cb6[16u].w);
      _2566 = (_78 / cb6[16u].w) * 5.0f;
      _2568 = 1.0f;
      _2570 = 1u;
      float _2559;
      float _2561;
      float _2563;
      for (;;) {
        // Looks like hash44
        float _2572 = float(int(_2570));
        float _2573 = _2572 + _2564;
        float _2574 = _2572 + _2566;
        float _2575 = floor(_2573);
        float _2576 = floor(_2574);
        float _2584 = frac(_2575 * 0.103100001811981201171875f);
        float _2585 = frac(_2576 * 0.10300000011920928955078125f);
        float _2586 = frac(_2575 * 0.097300000488758087158203125f);
        float _2587 = frac(_2576 * 0.109899997711181640625f);
        float _2592 = dot(float4(_2584, _2585, _2586, _2587), float4(_2587 + 33.3300018310546875f, _2586 + 33.3300018310546875f, _2584 + 33.3300018310546875f, _2585 + 33.3300018310546875f));
        float _2595 = _2592 + _2584;
        float _2596 = _2592 + _2585;
        float _2597 = _2592 + _2586;
        float _2598 = _2592 + _2587;
        float _2607 = frac((_2595 + _2596) * _2597);
        float _2608 = frac((_2595 + _2597) * _2596);
        float _2609 = frac((_2596 + _2597) * _2598);
        bool _2628 = frac((_2597 + _2598) * _2595) > 0.5f;
        _2559 = (_2628 ? _2607 : 1.0f) * _2558;
        _2561 = (_2628 ? _2608 : 1.0f) * _2560;
        _2563 = (_2628 ? _2609 : 1.0f) * _2562;
        uint _2571 = _2570 + 1u;
        if (_2571 == 15u) {
          break;
        } else {
          _2558 = _2559;
          _2560 = _2561;
          _2562 = _2563;
          _2564 = (((_2609 * 0.20000000298023223876953125f) * (frac(_2573) - _2568)) * frac(floor(((cb0[0u].x * 0.1500000059604644775390625f) + 300.0f) / _2607) * _2607)) + _2564;
          _2566 = ((_2609 * _2608) * (frac(_2574) - _2568)) + _2566;
          _2568 *= (-2.0f);
          _2570 = _2571;
        }
      }
      float _2646 = floor((cb0[0u].x * 2.0f) + cb6[0u].y);
      float _2647 = _2646 * 0.00999999977648258209228515625f;
      float _2657 = ((_2647 + 1.0f) - (floor(_2646 * 9.9999997473787516355514526367188e-05f) * 100.0f)) * 0.00999999977648258209228515625f;
      float _2658 = ((_2646 + 1.0f) - (floor(_2647) * 100.0f)) * 0.00999999977648258209228515625f;
      float _2663 = 0.5f - (cb6[0u].y * 0.375f);
      float _2664 = (cb6[0u].y * 0.75f) + (-0.100000001490116119384765625f);
      float _2667 = frac((((floor(_1096 * 10.0f) * 0.100000001490116119384765625f) + 0.0500000007450580596923828125f) + _2657) * 0.103100001811981201171875f);
      float _2668 = frac((((floor(_1097 * 33.33333587646484375f) * 0.02999999932944774627685546875f) + 0.014999999664723873138427734375f) + _2658) * 0.103100001811981201171875f);
      float _2670 = _2667 + 33.3300018310546875f;
      float _2671 = dot(float3(_2667, _2668, _2667), float3(_2668 + 33.3300018310546875f, _2670, _2670));
      float _2679 = frac(((_2668 + _2667) + (_2671 * 2.0f)) * (_2671 + _2667));
      float _2682 = ((1.0f - _2679) * _2664) + _2679;
      float _2703 = frac((((floor(_1096 * 11.111110687255859375f) * 0.0900000035762786865234375f) + 0.04500000178813934326171875f) + _2657) * 0.103100001811981201171875f);
      float _2704 = frac((((floor(_1097 * 25.0f) * 0.039999999105930328369140625f) + 0.0199999995529651641845703125f) + _2658) * 0.103100001811981201171875f);
      float _2706 = _2703 + 33.3300018310546875f;
      float _2707 = dot(float3(_2703, _2704, _2703), float3(_2704 + 33.3300018310546875f, _2706, _2706));
      float _2715 = frac(((_2704 + _2703) + (_2707 * 2.0f)) * (_2707 + _2703));
      float _2718 = ((1.0f - _2715) * _2664) + _2715;
      float _2722 = max(0.0f, _2559);
      float _2723 = max(0.0f, _2561);
      float _2724 = max(0.0f, _2563);
      float _2726 = max(_2722, max(_2723, _2724));
      float _2727 = _2726 * _2726;
      float _2728 = _2722 * 2.0f;
      float _2729 = _2723 * 0.100000001490116119384765625f;
      float _2730 = _2724 * 0.25f;
      float _2738 = clamp((round(_2682 - (_2682 * _2663)) * 5.0f) * round(_2718 - (_2718 * _2663)), 0.0f, 1.0f) * 3.0f;
      frontier_phi_1_59_ladder = (((_2729 - _112) + (_2727 * _2729)) * _2738) + _112;
      frontier_phi_1_59_ladder_1 = (((_2728 - _109) + (_2727 * _2728)) * _2738) + _109;
      frontier_phi_1_59_ladder_2 = (((_2730 - _115) + (_2727 * _2730)) * _2738) + _115;
    } else {
      frontier_phi_1_59_ladder = _112;
      frontier_phi_1_59_ladder_1 = _109;
      frontier_phi_1_59_ladder_2 = _115;
    }
    _106 = frontier_phi_1_59_ladder_1;
    _110 = frontier_phi_1_59_ladder;
    _113 = frontier_phi_1_59_ladder_2;
  }
  bool _122 = asuint(cb6[19u]).x == 0u;
  float _297;
  float _300;
  float _302;
  if (_122) {
    _297 = _298;
    _300 = _298;
    _302 = _298;
  } else {
    float4 _310 = _8.Load(int3(uint2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), 0u));
    float _313 = _310.x;
    float _314 = _310.y;
    float _315 = _310.z;
    float _780;
    float _781;
    float _782;
    if (cb6[16u].x > 0.0f) {
      float4 _621 = _14.Load(int3(uint2(gl_GlobalInvocationID.x & 255u, gl_GlobalInvocationID.y & 255u), 0u));
      if (injectedData.fxFilmGrain) {
        float3 grainedColor = renodx::effects::ApplyFilmGrain(
            float3(_313, _314, _315),
            _621.xy,
            frac(cb0[0u].x / 1000.f),
            injectedData.fxFilmGrain * 0.03f,
            (cb6[12u].y == 1.f) ? 1.f : (203.f / 100.f));
        _780 = grainedColor.r;
        _781 = grainedColor.g;
        _782 = grainedColor.b;
      } else {
        uint _617 = 1u << (_12.Load(int3(uint2(uint(cb12[79u].x * _77), uint(cb12[79u].y * _78)), 0u)).y & 31u);
        float _623 = _621.x;
        float _624 = _621.y;
        float _625 = _621.z;
        float _628 = ((_623 + _624) + _625) * 0.3333333432674407958984375f;
        float _630 = cb6[16u].x * _313;
        float _631 = cb6[16u].x * _314;
        float _632 = cb6[16u].x * _315;
        float _647 = _623 - _628;
        float _648 = _624 - _628;
        float _649 = _625 - _628;
        float _653 = _628 + (-0.5f);
        uint4 _666 = asuint(cb6[21u]);
        float _670 = float(min((_666.x & _617), 1u));
        float _699 = float(min((_666.y & _617), 1u));
        float _728 = float(min((_666.z & _617), 1u));
        float _757 = float(min((_666.w & _617), 1u));
        float _764 = (((((((_653 + (cb6[22u].w * _647)) * cb6[22u].x) * _670) + 1.0f) * (_630 / max(1.0f - _630, 9.9999999747524270787835121154785e-07f))) * ((((_653 + (cb6[23u].w * _647)) * cb6[23u].x) * _699) + 1.0f)) * ((((_653 + (cb6[24u].w * _647)) * cb6[24u].x) * _728) + 1.0f)) * ((((_653 + (cb6[25u].w * _647)) * cb6[25u].x) * _757) + 1.0f);
        float _765 = (((((((_653 + (cb6[22u].w * _648)) * cb6[22u].y) * _670) + 1.0f) * (_631 / max(1.0f - _631, 9.9999999747524270787835121154785e-07f))) * ((((_653 + (cb6[23u].w * _648)) * cb6[23u].y) * _699) + 1.0f)) * ((((_653 + (cb6[24u].w * _648)) * cb6[24u].y) * _728) + 1.0f)) * ((((_653 + (cb6[25u].w * _648)) * cb6[25u].y) * _757) + 1.0f);
        float _766 = (((((((_653 + (cb6[22u].w * _649)) * cb6[22u].z) * _670) + 1.0f) * (_632 / max(1.0f - _632, 9.9999999747524270787835121154785e-07f))) * ((((_653 + (cb6[23u].w * _649)) * cb6[23u].z) * _699) + 1.0f)) * ((((_653 + (cb6[24u].w * _649)) * cb6[24u].z) * _728) + 1.0f)) * ((((_653 + (cb6[25u].w * _649)) * cb6[25u].z) * _757) + 1.0f);
        _780 = cb6[16u].y * (_764 / max(_764 + 1.0f, 1.0f));
        _781 = cb6[16u].y * (_765 / max(_765 + 1.0f, 1.0f));
        _782 = cb6[16u].y * (_766 / max(_766 + 1.0f, 1.0f));
      }
    } else {
      _780 = _313;
      _781 = _314;
      _782 = _315;
    }
    float frontier_phi_3_10_ladder;
    float frontier_phi_3_10_ladder_1;
    float frontier_phi_3_10_ladder_2;
    if (_105) {
      frontier_phi_3_10_ladder = 0.0f;
      frontier_phi_3_10_ladder_1 = 0.0f;
      frontier_phi_3_10_ladder_2 = 0.0f;
    } else {
      float4 _1217 = _16.SampleLevel(_50, float2(_88, _89), 0.0f);
      float4 _1224 = _15.SampleLevel(_50, float2(_88, _89), 0.0f);
      float _1229 = _1224.w;
      float _1230 = 1.0f - _1229;
      float _1235 = (_1230 * _1217.w) + _1229;
      frontier_phi_3_10_ladder = ((_1235 * ((_1224.z - _782) + (_1230 * _1217.z))) + _782) * cb6[1u].z;
      frontier_phi_3_10_ladder_1 = ((_1235 * ((_1224.y - _781) + (_1230 * _1217.y))) + _781) * cb6[1u].z;
      frontier_phi_3_10_ladder_2 = ((_1235 * ((_1224.x - _780) + (_1230 * _1217.x))) + _780) * cb6[1u].z;
    }
    _297 = frontier_phi_3_10_ladder_2;
    _300 = frontier_phi_3_10_ladder_1;
    _302 = frontier_phi_3_10_ladder;
  }
  float _576;
  float _578;
  float _580;
  if (asuint(cb6[18u]).w == 0u) {
    _576 = _106;
    _578 = _110;
    _580 = _113;
  } else {
    uint4 _591 = asuint(cb6[10u]);
    uint _592 = _591.x;
    uint _594 = _591.z;
    uint _597 = _591.y;
    uint _600 = _591.w;
    float frontier_phi_7_8_ladder;
    float frontier_phi_7_8_ladder_1;
    float frontier_phi_7_8_ladder_2;
    if ((((gl_GlobalInvocationID.x >= _592) && (gl_GlobalInvocationID.x < _594)) && (gl_GlobalInvocationID.y >= _597)) && (gl_GlobalInvocationID.y < _600)) {
      float _1167 = float(_594 - _592);
      float _1168 = float(_600 - _597);
      float _1169 = (_77 - float(int(_592))) / _1167;
      float _1170 = (_78 - float(int(_597))) / _1168;
      float4 _1192 = _26.SampleLevel(_50, float2((cb6[11u].z * _1169) + cb6[11u].x, (cb6[11u].w * _1170) + cb6[11u].y), cb6[15u].w);
      float _1198 = _1192.x * cb6[12u].z;
      float _1199 = _1192.y * cb6[12u].z;
      float _1200 = _1192.z * cb6[12u].z;
      float _1212 = (((_1169 * 2.0f) + (-1.0f)) * _1167) * cb6[13u].z;
      float _1213 = (((_1170 * 2.0f) + (-1.0f)) * _1168) * cb6[13u].z;
      float _1632;
      float _1633;
      float _1634;
      if (cb6[13u].w > 0.0f) {
        float _1619 = exp2((-0.0f) - (cb6[14u].w * log2(abs((dot(float2(_1212, _1213), float2(_1212, _1213)) * cb6[13u].w) + 1.0f))));
        _1632 = ((_1198 - cb6[14u].x) * _1619) + cb6[14u].x;
        _1633 = ((_1199 - cb6[14u].y) * _1619) + cb6[14u].y;
        _1634 = ((_1200 - cb6[14u].z) * _1619) + cb6[14u].z;
      } else {
        _1632 = _1198;
        _1633 = _1199;
        _1634 = _1200;
      }
      float _1636 = cb6[13u].x * _1632;
      float _1637 = cb6[13u].x * _1633;
      float _1638 = cb6[13u].x * _1634;
      float3 _1652;
      if (injectedData.processingInternalSampling == 1.f) {
        float3 pq_color = renodx::color::pq::Encode(float3(_1636, _1637, _1638), 100.f);
        _1652.rgb = renodx::lut::Sample(_21, _49, pq_color).rgb;
      } else {
        _1652.rgb = _21.SampleLevel(_49, float3((cb6[12u].x * log2(_1636)) + cb6[12u].y, (cb6[12u].x * log2(_1637)) + cb6[12u].y, (cb6[12u].x * log2(_1638)) + cb6[12u].y), 0.0f).rgb;
      }
      float _1654 = _1652.x;
      float _1655 = _1652.y;
      float _1656 = _1652.z;
      float _1657 = dot(float3(_1654, _1655, _1656), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
      float _1669 = max(9.9999997473787516355514526367188e-05f, dot(float3(_1636, _1637, _1638), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f)));
      frontier_phi_7_8_ladder = ((cb6[12u].w * (((_1657 * _1637) / _1669) - _1655)) + _1655) * cb6[13u].y;
      frontier_phi_7_8_ladder_1 = ((cb6[12u].w * (((_1657 * _1636) / _1669) - _1654)) + _1654) * cb6[13u].y;
      frontier_phi_7_8_ladder_2 = ((cb6[12u].w * (((_1657 * _1638) / _1669) - _1656)) + _1656) * cb6[13u].y;

    } else {
      frontier_phi_7_8_ladder = _110;
      frontier_phi_7_8_ladder_1 = _106;
      frontier_phi_7_8_ladder_2 = _113;
    }
    _576 = frontier_phi_7_8_ladder_1;
    _578 = frontier_phi_7_8_ladder;
    _580 = frontier_phi_7_8_ladder_2;
  }

  // Custom: Switch to colormath
  /*
  uint4 _585 = asuint(cb6[17u]);
  float _1114;
  float _1120;
  float _1126;
  if (_585.y == 0u) {
    _1114 = _576;
    _1120 = _578;
    _1126 = _580;
  } else {
    uint _1159 = _585.w;
    float _1549;
    float _1550;
    float _1551;
    if (cb6[18u].z != 1.0f) {
      _1549 = exp2(log2(abs(_576)) * cb6[18u].z);
      _1550 = exp2(log2(abs(_578)) * cb6[18u].z);
      _1551 = exp2(log2(abs(_580)) * cb6[18u].z);
    } else {
      _1549 = _576;
      _1550 = _578;
      _1551 = _580;
    }
    float _1561 = frac(_77 * 211.1488037109375f);
    float _1562 = frac(_78 * 210.944000244140625f);
    float _1563 = frac(cb0[0u].x * 6.227200031280517578125f);
    float _1566 = _1563 + 33.3300018310546875f;
    float _1567 = dot(float3(_1561, _1562, _1563), float3(_1562 + 33.3300018310546875f, _1561 + 33.3300018310546875f, _1566));
    float _1570 = _1567 + _1561;
    float _1571 = _1567 + _1562;
    float _1573 = _1570 + _1571;
    float _1578 = frac(_1573 * (_1567 + _1563));
    float _1579 = frac((_1570 * 2.0f) * _1571);
    float _1580 = frac(_1573 * _1570);
    float _1586 = frac((_77 + 64.0f) * 211.1488037109375f);
    float _1587 = frac((_78 + 64.0f) * 210.944000244140625f);
    float _1590 = dot(float3(_1586, _1587, _1563), float3(_1587 + 33.3300018310546875f, _1586 + 33.3300018310546875f, _1566));
    float _1593 = _1590 + _1586;
    float _1594 = _1590 + _1587;
    float _1596 = _1593 + _1594;
    float _1601 = frac(_1596 * (_1590 + _1563));
    float _1602 = frac((_1593 * 2.0f) * _1594);
    float _1603 = frac(_1596 * _1593);
    float frontier_phi_15_25_ladder;
    float frontier_phi_15_25_ladder_1;
    float frontier_phi_15_25_ladder_2;
    if (_1159 == 0u) {
      float _1818 = (_1549 <= 0.003130800090730190277099609375f) ? (_1549 * 12.9200000762939453125f) : ((exp2(log2(abs(_1549)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1819 = (_1550 <= 0.003130800090730190277099609375f) ? (_1550 * 12.9200000762939453125f) : ((exp2(log2(abs(_1550)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1820 = (_1551 <= 0.003130800090730190277099609375f) ? (_1551 * 12.9200000762939453125f) : ((exp2(log2(abs(_1551)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1821 = _1818 * 510.0f;
      float _1823 = _1819 * 510.0f;
      float _1824 = _1820 * 510.0f;
      frontier_phi_15_25_ladder = (((_1580 + (-0.5f)) + (min(min(1.0f, _1824), 510.0f - _1824) * (_1603 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1820;
      frontier_phi_15_25_ladder_1 = (((_1578 + (-0.5f)) + (min(min(1.0f, _1821), 510.0f - _1821) * (_1601 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1818;
      frontier_phi_15_25_ladder_2 = (((_1579 + (-0.5f)) + (min(min(1.0f, _1823), 510.0f - _1823) * (_1602 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1819;
    } else {
      float frontier_phi_15_25_ladder_35_ladder;
      float frontier_phi_15_25_ladder_35_ladder_1;
      float frontier_phi_15_25_ladder_35_ladder_2;
      if (_1159 == 1u) {
        float _1964 = mad(0.043306000530719757080078125f, _1551, mad(0.329291999340057373046875f, _1550, _1549 * 0.627402007579803466796875f));
        float _1970 = mad(0.011359999887645244598388671875f, _1551, mad(0.9195439815521240234375f, _1550, _1549 * 0.06909500062465667724609375f));
        float _1976 = mad(0.89557802677154541015625f, _1551, mad(0.08802799880504608154296875f, _1550, _1549 * 0.0163940005004405975341796875f));
        float _2012 = exp2(log2(abs((((clamp(mad(_1976, cb6[26u].z, mad(_1970, cb6[26u].y, _1964 * cb6[26u].x)), 0.0f, 1.0f) - _1964) * cb6[20u].x) + _1964) * cb6[18u].x)) * 0.1593017578125f);
        float _2013 = exp2(log2(abs((((clamp(mad(_1976, cb6[27u].z, mad(_1970, cb6[27u].y, _1964 * cb6[27u].x)), 0.0f, 1.0f) - _1970) * cb6[20u].x) + _1970) * cb6[18u].x)) * 0.1593017578125f);
        float _2014 = exp2(log2(abs((((clamp(mad(_1976, cb6[28u].z, mad(_1970, cb6[28u].y, _1964 * cb6[28u].x)), 0.0f, 1.0f) - _1976) * cb6[20u].x) + _1976) * cb6[18u].x)) * 0.1593017578125f);
        frontier_phi_15_25_ladder_35_ladder = exp2(log2(abs(((_2014 * 18.8515625f) + 0.8359375f) / ((_2014 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_15_25_ladder_35_ladder_1 = exp2(log2(abs(((_2012 * 18.8515625f) + 0.8359375f) / ((_2012 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_15_25_ladder_35_ladder_2 = exp2(log2(abs(((_2013 * 18.8515625f) + 0.8359375f) / ((_2013 * 18.6875f) + 1.0f))) * 78.84375f);
      } else {
        float frontier_phi_15_25_ladder_35_ladder_43_ladder;
        float frontier_phi_15_25_ladder_35_ladder_43_ladder_1;
        float frontier_phi_15_25_ladder_35_ladder_43_ladder_2;
        if (_1159 == 2u) {
          frontier_phi_15_25_ladder_35_ladder_43_ladder = _1551 * cb6[18u].x;
          frontier_phi_15_25_ladder_35_ladder_43_ladder_1 = _1549 * cb6[18u].x;
          frontier_phi_15_25_ladder_35_ladder_43_ladder_2 = _1550 * cb6[18u].x;
        } else {
          float frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder;
          float frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_1;
          float frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_2;
          if (_1159 == 3u) {
            float _2272 = mad(_1551, cb6[26u].z, mad(_1550, cb6[26u].y, _1549 * cb6[26u].x)) * cb6[18u].x;
            float _2273 = mad(_1551, cb6[27u].z, mad(_1550, cb6[27u].y, _1549 * cb6[27u].x)) * cb6[18u].x;
            float _2274 = mad(_1551, cb6[28u].z, mad(_1550, cb6[28u].y, _1549 * cb6[28u].x)) * cb6[18u].x;
            float _2299 = (_2272 <= 0.003130800090730190277099609375f) ? (_2272 * 12.9200000762939453125f) : ((exp2(log2(abs(_2272)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2300 = (_2273 <= 0.003130800090730190277099609375f) ? (_2273 * 12.9200000762939453125f) : ((exp2(log2(abs(_2273)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2301 = (_2274 <= 0.003130800090730190277099609375f) ? (_2274 * 12.9200000762939453125f) : ((exp2(log2(abs(_2274)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2302 = _2299 * 2046.0f;
            float _2304 = _2300 * 2046.0f;
            float _2305 = _2301 * 2046.0f;
            frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder = (((_1580 + (-0.5f)) + (min(min(1.0f, _2305), 2046.0f - _2305) * (_1603 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2301;
            frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_1 = (((_1578 + (-0.5f)) + (min(min(1.0f, _2302), 2046.0f - _2302) * (_1601 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2299;
            frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_2 = (((_1579 + (-0.5f)) + (min(min(1.0f, _2304), 2046.0f - _2304) * (_1602 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2300;
          } else {
            frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder = (_1551 * cb6[18u].x) + cb6[18u].y;
            frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_1 = (_1549 * cb6[18u].x) + cb6[18u].y;
            frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_2 = (_1550 * cb6[18u].x) + cb6[18u].y;
          }
          frontier_phi_15_25_ladder_35_ladder_43_ladder = frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder;
          frontier_phi_15_25_ladder_35_ladder_43_ladder_1 = frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_1;
          frontier_phi_15_25_ladder_35_ladder_43_ladder_2 = frontier_phi_15_25_ladder_35_ladder_43_ladder_49_ladder_2;
        }
        frontier_phi_15_25_ladder_35_ladder = frontier_phi_15_25_ladder_35_ladder_43_ladder;
        frontier_phi_15_25_ladder_35_ladder_1 = frontier_phi_15_25_ladder_35_ladder_43_ladder_1;
        frontier_phi_15_25_ladder_35_ladder_2 = frontier_phi_15_25_ladder_35_ladder_43_ladder_2;
      }
      frontier_phi_15_25_ladder = frontier_phi_15_25_ladder_35_ladder;
      frontier_phi_15_25_ladder_1 = frontier_phi_15_25_ladder_35_ladder_1;
      frontier_phi_15_25_ladder_2 = frontier_phi_15_25_ladder_35_ladder_2;
    }
    _1114 = frontier_phi_15_25_ladder_1;
    _1120 = frontier_phi_15_25_ladder_2;
    _1126 = frontier_phi_15_25_ladder;
  }
  float _1486;
  float _1492;
  float _1498;
  if (_122) {
    _1486 = _297;
    _1492 = _300;
    _1498 = _302;
  } else {
    uint _1535 = _585.w;
    float _1737;
    float _1738;
    float _1739;
    if (cb6[19u].w != 1.0f) {
      _1737 = exp2(log2(abs(_297)) * cb6[19u].w);
      _1738 = exp2(log2(abs(_300)) * cb6[19u].w);
      _1739 = exp2(log2(abs(_302)) * cb6[19u].w);
    } else {
      _1737 = _297;
      _1738 = _300;
      _1739 = _302;
    }
    float _1746 = frac(_77 * 211.1488037109375f);
    float _1747 = frac(_78 * 210.944000244140625f);
    float _1748 = frac(cb0[0u].x * 6.227200031280517578125f);
    float _1751 = _1748 + 33.3300018310546875f;
    float _1752 = dot(float3(_1746, _1747, _1748), float3(_1747 + 33.3300018310546875f, _1746 + 33.3300018310546875f, _1751));
    float _1755 = _1752 + _1746;
    float _1756 = _1752 + _1747;
    float _1758 = _1755 + _1756;
    float _1763 = frac(_1758 * (_1752 + _1748));
    float _1764 = frac((_1755 * 2.0f) * _1756);
    float _1765 = frac(_1758 * _1755);
    float _1770 = frac((_77 + 64.0f) * 211.1488037109375f);
    float _1771 = frac((_78 + 64.0f) * 210.944000244140625f);
    float _1774 = dot(float3(_1770, _1771, _1748), float3(_1771 + 33.3300018310546875f, _1770 + 33.3300018310546875f, _1751));
    float _1777 = _1774 + _1770;
    float _1778 = _1774 + _1771;
    float _1780 = _1777 + _1778;
    float _1785 = frac(_1780 * (_1774 + _1748));
    float _1786 = frac((_1777 * 2.0f) * _1778);
    float _1787 = frac(_1780 * _1777);
    float frontier_phi_22_33_ladder;
    float frontier_phi_22_33_ladder_1;
    float frontier_phi_22_33_ladder_2;
    if (_1535 == 0u) {
      float _1929 = (_1737 <= 0.003130800090730190277099609375f) ? (_1737 * 12.9200000762939453125f) : ((exp2(log2(abs(_1737)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1930 = (_1738 <= 0.003130800090730190277099609375f) ? (_1738 * 12.9200000762939453125f) : ((exp2(log2(abs(_1738)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1931 = (_1739 <= 0.003130800090730190277099609375f) ? (_1739 * 12.9200000762939453125f) : ((exp2(log2(abs(_1739)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
      float _1932 = _1929 * 510.0f;
      float _1933 = _1930 * 510.0f;
      float _1934 = _1931 * 510.0f;
      frontier_phi_22_33_ladder = (((_1763 + (-0.5f)) + (min(min(1.0f, _1932), 510.0f - _1932) * (_1785 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1929;
      frontier_phi_22_33_ladder_1 = (((_1765 + (-0.5f)) + (min(min(1.0f, _1934), 510.0f - _1934) * (_1787 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1931;
      frontier_phi_22_33_ladder_2 = (((_1764 + (-0.5f)) + (min(min(1.0f, _1933), 510.0f - _1933) * (_1786 + (-0.5f)))) * 0.0039215688593685626983642578125f) + _1930;
    } else {
      float frontier_phi_22_33_ladder_41_ladder;
      float frontier_phi_22_33_ladder_41_ladder_1;
      float frontier_phi_22_33_ladder_41_ladder_2;
      if (_1535 == 1u) {
        float _2089 = mad(0.043306000530719757080078125f, _1739, mad(0.329291999340057373046875f, _1738, _1737 * 0.627402007579803466796875f));
        float _2092 = mad(0.011359999887645244598388671875f, _1739, mad(0.9195439815521240234375f, _1738, _1737 * 0.06909500062465667724609375f));
        float _2095 = mad(0.89557802677154541015625f, _1739, mad(0.08802799880504608154296875f, _1738, _1737 * 0.0163940005004405975341796875f));
        float _2129 = exp2(log2(abs((((clamp(mad(_2095, cb6[30u].z, mad(_2092, cb6[30u].y, _2089 * cb6[30u].x)), 0.0f, 1.0f) - _2089) * cb6[20u].x) + _2089) * cb6[19u].y)) * 0.1593017578125f);
        float _2130 = exp2(log2(abs((((clamp(mad(_2095, cb6[31u].z, mad(_2092, cb6[31u].y, _2089 * cb6[31u].x)), 0.0f, 1.0f) - _2092) * cb6[20u].x) + _2092) * cb6[19u].y)) * 0.1593017578125f);
        float _2131 = exp2(log2(abs((((clamp(mad(_2095, cb6[32u].z, mad(_2092, cb6[32u].y, _2089 * cb6[32u].x)), 0.0f, 1.0f) - _2095) * cb6[20u].x) + _2095) * cb6[19u].y)) * 0.1593017578125f);
        frontier_phi_22_33_ladder_41_ladder = exp2(log2(abs(((_2129 * 18.8515625f) + 0.8359375f) / ((_2129 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_22_33_ladder_41_ladder_1 = exp2(log2(abs(((_2131 * 18.8515625f) + 0.8359375f) / ((_2131 * 18.6875f) + 1.0f))) * 78.84375f);
        frontier_phi_22_33_ladder_41_ladder_2 = exp2(log2(abs(((_2130 * 18.8515625f) + 0.8359375f) / ((_2130 * 18.6875f) + 1.0f))) * 78.84375f);
      } else {
        float frontier_phi_22_33_ladder_41_ladder_47_ladder;
        float frontier_phi_22_33_ladder_41_ladder_47_ladder_1;
        float frontier_phi_22_33_ladder_41_ladder_47_ladder_2;
        if (_1535 == 2u) {
          frontier_phi_22_33_ladder_41_ladder_47_ladder = _1737 * cb6[19u].y;
          frontier_phi_22_33_ladder_41_ladder_47_ladder_1 = _1739 * cb6[19u].y;
          frontier_phi_22_33_ladder_41_ladder_47_ladder_2 = _1738 * cb6[19u].y;
        } else {
          float frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder;
          float frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_1;
          float frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_2;
          if (_1535 == 3u) {
            float _2490 = mad(_1739, cb6[30u].z, mad(_1738, cb6[30u].y, _1737 * cb6[30u].x)) * cb6[19u].y;
            float _2491 = mad(_1739, cb6[31u].z, mad(_1738, cb6[31u].y, _1737 * cb6[31u].x)) * cb6[19u].y;
            float _2492 = mad(_1739, cb6[32u].z, mad(_1738, cb6[32u].y, _1737 * cb6[32u].x)) * cb6[19u].y;
            float _2517 = (_2490 <= 0.003130800090730190277099609375f) ? (_2490 * 12.9200000762939453125f) : ((exp2(log2(abs(_2490)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2518 = (_2491 <= 0.003130800090730190277099609375f) ? (_2491 * 12.9200000762939453125f) : ((exp2(log2(abs(_2491)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2519 = (_2492 <= 0.003130800090730190277099609375f) ? (_2492 * 12.9200000762939453125f) : ((exp2(log2(abs(_2492)) * 0.4166666567325592041015625f) * 1.05499994754791259765625f) + (-0.054999999701976776123046875f));
            float _2520 = _2517 * 2046.0f;
            float _2521 = _2518 * 2046.0f;
            float _2522 = _2519 * 2046.0f;
            frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder = (((_1763 + (-0.5f)) + (min(min(1.0f, _2520), 2046.0f - _2520) * (_1785 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2517;
            frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_1 = (((_1765 + (-0.5f)) + (min(min(1.0f, _2522), 2046.0f - _2522) * (_1787 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2519;
            frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_2 = (((_1764 + (-0.5f)) + (min(min(1.0f, _2521), 2046.0f - _2521) * (_1786 + (-0.5f)))) * 0.000977517105638980865478515625f) + _2518;
          } else {
            frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder = (_1737 * cb6[19u].y) + cb6[19u].z;
            frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_1 = (_1739 * cb6[19u].y) + cb6[19u].z;
            frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_2 = (_1738 * cb6[19u].y) + cb6[19u].z;
          }
          frontier_phi_22_33_ladder_41_ladder_47_ladder = frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder;
          frontier_phi_22_33_ladder_41_ladder_47_ladder_1 = frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_1;
          frontier_phi_22_33_ladder_41_ladder_47_ladder_2 = frontier_phi_22_33_ladder_41_ladder_47_ladder_53_ladder_2;
        }
        frontier_phi_22_33_ladder_41_ladder = frontier_phi_22_33_ladder_41_ladder_47_ladder;
        frontier_phi_22_33_ladder_41_ladder_1 = frontier_phi_22_33_ladder_41_ladder_47_ladder_1;
        frontier_phi_22_33_ladder_41_ladder_2 = frontier_phi_22_33_ladder_41_ladder_47_ladder_2;
      }
      frontier_phi_22_33_ladder = frontier_phi_22_33_ladder_41_ladder;
      frontier_phi_22_33_ladder_1 = frontier_phi_22_33_ladder_41_ladder_1;
      frontier_phi_22_33_ladder_2 = frontier_phi_22_33_ladder_41_ladder_2;
    }
    _1486 = frontier_phi_22_33_ladder;
    _1492 = frontier_phi_22_33_ladder_2;
    _1498 = frontier_phi_22_33_ladder_1;
  }
  _29[uint2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)] = float4(_1114, _1120, _1126, 1.0f);
  if (!(asuint(cb6[19u]).x == 0u)) {
    _30[uint2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)] = float4(_1486, _1492, _1498, 1.0f);
  }
  */

  uint outputTypeEnum = asuint(cb6[17u].w);

  float3 outputColor1 = float3(_576, _578, _580);
  if (asuint(cb6[17u].y) != 0u) {
    ConvertColorParams params = {
      outputTypeEnum,  // outputTypeEnum
      cb6[18u].x,      // paperWhiteScaling
      cb6[18u].y,      // blackFloorAdjust
      cb6[18u].z,      // gammaCorrection
      cb6[20u].x,      // pqSaturation
      float3x3(
          cb6[26u].x, cb6[26u].y, cb6[26u].z,
          cb6[27u].x, cb6[27u].y, cb6[27u].z,
          cb6[28u].x, cb6[28u].y, cb6[28u].z),  // pqMatrix
      float3(_77, _78, cb0[0u].x)               // random3
    };
    outputColor1 = convertColor(outputColor1, params);
  }

  _29[uint2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)] = float4(outputColor1.rgb, 1.0f);

  if (!_122) {
    float3 outputColor2 = float3(_297, _300, _302);
    ConvertColorParams params = {
      outputTypeEnum,  // outputTypeEnum
      cb6[19u].y,      // paperWhiteScaling
      cb6[19u].z,      // blackFloorAdjust
      cb6[19u].w,      // gammaCorrection
      cb6[20u].x,      // pqSaturation
      float3x3(
          cb6[30u].x, cb6[30u].y, cb6[30u].z,
          cb6[31u].x, cb6[31u].y, cb6[31u].z,
          cb6[32u].x, cb6[32u].y, cb6[32u].z),  // pqMatrix
      float3(_77, _78, cb0[0u].x)               // random3
    };

    outputColor2 = convertColor(outputColor2, params);
    _30[uint2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)] = float4(outputColor2.rgb, 1.0f);
  }
}

[numthreads(16, 16, 1)]
void main(SPIRV_Cross_Input stage_input) {
  gl_GlobalInvocationID = stage_input.gl_GlobalInvocationID;
  comp_main();
}
