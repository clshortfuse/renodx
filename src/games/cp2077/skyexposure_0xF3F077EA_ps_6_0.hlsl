#include "./injectedBuffer.hlsl"

cbuffer _19_21 : register(b0, space0) {
  float4 _21_m0[30] : packoffset(c0);
}

cbuffer _24_26 : register(b13, space0) {
  float4 _26_m0[58] : packoffset(c0);
}

cbuffer _29_31 : register(b6, space0) {
  float4 _31_m0[50] : packoffset(c0);
}

Texture2D<float4> _8 : register(t68, space0);
Texture2D<float4> _9 : register(t3, space0);
TextureCube<float4> _12 : register(t4, space0);
Texture2D<float4> _13 : register(t5, space0);
Texture2D<float4> _14 : register(t6, space0);
SamplerState _34 : register(s10, space0);
SamplerState _35 : register(s11, space0);

static float4 gl_FragCoord;
static float TEXCOORD;
static float4 SV_Target;

struct SPIRV_Cross_Input {
  float4 gl_FragCoord : SV_Position;
  float TEXCOORD : TEXCOORD0;
};

struct SPIRV_Cross_Output {
  float4 SV_Target : SV_Target0;
};

void frag_main() {
  SV_Target.x = 0.0f;
  SV_Target.y = 0.0f;
  SV_Target.z = 0.0f;
  SV_Target.w = 0.0f;
  float _109 = (((float(uint(gl_FragCoord.x)) + 0.5f) / _31_m0[36u].x) * 2.0f) + (-1.0f);
  float _112 = (-0.0f) - ((((float(uint(gl_FragCoord.y)) + 0.5f) / _31_m0[36u].y) * 2.0f) + (-1.0f));
  float _130 = (_31_m0[31u].w + _31_m0[30u].w) + mad(_31_m0[29u].w, _112, _109 * _31_m0[28u].w);
  float _131 = ((_31_m0[31u].x + _31_m0[30u].x) + mad(_31_m0[29u].x, _112, _109 * _31_m0[28u].x)) / _130;
  float _132 = ((_31_m0[31u].y + _31_m0[30u].y) + mad(_31_m0[29u].y, _112, _109 * _31_m0[28u].y)) / _130;
  float _133 = ((_31_m0[31u].z + _31_m0[30u].z) + mad(_31_m0[29u].z, _112, _109 * _31_m0[28u].z)) / _130;
  float _138 = rsqrt(dot(float3(_131, _132, _133), float3(_131, _132, _133)));
  float _139 = _138 * _131;
  float _140 = _138 * _132;
  float _141 = _138 * _133;
  float _151 = min(max(dot(float3(_26_m0[0u].xyz), float3(_139, _140, _141)), -1.0f), 1.0f);
  float _157 = max(_141, _31_m0[32u].w);
  float _176 = acos(_151);
  float _181 = _151 * _151;
  float _182 = _181 + 1.0f;
  float _185 = _151 * 2.0f;
  float _194 = sqrt(_157);
  float _195 = _157 + 0.00999999977648258209228515625f;
  float _308 = dot(float3(_139, _140, _141), float3(_26_m0[0u].xyz));
  float _337 = abs(_31_m0[42u].w);
  float _339 = 1.0f - clamp(clamp((1.0f / max(abs(_31_m0[42u].z - _31_m0[43u].x), 9.9999999600419720025001879548654e-12f)) * clamp(((_308 + 1.0f) * 0.5f) - _31_m0[43u].x, 0.0f, 1.0f), 0.0f, 1.0f), 0.0f, 1.0f);
  float _400;
  if ((_140 != 0.0f) || (_139 != 0.0f)) {
    float _372 = atan(_140 / _139);
    bool _377 = _139 < 0.0f;
    bool _378 = _139 == 0.0f;
    bool _379 = _140 >= 0.0f;
    bool _380 = _140 < 0.0f;
    precise float _387 = ((_377 && _380) ? (_372 + (-3.1415927410125732421875f)) : ((_377 && _379) ? (_372 + 3.1415927410125732421875f) : _372)) + 3.1415927410125732421875f;
    precise float _388 = _387 * 0.15915493667125701904296875f;
    precise float _390 = _388 * 24.0f;
    precise float _392 = _390 * 15.0f;
    precise float _394 = _392 * 0.01745329238474369049072265625f;
    _400 = (_378 && _379) ? 4.7123889923095703125f : ((_378 && _380) ? 1.57079637050628662109375f : _394);
  } else {
    _400 = 3.1415927410125732421875f;
  }
  float _403 = 1.57079637050628662109375f - (acos(_141) * 0.999999940395355224609375f);
  float _405 = _31_m0[42u].x * 0.01745329238474369049072265625f;
  float _406 = _400 - (_31_m0[42u].y * 0.01745329238474369049072265625f);
  float _409 = sin(_403);
  float _410 = cos(_403);
  float _411 = sin(_405);
  float _412 = cos(_405);
  float _414 = _410 * cos(_406);
  float _419 = (_412 * _409) - (_414 * _411);
  float _420 = _410 * sin(_406);
  float _450;
  if ((_420 != 0.0f) || (_419 != 0.0f)) {
    float _426 = atan(_419 / _420);
    bool _429 = _420 < 0.0f;
    bool _430 = _420 == 0.0f;
    bool _431 = _419 >= 0.0f;
    bool _432 = _419 < 0.0f;
    precise float _439 = ((_429 && _432) ? (_426 + (-3.1415927410125732421875f)) : ((_429 && _431) ? (_426 + 3.1415927410125732421875f) : _426)) + 3.1415927410125732421875f;
    precise float _440 = _439 * 0.15915493667125701904296875f;
    precise float _441 = _440 * 24.0f;
    precise float _442 = _441 * 15.0f;
    precise float _443 = _442 * 0.01745329238474369049072265625f;
    precise float _444 = _443 + (-3.3641221523284912109375f);
    _450 = (_430 && _431) ? 1.3482668399810791015625f : ((_430 && _432) ? (-1.79332578182220458984375f) : _444);
  } else {
    _450 = -0.22252941131591796875f;
  }
  float _453 = 1.57079637050628662109375f - (acos((_414 * _412) + (_411 * _409)) * 0.999999940395355224609375f);
  float _455 = cos(_450);
  float _456 = sin(_453);
  float _457 = cos(_453);
  float _463 = ((_455 * 0.889974176883697509765625f) * _457) + (_456 * 0.4560109674930572509765625f);
  float _467 = (_456 * 0.889974176883697509765625f) - ((_455 * 0.4560109674930572509765625f) * _457);
  float _468 = _457 * sin(_450);
  float _472 = _21_m0[0u].w * 6.283185482025146484375f;
  float _474 = cos(_472);
  float _489 = sin(_472);
  float _496 = dot(float3(9.6469889854233770165592432022095e-09f, 0.889974176883697509765625f, 0.45601093769073486328125f), float3(_468, _467, _463));
  float _502 = 1.0f - _474;
  float _506 = ((((_463 * 0.889974176883697509765625f) - (_467 * 0.45601093769073486328125f)) * _489) + (_474 * _468)) + ((_496 * 9.6469889854233770165592432022095e-09f) * _502);
  float _507 = ((((_468 * 0.45601093769073486328125f) - (_463 * 9.6469889854233770165592432022095e-09f)) * _489) + (_467 * _474)) + ((_496 * 0.889974176883697509765625f) * _502);
  float _508 = ((((_467 * 9.6469889854233770165592432022095e-09f) - (_468 * 0.889974176883697509765625f)) * _489) + (_463 * _474)) + ((_496 * 0.45601093769073486328125f) * _502);
  uint4 _523 = asuint(_31_m0[48u]);
  float _556;
  if ((_506 != 0.0f) || (_507 != 0.0f)) {
    float _538 = atan(_506 / _507);
    bool _541 = _507 < 0.0f;
    bool _542 = _507 == 0.0f;
    bool _543 = _506 >= 0.0f;
    bool _544 = _506 < 0.0f;
    precise float _551 = ((_541 && _544) ? (_538 + (-3.1415927410125732421875f)) : ((_541 && _543) ? (_538 + 3.1415927410125732421875f) : _538)) * 0.15915493667125701904296875f;
    _556 = (_542 && _543) ? 0.25f : ((_542 && _544) ? (-0.25f) : _551);
  } else {
    _556 = 0.0f;
  }
  float _557;
  if (_523.y == 0u) {
    _557 = 0.0f;
  } else {
    float4 _562 = _12.SampleLevel(_34, float3(_506, _507, (-0.0f) - _508), 0.0f);
    float _565 = _562.y;
    float _573 = _31_m0[39u].y + 1.0f;
    float _580 = (_565 * (_31_m0[38u].z - _31_m0[38u].w)) + _31_m0[38u].w;
    precise float _558 = (exp2(log2(abs(((max(abs(_506), max(abs(_507), abs(_508))) * ((1.0f - _31_m0[39u].y) - _573)) + _573) * _562.x)) * ((clamp(_562.z * 100.0f, 0.0f, 1.0f) * (_31_m0[39u].x - _580)) + _580)) * _565) * 1000.0f;
    _557 = _558;
  }
  float _593;
  float _595;
  float _597;
  if (_523.z == 0u) {
    _593 = 0.0f;
    _595 = 0.0f;
    _597 = 0.0f;
  } else {
    float4 _822 = _13.SampleLevel(_34, float2(frac(_556), frac(clamp(1.5499999523162841796875f - (acos(_508) * 0.666666686534881591796875f), 0.0f, 1.0f))), 0.0f);
    _593 = _822.x;
    _595 = _822.y;
    _597 = _822.z;
  }
  float _604 = (_557 * _31_m0[38u].y) * (512.0f / max(_31_m0[36u].x, _31_m0[36u].y));
  float _612 = clamp(_141, 0.0f, 1.0f);
  float _613 = _612 * _612;
  float _620 = (((((exp2((_31_m0[12u].y / _195) * 1.44269502162933349609375f) * _31_m0[12u].x) + 1.0f) * (((((_181 * _31_m0[13u].y) + _31_m0[12u].z) + (exp2((_31_m0[13u].x * 1.44269502162933349609375f) * _176) * _31_m0[12u].w)) + ((_182 / exp2(log2(abs(((_31_m0[14u].x * _31_m0[14u].x) + 1.0f) - (_185 * _31_m0[14u].x))) * 1.5f)) * _31_m0[13u].z)) + (_194 * _31_m0[13u].w))) * _31_m0[21u].x) * exp2(log2(abs((_339 * (max(_31_m0[43u].y, 0.0f) + (-1.0f))) + 1.0f)) * _337)) * _31_m0[32u].x;
  float _621 = (((((exp2((_31_m0[15u].y / _195) * 1.44269502162933349609375f) * _31_m0[15u].x) + 1.0f) * (((((_181 * _31_m0[16u].y) + _31_m0[15u].z) + (exp2((_31_m0[16u].x * 1.44269502162933349609375f) * _176) * _31_m0[15u].w)) + ((_182 / exp2(log2(abs(((_31_m0[17u].x * _31_m0[17u].x) + 1.0f) - (_185 * _31_m0[17u].x))) * 1.5f)) * _31_m0[16u].z)) + (_194 * _31_m0[16u].w))) * _31_m0[21u].y) * exp2(log2(abs((_339 * (max(_31_m0[43u].z, 0.0f) + (-1.0f))) + 1.0f)) * _337)) * _31_m0[32u].y;
  float _622 = (((((exp2((_31_m0[18u].y / _195) * 1.44269502162933349609375f) * _31_m0[18u].x) + 1.0f) * (((((_181 * _31_m0[19u].y) + _31_m0[18u].z) + (exp2((_31_m0[19u].x * 1.44269502162933349609375f) * _176) * _31_m0[18u].w)) + ((_182 / exp2(log2(abs(((_31_m0[20u].x * _31_m0[20u].x) + 1.0f) - (_185 * _31_m0[20u].x))) * 1.5f)) * _31_m0[19u].z)) + (_194 * _31_m0[19u].w))) * _31_m0[21u].z) * exp2(log2(abs((_339 * (max(_31_m0[43u].w, 0.0f) + (-1.0f))) + 1.0f)) * _337)) * _31_m0[32u].z;
  float _628 = clamp(_141 / _31_m0[33u].w, 0.0f, 1.0f);
  float _634 = _26_m0[0u].x - _139;
  float _635 = _26_m0[0u].y - _140;
  float _636 = _26_m0[0u].z - _141;
  float _648 = exp2(log2(abs(max(0.0f, _26_m0[0u].w - sqrt(((_634 * _634) + (_635 * _635)) + (_636 * _636))))) * _31_m0[34u].w);
  float _662 = ((((_648 * 2.058259487152099609375f) + 0.616473019123077392578125f) * _648) + 0.860117733478546142578125f) / ((((_648 * 11.330322265625f) + 3.369680881500244140625f) * _648) + 1.0f);
  float _677 = ((((_648 * 0.672770678997039794921875f) + 0.16912250220775604248046875f) * _648) + 0.317398726940155029296875f) / ((1.0f - (_648 * 0.1158967316150665283203125f)) + ((_648 * _648) * 2.5832970142364501953125f));
  float _685 = ((_662 * 2.0f) + 4.0f) - (_677 * 8.0f);
  float _686 = (_662 * 3.0f) / _685;
  float _688 = (_677 * 2.0f) / _685;
  float _691 = 1.0f / _688;
  float _692 = _691 * _686;
  float _693 = _691 * ((1.0f - _686) - _688);
  float _716 = exp2(log2(_648 * 1.599999904632568359375f) * 4.0f);
  float _717 = 1.0f - _141;
  float _722 = exp2(log2(abs(max(_717, 0.0f))) * 8.0f);
  float _730 = _648 * _628;
  float _756 = rsqrt(dot(float3(_26_m0[1u].xyz), float3(_26_m0[1u].xyz)));
  float _757 = _756 * _26_m0[1u].x;
  float _758 = _756 * _26_m0[1u].y;
  float _759 = _756 * _26_m0[1u].z;
  float _763 = rsqrt(dot(float3(_31_m0[37u].xyz), float3(_31_m0[37u].xyz)));
  float _764 = _763 * _31_m0[37u].x;
  float _765 = _763 * _31_m0[37u].y;
  float _766 = _763 * _31_m0[37u].z;
  float _769 = (_766 * _758) - (_765 * _759);
  float _772 = (_764 * _759) - (_766 * _757);
  float _775 = (_765 * _757) - (_764 * _758);
  float _779 = rsqrt(dot(float3(_769, _772, _775), float3(_769, _772, _775)));
  float _780 = _769 * _779;
  float _781 = _772 * _779;
  float _782 = _775 * _779;
  float _785 = (_782 * _758) - (_781 * _759);
  float _788 = (_780 * _759) - (_782 * _757);
  float _791 = (_781 * _757) - (_780 * _758);
  float _795 = rsqrt(dot(float3(_785, _788, _791), float3(_785, _788, _791)));
  float _801 = _26_m0[1u].x - _139;
  float _802 = _26_m0[1u].y - _140;
  float _803 = _26_m0[1u].z - _141;
  float _825;
  float _827;
  float _829;
  if (_523.w == 0u) {
    _825 = 1.0f;
    _827 = 1.0f;
    _829 = 1.0f;
  } else {
    float4 _879 = _9.SampleLevel(_34, float2(((dot(float3(_785 * _795, _788 * _795, _791 * _795), float3(_139, _140, _141)) / _26_m0[1u].w) * 0.5f) + (-0.5f), ((dot(float3(_780, _781, _782), float3(_139, _140, _141)) / _26_m0[1u].w) * 0.5f) + (-0.5f)), 0.0f);
    _825 = _879.x;
    _827 = _879.y;
    _829 = _879.z;
  }
  float _836 = (_628 * 10.0f) * exp2(log2(abs(max(0.0f, _26_m0[1u].w - sqrt(((_801 * _801) + (_802 * _802)) + (_803 * _803))))) * _31_m0[35u].w);
  float _852 = _31_m0[36u].z * exp2(log2(abs(dot(float3(_26_m0[1u].xyz), float3(_139, _140, _141)))) * _31_m0[36u].w);
  float _856 = _717 * _717;
  float _881;
  float _883;
  float _885;
  float _887;
  if (_523.x == 0u) {
    _881 = 0.0f;
    _883 = 0.0f;
    _885 = 0.0f;
    _887 = 1.0f;
  } else {
    float _945 = _31_m0[41u].x * 1000.0f;
    float _947 = _945 + 6371000.0f;
    float _952 = rsqrt(dot(float3(_139, _140, _141), float3(_139, _140, _141)));
    float _953 = _952 * _139;
    float _954 = _952 * _140;
    float _955 = _952 * _141;
    float _1028;
    float _1032;
    float _1036;
    if (dot(float3(0.0f, 0.0f, -6371000.0f), float3(_953, _954, _955)) > 0.0f) {
      float _1013 = dot(float3(_953, _954, _955), float3(0.0f, 0.0f, -6371000.0f));
      float _1016 = _1013 * _953;
      float _1017 = _1013 * _954;
      float _1019 = (_1013 * _955) + 6371000.0f;
      float _1025 = sqrt(((_1016 * _1016) + (_1017 * _1017)) + (_1019 * _1019));
      float frontier_phi_19_17_ladder;
      float frontier_phi_19_17_ladder_1;
      float frontier_phi_19_17_ladder_2;
      if (_1025 > _947) {
        frontier_phi_19_17_ladder = 0.0f;
        frontier_phi_19_17_ladder_1 = 0.0f;
        frontier_phi_19_17_ladder_2 = 0.0f;
      } else {
        float _1173 = sqrt((_947 * _947) - (_1025 * _1025));
        float _1176 = _1173 * _955;
        float frontier_phi_19_17_ladder_20_ladder;
        float frontier_phi_19_17_ladder_20_ladder_1;
        float frontier_phi_19_17_ladder_20_ladder_2;
        if (_945 > 9.9999997473787516355514526367188e-05f) {
          float _1200 = _1173 + _1013;
          frontier_phi_19_17_ladder_20_ladder = _1200 * _953;
          frontier_phi_19_17_ladder_20_ladder_1 = _1200 * _954;
          frontier_phi_19_17_ladder_20_ladder_2 = _1176 + _1019;
        } else {
          float _1201 = _1013 - _1173;
          frontier_phi_19_17_ladder_20_ladder = _1201 * _953;
          frontier_phi_19_17_ladder_20_ladder_1 = _1201 * _954;
          frontier_phi_19_17_ladder_20_ladder_2 = _1019 - _1176;
        }
        frontier_phi_19_17_ladder = frontier_phi_19_17_ladder_20_ladder;
        frontier_phi_19_17_ladder_1 = frontier_phi_19_17_ladder_20_ladder_1;
        frontier_phi_19_17_ladder_2 = frontier_phi_19_17_ladder_20_ladder_2;
      }
      _1028 = frontier_phi_19_17_ladder;
      _1032 = frontier_phi_19_17_ladder_1;
      _1036 = frontier_phi_19_17_ladder_2;
    } else {
      float frontier_phi_19_18_ladder;
      float frontier_phi_19_18_ladder_1;
      float frontier_phi_19_18_ladder_2;
      if (_947 < 6371000.0f) {
        frontier_phi_19_18_ladder = 0.0f;
        frontier_phi_19_18_ladder_1 = 0.0f;
        frontier_phi_19_18_ladder_2 = 0.0f;
      } else {
        float _1177 = dot(float3(_953, _954, _955), float3(0.0f, 0.0f, -6371000.0f));
        float _1180 = _1177 * _953;
        float _1181 = _1177 * _954;
        float _1182 = _1177 * _955;
        float _1183 = _1182 + 6371000.0f;
        float _1187 = (_1180 * _1180) + (_1181 * _1181);
        float _1190 = sqrt(_1187 + (_1183 * _1183));
        float _1198 = sqrt(abs((_947 * _947) - (_1190 * _1190))) - sqrt(_1187 + (_1182 * _1182));
        frontier_phi_19_18_ladder = _1198 * _953;
        frontier_phi_19_18_ladder_1 = _1198 * _954;
        frontier_phi_19_18_ladder_2 = (_1198 * _955) + 6371000.0f;
      }
      _1028 = frontier_phi_19_18_ladder;
      _1032 = frontier_phi_19_18_ladder_1;
      _1036 = frontier_phi_19_18_ladder_2;
    }
    float _1040 = _31_m0[39u].w * 10000.0f;
    float _1055 = clamp(exp2(log2(clamp(_14.SampleLevel(_34, float2(_1028 / _1040, _1032 / _1040), 0.0f).w, 0.0f, 1.0f)) * (1.0f / _31_m0[39u].z)), 0.0f, 1.0f) * clamp(1.0f - (_856 * _856), 0.0f, 1.0f);
    float _1060 = _31_m0[41u].z * _31_m0[41u].z;
    float _1081 = _1055 * 2.0f;
    float _1082 = _1081 * clamp(((1.0f - _1060) * 0.079577468335628509521484375f) * (1.0f / max(exp2(log2((_1060 + 1.0f) - ((_31_m0[41u].z * 2.0f) * min(max(_308, -0.999000012874603271484375f), 0.999000012874603271484375f)))), 1.0000000116860974230803549289703e-07f)), 0.0f, 1.0f);
    float _1088 = _31_m0[41u].w * _31_m0[41u].w;
    float _1101 = _1081 * clamp(((1.0f - _1088) * 0.079577468335628509521484375f) * (1.0f / max(exp2(log2((_1088 + 1.0f) - ((_31_m0[41u].w * 2.0f) * min(max(dot(float3(_139, _140, _141), float3(_26_m0[1u].xyz)), -0.999000012874603271484375f), 0.999000012874603271484375f)))), 1.0000000116860974230803549289703e-07f)), 0.0f, 1.0f);
    float _1108 = _141 + 1.0f;
    float4 _1116 = _8.SampleLevel(_35, float2(0.5f - ((_139 / _1108) * 0.5f), 0.5f - ((_140 / _1108) * 0.5f)), 3.0f);
    float _1126 = _31_m0[40u].x * _1055;
    float _1136 = rsqrt(dot(float3(_1028, _1032, _1036), float3(_1028, _1032, _1036)));
    float _1148 = exp2(log2(1.0f - clamp((-0.0f) - dot(float3(_1136 * _1028, _1136 * _1032, _1136 * _1036), float3(_26_m0[0u].xyz)), 0.0f, 1.0f)) * (100.0f / max(_31_m0[41u].y, 1.0000000116860974230803549289703e-07f)));
    _881 = (-0.0f) - min((-0.0f) - (((_1116.x * 64.0f) * _1126) + (((_1101 * _31_m0[35u].x) * _31_m0[40u].y) + (((_1082 * _31_m0[34u].x) * _31_m0[40u].y) * _1148))), 0.0f);
    _883 = (-0.0f) - min((-0.0f) - (((_1116.y * 64.0f) * _1126) + (((_1101 * _31_m0[35u].y) * _31_m0[40u].z) + (((_1082 * _31_m0[34u].y) * _31_m0[40u].z) * _1148))), 0.0f);
    _885 = (-0.0f) - min((-0.0f) - (((_1116.z * 64.0f) * _1126) + (((_1101 * _31_m0[35u].z) * _31_m0[40u].w) + (((_1082 * _31_m0[34u].z) * _31_m0[40u].w) * _1148))), 0.0f);
    _887 = 1.0f - _1055;
  }
  float _914 = clamp((_31_m0[47u].w * _141) + 1.10000002384185791015625f, 0.0f, 1.0f);
  float _930 = max(0.0f, (((1.0f - _31_m0[47u].x) * _914) + _31_m0[47u].x) * ((_887 * ((((((_604 + (_31_m0[38u].x * _593)) * _613) + _620) + (((_730 * mad(-0.498531401157379150390625f, _693, (_692 * 3.240454196929931640625f) + (-1.537138462066650390625f))) * _716) * _31_m0[34u].x)) + ((_836 * _825) * _31_m0[35u].x)) + (_852 * _31_m0[35u].x))) + _881));
  float _931 = max(0.0f, (((1.0f - _31_m0[47u].y) * _914) + _31_m0[47u].y) * ((_887 * ((((((_604 + (_31_m0[38u].x * _595)) * _613) + _621) + ((((_730 * mad(0.04155600070953369140625f, _693, 1.87601077556610107421875f - (_692 * 0.969265997409820556640625f))) * _716) * (1.0f - (_722 * 0.89999997615814208984375f))) * _31_m0[34u].y)) + ((_836 * _827) * _31_m0[35u].y)) + (_852 * _31_m0[35u].y))) + _883));
  float _932 = max(0.0f, (((1.0f - _31_m0[47u].z) * _914) + _31_m0[47u].z) * ((_887 * ((((((_604 + (_31_m0[38u].x * _597)) * _613) + _622) + ((((_730 * mad(1.05722522735595703125f, _693, (_692 * 0.0556433983147144317626953125f) + (-0.2040258944034576416015625f))) * _716) * (1.0f - _722)) * _31_m0[34u].z)) + ((_836 * _829) * _31_m0[35u].z)) + (_852 * _31_m0[35u].z))) + _885));
  float _961;
  float _963;
  float _965;
  if (asuint(_31_m0[49u]).y == 0u) {
    _961 = _930;
    _963 = _931;
    _965 = _932;
  } else {
    float _981 = frac(gl_FragCoord.x * 0.103100001811981201171875f);
    float _982 = frac(gl_FragCoord.y * 0.10300000011920928955078125f);
    float _983 = frac(_21_m0[0u].x * 0.097300000488758087158203125f);
    float _988 = dot(float3(_981, _982, _983), float3(_982 + 33.3300018310546875f, _981 + 33.3300018310546875f, _983 + 33.3300018310546875f));
    float _991 = _988 + _981;
    float _992 = _988 + _982;
    float _994 = _991 + _992;
    _961 = (((frac(_994 * (_988 + _983)) + (-0.5f)) * 0.0199999995529651641845703125f) + 1.0f) * _930;
    _963 = (((frac((_991 * 2.0f) * _992) + (-0.5f)) * 0.0199999995529651641845703125f) + 1.0f) * _931;
    _965 = (((frac(_994 * _991) + (-0.5f)) * 0.039999999105930328369140625f) + 1.0f) * _932;
  }
  SV_Target.x = _961;
  SV_Target.y = _963;
  SV_Target.z = _965;
  SV_Target.w = 1.0f;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  gl_FragCoord = stage_input.gl_FragCoord;
  gl_FragCoord.w = 1.0 / gl_FragCoord.w;
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_Target = SV_Target;
  return stage_output;
}
