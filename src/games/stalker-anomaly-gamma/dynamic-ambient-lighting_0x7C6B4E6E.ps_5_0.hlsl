// ---- Created with 3Dmigoto v1.4.1 on Sat Oct 18 18:49:16 2025

cbuffer _Globals : register(b0)
{
  float4 hdr10_parameters1 : packoffset(c0);
  float4 hdr10_parameters2 : packoffset(c1);
  float4 hdr10_parameters3 : packoffset(c2);
  float4 hdr10_parameters4 : packoffset(c3);
  float4 hdr10_parameters5 : packoffset(c4);
  float4 hdr10_parameters6 : packoffset(c5);
  float4 hdr10_parameters7 : packoffset(c6);
  float4 hdr10_parameters8 : packoffset(c7);
  float4 hdr10_parameters9 : packoffset(c8);
  float4 hdr10_parameters10 : packoffset(c9);
  row_major float4x4 m_wvp_prev : packoffset(c10);
  row_major float4x4 m_vp_prev : packoffset(c14);
  float4 ssfx_jitter : packoffset(c18);
  float4 L_hotness : packoffset(c19);
  float4 ssfx_florafixes_1 : packoffset(c20);
  float4 ssfx_florafixes_2 : packoffset(c21);
  float4 ssfx_lightsetup_1 : packoffset(c22);
  float4 env_color : packoffset(c23);
  float4 hmodel_stuff : packoffset(c24);
  float4 shader_param_8 : packoffset(c25);
  float4 shader_param_7 : packoffset(c26);
  float4 ssfx_fog : packoffset(c27);
  float4 ssfx_ao_setup : packoffset(c28);
  float4 ssfx_ao_setup2 : packoffset(c29);
  float4 ssfx_il_setup : packoffset(c30);
  float4 ssfx_il_setup2 : packoffset(c31);
  float4 ssfx_hud_hemi : packoffset(c32);
  float ssao_noise_tile_factor : packoffset(c33);
  float ssao_kernel_size : packoffset(c33.y);
  float4 sky_color : packoffset(c34);
}

cbuffer static_globals : register(b1)
{
  row_major float3x4 m_V : packoffset(c0);
  row_major float3x4 m_inv_V : packoffset(c3);
  row_major float4x4 m_P : packoffset(c6);
  row_major float4x4 m_VP : packoffset(c10);
  float4 timers : packoffset(c14);
  float4 fog_plane : packoffset(c15);
  float4 fog_params : packoffset(c16);
  float4 fog_color : packoffset(c17);
  float4 L_ambient : packoffset(c18);
  float3 L_sun_color : packoffset(c19);
  float3 L_sun_dir_w : packoffset(c20);
  float4 L_hemi_color : packoffset(c21);
  float3 eye_position : packoffset(c22);
  float4 pos_decompression_params : packoffset(c23);
  float4 screen_res : packoffset(c24);
  float3 L_sun_dir_e : packoffset(c25);
  float4 parallax : packoffset(c26);
  float4 rain_params : packoffset(c27);
  float4 pp_img_corrections : packoffset(c28);
  float4 pp_img_cg : packoffset(c29);
  float4 actor_data : packoffset(c30);
}

cbuffer dynamic_light : register(b2)
{
  float4 Ldynamic_color : packoffset(c0);
  float4 Ldynamic_pos : packoffset(c1);
  float4 Ldynamic_dir : packoffset(c2);
}

SamplerState smp_nofilter_s : register(s0);
SamplerState smp_linear_s : register(s1);
SamplerState smp_base_s : register(s2);
Texture2D<float4> s_position : register(t0);
Texture2D<float4> s_diffuse : register(t1);
Texture2D<float4> s_accumulator : register(t2);
TextureCube<float4> env_s0 : register(t3);
TextureCube<float4> env_s1 : register(t4);
Texture2D<float4> ssfx_ao : register(t5);
Texture2D<float4> ssfx_il : register(t6);
Texture2D<float4> s_motion_vectors : register(t7);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : TEXCOORD0,
  float2 v1 : TEXCOORD1,
  float4 v2 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = s_position.Sample(smp_nofilter_s, v0.xy).xyzw;
  r1.xyzw = s_diffuse.Sample(smp_nofilter_s, v0.xy).xyzw;
  r2.xy = float2(1,-1) * screen_res.xy;
  r2.xy = ssfx_jitter.xy * r2.xy;
  r2.xy = -r2.xy * float2(0.5,0.5) + v2.xy;
  r2.xy = r2.xy * pos_decompression_params.zw + -pos_decompression_params.xy;
  r2.xy = r2.xy * r0.zz;
  r0.x = 3.14159012 * r0.x;
  sincos(r0.x, r0.x, r3.x);
  r3.y = -r0.y * r0.y + 1;
  r3.y = sqrt(r3.y);
  r4.x = r3.x * r3.y;
  r4.y = r3.y * r0.x;
  if (4 == 0) r3.x = 0; else if (4+21 < 32) {   r3.x = (uint)r0.w << (32-(4 + 21)); r3.x = (uint)r3.x >> (32-4);  } else r3.x = (uint)r0.w >> 21;
  if (8 == 0) r3.y = 0; else if (8+13 < 32) {   r3.y = (uint)r0.w << (32-(8 + 13)); r3.y = (uint)r3.y >> (32-8);  } else r3.y = (uint)r0.w >> 13;
  r0.x = (int)r0.w & 0x80000000;
  r0.x = r0.x ? 16 : 0;
  r0.x = (int)r0.x + (int)r3.x;
  r0.x = (uint)r0.x;
  r0.w = 0.0430107526 * r0.x;
  r3.x = (uint)r3.y;
  r5.xyzw = s_accumulator.Sample(smp_nofilter_s, v0.xy).xyzw;
  r3.yzw = max(float3(0,0,0), r1.xyz);
  r3.yzw = log2(r3.yzw);
  r3.yzw = float3(2.20000005,2.20000005,2.20000005) * r3.yzw;
  r3.yzw = exp2(r3.yzw);
  r3.yzw = r5.www * r3.yzw + r5.xyz;
  r4.w = s_motion_vectors.Sample(smp_linear_s, v0.xy).z;
  r5.x = saturate(dot(env_color.xyz, float3(0.150000006,0.150000006,0.150000006)));
  r5.x = 1 + -r5.x;
  r5.x = ssfx_hud_hemi.x * r5.x;
  r5.x = r5.x * r4.w;
  r3.x = r3.x * 0.00392464688 + r5.x;
  r5.xy = r0.xx * float2(0.0430107526,0.0430107526) + float2(-0.949999988,-0.150000006);
  r5.xy = cmp(float2(0.0399999991,0.0399999991) >= abs(r5.xy));
  r0.x = r5.x ? 0 : r0.w;
  r0.w = 1.42499995 * r0.x;
  r5.x = r0.x * 4 + -0.5;
  r5.x = max(0, r5.x);
  r5.x = 0.25 * r5.x;
  r0.x = -0.750999987 + r0.x;
  r0.x = max(0, r0.x);
  r0.x = cmp(0 < r0.x);
  r0.x = r0.x ? 1.000000 : 0;
  r5.x = exp2(r5.x);
  r5.x = -3 * r5.x;
  r5.x = exp2(r5.x);
  r5.z = 1.79999995 * r5.x;
  r5.x = -r5.x * 0.100000024 + r1.w;
  r5.x = saturate(r5.x / r5.z);
  r0.x = r5.x * r0.x;
  r5.x = dot(r1.xyz, float3(0.212500006,0.715399981,0.0720999986));
  r5.x = 0.5 + -r5.x;
  r5.x = r5.x * 0.449999988 + 0.5;
  r5.z = cmp(0.5 >= r5.x);
  r5.w = -r5.x * 2 + 1;
  r6.xyz = r5.www * r1.xyz;
  r7.xyz = float3(1,1,1) + -r1.xyz;
  r6.xyz = -r6.xyz * r7.xyz + r1.xyz;
  r5.x = r5.x * 2 + -1;
  r7.xyzw = sqrt(r1.xyzw);
  r7.xyz = r7.xyz + -r1.xyz;
  r7.xyz = r5.xxx * r7.xyz + r1.xyz;
  r5.xzw = r5.zzz ? r6.xyz : r7.xyz;
  r6.xyz = float3(1,1,1) + -r5.xzw;
  r6.xyz = -r6.xyz * r6.xyz + float3(1,1,1);
  r6.w = dot(r5.xzw, float3(0.212500006,0.715399981,0.0720999986));
  r7.xyz = -r6.www + r5.xzw;
  r7.xyz = r7.xyz * float3(0.5,0.5,0.5) + r6.www;
  r6.xyz = -r7.xyz + r6.xyz;
  r5.xzw = max(float3(0,0,0), r5.xzw);
  r5.xzw = log2(r5.xzw);
  r5.xzw = float3(2.20000005,2.20000005,2.20000005) * r5.xzw;
  r5.xzw = exp2(r5.xzw);
  r6.xyz = max(float3(0,0,0), r6.xyz);
  r6.xyz = log2(r6.xyz);
  r6.xyz = float3(2.20000005,2.20000005,2.20000005) * r6.xyz;
  r6.xyz = exp2(r6.xyz);
  r6.xyz = r6.xyz + -r5.xzw;
  r6.xyz = r0.xxx * r6.xyz + r5.xzw;
  r6.xyz = max(float3(0,0,0), float3(1.25,1.25,1.25) * r6.xyz);
  r0.w = min(1, r0.w);
  r0.w = r0.w * 2 + -1;
  r0.w = r7.w * 2 + r0.w;
  r0.w = -1 + r0.w;
  r0.w = 1.32249999 * r0.w;
  r0.w = exp2(r0.w);
  r6.w = 0.0399999991 * r0.w;
  r5.xzw = -r0.www * float3(0.0399999991,0.0399999991,0.0399999991) + r5.xzw;
  r5.xzw = max(float3(0,0,0), r0.xxx * r5.xzw + r6.www);
  r0.x = -r0.x * 0.25 + 1;
  r0.w = log2(r1.w);
  r0.x = r0.x * r0.w;
  r0.x = exp2(r0.x);
  r0.w = 1 + -Ldynamic_color.w;
  r0.w = max(0.00100000005, r0.w);
  r0.w = 0.5 / r0.w;
  r0.x = r0.x * -0.550000012 + 1;
  r0.x = log2(r0.x);
  r0.x = r0.w * r0.x;
  r0.x = exp2(r0.x);
  r0.w = r0.x * r0.x;
  r1.w = -r0.x * r0.x + 1;
  r6.w = -r1.w * 6 + 6;
  r4.z = r0.y;
  r0.y = dot(r4.xyz, r4.xyz);
  r0.y = rsqrt(r0.y);
  r4.xyz = r4.xyz * r0.yyy;
  r7.x = dot(m_inv_V._m00_m01_m02, r4.xyz);
  r7.y = dot(m_inv_V._m10_m11_m12, r4.xyz);
  r7.z = dot(m_inv_V._m20_m21_m22, r4.xyz);
  r2.z = r0.z;
  r0.y = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.y);
  r4.xyz = r2.xyz * r0.zzz;
  r8.x = dot(m_inv_V._m00_m01_m02, r4.xyz);
  r8.y = dot(m_inv_V._m10_m11_m12, r4.xyz);
  r8.z = dot(m_inv_V._m20_m21_m22, r4.xyz);
  r0.z = max(abs(r7.y), abs(r7.z));
  r0.z = max(abs(r7.x), r0.z);
  r9.xyz = r7.xyz / r0.zzz;
  r0.z = cmp(r9.y < 0.999000013);
  r7.w = r9.y * 2 + -1;
  r9.w = r0.z ? r7.w : r9.y;
  r0.z = dot(r8.xyz, r7.xyz);
  r0.z = r0.z + r0.z;
  r10.xyz = r7.xyz * -r0.zzz + r8.xyz;
  r0.z = max(abs(r10.y), abs(r10.z));
  r0.z = max(abs(r10.x), r0.z);
  r10.xyz = r10.xyz / r0.zzz;
  r0.z = cmp(r10.y < 0.999000013);
  r7.w = r10.y * 2 + -1;
  r10.w = r0.z ? r7.w : r10.y;
  r0.z = dot(r9.xzw, r9.xzw);
  r0.z = rsqrt(r0.z);
  r9.xyz = r9.xwz * r0.zzz;
  r0.z = dot(r10.xzw, r10.xzw);
  r0.z = rsqrt(r0.z);
  r7.w = sqrt(r1.w);
  r0.x = r0.x * r0.x + r7.w;
  r0.x = r1.w * r0.x;
  r10.xyz = r10.xwz * r0.zzz + -r9.xyz;
  r10.xyz = r0.xxx * r10.xyz + r9.xyz;
  r11.xyz = r7.xyz * r7.xyz;
  r9.w = 0.00100000005;
  r12.xyz = env_s0.SampleLevel(smp_base_s, r9.xww, 6).xyz;
  r13.xyz = env_s0.SampleLevel(smp_base_s, r9.wyw, 6).xyz;
  r13.xyz = r13.xyz * r11.yyy;
  r12.xyz = r11.xxx * r12.xyz + r13.xyz;
  r13.xyz = env_s0.SampleLevel(smp_base_s, r9.wwz, 6).xyz;
  r12.xyz = r11.zzz * r13.xyz + r12.xyz;
  r13.xyz = env_s1.SampleLevel(smp_base_s, r9.xww, 6).xyz;
  r14.xyz = env_s1.SampleLevel(smp_base_s, r9.wyw, 6).xyz;
  r14.xyz = r14.xyz * r11.yyy;
  r11.xyw = r11.xxx * r13.xyz + r14.xyz;
  r9.xyz = env_s1.SampleLevel(smp_base_s, r9.wwz, 6).xyz;
  r9.xyz = r11.zzz * r9.xyz + r11.xyw;
  r11.xyz = env_s0.SampleLevel(smp_base_s, r10.xyz, r6.w).xyz;
  r10.xyz = env_s1.SampleLevel(smp_base_s, r10.xyz, r6.w).xyz;
  r9.xyz = r9.xyz + -r12.xyz;
  r9.xyz = env_color.www * r9.xyz + r12.xyz;
  r10.xyz = r10.xyz + -r11.xyz;
  r10.xyz = env_color.www * r10.xyz + r11.xyz;
  r9.xyz = env_color.xyz * r9.xyz;
  r10.xyz = env_color.xyz * r10.xyz;
  r9.xyz = r9.xyz * r3.xxx + L_ambient.xyz;
  r10.xyz = r10.xyz * r3.xxx + L_ambient.xyz;
  r9.xyz = max(float3(0,0,0), r9.xyz);
  r9.xyz = log2(r9.xyz);
  r9.xyz = float3(2.20000005,2.20000005,2.20000005) * r9.xyz;
  r9.xyz = exp2(r9.xyz);
  r10.xyz = max(float3(0,0,0), r10.xyz);
  r10.xyz = log2(r10.xyz);
  r10.xyz = float3(2.20000005,2.20000005,2.20000005) * r10.xyz;
  r10.xyz = exp2(r10.xyz);
  r0.x = r5.y ? 0.25 : 1;
  r10.xyz = r10.xyz * r0.xxx;
  r0.x = dot(r7.xyz, -r8.xyz);
  r0.z = max(9.99999975e-06, r0.x);
  r1.w = 1 + -r0.z;
  r3.x = r1.w * r1.w;
  r3.x = r3.x * r3.x;
  r1.w = r3.x * r1.w;
  r1.w = -r1.w * 0.488094985 + 0.976189971;
  r3.x = -9.27999973 * r0.z;
  r5.y = -r0.z * 1.06244004 + 2.56282997;
  r5.y = r5.y * r0.z + -2.02220988;
  r0.z = r5.y * r0.z + 1.55754006;
  r0.z = r0.z + -r1.w;
  r0.z = r0.w * r0.z + r1.w;
  r6.xyz = r9.xyz * r6.xyz;
  r7.xyz = float3(50,50,50) * r5.xzw;
  r7.xyz = min(float3(1,1,1), r7.xyz);
  r8.xyzw = r0.wwww * float4(-1,-0.0274999999,-0.572000027,0.0219999999) + float4(1,0.0425000004,1.03999996,-0.0399999991);
  r0.w = r8.x * r8.x;
  r1.w = exp2(r3.x);
  r0.w = min(r1.w, r0.w);
  r0.w = r0.w * r8.x + r8.y;
  r8.xy = r0.ww * float2(-1.03999996,1.03999996) + r8.zw;
  r7.xyz = r8.yyy * r7.xyz;
  r5.xyz = r5.xzw * r8.xxx + r7.xyz;
  r5.xyz = r5.xyz * r10.xyz;
  r0.x = saturate(r0.x + r0.x);
  r0.x = r0.x * r0.x;
  r5.xyz = r5.xyz * r0.xxx;
  r0.xzw = r0.zzz * r6.xyz + r5.xyz;
  r5.xy = v0.xy / ssfx_il_setup.xx;
  r5.xyz = ssfx_il.Sample(smp_linear_s, r5.xy).xyz;
  r6.xyz = float3(1,1,1) + r5.xyz;
  r6.xyz = float3(1,1,1) / r6.xyz;
  r5.xyz = r6.xyz * r5.xyz;
  r1.w = -1 + ssfx_il_setup2.y;
  r1.w = r4.w * r1.w + 1;
  r6.xyz = r5.xyz * r1.www;
  r3.x = dot(r6.xyz, float3(0.212500006,0.715399981,0.0720999986));
  r5.xyz = r5.xyz * r1.www + -r3.xxx;
  r5.xyz = ssfx_il_setup.zzz * r5.xyz + r3.xxx;
  r1.w = 30 * ssfx_il_setup.y;
  r6.xyz = r5.xyz * r1.www + float3(-1,-1,-1);
  r5.xyz = r5.xyz * r6.xyz + float3(1,1,1);
  r0.xzw = r5.xyz * r0.xzw;
  r1.w = ssfx_ao.Sample(smp_linear_s, v0.xy).w;
  r0.xzw = max(float3(0,0,0), r1.www * r0.xzw);
  r0.xzw = r3.yzw + r0.xzw;
  r0.xzw = max(float3(0,0,0), r0.xzw);
  r0.xzw = log2(r0.xzw);
  r0.xzw = float3(0.454545438,0.454545438,0.454545438) * r0.xzw;
  r0.xzw = exp2(r0.xzw);
  r2.w = 1;
  r1.w = dot(m_inv_V._m10_m11_m12_m13, r2.xyzw);
  r2.x = dot(Ldynamic_dir.xyzw, Ldynamic_dir.xyzw);
  r2.x = rsqrt(r2.x);
  r2.xyz = Ldynamic_dir.xyz * r2.xxx;
  r2.x = saturate(dot(r2.xyz, -r4.xyz));
  r2.yzw = Ldynamic_color.xyz + -fog_color.xyz;
  r2.xyz = r2.xxx * r2.yzw;
  r0.y = sqrt(r0.y);
  r0.y = saturate(r0.y * fog_params.w + fog_params.x);
  r2.w = -2 * ssfx_fog.x;
  r1.w = -ssfx_fog.x + r1.w;
  r2.w = 1 / r2.w;
  r1.w = saturate(r2.w * r1.w);
  r2.w = r1.w * -2 + 3;
  r1.w = r1.w * r1.w;
  r1.w = r2.w * r1.w;
  r2.w = ssfx_fog.y * r0.y;
  r2.w = saturate(r1.w * r2.w + r0.y);
  r1.w = ssfx_fog.z * r1.w;
  r2.xyz = r1.www * r2.xyz + fog_color.xyz;
  r2.xyz = r2.xyz + -r0.xzw;
  r0.xzw = r2.www * r2.xyz + r0.xzw;
  r1.w = r0.y * r0.y;
  r2.w = r1.w * r0.y;
  r0.y = 0;
  if (r0.y != 0) {
    r0.y = frac(shader_param_8.x);
    r1.w = -0.5 + v0.x;
    r3.x = screen_res.x / screen_res.y;
    r4.x = r1.w * r3.x + 0.5;
    r1.w = floor(shader_param_7.x);
    r3.x = -r1.w * 0.0500000007 + 5;
    r3.x = max(1, r3.x);
    r3.x = min(5, r3.x);
    r4.y = v0.y * r3.x;
    r3.x = cmp(0.0989999995 < r0.y);
    r4.z = cmp(r0.y < 0.100999996);
    r3.x = r3.x ? r4.z : 0;
    r5.xyz = floor(shader_param_8.yzw);
    r5.xz = float2(0.100000001,1) * r5.xz;
    r6.xyz = max(float3(0,0,0), r0.xzw);
    r6.xyz = log2(r6.xyz);
    r6.xyz = float3(2.20000005,2.20000005,2.20000005) * r6.xyz;
    r6.xyz = exp2(r6.xyz);
    r4.z = log2(r5.z);
    r4.z = 2.20000005 * r4.z;
    r4.z = exp2(r4.z);
    r6.xyz = r6.xyz * r4.zzz;
    r6.xyz = log2(r6.xyz);
    r7.xyz = float3(0.454545438,0.454545438,0.454545438) * r6.xyz;
    r7.xyz = exp2(r7.xyz);
  // Force HDR path
  r4.z = 1;
  if (r4.z != 0) {
      r8.xyz = float3(0.111111112,0.111111112,0.111111112) * r7.xyz;
      r9.xyz = r7.xyz;
    } else {
      r6.xyz = exp2(r6.xyz);
      r10.xyz = float3(1,1,1) + r6.xyz;
      r6.xyz = r6.xyz / r10.xyz;
      r6.xyz = float3(1.08928573,1.08928573,1.08928573) * r6.xyz;
      r6.xyz = log2(r6.xyz);
      r6.xyz = float3(0.454545438,0.454545438,0.454545438) * r6.xyz;
      r6.xyz = exp2(r6.xyz);
      r9.xyz = min(float3(1,1,1), r6.xyz);
      r8.xyz = float3(0.111111112,0.111111112,0.111111112) * r7.xyz;
    }
    r4.z = dot(r9.xyz, float3(0.298999995,0.587000012,0.114));
    r4.w = dot(r8.xyz, float3(0.298999995,0.587000012,0.114));
    r6.xy = r4.wz * r5.xx;
    r3.y = dot(r3.yzw, float3(0.298999995,0.587000012,0.114));
    r3.y = r3.y * r3.y;
    r6.z = 1.29999995 * r3.y;
    r6.w = dot(r1.xyz, float3(0.298999995,0.587000012,0.114));
    r5.w = 4;
  r1.xyz = max(float3(0,0,0), r6.yzw * r5.wxx);
    r2.xyz = r6.xzw * r5.wxx;
    r3.y = r5.y * 0.00999999978 + 0.0199999996;
    if (r3.x != 0) {
      r3.x = frac(shader_param_7.y);
      r5.y = r1.w * 0.00999999978 + -0.5;
      r5.x = 0.5;
      r3.zw = -r5.xy + r4.xy;
      r3.z = dot(r3.zw, r3.zw);
      r3.z = sqrt(r3.z);
      r3.x = r3.z + -r3.x;
      r3.z = 1 / -r3.y;
      r3.x = saturate(r3.x * r3.z);
      r3.z = r3.x * -2 + 3;
      r3.x = r3.x * r3.x;
      r3.x = r3.z * r3.x;
      r3.z = r3.x * r3.x;
      r3.x = -r3.x * r3.z + 1;
      r3.x = 1 + -r3.x;
    } else {
      r3.z = cmp(0.109000005 < r0.y);
      r3.w = cmp(r0.y < 0.111000001);
      r3.z = r3.w ? r3.z : 0;
      if (r3.z != 0) {
        r3.z = frac(shader_param_7.y);
        r5.y = r1.w * 0.00999999978 + -0.5;
        r5.x = 0.25;
        r4.zw = -r5.xy + r4.xy;
        r3.w = dot(r4.zw, r4.zw);
        r3.w = sqrt(r3.w);
        r3.z = r3.w + -r3.z;
        r3.w = 1 / -r3.y;
        r3.z = saturate(r3.z * r3.w);
        r3.w = r3.z * -2 + 3;
        r3.z = r3.z * r3.z;
        r3.z = r3.w * r3.z;
        r3.w = r3.z * r3.z;
        r3.z = -r3.z * r3.w + 1;
        r3.x = 1 + -r3.z;
      } else {
        r3.z = cmp(0.119000003 < r0.y);
        r3.w = cmp(r0.y < 0.121000007);
        r3.z = r3.w ? r3.z : 0;
        if (r3.z != 0) {
          r3.z = frac(shader_param_7.y);
          r5.y = r1.w * 0.00999999978 + -0.5;
          r5.x = 0.75;
          r4.zw = -r5.xy + r4.xy;
          r3.w = dot(r4.zw, r4.zw);
          r3.w = sqrt(r3.w);
          r3.z = r3.w + -r3.z;
          r3.w = 1 / -r3.y;
          r3.z = saturate(r3.z * r3.w);
          r3.w = r3.z * -2 + 3;
          r3.z = r3.z * r3.z;
          r3.z = r3.w * r3.z;
          r3.w = r3.z * r3.z;
          r3.z = -r3.z * r3.w + 1;
          r3.x = 1 + -r3.z;
        } else {
          r3.z = cmp(0.199000001 < r0.y);
          r3.w = cmp(r0.y < 0.201000005);
          r3.z = r3.w ? r3.z : 0;
          if (r3.z != 0) {
            r3.z = frac(shader_param_7.y);
            r5.yw = r1.ww * float2(0.00999999978,0.00999999978) + float2(-0.5,-0.5);
            r5.xz = float2(0.25,0.75);
            r5.xyzw = -r5.xyzw + r4.xyxy;
            r3.w = dot(r5.xy, r5.xy);
            r3.w = sqrt(r3.w);
            r3.w = r3.w + -r3.z;
            r4.z = 1 / -r3.y;
            r3.w = saturate(r4.z * r3.w);
            r4.w = r3.w * -2 + 3;
            r3.w = r3.w * r3.w;
            r3.w = r4.w * r3.w;
            r5.x = dot(r5.zw, r5.zw);
            r5.x = sqrt(r5.x);
            r3.z = r5.x + -r3.z;
            r3.z = saturate(r3.z * r4.z);
            r4.z = r3.z * -2 + 3;
            r3.z = r3.z * r3.z;
            r3.z = r4.z * r3.z;
            r4.zw = r3.zw * r3.zw;
            r3.w = -r3.w * r4.w + 1;
            r3.z = -r3.z * r4.z + 1;
            r3.x = -r3.w * r3.z + 1;
          } else {
            r3.z = cmp(0.398999989 < r0.y);
            r0.y = cmp(r0.y < 0.401000023);
            r0.y = r0.y ? r3.z : 0;
            if (r0.y != 0) {
              r0.y = frac(shader_param_7.y);
              r5.yw = r1.ww * float2(0.00999999978,0.00999999978) + float2(-0.5,-0.5);
              r5.xz = float2(0.0500000007,0.300000012);
              r6.xyzw = -r5.xyzw + r4.xyxy;
              r1.w = dot(r6.xy, r6.xy);
              r1.w = sqrt(r1.w);
              r1.w = r1.w + -r0.y;
              r3.y = 1 / -r3.y;
              r1.w = saturate(r3.y * r1.w);
              r3.z = r1.w * -2 + 3;
              r1.w = r1.w * r1.w;
              r1.w = r3.z * r1.w;
              r3.z = r1.w * r1.w;
              r3.w = dot(r6.zw, r6.zw);
              r3.w = sqrt(r3.w);
              r3.w = r3.w + -r0.y;
              r3.w = saturate(r3.w * r3.y);
              r4.z = r3.w * -2 + 3;
              r3.w = r3.w * r3.w;
              r3.w = r4.z * r3.w;
              r4.z = r3.w * r3.w;
              r6.xz = float2(0.699999988,0.949999988);
              r6.yw = r5.ww;
              r5.xyzw = -r6.xyzw + r4.xyxy;
              r4.x = dot(r5.xy, r5.xy);
              r4.x = sqrt(r4.x);
              r4.x = r4.x + -r0.y;
              r4.x = saturate(r4.x * r3.y);
              r4.y = r4.x * -2 + 3;
              r4.x = r4.x * r4.x;
              r4.x = r4.y * r4.x;
              r4.y = r4.x * r4.x;
              r4.w = dot(r5.zw, r5.zw);
              r4.w = sqrt(r4.w);
              r0.y = r4.w + -r0.y;
              r0.y = saturate(r0.y * r3.y);
              r3.y = r0.y * -2 + 3;
              r0.y = r0.y * r0.y;
              r0.y = r3.y * r0.y;
              r3.y = r0.y * r0.y;
              r1.w = -r1.w * r3.z + 1;
              r3.z = -r3.w * r4.z + 1;
              r1.w = r3.z * r1.w;
              r3.z = -r4.x * r4.y + 1;
              r1.w = r3.z * r1.w;
              r0.y = -r0.y * r3.y + 1;
              r3.x = -r1.w * r0.y + 1;
            }
          }
        }
      }
    }
  r4.xyzw = max(float4(0,0,0,0), r2.xyzw);
    r2.w = saturate(r2.w);
    o1.xyz = r4.xyz * r3.xxx;
    o0.xyz = r3.xxx * r1.xyz;
    o0.w = r2.w;
    o1.w = r4.w;
  } else {
    r0.xyz = max(float3(0,0,0), r0.xzw);
    r0.xyz = log2(r0.xyz);
    r0.xyz = float3(2.20000005,2.20000005,2.20000005) * r0.xyz;
    r0.xyz = exp2(r0.xyz);
    r0.w = log2(v0.w);
    r0.w = 2.20000005 * r0.w;
    r0.w = exp2(r0.w);
    r0.xyz = r0.xyz * r0.www;
    r0.xyz = log2(r0.xyz);
    r1.xyz = float3(0.454545438,0.454545438,0.454545438) * r0.xyz;
    r1.xyz = exp2(r1.xyz);
  // Force HDR path
  r0.w = 1;
  if (r0.w != 0) {
      r3.xyz = float3(0.111111112,0.111111112,0.111111112) * r1.xyz;
      r2.xyz = r1.xyz;
    } else {
      r0.xyz = exp2(r0.xyz);
      r4.xyz = float3(1,1,1) + r0.xyz;
      r0.xyz = r0.xyz / r4.xyz;
      r0.xyz = float3(1.08928573,1.08928573,1.08928573) * r0.xyz;
      r0.xyz = log2(r0.xyz);
      r0.xyz = float3(0.454545438,0.454545438,0.454545438) * r0.xyz;
      r0.xyz = exp2(r0.xyz);
      r2.xyz = min(float3(1,1,1), r0.xyz);
      r3.xyz = float3(0.111111112,0.111111112,0.111111112) * r1.xyz;
    }
    o0.xyzw = r2.xyzw;
    r3.w = r2.w;
    o1.xyzw = r3.xyzw;
  }
  return;
}