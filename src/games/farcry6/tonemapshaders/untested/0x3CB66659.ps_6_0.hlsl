#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = max(_27.x, 0.0f);
  float _32 = max(_27.y, 0.0f);
  float _33 = max(_27.z, 0.0f);
  float _34 = min(_31, 65000.0f);
  float _35 = min(_32, 65000.0f);
  float _36 = min(_33, 65000.0f);
  float4 _37 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _42 = max(_37.x, 0.0f);
  float _43 = max(_37.y, 0.0f);
  float _44 = max(_37.z, 0.0f);
  float _45 = max(_37.w, 0.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _48 = min(_44, 5000.0f);
  float _49 = min(_45, 5000.0f);
  float _52 = _25.x * cb0_028z;
  float _53 = _52 + cb0_028x;
  float _54 = cb2_027w / _53;
  float _55 = 1.0f - _54;
  float _56 = abs(_55);
  float _58 = cb2_027y * _56;
  float _60 = _58 - cb2_027z;
  float _61 = saturate(_60);
  float _62 = max(_61, _49);
  float _63 = saturate(_62);
  float _67 = cb2_006x * TEXCOORD0_centroid.x;
  float _68 = cb2_006y * TEXCOORD0_centroid.y;
  float _71 = _67 + cb2_006z;
  float _72 = _68 + cb2_006w;
  float _76 = cb2_007x * TEXCOORD0_centroid.x;
  float _77 = cb2_007y * TEXCOORD0_centroid.y;
  float _80 = _76 + cb2_007z;
  float _81 = _77 + cb2_007w;
  float _85 = cb2_008x * TEXCOORD0_centroid.x;
  float _86 = cb2_008y * TEXCOORD0_centroid.y;
  float _89 = _85 + cb2_008z;
  float _90 = _86 + cb2_008w;
  float4 _91 = t1.SampleLevel(s2_space2, float2(_71, _72), 0.0f);
  float _93 = max(_91.x, 0.0f);
  float _94 = min(_93, 65000.0f);
  float4 _95 = t1.SampleLevel(s2_space2, float2(_80, _81), 0.0f);
  float _97 = max(_95.y, 0.0f);
  float _98 = min(_97, 65000.0f);
  float4 _99 = t1.SampleLevel(s2_space2, float2(_89, _90), 0.0f);
  float _101 = max(_99.z, 0.0f);
  float _102 = min(_101, 65000.0f);
  float4 _103 = t4.SampleLevel(s2_space2, float2(_71, _72), 0.0f);
  float _105 = max(_103.x, 0.0f);
  float _106 = min(_105, 5000.0f);
  float4 _107 = t4.SampleLevel(s2_space2, float2(_80, _81), 0.0f);
  float _109 = max(_107.y, 0.0f);
  float _110 = min(_109, 5000.0f);
  float4 _111 = t4.SampleLevel(s2_space2, float2(_89, _90), 0.0f);
  float _113 = max(_111.z, 0.0f);
  float _114 = min(_113, 5000.0f);
  float4 _115 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _121 = cb2_005x * _115.x;
  float _122 = cb2_005x * _115.y;
  float _123 = cb2_005x * _115.z;
  float _124 = _94 - _34;
  float _125 = _98 - _35;
  float _126 = _102 - _36;
  float _127 = _121 * _124;
  float _128 = _122 * _125;
  float _129 = _123 * _126;
  float _130 = _127 + _34;
  float _131 = _128 + _35;
  float _132 = _129 + _36;
  float _133 = _106 - _46;
  float _134 = _110 - _47;
  float _135 = _114 - _48;
  float _136 = _121 * _133;
  float _137 = _122 * _134;
  float _138 = _123 * _135;
  float _139 = _136 + _46;
  float _140 = _137 + _47;
  float _141 = _138 + _48;
  float4 _142 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _146 = _139 - _130;
  float _147 = _140 - _131;
  float _148 = _141 - _132;
  float _149 = _146 * _63;
  float _150 = _147 * _63;
  float _151 = _148 * _63;
  float _152 = _149 + _130;
  float _153 = _150 + _131;
  float _154 = _151 + _132;
  float _155 = dot(float3(_152, _153, _154), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _159 = t0[0].SExposureData_020;
  float _161 = t0[0].SExposureData_004;
  float _163 = cb2_018x * 0.5f;
  float _164 = _163 * cb2_018y;
  float _165 = _161.x - _164;
  float _166 = cb2_018y * cb2_018x;
  float _167 = 1.0f / _166;
  float _168 = _165 * _167;
  float _169 = _155 / _159.x;
  float _170 = _169 * 5464.01611328125f;
  float _171 = _170 + 9.99999993922529e-09f;
  float _172 = log2(_171);
  float _173 = _172 - _165;
  float _174 = _173 * _167;
  float _175 = saturate(_174);
  float2 _176 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _175), 0.0f);
  float _179 = max(_176.y, 1.0000000116860974e-07f);
  float _180 = _176.x / _179;
  float _181 = _180 + _168;
  float _182 = _181 / _167;
  float _183 = _182 - _161.x;
  float _184 = -0.0f - _183;
  float _186 = _184 - cb2_027x;
  float _187 = max(0.0f, _186);
  float _190 = cb2_026z * _187;
  float _191 = _183 - cb2_027x;
  float _192 = max(0.0f, _191);
  float _194 = cb2_026w * _192;
  bool _195 = (_183 < 0.0f);
  float _196 = select(_195, _190, _194);
  float _197 = exp2(_196);
  float _198 = _197 * _152;
  float _199 = _197 * _153;
  float _200 = _197 * _154;
  float _205 = cb2_024y * _142.x;
  float _206 = cb2_024z * _142.y;
  float _207 = cb2_024w * _142.z;
  float _208 = _205 + _198;
  float _209 = _206 + _199;
  float _210 = _207 + _200;
  float _215 = _208 * cb2_025x;
  float _216 = _209 * cb2_025y;
  float _217 = _210 * cb2_025z;
  float _218 = dot(float3(_215, _216, _217), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _219 = t0[0].SExposureData_012;
  float _221 = _218 * 5464.01611328125f;
  float _222 = _221 * _219.x;
  float _223 = _222 + 9.99999993922529e-09f;
  float _224 = log2(_223);
  float _225 = _224 + 16.929765701293945f;
  float _226 = _225 * 0.05734497308731079f;
  float _227 = saturate(_226);
  float _228 = _227 * _227;
  float _229 = _227 * 2.0f;
  float _230 = 3.0f - _229;
  float _231 = _228 * _230;
  float _232 = _216 * 0.8450999855995178f;
  float _233 = _217 * 0.14589999616146088f;
  float _234 = _232 + _233;
  float _235 = _234 * 2.4890189170837402f;
  float _236 = _234 * 0.3754962384700775f;
  float _237 = _234 * 2.811495304107666f;
  float _238 = _234 * 5.519708156585693f;
  float _239 = _218 - _235;
  float _240 = _231 * _239;
  float _241 = _240 + _235;
  float _242 = _231 * 0.5f;
  float _243 = _242 + 0.5f;
  float _244 = _243 * _239;
  float _245 = _244 + _235;
  float _246 = _215 - _236;
  float _247 = _216 - _237;
  float _248 = _217 - _238;
  float _249 = _243 * _246;
  float _250 = _243 * _247;
  float _251 = _243 * _248;
  float _252 = _249 + _236;
  float _253 = _250 + _237;
  float _254 = _251 + _238;
  float _255 = 1.0f / _245;
  float _256 = _241 * _255;
  float _257 = _256 * _252;
  float _258 = _256 * _253;
  float _259 = _256 * _254;
  float _263 = cb2_020x * TEXCOORD0_centroid.x;
  float _264 = cb2_020y * TEXCOORD0_centroid.y;
  float _267 = _263 + cb2_020z;
  float _268 = _264 + cb2_020w;
  float _271 = dot(float2(_267, _268), float2(_267, _268));
  float _272 = 1.0f - _271;
  float _273 = saturate(_272);
  float _274 = log2(_273);
  float _275 = _274 * cb2_021w;
  float _276 = exp2(_275);
  float _280 = _257 - cb2_021x;
  float _281 = _258 - cb2_021y;
  float _282 = _259 - cb2_021z;
  float _283 = _280 * _276;
  float _284 = _281 * _276;
  float _285 = _282 * _276;
  float _286 = _283 + cb2_021x;
  float _287 = _284 + cb2_021y;
  float _288 = _285 + cb2_021z;
  float _289 = t0[0].SExposureData_000;
  float _291 = max(_159.x, 0.0010000000474974513f);
  float _292 = 1.0f / _291;
  float _293 = _292 * _289.x;
  bool _296 = ((uint)(cb2_069y) == 0);
  float _302;
  float _303;
  float _304;
  float _358;
  float _359;
  float _360;
  float _451;
  float _452;
  float _453;
  float _498;
  float _499;
  float _500;
  float _501;
  float _550;
  float _551;
  float _552;
  float _553;
  float _578;
  float _579;
  float _580;
  float _730;
  float _767;
  float _768;
  float _769;
  float _798;
  float _799;
  float _800;
  float _881;
  float _882;
  float _883;
  float _889;
  float _890;
  float _891;
  float _905;
  float _906;
  float _907;
  float _932;
  float _944;
  float _972;
  float _984;
  float _996;
  float _997;
  float _998;
  float _1025;
  float _1026;
  float _1027;
  if (!_296) {
    float _298 = _293 * _286;
    float _299 = _293 * _287;
    float _300 = _293 * _288;
    _302 = _298;
    _303 = _299;
    _304 = _300;
  } else {
    _302 = _286;
    _303 = _287;
    _304 = _288;
  }
  float _305 = _302 * 0.6130970120429993f;
  float _306 = mad(0.33952298760414124f, _303, _305);
  float _307 = mad(0.04737899824976921f, _304, _306);
  float _308 = _302 * 0.07019399851560593f;
  float _309 = mad(0.9163540005683899f, _303, _308);
  float _310 = mad(0.013451999984681606f, _304, _309);
  float _311 = _302 * 0.02061600051820278f;
  float _312 = mad(0.10956999659538269f, _303, _311);
  float _313 = mad(0.8698149919509888f, _304, _312);
  float _314 = log2(_307);
  float _315 = log2(_310);
  float _316 = log2(_313);
  float _317 = _314 * 0.04211956635117531f;
  float _318 = _315 * 0.04211956635117531f;
  float _319 = _316 * 0.04211956635117531f;
  float _320 = _317 + 0.6252607107162476f;
  float _321 = _318 + 0.6252607107162476f;
  float _322 = _319 + 0.6252607107162476f;
  float4 _323 = t6.SampleLevel(s2_space2, float3(_320, _321, _322), 0.0f);
  bool _329 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_329 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _333 = cb2_017x * _323.x;
    float _334 = cb2_017x * _323.y;
    float _335 = cb2_017x * _323.z;
    float _337 = _333 + cb2_017y;
    float _338 = _334 + cb2_017y;
    float _339 = _335 + cb2_017y;
    float _340 = exp2(_337);
    float _341 = exp2(_338);
    float _342 = exp2(_339);
    float _343 = _340 + 1.0f;
    float _344 = _341 + 1.0f;
    float _345 = _342 + 1.0f;
    float _346 = 1.0f / _343;
    float _347 = 1.0f / _344;
    float _348 = 1.0f / _345;
    float _350 = cb2_017z * _346;
    float _351 = cb2_017z * _347;
    float _352 = cb2_017z * _348;
    float _354 = _350 + cb2_017w;
    float _355 = _351 + cb2_017w;
    float _356 = _352 + cb2_017w;
    _358 = _354;
    _359 = _355;
    _360 = _356;
  } else {
    _358 = _323.x;
    _359 = _323.y;
    _360 = _323.z;
  }
  float _361 = _358 * 23.0f;
  float _362 = _361 + -14.473931312561035f;
  float _363 = exp2(_362);
  float _364 = _359 * 23.0f;
  float _365 = _364 + -14.473931312561035f;
  float _366 = exp2(_365);
  float _367 = _360 * 23.0f;
  float _368 = _367 + -14.473931312561035f;
  float _369 = exp2(_368);
  float _370 = dot(float3(_363, _366, _369), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _375 = dot(float3(_363, _366, _369), float3(_363, _366, _369));
  float _376 = rsqrt(_375);
  float _377 = _376 * _363;
  float _378 = _376 * _366;
  float _379 = _376 * _369;
  float _380 = cb2_001x - _377;
  float _381 = cb2_001y - _378;
  float _382 = cb2_001z - _379;
  float _383 = dot(float3(_380, _381, _382), float3(_380, _381, _382));
  float _386 = cb2_002z * _383;
  float _388 = _386 + cb2_002w;
  float _389 = saturate(_388);
  float _391 = cb2_002x * _389;
  float _392 = _370 - _363;
  float _393 = _370 - _366;
  float _394 = _370 - _369;
  float _395 = _391 * _392;
  float _396 = _391 * _393;
  float _397 = _391 * _394;
  float _398 = _395 + _363;
  float _399 = _396 + _366;
  float _400 = _397 + _369;
  float _402 = cb2_002y * _389;
  float _403 = 0.10000000149011612f - _398;
  float _404 = 0.10000000149011612f - _399;
  float _405 = 0.10000000149011612f - _400;
  float _406 = _403 * _402;
  float _407 = _404 * _402;
  float _408 = _405 * _402;
  float _409 = _406 + _398;
  float _410 = _407 + _399;
  float _411 = _408 + _400;
  float _412 = saturate(_409);
  float _413 = saturate(_410);
  float _414 = saturate(_411);
  float _419 = cb2_004x * TEXCOORD0_centroid.x;
  float _420 = cb2_004y * TEXCOORD0_centroid.y;
  float _423 = _419 + cb2_004z;
  float _424 = _420 + cb2_004w;
  float4 _430 = t8.Sample(s2_space2, float2(_423, _424));
  float _435 = _430.x * cb2_003x;
  float _436 = _430.y * cb2_003y;
  float _437 = _430.z * cb2_003z;
  float _438 = _430.w * cb2_003w;
  float _441 = _438 + cb2_026y;
  float _442 = saturate(_441);
  bool _445 = ((uint)(cb2_069y) == 0);
  if (!_445) {
    float _447 = _435 * _293;
    float _448 = _436 * _293;
    float _449 = _437 * _293;
    _451 = _447;
    _452 = _448;
    _453 = _449;
  } else {
    _451 = _435;
    _452 = _436;
    _453 = _437;
  }
  bool _456 = ((uint)(cb2_028x) == 2);
  bool _457 = ((uint)(cb2_028x) == 3);
  int _458 = (uint)(cb2_028x) & -2;
  bool _459 = (_458 == 2);
  bool _460 = ((uint)(cb2_028x) == 6);
  bool _461 = _459 || _460;
  if (_461) {
    float _463 = _451 * _442;
    float _464 = _452 * _442;
    float _465 = _453 * _442;
    float _466 = _442 * _442;
    _498 = _463;
    _499 = _464;
    _500 = _465;
    _501 = _466;
  } else {
    bool _468 = ((uint)(cb2_028x) == 4);
    if (_468) {
      float _470 = _451 + -1.0f;
      float _471 = _452 + -1.0f;
      float _472 = _453 + -1.0f;
      float _473 = _442 + -1.0f;
      float _474 = _470 * _442;
      float _475 = _471 * _442;
      float _476 = _472 * _442;
      float _477 = _473 * _442;
      float _478 = _474 + 1.0f;
      float _479 = _475 + 1.0f;
      float _480 = _476 + 1.0f;
      float _481 = _477 + 1.0f;
      _498 = _478;
      _499 = _479;
      _500 = _480;
      _501 = _481;
    } else {
      bool _483 = ((uint)(cb2_028x) == 5);
      if (_483) {
        float _485 = _451 + -0.5f;
        float _486 = _452 + -0.5f;
        float _487 = _453 + -0.5f;
        float _488 = _442 + -0.5f;
        float _489 = _485 * _442;
        float _490 = _486 * _442;
        float _491 = _487 * _442;
        float _492 = _488 * _442;
        float _493 = _489 + 0.5f;
        float _494 = _490 + 0.5f;
        float _495 = _491 + 0.5f;
        float _496 = _492 + 0.5f;
        _498 = _493;
        _499 = _494;
        _500 = _495;
        _501 = _496;
      } else {
        _498 = _451;
        _499 = _452;
        _500 = _453;
        _501 = _442;
      }
    }
  }
  if (_456) {
    float _503 = _498 + _412;
    float _504 = _499 + _413;
    float _505 = _500 + _414;
    _550 = _503;
    _551 = _504;
    _552 = _505;
    _553 = cb2_025w;
  } else {
    if (_457) {
      float _508 = 1.0f - _498;
      float _509 = 1.0f - _499;
      float _510 = 1.0f - _500;
      float _511 = _508 * _412;
      float _512 = _509 * _413;
      float _513 = _510 * _414;
      float _514 = _511 + _498;
      float _515 = _512 + _499;
      float _516 = _513 + _500;
      _550 = _514;
      _551 = _515;
      _552 = _516;
      _553 = cb2_025w;
    } else {
      bool _518 = ((uint)(cb2_028x) == 4);
      if (_518) {
        float _520 = _498 * _412;
        float _521 = _499 * _413;
        float _522 = _500 * _414;
        _550 = _520;
        _551 = _521;
        _552 = _522;
        _553 = cb2_025w;
      } else {
        bool _524 = ((uint)(cb2_028x) == 5);
        if (_524) {
          float _526 = _412 * 2.0f;
          float _527 = _526 * _498;
          float _528 = _413 * 2.0f;
          float _529 = _528 * _499;
          float _530 = _414 * 2.0f;
          float _531 = _530 * _500;
          _550 = _527;
          _551 = _529;
          _552 = _531;
          _553 = cb2_025w;
        } else {
          if (_460) {
            float _534 = _412 - _498;
            float _535 = _413 - _499;
            float _536 = _414 - _500;
            _550 = _534;
            _551 = _535;
            _552 = _536;
            _553 = cb2_025w;
          } else {
            float _538 = _498 - _412;
            float _539 = _499 - _413;
            float _540 = _500 - _414;
            float _541 = _501 * _538;
            float _542 = _501 * _539;
            float _543 = _501 * _540;
            float _544 = _541 + _412;
            float _545 = _542 + _413;
            float _546 = _543 + _414;
            float _547 = 1.0f - _501;
            float _548 = _547 * cb2_025w;
            _550 = _544;
            _551 = _545;
            _552 = _546;
            _553 = _548;
          }
        }
      }
    }
  }
  float _559 = cb2_016x - _550;
  float _560 = cb2_016y - _551;
  float _561 = cb2_016z - _552;
  float _562 = _559 * cb2_016w;
  float _563 = _560 * cb2_016w;
  float _564 = _561 * cb2_016w;
  float _565 = _562 + _550;
  float _566 = _563 + _551;
  float _567 = _564 + _552;
  bool _570 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_570 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _574 = cb2_024x * _565;
    float _575 = cb2_024x * _566;
    float _576 = cb2_024x * _567;
    _578 = _574;
    _579 = _575;
    _580 = _576;
  } else {
    _578 = _565;
    _579 = _566;
    _580 = _567;
  }
  float _583 = _578 * 0.9708889722824097f;
  float _584 = mad(0.026962999254465103f, _579, _583);
  float _585 = mad(0.002148000057786703f, _580, _584);
  float _586 = _578 * 0.01088900025933981f;
  float _587 = mad(0.9869629740715027f, _579, _586);
  float _588 = mad(0.002148000057786703f, _580, _587);
  float _589 = mad(0.026962999254465103f, _579, _586);
  float _590 = mad(0.9621480107307434f, _580, _589);
  float _591 = max(_585, 0.0f);
  float _592 = max(_588, 0.0f);
  float _593 = max(_590, 0.0f);
  float _594 = min(_591, cb2_095y);
  float _595 = min(_592, cb2_095y);
  float _596 = min(_593, cb2_095y);
  bool _599 = ((uint)(cb2_095x) == 0);
  bool _602 = ((uint)(cb2_094w) == 0);
  bool _604 = ((uint)(cb2_094z) == 0);
  bool _606 = ((uint)(cb2_094y) != 0);
  bool _608 = ((uint)(cb2_094x) == 0);
  bool _610 = ((uint)(cb2_069z) != 0);
  float _657 = asfloat((uint)(cb2_075y));
  float _658 = asfloat((uint)(cb2_075z));
  float _659 = asfloat((uint)(cb2_075w));
  float _660 = asfloat((uint)(cb2_074z));
  float _661 = asfloat((uint)(cb2_074w));
  float _662 = asfloat((uint)(cb2_075x));
  float _663 = asfloat((uint)(cb2_073w));
  float _664 = asfloat((uint)(cb2_074x));
  float _665 = asfloat((uint)(cb2_074y));
  float _666 = asfloat((uint)(cb2_077x));
  float _667 = asfloat((uint)(cb2_077y));
  float _668 = asfloat((uint)(cb2_079x));
  float _669 = asfloat((uint)(cb2_079y));
  float _670 = asfloat((uint)(cb2_079z));
  float _671 = asfloat((uint)(cb2_078y));
  float _672 = asfloat((uint)(cb2_078z));
  float _673 = asfloat((uint)(cb2_078w));
  float _674 = asfloat((uint)(cb2_077z));
  float _675 = asfloat((uint)(cb2_077w));
  float _676 = asfloat((uint)(cb2_078x));
  float _677 = asfloat((uint)(cb2_072y));
  float _678 = asfloat((uint)(cb2_072z));
  float _679 = asfloat((uint)(cb2_072w));
  float _680 = asfloat((uint)(cb2_071x));
  float _681 = asfloat((uint)(cb2_071y));
  float _682 = asfloat((uint)(cb2_076x));
  float _683 = asfloat((uint)(cb2_070w));
  float _684 = asfloat((uint)(cb2_070x));
  float _685 = asfloat((uint)(cb2_070y));
  float _686 = asfloat((uint)(cb2_070z));
  float _687 = asfloat((uint)(cb2_073x));
  float _688 = asfloat((uint)(cb2_073y));
  float _689 = asfloat((uint)(cb2_073z));
  float _690 = asfloat((uint)(cb2_071z));
  float _691 = asfloat((uint)(cb2_071w));
  float _692 = asfloat((uint)(cb2_072x));
  float _693 = max(_595, _596);
  float _694 = max(_594, _693);
  float _695 = 1.0f / _694;
  float _696 = _695 * _594;
  float _697 = _695 * _595;
  float _698 = _695 * _596;
  float _699 = abs(_696);
  float _700 = log2(_699);
  float _701 = _700 * _684;
  float _702 = exp2(_701);
  float _703 = abs(_697);
  float _704 = log2(_703);
  float _705 = _704 * _685;
  float _706 = exp2(_705);
  float _707 = abs(_698);
  float _708 = log2(_707);
  float _709 = _708 * _686;
  float _710 = exp2(_709);
  if (_606) {
    float _713 = asfloat((uint)(cb2_076w));
    float _715 = asfloat((uint)(cb2_076z));
    float _717 = asfloat((uint)(cb2_076y));
    float _718 = _715 * _595;
    float _719 = _717 * _594;
    float _720 = _713 * _596;
    float _721 = _719 + _720;
    float _722 = _721 + _718;
    _730 = _722;
  } else {
    float _724 = _691 * _595;
    float _725 = _690 * _594;
    float _726 = _692 * _596;
    float _727 = _724 + _725;
    float _728 = _727 + _726;
    _730 = _728;
  }
  float _731 = abs(_730);
  float _732 = log2(_731);
  float _733 = _732 * _683;
  float _734 = exp2(_733);
  float _735 = log2(_734);
  float _736 = _735 * _682;
  float _737 = exp2(_736);
  float _738 = select(_610, _737, _734);
  float _739 = _738 * _680;
  float _740 = _739 + _681;
  float _741 = 1.0f / _740;
  float _742 = _741 * _734;
  if (_606) {
    if (!_608) {
      float _745 = _702 * _674;
      float _746 = _706 * _675;
      float _747 = _710 * _676;
      float _748 = _746 + _745;
      float _749 = _748 + _747;
      float _750 = _706 * _672;
      float _751 = _702 * _671;
      float _752 = _710 * _673;
      float _753 = _750 + _751;
      float _754 = _753 + _752;
      float _755 = _710 * _670;
      float _756 = _706 * _669;
      float _757 = _702 * _668;
      float _758 = _756 + _757;
      float _759 = _758 + _755;
      float _760 = max(_754, _759);
      float _761 = max(_749, _760);
      float _762 = 1.0f / _761;
      float _763 = _762 * _749;
      float _764 = _762 * _754;
      float _765 = _762 * _759;
      _767 = _763;
      _768 = _764;
      _769 = _765;
    } else {
      _767 = _702;
      _768 = _706;
      _769 = _710;
    }
    float _770 = _767 * _667;
    float _771 = exp2(_770);
    float _772 = _771 * _666;
    float _773 = saturate(_772);
    float _774 = _767 * _666;
    float _775 = _767 - _774;
    float _776 = saturate(_775);
    float _777 = max(_666, _776);
    float _778 = min(_777, _773);
    float _779 = _768 * _667;
    float _780 = exp2(_779);
    float _781 = _780 * _666;
    float _782 = saturate(_781);
    float _783 = _768 * _666;
    float _784 = _768 - _783;
    float _785 = saturate(_784);
    float _786 = max(_666, _785);
    float _787 = min(_786, _782);
    float _788 = _769 * _667;
    float _789 = exp2(_788);
    float _790 = _789 * _666;
    float _791 = saturate(_790);
    float _792 = _769 * _666;
    float _793 = _769 - _792;
    float _794 = saturate(_793);
    float _795 = max(_666, _794);
    float _796 = min(_795, _791);
    _798 = _778;
    _799 = _787;
    _800 = _796;
  } else {
    _798 = _702;
    _799 = _706;
    _800 = _710;
  }
  float _801 = _798 * _690;
  float _802 = _799 * _691;
  float _803 = _802 + _801;
  float _804 = _800 * _692;
  float _805 = _803 + _804;
  float _806 = 1.0f / _805;
  float _807 = _806 * _742;
  float _808 = saturate(_807);
  float _809 = _808 * _798;
  float _810 = saturate(_809);
  float _811 = _808 * _799;
  float _812 = saturate(_811);
  float _813 = _808 * _800;
  float _814 = saturate(_813);
  float _815 = _810 * _677;
  float _816 = _677 - _815;
  float _817 = _812 * _678;
  float _818 = _678 - _817;
  float _819 = _814 * _679;
  float _820 = _679 - _819;
  float _821 = _814 * _692;
  float _822 = _810 * _690;
  float _823 = _812 * _691;
  float _824 = _742 - _822;
  float _825 = _824 - _823;
  float _826 = _825 - _821;
  float _827 = saturate(_826);
  float _828 = _818 * _691;
  float _829 = _816 * _690;
  float _830 = _820 * _692;
  float _831 = _828 + _829;
  float _832 = _831 + _830;
  float _833 = 1.0f / _832;
  float _834 = _833 * _827;
  float _835 = _834 * _816;
  float _836 = _835 + _810;
  float _837 = saturate(_836);
  float _838 = _834 * _818;
  float _839 = _838 + _812;
  float _840 = saturate(_839);
  float _841 = _834 * _820;
  float _842 = _841 + _814;
  float _843 = saturate(_842);
  float _844 = _843 * _692;
  float _845 = _837 * _690;
  float _846 = _840 * _691;
  float _847 = _742 - _845;
  float _848 = _847 - _846;
  float _849 = _848 - _844;
  float _850 = saturate(_849);
  float _851 = _850 * _687;
  float _852 = _851 + _837;
  float _853 = saturate(_852);
  float _854 = _850 * _688;
  float _855 = _854 + _840;
  float _856 = saturate(_855);
  float _857 = _850 * _689;
  float _858 = _857 + _843;
  float _859 = saturate(_858);
  if (!_604) {
    float _861 = _853 * _663;
    float _862 = _856 * _664;
    float _863 = _859 * _665;
    float _864 = _862 + _861;
    float _865 = _864 + _863;
    float _866 = _856 * _661;
    float _867 = _853 * _660;
    float _868 = _859 * _662;
    float _869 = _866 + _867;
    float _870 = _869 + _868;
    float _871 = _859 * _659;
    float _872 = _856 * _658;
    float _873 = _853 * _657;
    float _874 = _872 + _873;
    float _875 = _874 + _871;
    if (!_602) {
      float _877 = saturate(_865);
      float _878 = saturate(_870);
      float _879 = saturate(_875);
      _881 = _879;
      _882 = _878;
      _883 = _877;
    } else {
      _881 = _875;
      _882 = _870;
      _883 = _865;
    }
  } else {
    _881 = _859;
    _882 = _856;
    _883 = _853;
  }
  if (!_599) {
    float _885 = _883 * _663;
    float _886 = _882 * _663;
    float _887 = _881 * _663;
    _889 = _887;
    _890 = _886;
    _891 = _885;
  } else {
    _889 = _881;
    _890 = _882;
    _891 = _883;
  }
  if (_570) {
    float _895 = cb1_018z * 9.999999747378752e-05f;
    float _896 = _895 * _891;
    float _897 = _895 * _890;
    float _898 = _895 * _889;
    float _900 = 5000.0f / cb1_018y;
    float _901 = _896 * _900;
    float _902 = _897 * _900;
    float _903 = _898 * _900;
    _905 = _901;
    _906 = _902;
    _907 = _903;
  } else {
    _905 = _891;
    _906 = _890;
    _907 = _889;
  }
  float _908 = _905 * 1.6047500371932983f;
  float _909 = mad(-0.5310800075531006f, _906, _908);
  float _910 = mad(-0.07366999983787537f, _907, _909);
  float _911 = _905 * -0.10208000242710114f;
  float _912 = mad(1.1081299781799316f, _906, _911);
  float _913 = mad(-0.006049999967217445f, _907, _912);
  float _914 = _905 * -0.0032599999103695154f;
  float _915 = mad(-0.07275000214576721f, _906, _914);
  float _916 = mad(1.0760200023651123f, _907, _915);
  if (_570) {
    // float _918 = max(_910, 0.0f);
    // float _919 = max(_913, 0.0f);
    // float _920 = max(_916, 0.0f);
    // bool _921 = !(_918 >= 0.0030399328097701073f);
    // if (!_921) {
    //   float _923 = abs(_918);
    //   float _924 = log2(_923);
    //   float _925 = _924 * 0.4166666567325592f;
    //   float _926 = exp2(_925);
    //   float _927 = _926 * 1.0549999475479126f;
    //   float _928 = _927 + -0.054999999701976776f;
    //   _932 = _928;
    // } else {
    //   float _930 = _918 * 12.923210144042969f;
    //   _932 = _930;
    // }
    // bool _933 = !(_919 >= 0.0030399328097701073f);
    // if (!_933) {
    //   float _935 = abs(_919);
    //   float _936 = log2(_935);
    //   float _937 = _936 * 0.4166666567325592f;
    //   float _938 = exp2(_937);
    //   float _939 = _938 * 1.0549999475479126f;
    //   float _940 = _939 + -0.054999999701976776f;
    //   _944 = _940;
    // } else {
    //   float _942 = _919 * 12.923210144042969f;
    //   _944 = _942;
    // }
    // bool _945 = !(_920 >= 0.0030399328097701073f);
    // if (!_945) {
    //   float _947 = abs(_920);
    //   float _948 = log2(_947);
    //   float _949 = _948 * 0.4166666567325592f;
    //   float _950 = exp2(_949);
    //   float _951 = _950 * 1.0549999475479126f;
    //   float _952 = _951 + -0.054999999701976776f;
    //   _1025 = _932;
    //   _1026 = _944;
    //   _1027 = _952;
    // } else {
    //   float _954 = _920 * 12.923210144042969f;
    //   _1025 = _932;
    //   _1026 = _944;
    //   _1027 = _954;
    // }
    _1025 = renodx::color::srgb::EncodeSafe(_910);
    _1026 = renodx::color::srgb::EncodeSafe(_913);
    _1027 = renodx::color::srgb::EncodeSafe(_916);

  } else {
    float _956 = saturate(_910);
    float _957 = saturate(_913);
    float _958 = saturate(_916);
    bool _959 = ((uint)(cb1_018w) == -2);
    if (!_959) {
      bool _961 = !(_956 >= 0.0030399328097701073f);
      if (!_961) {
        float _963 = abs(_956);
        float _964 = log2(_963);
        float _965 = _964 * 0.4166666567325592f;
        float _966 = exp2(_965);
        float _967 = _966 * 1.0549999475479126f;
        float _968 = _967 + -0.054999999701976776f;
        _972 = _968;
      } else {
        float _970 = _956 * 12.923210144042969f;
        _972 = _970;
      }
      bool _973 = !(_957 >= 0.0030399328097701073f);
      if (!_973) {
        float _975 = abs(_957);
        float _976 = log2(_975);
        float _977 = _976 * 0.4166666567325592f;
        float _978 = exp2(_977);
        float _979 = _978 * 1.0549999475479126f;
        float _980 = _979 + -0.054999999701976776f;
        _984 = _980;
      } else {
        float _982 = _957 * 12.923210144042969f;
        _984 = _982;
      }
      bool _985 = !(_958 >= 0.0030399328097701073f);
      if (!_985) {
        float _987 = abs(_958);
        float _988 = log2(_987);
        float _989 = _988 * 0.4166666567325592f;
        float _990 = exp2(_989);
        float _991 = _990 * 1.0549999475479126f;
        float _992 = _991 + -0.054999999701976776f;
        _996 = _972;
        _997 = _984;
        _998 = _992;
      } else {
        float _994 = _958 * 12.923210144042969f;
        _996 = _972;
        _997 = _984;
        _998 = _994;
      }
    } else {
      _996 = _956;
      _997 = _957;
      _998 = _958;
    }
    float _1003 = abs(_996);
    float _1004 = abs(_997);
    float _1005 = abs(_998);
    float _1006 = log2(_1003);
    float _1007 = log2(_1004);
    float _1008 = log2(_1005);
    float _1009 = _1006 * cb2_000z;
    float _1010 = _1007 * cb2_000z;
    float _1011 = _1008 * cb2_000z;
    float _1012 = exp2(_1009);
    float _1013 = exp2(_1010);
    float _1014 = exp2(_1011);
    float _1015 = _1012 * cb2_000y;
    float _1016 = _1013 * cb2_000y;
    float _1017 = _1014 * cb2_000y;
    float _1018 = _1015 + cb2_000x;
    float _1019 = _1016 + cb2_000x;
    float _1020 = _1017 + cb2_000x;
    float _1021 = saturate(_1018);
    float _1022 = saturate(_1019);
    float _1023 = saturate(_1020);
    _1025 = _1021;
    _1026 = _1022;
    _1027 = _1023;
  }
  float _1031 = cb2_023x * TEXCOORD0_centroid.x;
  float _1032 = cb2_023y * TEXCOORD0_centroid.y;
  float _1035 = _1031 + cb2_023z;
  float _1036 = _1032 + cb2_023w;
  float4 _1039 = t10.SampleLevel(s0_space2, float2(_1035, _1036), 0.0f);
  float _1041 = _1039.x + -0.5f;
  float _1042 = _1041 * cb2_022x;
  float _1043 = _1042 + 0.5f;
  float _1044 = _1043 * 2.0f;
  float _1045 = _1044 * _1025;
  float _1046 = _1044 * _1026;
  float _1047 = _1044 * _1027;
  float _1051 = float((uint)(cb2_019z));
  float _1052 = float((uint)(cb2_019w));
  float _1053 = _1051 + SV_Position.x;
  float _1054 = _1052 + SV_Position.y;
  uint _1055 = uint(_1053);
  uint _1056 = uint(_1054);
  uint _1059 = cb2_019x + -1u;
  uint _1060 = cb2_019y + -1u;
  int _1061 = _1055 & _1059;
  int _1062 = _1056 & _1060;
  float4 _1063 = t3.Load(int3(_1061, _1062, 0));
  float _1067 = _1063.x * 2.0f;
  float _1068 = _1063.y * 2.0f;
  float _1069 = _1063.z * 2.0f;
  float _1070 = _1067 + -1.0f;
  float _1071 = _1068 + -1.0f;
  float _1072 = _1069 + -1.0f;
  float _1073 = _1070 * _553;
  float _1074 = _1071 * _553;
  float _1075 = _1072 * _553;
  float _1076 = _1073 + _1045;
  float _1077 = _1074 + _1046;
  float _1078 = _1075 + _1047;
  float _1079 = dot(float3(_1076, _1077, _1078), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1076;
  SV_Target.y = _1077;
  SV_Target.z = _1078;
  SV_Target.w = _1079;
  SV_Target_1.x = _1079;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
