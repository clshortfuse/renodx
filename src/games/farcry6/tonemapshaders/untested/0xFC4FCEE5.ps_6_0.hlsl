#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t8.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _58 = _56 + TEXCOORD0_centroid.x;
  float _59 = _57 + TEXCOORD0_centroid.y;
  float4 _60 = t8.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  bool _62 = (_60.y > 0.0f);
  float _63 = select(_62, TEXCOORD0_centroid.x, _58);
  float _64 = select(_62, TEXCOORD0_centroid.y, _59);
  float4 _65 = t1.SampleLevel(s4_space2, float2(_63, _64), 0.0f);
  float _69 = max(_65.x, 0.0f);
  float _70 = max(_65.y, 0.0f);
  float _71 = max(_65.z, 0.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float _74 = min(_71, 65000.0f);
  float4 _75 = t4.SampleLevel(s2_space2, float2(_63, _64), 0.0f);
  float _80 = max(_75.x, 0.0f);
  float _81 = max(_75.y, 0.0f);
  float _82 = max(_75.z, 0.0f);
  float _83 = max(_75.w, 0.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _87 = min(_83, 5000.0f);
  float _90 = _25.x * cb0_028z;
  float _91 = _90 + cb0_028x;
  float _92 = cb2_027w / _91;
  float _93 = 1.0f - _92;
  float _94 = abs(_93);
  float _96 = cb2_027y * _94;
  float _98 = _96 - cb2_027z;
  float _99 = saturate(_98);
  float _100 = max(_99, _87);
  float _101 = saturate(_100);
  float _105 = cb2_013x * _63;
  float _106 = cb2_013y * _64;
  float _109 = _105 + cb2_013z;
  float _110 = _106 + cb2_013w;
  float _113 = dot(float2(_109, _110), float2(_109, _110));
  float _114 = abs(_113);
  float _115 = log2(_114);
  float _116 = _115 * cb2_014x;
  float _117 = exp2(_116);
  float _118 = saturate(_117);
  float _122 = cb2_011x * _63;
  float _123 = cb2_011y * _64;
  float _126 = _122 + cb2_011z;
  float _127 = _123 + cb2_011w;
  float _128 = _126 * _118;
  float _129 = _127 * _118;
  float _130 = _128 + _63;
  float _131 = _129 + _64;
  float _135 = cb2_012x * _63;
  float _136 = cb2_012y * _64;
  float _139 = _135 + cb2_012z;
  float _140 = _136 + cb2_012w;
  float _141 = _139 * _118;
  float _142 = _140 * _118;
  float _143 = _141 + _63;
  float _144 = _142 + _64;
  float4 _145 = t1.SampleLevel(s2_space2, float2(_130, _131), 0.0f);
  float _149 = max(_145.x, 0.0f);
  float _150 = max(_145.y, 0.0f);
  float _151 = max(_145.z, 0.0f);
  float _152 = min(_149, 65000.0f);
  float _153 = min(_150, 65000.0f);
  float _154 = min(_151, 65000.0f);
  float4 _155 = t1.SampleLevel(s2_space2, float2(_143, _144), 0.0f);
  float _159 = max(_155.x, 0.0f);
  float _160 = max(_155.y, 0.0f);
  float _161 = max(_155.z, 0.0f);
  float _162 = min(_159, 65000.0f);
  float _163 = min(_160, 65000.0f);
  float _164 = min(_161, 65000.0f);
  float4 _165 = t4.SampleLevel(s2_space2, float2(_130, _131), 0.0f);
  float _169 = max(_165.x, 0.0f);
  float _170 = max(_165.y, 0.0f);
  float _171 = max(_165.z, 0.0f);
  float _172 = min(_169, 5000.0f);
  float _173 = min(_170, 5000.0f);
  float _174 = min(_171, 5000.0f);
  float4 _175 = t4.SampleLevel(s2_space2, float2(_143, _144), 0.0f);
  float _179 = max(_175.x, 0.0f);
  float _180 = max(_175.y, 0.0f);
  float _181 = max(_175.z, 0.0f);
  float _182 = min(_179, 5000.0f);
  float _183 = min(_180, 5000.0f);
  float _184 = min(_181, 5000.0f);
  float _189 = 1.0f - cb2_009x;
  float _190 = 1.0f - cb2_009y;
  float _191 = 1.0f - cb2_009z;
  float _196 = _189 - cb2_010x;
  float _197 = _190 - cb2_010y;
  float _198 = _191 - cb2_010z;
  float _199 = saturate(_196);
  float _200 = saturate(_197);
  float _201 = saturate(_198);
  float _202 = _199 * _72;
  float _203 = _200 * _73;
  float _204 = _201 * _74;
  float _205 = cb2_009x * _152;
  float _206 = cb2_009y * _153;
  float _207 = cb2_009z * _154;
  float _208 = _205 + _202;
  float _209 = _206 + _203;
  float _210 = _207 + _204;
  float _211 = cb2_010x * _162;
  float _212 = cb2_010y * _163;
  float _213 = cb2_010z * _164;
  float _214 = _208 + _211;
  float _215 = _209 + _212;
  float _216 = _210 + _213;
  float _217 = _199 * _84;
  float _218 = _200 * _85;
  float _219 = _201 * _86;
  float _220 = cb2_009x * _172;
  float _221 = cb2_009y * _173;
  float _222 = cb2_009z * _174;
  float _223 = cb2_010x * _182;
  float _224 = cb2_010y * _183;
  float _225 = cb2_010z * _184;
  float4 _226 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _230 = _217 - _214;
  float _231 = _230 + _220;
  float _232 = _231 + _223;
  float _233 = _218 - _215;
  float _234 = _233 + _221;
  float _235 = _234 + _224;
  float _236 = _219 - _216;
  float _237 = _236 + _222;
  float _238 = _237 + _225;
  float _239 = _232 * _101;
  float _240 = _235 * _101;
  float _241 = _238 * _101;
  float _242 = _239 + _214;
  float _243 = _240 + _215;
  float _244 = _241 + _216;
  float _245 = dot(float3(_242, _243, _244), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _249 = t0[0].SExposureData_020;
  float _251 = t0[0].SExposureData_004;
  float _253 = cb2_018x * 0.5f;
  float _254 = _253 * cb2_018y;
  float _255 = _251.x - _254;
  float _256 = cb2_018y * cb2_018x;
  float _257 = 1.0f / _256;
  float _258 = _255 * _257;
  float _259 = _245 / _249.x;
  float _260 = _259 * 5464.01611328125f;
  float _261 = _260 + 9.99999993922529e-09f;
  float _262 = log2(_261);
  float _263 = _262 - _255;
  float _264 = _263 * _257;
  float _265 = saturate(_264);
  float2 _266 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _265), 0.0f);
  float _269 = max(_266.y, 1.0000000116860974e-07f);
  float _270 = _266.x / _269;
  float _271 = _270 + _258;
  float _272 = _271 / _257;
  float _273 = _272 - _251.x;
  float _274 = -0.0f - _273;
  float _276 = _274 - cb2_027x;
  float _277 = max(0.0f, _276);
  float _280 = cb2_026z * _277;
  float _281 = _273 - cb2_027x;
  float _282 = max(0.0f, _281);
  float _284 = cb2_026w * _282;
  bool _285 = (_273 < 0.0f);
  float _286 = select(_285, _280, _284);
  float _287 = exp2(_286);
  float _288 = _287 * _242;
  float _289 = _287 * _243;
  float _290 = _287 * _244;
  float _295 = cb2_024y * _226.x;
  float _296 = cb2_024z * _226.y;
  float _297 = cb2_024w * _226.z;
  float _298 = _295 + _288;
  float _299 = _296 + _289;
  float _300 = _297 + _290;
  float _305 = _298 * cb2_025x;
  float _306 = _299 * cb2_025y;
  float _307 = _300 * cb2_025z;
  float _308 = dot(float3(_305, _306, _307), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _309 = t0[0].SExposureData_012;
  float _311 = _308 * 5464.01611328125f;
  float _312 = _311 * _309.x;
  float _313 = _312 + 9.99999993922529e-09f;
  float _314 = log2(_313);
  float _315 = _314 + 16.929765701293945f;
  float _316 = _315 * 0.05734497308731079f;
  float _317 = saturate(_316);
  float _318 = _317 * _317;
  float _319 = _317 * 2.0f;
  float _320 = 3.0f - _319;
  float _321 = _318 * _320;
  float _322 = _306 * 0.8450999855995178f;
  float _323 = _307 * 0.14589999616146088f;
  float _324 = _322 + _323;
  float _325 = _324 * 2.4890189170837402f;
  float _326 = _324 * 0.3754962384700775f;
  float _327 = _324 * 2.811495304107666f;
  float _328 = _324 * 5.519708156585693f;
  float _329 = _308 - _325;
  float _330 = _321 * _329;
  float _331 = _330 + _325;
  float _332 = _321 * 0.5f;
  float _333 = _332 + 0.5f;
  float _334 = _333 * _329;
  float _335 = _334 + _325;
  float _336 = _305 - _326;
  float _337 = _306 - _327;
  float _338 = _307 - _328;
  float _339 = _333 * _336;
  float _340 = _333 * _337;
  float _341 = _333 * _338;
  float _342 = _339 + _326;
  float _343 = _340 + _327;
  float _344 = _341 + _328;
  float _345 = 1.0f / _335;
  float _346 = _331 * _345;
  float _347 = _346 * _342;
  float _348 = _346 * _343;
  float _349 = _346 * _344;
  float _353 = cb2_020x * TEXCOORD0_centroid.x;
  float _354 = cb2_020y * TEXCOORD0_centroid.y;
  float _357 = _353 + cb2_020z;
  float _358 = _354 + cb2_020w;
  float _361 = dot(float2(_357, _358), float2(_357, _358));
  float _362 = 1.0f - _361;
  float _363 = saturate(_362);
  float _364 = log2(_363);
  float _365 = _364 * cb2_021w;
  float _366 = exp2(_365);
  float _370 = _347 - cb2_021x;
  float _371 = _348 - cb2_021y;
  float _372 = _349 - cb2_021z;
  float _373 = _370 * _366;
  float _374 = _371 * _366;
  float _375 = _372 * _366;
  float _376 = _373 + cb2_021x;
  float _377 = _374 + cb2_021y;
  float _378 = _375 + cb2_021z;
  float _379 = t0[0].SExposureData_000;
  float _381 = max(_249.x, 0.0010000000474974513f);
  float _382 = 1.0f / _381;
  float _383 = _382 * _379.x;
  bool _386 = ((uint)(cb2_069y) == 0);
  float _392;
  float _393;
  float _394;
  float _448;
  float _449;
  float _450;
  float _496;
  float _497;
  float _498;
  float _543;
  float _544;
  float _545;
  float _546;
  float _595;
  float _596;
  float _597;
  float _598;
  float _623;
  float _624;
  float _625;
  float _726;
  float _727;
  float _728;
  float _753;
  float _765;
  float _793;
  float _805;
  float _817;
  float _818;
  float _819;
  float _846;
  float _847;
  float _848;
  if (!_386) {
    float _388 = _383 * _376;
    float _389 = _383 * _377;
    float _390 = _383 * _378;
    _392 = _388;
    _393 = _389;
    _394 = _390;
  } else {
    _392 = _376;
    _393 = _377;
    _394 = _378;
  }
  float _395 = _392 * 0.6130970120429993f;
  float _396 = mad(0.33952298760414124f, _393, _395);
  float _397 = mad(0.04737899824976921f, _394, _396);
  float _398 = _392 * 0.07019399851560593f;
  float _399 = mad(0.9163540005683899f, _393, _398);
  float _400 = mad(0.013451999984681606f, _394, _399);
  float _401 = _392 * 0.02061600051820278f;
  float _402 = mad(0.10956999659538269f, _393, _401);
  float _403 = mad(0.8698149919509888f, _394, _402);
  float _404 = log2(_397);
  float _405 = log2(_400);
  float _406 = log2(_403);
  float _407 = _404 * 0.04211956635117531f;
  float _408 = _405 * 0.04211956635117531f;
  float _409 = _406 * 0.04211956635117531f;
  float _410 = _407 + 0.6252607107162476f;
  float _411 = _408 + 0.6252607107162476f;
  float _412 = _409 + 0.6252607107162476f;
  float4 _413 = t6.SampleLevel(s2_space2, float3(_410, _411, _412), 0.0f);
  bool _419 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_419 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _423 = cb2_017x * _413.x;
    float _424 = cb2_017x * _413.y;
    float _425 = cb2_017x * _413.z;
    float _427 = _423 + cb2_017y;
    float _428 = _424 + cb2_017y;
    float _429 = _425 + cb2_017y;
    float _430 = exp2(_427);
    float _431 = exp2(_428);
    float _432 = exp2(_429);
    float _433 = _430 + 1.0f;
    float _434 = _431 + 1.0f;
    float _435 = _432 + 1.0f;
    float _436 = 1.0f / _433;
    float _437 = 1.0f / _434;
    float _438 = 1.0f / _435;
    float _440 = cb2_017z * _436;
    float _441 = cb2_017z * _437;
    float _442 = cb2_017z * _438;
    float _444 = _440 + cb2_017w;
    float _445 = _441 + cb2_017w;
    float _446 = _442 + cb2_017w;
    _448 = _444;
    _449 = _445;
    _450 = _446;
  } else {
    _448 = _413.x;
    _449 = _413.y;
    _450 = _413.z;
  }
  float _451 = _448 * 23.0f;
  float _452 = _451 + -14.473931312561035f;
  float _453 = exp2(_452);
  float _454 = _449 * 23.0f;
  float _455 = _454 + -14.473931312561035f;
  float _456 = exp2(_455);
  float _457 = _450 * 23.0f;
  float _458 = _457 + -14.473931312561035f;
  float _459 = exp2(_458);
  float _464 = cb2_004x * TEXCOORD0_centroid.x;
  float _465 = cb2_004y * TEXCOORD0_centroid.y;
  float _468 = _464 + cb2_004z;
  float _469 = _465 + cb2_004w;
  float4 _475 = t7.Sample(s2_space2, float2(_468, _469));
  float _480 = _475.x * cb2_003x;
  float _481 = _475.y * cb2_003y;
  float _482 = _475.z * cb2_003z;
  float _483 = _475.w * cb2_003w;
  float _486 = _483 + cb2_026y;
  float _487 = saturate(_486);
  bool _490 = ((uint)(cb2_069y) == 0);
  if (!_490) {
    float _492 = _480 * _383;
    float _493 = _481 * _383;
    float _494 = _482 * _383;
    _496 = _492;
    _497 = _493;
    _498 = _494;
  } else {
    _496 = _480;
    _497 = _481;
    _498 = _482;
  }
  bool _501 = ((uint)(cb2_028x) == 2);
  bool _502 = ((uint)(cb2_028x) == 3);
  int _503 = (uint)(cb2_028x) & -2;
  bool _504 = (_503 == 2);
  bool _505 = ((uint)(cb2_028x) == 6);
  bool _506 = _504 || _505;
  if (_506) {
    float _508 = _496 * _487;
    float _509 = _497 * _487;
    float _510 = _498 * _487;
    float _511 = _487 * _487;
    _543 = _508;
    _544 = _509;
    _545 = _510;
    _546 = _511;
  } else {
    bool _513 = ((uint)(cb2_028x) == 4);
    if (_513) {
      float _515 = _496 + -1.0f;
      float _516 = _497 + -1.0f;
      float _517 = _498 + -1.0f;
      float _518 = _487 + -1.0f;
      float _519 = _515 * _487;
      float _520 = _516 * _487;
      float _521 = _517 * _487;
      float _522 = _518 * _487;
      float _523 = _519 + 1.0f;
      float _524 = _520 + 1.0f;
      float _525 = _521 + 1.0f;
      float _526 = _522 + 1.0f;
      _543 = _523;
      _544 = _524;
      _545 = _525;
      _546 = _526;
    } else {
      bool _528 = ((uint)(cb2_028x) == 5);
      if (_528) {
        float _530 = _496 + -0.5f;
        float _531 = _497 + -0.5f;
        float _532 = _498 + -0.5f;
        float _533 = _487 + -0.5f;
        float _534 = _530 * _487;
        float _535 = _531 * _487;
        float _536 = _532 * _487;
        float _537 = _533 * _487;
        float _538 = _534 + 0.5f;
        float _539 = _535 + 0.5f;
        float _540 = _536 + 0.5f;
        float _541 = _537 + 0.5f;
        _543 = _538;
        _544 = _539;
        _545 = _540;
        _546 = _541;
      } else {
        _543 = _496;
        _544 = _497;
        _545 = _498;
        _546 = _487;
      }
    }
  }
  if (_501) {
    float _548 = _543 + _453;
    float _549 = _544 + _456;
    float _550 = _545 + _459;
    _595 = _548;
    _596 = _549;
    _597 = _550;
    _598 = cb2_025w;
  } else {
    if (_502) {
      float _553 = 1.0f - _543;
      float _554 = 1.0f - _544;
      float _555 = 1.0f - _545;
      float _556 = _553 * _453;
      float _557 = _554 * _456;
      float _558 = _555 * _459;
      float _559 = _556 + _543;
      float _560 = _557 + _544;
      float _561 = _558 + _545;
      _595 = _559;
      _596 = _560;
      _597 = _561;
      _598 = cb2_025w;
    } else {
      bool _563 = ((uint)(cb2_028x) == 4);
      if (_563) {
        float _565 = _543 * _453;
        float _566 = _544 * _456;
        float _567 = _545 * _459;
        _595 = _565;
        _596 = _566;
        _597 = _567;
        _598 = cb2_025w;
      } else {
        bool _569 = ((uint)(cb2_028x) == 5);
        if (_569) {
          float _571 = _453 * 2.0f;
          float _572 = _571 * _543;
          float _573 = _456 * 2.0f;
          float _574 = _573 * _544;
          float _575 = _459 * 2.0f;
          float _576 = _575 * _545;
          _595 = _572;
          _596 = _574;
          _597 = _576;
          _598 = cb2_025w;
        } else {
          if (_505) {
            float _579 = _453 - _543;
            float _580 = _456 - _544;
            float _581 = _459 - _545;
            _595 = _579;
            _596 = _580;
            _597 = _581;
            _598 = cb2_025w;
          } else {
            float _583 = _543 - _453;
            float _584 = _544 - _456;
            float _585 = _545 - _459;
            float _586 = _546 * _583;
            float _587 = _546 * _584;
            float _588 = _546 * _585;
            float _589 = _586 + _453;
            float _590 = _587 + _456;
            float _591 = _588 + _459;
            float _592 = 1.0f - _546;
            float _593 = _592 * cb2_025w;
            _595 = _589;
            _596 = _590;
            _597 = _591;
            _598 = _593;
          }
        }
      }
    }
  }
  float _604 = cb2_016x - _595;
  float _605 = cb2_016y - _596;
  float _606 = cb2_016z - _597;
  float _607 = _604 * cb2_016w;
  float _608 = _605 * cb2_016w;
  float _609 = _606 * cb2_016w;
  float _610 = _607 + _595;
  float _611 = _608 + _596;
  float _612 = _609 + _597;
  bool _615 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_615 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _619 = cb2_024x * _610;
    float _620 = cb2_024x * _611;
    float _621 = cb2_024x * _612;
    _623 = _619;
    _624 = _620;
    _625 = _621;
  } else {
    _623 = _610;
    _624 = _611;
    _625 = _612;
  }
  float _626 = _623 * 0.9708889722824097f;
  float _627 = mad(0.026962999254465103f, _624, _626);
  float _628 = mad(0.002148000057786703f, _625, _627);
  float _629 = _623 * 0.01088900025933981f;
  float _630 = mad(0.9869629740715027f, _624, _629);
  float _631 = mad(0.002148000057786703f, _625, _630);
  float _632 = mad(0.026962999254465103f, _624, _629);
  float _633 = mad(0.9621480107307434f, _625, _632);
  if (_615) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _638 = cb1_018y * 0.10000000149011612f;
        float _639 = log2(cb1_018z);
        float _640 = _639 + -13.287712097167969f;
        float _641 = _640 * 1.4929734468460083f;
        float _642 = _641 + 18.0f;
        float _643 = exp2(_642);
        float _644 = _643 * 0.18000000715255737f;
        float _645 = abs(_644);
        float _646 = log2(_645);
        float _647 = _646 * 1.5f;
        float _648 = exp2(_647);
        float _649 = _648 * _638;
        float _650 = _649 / cb1_018z;
        float _651 = _650 + -0.07636754959821701f;
        float _652 = _646 * 1.2750000953674316f;
        float _653 = exp2(_652);
        float _654 = _653 * 0.07636754959821701f;
        float _655 = cb1_018y * 0.011232397519052029f;
        float _656 = _655 * _648;
        float _657 = _656 / cb1_018z;
        float _658 = _654 - _657;
        float _659 = _653 + -0.11232396960258484f;
        float _660 = _659 * _638;
        float _661 = _660 / cb1_018z;
        float _662 = _661 * cb1_018z;
        float _663 = abs(_628);
        float _664 = abs(_631);
        float _665 = abs(_633);
        float _666 = log2(_663);
        float _667 = log2(_664);
        float _668 = log2(_665);
        float _669 = _666 * 1.5f;
        float _670 = _667 * 1.5f;
        float _671 = _668 * 1.5f;
        float _672 = exp2(_669);
        float _673 = exp2(_670);
        float _674 = exp2(_671);
        float _675 = _672 * _662;
        float _676 = _673 * _662;
        float _677 = _674 * _662;
        float _678 = _666 * 1.2750000953674316f;
        float _679 = _667 * 1.2750000953674316f;
        float _680 = _668 * 1.2750000953674316f;
        float _681 = exp2(_678);
        float _682 = exp2(_679);
        float _683 = exp2(_680);
        float _684 = _681 * _651;
        float _685 = _682 * _651;
        float _686 = _683 * _651;
        float _687 = _684 + _658;
        float _688 = _685 + _658;
        float _689 = _686 + _658;
        float _690 = _675 / _687;
        float _691 = _676 / _688;
        float _692 = _677 / _689;
        float _693 = _690 * 9.999999747378752e-05f;
        float _694 = _691 * 9.999999747378752e-05f;
        float _695 = _692 * 9.999999747378752e-05f;
        float _696 = 5000.0f / cb1_018y;
        float _697 = _693 * _696;
        float _698 = _694 * _696;
        float _699 = _695 * _696;
        _726 = _697;
        _727 = _698;
        _728 = _699;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_628, _631, _633));
      _726 = tonemapped.x, _727 = tonemapped.y, _728 = tonemapped.z;
    }
      } else {
        float _701 = _628 + 0.020616600289940834f;
        float _702 = _631 + 0.020616600289940834f;
        float _703 = _633 + 0.020616600289940834f;
        float _704 = _701 * _628;
        float _705 = _702 * _631;
        float _706 = _703 * _633;
        float _707 = _704 + -7.456949970219284e-05f;
        float _708 = _705 + -7.456949970219284e-05f;
        float _709 = _706 + -7.456949970219284e-05f;
        float _710 = _628 * 0.9837960004806519f;
        float _711 = _631 * 0.9837960004806519f;
        float _712 = _633 * 0.9837960004806519f;
        float _713 = _710 + 0.4336790144443512f;
        float _714 = _711 + 0.4336790144443512f;
        float _715 = _712 + 0.4336790144443512f;
        float _716 = _713 * _628;
        float _717 = _714 * _631;
        float _718 = _715 * _633;
        float _719 = _716 + 0.24617899954319f;
        float _720 = _717 + 0.24617899954319f;
        float _721 = _718 + 0.24617899954319f;
        float _722 = _707 / _719;
        float _723 = _708 / _720;
        float _724 = _709 / _721;
        _726 = _722;
        _727 = _723;
        _728 = _724;
      }
      float _729 = _726 * 1.6047500371932983f;
      float _730 = mad(-0.5310800075531006f, _727, _729);
      float _731 = mad(-0.07366999983787537f, _728, _730);
      float _732 = _726 * -0.10208000242710114f;
      float _733 = mad(1.1081299781799316f, _727, _732);
      float _734 = mad(-0.006049999967217445f, _728, _733);
      float _735 = _726 * -0.0032599999103695154f;
      float _736 = mad(-0.07275000214576721f, _727, _735);
      float _737 = mad(1.0760200023651123f, _728, _736);
      if (_615) {
        // float _739 = max(_731, 0.0f);
        // float _740 = max(_734, 0.0f);
        // float _741 = max(_737, 0.0f);
        // bool _742 = !(_739 >= 0.0030399328097701073f);
        // if (!_742) {
        //   float _744 = abs(_739);
        //   float _745 = log2(_744);
        //   float _746 = _745 * 0.4166666567325592f;
        //   float _747 = exp2(_746);
        //   float _748 = _747 * 1.0549999475479126f;
        //   float _749 = _748 + -0.054999999701976776f;
        //   _753 = _749;
        // } else {
        //   float _751 = _739 * 12.923210144042969f;
        //   _753 = _751;
        // }
        // bool _754 = !(_740 >= 0.0030399328097701073f);
        // if (!_754) {
        //   float _756 = abs(_740);
        //   float _757 = log2(_756);
        //   float _758 = _757 * 0.4166666567325592f;
        //   float _759 = exp2(_758);
        //   float _760 = _759 * 1.0549999475479126f;
        //   float _761 = _760 + -0.054999999701976776f;
        //   _765 = _761;
        // } else {
        //   float _763 = _740 * 12.923210144042969f;
        //   _765 = _763;
        // }
        // bool _766 = !(_741 >= 0.0030399328097701073f);
        // if (!_766) {
        //   float _768 = abs(_741);
        //   float _769 = log2(_768);
        //   float _770 = _769 * 0.4166666567325592f;
        //   float _771 = exp2(_770);
        //   float _772 = _771 * 1.0549999475479126f;
        //   float _773 = _772 + -0.054999999701976776f;
        //   _846 = _753;
        //   _847 = _765;
        //   _848 = _773;
        // } else {
        //   float _775 = _741 * 12.923210144042969f;
        //   _846 = _753;
        //   _847 = _765;
        //   _848 = _775;
        // }
        _846 = renodx::color::srgb::EncodeSafe(_731);
        _847 = renodx::color::srgb::EncodeSafe(_734);
        _848 = renodx::color::srgb::EncodeSafe(_737);

      } else {
        float _777 = saturate(_731);
        float _778 = saturate(_734);
        float _779 = saturate(_737);
        bool _780 = ((uint)(cb1_018w) == -2);
        if (!_780) {
          bool _782 = !(_777 >= 0.0030399328097701073f);
          if (!_782) {
            float _784 = abs(_777);
            float _785 = log2(_784);
            float _786 = _785 * 0.4166666567325592f;
            float _787 = exp2(_786);
            float _788 = _787 * 1.0549999475479126f;
            float _789 = _788 + -0.054999999701976776f;
            _793 = _789;
          } else {
            float _791 = _777 * 12.923210144042969f;
            _793 = _791;
          }
          bool _794 = !(_778 >= 0.0030399328097701073f);
          if (!_794) {
            float _796 = abs(_778);
            float _797 = log2(_796);
            float _798 = _797 * 0.4166666567325592f;
            float _799 = exp2(_798);
            float _800 = _799 * 1.0549999475479126f;
            float _801 = _800 + -0.054999999701976776f;
            _805 = _801;
          } else {
            float _803 = _778 * 12.923210144042969f;
            _805 = _803;
          }
          bool _806 = !(_779 >= 0.0030399328097701073f);
          if (!_806) {
            float _808 = abs(_779);
            float _809 = log2(_808);
            float _810 = _809 * 0.4166666567325592f;
            float _811 = exp2(_810);
            float _812 = _811 * 1.0549999475479126f;
            float _813 = _812 + -0.054999999701976776f;
            _817 = _793;
            _818 = _805;
            _819 = _813;
          } else {
            float _815 = _779 * 12.923210144042969f;
            _817 = _793;
            _818 = _805;
            _819 = _815;
          }
        } else {
          _817 = _777;
          _818 = _778;
          _819 = _779;
        }
        float _824 = abs(_817);
        float _825 = abs(_818);
        float _826 = abs(_819);
        float _827 = log2(_824);
        float _828 = log2(_825);
        float _829 = log2(_826);
        float _830 = _827 * cb2_000z;
        float _831 = _828 * cb2_000z;
        float _832 = _829 * cb2_000z;
        float _833 = exp2(_830);
        float _834 = exp2(_831);
        float _835 = exp2(_832);
        float _836 = _833 * cb2_000y;
        float _837 = _834 * cb2_000y;
        float _838 = _835 * cb2_000y;
        float _839 = _836 + cb2_000x;
        float _840 = _837 + cb2_000x;
        float _841 = _838 + cb2_000x;
        float _842 = saturate(_839);
        float _843 = saturate(_840);
        float _844 = saturate(_841);
        _846 = _842;
        _847 = _843;
        _848 = _844;
      }
      float _852 = cb2_023x * TEXCOORD0_centroid.x;
      float _853 = cb2_023y * TEXCOORD0_centroid.y;
      float _856 = _852 + cb2_023z;
      float _857 = _853 + cb2_023w;
      float4 _860 = t10.SampleLevel(s0_space2, float2(_856, _857), 0.0f);
      float _862 = _860.x + -0.5f;
      float _863 = _862 * cb2_022x;
      float _864 = _863 + 0.5f;
      float _865 = _864 * 2.0f;
      float _866 = _865 * _846;
      float _867 = _865 * _847;
      float _868 = _865 * _848;
      float _872 = float((uint)(cb2_019z));
      float _873 = float((uint)(cb2_019w));
      float _874 = _872 + SV_Position.x;
      float _875 = _873 + SV_Position.y;
      uint _876 = uint(_874);
      uint _877 = uint(_875);
      uint _880 = cb2_019x + -1u;
      uint _881 = cb2_019y + -1u;
      int _882 = _876 & _880;
      int _883 = _877 & _881;
      float4 _884 = t3.Load(int3(_882, _883, 0));
      float _888 = _884.x * 2.0f;
      float _889 = _884.y * 2.0f;
      float _890 = _884.z * 2.0f;
      float _891 = _888 + -1.0f;
      float _892 = _889 + -1.0f;
      float _893 = _890 + -1.0f;
      float _894 = _891 * _598;
      float _895 = _892 * _598;
      float _896 = _893 * _598;
      float _897 = _894 + _866;
      float _898 = _895 + _867;
      float _899 = _896 + _868;
      float _900 = dot(float3(_897, _898, _899), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _897;
      SV_Target.y = _898;
      SV_Target.z = _899;
      SV_Target.w = _900;
      SV_Target_1.x = _900;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
