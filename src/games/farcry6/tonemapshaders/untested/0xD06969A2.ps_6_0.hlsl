#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = max(_26.x, 0.0f);
  float _31 = max(_26.y, 0.0f);
  float _32 = max(_26.z, 0.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float _35 = min(_32, 65000.0f);
  float4 _36 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _41 = max(_36.x, 0.0f);
  float _42 = max(_36.y, 0.0f);
  float _43 = max(_36.z, 0.0f);
  float _44 = max(_36.w, 0.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _48 = min(_44, 5000.0f);
  float _51 = _24.x * cb0_028z;
  float _52 = _51 + cb0_028x;
  float _53 = cb2_027w / _52;
  float _54 = 1.0f - _53;
  float _55 = abs(_54);
  float _57 = cb2_027y * _55;
  float _59 = _57 - cb2_027z;
  float _60 = saturate(_59);
  float _61 = max(_60, _48);
  float _62 = saturate(_61);
  float _66 = cb2_013x * TEXCOORD0_centroid.x;
  float _67 = cb2_013y * TEXCOORD0_centroid.y;
  float _70 = _66 + cb2_013z;
  float _71 = _67 + cb2_013w;
  float _74 = dot(float2(_70, _71), float2(_70, _71));
  float _75 = abs(_74);
  float _76 = log2(_75);
  float _77 = _76 * cb2_014x;
  float _78 = exp2(_77);
  float _79 = saturate(_78);
  float _83 = cb2_011x * TEXCOORD0_centroid.x;
  float _84 = cb2_011y * TEXCOORD0_centroid.y;
  float _87 = _83 + cb2_011z;
  float _88 = _84 + cb2_011w;
  float _89 = _87 * _79;
  float _90 = _88 * _79;
  float _91 = _89 + TEXCOORD0_centroid.x;
  float _92 = _90 + TEXCOORD0_centroid.y;
  float _96 = cb2_012x * TEXCOORD0_centroid.x;
  float _97 = cb2_012y * TEXCOORD0_centroid.y;
  float _100 = _96 + cb2_012z;
  float _101 = _97 + cb2_012w;
  float _102 = _100 * _79;
  float _103 = _101 * _79;
  float _104 = _102 + TEXCOORD0_centroid.x;
  float _105 = _103 + TEXCOORD0_centroid.y;
  float4 _106 = t1.SampleLevel(s2_space2, float2(_91, _92), 0.0f);
  float _110 = max(_106.x, 0.0f);
  float _111 = max(_106.y, 0.0f);
  float _112 = max(_106.z, 0.0f);
  float _113 = min(_110, 65000.0f);
  float _114 = min(_111, 65000.0f);
  float _115 = min(_112, 65000.0f);
  float4 _116 = t1.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _120 = max(_116.x, 0.0f);
  float _121 = max(_116.y, 0.0f);
  float _122 = max(_116.z, 0.0f);
  float _123 = min(_120, 65000.0f);
  float _124 = min(_121, 65000.0f);
  float _125 = min(_122, 65000.0f);
  float4 _126 = t4.SampleLevel(s2_space2, float2(_91, _92), 0.0f);
  float _130 = max(_126.x, 0.0f);
  float _131 = max(_126.y, 0.0f);
  float _132 = max(_126.z, 0.0f);
  float _133 = min(_130, 5000.0f);
  float _134 = min(_131, 5000.0f);
  float _135 = min(_132, 5000.0f);
  float4 _136 = t4.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _140 = max(_136.x, 0.0f);
  float _141 = max(_136.y, 0.0f);
  float _142 = max(_136.z, 0.0f);
  float _143 = min(_140, 5000.0f);
  float _144 = min(_141, 5000.0f);
  float _145 = min(_142, 5000.0f);
  float _150 = 1.0f - cb2_009x;
  float _151 = 1.0f - cb2_009y;
  float _152 = 1.0f - cb2_009z;
  float _157 = _150 - cb2_010x;
  float _158 = _151 - cb2_010y;
  float _159 = _152 - cb2_010z;
  float _160 = saturate(_157);
  float _161 = saturate(_158);
  float _162 = saturate(_159);
  float _163 = _160 * _33;
  float _164 = _161 * _34;
  float _165 = _162 * _35;
  float _166 = cb2_009x * _113;
  float _167 = cb2_009y * _114;
  float _168 = cb2_009z * _115;
  float _169 = _166 + _163;
  float _170 = _167 + _164;
  float _171 = _168 + _165;
  float _172 = cb2_010x * _123;
  float _173 = cb2_010y * _124;
  float _174 = cb2_010z * _125;
  float _175 = _169 + _172;
  float _176 = _170 + _173;
  float _177 = _171 + _174;
  float _178 = _160 * _45;
  float _179 = _161 * _46;
  float _180 = _162 * _47;
  float _181 = cb2_009x * _133;
  float _182 = cb2_009y * _134;
  float _183 = cb2_009z * _135;
  float _184 = cb2_010x * _143;
  float _185 = cb2_010y * _144;
  float _186 = cb2_010z * _145;
  float4 _187 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _191 = _178 - _175;
  float _192 = _191 + _181;
  float _193 = _192 + _184;
  float _194 = _179 - _176;
  float _195 = _194 + _182;
  float _196 = _195 + _185;
  float _197 = _180 - _177;
  float _198 = _197 + _183;
  float _199 = _198 + _186;
  float _200 = _193 * _62;
  float _201 = _196 * _62;
  float _202 = _199 * _62;
  float _203 = _200 + _175;
  float _204 = _201 + _176;
  float _205 = _202 + _177;
  float _206 = dot(float3(_203, _204, _205), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _210 = t0[0].SExposureData_020;
  float _212 = t0[0].SExposureData_004;
  float _214 = cb2_018x * 0.5f;
  float _215 = _214 * cb2_018y;
  float _216 = _212.x - _215;
  float _217 = cb2_018y * cb2_018x;
  float _218 = 1.0f / _217;
  float _219 = _216 * _218;
  float _220 = _206 / _210.x;
  float _221 = _220 * 5464.01611328125f;
  float _222 = _221 + 9.99999993922529e-09f;
  float _223 = log2(_222);
  float _224 = _223 - _216;
  float _225 = _224 * _218;
  float _226 = saturate(_225);
  float2 _227 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _226), 0.0f);
  float _230 = max(_227.y, 1.0000000116860974e-07f);
  float _231 = _227.x / _230;
  float _232 = _231 + _219;
  float _233 = _232 / _218;
  float _234 = _233 - _212.x;
  float _235 = -0.0f - _234;
  float _237 = _235 - cb2_027x;
  float _238 = max(0.0f, _237);
  float _241 = cb2_026z * _238;
  float _242 = _234 - cb2_027x;
  float _243 = max(0.0f, _242);
  float _245 = cb2_026w * _243;
  bool _246 = (_234 < 0.0f);
  float _247 = select(_246, _241, _245);
  float _248 = exp2(_247);
  float _249 = _248 * _203;
  float _250 = _248 * _204;
  float _251 = _248 * _205;
  float _256 = cb2_024y * _187.x;
  float _257 = cb2_024z * _187.y;
  float _258 = cb2_024w * _187.z;
  float _259 = _256 + _249;
  float _260 = _257 + _250;
  float _261 = _258 + _251;
  float _266 = _259 * cb2_025x;
  float _267 = _260 * cb2_025y;
  float _268 = _261 * cb2_025z;
  float _269 = dot(float3(_266, _267, _268), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _270 = t0[0].SExposureData_012;
  float _272 = _269 * 5464.01611328125f;
  float _273 = _272 * _270.x;
  float _274 = _273 + 9.99999993922529e-09f;
  float _275 = log2(_274);
  float _276 = _275 + 16.929765701293945f;
  float _277 = _276 * 0.05734497308731079f;
  float _278 = saturate(_277);
  float _279 = _278 * _278;
  float _280 = _278 * 2.0f;
  float _281 = 3.0f - _280;
  float _282 = _279 * _281;
  float _283 = _267 * 0.8450999855995178f;
  float _284 = _268 * 0.14589999616146088f;
  float _285 = _283 + _284;
  float _286 = _285 * 2.4890189170837402f;
  float _287 = _285 * 0.3754962384700775f;
  float _288 = _285 * 2.811495304107666f;
  float _289 = _285 * 5.519708156585693f;
  float _290 = _269 - _286;
  float _291 = _282 * _290;
  float _292 = _291 + _286;
  float _293 = _282 * 0.5f;
  float _294 = _293 + 0.5f;
  float _295 = _294 * _290;
  float _296 = _295 + _286;
  float _297 = _266 - _287;
  float _298 = _267 - _288;
  float _299 = _268 - _289;
  float _300 = _294 * _297;
  float _301 = _294 * _298;
  float _302 = _294 * _299;
  float _303 = _300 + _287;
  float _304 = _301 + _288;
  float _305 = _302 + _289;
  float _306 = 1.0f / _296;
  float _307 = _292 * _306;
  float _308 = _307 * _303;
  float _309 = _307 * _304;
  float _310 = _307 * _305;
  float _314 = cb2_020x * TEXCOORD0_centroid.x;
  float _315 = cb2_020y * TEXCOORD0_centroid.y;
  float _318 = _314 + cb2_020z;
  float _319 = _315 + cb2_020w;
  float _322 = dot(float2(_318, _319), float2(_318, _319));
  float _323 = 1.0f - _322;
  float _324 = saturate(_323);
  float _325 = log2(_324);
  float _326 = _325 * cb2_021w;
  float _327 = exp2(_326);
  float _331 = _308 - cb2_021x;
  float _332 = _309 - cb2_021y;
  float _333 = _310 - cb2_021z;
  float _334 = _331 * _327;
  float _335 = _332 * _327;
  float _336 = _333 * _327;
  float _337 = _334 + cb2_021x;
  float _338 = _335 + cb2_021y;
  float _339 = _336 + cb2_021z;
  float _340 = t0[0].SExposureData_000;
  float _342 = max(_210.x, 0.0010000000474974513f);
  float _343 = 1.0f / _342;
  float _344 = _343 * _340.x;
  bool _347 = ((uint)(cb2_069y) == 0);
  float _353;
  float _354;
  float _355;
  float _409;
  float _410;
  float _411;
  float _457;
  float _458;
  float _459;
  float _504;
  float _505;
  float _506;
  float _507;
  float _556;
  float _557;
  float _558;
  float _559;
  float _584;
  float _585;
  float _586;
  float _736;
  float _773;
  float _774;
  float _775;
  float _804;
  float _805;
  float _806;
  float _887;
  float _888;
  float _889;
  float _895;
  float _896;
  float _897;
  float _911;
  float _912;
  float _913;
  float _938;
  float _950;
  float _978;
  float _990;
  float _1002;
  float _1003;
  float _1004;
  float _1031;
  float _1032;
  float _1033;
  if (!_347) {
    float _349 = _344 * _337;
    float _350 = _344 * _338;
    float _351 = _344 * _339;
    _353 = _349;
    _354 = _350;
    _355 = _351;
  } else {
    _353 = _337;
    _354 = _338;
    _355 = _339;
  }
  float _356 = _353 * 0.6130970120429993f;
  float _357 = mad(0.33952298760414124f, _354, _356);
  float _358 = mad(0.04737899824976921f, _355, _357);
  float _359 = _353 * 0.07019399851560593f;
  float _360 = mad(0.9163540005683899f, _354, _359);
  float _361 = mad(0.013451999984681606f, _355, _360);
  float _362 = _353 * 0.02061600051820278f;
  float _363 = mad(0.10956999659538269f, _354, _362);
  float _364 = mad(0.8698149919509888f, _355, _363);
  float _365 = log2(_358);
  float _366 = log2(_361);
  float _367 = log2(_364);
  float _368 = _365 * 0.04211956635117531f;
  float _369 = _366 * 0.04211956635117531f;
  float _370 = _367 * 0.04211956635117531f;
  float _371 = _368 + 0.6252607107162476f;
  float _372 = _369 + 0.6252607107162476f;
  float _373 = _370 + 0.6252607107162476f;
  float4 _374 = t6.SampleLevel(s2_space2, float3(_371, _372, _373), 0.0f);
  bool _380 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_380 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _384 = cb2_017x * _374.x;
    float _385 = cb2_017x * _374.y;
    float _386 = cb2_017x * _374.z;
    float _388 = _384 + cb2_017y;
    float _389 = _385 + cb2_017y;
    float _390 = _386 + cb2_017y;
    float _391 = exp2(_388);
    float _392 = exp2(_389);
    float _393 = exp2(_390);
    float _394 = _391 + 1.0f;
    float _395 = _392 + 1.0f;
    float _396 = _393 + 1.0f;
    float _397 = 1.0f / _394;
    float _398 = 1.0f / _395;
    float _399 = 1.0f / _396;
    float _401 = cb2_017z * _397;
    float _402 = cb2_017z * _398;
    float _403 = cb2_017z * _399;
    float _405 = _401 + cb2_017w;
    float _406 = _402 + cb2_017w;
    float _407 = _403 + cb2_017w;
    _409 = _405;
    _410 = _406;
    _411 = _407;
  } else {
    _409 = _374.x;
    _410 = _374.y;
    _411 = _374.z;
  }
  float _412 = _409 * 23.0f;
  float _413 = _412 + -14.473931312561035f;
  float _414 = exp2(_413);
  float _415 = _410 * 23.0f;
  float _416 = _415 + -14.473931312561035f;
  float _417 = exp2(_416);
  float _418 = _411 * 23.0f;
  float _419 = _418 + -14.473931312561035f;
  float _420 = exp2(_419);
  float _425 = cb2_004x * TEXCOORD0_centroid.x;
  float _426 = cb2_004y * TEXCOORD0_centroid.y;
  float _429 = _425 + cb2_004z;
  float _430 = _426 + cb2_004w;
  float4 _436 = t7.Sample(s2_space2, float2(_429, _430));
  float _441 = _436.x * cb2_003x;
  float _442 = _436.y * cb2_003y;
  float _443 = _436.z * cb2_003z;
  float _444 = _436.w * cb2_003w;
  float _447 = _444 + cb2_026y;
  float _448 = saturate(_447);
  bool _451 = ((uint)(cb2_069y) == 0);
  if (!_451) {
    float _453 = _441 * _344;
    float _454 = _442 * _344;
    float _455 = _443 * _344;
    _457 = _453;
    _458 = _454;
    _459 = _455;
  } else {
    _457 = _441;
    _458 = _442;
    _459 = _443;
  }
  bool _462 = ((uint)(cb2_028x) == 2);
  bool _463 = ((uint)(cb2_028x) == 3);
  int _464 = (uint)(cb2_028x) & -2;
  bool _465 = (_464 == 2);
  bool _466 = ((uint)(cb2_028x) == 6);
  bool _467 = _465 || _466;
  if (_467) {
    float _469 = _457 * _448;
    float _470 = _458 * _448;
    float _471 = _459 * _448;
    float _472 = _448 * _448;
    _504 = _469;
    _505 = _470;
    _506 = _471;
    _507 = _472;
  } else {
    bool _474 = ((uint)(cb2_028x) == 4);
    if (_474) {
      float _476 = _457 + -1.0f;
      float _477 = _458 + -1.0f;
      float _478 = _459 + -1.0f;
      float _479 = _448 + -1.0f;
      float _480 = _476 * _448;
      float _481 = _477 * _448;
      float _482 = _478 * _448;
      float _483 = _479 * _448;
      float _484 = _480 + 1.0f;
      float _485 = _481 + 1.0f;
      float _486 = _482 + 1.0f;
      float _487 = _483 + 1.0f;
      _504 = _484;
      _505 = _485;
      _506 = _486;
      _507 = _487;
    } else {
      bool _489 = ((uint)(cb2_028x) == 5);
      if (_489) {
        float _491 = _457 + -0.5f;
        float _492 = _458 + -0.5f;
        float _493 = _459 + -0.5f;
        float _494 = _448 + -0.5f;
        float _495 = _491 * _448;
        float _496 = _492 * _448;
        float _497 = _493 * _448;
        float _498 = _494 * _448;
        float _499 = _495 + 0.5f;
        float _500 = _496 + 0.5f;
        float _501 = _497 + 0.5f;
        float _502 = _498 + 0.5f;
        _504 = _499;
        _505 = _500;
        _506 = _501;
        _507 = _502;
      } else {
        _504 = _457;
        _505 = _458;
        _506 = _459;
        _507 = _448;
      }
    }
  }
  if (_462) {
    float _509 = _504 + _414;
    float _510 = _505 + _417;
    float _511 = _506 + _420;
    _556 = _509;
    _557 = _510;
    _558 = _511;
    _559 = cb2_025w;
  } else {
    if (_463) {
      float _514 = 1.0f - _504;
      float _515 = 1.0f - _505;
      float _516 = 1.0f - _506;
      float _517 = _514 * _414;
      float _518 = _515 * _417;
      float _519 = _516 * _420;
      float _520 = _517 + _504;
      float _521 = _518 + _505;
      float _522 = _519 + _506;
      _556 = _520;
      _557 = _521;
      _558 = _522;
      _559 = cb2_025w;
    } else {
      bool _524 = ((uint)(cb2_028x) == 4);
      if (_524) {
        float _526 = _504 * _414;
        float _527 = _505 * _417;
        float _528 = _506 * _420;
        _556 = _526;
        _557 = _527;
        _558 = _528;
        _559 = cb2_025w;
      } else {
        bool _530 = ((uint)(cb2_028x) == 5);
        if (_530) {
          float _532 = _414 * 2.0f;
          float _533 = _532 * _504;
          float _534 = _417 * 2.0f;
          float _535 = _534 * _505;
          float _536 = _420 * 2.0f;
          float _537 = _536 * _506;
          _556 = _533;
          _557 = _535;
          _558 = _537;
          _559 = cb2_025w;
        } else {
          if (_466) {
            float _540 = _414 - _504;
            float _541 = _417 - _505;
            float _542 = _420 - _506;
            _556 = _540;
            _557 = _541;
            _558 = _542;
            _559 = cb2_025w;
          } else {
            float _544 = _504 - _414;
            float _545 = _505 - _417;
            float _546 = _506 - _420;
            float _547 = _507 * _544;
            float _548 = _507 * _545;
            float _549 = _507 * _546;
            float _550 = _547 + _414;
            float _551 = _548 + _417;
            float _552 = _549 + _420;
            float _553 = 1.0f - _507;
            float _554 = _553 * cb2_025w;
            _556 = _550;
            _557 = _551;
            _558 = _552;
            _559 = _554;
          }
        }
      }
    }
  }
  float _565 = cb2_016x - _556;
  float _566 = cb2_016y - _557;
  float _567 = cb2_016z - _558;
  float _568 = _565 * cb2_016w;
  float _569 = _566 * cb2_016w;
  float _570 = _567 * cb2_016w;
  float _571 = _568 + _556;
  float _572 = _569 + _557;
  float _573 = _570 + _558;
  bool _576 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_576 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _580 = cb2_024x * _571;
    float _581 = cb2_024x * _572;
    float _582 = cb2_024x * _573;
    _584 = _580;
    _585 = _581;
    _586 = _582;
  } else {
    _584 = _571;
    _585 = _572;
    _586 = _573;
  }
  float _589 = _584 * 0.9708889722824097f;
  float _590 = mad(0.026962999254465103f, _585, _589);
  float _591 = mad(0.002148000057786703f, _586, _590);
  float _592 = _584 * 0.01088900025933981f;
  float _593 = mad(0.9869629740715027f, _585, _592);
  float _594 = mad(0.002148000057786703f, _586, _593);
  float _595 = mad(0.026962999254465103f, _585, _592);
  float _596 = mad(0.9621480107307434f, _586, _595);
  float _597 = max(_591, 0.0f);
  float _598 = max(_594, 0.0f);
  float _599 = max(_596, 0.0f);
  float _600 = min(_597, cb2_095y);
  float _601 = min(_598, cb2_095y);
  float _602 = min(_599, cb2_095y);
  bool _605 = ((uint)(cb2_095x) == 0);
  bool _608 = ((uint)(cb2_094w) == 0);
  bool _610 = ((uint)(cb2_094z) == 0);
  bool _612 = ((uint)(cb2_094y) != 0);
  bool _614 = ((uint)(cb2_094x) == 0);
  bool _616 = ((uint)(cb2_069z) != 0);
  float _663 = asfloat((uint)(cb2_075y));
  float _664 = asfloat((uint)(cb2_075z));
  float _665 = asfloat((uint)(cb2_075w));
  float _666 = asfloat((uint)(cb2_074z));
  float _667 = asfloat((uint)(cb2_074w));
  float _668 = asfloat((uint)(cb2_075x));
  float _669 = asfloat((uint)(cb2_073w));
  float _670 = asfloat((uint)(cb2_074x));
  float _671 = asfloat((uint)(cb2_074y));
  float _672 = asfloat((uint)(cb2_077x));
  float _673 = asfloat((uint)(cb2_077y));
  float _674 = asfloat((uint)(cb2_079x));
  float _675 = asfloat((uint)(cb2_079y));
  float _676 = asfloat((uint)(cb2_079z));
  float _677 = asfloat((uint)(cb2_078y));
  float _678 = asfloat((uint)(cb2_078z));
  float _679 = asfloat((uint)(cb2_078w));
  float _680 = asfloat((uint)(cb2_077z));
  float _681 = asfloat((uint)(cb2_077w));
  float _682 = asfloat((uint)(cb2_078x));
  float _683 = asfloat((uint)(cb2_072y));
  float _684 = asfloat((uint)(cb2_072z));
  float _685 = asfloat((uint)(cb2_072w));
  float _686 = asfloat((uint)(cb2_071x));
  float _687 = asfloat((uint)(cb2_071y));
  float _688 = asfloat((uint)(cb2_076x));
  float _689 = asfloat((uint)(cb2_070w));
  float _690 = asfloat((uint)(cb2_070x));
  float _691 = asfloat((uint)(cb2_070y));
  float _692 = asfloat((uint)(cb2_070z));
  float _693 = asfloat((uint)(cb2_073x));
  float _694 = asfloat((uint)(cb2_073y));
  float _695 = asfloat((uint)(cb2_073z));
  float _696 = asfloat((uint)(cb2_071z));
  float _697 = asfloat((uint)(cb2_071w));
  float _698 = asfloat((uint)(cb2_072x));
  float _699 = max(_601, _602);
  float _700 = max(_600, _699);
  float _701 = 1.0f / _700;
  float _702 = _701 * _600;
  float _703 = _701 * _601;
  float _704 = _701 * _602;
  float _705 = abs(_702);
  float _706 = log2(_705);
  float _707 = _706 * _690;
  float _708 = exp2(_707);
  float _709 = abs(_703);
  float _710 = log2(_709);
  float _711 = _710 * _691;
  float _712 = exp2(_711);
  float _713 = abs(_704);
  float _714 = log2(_713);
  float _715 = _714 * _692;
  float _716 = exp2(_715);
  if (_612) {
    float _719 = asfloat((uint)(cb2_076w));
    float _721 = asfloat((uint)(cb2_076z));
    float _723 = asfloat((uint)(cb2_076y));
    float _724 = _721 * _601;
    float _725 = _723 * _600;
    float _726 = _719 * _602;
    float _727 = _725 + _726;
    float _728 = _727 + _724;
    _736 = _728;
  } else {
    float _730 = _697 * _601;
    float _731 = _696 * _600;
    float _732 = _698 * _602;
    float _733 = _730 + _731;
    float _734 = _733 + _732;
    _736 = _734;
  }
  float _737 = abs(_736);
  float _738 = log2(_737);
  float _739 = _738 * _689;
  float _740 = exp2(_739);
  float _741 = log2(_740);
  float _742 = _741 * _688;
  float _743 = exp2(_742);
  float _744 = select(_616, _743, _740);
  float _745 = _744 * _686;
  float _746 = _745 + _687;
  float _747 = 1.0f / _746;
  float _748 = _747 * _740;
  if (_612) {
    if (!_614) {
      float _751 = _708 * _680;
      float _752 = _712 * _681;
      float _753 = _716 * _682;
      float _754 = _752 + _751;
      float _755 = _754 + _753;
      float _756 = _712 * _678;
      float _757 = _708 * _677;
      float _758 = _716 * _679;
      float _759 = _756 + _757;
      float _760 = _759 + _758;
      float _761 = _716 * _676;
      float _762 = _712 * _675;
      float _763 = _708 * _674;
      float _764 = _762 + _763;
      float _765 = _764 + _761;
      float _766 = max(_760, _765);
      float _767 = max(_755, _766);
      float _768 = 1.0f / _767;
      float _769 = _768 * _755;
      float _770 = _768 * _760;
      float _771 = _768 * _765;
      _773 = _769;
      _774 = _770;
      _775 = _771;
    } else {
      _773 = _708;
      _774 = _712;
      _775 = _716;
    }
    float _776 = _773 * _673;
    float _777 = exp2(_776);
    float _778 = _777 * _672;
    float _779 = saturate(_778);
    float _780 = _773 * _672;
    float _781 = _773 - _780;
    float _782 = saturate(_781);
    float _783 = max(_672, _782);
    float _784 = min(_783, _779);
    float _785 = _774 * _673;
    float _786 = exp2(_785);
    float _787 = _786 * _672;
    float _788 = saturate(_787);
    float _789 = _774 * _672;
    float _790 = _774 - _789;
    float _791 = saturate(_790);
    float _792 = max(_672, _791);
    float _793 = min(_792, _788);
    float _794 = _775 * _673;
    float _795 = exp2(_794);
    float _796 = _795 * _672;
    float _797 = saturate(_796);
    float _798 = _775 * _672;
    float _799 = _775 - _798;
    float _800 = saturate(_799);
    float _801 = max(_672, _800);
    float _802 = min(_801, _797);
    _804 = _784;
    _805 = _793;
    _806 = _802;
  } else {
    _804 = _708;
    _805 = _712;
    _806 = _716;
  }
  float _807 = _804 * _696;
  float _808 = _805 * _697;
  float _809 = _808 + _807;
  float _810 = _806 * _698;
  float _811 = _809 + _810;
  float _812 = 1.0f / _811;
  float _813 = _812 * _748;
  float _814 = saturate(_813);
  float _815 = _814 * _804;
  float _816 = saturate(_815);
  float _817 = _814 * _805;
  float _818 = saturate(_817);
  float _819 = _814 * _806;
  float _820 = saturate(_819);
  float _821 = _816 * _683;
  float _822 = _683 - _821;
  float _823 = _818 * _684;
  float _824 = _684 - _823;
  float _825 = _820 * _685;
  float _826 = _685 - _825;
  float _827 = _820 * _698;
  float _828 = _816 * _696;
  float _829 = _818 * _697;
  float _830 = _748 - _828;
  float _831 = _830 - _829;
  float _832 = _831 - _827;
  float _833 = saturate(_832);
  float _834 = _824 * _697;
  float _835 = _822 * _696;
  float _836 = _826 * _698;
  float _837 = _834 + _835;
  float _838 = _837 + _836;
  float _839 = 1.0f / _838;
  float _840 = _839 * _833;
  float _841 = _840 * _822;
  float _842 = _841 + _816;
  float _843 = saturate(_842);
  float _844 = _840 * _824;
  float _845 = _844 + _818;
  float _846 = saturate(_845);
  float _847 = _840 * _826;
  float _848 = _847 + _820;
  float _849 = saturate(_848);
  float _850 = _849 * _698;
  float _851 = _843 * _696;
  float _852 = _846 * _697;
  float _853 = _748 - _851;
  float _854 = _853 - _852;
  float _855 = _854 - _850;
  float _856 = saturate(_855);
  float _857 = _856 * _693;
  float _858 = _857 + _843;
  float _859 = saturate(_858);
  float _860 = _856 * _694;
  float _861 = _860 + _846;
  float _862 = saturate(_861);
  float _863 = _856 * _695;
  float _864 = _863 + _849;
  float _865 = saturate(_864);
  if (!_610) {
    float _867 = _859 * _669;
    float _868 = _862 * _670;
    float _869 = _865 * _671;
    float _870 = _868 + _867;
    float _871 = _870 + _869;
    float _872 = _862 * _667;
    float _873 = _859 * _666;
    float _874 = _865 * _668;
    float _875 = _872 + _873;
    float _876 = _875 + _874;
    float _877 = _865 * _665;
    float _878 = _862 * _664;
    float _879 = _859 * _663;
    float _880 = _878 + _879;
    float _881 = _880 + _877;
    if (!_608) {
      float _883 = saturate(_871);
      float _884 = saturate(_876);
      float _885 = saturate(_881);
      _887 = _885;
      _888 = _884;
      _889 = _883;
    } else {
      _887 = _881;
      _888 = _876;
      _889 = _871;
    }
  } else {
    _887 = _865;
    _888 = _862;
    _889 = _859;
  }
  if (!_605) {
    float _891 = _889 * _669;
    float _892 = _888 * _669;
    float _893 = _887 * _669;
    _895 = _893;
    _896 = _892;
    _897 = _891;
  } else {
    _895 = _887;
    _896 = _888;
    _897 = _889;
  }
  if (_576) {
    float _901 = cb1_018z * 9.999999747378752e-05f;
    float _902 = _901 * _897;
    float _903 = _901 * _896;
    float _904 = _901 * _895;
    float _906 = 5000.0f / cb1_018y;
    float _907 = _902 * _906;
    float _908 = _903 * _906;
    float _909 = _904 * _906;
    _911 = _907;
    _912 = _908;
    _913 = _909;
  } else {
    _911 = _897;
    _912 = _896;
    _913 = _895;
  }
  float _914 = _911 * 1.6047500371932983f;
  float _915 = mad(-0.5310800075531006f, _912, _914);
  float _916 = mad(-0.07366999983787537f, _913, _915);
  float _917 = _911 * -0.10208000242710114f;
  float _918 = mad(1.1081299781799316f, _912, _917);
  float _919 = mad(-0.006049999967217445f, _913, _918);
  float _920 = _911 * -0.0032599999103695154f;
  float _921 = mad(-0.07275000214576721f, _912, _920);
  float _922 = mad(1.0760200023651123f, _913, _921);
  if (_576) {
    // float _924 = max(_916, 0.0f);
    // float _925 = max(_919, 0.0f);
    // float _926 = max(_922, 0.0f);
    // bool _927 = !(_924 >= 0.0030399328097701073f);
    // if (!_927) {
    //   float _929 = abs(_924);
    //   float _930 = log2(_929);
    //   float _931 = _930 * 0.4166666567325592f;
    //   float _932 = exp2(_931);
    //   float _933 = _932 * 1.0549999475479126f;
    //   float _934 = _933 + -0.054999999701976776f;
    //   _938 = _934;
    // } else {
    //   float _936 = _924 * 12.923210144042969f;
    //   _938 = _936;
    // }
    // bool _939 = !(_925 >= 0.0030399328097701073f);
    // if (!_939) {
    //   float _941 = abs(_925);
    //   float _942 = log2(_941);
    //   float _943 = _942 * 0.4166666567325592f;
    //   float _944 = exp2(_943);
    //   float _945 = _944 * 1.0549999475479126f;
    //   float _946 = _945 + -0.054999999701976776f;
    //   _950 = _946;
    // } else {
    //   float _948 = _925 * 12.923210144042969f;
    //   _950 = _948;
    // }
    // bool _951 = !(_926 >= 0.0030399328097701073f);
    // if (!_951) {
    //   float _953 = abs(_926);
    //   float _954 = log2(_953);
    //   float _955 = _954 * 0.4166666567325592f;
    //   float _956 = exp2(_955);
    //   float _957 = _956 * 1.0549999475479126f;
    //   float _958 = _957 + -0.054999999701976776f;
    //   _1031 = _938;
    //   _1032 = _950;
    //   _1033 = _958;
    // } else {
    //   float _960 = _926 * 12.923210144042969f;
    //   _1031 = _938;
    //   _1032 = _950;
    //   _1033 = _960;
    // }
    _1031 = renodx::color::srgb::EncodeSafe(_916);
    _1032 = renodx::color::srgb::EncodeSafe(_919);
    _1033 = renodx::color::srgb::EncodeSafe(_922);

  } else {
    float _962 = saturate(_916);
    float _963 = saturate(_919);
    float _964 = saturate(_922);
    bool _965 = ((uint)(cb1_018w) == -2);
    if (!_965) {
      bool _967 = !(_962 >= 0.0030399328097701073f);
      if (!_967) {
        float _969 = abs(_962);
        float _970 = log2(_969);
        float _971 = _970 * 0.4166666567325592f;
        float _972 = exp2(_971);
        float _973 = _972 * 1.0549999475479126f;
        float _974 = _973 + -0.054999999701976776f;
        _978 = _974;
      } else {
        float _976 = _962 * 12.923210144042969f;
        _978 = _976;
      }
      bool _979 = !(_963 >= 0.0030399328097701073f);
      if (!_979) {
        float _981 = abs(_963);
        float _982 = log2(_981);
        float _983 = _982 * 0.4166666567325592f;
        float _984 = exp2(_983);
        float _985 = _984 * 1.0549999475479126f;
        float _986 = _985 + -0.054999999701976776f;
        _990 = _986;
      } else {
        float _988 = _963 * 12.923210144042969f;
        _990 = _988;
      }
      bool _991 = !(_964 >= 0.0030399328097701073f);
      if (!_991) {
        float _993 = abs(_964);
        float _994 = log2(_993);
        float _995 = _994 * 0.4166666567325592f;
        float _996 = exp2(_995);
        float _997 = _996 * 1.0549999475479126f;
        float _998 = _997 + -0.054999999701976776f;
        _1002 = _978;
        _1003 = _990;
        _1004 = _998;
      } else {
        float _1000 = _964 * 12.923210144042969f;
        _1002 = _978;
        _1003 = _990;
        _1004 = _1000;
      }
    } else {
      _1002 = _962;
      _1003 = _963;
      _1004 = _964;
    }
    float _1009 = abs(_1002);
    float _1010 = abs(_1003);
    float _1011 = abs(_1004);
    float _1012 = log2(_1009);
    float _1013 = log2(_1010);
    float _1014 = log2(_1011);
    float _1015 = _1012 * cb2_000z;
    float _1016 = _1013 * cb2_000z;
    float _1017 = _1014 * cb2_000z;
    float _1018 = exp2(_1015);
    float _1019 = exp2(_1016);
    float _1020 = exp2(_1017);
    float _1021 = _1018 * cb2_000y;
    float _1022 = _1019 * cb2_000y;
    float _1023 = _1020 * cb2_000y;
    float _1024 = _1021 + cb2_000x;
    float _1025 = _1022 + cb2_000x;
    float _1026 = _1023 + cb2_000x;
    float _1027 = saturate(_1024);
    float _1028 = saturate(_1025);
    float _1029 = saturate(_1026);
    _1031 = _1027;
    _1032 = _1028;
    _1033 = _1029;
  }
  float _1037 = cb2_023x * TEXCOORD0_centroid.x;
  float _1038 = cb2_023y * TEXCOORD0_centroid.y;
  float _1041 = _1037 + cb2_023z;
  float _1042 = _1038 + cb2_023w;
  float4 _1045 = t9.SampleLevel(s0_space2, float2(_1041, _1042), 0.0f);
  float _1047 = _1045.x + -0.5f;
  float _1048 = _1047 * cb2_022x;
  float _1049 = _1048 + 0.5f;
  float _1050 = _1049 * 2.0f;
  float _1051 = _1050 * _1031;
  float _1052 = _1050 * _1032;
  float _1053 = _1050 * _1033;
  float _1057 = float((uint)(cb2_019z));
  float _1058 = float((uint)(cb2_019w));
  float _1059 = _1057 + SV_Position.x;
  float _1060 = _1058 + SV_Position.y;
  uint _1061 = uint(_1059);
  uint _1062 = uint(_1060);
  uint _1065 = cb2_019x + -1u;
  uint _1066 = cb2_019y + -1u;
  int _1067 = _1061 & _1065;
  int _1068 = _1062 & _1066;
  float4 _1069 = t3.Load(int3(_1067, _1068, 0));
  float _1073 = _1069.x * 2.0f;
  float _1074 = _1069.y * 2.0f;
  float _1075 = _1069.z * 2.0f;
  float _1076 = _1073 + -1.0f;
  float _1077 = _1074 + -1.0f;
  float _1078 = _1075 + -1.0f;
  float _1079 = _1076 * _559;
  float _1080 = _1077 * _559;
  float _1081 = _1078 * _559;
  float _1082 = _1079 + _1051;
  float _1083 = _1080 + _1052;
  float _1084 = _1081 + _1053;
  float _1085 = dot(float3(_1082, _1083, _1084), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1082;
  SV_Target.y = _1083;
  SV_Target.z = _1084;
  SV_Target.w = _1085;
  SV_Target_1.x = _1085;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
