#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = max(_21.x, 0.0f);
  float _26 = max(_21.y, 0.0f);
  float _27 = max(_21.z, 0.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float _30 = min(_27, 65000.0f);
  float4 _31 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _36 = max(_31.x, 0.0f);
  float _37 = max(_31.y, 0.0f);
  float _38 = max(_31.z, 0.0f);
  float _39 = max(_31.w, 0.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _43 = min(_39, 5000.0f);
  float _46 = _19.x * cb0_028z;
  float _47 = _46 + cb0_028x;
  float _48 = cb2_027w / _47;
  float _49 = 1.0f - _48;
  float _50 = abs(_49);
  float _52 = cb2_027y * _50;
  float _54 = _52 - cb2_027z;
  float _55 = saturate(_54);
  float _56 = max(_55, _43);
  float _57 = saturate(_56);
  float _61 = cb2_006x * TEXCOORD0_centroid.x;
  float _62 = cb2_006y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_006z;
  float _66 = _62 + cb2_006w;
  float _70 = cb2_007x * TEXCOORD0_centroid.x;
  float _71 = cb2_007y * TEXCOORD0_centroid.y;
  float _74 = _70 + cb2_007z;
  float _75 = _71 + cb2_007w;
  float _79 = cb2_008x * TEXCOORD0_centroid.x;
  float _80 = cb2_008y * TEXCOORD0_centroid.y;
  float _83 = _79 + cb2_008z;
  float _84 = _80 + cb2_008w;
  float4 _85 = t1.SampleLevel(s2_space2, float2(_65, _66), 0.0f);
  float _87 = max(_85.x, 0.0f);
  float _88 = min(_87, 65000.0f);
  float4 _89 = t1.SampleLevel(s2_space2, float2(_74, _75), 0.0f);
  float _91 = max(_89.y, 0.0f);
  float _92 = min(_91, 65000.0f);
  float4 _93 = t1.SampleLevel(s2_space2, float2(_83, _84), 0.0f);
  float _95 = max(_93.z, 0.0f);
  float _96 = min(_95, 65000.0f);
  float4 _97 = t3.SampleLevel(s2_space2, float2(_65, _66), 0.0f);
  float _99 = max(_97.x, 0.0f);
  float _100 = min(_99, 5000.0f);
  float4 _101 = t3.SampleLevel(s2_space2, float2(_74, _75), 0.0f);
  float _103 = max(_101.y, 0.0f);
  float _104 = min(_103, 5000.0f);
  float4 _105 = t3.SampleLevel(s2_space2, float2(_83, _84), 0.0f);
  float _107 = max(_105.z, 0.0f);
  float _108 = min(_107, 5000.0f);
  float4 _109 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _115 = cb2_005x * _109.x;
  float _116 = cb2_005x * _109.y;
  float _117 = cb2_005x * _109.z;
  float _118 = _88 - _28;
  float _119 = _92 - _29;
  float _120 = _96 - _30;
  float _121 = _115 * _118;
  float _122 = _116 * _119;
  float _123 = _117 * _120;
  float _124 = _121 + _28;
  float _125 = _122 + _29;
  float _126 = _123 + _30;
  float _127 = _100 - _40;
  float _128 = _104 - _41;
  float _129 = _108 - _42;
  float _130 = _115 * _127;
  float _131 = _116 * _128;
  float _132 = _117 * _129;
  float _133 = _130 + _40;
  float _134 = _131 + _41;
  float _135 = _132 + _42;
  float4 _136 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _140 = _133 - _124;
  float _141 = _134 - _125;
  float _142 = _135 - _126;
  float _143 = _140 * _57;
  float _144 = _141 * _57;
  float _145 = _142 * _57;
  float _146 = _143 + _124;
  float _147 = _144 + _125;
  float _148 = _145 + _126;
  float _149 = dot(float3(_146, _147, _148), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _153 = t0[0].SExposureData_020;
  float _155 = t0[0].SExposureData_004;
  float _157 = cb2_018x * 0.5f;
  float _158 = _157 * cb2_018y;
  float _159 = _155.x - _158;
  float _160 = cb2_018y * cb2_018x;
  float _161 = 1.0f / _160;
  float _162 = _159 * _161;
  float _163 = _149 / _153.x;
  float _164 = _163 * 5464.01611328125f;
  float _165 = _164 + 9.99999993922529e-09f;
  float _166 = log2(_165);
  float _167 = _166 - _159;
  float _168 = _167 * _161;
  float _169 = saturate(_168);
  float2 _170 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _169), 0.0f);
  float _173 = max(_170.y, 1.0000000116860974e-07f);
  float _174 = _170.x / _173;
  float _175 = _174 + _162;
  float _176 = _175 / _161;
  float _177 = _176 - _155.x;
  float _178 = -0.0f - _177;
  float _180 = _178 - cb2_027x;
  float _181 = max(0.0f, _180);
  float _184 = cb2_026z * _181;
  float _185 = _177 - cb2_027x;
  float _186 = max(0.0f, _185);
  float _188 = cb2_026w * _186;
  bool _189 = (_177 < 0.0f);
  float _190 = select(_189, _184, _188);
  float _191 = exp2(_190);
  float _192 = _191 * _146;
  float _193 = _191 * _147;
  float _194 = _191 * _148;
  float _199 = cb2_024y * _136.x;
  float _200 = cb2_024z * _136.y;
  float _201 = cb2_024w * _136.z;
  float _202 = _199 + _192;
  float _203 = _200 + _193;
  float _204 = _201 + _194;
  float _209 = _202 * cb2_025x;
  float _210 = _203 * cb2_025y;
  float _211 = _204 * cb2_025z;
  float _212 = dot(float3(_209, _210, _211), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _213 = t0[0].SExposureData_012;
  float _215 = _212 * 5464.01611328125f;
  float _216 = _215 * _213.x;
  float _217 = _216 + 9.99999993922529e-09f;
  float _218 = log2(_217);
  float _219 = _218 + 16.929765701293945f;
  float _220 = _219 * 0.05734497308731079f;
  float _221 = saturate(_220);
  float _222 = _221 * _221;
  float _223 = _221 * 2.0f;
  float _224 = 3.0f - _223;
  float _225 = _222 * _224;
  float _226 = _210 * 0.8450999855995178f;
  float _227 = _211 * 0.14589999616146088f;
  float _228 = _226 + _227;
  float _229 = _228 * 2.4890189170837402f;
  float _230 = _228 * 0.3754962384700775f;
  float _231 = _228 * 2.811495304107666f;
  float _232 = _228 * 5.519708156585693f;
  float _233 = _212 - _229;
  float _234 = _225 * _233;
  float _235 = _234 + _229;
  float _236 = _225 * 0.5f;
  float _237 = _236 + 0.5f;
  float _238 = _237 * _233;
  float _239 = _238 + _229;
  float _240 = _209 - _230;
  float _241 = _210 - _231;
  float _242 = _211 - _232;
  float _243 = _237 * _240;
  float _244 = _237 * _241;
  float _245 = _237 * _242;
  float _246 = _243 + _230;
  float _247 = _244 + _231;
  float _248 = _245 + _232;
  float _249 = 1.0f / _239;
  float _250 = _235 * _249;
  float _251 = _250 * _246;
  float _252 = _250 * _247;
  float _253 = _250 * _248;
  float _257 = cb2_020x * TEXCOORD0_centroid.x;
  float _258 = cb2_020y * TEXCOORD0_centroid.y;
  float _261 = _257 + cb2_020z;
  float _262 = _258 + cb2_020w;
  float _265 = dot(float2(_261, _262), float2(_261, _262));
  float _266 = 1.0f - _265;
  float _267 = saturate(_266);
  float _268 = log2(_267);
  float _269 = _268 * cb2_021w;
  float _270 = exp2(_269);
  float _274 = _251 - cb2_021x;
  float _275 = _252 - cb2_021y;
  float _276 = _253 - cb2_021z;
  float _277 = _274 * _270;
  float _278 = _275 * _270;
  float _279 = _276 * _270;
  float _280 = _277 + cb2_021x;
  float _281 = _278 + cb2_021y;
  float _282 = _279 + cb2_021z;
  float _283 = t0[0].SExposureData_000;
  float _285 = max(_153.x, 0.0010000000474974513f);
  float _286 = 1.0f / _285;
  float _287 = _286 * _283.x;
  bool _290 = ((uint)(cb2_069y) == 0);
  float _296;
  float _297;
  float _298;
  float _352;
  float _353;
  float _354;
  float _429;
  float _430;
  float _431;
  float _581;
  float _618;
  float _619;
  float _620;
  float _649;
  float _650;
  float _651;
  float _732;
  float _733;
  float _734;
  float _740;
  float _741;
  float _742;
  float _756;
  float _757;
  float _758;
  float _783;
  float _795;
  float _823;
  float _835;
  float _847;
  float _848;
  float _849;
  float _876;
  float _877;
  float _878;
  if (!_290) {
    float _292 = _287 * _280;
    float _293 = _287 * _281;
    float _294 = _287 * _282;
    _296 = _292;
    _297 = _293;
    _298 = _294;
  } else {
    _296 = _280;
    _297 = _281;
    _298 = _282;
  }
  float _299 = _296 * 0.6130970120429993f;
  float _300 = mad(0.33952298760414124f, _297, _299);
  float _301 = mad(0.04737899824976921f, _298, _300);
  float _302 = _296 * 0.07019399851560593f;
  float _303 = mad(0.9163540005683899f, _297, _302);
  float _304 = mad(0.013451999984681606f, _298, _303);
  float _305 = _296 * 0.02061600051820278f;
  float _306 = mad(0.10956999659538269f, _297, _305);
  float _307 = mad(0.8698149919509888f, _298, _306);
  float _308 = log2(_301);
  float _309 = log2(_304);
  float _310 = log2(_307);
  float _311 = _308 * 0.04211956635117531f;
  float _312 = _309 * 0.04211956635117531f;
  float _313 = _310 * 0.04211956635117531f;
  float _314 = _311 + 0.6252607107162476f;
  float _315 = _312 + 0.6252607107162476f;
  float _316 = _313 + 0.6252607107162476f;
  float4 _317 = t5.SampleLevel(s2_space2, float3(_314, _315, _316), 0.0f);
  bool _323 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_323 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _327 = cb2_017x * _317.x;
    float _328 = cb2_017x * _317.y;
    float _329 = cb2_017x * _317.z;
    float _331 = _327 + cb2_017y;
    float _332 = _328 + cb2_017y;
    float _333 = _329 + cb2_017y;
    float _334 = exp2(_331);
    float _335 = exp2(_332);
    float _336 = exp2(_333);
    float _337 = _334 + 1.0f;
    float _338 = _335 + 1.0f;
    float _339 = _336 + 1.0f;
    float _340 = 1.0f / _337;
    float _341 = 1.0f / _338;
    float _342 = 1.0f / _339;
    float _344 = cb2_017z * _340;
    float _345 = cb2_017z * _341;
    float _346 = cb2_017z * _342;
    float _348 = _344 + cb2_017w;
    float _349 = _345 + cb2_017w;
    float _350 = _346 + cb2_017w;
    _352 = _348;
    _353 = _349;
    _354 = _350;
  } else {
    _352 = _317.x;
    _353 = _317.y;
    _354 = _317.z;
  }
  float _355 = _352 * 23.0f;
  float _356 = _355 + -14.473931312561035f;
  float _357 = exp2(_356);
  float _358 = _353 * 23.0f;
  float _359 = _358 + -14.473931312561035f;
  float _360 = exp2(_359);
  float _361 = _354 * 23.0f;
  float _362 = _361 + -14.473931312561035f;
  float _363 = exp2(_362);
  float _364 = dot(float3(_357, _360, _363), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _369 = dot(float3(_357, _360, _363), float3(_357, _360, _363));
  float _370 = rsqrt(_369);
  float _371 = _370 * _357;
  float _372 = _370 * _360;
  float _373 = _370 * _363;
  float _374 = cb2_001x - _371;
  float _375 = cb2_001y - _372;
  float _376 = cb2_001z - _373;
  float _377 = dot(float3(_374, _375, _376), float3(_374, _375, _376));
  float _380 = cb2_002z * _377;
  float _382 = _380 + cb2_002w;
  float _383 = saturate(_382);
  float _385 = cb2_002x * _383;
  float _386 = _364 - _357;
  float _387 = _364 - _360;
  float _388 = _364 - _363;
  float _389 = _385 * _386;
  float _390 = _385 * _387;
  float _391 = _385 * _388;
  float _392 = _389 + _357;
  float _393 = _390 + _360;
  float _394 = _391 + _363;
  float _396 = cb2_002y * _383;
  float _397 = 0.10000000149011612f - _392;
  float _398 = 0.10000000149011612f - _393;
  float _399 = 0.10000000149011612f - _394;
  float _400 = _397 * _396;
  float _401 = _398 * _396;
  float _402 = _399 * _396;
  float _403 = _400 + _392;
  float _404 = _401 + _393;
  float _405 = _402 + _394;
  float _406 = saturate(_403);
  float _407 = saturate(_404);
  float _408 = saturate(_405);
  float _414 = cb2_016x - _406;
  float _415 = cb2_016y - _407;
  float _416 = cb2_016z - _408;
  float _417 = _414 * cb2_016w;
  float _418 = _415 * cb2_016w;
  float _419 = _416 * cb2_016w;
  float _420 = _417 + _406;
  float _421 = _418 + _407;
  float _422 = _419 + _408;
  if (_323 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _425 = cb2_024x * _420;
    float _426 = cb2_024x * _421;
    float _427 = cb2_024x * _422;
    _429 = _425;
    _430 = _426;
    _431 = _427;
  } else {
    _429 = _420;
    _430 = _421;
    _431 = _422;
  }
  float _434 = _429 * 0.9708889722824097f;
  float _435 = mad(0.026962999254465103f, _430, _434);
  float _436 = mad(0.002148000057786703f, _431, _435);
  float _437 = _429 * 0.01088900025933981f;
  float _438 = mad(0.9869629740715027f, _430, _437);
  float _439 = mad(0.002148000057786703f, _431, _438);
  float _440 = mad(0.026962999254465103f, _430, _437);
  float _441 = mad(0.9621480107307434f, _431, _440);
  float _442 = max(_436, 0.0f);
  float _443 = max(_439, 0.0f);
  float _444 = max(_441, 0.0f);
  float _445 = min(_442, cb2_095y);
  float _446 = min(_443, cb2_095y);
  float _447 = min(_444, cb2_095y);
  bool _450 = ((uint)(cb2_095x) == 0);
  bool _453 = ((uint)(cb2_094w) == 0);
  bool _455 = ((uint)(cb2_094z) == 0);
  bool _457 = ((uint)(cb2_094y) != 0);
  bool _459 = ((uint)(cb2_094x) == 0);
  bool _461 = ((uint)(cb2_069z) != 0);
  float _508 = asfloat((uint)(cb2_075y));
  float _509 = asfloat((uint)(cb2_075z));
  float _510 = asfloat((uint)(cb2_075w));
  float _511 = asfloat((uint)(cb2_074z));
  float _512 = asfloat((uint)(cb2_074w));
  float _513 = asfloat((uint)(cb2_075x));
  float _514 = asfloat((uint)(cb2_073w));
  float _515 = asfloat((uint)(cb2_074x));
  float _516 = asfloat((uint)(cb2_074y));
  float _517 = asfloat((uint)(cb2_077x));
  float _518 = asfloat((uint)(cb2_077y));
  float _519 = asfloat((uint)(cb2_079x));
  float _520 = asfloat((uint)(cb2_079y));
  float _521 = asfloat((uint)(cb2_079z));
  float _522 = asfloat((uint)(cb2_078y));
  float _523 = asfloat((uint)(cb2_078z));
  float _524 = asfloat((uint)(cb2_078w));
  float _525 = asfloat((uint)(cb2_077z));
  float _526 = asfloat((uint)(cb2_077w));
  float _527 = asfloat((uint)(cb2_078x));
  float _528 = asfloat((uint)(cb2_072y));
  float _529 = asfloat((uint)(cb2_072z));
  float _530 = asfloat((uint)(cb2_072w));
  float _531 = asfloat((uint)(cb2_071x));
  float _532 = asfloat((uint)(cb2_071y));
  float _533 = asfloat((uint)(cb2_076x));
  float _534 = asfloat((uint)(cb2_070w));
  float _535 = asfloat((uint)(cb2_070x));
  float _536 = asfloat((uint)(cb2_070y));
  float _537 = asfloat((uint)(cb2_070z));
  float _538 = asfloat((uint)(cb2_073x));
  float _539 = asfloat((uint)(cb2_073y));
  float _540 = asfloat((uint)(cb2_073z));
  float _541 = asfloat((uint)(cb2_071z));
  float _542 = asfloat((uint)(cb2_071w));
  float _543 = asfloat((uint)(cb2_072x));
  float _544 = max(_446, _447);
  float _545 = max(_445, _544);
  float _546 = 1.0f / _545;
  float _547 = _546 * _445;
  float _548 = _546 * _446;
  float _549 = _546 * _447;
  float _550 = abs(_547);
  float _551 = log2(_550);
  float _552 = _551 * _535;
  float _553 = exp2(_552);
  float _554 = abs(_548);
  float _555 = log2(_554);
  float _556 = _555 * _536;
  float _557 = exp2(_556);
  float _558 = abs(_549);
  float _559 = log2(_558);
  float _560 = _559 * _537;
  float _561 = exp2(_560);
  if (_457) {
    float _564 = asfloat((uint)(cb2_076w));
    float _566 = asfloat((uint)(cb2_076z));
    float _568 = asfloat((uint)(cb2_076y));
    float _569 = _566 * _446;
    float _570 = _568 * _445;
    float _571 = _564 * _447;
    float _572 = _570 + _571;
    float _573 = _572 + _569;
    _581 = _573;
  } else {
    float _575 = _542 * _446;
    float _576 = _541 * _445;
    float _577 = _543 * _447;
    float _578 = _575 + _576;
    float _579 = _578 + _577;
    _581 = _579;
  }
  float _582 = abs(_581);
  float _583 = log2(_582);
  float _584 = _583 * _534;
  float _585 = exp2(_584);
  float _586 = log2(_585);
  float _587 = _586 * _533;
  float _588 = exp2(_587);
  float _589 = select(_461, _588, _585);
  float _590 = _589 * _531;
  float _591 = _590 + _532;
  float _592 = 1.0f / _591;
  float _593 = _592 * _585;
  if (_457) {
    if (!_459) {
      float _596 = _553 * _525;
      float _597 = _557 * _526;
      float _598 = _561 * _527;
      float _599 = _597 + _596;
      float _600 = _599 + _598;
      float _601 = _557 * _523;
      float _602 = _553 * _522;
      float _603 = _561 * _524;
      float _604 = _601 + _602;
      float _605 = _604 + _603;
      float _606 = _561 * _521;
      float _607 = _557 * _520;
      float _608 = _553 * _519;
      float _609 = _607 + _608;
      float _610 = _609 + _606;
      float _611 = max(_605, _610);
      float _612 = max(_600, _611);
      float _613 = 1.0f / _612;
      float _614 = _613 * _600;
      float _615 = _613 * _605;
      float _616 = _613 * _610;
      _618 = _614;
      _619 = _615;
      _620 = _616;
    } else {
      _618 = _553;
      _619 = _557;
      _620 = _561;
    }
    float _621 = _618 * _518;
    float _622 = exp2(_621);
    float _623 = _622 * _517;
    float _624 = saturate(_623);
    float _625 = _618 * _517;
    float _626 = _618 - _625;
    float _627 = saturate(_626);
    float _628 = max(_517, _627);
    float _629 = min(_628, _624);
    float _630 = _619 * _518;
    float _631 = exp2(_630);
    float _632 = _631 * _517;
    float _633 = saturate(_632);
    float _634 = _619 * _517;
    float _635 = _619 - _634;
    float _636 = saturate(_635);
    float _637 = max(_517, _636);
    float _638 = min(_637, _633);
    float _639 = _620 * _518;
    float _640 = exp2(_639);
    float _641 = _640 * _517;
    float _642 = saturate(_641);
    float _643 = _620 * _517;
    float _644 = _620 - _643;
    float _645 = saturate(_644);
    float _646 = max(_517, _645);
    float _647 = min(_646, _642);
    _649 = _629;
    _650 = _638;
    _651 = _647;
  } else {
    _649 = _553;
    _650 = _557;
    _651 = _561;
  }
  float _652 = _649 * _541;
  float _653 = _650 * _542;
  float _654 = _653 + _652;
  float _655 = _651 * _543;
  float _656 = _654 + _655;
  float _657 = 1.0f / _656;
  float _658 = _657 * _593;
  float _659 = saturate(_658);
  float _660 = _659 * _649;
  float _661 = saturate(_660);
  float _662 = _659 * _650;
  float _663 = saturate(_662);
  float _664 = _659 * _651;
  float _665 = saturate(_664);
  float _666 = _661 * _528;
  float _667 = _528 - _666;
  float _668 = _663 * _529;
  float _669 = _529 - _668;
  float _670 = _665 * _530;
  float _671 = _530 - _670;
  float _672 = _665 * _543;
  float _673 = _661 * _541;
  float _674 = _663 * _542;
  float _675 = _593 - _673;
  float _676 = _675 - _674;
  float _677 = _676 - _672;
  float _678 = saturate(_677);
  float _679 = _669 * _542;
  float _680 = _667 * _541;
  float _681 = _671 * _543;
  float _682 = _679 + _680;
  float _683 = _682 + _681;
  float _684 = 1.0f / _683;
  float _685 = _684 * _678;
  float _686 = _685 * _667;
  float _687 = _686 + _661;
  float _688 = saturate(_687);
  float _689 = _685 * _669;
  float _690 = _689 + _663;
  float _691 = saturate(_690);
  float _692 = _685 * _671;
  float _693 = _692 + _665;
  float _694 = saturate(_693);
  float _695 = _694 * _543;
  float _696 = _688 * _541;
  float _697 = _691 * _542;
  float _698 = _593 - _696;
  float _699 = _698 - _697;
  float _700 = _699 - _695;
  float _701 = saturate(_700);
  float _702 = _701 * _538;
  float _703 = _702 + _688;
  float _704 = saturate(_703);
  float _705 = _701 * _539;
  float _706 = _705 + _691;
  float _707 = saturate(_706);
  float _708 = _701 * _540;
  float _709 = _708 + _694;
  float _710 = saturate(_709);
  if (!_455) {
    float _712 = _704 * _514;
    float _713 = _707 * _515;
    float _714 = _710 * _516;
    float _715 = _713 + _712;
    float _716 = _715 + _714;
    float _717 = _707 * _512;
    float _718 = _704 * _511;
    float _719 = _710 * _513;
    float _720 = _717 + _718;
    float _721 = _720 + _719;
    float _722 = _710 * _510;
    float _723 = _707 * _509;
    float _724 = _704 * _508;
    float _725 = _723 + _724;
    float _726 = _725 + _722;
    if (!_453) {
      float _728 = saturate(_716);
      float _729 = saturate(_721);
      float _730 = saturate(_726);
      _732 = _730;
      _733 = _729;
      _734 = _728;
    } else {
      _732 = _726;
      _733 = _721;
      _734 = _716;
    }
  } else {
    _732 = _710;
    _733 = _707;
    _734 = _704;
  }
  if (!_450) {
    float _736 = _734 * _514;
    float _737 = _733 * _514;
    float _738 = _732 * _514;
    _740 = _738;
    _741 = _737;
    _742 = _736;
  } else {
    _740 = _732;
    _741 = _733;
    _742 = _734;
  }
  if (_323) {
    float _746 = cb1_018z * 9.999999747378752e-05f;
    float _747 = _746 * _742;
    float _748 = _746 * _741;
    float _749 = _746 * _740;
    float _751 = 5000.0f / cb1_018y;
    float _752 = _747 * _751;
    float _753 = _748 * _751;
    float _754 = _749 * _751;
    _756 = _752;
    _757 = _753;
    _758 = _754;
  } else {
    _756 = _742;
    _757 = _741;
    _758 = _740;
  }
  float _759 = _756 * 1.6047500371932983f;
  float _760 = mad(-0.5310800075531006f, _757, _759);
  float _761 = mad(-0.07366999983787537f, _758, _760);
  float _762 = _756 * -0.10208000242710114f;
  float _763 = mad(1.1081299781799316f, _757, _762);
  float _764 = mad(-0.006049999967217445f, _758, _763);
  float _765 = _756 * -0.0032599999103695154f;
  float _766 = mad(-0.07275000214576721f, _757, _765);
  float _767 = mad(1.0760200023651123f, _758, _766);
  if (_323) {
    // float _769 = max(_761, 0.0f);
    // float _770 = max(_764, 0.0f);
    // float _771 = max(_767, 0.0f);
    // bool _772 = !(_769 >= 0.0030399328097701073f);
    // if (!_772) {
    //   float _774 = abs(_769);
    //   float _775 = log2(_774);
    //   float _776 = _775 * 0.4166666567325592f;
    //   float _777 = exp2(_776);
    //   float _778 = _777 * 1.0549999475479126f;
    //   float _779 = _778 + -0.054999999701976776f;
    //   _783 = _779;
    // } else {
    //   float _781 = _769 * 12.923210144042969f;
    //   _783 = _781;
    // }
    // bool _784 = !(_770 >= 0.0030399328097701073f);
    // if (!_784) {
    //   float _786 = abs(_770);
    //   float _787 = log2(_786);
    //   float _788 = _787 * 0.4166666567325592f;
    //   float _789 = exp2(_788);
    //   float _790 = _789 * 1.0549999475479126f;
    //   float _791 = _790 + -0.054999999701976776f;
    //   _795 = _791;
    // } else {
    //   float _793 = _770 * 12.923210144042969f;
    //   _795 = _793;
    // }
    // bool _796 = !(_771 >= 0.0030399328097701073f);
    // if (!_796) {
    //   float _798 = abs(_771);
    //   float _799 = log2(_798);
    //   float _800 = _799 * 0.4166666567325592f;
    //   float _801 = exp2(_800);
    //   float _802 = _801 * 1.0549999475479126f;
    //   float _803 = _802 + -0.054999999701976776f;
    //   _876 = _783;
    //   _877 = _795;
    //   _878 = _803;
    // } else {
    //   float _805 = _771 * 12.923210144042969f;
    //   _876 = _783;
    //   _877 = _795;
    //   _878 = _805;
    // }
    _876 = renodx::color::srgb::EncodeSafe(_761);
    _877 = renodx::color::srgb::EncodeSafe(_764);
    _878 = renodx::color::srgb::EncodeSafe(_767);

  } else {
    float _807 = saturate(_761);
    float _808 = saturate(_764);
    float _809 = saturate(_767);
    bool _810 = ((uint)(cb1_018w) == -2);
    if (!_810) {
      bool _812 = !(_807 >= 0.0030399328097701073f);
      if (!_812) {
        float _814 = abs(_807);
        float _815 = log2(_814);
        float _816 = _815 * 0.4166666567325592f;
        float _817 = exp2(_816);
        float _818 = _817 * 1.0549999475479126f;
        float _819 = _818 + -0.054999999701976776f;
        _823 = _819;
      } else {
        float _821 = _807 * 12.923210144042969f;
        _823 = _821;
      }
      bool _824 = !(_808 >= 0.0030399328097701073f);
      if (!_824) {
        float _826 = abs(_808);
        float _827 = log2(_826);
        float _828 = _827 * 0.4166666567325592f;
        float _829 = exp2(_828);
        float _830 = _829 * 1.0549999475479126f;
        float _831 = _830 + -0.054999999701976776f;
        _835 = _831;
      } else {
        float _833 = _808 * 12.923210144042969f;
        _835 = _833;
      }
      bool _836 = !(_809 >= 0.0030399328097701073f);
      if (!_836) {
        float _838 = abs(_809);
        float _839 = log2(_838);
        float _840 = _839 * 0.4166666567325592f;
        float _841 = exp2(_840);
        float _842 = _841 * 1.0549999475479126f;
        float _843 = _842 + -0.054999999701976776f;
        _847 = _823;
        _848 = _835;
        _849 = _843;
      } else {
        float _845 = _809 * 12.923210144042969f;
        _847 = _823;
        _848 = _835;
        _849 = _845;
      }
    } else {
      _847 = _807;
      _848 = _808;
      _849 = _809;
    }
    float _854 = abs(_847);
    float _855 = abs(_848);
    float _856 = abs(_849);
    float _857 = log2(_854);
    float _858 = log2(_855);
    float _859 = log2(_856);
    float _860 = _857 * cb2_000z;
    float _861 = _858 * cb2_000z;
    float _862 = _859 * cb2_000z;
    float _863 = exp2(_860);
    float _864 = exp2(_861);
    float _865 = exp2(_862);
    float _866 = _863 * cb2_000y;
    float _867 = _864 * cb2_000y;
    float _868 = _865 * cb2_000y;
    float _869 = _866 + cb2_000x;
    float _870 = _867 + cb2_000x;
    float _871 = _868 + cb2_000x;
    float _872 = saturate(_869);
    float _873 = saturate(_870);
    float _874 = saturate(_871);
    _876 = _872;
    _877 = _873;
    _878 = _874;
  }
  float _879 = dot(float3(_876, _877, _878), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _876;
  SV_Target.y = _877;
  SV_Target.z = _878;
  SV_Target.w = _879;
  SV_Target_1.x = _879;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
