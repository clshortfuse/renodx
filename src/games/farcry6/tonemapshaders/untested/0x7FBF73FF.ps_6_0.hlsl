#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = max(_26.x, 0.0f);
  float _31 = max(_26.y, 0.0f);
  float _32 = max(_26.z, 0.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float _35 = min(_32, 65000.0f);
  float4 _36 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _41 = max(_36.x, 0.0f);
  float _42 = max(_36.y, 0.0f);
  float _43 = max(_36.z, 0.0f);
  float _44 = max(_36.w, 0.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _48 = min(_44, 5000.0f);
  float _51 = _24.x * cb0_028z;
  float _52 = _51 + cb0_028x;
  float _53 = cb2_027w / _52;
  float _54 = 1.0f - _53;
  float _55 = abs(_54);
  float _57 = cb2_027y * _55;
  float _59 = _57 - cb2_027z;
  float _60 = saturate(_59);
  float _61 = max(_60, _48);
  float _62 = saturate(_61);
  float _66 = cb2_006x * TEXCOORD0_centroid.x;
  float _67 = cb2_006y * TEXCOORD0_centroid.y;
  float _70 = _66 + cb2_006z;
  float _71 = _67 + cb2_006w;
  float _75 = cb2_007x * TEXCOORD0_centroid.x;
  float _76 = cb2_007y * TEXCOORD0_centroid.y;
  float _79 = _75 + cb2_007z;
  float _80 = _76 + cb2_007w;
  float _84 = cb2_008x * TEXCOORD0_centroid.x;
  float _85 = cb2_008y * TEXCOORD0_centroid.y;
  float _88 = _84 + cb2_008z;
  float _89 = _85 + cb2_008w;
  float4 _90 = t1.SampleLevel(s2_space2, float2(_70, _71), 0.0f);
  float _92 = max(_90.x, 0.0f);
  float _93 = min(_92, 65000.0f);
  float4 _94 = t1.SampleLevel(s2_space2, float2(_79, _80), 0.0f);
  float _96 = max(_94.y, 0.0f);
  float _97 = min(_96, 65000.0f);
  float4 _98 = t1.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _100 = max(_98.z, 0.0f);
  float _101 = min(_100, 65000.0f);
  float4 _102 = t4.SampleLevel(s2_space2, float2(_70, _71), 0.0f);
  float _104 = max(_102.x, 0.0f);
  float _105 = min(_104, 5000.0f);
  float4 _106 = t4.SampleLevel(s2_space2, float2(_79, _80), 0.0f);
  float _108 = max(_106.y, 0.0f);
  float _109 = min(_108, 5000.0f);
  float4 _110 = t4.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _112 = max(_110.z, 0.0f);
  float _113 = min(_112, 5000.0f);
  float4 _114 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _120 = cb2_005x * _114.x;
  float _121 = cb2_005x * _114.y;
  float _122 = cb2_005x * _114.z;
  float _123 = _93 - _33;
  float _124 = _97 - _34;
  float _125 = _101 - _35;
  float _126 = _120 * _123;
  float _127 = _121 * _124;
  float _128 = _122 * _125;
  float _129 = _126 + _33;
  float _130 = _127 + _34;
  float _131 = _128 + _35;
  float _132 = _105 - _45;
  float _133 = _109 - _46;
  float _134 = _113 - _47;
  float _135 = _120 * _132;
  float _136 = _121 * _133;
  float _137 = _122 * _134;
  float _138 = _135 + _45;
  float _139 = _136 + _46;
  float _140 = _137 + _47;
  float4 _141 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _145 = _138 - _129;
  float _146 = _139 - _130;
  float _147 = _140 - _131;
  float _148 = _145 * _62;
  float _149 = _146 * _62;
  float _150 = _147 * _62;
  float _151 = _148 + _129;
  float _152 = _149 + _130;
  float _153 = _150 + _131;
  float _154 = dot(float3(_151, _152, _153), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _158 = t0[0].SExposureData_020;
  float _160 = t0[0].SExposureData_004;
  float _162 = cb2_018x * 0.5f;
  float _163 = _162 * cb2_018y;
  float _164 = _160.x - _163;
  float _165 = cb2_018y * cb2_018x;
  float _166 = 1.0f / _165;
  float _167 = _164 * _166;
  float _168 = _154 / _158.x;
  float _169 = _168 * 5464.01611328125f;
  float _170 = _169 + 9.99999993922529e-09f;
  float _171 = log2(_170);
  float _172 = _171 - _164;
  float _173 = _172 * _166;
  float _174 = saturate(_173);
  float2 _175 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _174), 0.0f);
  float _178 = max(_175.y, 1.0000000116860974e-07f);
  float _179 = _175.x / _178;
  float _180 = _179 + _167;
  float _181 = _180 / _166;
  float _182 = _181 - _160.x;
  float _183 = -0.0f - _182;
  float _185 = _183 - cb2_027x;
  float _186 = max(0.0f, _185);
  float _189 = cb2_026z * _186;
  float _190 = _182 - cb2_027x;
  float _191 = max(0.0f, _190);
  float _193 = cb2_026w * _191;
  bool _194 = (_182 < 0.0f);
  float _195 = select(_194, _189, _193);
  float _196 = exp2(_195);
  float _197 = _196 * _151;
  float _198 = _196 * _152;
  float _199 = _196 * _153;
  float _204 = cb2_024y * _141.x;
  float _205 = cb2_024z * _141.y;
  float _206 = cb2_024w * _141.z;
  float _207 = _204 + _197;
  float _208 = _205 + _198;
  float _209 = _206 + _199;
  float _214 = _207 * cb2_025x;
  float _215 = _208 * cb2_025y;
  float _216 = _209 * cb2_025z;
  float _217 = dot(float3(_214, _215, _216), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _218 = t0[0].SExposureData_012;
  float _220 = _217 * 5464.01611328125f;
  float _221 = _220 * _218.x;
  float _222 = _221 + 9.99999993922529e-09f;
  float _223 = log2(_222);
  float _224 = _223 + 16.929765701293945f;
  float _225 = _224 * 0.05734497308731079f;
  float _226 = saturate(_225);
  float _227 = _226 * _226;
  float _228 = _226 * 2.0f;
  float _229 = 3.0f - _228;
  float _230 = _227 * _229;
  float _231 = _215 * 0.8450999855995178f;
  float _232 = _216 * 0.14589999616146088f;
  float _233 = _231 + _232;
  float _234 = _233 * 2.4890189170837402f;
  float _235 = _233 * 0.3754962384700775f;
  float _236 = _233 * 2.811495304107666f;
  float _237 = _233 * 5.519708156585693f;
  float _238 = _217 - _234;
  float _239 = _230 * _238;
  float _240 = _239 + _234;
  float _241 = _230 * 0.5f;
  float _242 = _241 + 0.5f;
  float _243 = _242 * _238;
  float _244 = _243 + _234;
  float _245 = _214 - _235;
  float _246 = _215 - _236;
  float _247 = _216 - _237;
  float _248 = _242 * _245;
  float _249 = _242 * _246;
  float _250 = _242 * _247;
  float _251 = _248 + _235;
  float _252 = _249 + _236;
  float _253 = _250 + _237;
  float _254 = 1.0f / _244;
  float _255 = _240 * _254;
  float _256 = _255 * _251;
  float _257 = _255 * _252;
  float _258 = _255 * _253;
  float _262 = cb2_020x * TEXCOORD0_centroid.x;
  float _263 = cb2_020y * TEXCOORD0_centroid.y;
  float _266 = _262 + cb2_020z;
  float _267 = _263 + cb2_020w;
  float _270 = dot(float2(_266, _267), float2(_266, _267));
  float _271 = 1.0f - _270;
  float _272 = saturate(_271);
  float _273 = log2(_272);
  float _274 = _273 * cb2_021w;
  float _275 = exp2(_274);
  float _279 = _256 - cb2_021x;
  float _280 = _257 - cb2_021y;
  float _281 = _258 - cb2_021z;
  float _282 = _279 * _275;
  float _283 = _280 * _275;
  float _284 = _281 * _275;
  float _285 = _282 + cb2_021x;
  float _286 = _283 + cb2_021y;
  float _287 = _284 + cb2_021z;
  float _288 = t0[0].SExposureData_000;
  float _290 = max(_158.x, 0.0010000000474974513f);
  float _291 = 1.0f / _290;
  float _292 = _291 * _288.x;
  bool _295 = ((uint)(cb2_069y) == 0);
  float _301;
  float _302;
  float _303;
  float _357;
  float _358;
  float _359;
  float _390;
  float _391;
  float _392;
  float _542;
  float _579;
  float _580;
  float _581;
  float _610;
  float _611;
  float _612;
  float _693;
  float _694;
  float _695;
  float _701;
  float _702;
  float _703;
  float _717;
  float _718;
  float _719;
  float _744;
  float _756;
  float _784;
  float _796;
  float _808;
  float _809;
  float _810;
  float _837;
  float _838;
  float _839;
  if (!_295) {
    float _297 = _292 * _285;
    float _298 = _292 * _286;
    float _299 = _292 * _287;
    _301 = _297;
    _302 = _298;
    _303 = _299;
  } else {
    _301 = _285;
    _302 = _286;
    _303 = _287;
  }
  float _304 = _301 * 0.6130970120429993f;
  float _305 = mad(0.33952298760414124f, _302, _304);
  float _306 = mad(0.04737899824976921f, _303, _305);
  float _307 = _301 * 0.07019399851560593f;
  float _308 = mad(0.9163540005683899f, _302, _307);
  float _309 = mad(0.013451999984681606f, _303, _308);
  float _310 = _301 * 0.02061600051820278f;
  float _311 = mad(0.10956999659538269f, _302, _310);
  float _312 = mad(0.8698149919509888f, _303, _311);
  float _313 = log2(_306);
  float _314 = log2(_309);
  float _315 = log2(_312);
  float _316 = _313 * 0.04211956635117531f;
  float _317 = _314 * 0.04211956635117531f;
  float _318 = _315 * 0.04211956635117531f;
  float _319 = _316 + 0.6252607107162476f;
  float _320 = _317 + 0.6252607107162476f;
  float _321 = _318 + 0.6252607107162476f;
  float4 _322 = t6.SampleLevel(s2_space2, float3(_319, _320, _321), 0.0f);
  bool _328 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_328 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _332 = cb2_017x * _322.x;
    float _333 = cb2_017x * _322.y;
    float _334 = cb2_017x * _322.z;
    float _336 = _332 + cb2_017y;
    float _337 = _333 + cb2_017y;
    float _338 = _334 + cb2_017y;
    float _339 = exp2(_336);
    float _340 = exp2(_337);
    float _341 = exp2(_338);
    float _342 = _339 + 1.0f;
    float _343 = _340 + 1.0f;
    float _344 = _341 + 1.0f;
    float _345 = 1.0f / _342;
    float _346 = 1.0f / _343;
    float _347 = 1.0f / _344;
    float _349 = cb2_017z * _345;
    float _350 = cb2_017z * _346;
    float _351 = cb2_017z * _347;
    float _353 = _349 + cb2_017w;
    float _354 = _350 + cb2_017w;
    float _355 = _351 + cb2_017w;
    _357 = _353;
    _358 = _354;
    _359 = _355;
  } else {
    _357 = _322.x;
    _358 = _322.y;
    _359 = _322.z;
  }
  float _360 = _357 * 23.0f;
  float _361 = _360 + -14.473931312561035f;
  float _362 = exp2(_361);
  float _363 = _358 * 23.0f;
  float _364 = _363 + -14.473931312561035f;
  float _365 = exp2(_364);
  float _366 = _359 * 23.0f;
  float _367 = _366 + -14.473931312561035f;
  float _368 = exp2(_367);
  float _375 = cb2_016x - _362;
  float _376 = cb2_016y - _365;
  float _377 = cb2_016z - _368;
  float _378 = _375 * cb2_016w;
  float _379 = _376 * cb2_016w;
  float _380 = _377 * cb2_016w;
  float _381 = _378 + _362;
  float _382 = _379 + _365;
  float _383 = _380 + _368;
  if (_328 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _386 = cb2_024x * _381;
    float _387 = cb2_024x * _382;
    float _388 = cb2_024x * _383;
    _390 = _386;
    _391 = _387;
    _392 = _388;
  } else {
    _390 = _381;
    _391 = _382;
    _392 = _383;
  }
  float _395 = _390 * 0.9708889722824097f;
  float _396 = mad(0.026962999254465103f, _391, _395);
  float _397 = mad(0.002148000057786703f, _392, _396);
  float _398 = _390 * 0.01088900025933981f;
  float _399 = mad(0.9869629740715027f, _391, _398);
  float _400 = mad(0.002148000057786703f, _392, _399);
  float _401 = mad(0.026962999254465103f, _391, _398);
  float _402 = mad(0.9621480107307434f, _392, _401);
  float _403 = max(_397, 0.0f);
  float _404 = max(_400, 0.0f);
  float _405 = max(_402, 0.0f);
  float _406 = min(_403, cb2_095y);
  float _407 = min(_404, cb2_095y);
  float _408 = min(_405, cb2_095y);
  bool _411 = ((uint)(cb2_095x) == 0);
  bool _414 = ((uint)(cb2_094w) == 0);
  bool _416 = ((uint)(cb2_094z) == 0);
  bool _418 = ((uint)(cb2_094y) != 0);
  bool _420 = ((uint)(cb2_094x) == 0);
  bool _422 = ((uint)(cb2_069z) != 0);
  float _469 = asfloat((uint)(cb2_075y));
  float _470 = asfloat((uint)(cb2_075z));
  float _471 = asfloat((uint)(cb2_075w));
  float _472 = asfloat((uint)(cb2_074z));
  float _473 = asfloat((uint)(cb2_074w));
  float _474 = asfloat((uint)(cb2_075x));
  float _475 = asfloat((uint)(cb2_073w));
  float _476 = asfloat((uint)(cb2_074x));
  float _477 = asfloat((uint)(cb2_074y));
  float _478 = asfloat((uint)(cb2_077x));
  float _479 = asfloat((uint)(cb2_077y));
  float _480 = asfloat((uint)(cb2_079x));
  float _481 = asfloat((uint)(cb2_079y));
  float _482 = asfloat((uint)(cb2_079z));
  float _483 = asfloat((uint)(cb2_078y));
  float _484 = asfloat((uint)(cb2_078z));
  float _485 = asfloat((uint)(cb2_078w));
  float _486 = asfloat((uint)(cb2_077z));
  float _487 = asfloat((uint)(cb2_077w));
  float _488 = asfloat((uint)(cb2_078x));
  float _489 = asfloat((uint)(cb2_072y));
  float _490 = asfloat((uint)(cb2_072z));
  float _491 = asfloat((uint)(cb2_072w));
  float _492 = asfloat((uint)(cb2_071x));
  float _493 = asfloat((uint)(cb2_071y));
  float _494 = asfloat((uint)(cb2_076x));
  float _495 = asfloat((uint)(cb2_070w));
  float _496 = asfloat((uint)(cb2_070x));
  float _497 = asfloat((uint)(cb2_070y));
  float _498 = asfloat((uint)(cb2_070z));
  float _499 = asfloat((uint)(cb2_073x));
  float _500 = asfloat((uint)(cb2_073y));
  float _501 = asfloat((uint)(cb2_073z));
  float _502 = asfloat((uint)(cb2_071z));
  float _503 = asfloat((uint)(cb2_071w));
  float _504 = asfloat((uint)(cb2_072x));
  float _505 = max(_407, _408);
  float _506 = max(_406, _505);
  float _507 = 1.0f / _506;
  float _508 = _507 * _406;
  float _509 = _507 * _407;
  float _510 = _507 * _408;
  float _511 = abs(_508);
  float _512 = log2(_511);
  float _513 = _512 * _496;
  float _514 = exp2(_513);
  float _515 = abs(_509);
  float _516 = log2(_515);
  float _517 = _516 * _497;
  float _518 = exp2(_517);
  float _519 = abs(_510);
  float _520 = log2(_519);
  float _521 = _520 * _498;
  float _522 = exp2(_521);
  if (_418) {
    float _525 = asfloat((uint)(cb2_076w));
    float _527 = asfloat((uint)(cb2_076z));
    float _529 = asfloat((uint)(cb2_076y));
    float _530 = _527 * _407;
    float _531 = _529 * _406;
    float _532 = _525 * _408;
    float _533 = _531 + _532;
    float _534 = _533 + _530;
    _542 = _534;
  } else {
    float _536 = _503 * _407;
    float _537 = _502 * _406;
    float _538 = _504 * _408;
    float _539 = _536 + _537;
    float _540 = _539 + _538;
    _542 = _540;
  }
  float _543 = abs(_542);
  float _544 = log2(_543);
  float _545 = _544 * _495;
  float _546 = exp2(_545);
  float _547 = log2(_546);
  float _548 = _547 * _494;
  float _549 = exp2(_548);
  float _550 = select(_422, _549, _546);
  float _551 = _550 * _492;
  float _552 = _551 + _493;
  float _553 = 1.0f / _552;
  float _554 = _553 * _546;
  if (_418) {
    if (!_420) {
      float _557 = _514 * _486;
      float _558 = _518 * _487;
      float _559 = _522 * _488;
      float _560 = _558 + _557;
      float _561 = _560 + _559;
      float _562 = _518 * _484;
      float _563 = _514 * _483;
      float _564 = _522 * _485;
      float _565 = _562 + _563;
      float _566 = _565 + _564;
      float _567 = _522 * _482;
      float _568 = _518 * _481;
      float _569 = _514 * _480;
      float _570 = _568 + _569;
      float _571 = _570 + _567;
      float _572 = max(_566, _571);
      float _573 = max(_561, _572);
      float _574 = 1.0f / _573;
      float _575 = _574 * _561;
      float _576 = _574 * _566;
      float _577 = _574 * _571;
      _579 = _575;
      _580 = _576;
      _581 = _577;
    } else {
      _579 = _514;
      _580 = _518;
      _581 = _522;
    }
    float _582 = _579 * _479;
    float _583 = exp2(_582);
    float _584 = _583 * _478;
    float _585 = saturate(_584);
    float _586 = _579 * _478;
    float _587 = _579 - _586;
    float _588 = saturate(_587);
    float _589 = max(_478, _588);
    float _590 = min(_589, _585);
    float _591 = _580 * _479;
    float _592 = exp2(_591);
    float _593 = _592 * _478;
    float _594 = saturate(_593);
    float _595 = _580 * _478;
    float _596 = _580 - _595;
    float _597 = saturate(_596);
    float _598 = max(_478, _597);
    float _599 = min(_598, _594);
    float _600 = _581 * _479;
    float _601 = exp2(_600);
    float _602 = _601 * _478;
    float _603 = saturate(_602);
    float _604 = _581 * _478;
    float _605 = _581 - _604;
    float _606 = saturate(_605);
    float _607 = max(_478, _606);
    float _608 = min(_607, _603);
    _610 = _590;
    _611 = _599;
    _612 = _608;
  } else {
    _610 = _514;
    _611 = _518;
    _612 = _522;
  }
  float _613 = _610 * _502;
  float _614 = _611 * _503;
  float _615 = _614 + _613;
  float _616 = _612 * _504;
  float _617 = _615 + _616;
  float _618 = 1.0f / _617;
  float _619 = _618 * _554;
  float _620 = saturate(_619);
  float _621 = _620 * _610;
  float _622 = saturate(_621);
  float _623 = _620 * _611;
  float _624 = saturate(_623);
  float _625 = _620 * _612;
  float _626 = saturate(_625);
  float _627 = _622 * _489;
  float _628 = _489 - _627;
  float _629 = _624 * _490;
  float _630 = _490 - _629;
  float _631 = _626 * _491;
  float _632 = _491 - _631;
  float _633 = _626 * _504;
  float _634 = _622 * _502;
  float _635 = _624 * _503;
  float _636 = _554 - _634;
  float _637 = _636 - _635;
  float _638 = _637 - _633;
  float _639 = saturate(_638);
  float _640 = _630 * _503;
  float _641 = _628 * _502;
  float _642 = _632 * _504;
  float _643 = _640 + _641;
  float _644 = _643 + _642;
  float _645 = 1.0f / _644;
  float _646 = _645 * _639;
  float _647 = _646 * _628;
  float _648 = _647 + _622;
  float _649 = saturate(_648);
  float _650 = _646 * _630;
  float _651 = _650 + _624;
  float _652 = saturate(_651);
  float _653 = _646 * _632;
  float _654 = _653 + _626;
  float _655 = saturate(_654);
  float _656 = _655 * _504;
  float _657 = _649 * _502;
  float _658 = _652 * _503;
  float _659 = _554 - _657;
  float _660 = _659 - _658;
  float _661 = _660 - _656;
  float _662 = saturate(_661);
  float _663 = _662 * _499;
  float _664 = _663 + _649;
  float _665 = saturate(_664);
  float _666 = _662 * _500;
  float _667 = _666 + _652;
  float _668 = saturate(_667);
  float _669 = _662 * _501;
  float _670 = _669 + _655;
  float _671 = saturate(_670);
  if (!_416) {
    float _673 = _665 * _475;
    float _674 = _668 * _476;
    float _675 = _671 * _477;
    float _676 = _674 + _673;
    float _677 = _676 + _675;
    float _678 = _668 * _473;
    float _679 = _665 * _472;
    float _680 = _671 * _474;
    float _681 = _678 + _679;
    float _682 = _681 + _680;
    float _683 = _671 * _471;
    float _684 = _668 * _470;
    float _685 = _665 * _469;
    float _686 = _684 + _685;
    float _687 = _686 + _683;
    if (!_414) {
      float _689 = saturate(_677);
      float _690 = saturate(_682);
      float _691 = saturate(_687);
      _693 = _691;
      _694 = _690;
      _695 = _689;
    } else {
      _693 = _687;
      _694 = _682;
      _695 = _677;
    }
  } else {
    _693 = _671;
    _694 = _668;
    _695 = _665;
  }
  if (!_411) {
    float _697 = _695 * _475;
    float _698 = _694 * _475;
    float _699 = _693 * _475;
    _701 = _699;
    _702 = _698;
    _703 = _697;
  } else {
    _701 = _693;
    _702 = _694;
    _703 = _695;
  }
  if (_328) {
    float _707 = cb1_018z * 9.999999747378752e-05f;
    float _708 = _707 * _703;
    float _709 = _707 * _702;
    float _710 = _707 * _701;
    float _712 = 5000.0f / cb1_018y;
    float _713 = _708 * _712;
    float _714 = _709 * _712;
    float _715 = _710 * _712;
    _717 = _713;
    _718 = _714;
    _719 = _715;
  } else {
    _717 = _703;
    _718 = _702;
    _719 = _701;
  }
  float _720 = _717 * 1.6047500371932983f;
  float _721 = mad(-0.5310800075531006f, _718, _720);
  float _722 = mad(-0.07366999983787537f, _719, _721);
  float _723 = _717 * -0.10208000242710114f;
  float _724 = mad(1.1081299781799316f, _718, _723);
  float _725 = mad(-0.006049999967217445f, _719, _724);
  float _726 = _717 * -0.0032599999103695154f;
  float _727 = mad(-0.07275000214576721f, _718, _726);
  float _728 = mad(1.0760200023651123f, _719, _727);
  if (_328) {
    // float _730 = max(_722, 0.0f);
    // float _731 = max(_725, 0.0f);
    // float _732 = max(_728, 0.0f);
    // bool _733 = !(_730 >= 0.0030399328097701073f);
    // if (!_733) {
    //   float _735 = abs(_730);
    //   float _736 = log2(_735);
    //   float _737 = _736 * 0.4166666567325592f;
    //   float _738 = exp2(_737);
    //   float _739 = _738 * 1.0549999475479126f;
    //   float _740 = _739 + -0.054999999701976776f;
    //   _744 = _740;
    // } else {
    //   float _742 = _730 * 12.923210144042969f;
    //   _744 = _742;
    // }
    // bool _745 = !(_731 >= 0.0030399328097701073f);
    // if (!_745) {
    //   float _747 = abs(_731);
    //   float _748 = log2(_747);
    //   float _749 = _748 * 0.4166666567325592f;
    //   float _750 = exp2(_749);
    //   float _751 = _750 * 1.0549999475479126f;
    //   float _752 = _751 + -0.054999999701976776f;
    //   _756 = _752;
    // } else {
    //   float _754 = _731 * 12.923210144042969f;
    //   _756 = _754;
    // }
    // bool _757 = !(_732 >= 0.0030399328097701073f);
    // if (!_757) {
    //   float _759 = abs(_732);
    //   float _760 = log2(_759);
    //   float _761 = _760 * 0.4166666567325592f;
    //   float _762 = exp2(_761);
    //   float _763 = _762 * 1.0549999475479126f;
    //   float _764 = _763 + -0.054999999701976776f;
    //   _837 = _744;
    //   _838 = _756;
    //   _839 = _764;
    // } else {
    //   float _766 = _732 * 12.923210144042969f;
    //   _837 = _744;
    //   _838 = _756;
    //   _839 = _766;
    // }
    _837 = renodx::color::srgb::EncodeSafe(_722);
    _838 = renodx::color::srgb::EncodeSafe(_725);
    _839 = renodx::color::srgb::EncodeSafe(_728);

  } else {
    float _768 = saturate(_722);
    float _769 = saturate(_725);
    float _770 = saturate(_728);
    bool _771 = ((uint)(cb1_018w) == -2);
    if (!_771) {
      bool _773 = !(_768 >= 0.0030399328097701073f);
      if (!_773) {
        float _775 = abs(_768);
        float _776 = log2(_775);
        float _777 = _776 * 0.4166666567325592f;
        float _778 = exp2(_777);
        float _779 = _778 * 1.0549999475479126f;
        float _780 = _779 + -0.054999999701976776f;
        _784 = _780;
      } else {
        float _782 = _768 * 12.923210144042969f;
        _784 = _782;
      }
      bool _785 = !(_769 >= 0.0030399328097701073f);
      if (!_785) {
        float _787 = abs(_769);
        float _788 = log2(_787);
        float _789 = _788 * 0.4166666567325592f;
        float _790 = exp2(_789);
        float _791 = _790 * 1.0549999475479126f;
        float _792 = _791 + -0.054999999701976776f;
        _796 = _792;
      } else {
        float _794 = _769 * 12.923210144042969f;
        _796 = _794;
      }
      bool _797 = !(_770 >= 0.0030399328097701073f);
      if (!_797) {
        float _799 = abs(_770);
        float _800 = log2(_799);
        float _801 = _800 * 0.4166666567325592f;
        float _802 = exp2(_801);
        float _803 = _802 * 1.0549999475479126f;
        float _804 = _803 + -0.054999999701976776f;
        _808 = _784;
        _809 = _796;
        _810 = _804;
      } else {
        float _806 = _770 * 12.923210144042969f;
        _808 = _784;
        _809 = _796;
        _810 = _806;
      }
    } else {
      _808 = _768;
      _809 = _769;
      _810 = _770;
    }
    float _815 = abs(_808);
    float _816 = abs(_809);
    float _817 = abs(_810);
    float _818 = log2(_815);
    float _819 = log2(_816);
    float _820 = log2(_817);
    float _821 = _818 * cb2_000z;
    float _822 = _819 * cb2_000z;
    float _823 = _820 * cb2_000z;
    float _824 = exp2(_821);
    float _825 = exp2(_822);
    float _826 = exp2(_823);
    float _827 = _824 * cb2_000y;
    float _828 = _825 * cb2_000y;
    float _829 = _826 * cb2_000y;
    float _830 = _827 + cb2_000x;
    float _831 = _828 + cb2_000x;
    float _832 = _829 + cb2_000x;
    float _833 = saturate(_830);
    float _834 = saturate(_831);
    float _835 = saturate(_832);
    _837 = _833;
    _838 = _834;
    _839 = _835;
  }
  float _843 = cb2_023x * TEXCOORD0_centroid.x;
  float _844 = cb2_023y * TEXCOORD0_centroid.y;
  float _847 = _843 + cb2_023z;
  float _848 = _844 + cb2_023w;
  float4 _851 = t9.SampleLevel(s0_space2, float2(_847, _848), 0.0f);
  float _853 = _851.x + -0.5f;
  float _854 = _853 * cb2_022x;
  float _855 = _854 + 0.5f;
  float _856 = _855 * 2.0f;
  float _857 = _856 * _837;
  float _858 = _856 * _838;
  float _859 = _856 * _839;
  float _863 = float((uint)(cb2_019z));
  float _864 = float((uint)(cb2_019w));
  float _865 = _863 + SV_Position.x;
  float _866 = _864 + SV_Position.y;
  uint _867 = uint(_865);
  uint _868 = uint(_866);
  uint _871 = cb2_019x + -1u;
  uint _872 = cb2_019y + -1u;
  int _873 = _867 & _871;
  int _874 = _868 & _872;
  float4 _875 = t3.Load(int3(_873, _874, 0));
  float _879 = _875.x * 2.0f;
  float _880 = _875.y * 2.0f;
  float _881 = _875.z * 2.0f;
  float _882 = _879 + -1.0f;
  float _883 = _880 + -1.0f;
  float _884 = _881 + -1.0f;
  float _885 = _882 * cb2_025w;
  float _886 = _883 * cb2_025w;
  float _887 = _884 * cb2_025w;
  float _888 = _885 + _857;
  float _889 = _886 + _858;
  float _890 = _887 + _859;
  float _891 = dot(float3(_888, _889, _890), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _888;
  SV_Target.y = _889;
  SV_Target.z = _890;
  SV_Target.w = _891;
  SV_Target_1.x = _891;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
