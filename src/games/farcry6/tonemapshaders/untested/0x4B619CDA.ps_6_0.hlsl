#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _23 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _27 = _23.x * 6.283199787139893f;
  float _28 = cos(_27);
  float _29 = sin(_27);
  float _30 = _28 * _23.z;
  float _31 = _29 * _23.z;
  float _32 = _30 + TEXCOORD0_centroid.x;
  float _33 = _31 + TEXCOORD0_centroid.y;
  float _34 = _32 * 10.0f;
  float _35 = 10.0f - _34;
  float _36 = min(_34, _35);
  float _37 = saturate(_36);
  float _38 = _37 * _30;
  float _39 = _33 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _31;
  float _44 = _38 + TEXCOORD0_centroid.x;
  float _45 = _43 + TEXCOORD0_centroid.y;
  float4 _46 = t6.SampleLevel(s2_space2, float2(_44, _45), 0.0f);
  float _48 = _46.w * _38;
  float _49 = _46.w * _43;
  float _50 = 1.0f - _23.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _57 = cb2_015x * TEXCOORD0_centroid.x;
  float _58 = cb2_015y * TEXCOORD0_centroid.y;
  float _61 = _57 + cb2_015z;
  float _62 = _58 + cb2_015w;
  float4 _63 = t7.SampleLevel(s0_space2, float2(_61, _62), 0.0f);
  float _67 = saturate(_63.x);
  float _68 = saturate(_63.z);
  float _71 = cb2_026x * _68;
  float _72 = _67 * 6.283199787139893f;
  float _73 = cos(_72);
  float _74 = sin(_72);
  float _75 = _71 * _73;
  float _76 = _74 * _71;
  float _77 = 1.0f - _63.y;
  float _78 = saturate(_77);
  float _79 = _75 * _78;
  float _80 = _76 * _78;
  float _81 = _52 + TEXCOORD0_centroid.x;
  float _82 = _81 + _79;
  float _83 = _53 + TEXCOORD0_centroid.y;
  float _84 = _83 + _80;
  float4 _85 = t6.SampleLevel(s2_space2, float2(_82, _84), 0.0f);
  bool _87 = (_85.y > 0.0f);
  float _88 = select(_87, TEXCOORD0_centroid.x, _82);
  float _89 = select(_87, TEXCOORD0_centroid.y, _84);
  float4 _90 = t1.SampleLevel(s4_space2, float2(_88, _89), 0.0f);
  float _94 = max(_90.x, 0.0f);
  float _95 = max(_90.y, 0.0f);
  float _96 = max(_90.z, 0.0f);
  float _97 = min(_94, 65000.0f);
  float _98 = min(_95, 65000.0f);
  float _99 = min(_96, 65000.0f);
  float4 _100 = t3.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _105 = max(_100.x, 0.0f);
  float _106 = max(_100.y, 0.0f);
  float _107 = max(_100.z, 0.0f);
  float _108 = max(_100.w, 0.0f);
  float _109 = min(_105, 5000.0f);
  float _110 = min(_106, 5000.0f);
  float _111 = min(_107, 5000.0f);
  float _112 = min(_108, 5000.0f);
  float _115 = _21.x * cb0_028z;
  float _116 = _115 + cb0_028x;
  float _117 = cb2_027w / _116;
  float _118 = 1.0f - _117;
  float _119 = abs(_118);
  float _121 = cb2_027y * _119;
  float _123 = _121 - cb2_027z;
  float _124 = saturate(_123);
  float _125 = max(_124, _112);
  float _126 = saturate(_125);
  float _130 = cb2_013x * _88;
  float _131 = cb2_013y * _89;
  float _134 = _130 + cb2_013z;
  float _135 = _131 + cb2_013w;
  float _138 = dot(float2(_134, _135), float2(_134, _135));
  float _139 = abs(_138);
  float _140 = log2(_139);
  float _141 = _140 * cb2_014x;
  float _142 = exp2(_141);
  float _143 = saturate(_142);
  float _147 = cb2_011x * _88;
  float _148 = cb2_011y * _89;
  float _151 = _147 + cb2_011z;
  float _152 = _148 + cb2_011w;
  float _153 = _151 * _143;
  float _154 = _152 * _143;
  float _155 = _153 + _88;
  float _156 = _154 + _89;
  float _160 = cb2_012x * _88;
  float _161 = cb2_012y * _89;
  float _164 = _160 + cb2_012z;
  float _165 = _161 + cb2_012w;
  float _166 = _164 * _143;
  float _167 = _165 * _143;
  float _168 = _166 + _88;
  float _169 = _167 + _89;
  float4 _170 = t1.SampleLevel(s2_space2, float2(_155, _156), 0.0f);
  float _174 = max(_170.x, 0.0f);
  float _175 = max(_170.y, 0.0f);
  float _176 = max(_170.z, 0.0f);
  float _177 = min(_174, 65000.0f);
  float _178 = min(_175, 65000.0f);
  float _179 = min(_176, 65000.0f);
  float4 _180 = t1.SampleLevel(s2_space2, float2(_168, _169), 0.0f);
  float _184 = max(_180.x, 0.0f);
  float _185 = max(_180.y, 0.0f);
  float _186 = max(_180.z, 0.0f);
  float _187 = min(_184, 65000.0f);
  float _188 = min(_185, 65000.0f);
  float _189 = min(_186, 65000.0f);
  float4 _190 = t3.SampleLevel(s2_space2, float2(_155, _156), 0.0f);
  float _194 = max(_190.x, 0.0f);
  float _195 = max(_190.y, 0.0f);
  float _196 = max(_190.z, 0.0f);
  float _197 = min(_194, 5000.0f);
  float _198 = min(_195, 5000.0f);
  float _199 = min(_196, 5000.0f);
  float4 _200 = t3.SampleLevel(s2_space2, float2(_168, _169), 0.0f);
  float _204 = max(_200.x, 0.0f);
  float _205 = max(_200.y, 0.0f);
  float _206 = max(_200.z, 0.0f);
  float _207 = min(_204, 5000.0f);
  float _208 = min(_205, 5000.0f);
  float _209 = min(_206, 5000.0f);
  float _214 = 1.0f - cb2_009x;
  float _215 = 1.0f - cb2_009y;
  float _216 = 1.0f - cb2_009z;
  float _221 = _214 - cb2_010x;
  float _222 = _215 - cb2_010y;
  float _223 = _216 - cb2_010z;
  float _224 = saturate(_221);
  float _225 = saturate(_222);
  float _226 = saturate(_223);
  float _227 = _224 * _97;
  float _228 = _225 * _98;
  float _229 = _226 * _99;
  float _230 = cb2_009x * _177;
  float _231 = cb2_009y * _178;
  float _232 = cb2_009z * _179;
  float _233 = _230 + _227;
  float _234 = _231 + _228;
  float _235 = _232 + _229;
  float _236 = cb2_010x * _187;
  float _237 = cb2_010y * _188;
  float _238 = cb2_010z * _189;
  float _239 = _233 + _236;
  float _240 = _234 + _237;
  float _241 = _235 + _238;
  float _242 = _224 * _109;
  float _243 = _225 * _110;
  float _244 = _226 * _111;
  float _245 = cb2_009x * _197;
  float _246 = cb2_009y * _198;
  float _247 = cb2_009z * _199;
  float _248 = cb2_010x * _207;
  float _249 = cb2_010y * _208;
  float _250 = cb2_010z * _209;
  float4 _251 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _255 = _242 - _239;
  float _256 = _255 + _245;
  float _257 = _256 + _248;
  float _258 = _243 - _240;
  float _259 = _258 + _246;
  float _260 = _259 + _249;
  float _261 = _244 - _241;
  float _262 = _261 + _247;
  float _263 = _262 + _250;
  float _264 = _257 * _126;
  float _265 = _260 * _126;
  float _266 = _263 * _126;
  float _267 = _264 + _239;
  float _268 = _265 + _240;
  float _269 = _266 + _241;
  float _270 = dot(float3(_267, _268, _269), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _274 = t0[0].SExposureData_020;
  float _276 = t0[0].SExposureData_004;
  float _278 = cb2_018x * 0.5f;
  float _279 = _278 * cb2_018y;
  float _280 = _276.x - _279;
  float _281 = cb2_018y * cb2_018x;
  float _282 = 1.0f / _281;
  float _283 = _280 * _282;
  float _284 = _270 / _274.x;
  float _285 = _284 * 5464.01611328125f;
  float _286 = _285 + 9.99999993922529e-09f;
  float _287 = log2(_286);
  float _288 = _287 - _280;
  float _289 = _288 * _282;
  float _290 = saturate(_289);
  float2 _291 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _290), 0.0f);
  float _294 = max(_291.y, 1.0000000116860974e-07f);
  float _295 = _291.x / _294;
  float _296 = _295 + _283;
  float _297 = _296 / _282;
  float _298 = _297 - _276.x;
  float _299 = -0.0f - _298;
  float _301 = _299 - cb2_027x;
  float _302 = max(0.0f, _301);
  float _304 = cb2_026z * _302;
  float _305 = _298 - cb2_027x;
  float _306 = max(0.0f, _305);
  float _308 = cb2_026w * _306;
  bool _309 = (_298 < 0.0f);
  float _310 = select(_309, _304, _308);
  float _311 = exp2(_310);
  float _312 = _311 * _267;
  float _313 = _311 * _268;
  float _314 = _311 * _269;
  float _319 = cb2_024y * _251.x;
  float _320 = cb2_024z * _251.y;
  float _321 = cb2_024w * _251.z;
  float _322 = _319 + _312;
  float _323 = _320 + _313;
  float _324 = _321 + _314;
  float _329 = _322 * cb2_025x;
  float _330 = _323 * cb2_025y;
  float _331 = _324 * cb2_025z;
  float _332 = dot(float3(_329, _330, _331), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _333 = t0[0].SExposureData_012;
  float _335 = _332 * 5464.01611328125f;
  float _336 = _335 * _333.x;
  float _337 = _336 + 9.99999993922529e-09f;
  float _338 = log2(_337);
  float _339 = _338 + 16.929765701293945f;
  float _340 = _339 * 0.05734497308731079f;
  float _341 = saturate(_340);
  float _342 = _341 * _341;
  float _343 = _341 * 2.0f;
  float _344 = 3.0f - _343;
  float _345 = _342 * _344;
  float _346 = _330 * 0.8450999855995178f;
  float _347 = _331 * 0.14589999616146088f;
  float _348 = _346 + _347;
  float _349 = _348 * 2.4890189170837402f;
  float _350 = _348 * 0.3754962384700775f;
  float _351 = _348 * 2.811495304107666f;
  float _352 = _348 * 5.519708156585693f;
  float _353 = _332 - _349;
  float _354 = _345 * _353;
  float _355 = _354 + _349;
  float _356 = _345 * 0.5f;
  float _357 = _356 + 0.5f;
  float _358 = _357 * _353;
  float _359 = _358 + _349;
  float _360 = _329 - _350;
  float _361 = _330 - _351;
  float _362 = _331 - _352;
  float _363 = _357 * _360;
  float _364 = _357 * _361;
  float _365 = _357 * _362;
  float _366 = _363 + _350;
  float _367 = _364 + _351;
  float _368 = _365 + _352;
  float _369 = 1.0f / _359;
  float _370 = _355 * _369;
  float _371 = _370 * _366;
  float _372 = _370 * _367;
  float _373 = _370 * _368;
  float _377 = cb2_020x * TEXCOORD0_centroid.x;
  float _378 = cb2_020y * TEXCOORD0_centroid.y;
  float _381 = _377 + cb2_020z;
  float _382 = _378 + cb2_020w;
  float _385 = dot(float2(_381, _382), float2(_381, _382));
  float _386 = 1.0f - _385;
  float _387 = saturate(_386);
  float _388 = log2(_387);
  float _389 = _388 * cb2_021w;
  float _390 = exp2(_389);
  float _394 = _371 - cb2_021x;
  float _395 = _372 - cb2_021y;
  float _396 = _373 - cb2_021z;
  float _397 = _394 * _390;
  float _398 = _395 * _390;
  float _399 = _396 * _390;
  float _400 = _397 + cb2_021x;
  float _401 = _398 + cb2_021y;
  float _402 = _399 + cb2_021z;
  float _403 = t0[0].SExposureData_000;
  float _405 = max(_274.x, 0.0010000000474974513f);
  float _406 = 1.0f / _405;
  float _407 = _406 * _403.x;
  bool _410 = ((uint)(cb2_069y) == 0);
  float _416;
  float _417;
  float _418;
  float _472;
  float _473;
  float _474;
  float _504;
  float _505;
  float _506;
  float _656;
  float _693;
  float _694;
  float _695;
  float _724;
  float _725;
  float _726;
  float _807;
  float _808;
  float _809;
  float _815;
  float _816;
  float _817;
  float _831;
  float _832;
  float _833;
  float _858;
  float _870;
  float _898;
  float _910;
  float _922;
  float _923;
  float _924;
  float _951;
  float _952;
  float _953;
  if (!_410) {
    float _412 = _407 * _400;
    float _413 = _407 * _401;
    float _414 = _407 * _402;
    _416 = _412;
    _417 = _413;
    _418 = _414;
  } else {
    _416 = _400;
    _417 = _401;
    _418 = _402;
  }
  float _419 = _416 * 0.6130970120429993f;
  float _420 = mad(0.33952298760414124f, _417, _419);
  float _421 = mad(0.04737899824976921f, _418, _420);
  float _422 = _416 * 0.07019399851560593f;
  float _423 = mad(0.9163540005683899f, _417, _422);
  float _424 = mad(0.013451999984681606f, _418, _423);
  float _425 = _416 * 0.02061600051820278f;
  float _426 = mad(0.10956999659538269f, _417, _425);
  float _427 = mad(0.8698149919509888f, _418, _426);
  float _428 = log2(_421);
  float _429 = log2(_424);
  float _430 = log2(_427);
  float _431 = _428 * 0.04211956635117531f;
  float _432 = _429 * 0.04211956635117531f;
  float _433 = _430 * 0.04211956635117531f;
  float _434 = _431 + 0.6252607107162476f;
  float _435 = _432 + 0.6252607107162476f;
  float _436 = _433 + 0.6252607107162476f;
  float4 _437 = t5.SampleLevel(s2_space2, float3(_434, _435, _436), 0.0f);
  bool _443 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_443 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _447 = cb2_017x * _437.x;
    float _448 = cb2_017x * _437.y;
    float _449 = cb2_017x * _437.z;
    float _451 = _447 + cb2_017y;
    float _452 = _448 + cb2_017y;
    float _453 = _449 + cb2_017y;
    float _454 = exp2(_451);
    float _455 = exp2(_452);
    float _456 = exp2(_453);
    float _457 = _454 + 1.0f;
    float _458 = _455 + 1.0f;
    float _459 = _456 + 1.0f;
    float _460 = 1.0f / _457;
    float _461 = 1.0f / _458;
    float _462 = 1.0f / _459;
    float _464 = cb2_017z * _460;
    float _465 = cb2_017z * _461;
    float _466 = cb2_017z * _462;
    float _468 = _464 + cb2_017w;
    float _469 = _465 + cb2_017w;
    float _470 = _466 + cb2_017w;
    _472 = _468;
    _473 = _469;
    _474 = _470;
  } else {
    _472 = _437.x;
    _473 = _437.y;
    _474 = _437.z;
  }
  float _475 = _472 * 23.0f;
  float _476 = _475 + -14.473931312561035f;
  float _477 = exp2(_476);
  float _478 = _473 * 23.0f;
  float _479 = _478 + -14.473931312561035f;
  float _480 = exp2(_479);
  float _481 = _474 * 23.0f;
  float _482 = _481 + -14.473931312561035f;
  float _483 = exp2(_482);
  float _489 = cb2_016x - _477;
  float _490 = cb2_016y - _480;
  float _491 = cb2_016z - _483;
  float _492 = _489 * cb2_016w;
  float _493 = _490 * cb2_016w;
  float _494 = _491 * cb2_016w;
  float _495 = _492 + _477;
  float _496 = _493 + _480;
  float _497 = _494 + _483;
  if (_443 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _500 = cb2_024x * _495;
    float _501 = cb2_024x * _496;
    float _502 = cb2_024x * _497;
    _504 = _500;
    _505 = _501;
    _506 = _502;
  } else {
    _504 = _495;
    _505 = _496;
    _506 = _497;
  }
  float _509 = _504 * 0.9708889722824097f;
  float _510 = mad(0.026962999254465103f, _505, _509);
  float _511 = mad(0.002148000057786703f, _506, _510);
  float _512 = _504 * 0.01088900025933981f;
  float _513 = mad(0.9869629740715027f, _505, _512);
  float _514 = mad(0.002148000057786703f, _506, _513);
  float _515 = mad(0.026962999254465103f, _505, _512);
  float _516 = mad(0.9621480107307434f, _506, _515);
  float _517 = max(_511, 0.0f);
  float _518 = max(_514, 0.0f);
  float _519 = max(_516, 0.0f);
  float _520 = min(_517, cb2_095y);
  float _521 = min(_518, cb2_095y);
  float _522 = min(_519, cb2_095y);
  bool _525 = ((uint)(cb2_095x) == 0);
  bool _528 = ((uint)(cb2_094w) == 0);
  bool _530 = ((uint)(cb2_094z) == 0);
  bool _532 = ((uint)(cb2_094y) != 0);
  bool _534 = ((uint)(cb2_094x) == 0);
  bool _536 = ((uint)(cb2_069z) != 0);
  float _583 = asfloat((uint)(cb2_075y));
  float _584 = asfloat((uint)(cb2_075z));
  float _585 = asfloat((uint)(cb2_075w));
  float _586 = asfloat((uint)(cb2_074z));
  float _587 = asfloat((uint)(cb2_074w));
  float _588 = asfloat((uint)(cb2_075x));
  float _589 = asfloat((uint)(cb2_073w));
  float _590 = asfloat((uint)(cb2_074x));
  float _591 = asfloat((uint)(cb2_074y));
  float _592 = asfloat((uint)(cb2_077x));
  float _593 = asfloat((uint)(cb2_077y));
  float _594 = asfloat((uint)(cb2_079x));
  float _595 = asfloat((uint)(cb2_079y));
  float _596 = asfloat((uint)(cb2_079z));
  float _597 = asfloat((uint)(cb2_078y));
  float _598 = asfloat((uint)(cb2_078z));
  float _599 = asfloat((uint)(cb2_078w));
  float _600 = asfloat((uint)(cb2_077z));
  float _601 = asfloat((uint)(cb2_077w));
  float _602 = asfloat((uint)(cb2_078x));
  float _603 = asfloat((uint)(cb2_072y));
  float _604 = asfloat((uint)(cb2_072z));
  float _605 = asfloat((uint)(cb2_072w));
  float _606 = asfloat((uint)(cb2_071x));
  float _607 = asfloat((uint)(cb2_071y));
  float _608 = asfloat((uint)(cb2_076x));
  float _609 = asfloat((uint)(cb2_070w));
  float _610 = asfloat((uint)(cb2_070x));
  float _611 = asfloat((uint)(cb2_070y));
  float _612 = asfloat((uint)(cb2_070z));
  float _613 = asfloat((uint)(cb2_073x));
  float _614 = asfloat((uint)(cb2_073y));
  float _615 = asfloat((uint)(cb2_073z));
  float _616 = asfloat((uint)(cb2_071z));
  float _617 = asfloat((uint)(cb2_071w));
  float _618 = asfloat((uint)(cb2_072x));
  float _619 = max(_521, _522);
  float _620 = max(_520, _619);
  float _621 = 1.0f / _620;
  float _622 = _621 * _520;
  float _623 = _621 * _521;
  float _624 = _621 * _522;
  float _625 = abs(_622);
  float _626 = log2(_625);
  float _627 = _626 * _610;
  float _628 = exp2(_627);
  float _629 = abs(_623);
  float _630 = log2(_629);
  float _631 = _630 * _611;
  float _632 = exp2(_631);
  float _633 = abs(_624);
  float _634 = log2(_633);
  float _635 = _634 * _612;
  float _636 = exp2(_635);
  if (_532) {
    float _639 = asfloat((uint)(cb2_076w));
    float _641 = asfloat((uint)(cb2_076z));
    float _643 = asfloat((uint)(cb2_076y));
    float _644 = _641 * _521;
    float _645 = _643 * _520;
    float _646 = _639 * _522;
    float _647 = _645 + _646;
    float _648 = _647 + _644;
    _656 = _648;
  } else {
    float _650 = _617 * _521;
    float _651 = _616 * _520;
    float _652 = _618 * _522;
    float _653 = _650 + _651;
    float _654 = _653 + _652;
    _656 = _654;
  }
  float _657 = abs(_656);
  float _658 = log2(_657);
  float _659 = _658 * _609;
  float _660 = exp2(_659);
  float _661 = log2(_660);
  float _662 = _661 * _608;
  float _663 = exp2(_662);
  float _664 = select(_536, _663, _660);
  float _665 = _664 * _606;
  float _666 = _665 + _607;
  float _667 = 1.0f / _666;
  float _668 = _667 * _660;
  if (_532) {
    if (!_534) {
      float _671 = _628 * _600;
      float _672 = _632 * _601;
      float _673 = _636 * _602;
      float _674 = _672 + _671;
      float _675 = _674 + _673;
      float _676 = _632 * _598;
      float _677 = _628 * _597;
      float _678 = _636 * _599;
      float _679 = _676 + _677;
      float _680 = _679 + _678;
      float _681 = _636 * _596;
      float _682 = _632 * _595;
      float _683 = _628 * _594;
      float _684 = _682 + _683;
      float _685 = _684 + _681;
      float _686 = max(_680, _685);
      float _687 = max(_675, _686);
      float _688 = 1.0f / _687;
      float _689 = _688 * _675;
      float _690 = _688 * _680;
      float _691 = _688 * _685;
      _693 = _689;
      _694 = _690;
      _695 = _691;
    } else {
      _693 = _628;
      _694 = _632;
      _695 = _636;
    }
    float _696 = _693 * _593;
    float _697 = exp2(_696);
    float _698 = _697 * _592;
    float _699 = saturate(_698);
    float _700 = _693 * _592;
    float _701 = _693 - _700;
    float _702 = saturate(_701);
    float _703 = max(_592, _702);
    float _704 = min(_703, _699);
    float _705 = _694 * _593;
    float _706 = exp2(_705);
    float _707 = _706 * _592;
    float _708 = saturate(_707);
    float _709 = _694 * _592;
    float _710 = _694 - _709;
    float _711 = saturate(_710);
    float _712 = max(_592, _711);
    float _713 = min(_712, _708);
    float _714 = _695 * _593;
    float _715 = exp2(_714);
    float _716 = _715 * _592;
    float _717 = saturate(_716);
    float _718 = _695 * _592;
    float _719 = _695 - _718;
    float _720 = saturate(_719);
    float _721 = max(_592, _720);
    float _722 = min(_721, _717);
    _724 = _704;
    _725 = _713;
    _726 = _722;
  } else {
    _724 = _628;
    _725 = _632;
    _726 = _636;
  }
  float _727 = _724 * _616;
  float _728 = _725 * _617;
  float _729 = _728 + _727;
  float _730 = _726 * _618;
  float _731 = _729 + _730;
  float _732 = 1.0f / _731;
  float _733 = _732 * _668;
  float _734 = saturate(_733);
  float _735 = _734 * _724;
  float _736 = saturate(_735);
  float _737 = _734 * _725;
  float _738 = saturate(_737);
  float _739 = _734 * _726;
  float _740 = saturate(_739);
  float _741 = _736 * _603;
  float _742 = _603 - _741;
  float _743 = _738 * _604;
  float _744 = _604 - _743;
  float _745 = _740 * _605;
  float _746 = _605 - _745;
  float _747 = _740 * _618;
  float _748 = _736 * _616;
  float _749 = _738 * _617;
  float _750 = _668 - _748;
  float _751 = _750 - _749;
  float _752 = _751 - _747;
  float _753 = saturate(_752);
  float _754 = _744 * _617;
  float _755 = _742 * _616;
  float _756 = _746 * _618;
  float _757 = _754 + _755;
  float _758 = _757 + _756;
  float _759 = 1.0f / _758;
  float _760 = _759 * _753;
  float _761 = _760 * _742;
  float _762 = _761 + _736;
  float _763 = saturate(_762);
  float _764 = _760 * _744;
  float _765 = _764 + _738;
  float _766 = saturate(_765);
  float _767 = _760 * _746;
  float _768 = _767 + _740;
  float _769 = saturate(_768);
  float _770 = _769 * _618;
  float _771 = _763 * _616;
  float _772 = _766 * _617;
  float _773 = _668 - _771;
  float _774 = _773 - _772;
  float _775 = _774 - _770;
  float _776 = saturate(_775);
  float _777 = _776 * _613;
  float _778 = _777 + _763;
  float _779 = saturate(_778);
  float _780 = _776 * _614;
  float _781 = _780 + _766;
  float _782 = saturate(_781);
  float _783 = _776 * _615;
  float _784 = _783 + _769;
  float _785 = saturate(_784);
  if (!_530) {
    float _787 = _779 * _589;
    float _788 = _782 * _590;
    float _789 = _785 * _591;
    float _790 = _788 + _787;
    float _791 = _790 + _789;
    float _792 = _782 * _587;
    float _793 = _779 * _586;
    float _794 = _785 * _588;
    float _795 = _792 + _793;
    float _796 = _795 + _794;
    float _797 = _785 * _585;
    float _798 = _782 * _584;
    float _799 = _779 * _583;
    float _800 = _798 + _799;
    float _801 = _800 + _797;
    if (!_528) {
      float _803 = saturate(_791);
      float _804 = saturate(_796);
      float _805 = saturate(_801);
      _807 = _805;
      _808 = _804;
      _809 = _803;
    } else {
      _807 = _801;
      _808 = _796;
      _809 = _791;
    }
  } else {
    _807 = _785;
    _808 = _782;
    _809 = _779;
  }
  if (!_525) {
    float _811 = _809 * _589;
    float _812 = _808 * _589;
    float _813 = _807 * _589;
    _815 = _813;
    _816 = _812;
    _817 = _811;
  } else {
    _815 = _807;
    _816 = _808;
    _817 = _809;
  }
  if (_443) {
    float _821 = cb1_018z * 9.999999747378752e-05f;
    float _822 = _821 * _817;
    float _823 = _821 * _816;
    float _824 = _821 * _815;
    float _826 = 5000.0f / cb1_018y;
    float _827 = _822 * _826;
    float _828 = _823 * _826;
    float _829 = _824 * _826;
    _831 = _827;
    _832 = _828;
    _833 = _829;
  } else {
    _831 = _817;
    _832 = _816;
    _833 = _815;
  }
  float _834 = _831 * 1.6047500371932983f;
  float _835 = mad(-0.5310800075531006f, _832, _834);
  float _836 = mad(-0.07366999983787537f, _833, _835);
  float _837 = _831 * -0.10208000242710114f;
  float _838 = mad(1.1081299781799316f, _832, _837);
  float _839 = mad(-0.006049999967217445f, _833, _838);
  float _840 = _831 * -0.0032599999103695154f;
  float _841 = mad(-0.07275000214576721f, _832, _840);
  float _842 = mad(1.0760200023651123f, _833, _841);
  if (_443) {
    // float _844 = max(_836, 0.0f);
    // float _845 = max(_839, 0.0f);
    // float _846 = max(_842, 0.0f);
    // bool _847 = !(_844 >= 0.0030399328097701073f);
    // if (!_847) {
    //   float _849 = abs(_844);
    //   float _850 = log2(_849);
    //   float _851 = _850 * 0.4166666567325592f;
    //   float _852 = exp2(_851);
    //   float _853 = _852 * 1.0549999475479126f;
    //   float _854 = _853 + -0.054999999701976776f;
    //   _858 = _854;
    // } else {
    //   float _856 = _844 * 12.923210144042969f;
    //   _858 = _856;
    // }
    // bool _859 = !(_845 >= 0.0030399328097701073f);
    // if (!_859) {
    //   float _861 = abs(_845);
    //   float _862 = log2(_861);
    //   float _863 = _862 * 0.4166666567325592f;
    //   float _864 = exp2(_863);
    //   float _865 = _864 * 1.0549999475479126f;
    //   float _866 = _865 + -0.054999999701976776f;
    //   _870 = _866;
    // } else {
    //   float _868 = _845 * 12.923210144042969f;
    //   _870 = _868;
    // }
    // bool _871 = !(_846 >= 0.0030399328097701073f);
    // if (!_871) {
    //   float _873 = abs(_846);
    //   float _874 = log2(_873);
    //   float _875 = _874 * 0.4166666567325592f;
    //   float _876 = exp2(_875);
    //   float _877 = _876 * 1.0549999475479126f;
    //   float _878 = _877 + -0.054999999701976776f;
    //   _951 = _858;
    //   _952 = _870;
    //   _953 = _878;
    // } else {
    //   float _880 = _846 * 12.923210144042969f;
    //   _951 = _858;
    //   _952 = _870;
    //   _953 = _880;
    // }
    _951 = renodx::color::srgb::EncodeSafe(_836);
    _952 = renodx::color::srgb::EncodeSafe(_839);
    _953 = renodx::color::srgb::EncodeSafe(_842);

  } else {
    float _882 = saturate(_836);
    float _883 = saturate(_839);
    float _884 = saturate(_842);
    bool _885 = ((uint)(cb1_018w) == -2);
    if (!_885) {
      bool _887 = !(_882 >= 0.0030399328097701073f);
      if (!_887) {
        float _889 = abs(_882);
        float _890 = log2(_889);
        float _891 = _890 * 0.4166666567325592f;
        float _892 = exp2(_891);
        float _893 = _892 * 1.0549999475479126f;
        float _894 = _893 + -0.054999999701976776f;
        _898 = _894;
      } else {
        float _896 = _882 * 12.923210144042969f;
        _898 = _896;
      }
      bool _899 = !(_883 >= 0.0030399328097701073f);
      if (!_899) {
        float _901 = abs(_883);
        float _902 = log2(_901);
        float _903 = _902 * 0.4166666567325592f;
        float _904 = exp2(_903);
        float _905 = _904 * 1.0549999475479126f;
        float _906 = _905 + -0.054999999701976776f;
        _910 = _906;
      } else {
        float _908 = _883 * 12.923210144042969f;
        _910 = _908;
      }
      bool _911 = !(_884 >= 0.0030399328097701073f);
      if (!_911) {
        float _913 = abs(_884);
        float _914 = log2(_913);
        float _915 = _914 * 0.4166666567325592f;
        float _916 = exp2(_915);
        float _917 = _916 * 1.0549999475479126f;
        float _918 = _917 + -0.054999999701976776f;
        _922 = _898;
        _923 = _910;
        _924 = _918;
      } else {
        float _920 = _884 * 12.923210144042969f;
        _922 = _898;
        _923 = _910;
        _924 = _920;
      }
    } else {
      _922 = _882;
      _923 = _883;
      _924 = _884;
    }
    float _929 = abs(_922);
    float _930 = abs(_923);
    float _931 = abs(_924);
    float _932 = log2(_929);
    float _933 = log2(_930);
    float _934 = log2(_931);
    float _935 = _932 * cb2_000z;
    float _936 = _933 * cb2_000z;
    float _937 = _934 * cb2_000z;
    float _938 = exp2(_935);
    float _939 = exp2(_936);
    float _940 = exp2(_937);
    float _941 = _938 * cb2_000y;
    float _942 = _939 * cb2_000y;
    float _943 = _940 * cb2_000y;
    float _944 = _941 + cb2_000x;
    float _945 = _942 + cb2_000x;
    float _946 = _943 + cb2_000x;
    float _947 = saturate(_944);
    float _948 = saturate(_945);
    float _949 = saturate(_946);
    _951 = _947;
    _952 = _948;
    _953 = _949;
  }
  float _954 = dot(float3(_951, _952, _953), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _951;
  SV_Target.y = _952;
  SV_Target.z = _953;
  SV_Target.w = _954;
  SV_Target_1.x = _954;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
