#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = cb2_015x * TEXCOORD0_centroid.x;
  float _32 = cb2_015y * TEXCOORD0_centroid.y;
  float _35 = _31 + cb2_015z;
  float _36 = _32 + cb2_015w;
  float4 _37 = t9.SampleLevel(s0_space2, float2(_35, _36), 0.0f);
  float _41 = saturate(_37.x);
  float _42 = saturate(_37.z);
  float _45 = cb2_026x * _42;
  float _46 = _41 * 6.283199787139893f;
  float _47 = cos(_46);
  float _48 = sin(_46);
  float _49 = _45 * _47;
  float _50 = _48 * _45;
  float _51 = 1.0f - _37.y;
  float _52 = saturate(_51);
  float _53 = _49 * _52;
  float _54 = _50 * _52;
  float _55 = _53 + TEXCOORD0_centroid.x;
  float _56 = _54 + TEXCOORD0_centroid.y;
  float4 _57 = t1.SampleLevel(s4_space2, float2(_55, _56), 0.0f);
  float _61 = max(_57.x, 0.0f);
  float _62 = max(_57.y, 0.0f);
  float _63 = max(_57.z, 0.0f);
  float _64 = min(_61, 65000.0f);
  float _65 = min(_62, 65000.0f);
  float _66 = min(_63, 65000.0f);
  float4 _67 = t4.SampleLevel(s2_space2, float2(_55, _56), 0.0f);
  float _72 = max(_67.x, 0.0f);
  float _73 = max(_67.y, 0.0f);
  float _74 = max(_67.z, 0.0f);
  float _75 = max(_67.w, 0.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _78 = min(_74, 5000.0f);
  float _79 = min(_75, 5000.0f);
  float _82 = _26.x * cb0_028z;
  float _83 = _82 + cb0_028x;
  float _84 = cb2_027w / _83;
  float _85 = 1.0f - _84;
  float _86 = abs(_85);
  float _88 = cb2_027y * _86;
  float _90 = _88 - cb2_027z;
  float _91 = saturate(_90);
  float _92 = max(_91, _79);
  float _93 = saturate(_92);
  float _97 = cb2_006x * _55;
  float _98 = cb2_006y * _56;
  float _101 = _97 + cb2_006z;
  float _102 = _98 + cb2_006w;
  float _106 = cb2_007x * _55;
  float _107 = cb2_007y * _56;
  float _110 = _106 + cb2_007z;
  float _111 = _107 + cb2_007w;
  float _115 = cb2_008x * _55;
  float _116 = cb2_008y * _56;
  float _119 = _115 + cb2_008z;
  float _120 = _116 + cb2_008w;
  float4 _121 = t1.SampleLevel(s2_space2, float2(_101, _102), 0.0f);
  float _123 = max(_121.x, 0.0f);
  float _124 = min(_123, 65000.0f);
  float4 _125 = t1.SampleLevel(s2_space2, float2(_110, _111), 0.0f);
  float _127 = max(_125.y, 0.0f);
  float _128 = min(_127, 65000.0f);
  float4 _129 = t1.SampleLevel(s2_space2, float2(_119, _120), 0.0f);
  float _131 = max(_129.z, 0.0f);
  float _132 = min(_131, 65000.0f);
  float4 _133 = t4.SampleLevel(s2_space2, float2(_101, _102), 0.0f);
  float _135 = max(_133.x, 0.0f);
  float _136 = min(_135, 5000.0f);
  float4 _137 = t4.SampleLevel(s2_space2, float2(_110, _111), 0.0f);
  float _139 = max(_137.y, 0.0f);
  float _140 = min(_139, 5000.0f);
  float4 _141 = t4.SampleLevel(s2_space2, float2(_119, _120), 0.0f);
  float _143 = max(_141.z, 0.0f);
  float _144 = min(_143, 5000.0f);
  float4 _145 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _151 = cb2_005x * _145.x;
  float _152 = cb2_005x * _145.y;
  float _153 = cb2_005x * _145.z;
  float _154 = _124 - _64;
  float _155 = _128 - _65;
  float _156 = _132 - _66;
  float _157 = _151 * _154;
  float _158 = _152 * _155;
  float _159 = _153 * _156;
  float _160 = _157 + _64;
  float _161 = _158 + _65;
  float _162 = _159 + _66;
  float _163 = _136 - _76;
  float _164 = _140 - _77;
  float _165 = _144 - _78;
  float _166 = _151 * _163;
  float _167 = _152 * _164;
  float _168 = _153 * _165;
  float _169 = _166 + _76;
  float _170 = _167 + _77;
  float _171 = _168 + _78;
  float4 _172 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _176 = _169 - _160;
  float _177 = _170 - _161;
  float _178 = _171 - _162;
  float _179 = _176 * _93;
  float _180 = _177 * _93;
  float _181 = _178 * _93;
  float _182 = _179 + _160;
  float _183 = _180 + _161;
  float _184 = _181 + _162;
  float _185 = dot(float3(_182, _183, _184), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _189 = t0[0].SExposureData_020;
  float _191 = t0[0].SExposureData_004;
  float _193 = cb2_018x * 0.5f;
  float _194 = _193 * cb2_018y;
  float _195 = _191.x - _194;
  float _196 = cb2_018y * cb2_018x;
  float _197 = 1.0f / _196;
  float _198 = _195 * _197;
  float _199 = _185 / _189.x;
  float _200 = _199 * 5464.01611328125f;
  float _201 = _200 + 9.99999993922529e-09f;
  float _202 = log2(_201);
  float _203 = _202 - _195;
  float _204 = _203 * _197;
  float _205 = saturate(_204);
  float2 _206 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _205), 0.0f);
  float _209 = max(_206.y, 1.0000000116860974e-07f);
  float _210 = _206.x / _209;
  float _211 = _210 + _198;
  float _212 = _211 / _197;
  float _213 = _212 - _191.x;
  float _214 = -0.0f - _213;
  float _216 = _214 - cb2_027x;
  float _217 = max(0.0f, _216);
  float _219 = cb2_026z * _217;
  float _220 = _213 - cb2_027x;
  float _221 = max(0.0f, _220);
  float _223 = cb2_026w * _221;
  bool _224 = (_213 < 0.0f);
  float _225 = select(_224, _219, _223);
  float _226 = exp2(_225);
  float _227 = _226 * _182;
  float _228 = _226 * _183;
  float _229 = _226 * _184;
  float _234 = cb2_024y * _172.x;
  float _235 = cb2_024z * _172.y;
  float _236 = cb2_024w * _172.z;
  float _237 = _234 + _227;
  float _238 = _235 + _228;
  float _239 = _236 + _229;
  float _244 = _237 * cb2_025x;
  float _245 = _238 * cb2_025y;
  float _246 = _239 * cb2_025z;
  float _247 = dot(float3(_244, _245, _246), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _248 = t0[0].SExposureData_012;
  float _250 = _247 * 5464.01611328125f;
  float _251 = _250 * _248.x;
  float _252 = _251 + 9.99999993922529e-09f;
  float _253 = log2(_252);
  float _254 = _253 + 16.929765701293945f;
  float _255 = _254 * 0.05734497308731079f;
  float _256 = saturate(_255);
  float _257 = _256 * _256;
  float _258 = _256 * 2.0f;
  float _259 = 3.0f - _258;
  float _260 = _257 * _259;
  float _261 = _245 * 0.8450999855995178f;
  float _262 = _246 * 0.14589999616146088f;
  float _263 = _261 + _262;
  float _264 = _263 * 2.4890189170837402f;
  float _265 = _263 * 0.3754962384700775f;
  float _266 = _263 * 2.811495304107666f;
  float _267 = _263 * 5.519708156585693f;
  float _268 = _247 - _264;
  float _269 = _260 * _268;
  float _270 = _269 + _264;
  float _271 = _260 * 0.5f;
  float _272 = _271 + 0.5f;
  float _273 = _272 * _268;
  float _274 = _273 + _264;
  float _275 = _244 - _265;
  float _276 = _245 - _266;
  float _277 = _246 - _267;
  float _278 = _272 * _275;
  float _279 = _272 * _276;
  float _280 = _272 * _277;
  float _281 = _278 + _265;
  float _282 = _279 + _266;
  float _283 = _280 + _267;
  float _284 = 1.0f / _274;
  float _285 = _270 * _284;
  float _286 = _285 * _281;
  float _287 = _285 * _282;
  float _288 = _285 * _283;
  float _292 = cb2_020x * TEXCOORD0_centroid.x;
  float _293 = cb2_020y * TEXCOORD0_centroid.y;
  float _296 = _292 + cb2_020z;
  float _297 = _293 + cb2_020w;
  float _300 = dot(float2(_296, _297), float2(_296, _297));
  float _301 = 1.0f - _300;
  float _302 = saturate(_301);
  float _303 = log2(_302);
  float _304 = _303 * cb2_021w;
  float _305 = exp2(_304);
  float _309 = _286 - cb2_021x;
  float _310 = _287 - cb2_021y;
  float _311 = _288 - cb2_021z;
  float _312 = _309 * _305;
  float _313 = _310 * _305;
  float _314 = _311 * _305;
  float _315 = _312 + cb2_021x;
  float _316 = _313 + cb2_021y;
  float _317 = _314 + cb2_021z;
  float _318 = t0[0].SExposureData_000;
  float _320 = max(_189.x, 0.0010000000474974513f);
  float _321 = 1.0f / _320;
  float _322 = _321 * _318.x;
  bool _325 = ((uint)(cb2_069y) == 0);
  float _331;
  float _332;
  float _333;
  float _387;
  float _388;
  float _389;
  float _435;
  float _436;
  float _437;
  float _482;
  float _483;
  float _484;
  float _485;
  float _534;
  float _535;
  float _536;
  float _537;
  float _562;
  float _563;
  float _564;
  float _714;
  float _751;
  float _752;
  float _753;
  float _782;
  float _783;
  float _784;
  float _865;
  float _866;
  float _867;
  float _873;
  float _874;
  float _875;
  float _889;
  float _890;
  float _891;
  float _916;
  float _928;
  float _956;
  float _968;
  float _980;
  float _981;
  float _982;
  float _1009;
  float _1010;
  float _1011;
  if (!_325) {
    float _327 = _322 * _315;
    float _328 = _322 * _316;
    float _329 = _322 * _317;
    _331 = _327;
    _332 = _328;
    _333 = _329;
  } else {
    _331 = _315;
    _332 = _316;
    _333 = _317;
  }
  float _334 = _331 * 0.6130970120429993f;
  float _335 = mad(0.33952298760414124f, _332, _334);
  float _336 = mad(0.04737899824976921f, _333, _335);
  float _337 = _331 * 0.07019399851560593f;
  float _338 = mad(0.9163540005683899f, _332, _337);
  float _339 = mad(0.013451999984681606f, _333, _338);
  float _340 = _331 * 0.02061600051820278f;
  float _341 = mad(0.10956999659538269f, _332, _340);
  float _342 = mad(0.8698149919509888f, _333, _341);
  float _343 = log2(_336);
  float _344 = log2(_339);
  float _345 = log2(_342);
  float _346 = _343 * 0.04211956635117531f;
  float _347 = _344 * 0.04211956635117531f;
  float _348 = _345 * 0.04211956635117531f;
  float _349 = _346 + 0.6252607107162476f;
  float _350 = _347 + 0.6252607107162476f;
  float _351 = _348 + 0.6252607107162476f;
  float4 _352 = t6.SampleLevel(s2_space2, float3(_349, _350, _351), 0.0f);
  bool _358 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_358 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _362 = cb2_017x * _352.x;
    float _363 = cb2_017x * _352.y;
    float _364 = cb2_017x * _352.z;
    float _366 = _362 + cb2_017y;
    float _367 = _363 + cb2_017y;
    float _368 = _364 + cb2_017y;
    float _369 = exp2(_366);
    float _370 = exp2(_367);
    float _371 = exp2(_368);
    float _372 = _369 + 1.0f;
    float _373 = _370 + 1.0f;
    float _374 = _371 + 1.0f;
    float _375 = 1.0f / _372;
    float _376 = 1.0f / _373;
    float _377 = 1.0f / _374;
    float _379 = cb2_017z * _375;
    float _380 = cb2_017z * _376;
    float _381 = cb2_017z * _377;
    float _383 = _379 + cb2_017w;
    float _384 = _380 + cb2_017w;
    float _385 = _381 + cb2_017w;
    _387 = _383;
    _388 = _384;
    _389 = _385;
  } else {
    _387 = _352.x;
    _388 = _352.y;
    _389 = _352.z;
  }
  float _390 = _387 * 23.0f;
  float _391 = _390 + -14.473931312561035f;
  float _392 = exp2(_391);
  float _393 = _388 * 23.0f;
  float _394 = _393 + -14.473931312561035f;
  float _395 = exp2(_394);
  float _396 = _389 * 23.0f;
  float _397 = _396 + -14.473931312561035f;
  float _398 = exp2(_397);
  float _403 = cb2_004x * TEXCOORD0_centroid.x;
  float _404 = cb2_004y * TEXCOORD0_centroid.y;
  float _407 = _403 + cb2_004z;
  float _408 = _404 + cb2_004w;
  float4 _414 = t8.Sample(s2_space2, float2(_407, _408));
  float _419 = _414.x * cb2_003x;
  float _420 = _414.y * cb2_003y;
  float _421 = _414.z * cb2_003z;
  float _422 = _414.w * cb2_003w;
  float _425 = _422 + cb2_026y;
  float _426 = saturate(_425);
  bool _429 = ((uint)(cb2_069y) == 0);
  if (!_429) {
    float _431 = _419 * _322;
    float _432 = _420 * _322;
    float _433 = _421 * _322;
    _435 = _431;
    _436 = _432;
    _437 = _433;
  } else {
    _435 = _419;
    _436 = _420;
    _437 = _421;
  }
  bool _440 = ((uint)(cb2_028x) == 2);
  bool _441 = ((uint)(cb2_028x) == 3);
  int _442 = (uint)(cb2_028x) & -2;
  bool _443 = (_442 == 2);
  bool _444 = ((uint)(cb2_028x) == 6);
  bool _445 = _443 || _444;
  if (_445) {
    float _447 = _435 * _426;
    float _448 = _436 * _426;
    float _449 = _437 * _426;
    float _450 = _426 * _426;
    _482 = _447;
    _483 = _448;
    _484 = _449;
    _485 = _450;
  } else {
    bool _452 = ((uint)(cb2_028x) == 4);
    if (_452) {
      float _454 = _435 + -1.0f;
      float _455 = _436 + -1.0f;
      float _456 = _437 + -1.0f;
      float _457 = _426 + -1.0f;
      float _458 = _454 * _426;
      float _459 = _455 * _426;
      float _460 = _456 * _426;
      float _461 = _457 * _426;
      float _462 = _458 + 1.0f;
      float _463 = _459 + 1.0f;
      float _464 = _460 + 1.0f;
      float _465 = _461 + 1.0f;
      _482 = _462;
      _483 = _463;
      _484 = _464;
      _485 = _465;
    } else {
      bool _467 = ((uint)(cb2_028x) == 5);
      if (_467) {
        float _469 = _435 + -0.5f;
        float _470 = _436 + -0.5f;
        float _471 = _437 + -0.5f;
        float _472 = _426 + -0.5f;
        float _473 = _469 * _426;
        float _474 = _470 * _426;
        float _475 = _471 * _426;
        float _476 = _472 * _426;
        float _477 = _473 + 0.5f;
        float _478 = _474 + 0.5f;
        float _479 = _475 + 0.5f;
        float _480 = _476 + 0.5f;
        _482 = _477;
        _483 = _478;
        _484 = _479;
        _485 = _480;
      } else {
        _482 = _435;
        _483 = _436;
        _484 = _437;
        _485 = _426;
      }
    }
  }
  if (_440) {
    float _487 = _482 + _392;
    float _488 = _483 + _395;
    float _489 = _484 + _398;
    _534 = _487;
    _535 = _488;
    _536 = _489;
    _537 = cb2_025w;
  } else {
    if (_441) {
      float _492 = 1.0f - _482;
      float _493 = 1.0f - _483;
      float _494 = 1.0f - _484;
      float _495 = _492 * _392;
      float _496 = _493 * _395;
      float _497 = _494 * _398;
      float _498 = _495 + _482;
      float _499 = _496 + _483;
      float _500 = _497 + _484;
      _534 = _498;
      _535 = _499;
      _536 = _500;
      _537 = cb2_025w;
    } else {
      bool _502 = ((uint)(cb2_028x) == 4);
      if (_502) {
        float _504 = _482 * _392;
        float _505 = _483 * _395;
        float _506 = _484 * _398;
        _534 = _504;
        _535 = _505;
        _536 = _506;
        _537 = cb2_025w;
      } else {
        bool _508 = ((uint)(cb2_028x) == 5);
        if (_508) {
          float _510 = _392 * 2.0f;
          float _511 = _510 * _482;
          float _512 = _395 * 2.0f;
          float _513 = _512 * _483;
          float _514 = _398 * 2.0f;
          float _515 = _514 * _484;
          _534 = _511;
          _535 = _513;
          _536 = _515;
          _537 = cb2_025w;
        } else {
          if (_444) {
            float _518 = _392 - _482;
            float _519 = _395 - _483;
            float _520 = _398 - _484;
            _534 = _518;
            _535 = _519;
            _536 = _520;
            _537 = cb2_025w;
          } else {
            float _522 = _482 - _392;
            float _523 = _483 - _395;
            float _524 = _484 - _398;
            float _525 = _485 * _522;
            float _526 = _485 * _523;
            float _527 = _485 * _524;
            float _528 = _525 + _392;
            float _529 = _526 + _395;
            float _530 = _527 + _398;
            float _531 = 1.0f - _485;
            float _532 = _531 * cb2_025w;
            _534 = _528;
            _535 = _529;
            _536 = _530;
            _537 = _532;
          }
        }
      }
    }
  }
  float _543 = cb2_016x - _534;
  float _544 = cb2_016y - _535;
  float _545 = cb2_016z - _536;
  float _546 = _543 * cb2_016w;
  float _547 = _544 * cb2_016w;
  float _548 = _545 * cb2_016w;
  float _549 = _546 + _534;
  float _550 = _547 + _535;
  float _551 = _548 + _536;
  bool _554 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_554 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _558 = cb2_024x * _549;
    float _559 = cb2_024x * _550;
    float _560 = cb2_024x * _551;
    _562 = _558;
    _563 = _559;
    _564 = _560;
  } else {
    _562 = _549;
    _563 = _550;
    _564 = _551;
  }
  float _567 = _562 * 0.9708889722824097f;
  float _568 = mad(0.026962999254465103f, _563, _567);
  float _569 = mad(0.002148000057786703f, _564, _568);
  float _570 = _562 * 0.01088900025933981f;
  float _571 = mad(0.9869629740715027f, _563, _570);
  float _572 = mad(0.002148000057786703f, _564, _571);
  float _573 = mad(0.026962999254465103f, _563, _570);
  float _574 = mad(0.9621480107307434f, _564, _573);
  float _575 = max(_569, 0.0f);
  float _576 = max(_572, 0.0f);
  float _577 = max(_574, 0.0f);
  float _578 = min(_575, cb2_095y);
  float _579 = min(_576, cb2_095y);
  float _580 = min(_577, cb2_095y);
  bool _583 = ((uint)(cb2_095x) == 0);
  bool _586 = ((uint)(cb2_094w) == 0);
  bool _588 = ((uint)(cb2_094z) == 0);
  bool _590 = ((uint)(cb2_094y) != 0);
  bool _592 = ((uint)(cb2_094x) == 0);
  bool _594 = ((uint)(cb2_069z) != 0);
  float _641 = asfloat((uint)(cb2_075y));
  float _642 = asfloat((uint)(cb2_075z));
  float _643 = asfloat((uint)(cb2_075w));
  float _644 = asfloat((uint)(cb2_074z));
  float _645 = asfloat((uint)(cb2_074w));
  float _646 = asfloat((uint)(cb2_075x));
  float _647 = asfloat((uint)(cb2_073w));
  float _648 = asfloat((uint)(cb2_074x));
  float _649 = asfloat((uint)(cb2_074y));
  float _650 = asfloat((uint)(cb2_077x));
  float _651 = asfloat((uint)(cb2_077y));
  float _652 = asfloat((uint)(cb2_079x));
  float _653 = asfloat((uint)(cb2_079y));
  float _654 = asfloat((uint)(cb2_079z));
  float _655 = asfloat((uint)(cb2_078y));
  float _656 = asfloat((uint)(cb2_078z));
  float _657 = asfloat((uint)(cb2_078w));
  float _658 = asfloat((uint)(cb2_077z));
  float _659 = asfloat((uint)(cb2_077w));
  float _660 = asfloat((uint)(cb2_078x));
  float _661 = asfloat((uint)(cb2_072y));
  float _662 = asfloat((uint)(cb2_072z));
  float _663 = asfloat((uint)(cb2_072w));
  float _664 = asfloat((uint)(cb2_071x));
  float _665 = asfloat((uint)(cb2_071y));
  float _666 = asfloat((uint)(cb2_076x));
  float _667 = asfloat((uint)(cb2_070w));
  float _668 = asfloat((uint)(cb2_070x));
  float _669 = asfloat((uint)(cb2_070y));
  float _670 = asfloat((uint)(cb2_070z));
  float _671 = asfloat((uint)(cb2_073x));
  float _672 = asfloat((uint)(cb2_073y));
  float _673 = asfloat((uint)(cb2_073z));
  float _674 = asfloat((uint)(cb2_071z));
  float _675 = asfloat((uint)(cb2_071w));
  float _676 = asfloat((uint)(cb2_072x));
  float _677 = max(_579, _580);
  float _678 = max(_578, _677);
  float _679 = 1.0f / _678;
  float _680 = _679 * _578;
  float _681 = _679 * _579;
  float _682 = _679 * _580;
  float _683 = abs(_680);
  float _684 = log2(_683);
  float _685 = _684 * _668;
  float _686 = exp2(_685);
  float _687 = abs(_681);
  float _688 = log2(_687);
  float _689 = _688 * _669;
  float _690 = exp2(_689);
  float _691 = abs(_682);
  float _692 = log2(_691);
  float _693 = _692 * _670;
  float _694 = exp2(_693);
  if (_590) {
    float _697 = asfloat((uint)(cb2_076w));
    float _699 = asfloat((uint)(cb2_076z));
    float _701 = asfloat((uint)(cb2_076y));
    float _702 = _699 * _579;
    float _703 = _701 * _578;
    float _704 = _697 * _580;
    float _705 = _703 + _704;
    float _706 = _705 + _702;
    _714 = _706;
  } else {
    float _708 = _675 * _579;
    float _709 = _674 * _578;
    float _710 = _676 * _580;
    float _711 = _708 + _709;
    float _712 = _711 + _710;
    _714 = _712;
  }
  float _715 = abs(_714);
  float _716 = log2(_715);
  float _717 = _716 * _667;
  float _718 = exp2(_717);
  float _719 = log2(_718);
  float _720 = _719 * _666;
  float _721 = exp2(_720);
  float _722 = select(_594, _721, _718);
  float _723 = _722 * _664;
  float _724 = _723 + _665;
  float _725 = 1.0f / _724;
  float _726 = _725 * _718;
  if (_590) {
    if (!_592) {
      float _729 = _686 * _658;
      float _730 = _690 * _659;
      float _731 = _694 * _660;
      float _732 = _730 + _729;
      float _733 = _732 + _731;
      float _734 = _690 * _656;
      float _735 = _686 * _655;
      float _736 = _694 * _657;
      float _737 = _734 + _735;
      float _738 = _737 + _736;
      float _739 = _694 * _654;
      float _740 = _690 * _653;
      float _741 = _686 * _652;
      float _742 = _740 + _741;
      float _743 = _742 + _739;
      float _744 = max(_738, _743);
      float _745 = max(_733, _744);
      float _746 = 1.0f / _745;
      float _747 = _746 * _733;
      float _748 = _746 * _738;
      float _749 = _746 * _743;
      _751 = _747;
      _752 = _748;
      _753 = _749;
    } else {
      _751 = _686;
      _752 = _690;
      _753 = _694;
    }
    float _754 = _751 * _651;
    float _755 = exp2(_754);
    float _756 = _755 * _650;
    float _757 = saturate(_756);
    float _758 = _751 * _650;
    float _759 = _751 - _758;
    float _760 = saturate(_759);
    float _761 = max(_650, _760);
    float _762 = min(_761, _757);
    float _763 = _752 * _651;
    float _764 = exp2(_763);
    float _765 = _764 * _650;
    float _766 = saturate(_765);
    float _767 = _752 * _650;
    float _768 = _752 - _767;
    float _769 = saturate(_768);
    float _770 = max(_650, _769);
    float _771 = min(_770, _766);
    float _772 = _753 * _651;
    float _773 = exp2(_772);
    float _774 = _773 * _650;
    float _775 = saturate(_774);
    float _776 = _753 * _650;
    float _777 = _753 - _776;
    float _778 = saturate(_777);
    float _779 = max(_650, _778);
    float _780 = min(_779, _775);
    _782 = _762;
    _783 = _771;
    _784 = _780;
  } else {
    _782 = _686;
    _783 = _690;
    _784 = _694;
  }
  float _785 = _782 * _674;
  float _786 = _783 * _675;
  float _787 = _786 + _785;
  float _788 = _784 * _676;
  float _789 = _787 + _788;
  float _790 = 1.0f / _789;
  float _791 = _790 * _726;
  float _792 = saturate(_791);
  float _793 = _792 * _782;
  float _794 = saturate(_793);
  float _795 = _792 * _783;
  float _796 = saturate(_795);
  float _797 = _792 * _784;
  float _798 = saturate(_797);
  float _799 = _794 * _661;
  float _800 = _661 - _799;
  float _801 = _796 * _662;
  float _802 = _662 - _801;
  float _803 = _798 * _663;
  float _804 = _663 - _803;
  float _805 = _798 * _676;
  float _806 = _794 * _674;
  float _807 = _796 * _675;
  float _808 = _726 - _806;
  float _809 = _808 - _807;
  float _810 = _809 - _805;
  float _811 = saturate(_810);
  float _812 = _802 * _675;
  float _813 = _800 * _674;
  float _814 = _804 * _676;
  float _815 = _812 + _813;
  float _816 = _815 + _814;
  float _817 = 1.0f / _816;
  float _818 = _817 * _811;
  float _819 = _818 * _800;
  float _820 = _819 + _794;
  float _821 = saturate(_820);
  float _822 = _818 * _802;
  float _823 = _822 + _796;
  float _824 = saturate(_823);
  float _825 = _818 * _804;
  float _826 = _825 + _798;
  float _827 = saturate(_826);
  float _828 = _827 * _676;
  float _829 = _821 * _674;
  float _830 = _824 * _675;
  float _831 = _726 - _829;
  float _832 = _831 - _830;
  float _833 = _832 - _828;
  float _834 = saturate(_833);
  float _835 = _834 * _671;
  float _836 = _835 + _821;
  float _837 = saturate(_836);
  float _838 = _834 * _672;
  float _839 = _838 + _824;
  float _840 = saturate(_839);
  float _841 = _834 * _673;
  float _842 = _841 + _827;
  float _843 = saturate(_842);
  if (!_588) {
    float _845 = _837 * _647;
    float _846 = _840 * _648;
    float _847 = _843 * _649;
    float _848 = _846 + _845;
    float _849 = _848 + _847;
    float _850 = _840 * _645;
    float _851 = _837 * _644;
    float _852 = _843 * _646;
    float _853 = _850 + _851;
    float _854 = _853 + _852;
    float _855 = _843 * _643;
    float _856 = _840 * _642;
    float _857 = _837 * _641;
    float _858 = _856 + _857;
    float _859 = _858 + _855;
    if (!_586) {
      float _861 = saturate(_849);
      float _862 = saturate(_854);
      float _863 = saturate(_859);
      _865 = _863;
      _866 = _862;
      _867 = _861;
    } else {
      _865 = _859;
      _866 = _854;
      _867 = _849;
    }
  } else {
    _865 = _843;
    _866 = _840;
    _867 = _837;
  }
  if (!_583) {
    float _869 = _867 * _647;
    float _870 = _866 * _647;
    float _871 = _865 * _647;
    _873 = _871;
    _874 = _870;
    _875 = _869;
  } else {
    _873 = _865;
    _874 = _866;
    _875 = _867;
  }
  if (_554) {
    float _879 = cb1_018z * 9.999999747378752e-05f;
    float _880 = _879 * _875;
    float _881 = _879 * _874;
    float _882 = _879 * _873;
    float _884 = 5000.0f / cb1_018y;
    float _885 = _880 * _884;
    float _886 = _881 * _884;
    float _887 = _882 * _884;
    _889 = _885;
    _890 = _886;
    _891 = _887;
  } else {
    _889 = _875;
    _890 = _874;
    _891 = _873;
  }
  float _892 = _889 * 1.6047500371932983f;
  float _893 = mad(-0.5310800075531006f, _890, _892);
  float _894 = mad(-0.07366999983787537f, _891, _893);
  float _895 = _889 * -0.10208000242710114f;
  float _896 = mad(1.1081299781799316f, _890, _895);
  float _897 = mad(-0.006049999967217445f, _891, _896);
  float _898 = _889 * -0.0032599999103695154f;
  float _899 = mad(-0.07275000214576721f, _890, _898);
  float _900 = mad(1.0760200023651123f, _891, _899);
  if (_554) {
    // float _902 = max(_894, 0.0f);
    // float _903 = max(_897, 0.0f);
    // float _904 = max(_900, 0.0f);
    // bool _905 = !(_902 >= 0.0030399328097701073f);
    // if (!_905) {
    //   float _907 = abs(_902);
    //   float _908 = log2(_907);
    //   float _909 = _908 * 0.4166666567325592f;
    //   float _910 = exp2(_909);
    //   float _911 = _910 * 1.0549999475479126f;
    //   float _912 = _911 + -0.054999999701976776f;
    //   _916 = _912;
    // } else {
    //   float _914 = _902 * 12.923210144042969f;
    //   _916 = _914;
    // }
    // bool _917 = !(_903 >= 0.0030399328097701073f);
    // if (!_917) {
    //   float _919 = abs(_903);
    //   float _920 = log2(_919);
    //   float _921 = _920 * 0.4166666567325592f;
    //   float _922 = exp2(_921);
    //   float _923 = _922 * 1.0549999475479126f;
    //   float _924 = _923 + -0.054999999701976776f;
    //   _928 = _924;
    // } else {
    //   float _926 = _903 * 12.923210144042969f;
    //   _928 = _926;
    // }
    // bool _929 = !(_904 >= 0.0030399328097701073f);
    // if (!_929) {
    //   float _931 = abs(_904);
    //   float _932 = log2(_931);
    //   float _933 = _932 * 0.4166666567325592f;
    //   float _934 = exp2(_933);
    //   float _935 = _934 * 1.0549999475479126f;
    //   float _936 = _935 + -0.054999999701976776f;
    //   _1009 = _916;
    //   _1010 = _928;
    //   _1011 = _936;
    // } else {
    //   float _938 = _904 * 12.923210144042969f;
    //   _1009 = _916;
    //   _1010 = _928;
    //   _1011 = _938;
    // }
    _1009 = renodx::color::srgb::EncodeSafe(_894);
    _1010 = renodx::color::srgb::EncodeSafe(_897);
    _1011 = renodx::color::srgb::EncodeSafe(_900);

  } else {
    float _940 = saturate(_894);
    float _941 = saturate(_897);
    float _942 = saturate(_900);
    bool _943 = ((uint)(cb1_018w) == -2);
    if (!_943) {
      bool _945 = !(_940 >= 0.0030399328097701073f);
      if (!_945) {
        float _947 = abs(_940);
        float _948 = log2(_947);
        float _949 = _948 * 0.4166666567325592f;
        float _950 = exp2(_949);
        float _951 = _950 * 1.0549999475479126f;
        float _952 = _951 + -0.054999999701976776f;
        _956 = _952;
      } else {
        float _954 = _940 * 12.923210144042969f;
        _956 = _954;
      }
      bool _957 = !(_941 >= 0.0030399328097701073f);
      if (!_957) {
        float _959 = abs(_941);
        float _960 = log2(_959);
        float _961 = _960 * 0.4166666567325592f;
        float _962 = exp2(_961);
        float _963 = _962 * 1.0549999475479126f;
        float _964 = _963 + -0.054999999701976776f;
        _968 = _964;
      } else {
        float _966 = _941 * 12.923210144042969f;
        _968 = _966;
      }
      bool _969 = !(_942 >= 0.0030399328097701073f);
      if (!_969) {
        float _971 = abs(_942);
        float _972 = log2(_971);
        float _973 = _972 * 0.4166666567325592f;
        float _974 = exp2(_973);
        float _975 = _974 * 1.0549999475479126f;
        float _976 = _975 + -0.054999999701976776f;
        _980 = _956;
        _981 = _968;
        _982 = _976;
      } else {
        float _978 = _942 * 12.923210144042969f;
        _980 = _956;
        _981 = _968;
        _982 = _978;
      }
    } else {
      _980 = _940;
      _981 = _941;
      _982 = _942;
    }
    float _987 = abs(_980);
    float _988 = abs(_981);
    float _989 = abs(_982);
    float _990 = log2(_987);
    float _991 = log2(_988);
    float _992 = log2(_989);
    float _993 = _990 * cb2_000z;
    float _994 = _991 * cb2_000z;
    float _995 = _992 * cb2_000z;
    float _996 = exp2(_993);
    float _997 = exp2(_994);
    float _998 = exp2(_995);
    float _999 = _996 * cb2_000y;
    float _1000 = _997 * cb2_000y;
    float _1001 = _998 * cb2_000y;
    float _1002 = _999 + cb2_000x;
    float _1003 = _1000 + cb2_000x;
    float _1004 = _1001 + cb2_000x;
    float _1005 = saturate(_1002);
    float _1006 = saturate(_1003);
    float _1007 = saturate(_1004);
    _1009 = _1005;
    _1010 = _1006;
    _1011 = _1007;
  }
  float _1015 = cb2_023x * TEXCOORD0_centroid.x;
  float _1016 = cb2_023y * TEXCOORD0_centroid.y;
  float _1019 = _1015 + cb2_023z;
  float _1020 = _1016 + cb2_023w;
  float4 _1023 = t11.SampleLevel(s0_space2, float2(_1019, _1020), 0.0f);
  float _1025 = _1023.x + -0.5f;
  float _1026 = _1025 * cb2_022x;
  float _1027 = _1026 + 0.5f;
  float _1028 = _1027 * 2.0f;
  float _1029 = _1028 * _1009;
  float _1030 = _1028 * _1010;
  float _1031 = _1028 * _1011;
  float _1035 = float((uint)(cb2_019z));
  float _1036 = float((uint)(cb2_019w));
  float _1037 = _1035 + SV_Position.x;
  float _1038 = _1036 + SV_Position.y;
  uint _1039 = uint(_1037);
  uint _1040 = uint(_1038);
  uint _1043 = cb2_019x + -1u;
  uint _1044 = cb2_019y + -1u;
  int _1045 = _1039 & _1043;
  int _1046 = _1040 & _1044;
  float4 _1047 = t3.Load(int3(_1045, _1046, 0));
  float _1051 = _1047.x * 2.0f;
  float _1052 = _1047.y * 2.0f;
  float _1053 = _1047.z * 2.0f;
  float _1054 = _1051 + -1.0f;
  float _1055 = _1052 + -1.0f;
  float _1056 = _1053 + -1.0f;
  float _1057 = _1054 * _537;
  float _1058 = _1055 * _537;
  float _1059 = _1056 * _537;
  float _1060 = _1057 + _1029;
  float _1061 = _1058 + _1030;
  float _1062 = _1059 + _1031;
  float _1063 = dot(float3(_1060, _1061, _1062), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1060;
  SV_Target.y = _1061;
  SV_Target.z = _1062;
  SV_Target.w = _1063;
  SV_Target_1.x = _1063;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
