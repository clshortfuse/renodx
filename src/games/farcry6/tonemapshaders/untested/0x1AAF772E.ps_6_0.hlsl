#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t8.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _58 = _56 + TEXCOORD0_centroid.x;
  float _59 = _57 + TEXCOORD0_centroid.y;
  float4 _60 = t8.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  bool _62 = (_60.y > 0.0f);
  float _63 = select(_62, TEXCOORD0_centroid.x, _58);
  float _64 = select(_62, TEXCOORD0_centroid.y, _59);
  float4 _65 = t1.SampleLevel(s4_space2, float2(_63, _64), 0.0f);
  float _69 = max(_65.x, 0.0f);
  float _70 = max(_65.y, 0.0f);
  float _71 = max(_65.z, 0.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float _74 = min(_71, 65000.0f);
  float4 _75 = t4.SampleLevel(s2_space2, float2(_63, _64), 0.0f);
  float _80 = max(_75.x, 0.0f);
  float _81 = max(_75.y, 0.0f);
  float _82 = max(_75.z, 0.0f);
  float _83 = max(_75.w, 0.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _87 = min(_83, 5000.0f);
  float _90 = _25.x * cb0_028z;
  float _91 = _90 + cb0_028x;
  float _92 = cb2_027w / _91;
  float _93 = 1.0f - _92;
  float _94 = abs(_93);
  float _96 = cb2_027y * _94;
  float _98 = _96 - cb2_027z;
  float _99 = saturate(_98);
  float _100 = max(_99, _87);
  float _101 = saturate(_100);
  float _105 = cb2_006x * _63;
  float _106 = cb2_006y * _64;
  float _109 = _105 + cb2_006z;
  float _110 = _106 + cb2_006w;
  float _114 = cb2_007x * _63;
  float _115 = cb2_007y * _64;
  float _118 = _114 + cb2_007z;
  float _119 = _115 + cb2_007w;
  float _123 = cb2_008x * _63;
  float _124 = cb2_008y * _64;
  float _127 = _123 + cb2_008z;
  float _128 = _124 + cb2_008w;
  float4 _129 = t1.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _131 = max(_129.x, 0.0f);
  float _132 = min(_131, 65000.0f);
  float4 _133 = t1.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _135 = max(_133.y, 0.0f);
  float _136 = min(_135, 65000.0f);
  float4 _137 = t1.SampleLevel(s2_space2, float2(_127, _128), 0.0f);
  float _139 = max(_137.z, 0.0f);
  float _140 = min(_139, 65000.0f);
  float4 _141 = t4.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _143 = max(_141.x, 0.0f);
  float _144 = min(_143, 5000.0f);
  float4 _145 = t4.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _147 = max(_145.y, 0.0f);
  float _148 = min(_147, 5000.0f);
  float4 _149 = t4.SampleLevel(s2_space2, float2(_127, _128), 0.0f);
  float _151 = max(_149.z, 0.0f);
  float _152 = min(_151, 5000.0f);
  float4 _153 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _159 = cb2_005x * _153.x;
  float _160 = cb2_005x * _153.y;
  float _161 = cb2_005x * _153.z;
  float _162 = _132 - _72;
  float _163 = _136 - _73;
  float _164 = _140 - _74;
  float _165 = _159 * _162;
  float _166 = _160 * _163;
  float _167 = _161 * _164;
  float _168 = _165 + _72;
  float _169 = _166 + _73;
  float _170 = _167 + _74;
  float _171 = _144 - _84;
  float _172 = _148 - _85;
  float _173 = _152 - _86;
  float _174 = _159 * _171;
  float _175 = _160 * _172;
  float _176 = _161 * _173;
  float _177 = _174 + _84;
  float _178 = _175 + _85;
  float _179 = _176 + _86;
  float4 _180 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _184 = _177 - _168;
  float _185 = _178 - _169;
  float _186 = _179 - _170;
  float _187 = _184 * _101;
  float _188 = _185 * _101;
  float _189 = _186 * _101;
  float _190 = _187 + _168;
  float _191 = _188 + _169;
  float _192 = _189 + _170;
  float _193 = dot(float3(_190, _191, _192), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _197 = t0[0].SExposureData_020;
  float _199 = t0[0].SExposureData_004;
  float _201 = cb2_018x * 0.5f;
  float _202 = _201 * cb2_018y;
  float _203 = _199.x - _202;
  float _204 = cb2_018y * cb2_018x;
  float _205 = 1.0f / _204;
  float _206 = _203 * _205;
  float _207 = _193 / _197.x;
  float _208 = _207 * 5464.01611328125f;
  float _209 = _208 + 9.99999993922529e-09f;
  float _210 = log2(_209);
  float _211 = _210 - _203;
  float _212 = _211 * _205;
  float _213 = saturate(_212);
  float2 _214 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _213), 0.0f);
  float _217 = max(_214.y, 1.0000000116860974e-07f);
  float _218 = _214.x / _217;
  float _219 = _218 + _206;
  float _220 = _219 / _205;
  float _221 = _220 - _199.x;
  float _222 = -0.0f - _221;
  float _224 = _222 - cb2_027x;
  float _225 = max(0.0f, _224);
  float _228 = cb2_026z * _225;
  float _229 = _221 - cb2_027x;
  float _230 = max(0.0f, _229);
  float _232 = cb2_026w * _230;
  bool _233 = (_221 < 0.0f);
  float _234 = select(_233, _228, _232);
  float _235 = exp2(_234);
  float _236 = _235 * _190;
  float _237 = _235 * _191;
  float _238 = _235 * _192;
  float _243 = cb2_024y * _180.x;
  float _244 = cb2_024z * _180.y;
  float _245 = cb2_024w * _180.z;
  float _246 = _243 + _236;
  float _247 = _244 + _237;
  float _248 = _245 + _238;
  float _253 = _246 * cb2_025x;
  float _254 = _247 * cb2_025y;
  float _255 = _248 * cb2_025z;
  float _256 = dot(float3(_253, _254, _255), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _257 = t0[0].SExposureData_012;
  float _259 = _256 * 5464.01611328125f;
  float _260 = _259 * _257.x;
  float _261 = _260 + 9.99999993922529e-09f;
  float _262 = log2(_261);
  float _263 = _262 + 16.929765701293945f;
  float _264 = _263 * 0.05734497308731079f;
  float _265 = saturate(_264);
  float _266 = _265 * _265;
  float _267 = _265 * 2.0f;
  float _268 = 3.0f - _267;
  float _269 = _266 * _268;
  float _270 = _254 * 0.8450999855995178f;
  float _271 = _255 * 0.14589999616146088f;
  float _272 = _270 + _271;
  float _273 = _272 * 2.4890189170837402f;
  float _274 = _272 * 0.3754962384700775f;
  float _275 = _272 * 2.811495304107666f;
  float _276 = _272 * 5.519708156585693f;
  float _277 = _256 - _273;
  float _278 = _269 * _277;
  float _279 = _278 + _273;
  float _280 = _269 * 0.5f;
  float _281 = _280 + 0.5f;
  float _282 = _281 * _277;
  float _283 = _282 + _273;
  float _284 = _253 - _274;
  float _285 = _254 - _275;
  float _286 = _255 - _276;
  float _287 = _281 * _284;
  float _288 = _281 * _285;
  float _289 = _281 * _286;
  float _290 = _287 + _274;
  float _291 = _288 + _275;
  float _292 = _289 + _276;
  float _293 = 1.0f / _283;
  float _294 = _279 * _293;
  float _295 = _294 * _290;
  float _296 = _294 * _291;
  float _297 = _294 * _292;
  float _301 = cb2_020x * TEXCOORD0_centroid.x;
  float _302 = cb2_020y * TEXCOORD0_centroid.y;
  float _305 = _301 + cb2_020z;
  float _306 = _302 + cb2_020w;
  float _309 = dot(float2(_305, _306), float2(_305, _306));
  float _310 = 1.0f - _309;
  float _311 = saturate(_310);
  float _312 = log2(_311);
  float _313 = _312 * cb2_021w;
  float _314 = exp2(_313);
  float _318 = _295 - cb2_021x;
  float _319 = _296 - cb2_021y;
  float _320 = _297 - cb2_021z;
  float _321 = _318 * _314;
  float _322 = _319 * _314;
  float _323 = _320 * _314;
  float _324 = _321 + cb2_021x;
  float _325 = _322 + cb2_021y;
  float _326 = _323 + cb2_021z;
  float _327 = t0[0].SExposureData_000;
  float _329 = max(_197.x, 0.0010000000474974513f);
  float _330 = 1.0f / _329;
  float _331 = _330 * _327.x;
  bool _334 = ((uint)(cb2_069y) == 0);
  float _340;
  float _341;
  float _342;
  float _396;
  float _397;
  float _398;
  float _474;
  float _475;
  float _476;
  float _577;
  float _578;
  float _579;
  float _604;
  float _616;
  float _644;
  float _656;
  float _668;
  float _669;
  float _670;
  float _697;
  float _698;
  float _699;
  if (!_334) {
    float _336 = _331 * _324;
    float _337 = _331 * _325;
    float _338 = _331 * _326;
    _340 = _336;
    _341 = _337;
    _342 = _338;
  } else {
    _340 = _324;
    _341 = _325;
    _342 = _326;
  }
  float _343 = _340 * 0.6130970120429993f;
  float _344 = mad(0.33952298760414124f, _341, _343);
  float _345 = mad(0.04737899824976921f, _342, _344);
  float _346 = _340 * 0.07019399851560593f;
  float _347 = mad(0.9163540005683899f, _341, _346);
  float _348 = mad(0.013451999984681606f, _342, _347);
  float _349 = _340 * 0.02061600051820278f;
  float _350 = mad(0.10956999659538269f, _341, _349);
  float _351 = mad(0.8698149919509888f, _342, _350);
  float _352 = log2(_345);
  float _353 = log2(_348);
  float _354 = log2(_351);
  float _355 = _352 * 0.04211956635117531f;
  float _356 = _353 * 0.04211956635117531f;
  float _357 = _354 * 0.04211956635117531f;
  float _358 = _355 + 0.6252607107162476f;
  float _359 = _356 + 0.6252607107162476f;
  float _360 = _357 + 0.6252607107162476f;
  float4 _361 = t6.SampleLevel(s2_space2, float3(_358, _359, _360), 0.0f);
  bool _367 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_367 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _371 = cb2_017x * _361.x;
    float _372 = cb2_017x * _361.y;
    float _373 = cb2_017x * _361.z;
    float _375 = _371 + cb2_017y;
    float _376 = _372 + cb2_017y;
    float _377 = _373 + cb2_017y;
    float _378 = exp2(_375);
    float _379 = exp2(_376);
    float _380 = exp2(_377);
    float _381 = _378 + 1.0f;
    float _382 = _379 + 1.0f;
    float _383 = _380 + 1.0f;
    float _384 = 1.0f / _381;
    float _385 = 1.0f / _382;
    float _386 = 1.0f / _383;
    float _388 = cb2_017z * _384;
    float _389 = cb2_017z * _385;
    float _390 = cb2_017z * _386;
    float _392 = _388 + cb2_017w;
    float _393 = _389 + cb2_017w;
    float _394 = _390 + cb2_017w;
    _396 = _392;
    _397 = _393;
    _398 = _394;
  } else {
    _396 = _361.x;
    _397 = _361.y;
    _398 = _361.z;
  }
  float _399 = _396 * 23.0f;
  float _400 = _399 + -14.473931312561035f;
  float _401 = exp2(_400);
  float _402 = _397 * 23.0f;
  float _403 = _402 + -14.473931312561035f;
  float _404 = exp2(_403);
  float _405 = _398 * 23.0f;
  float _406 = _405 + -14.473931312561035f;
  float _407 = exp2(_406);
  float _408 = dot(float3(_401, _404, _407), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _413 = dot(float3(_401, _404, _407), float3(_401, _404, _407));
  float _414 = rsqrt(_413);
  float _415 = _414 * _401;
  float _416 = _414 * _404;
  float _417 = _414 * _407;
  float _418 = cb2_001x - _415;
  float _419 = cb2_001y - _416;
  float _420 = cb2_001z - _417;
  float _421 = dot(float3(_418, _419, _420), float3(_418, _419, _420));
  float _424 = cb2_002z * _421;
  float _426 = _424 + cb2_002w;
  float _427 = saturate(_426);
  float _429 = cb2_002x * _427;
  float _430 = _408 - _401;
  float _431 = _408 - _404;
  float _432 = _408 - _407;
  float _433 = _429 * _430;
  float _434 = _429 * _431;
  float _435 = _429 * _432;
  float _436 = _433 + _401;
  float _437 = _434 + _404;
  float _438 = _435 + _407;
  float _440 = cb2_002y * _427;
  float _441 = 0.10000000149011612f - _436;
  float _442 = 0.10000000149011612f - _437;
  float _443 = 0.10000000149011612f - _438;
  float _444 = _441 * _440;
  float _445 = _442 * _440;
  float _446 = _443 * _440;
  float _447 = _444 + _436;
  float _448 = _445 + _437;
  float _449 = _446 + _438;
  float _450 = saturate(_447);
  float _451 = saturate(_448);
  float _452 = saturate(_449);
  float _459 = cb2_016x - _450;
  float _460 = cb2_016y - _451;
  float _461 = cb2_016z - _452;
  float _462 = _459 * cb2_016w;
  float _463 = _460 * cb2_016w;
  float _464 = _461 * cb2_016w;
  float _465 = _462 + _450;
  float _466 = _463 + _451;
  float _467 = _464 + _452;
  if (_367 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _470 = cb2_024x * _465;
    float _471 = cb2_024x * _466;
    float _472 = cb2_024x * _467;
    _474 = _470;
    _475 = _471;
    _476 = _472;
  } else {
    _474 = _465;
    _475 = _466;
    _476 = _467;
  }
  float _477 = _474 * 0.9708889722824097f;
  float _478 = mad(0.026962999254465103f, _475, _477);
  float _479 = mad(0.002148000057786703f, _476, _478);
  float _480 = _474 * 0.01088900025933981f;
  float _481 = mad(0.9869629740715027f, _475, _480);
  float _482 = mad(0.002148000057786703f, _476, _481);
  float _483 = mad(0.026962999254465103f, _475, _480);
  float _484 = mad(0.9621480107307434f, _476, _483);
  if (_367) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _489 = cb1_018y * 0.10000000149011612f;
        float _490 = log2(cb1_018z);
        float _491 = _490 + -13.287712097167969f;
        float _492 = _491 * 1.4929734468460083f;
        float _493 = _492 + 18.0f;
        float _494 = exp2(_493);
        float _495 = _494 * 0.18000000715255737f;
        float _496 = abs(_495);
        float _497 = log2(_496);
        float _498 = _497 * 1.5f;
        float _499 = exp2(_498);
        float _500 = _499 * _489;
        float _501 = _500 / cb1_018z;
        float _502 = _501 + -0.07636754959821701f;
        float _503 = _497 * 1.2750000953674316f;
        float _504 = exp2(_503);
        float _505 = _504 * 0.07636754959821701f;
        float _506 = cb1_018y * 0.011232397519052029f;
        float _507 = _506 * _499;
        float _508 = _507 / cb1_018z;
        float _509 = _505 - _508;
        float _510 = _504 + -0.11232396960258484f;
        float _511 = _510 * _489;
        float _512 = _511 / cb1_018z;
        float _513 = _512 * cb1_018z;
        float _514 = abs(_479);
        float _515 = abs(_482);
        float _516 = abs(_484);
        float _517 = log2(_514);
        float _518 = log2(_515);
        float _519 = log2(_516);
        float _520 = _517 * 1.5f;
        float _521 = _518 * 1.5f;
        float _522 = _519 * 1.5f;
        float _523 = exp2(_520);
        float _524 = exp2(_521);
        float _525 = exp2(_522);
        float _526 = _523 * _513;
        float _527 = _524 * _513;
        float _528 = _525 * _513;
        float _529 = _517 * 1.2750000953674316f;
        float _530 = _518 * 1.2750000953674316f;
        float _531 = _519 * 1.2750000953674316f;
        float _532 = exp2(_529);
        float _533 = exp2(_530);
        float _534 = exp2(_531);
        float _535 = _532 * _502;
        float _536 = _533 * _502;
        float _537 = _534 * _502;
        float _538 = _535 + _509;
        float _539 = _536 + _509;
        float _540 = _537 + _509;
        float _541 = _526 / _538;
        float _542 = _527 / _539;
        float _543 = _528 / _540;
        float _544 = _541 * 9.999999747378752e-05f;
        float _545 = _542 * 9.999999747378752e-05f;
        float _546 = _543 * 9.999999747378752e-05f;
        float _547 = 5000.0f / cb1_018y;
        float _548 = _544 * _547;
        float _549 = _545 * _547;
        float _550 = _546 * _547;
        _577 = _548;
        _578 = _549;
        _579 = _550;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_479, _482, _484));
      _577 = tonemapped.x, _578 = tonemapped.y, _579 = tonemapped.z;
    }
      } else {
        float _552 = _479 + 0.020616600289940834f;
        float _553 = _482 + 0.020616600289940834f;
        float _554 = _484 + 0.020616600289940834f;
        float _555 = _552 * _479;
        float _556 = _553 * _482;
        float _557 = _554 * _484;
        float _558 = _555 + -7.456949970219284e-05f;
        float _559 = _556 + -7.456949970219284e-05f;
        float _560 = _557 + -7.456949970219284e-05f;
        float _561 = _479 * 0.9837960004806519f;
        float _562 = _482 * 0.9837960004806519f;
        float _563 = _484 * 0.9837960004806519f;
        float _564 = _561 + 0.4336790144443512f;
        float _565 = _562 + 0.4336790144443512f;
        float _566 = _563 + 0.4336790144443512f;
        float _567 = _564 * _479;
        float _568 = _565 * _482;
        float _569 = _566 * _484;
        float _570 = _567 + 0.24617899954319f;
        float _571 = _568 + 0.24617899954319f;
        float _572 = _569 + 0.24617899954319f;
        float _573 = _558 / _570;
        float _574 = _559 / _571;
        float _575 = _560 / _572;
        _577 = _573;
        _578 = _574;
        _579 = _575;
      }
      float _580 = _577 * 1.6047500371932983f;
      float _581 = mad(-0.5310800075531006f, _578, _580);
      float _582 = mad(-0.07366999983787537f, _579, _581);
      float _583 = _577 * -0.10208000242710114f;
      float _584 = mad(1.1081299781799316f, _578, _583);
      float _585 = mad(-0.006049999967217445f, _579, _584);
      float _586 = _577 * -0.0032599999103695154f;
      float _587 = mad(-0.07275000214576721f, _578, _586);
      float _588 = mad(1.0760200023651123f, _579, _587);
      if (_367) {
        // float _590 = max(_582, 0.0f);
        // float _591 = max(_585, 0.0f);
        // float _592 = max(_588, 0.0f);
        // bool _593 = !(_590 >= 0.0030399328097701073f);
        // if (!_593) {
        //   float _595 = abs(_590);
        //   float _596 = log2(_595);
        //   float _597 = _596 * 0.4166666567325592f;
        //   float _598 = exp2(_597);
        //   float _599 = _598 * 1.0549999475479126f;
        //   float _600 = _599 + -0.054999999701976776f;
        //   _604 = _600;
        // } else {
        //   float _602 = _590 * 12.923210144042969f;
        //   _604 = _602;
        // }
        // bool _605 = !(_591 >= 0.0030399328097701073f);
        // if (!_605) {
        //   float _607 = abs(_591);
        //   float _608 = log2(_607);
        //   float _609 = _608 * 0.4166666567325592f;
        //   float _610 = exp2(_609);
        //   float _611 = _610 * 1.0549999475479126f;
        //   float _612 = _611 + -0.054999999701976776f;
        //   _616 = _612;
        // } else {
        //   float _614 = _591 * 12.923210144042969f;
        //   _616 = _614;
        // }
        // bool _617 = !(_592 >= 0.0030399328097701073f);
        // if (!_617) {
        //   float _619 = abs(_592);
        //   float _620 = log2(_619);
        //   float _621 = _620 * 0.4166666567325592f;
        //   float _622 = exp2(_621);
        //   float _623 = _622 * 1.0549999475479126f;
        //   float _624 = _623 + -0.054999999701976776f;
        //   _697 = _604;
        //   _698 = _616;
        //   _699 = _624;
        // } else {
        //   float _626 = _592 * 12.923210144042969f;
        //   _697 = _604;
        //   _698 = _616;
        //   _699 = _626;
        // }
        _697 = renodx::color::srgb::EncodeSafe(_582);
        _698 = renodx::color::srgb::EncodeSafe(_585);
        _699 = renodx::color::srgb::EncodeSafe(_588);

      } else {
        float _628 = saturate(_582);
        float _629 = saturate(_585);
        float _630 = saturate(_588);
        bool _631 = ((uint)(cb1_018w) == -2);
        if (!_631) {
          bool _633 = !(_628 >= 0.0030399328097701073f);
          if (!_633) {
            float _635 = abs(_628);
            float _636 = log2(_635);
            float _637 = _636 * 0.4166666567325592f;
            float _638 = exp2(_637);
            float _639 = _638 * 1.0549999475479126f;
            float _640 = _639 + -0.054999999701976776f;
            _644 = _640;
          } else {
            float _642 = _628 * 12.923210144042969f;
            _644 = _642;
          }
          bool _645 = !(_629 >= 0.0030399328097701073f);
          if (!_645) {
            float _647 = abs(_629);
            float _648 = log2(_647);
            float _649 = _648 * 0.4166666567325592f;
            float _650 = exp2(_649);
            float _651 = _650 * 1.0549999475479126f;
            float _652 = _651 + -0.054999999701976776f;
            _656 = _652;
          } else {
            float _654 = _629 * 12.923210144042969f;
            _656 = _654;
          }
          bool _657 = !(_630 >= 0.0030399328097701073f);
          if (!_657) {
            float _659 = abs(_630);
            float _660 = log2(_659);
            float _661 = _660 * 0.4166666567325592f;
            float _662 = exp2(_661);
            float _663 = _662 * 1.0549999475479126f;
            float _664 = _663 + -0.054999999701976776f;
            _668 = _644;
            _669 = _656;
            _670 = _664;
          } else {
            float _666 = _630 * 12.923210144042969f;
            _668 = _644;
            _669 = _656;
            _670 = _666;
          }
        } else {
          _668 = _628;
          _669 = _629;
          _670 = _630;
        }
        float _675 = abs(_668);
        float _676 = abs(_669);
        float _677 = abs(_670);
        float _678 = log2(_675);
        float _679 = log2(_676);
        float _680 = log2(_677);
        float _681 = _678 * cb2_000z;
        float _682 = _679 * cb2_000z;
        float _683 = _680 * cb2_000z;
        float _684 = exp2(_681);
        float _685 = exp2(_682);
        float _686 = exp2(_683);
        float _687 = _684 * cb2_000y;
        float _688 = _685 * cb2_000y;
        float _689 = _686 * cb2_000y;
        float _690 = _687 + cb2_000x;
        float _691 = _688 + cb2_000x;
        float _692 = _689 + cb2_000x;
        float _693 = saturate(_690);
        float _694 = saturate(_691);
        float _695 = saturate(_692);
        _697 = _693;
        _698 = _694;
        _699 = _695;
      }
      float _703 = cb2_023x * TEXCOORD0_centroid.x;
      float _704 = cb2_023y * TEXCOORD0_centroid.y;
      float _707 = _703 + cb2_023z;
      float _708 = _704 + cb2_023w;
      float4 _711 = t10.SampleLevel(s0_space2, float2(_707, _708), 0.0f);
      float _713 = _711.x + -0.5f;
      float _714 = _713 * cb2_022x;
      float _715 = _714 + 0.5f;
      float _716 = _715 * 2.0f;
      float _717 = _716 * _697;
      float _718 = _716 * _698;
      float _719 = _716 * _699;
      float _723 = float((uint)(cb2_019z));
      float _724 = float((uint)(cb2_019w));
      float _725 = _723 + SV_Position.x;
      float _726 = _724 + SV_Position.y;
      uint _727 = uint(_725);
      uint _728 = uint(_726);
      uint _731 = cb2_019x + -1u;
      uint _732 = cb2_019y + -1u;
      int _733 = _727 & _731;
      int _734 = _728 & _732;
      float4 _735 = t3.Load(int3(_733, _734, 0));
      float _739 = _735.x * 2.0f;
      float _740 = _735.y * 2.0f;
      float _741 = _735.z * 2.0f;
      float _742 = _739 + -1.0f;
      float _743 = _740 + -1.0f;
      float _744 = _741 + -1.0f;
      float _745 = _742 * cb2_025w;
      float _746 = _743 * cb2_025w;
      float _747 = _744 * cb2_025w;
      float _748 = _745 + _717;
      float _749 = _746 + _718;
      float _750 = _747 + _719;
      float _751 = dot(float3(_748, _749, _750), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _748;
      SV_Target.y = _749;
      SV_Target.z = _750;
      SV_Target.w = _751;
      SV_Target_1.x = _751;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
