#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _26 = cb2_015x * TEXCOORD0_centroid.x;
  float _27 = cb2_015y * TEXCOORD0_centroid.y;
  float _30 = _26 + cb2_015z;
  float _31 = _27 + cb2_015w;
  float4 _32 = t7.SampleLevel(s0_space2, float2(_30, _31), 0.0f);
  float _36 = saturate(_32.x);
  float _37 = saturate(_32.z);
  float _40 = cb2_026x * _37;
  float _41 = _36 * 6.283199787139893f;
  float _42 = cos(_41);
  float _43 = sin(_41);
  float _44 = _40 * _42;
  float _45 = _43 * _40;
  float _46 = 1.0f - _32.y;
  float _47 = saturate(_46);
  float _48 = _44 * _47;
  float _49 = _45 * _47;
  float _50 = _48 + TEXCOORD0_centroid.x;
  float _51 = _49 + TEXCOORD0_centroid.y;
  float4 _52 = t1.SampleLevel(s4_space2, float2(_50, _51), 0.0f);
  float _56 = max(_52.x, 0.0f);
  float _57 = max(_52.y, 0.0f);
  float _58 = max(_52.z, 0.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float _61 = min(_58, 65000.0f);
  float4 _62 = t3.SampleLevel(s2_space2, float2(_50, _51), 0.0f);
  float _67 = max(_62.x, 0.0f);
  float _68 = max(_62.y, 0.0f);
  float _69 = max(_62.z, 0.0f);
  float _70 = max(_62.w, 0.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _74 = min(_70, 5000.0f);
  float _77 = _21.x * cb0_028z;
  float _78 = _77 + cb0_028x;
  float _79 = cb2_027w / _78;
  float _80 = 1.0f - _79;
  float _81 = abs(_80);
  float _83 = cb2_027y * _81;
  float _85 = _83 - cb2_027z;
  float _86 = saturate(_85);
  float _87 = max(_86, _74);
  float _88 = saturate(_87);
  float _92 = cb2_006x * _50;
  float _93 = cb2_006y * _51;
  float _96 = _92 + cb2_006z;
  float _97 = _93 + cb2_006w;
  float _101 = cb2_007x * _50;
  float _102 = cb2_007y * _51;
  float _105 = _101 + cb2_007z;
  float _106 = _102 + cb2_007w;
  float _110 = cb2_008x * _50;
  float _111 = cb2_008y * _51;
  float _114 = _110 + cb2_008z;
  float _115 = _111 + cb2_008w;
  float4 _116 = t1.SampleLevel(s2_space2, float2(_96, _97), 0.0f);
  float _118 = max(_116.x, 0.0f);
  float _119 = min(_118, 65000.0f);
  float4 _120 = t1.SampleLevel(s2_space2, float2(_105, _106), 0.0f);
  float _122 = max(_120.y, 0.0f);
  float _123 = min(_122, 65000.0f);
  float4 _124 = t1.SampleLevel(s2_space2, float2(_114, _115), 0.0f);
  float _126 = max(_124.z, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t3.SampleLevel(s2_space2, float2(_96, _97), 0.0f);
  float _130 = max(_128.x, 0.0f);
  float _131 = min(_130, 5000.0f);
  float4 _132 = t3.SampleLevel(s2_space2, float2(_105, _106), 0.0f);
  float _134 = max(_132.y, 0.0f);
  float _135 = min(_134, 5000.0f);
  float4 _136 = t3.SampleLevel(s2_space2, float2(_114, _115), 0.0f);
  float _138 = max(_136.z, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _146 = cb2_005x * _140.x;
  float _147 = cb2_005x * _140.y;
  float _148 = cb2_005x * _140.z;
  float _149 = _119 - _59;
  float _150 = _123 - _60;
  float _151 = _127 - _61;
  float _152 = _146 * _149;
  float _153 = _147 * _150;
  float _154 = _148 * _151;
  float _155 = _152 + _59;
  float _156 = _153 + _60;
  float _157 = _154 + _61;
  float _158 = _131 - _71;
  float _159 = _135 - _72;
  float _160 = _139 - _73;
  float _161 = _146 * _158;
  float _162 = _147 * _159;
  float _163 = _148 * _160;
  float _164 = _161 + _71;
  float _165 = _162 + _72;
  float _166 = _163 + _73;
  float4 _167 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _171 = _164 - _155;
  float _172 = _165 - _156;
  float _173 = _166 - _157;
  float _174 = _171 * _88;
  float _175 = _172 * _88;
  float _176 = _173 * _88;
  float _177 = _174 + _155;
  float _178 = _175 + _156;
  float _179 = _176 + _157;
  float _180 = dot(float3(_177, _178, _179), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _184 = t0[0].SExposureData_020;
  float _186 = t0[0].SExposureData_004;
  float _188 = cb2_018x * 0.5f;
  float _189 = _188 * cb2_018y;
  float _190 = _186.x - _189;
  float _191 = cb2_018y * cb2_018x;
  float _192 = 1.0f / _191;
  float _193 = _190 * _192;
  float _194 = _180 / _184.x;
  float _195 = _194 * 5464.01611328125f;
  float _196 = _195 + 9.99999993922529e-09f;
  float _197 = log2(_196);
  float _198 = _197 - _190;
  float _199 = _198 * _192;
  float _200 = saturate(_199);
  float2 _201 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _200), 0.0f);
  float _204 = max(_201.y, 1.0000000116860974e-07f);
  float _205 = _201.x / _204;
  float _206 = _205 + _193;
  float _207 = _206 / _192;
  float _208 = _207 - _186.x;
  float _209 = -0.0f - _208;
  float _211 = _209 - cb2_027x;
  float _212 = max(0.0f, _211);
  float _214 = cb2_026z * _212;
  float _215 = _208 - cb2_027x;
  float _216 = max(0.0f, _215);
  float _218 = cb2_026w * _216;
  bool _219 = (_208 < 0.0f);
  float _220 = select(_219, _214, _218);
  float _221 = exp2(_220);
  float _222 = _221 * _177;
  float _223 = _221 * _178;
  float _224 = _221 * _179;
  float _229 = cb2_024y * _167.x;
  float _230 = cb2_024z * _167.y;
  float _231 = cb2_024w * _167.z;
  float _232 = _229 + _222;
  float _233 = _230 + _223;
  float _234 = _231 + _224;
  float _239 = _232 * cb2_025x;
  float _240 = _233 * cb2_025y;
  float _241 = _234 * cb2_025z;
  float _242 = dot(float3(_239, _240, _241), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _243 = t0[0].SExposureData_012;
  float _245 = _242 * 5464.01611328125f;
  float _246 = _245 * _243.x;
  float _247 = _246 + 9.99999993922529e-09f;
  float _248 = log2(_247);
  float _249 = _248 + 16.929765701293945f;
  float _250 = _249 * 0.05734497308731079f;
  float _251 = saturate(_250);
  float _252 = _251 * _251;
  float _253 = _251 * 2.0f;
  float _254 = 3.0f - _253;
  float _255 = _252 * _254;
  float _256 = _240 * 0.8450999855995178f;
  float _257 = _241 * 0.14589999616146088f;
  float _258 = _256 + _257;
  float _259 = _258 * 2.4890189170837402f;
  float _260 = _258 * 0.3754962384700775f;
  float _261 = _258 * 2.811495304107666f;
  float _262 = _258 * 5.519708156585693f;
  float _263 = _242 - _259;
  float _264 = _255 * _263;
  float _265 = _264 + _259;
  float _266 = _255 * 0.5f;
  float _267 = _266 + 0.5f;
  float _268 = _267 * _263;
  float _269 = _268 + _259;
  float _270 = _239 - _260;
  float _271 = _240 - _261;
  float _272 = _241 - _262;
  float _273 = _267 * _270;
  float _274 = _267 * _271;
  float _275 = _267 * _272;
  float _276 = _273 + _260;
  float _277 = _274 + _261;
  float _278 = _275 + _262;
  float _279 = 1.0f / _269;
  float _280 = _265 * _279;
  float _281 = _280 * _276;
  float _282 = _280 * _277;
  float _283 = _280 * _278;
  float _287 = cb2_020x * TEXCOORD0_centroid.x;
  float _288 = cb2_020y * TEXCOORD0_centroid.y;
  float _291 = _287 + cb2_020z;
  float _292 = _288 + cb2_020w;
  float _295 = dot(float2(_291, _292), float2(_291, _292));
  float _296 = 1.0f - _295;
  float _297 = saturate(_296);
  float _298 = log2(_297);
  float _299 = _298 * cb2_021w;
  float _300 = exp2(_299);
  float _304 = _281 - cb2_021x;
  float _305 = _282 - cb2_021y;
  float _306 = _283 - cb2_021z;
  float _307 = _304 * _300;
  float _308 = _305 * _300;
  float _309 = _306 * _300;
  float _310 = _307 + cb2_021x;
  float _311 = _308 + cb2_021y;
  float _312 = _309 + cb2_021z;
  float _313 = t0[0].SExposureData_000;
  float _315 = max(_184.x, 0.0010000000474974513f);
  float _316 = 1.0f / _315;
  float _317 = _316 * _313.x;
  bool _320 = ((uint)(cb2_069y) == 0);
  float _326;
  float _327;
  float _328;
  float _382;
  float _383;
  float _384;
  float _414;
  float _415;
  float _416;
  float _566;
  float _603;
  float _604;
  float _605;
  float _634;
  float _635;
  float _636;
  float _717;
  float _718;
  float _719;
  float _725;
  float _726;
  float _727;
  float _741;
  float _742;
  float _743;
  float _768;
  float _780;
  float _808;
  float _820;
  float _832;
  float _833;
  float _834;
  float _861;
  float _862;
  float _863;
  if (!_320) {
    float _322 = _317 * _310;
    float _323 = _317 * _311;
    float _324 = _317 * _312;
    _326 = _322;
    _327 = _323;
    _328 = _324;
  } else {
    _326 = _310;
    _327 = _311;
    _328 = _312;
  }
  float _329 = _326 * 0.6130970120429993f;
  float _330 = mad(0.33952298760414124f, _327, _329);
  float _331 = mad(0.04737899824976921f, _328, _330);
  float _332 = _326 * 0.07019399851560593f;
  float _333 = mad(0.9163540005683899f, _327, _332);
  float _334 = mad(0.013451999984681606f, _328, _333);
  float _335 = _326 * 0.02061600051820278f;
  float _336 = mad(0.10956999659538269f, _327, _335);
  float _337 = mad(0.8698149919509888f, _328, _336);
  float _338 = log2(_331);
  float _339 = log2(_334);
  float _340 = log2(_337);
  float _341 = _338 * 0.04211956635117531f;
  float _342 = _339 * 0.04211956635117531f;
  float _343 = _340 * 0.04211956635117531f;
  float _344 = _341 + 0.6252607107162476f;
  float _345 = _342 + 0.6252607107162476f;
  float _346 = _343 + 0.6252607107162476f;
  float4 _347 = t5.SampleLevel(s2_space2, float3(_344, _345, _346), 0.0f);
  bool _353 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_353 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _357 = cb2_017x * _347.x;
    float _358 = cb2_017x * _347.y;
    float _359 = cb2_017x * _347.z;
    float _361 = _357 + cb2_017y;
    float _362 = _358 + cb2_017y;
    float _363 = _359 + cb2_017y;
    float _364 = exp2(_361);
    float _365 = exp2(_362);
    float _366 = exp2(_363);
    float _367 = _364 + 1.0f;
    float _368 = _365 + 1.0f;
    float _369 = _366 + 1.0f;
    float _370 = 1.0f / _367;
    float _371 = 1.0f / _368;
    float _372 = 1.0f / _369;
    float _374 = cb2_017z * _370;
    float _375 = cb2_017z * _371;
    float _376 = cb2_017z * _372;
    float _378 = _374 + cb2_017w;
    float _379 = _375 + cb2_017w;
    float _380 = _376 + cb2_017w;
    _382 = _378;
    _383 = _379;
    _384 = _380;
  } else {
    _382 = _347.x;
    _383 = _347.y;
    _384 = _347.z;
  }
  float _385 = _382 * 23.0f;
  float _386 = _385 + -14.473931312561035f;
  float _387 = exp2(_386);
  float _388 = _383 * 23.0f;
  float _389 = _388 + -14.473931312561035f;
  float _390 = exp2(_389);
  float _391 = _384 * 23.0f;
  float _392 = _391 + -14.473931312561035f;
  float _393 = exp2(_392);
  float _399 = cb2_016x - _387;
  float _400 = cb2_016y - _390;
  float _401 = cb2_016z - _393;
  float _402 = _399 * cb2_016w;
  float _403 = _400 * cb2_016w;
  float _404 = _401 * cb2_016w;
  float _405 = _402 + _387;
  float _406 = _403 + _390;
  float _407 = _404 + _393;
  if (_353 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _410 = cb2_024x * _405;
    float _411 = cb2_024x * _406;
    float _412 = cb2_024x * _407;
    _414 = _410;
    _415 = _411;
    _416 = _412;
  } else {
    _414 = _405;
    _415 = _406;
    _416 = _407;
  }
  float _419 = _414 * 0.9708889722824097f;
  float _420 = mad(0.026962999254465103f, _415, _419);
  float _421 = mad(0.002148000057786703f, _416, _420);
  float _422 = _414 * 0.01088900025933981f;
  float _423 = mad(0.9869629740715027f, _415, _422);
  float _424 = mad(0.002148000057786703f, _416, _423);
  float _425 = mad(0.026962999254465103f, _415, _422);
  float _426 = mad(0.9621480107307434f, _416, _425);
  float _427 = max(_421, 0.0f);
  float _428 = max(_424, 0.0f);
  float _429 = max(_426, 0.0f);
  float _430 = min(_427, cb2_095y);
  float _431 = min(_428, cb2_095y);
  float _432 = min(_429, cb2_095y);
  bool _435 = ((uint)(cb2_095x) == 0);
  bool _438 = ((uint)(cb2_094w) == 0);
  bool _440 = ((uint)(cb2_094z) == 0);
  bool _442 = ((uint)(cb2_094y) != 0);
  bool _444 = ((uint)(cb2_094x) == 0);
  bool _446 = ((uint)(cb2_069z) != 0);
  float _493 = asfloat((uint)(cb2_075y));
  float _494 = asfloat((uint)(cb2_075z));
  float _495 = asfloat((uint)(cb2_075w));
  float _496 = asfloat((uint)(cb2_074z));
  float _497 = asfloat((uint)(cb2_074w));
  float _498 = asfloat((uint)(cb2_075x));
  float _499 = asfloat((uint)(cb2_073w));
  float _500 = asfloat((uint)(cb2_074x));
  float _501 = asfloat((uint)(cb2_074y));
  float _502 = asfloat((uint)(cb2_077x));
  float _503 = asfloat((uint)(cb2_077y));
  float _504 = asfloat((uint)(cb2_079x));
  float _505 = asfloat((uint)(cb2_079y));
  float _506 = asfloat((uint)(cb2_079z));
  float _507 = asfloat((uint)(cb2_078y));
  float _508 = asfloat((uint)(cb2_078z));
  float _509 = asfloat((uint)(cb2_078w));
  float _510 = asfloat((uint)(cb2_077z));
  float _511 = asfloat((uint)(cb2_077w));
  float _512 = asfloat((uint)(cb2_078x));
  float _513 = asfloat((uint)(cb2_072y));
  float _514 = asfloat((uint)(cb2_072z));
  float _515 = asfloat((uint)(cb2_072w));
  float _516 = asfloat((uint)(cb2_071x));
  float _517 = asfloat((uint)(cb2_071y));
  float _518 = asfloat((uint)(cb2_076x));
  float _519 = asfloat((uint)(cb2_070w));
  float _520 = asfloat((uint)(cb2_070x));
  float _521 = asfloat((uint)(cb2_070y));
  float _522 = asfloat((uint)(cb2_070z));
  float _523 = asfloat((uint)(cb2_073x));
  float _524 = asfloat((uint)(cb2_073y));
  float _525 = asfloat((uint)(cb2_073z));
  float _526 = asfloat((uint)(cb2_071z));
  float _527 = asfloat((uint)(cb2_071w));
  float _528 = asfloat((uint)(cb2_072x));
  float _529 = max(_431, _432);
  float _530 = max(_430, _529);
  float _531 = 1.0f / _530;
  float _532 = _531 * _430;
  float _533 = _531 * _431;
  float _534 = _531 * _432;
  float _535 = abs(_532);
  float _536 = log2(_535);
  float _537 = _536 * _520;
  float _538 = exp2(_537);
  float _539 = abs(_533);
  float _540 = log2(_539);
  float _541 = _540 * _521;
  float _542 = exp2(_541);
  float _543 = abs(_534);
  float _544 = log2(_543);
  float _545 = _544 * _522;
  float _546 = exp2(_545);
  if (_442) {
    float _549 = asfloat((uint)(cb2_076w));
    float _551 = asfloat((uint)(cb2_076z));
    float _553 = asfloat((uint)(cb2_076y));
    float _554 = _551 * _431;
    float _555 = _553 * _430;
    float _556 = _549 * _432;
    float _557 = _555 + _556;
    float _558 = _557 + _554;
    _566 = _558;
  } else {
    float _560 = _527 * _431;
    float _561 = _526 * _430;
    float _562 = _528 * _432;
    float _563 = _560 + _561;
    float _564 = _563 + _562;
    _566 = _564;
  }
  float _567 = abs(_566);
  float _568 = log2(_567);
  float _569 = _568 * _519;
  float _570 = exp2(_569);
  float _571 = log2(_570);
  float _572 = _571 * _518;
  float _573 = exp2(_572);
  float _574 = select(_446, _573, _570);
  float _575 = _574 * _516;
  float _576 = _575 + _517;
  float _577 = 1.0f / _576;
  float _578 = _577 * _570;
  if (_442) {
    if (!_444) {
      float _581 = _538 * _510;
      float _582 = _542 * _511;
      float _583 = _546 * _512;
      float _584 = _582 + _581;
      float _585 = _584 + _583;
      float _586 = _542 * _508;
      float _587 = _538 * _507;
      float _588 = _546 * _509;
      float _589 = _586 + _587;
      float _590 = _589 + _588;
      float _591 = _546 * _506;
      float _592 = _542 * _505;
      float _593 = _538 * _504;
      float _594 = _592 + _593;
      float _595 = _594 + _591;
      float _596 = max(_590, _595);
      float _597 = max(_585, _596);
      float _598 = 1.0f / _597;
      float _599 = _598 * _585;
      float _600 = _598 * _590;
      float _601 = _598 * _595;
      _603 = _599;
      _604 = _600;
      _605 = _601;
    } else {
      _603 = _538;
      _604 = _542;
      _605 = _546;
    }
    float _606 = _603 * _503;
    float _607 = exp2(_606);
    float _608 = _607 * _502;
    float _609 = saturate(_608);
    float _610 = _603 * _502;
    float _611 = _603 - _610;
    float _612 = saturate(_611);
    float _613 = max(_502, _612);
    float _614 = min(_613, _609);
    float _615 = _604 * _503;
    float _616 = exp2(_615);
    float _617 = _616 * _502;
    float _618 = saturate(_617);
    float _619 = _604 * _502;
    float _620 = _604 - _619;
    float _621 = saturate(_620);
    float _622 = max(_502, _621);
    float _623 = min(_622, _618);
    float _624 = _605 * _503;
    float _625 = exp2(_624);
    float _626 = _625 * _502;
    float _627 = saturate(_626);
    float _628 = _605 * _502;
    float _629 = _605 - _628;
    float _630 = saturate(_629);
    float _631 = max(_502, _630);
    float _632 = min(_631, _627);
    _634 = _614;
    _635 = _623;
    _636 = _632;
  } else {
    _634 = _538;
    _635 = _542;
    _636 = _546;
  }
  float _637 = _634 * _526;
  float _638 = _635 * _527;
  float _639 = _638 + _637;
  float _640 = _636 * _528;
  float _641 = _639 + _640;
  float _642 = 1.0f / _641;
  float _643 = _642 * _578;
  float _644 = saturate(_643);
  float _645 = _644 * _634;
  float _646 = saturate(_645);
  float _647 = _644 * _635;
  float _648 = saturate(_647);
  float _649 = _644 * _636;
  float _650 = saturate(_649);
  float _651 = _646 * _513;
  float _652 = _513 - _651;
  float _653 = _648 * _514;
  float _654 = _514 - _653;
  float _655 = _650 * _515;
  float _656 = _515 - _655;
  float _657 = _650 * _528;
  float _658 = _646 * _526;
  float _659 = _648 * _527;
  float _660 = _578 - _658;
  float _661 = _660 - _659;
  float _662 = _661 - _657;
  float _663 = saturate(_662);
  float _664 = _654 * _527;
  float _665 = _652 * _526;
  float _666 = _656 * _528;
  float _667 = _664 + _665;
  float _668 = _667 + _666;
  float _669 = 1.0f / _668;
  float _670 = _669 * _663;
  float _671 = _670 * _652;
  float _672 = _671 + _646;
  float _673 = saturate(_672);
  float _674 = _670 * _654;
  float _675 = _674 + _648;
  float _676 = saturate(_675);
  float _677 = _670 * _656;
  float _678 = _677 + _650;
  float _679 = saturate(_678);
  float _680 = _679 * _528;
  float _681 = _673 * _526;
  float _682 = _676 * _527;
  float _683 = _578 - _681;
  float _684 = _683 - _682;
  float _685 = _684 - _680;
  float _686 = saturate(_685);
  float _687 = _686 * _523;
  float _688 = _687 + _673;
  float _689 = saturate(_688);
  float _690 = _686 * _524;
  float _691 = _690 + _676;
  float _692 = saturate(_691);
  float _693 = _686 * _525;
  float _694 = _693 + _679;
  float _695 = saturate(_694);
  if (!_440) {
    float _697 = _689 * _499;
    float _698 = _692 * _500;
    float _699 = _695 * _501;
    float _700 = _698 + _697;
    float _701 = _700 + _699;
    float _702 = _692 * _497;
    float _703 = _689 * _496;
    float _704 = _695 * _498;
    float _705 = _702 + _703;
    float _706 = _705 + _704;
    float _707 = _695 * _495;
    float _708 = _692 * _494;
    float _709 = _689 * _493;
    float _710 = _708 + _709;
    float _711 = _710 + _707;
    if (!_438) {
      float _713 = saturate(_701);
      float _714 = saturate(_706);
      float _715 = saturate(_711);
      _717 = _715;
      _718 = _714;
      _719 = _713;
    } else {
      _717 = _711;
      _718 = _706;
      _719 = _701;
    }
  } else {
    _717 = _695;
    _718 = _692;
    _719 = _689;
  }
  if (!_435) {
    float _721 = _719 * _499;
    float _722 = _718 * _499;
    float _723 = _717 * _499;
    _725 = _723;
    _726 = _722;
    _727 = _721;
  } else {
    _725 = _717;
    _726 = _718;
    _727 = _719;
  }
  if (_353) {
    float _731 = cb1_018z * 9.999999747378752e-05f;
    float _732 = _731 * _727;
    float _733 = _731 * _726;
    float _734 = _731 * _725;
    float _736 = 5000.0f / cb1_018y;
    float _737 = _732 * _736;
    float _738 = _733 * _736;
    float _739 = _734 * _736;
    _741 = _737;
    _742 = _738;
    _743 = _739;
  } else {
    _741 = _727;
    _742 = _726;
    _743 = _725;
  }
  float _744 = _741 * 1.6047500371932983f;
  float _745 = mad(-0.5310800075531006f, _742, _744);
  float _746 = mad(-0.07366999983787537f, _743, _745);
  float _747 = _741 * -0.10208000242710114f;
  float _748 = mad(1.1081299781799316f, _742, _747);
  float _749 = mad(-0.006049999967217445f, _743, _748);
  float _750 = _741 * -0.0032599999103695154f;
  float _751 = mad(-0.07275000214576721f, _742, _750);
  float _752 = mad(1.0760200023651123f, _743, _751);
  if (_353) {
    // float _754 = max(_746, 0.0f);
    // float _755 = max(_749, 0.0f);
    // float _756 = max(_752, 0.0f);
    // bool _757 = !(_754 >= 0.0030399328097701073f);
    // if (!_757) {
    //   float _759 = abs(_754);
    //   float _760 = log2(_759);
    //   float _761 = _760 * 0.4166666567325592f;
    //   float _762 = exp2(_761);
    //   float _763 = _762 * 1.0549999475479126f;
    //   float _764 = _763 + -0.054999999701976776f;
    //   _768 = _764;
    // } else {
    //   float _766 = _754 * 12.923210144042969f;
    //   _768 = _766;
    // }
    // bool _769 = !(_755 >= 0.0030399328097701073f);
    // if (!_769) {
    //   float _771 = abs(_755);
    //   float _772 = log2(_771);
    //   float _773 = _772 * 0.4166666567325592f;
    //   float _774 = exp2(_773);
    //   float _775 = _774 * 1.0549999475479126f;
    //   float _776 = _775 + -0.054999999701976776f;
    //   _780 = _776;
    // } else {
    //   float _778 = _755 * 12.923210144042969f;
    //   _780 = _778;
    // }
    // bool _781 = !(_756 >= 0.0030399328097701073f);
    // if (!_781) {
    //   float _783 = abs(_756);
    //   float _784 = log2(_783);
    //   float _785 = _784 * 0.4166666567325592f;
    //   float _786 = exp2(_785);
    //   float _787 = _786 * 1.0549999475479126f;
    //   float _788 = _787 + -0.054999999701976776f;
    //   _861 = _768;
    //   _862 = _780;
    //   _863 = _788;
    // } else {
    //   float _790 = _756 * 12.923210144042969f;
    //   _861 = _768;
    //   _862 = _780;
    //   _863 = _790;
    // }
    _861 = renodx::color::srgb::EncodeSafe(_746);
    _862 = renodx::color::srgb::EncodeSafe(_749);
    _863 = renodx::color::srgb::EncodeSafe(_752);

  } else {
    float _792 = saturate(_746);
    float _793 = saturate(_749);
    float _794 = saturate(_752);
    bool _795 = ((uint)(cb1_018w) == -2);
    if (!_795) {
      bool _797 = !(_792 >= 0.0030399328097701073f);
      if (!_797) {
        float _799 = abs(_792);
        float _800 = log2(_799);
        float _801 = _800 * 0.4166666567325592f;
        float _802 = exp2(_801);
        float _803 = _802 * 1.0549999475479126f;
        float _804 = _803 + -0.054999999701976776f;
        _808 = _804;
      } else {
        float _806 = _792 * 12.923210144042969f;
        _808 = _806;
      }
      bool _809 = !(_793 >= 0.0030399328097701073f);
      if (!_809) {
        float _811 = abs(_793);
        float _812 = log2(_811);
        float _813 = _812 * 0.4166666567325592f;
        float _814 = exp2(_813);
        float _815 = _814 * 1.0549999475479126f;
        float _816 = _815 + -0.054999999701976776f;
        _820 = _816;
      } else {
        float _818 = _793 * 12.923210144042969f;
        _820 = _818;
      }
      bool _821 = !(_794 >= 0.0030399328097701073f);
      if (!_821) {
        float _823 = abs(_794);
        float _824 = log2(_823);
        float _825 = _824 * 0.4166666567325592f;
        float _826 = exp2(_825);
        float _827 = _826 * 1.0549999475479126f;
        float _828 = _827 + -0.054999999701976776f;
        _832 = _808;
        _833 = _820;
        _834 = _828;
      } else {
        float _830 = _794 * 12.923210144042969f;
        _832 = _808;
        _833 = _820;
        _834 = _830;
      }
    } else {
      _832 = _792;
      _833 = _793;
      _834 = _794;
    }
    float _839 = abs(_832);
    float _840 = abs(_833);
    float _841 = abs(_834);
    float _842 = log2(_839);
    float _843 = log2(_840);
    float _844 = log2(_841);
    float _845 = _842 * cb2_000z;
    float _846 = _843 * cb2_000z;
    float _847 = _844 * cb2_000z;
    float _848 = exp2(_845);
    float _849 = exp2(_846);
    float _850 = exp2(_847);
    float _851 = _848 * cb2_000y;
    float _852 = _849 * cb2_000y;
    float _853 = _850 * cb2_000y;
    float _854 = _851 + cb2_000x;
    float _855 = _852 + cb2_000x;
    float _856 = _853 + cb2_000x;
    float _857 = saturate(_854);
    float _858 = saturate(_855);
    float _859 = saturate(_856);
    _861 = _857;
    _862 = _858;
    _863 = _859;
  }
  float _864 = dot(float3(_861, _862, _863), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _861;
  SV_Target.y = _862;
  SV_Target.z = _863;
  SV_Target.w = _864;
  SV_Target_1.x = _864;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
