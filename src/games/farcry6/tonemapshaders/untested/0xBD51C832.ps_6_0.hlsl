#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

Texture3D<float2> t11 : register(t11);

Texture2D<float4> t12 : register(t12);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _27 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _29 = t9.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _33 = _29.x * 6.283199787139893f;
  float _34 = cos(_33);
  float _35 = sin(_33);
  float _36 = _34 * _29.z;
  float _37 = _35 * _29.z;
  float _38 = _36 + TEXCOORD0_centroid.x;
  float _39 = _37 + TEXCOORD0_centroid.y;
  float _40 = _38 * 10.0f;
  float _41 = 10.0f - _40;
  float _42 = min(_40, _41);
  float _43 = saturate(_42);
  float _44 = _43 * _36;
  float _45 = _39 * 10.0f;
  float _46 = 10.0f - _45;
  float _47 = min(_45, _46);
  float _48 = saturate(_47);
  float _49 = _48 * _37;
  float _50 = _44 + TEXCOORD0_centroid.x;
  float _51 = _49 + TEXCOORD0_centroid.y;
  float4 _52 = t9.SampleLevel(s2_space2, float2(_50, _51), 0.0f);
  float _54 = _52.w * _44;
  float _55 = _52.w * _49;
  float _56 = 1.0f - _29.y;
  float _57 = saturate(_56);
  float _58 = _54 * _57;
  float _59 = _55 * _57;
  float _63 = cb2_015x * TEXCOORD0_centroid.x;
  float _64 = cb2_015y * TEXCOORD0_centroid.y;
  float _67 = _63 + cb2_015z;
  float _68 = _64 + cb2_015w;
  float4 _69 = t10.SampleLevel(s0_space2, float2(_67, _68), 0.0f);
  float _73 = saturate(_69.x);
  float _74 = saturate(_69.z);
  float _77 = cb2_026x * _74;
  float _78 = _73 * 6.283199787139893f;
  float _79 = cos(_78);
  float _80 = sin(_78);
  float _81 = _77 * _79;
  float _82 = _80 * _77;
  float _83 = 1.0f - _69.y;
  float _84 = saturate(_83);
  float _85 = _81 * _84;
  float _86 = _82 * _84;
  float _87 = _58 + TEXCOORD0_centroid.x;
  float _88 = _87 + _85;
  float _89 = _59 + TEXCOORD0_centroid.y;
  float _90 = _89 + _86;
  float4 _91 = t9.SampleLevel(s2_space2, float2(_88, _90), 0.0f);
  bool _93 = (_91.y > 0.0f);
  float _94 = select(_93, TEXCOORD0_centroid.x, _88);
  float _95 = select(_93, TEXCOORD0_centroid.y, _90);
  float4 _96 = t1.SampleLevel(s4_space2, float2(_94, _95), 0.0f);
  float _100 = max(_96.x, 0.0f);
  float _101 = max(_96.y, 0.0f);
  float _102 = max(_96.z, 0.0f);
  float _103 = min(_100, 65000.0f);
  float _104 = min(_101, 65000.0f);
  float _105 = min(_102, 65000.0f);
  float4 _106 = t4.SampleLevel(s2_space2, float2(_94, _95), 0.0f);
  float _111 = max(_106.x, 0.0f);
  float _112 = max(_106.y, 0.0f);
  float _113 = max(_106.z, 0.0f);
  float _114 = max(_106.w, 0.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _117 = min(_113, 5000.0f);
  float _118 = min(_114, 5000.0f);
  float _121 = _27.x * cb0_028z;
  float _122 = _121 + cb0_028x;
  float _123 = cb2_027w / _122;
  float _124 = 1.0f - _123;
  float _125 = abs(_124);
  float _127 = cb2_027y * _125;
  float _129 = _127 - cb2_027z;
  float _130 = saturate(_129);
  float _131 = max(_130, _118);
  float _132 = saturate(_131);
  float _136 = cb2_006x * _94;
  float _137 = cb2_006y * _95;
  float _140 = _136 + cb2_006z;
  float _141 = _137 + cb2_006w;
  float _145 = cb2_007x * _94;
  float _146 = cb2_007y * _95;
  float _149 = _145 + cb2_007z;
  float _150 = _146 + cb2_007w;
  float _154 = cb2_008x * _94;
  float _155 = cb2_008y * _95;
  float _158 = _154 + cb2_008z;
  float _159 = _155 + cb2_008w;
  float4 _160 = t1.SampleLevel(s2_space2, float2(_140, _141), 0.0f);
  float _162 = max(_160.x, 0.0f);
  float _163 = min(_162, 65000.0f);
  float4 _164 = t1.SampleLevel(s2_space2, float2(_149, _150), 0.0f);
  float _166 = max(_164.y, 0.0f);
  float _167 = min(_166, 65000.0f);
  float4 _168 = t1.SampleLevel(s2_space2, float2(_158, _159), 0.0f);
  float _170 = max(_168.z, 0.0f);
  float _171 = min(_170, 65000.0f);
  float4 _172 = t4.SampleLevel(s2_space2, float2(_140, _141), 0.0f);
  float _174 = max(_172.x, 0.0f);
  float _175 = min(_174, 5000.0f);
  float4 _176 = t4.SampleLevel(s2_space2, float2(_149, _150), 0.0f);
  float _178 = max(_176.y, 0.0f);
  float _179 = min(_178, 5000.0f);
  float4 _180 = t4.SampleLevel(s2_space2, float2(_158, _159), 0.0f);
  float _182 = max(_180.z, 0.0f);
  float _183 = min(_182, 5000.0f);
  float4 _184 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _190 = cb2_005x * _184.x;
  float _191 = cb2_005x * _184.y;
  float _192 = cb2_005x * _184.z;
  float _193 = _163 - _103;
  float _194 = _167 - _104;
  float _195 = _171 - _105;
  float _196 = _190 * _193;
  float _197 = _191 * _194;
  float _198 = _192 * _195;
  float _199 = _196 + _103;
  float _200 = _197 + _104;
  float _201 = _198 + _105;
  float _202 = _175 - _115;
  float _203 = _179 - _116;
  float _204 = _183 - _117;
  float _205 = _190 * _202;
  float _206 = _191 * _203;
  float _207 = _192 * _204;
  float _208 = _205 + _115;
  float _209 = _206 + _116;
  float _210 = _207 + _117;
  float4 _211 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _215 = _208 - _199;
  float _216 = _209 - _200;
  float _217 = _210 - _201;
  float _218 = _215 * _132;
  float _219 = _216 * _132;
  float _220 = _217 * _132;
  float _221 = _218 + _199;
  float _222 = _219 + _200;
  float _223 = _220 + _201;
  float _224 = dot(float3(_221, _222, _223), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _228 = t0[0].SExposureData_020;
  float _230 = t0[0].SExposureData_004;
  float _232 = cb2_018x * 0.5f;
  float _233 = _232 * cb2_018y;
  float _234 = _230.x - _233;
  float _235 = cb2_018y * cb2_018x;
  float _236 = 1.0f / _235;
  float _237 = _234 * _236;
  float _238 = _224 / _228.x;
  float _239 = _238 * 5464.01611328125f;
  float _240 = _239 + 9.99999993922529e-09f;
  float _241 = log2(_240);
  float _242 = _241 - _234;
  float _243 = _242 * _236;
  float _244 = saturate(_243);
  float2 _245 = t11.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _244), 0.0f);
  float _248 = max(_245.y, 1.0000000116860974e-07f);
  float _249 = _245.x / _248;
  float _250 = _249 + _237;
  float _251 = _250 / _236;
  float _252 = _251 - _230.x;
  float _253 = -0.0f - _252;
  float _255 = _253 - cb2_027x;
  float _256 = max(0.0f, _255);
  float _258 = cb2_026z * _256;
  float _259 = _252 - cb2_027x;
  float _260 = max(0.0f, _259);
  float _262 = cb2_026w * _260;
  bool _263 = (_252 < 0.0f);
  float _264 = select(_263, _258, _262);
  float _265 = exp2(_264);
  float _266 = _265 * _221;
  float _267 = _265 * _222;
  float _268 = _265 * _223;
  float _273 = cb2_024y * _211.x;
  float _274 = cb2_024z * _211.y;
  float _275 = cb2_024w * _211.z;
  float _276 = _273 + _266;
  float _277 = _274 + _267;
  float _278 = _275 + _268;
  float _283 = _276 * cb2_025x;
  float _284 = _277 * cb2_025y;
  float _285 = _278 * cb2_025z;
  float _286 = dot(float3(_283, _284, _285), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _287 = t0[0].SExposureData_012;
  float _289 = _286 * 5464.01611328125f;
  float _290 = _289 * _287.x;
  float _291 = _290 + 9.99999993922529e-09f;
  float _292 = log2(_291);
  float _293 = _292 + 16.929765701293945f;
  float _294 = _293 * 0.05734497308731079f;
  float _295 = saturate(_294);
  float _296 = _295 * _295;
  float _297 = _295 * 2.0f;
  float _298 = 3.0f - _297;
  float _299 = _296 * _298;
  float _300 = _284 * 0.8450999855995178f;
  float _301 = _285 * 0.14589999616146088f;
  float _302 = _300 + _301;
  float _303 = _302 * 2.4890189170837402f;
  float _304 = _302 * 0.3754962384700775f;
  float _305 = _302 * 2.811495304107666f;
  float _306 = _302 * 5.519708156585693f;
  float _307 = _286 - _303;
  float _308 = _299 * _307;
  float _309 = _308 + _303;
  float _310 = _299 * 0.5f;
  float _311 = _310 + 0.5f;
  float _312 = _311 * _307;
  float _313 = _312 + _303;
  float _314 = _283 - _304;
  float _315 = _284 - _305;
  float _316 = _285 - _306;
  float _317 = _311 * _314;
  float _318 = _311 * _315;
  float _319 = _311 * _316;
  float _320 = _317 + _304;
  float _321 = _318 + _305;
  float _322 = _319 + _306;
  float _323 = 1.0f / _313;
  float _324 = _309 * _323;
  float _325 = _324 * _320;
  float _326 = _324 * _321;
  float _327 = _324 * _322;
  float _331 = cb2_020x * TEXCOORD0_centroid.x;
  float _332 = cb2_020y * TEXCOORD0_centroid.y;
  float _335 = _331 + cb2_020z;
  float _336 = _332 + cb2_020w;
  float _339 = dot(float2(_335, _336), float2(_335, _336));
  float _340 = 1.0f - _339;
  float _341 = saturate(_340);
  float _342 = log2(_341);
  float _343 = _342 * cb2_021w;
  float _344 = exp2(_343);
  float _348 = _325 - cb2_021x;
  float _349 = _326 - cb2_021y;
  float _350 = _327 - cb2_021z;
  float _351 = _348 * _344;
  float _352 = _349 * _344;
  float _353 = _350 * _344;
  float _354 = _351 + cb2_021x;
  float _355 = _352 + cb2_021y;
  float _356 = _353 + cb2_021z;
  float _357 = t0[0].SExposureData_000;
  float _359 = max(_228.x, 0.0010000000474974513f);
  float _360 = 1.0f / _359;
  float _361 = _360 * _357.x;
  bool _364 = ((uint)(cb2_069y) == 0);
  float _370;
  float _371;
  float _372;
  float _426;
  float _427;
  float _428;
  float _519;
  float _520;
  float _521;
  float _566;
  float _567;
  float _568;
  float _569;
  float _618;
  float _619;
  float _620;
  float _621;
  float _646;
  float _647;
  float _648;
  float _749;
  float _750;
  float _751;
  float _776;
  float _788;
  float _816;
  float _828;
  float _840;
  float _841;
  float _842;
  float _869;
  float _870;
  float _871;
  if (!_364) {
    float _366 = _361 * _354;
    float _367 = _361 * _355;
    float _368 = _361 * _356;
    _370 = _366;
    _371 = _367;
    _372 = _368;
  } else {
    _370 = _354;
    _371 = _355;
    _372 = _356;
  }
  float _373 = _370 * 0.6130970120429993f;
  float _374 = mad(0.33952298760414124f, _371, _373);
  float _375 = mad(0.04737899824976921f, _372, _374);
  float _376 = _370 * 0.07019399851560593f;
  float _377 = mad(0.9163540005683899f, _371, _376);
  float _378 = mad(0.013451999984681606f, _372, _377);
  float _379 = _370 * 0.02061600051820278f;
  float _380 = mad(0.10956999659538269f, _371, _379);
  float _381 = mad(0.8698149919509888f, _372, _380);
  float _382 = log2(_375);
  float _383 = log2(_378);
  float _384 = log2(_381);
  float _385 = _382 * 0.04211956635117531f;
  float _386 = _383 * 0.04211956635117531f;
  float _387 = _384 * 0.04211956635117531f;
  float _388 = _385 + 0.6252607107162476f;
  float _389 = _386 + 0.6252607107162476f;
  float _390 = _387 + 0.6252607107162476f;
  float4 _391 = t6.SampleLevel(s2_space2, float3(_388, _389, _390), 0.0f);
  bool _397 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_397 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _401 = cb2_017x * _391.x;
    float _402 = cb2_017x * _391.y;
    float _403 = cb2_017x * _391.z;
    float _405 = _401 + cb2_017y;
    float _406 = _402 + cb2_017y;
    float _407 = _403 + cb2_017y;
    float _408 = exp2(_405);
    float _409 = exp2(_406);
    float _410 = exp2(_407);
    float _411 = _408 + 1.0f;
    float _412 = _409 + 1.0f;
    float _413 = _410 + 1.0f;
    float _414 = 1.0f / _411;
    float _415 = 1.0f / _412;
    float _416 = 1.0f / _413;
    float _418 = cb2_017z * _414;
    float _419 = cb2_017z * _415;
    float _420 = cb2_017z * _416;
    float _422 = _418 + cb2_017w;
    float _423 = _419 + cb2_017w;
    float _424 = _420 + cb2_017w;
    _426 = _422;
    _427 = _423;
    _428 = _424;
  } else {
    _426 = _391.x;
    _427 = _391.y;
    _428 = _391.z;
  }
  float _429 = _426 * 23.0f;
  float _430 = _429 + -14.473931312561035f;
  float _431 = exp2(_430);
  float _432 = _427 * 23.0f;
  float _433 = _432 + -14.473931312561035f;
  float _434 = exp2(_433);
  float _435 = _428 * 23.0f;
  float _436 = _435 + -14.473931312561035f;
  float _437 = exp2(_436);
  float _438 = dot(float3(_431, _434, _437), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _443 = dot(float3(_431, _434, _437), float3(_431, _434, _437));
  float _444 = rsqrt(_443);
  float _445 = _444 * _431;
  float _446 = _444 * _434;
  float _447 = _444 * _437;
  float _448 = cb2_001x - _445;
  float _449 = cb2_001y - _446;
  float _450 = cb2_001z - _447;
  float _451 = dot(float3(_448, _449, _450), float3(_448, _449, _450));
  float _454 = cb2_002z * _451;
  float _456 = _454 + cb2_002w;
  float _457 = saturate(_456);
  float _459 = cb2_002x * _457;
  float _460 = _438 - _431;
  float _461 = _438 - _434;
  float _462 = _438 - _437;
  float _463 = _459 * _460;
  float _464 = _459 * _461;
  float _465 = _459 * _462;
  float _466 = _463 + _431;
  float _467 = _464 + _434;
  float _468 = _465 + _437;
  float _470 = cb2_002y * _457;
  float _471 = 0.10000000149011612f - _466;
  float _472 = 0.10000000149011612f - _467;
  float _473 = 0.10000000149011612f - _468;
  float _474 = _471 * _470;
  float _475 = _472 * _470;
  float _476 = _473 * _470;
  float _477 = _474 + _466;
  float _478 = _475 + _467;
  float _479 = _476 + _468;
  float _480 = saturate(_477);
  float _481 = saturate(_478);
  float _482 = saturate(_479);
  float _487 = cb2_004x * TEXCOORD0_centroid.x;
  float _488 = cb2_004y * TEXCOORD0_centroid.y;
  float _491 = _487 + cb2_004z;
  float _492 = _488 + cb2_004w;
  float4 _498 = t8.Sample(s2_space2, float2(_491, _492));
  float _503 = _498.x * cb2_003x;
  float _504 = _498.y * cb2_003y;
  float _505 = _498.z * cb2_003z;
  float _506 = _498.w * cb2_003w;
  float _509 = _506 + cb2_026y;
  float _510 = saturate(_509);
  bool _513 = ((uint)(cb2_069y) == 0);
  if (!_513) {
    float _515 = _503 * _361;
    float _516 = _504 * _361;
    float _517 = _505 * _361;
    _519 = _515;
    _520 = _516;
    _521 = _517;
  } else {
    _519 = _503;
    _520 = _504;
    _521 = _505;
  }
  bool _524 = ((uint)(cb2_028x) == 2);
  bool _525 = ((uint)(cb2_028x) == 3);
  int _526 = (uint)(cb2_028x) & -2;
  bool _527 = (_526 == 2);
  bool _528 = ((uint)(cb2_028x) == 6);
  bool _529 = _527 || _528;
  if (_529) {
    float _531 = _519 * _510;
    float _532 = _520 * _510;
    float _533 = _521 * _510;
    float _534 = _510 * _510;
    _566 = _531;
    _567 = _532;
    _568 = _533;
    _569 = _534;
  } else {
    bool _536 = ((uint)(cb2_028x) == 4);
    if (_536) {
      float _538 = _519 + -1.0f;
      float _539 = _520 + -1.0f;
      float _540 = _521 + -1.0f;
      float _541 = _510 + -1.0f;
      float _542 = _538 * _510;
      float _543 = _539 * _510;
      float _544 = _540 * _510;
      float _545 = _541 * _510;
      float _546 = _542 + 1.0f;
      float _547 = _543 + 1.0f;
      float _548 = _544 + 1.0f;
      float _549 = _545 + 1.0f;
      _566 = _546;
      _567 = _547;
      _568 = _548;
      _569 = _549;
    } else {
      bool _551 = ((uint)(cb2_028x) == 5);
      if (_551) {
        float _553 = _519 + -0.5f;
        float _554 = _520 + -0.5f;
        float _555 = _521 + -0.5f;
        float _556 = _510 + -0.5f;
        float _557 = _553 * _510;
        float _558 = _554 * _510;
        float _559 = _555 * _510;
        float _560 = _556 * _510;
        float _561 = _557 + 0.5f;
        float _562 = _558 + 0.5f;
        float _563 = _559 + 0.5f;
        float _564 = _560 + 0.5f;
        _566 = _561;
        _567 = _562;
        _568 = _563;
        _569 = _564;
      } else {
        _566 = _519;
        _567 = _520;
        _568 = _521;
        _569 = _510;
      }
    }
  }
  if (_524) {
    float _571 = _566 + _480;
    float _572 = _567 + _481;
    float _573 = _568 + _482;
    _618 = _571;
    _619 = _572;
    _620 = _573;
    _621 = cb2_025w;
  } else {
    if (_525) {
      float _576 = 1.0f - _566;
      float _577 = 1.0f - _567;
      float _578 = 1.0f - _568;
      float _579 = _576 * _480;
      float _580 = _577 * _481;
      float _581 = _578 * _482;
      float _582 = _579 + _566;
      float _583 = _580 + _567;
      float _584 = _581 + _568;
      _618 = _582;
      _619 = _583;
      _620 = _584;
      _621 = cb2_025w;
    } else {
      bool _586 = ((uint)(cb2_028x) == 4);
      if (_586) {
        float _588 = _566 * _480;
        float _589 = _567 * _481;
        float _590 = _568 * _482;
        _618 = _588;
        _619 = _589;
        _620 = _590;
        _621 = cb2_025w;
      } else {
        bool _592 = ((uint)(cb2_028x) == 5);
        if (_592) {
          float _594 = _480 * 2.0f;
          float _595 = _594 * _566;
          float _596 = _481 * 2.0f;
          float _597 = _596 * _567;
          float _598 = _482 * 2.0f;
          float _599 = _598 * _568;
          _618 = _595;
          _619 = _597;
          _620 = _599;
          _621 = cb2_025w;
        } else {
          if (_528) {
            float _602 = _480 - _566;
            float _603 = _481 - _567;
            float _604 = _482 - _568;
            _618 = _602;
            _619 = _603;
            _620 = _604;
            _621 = cb2_025w;
          } else {
            float _606 = _566 - _480;
            float _607 = _567 - _481;
            float _608 = _568 - _482;
            float _609 = _569 * _606;
            float _610 = _569 * _607;
            float _611 = _569 * _608;
            float _612 = _609 + _480;
            float _613 = _610 + _481;
            float _614 = _611 + _482;
            float _615 = 1.0f - _569;
            float _616 = _615 * cb2_025w;
            _618 = _612;
            _619 = _613;
            _620 = _614;
            _621 = _616;
          }
        }
      }
    }
  }
  float _627 = cb2_016x - _618;
  float _628 = cb2_016y - _619;
  float _629 = cb2_016z - _620;
  float _630 = _627 * cb2_016w;
  float _631 = _628 * cb2_016w;
  float _632 = _629 * cb2_016w;
  float _633 = _630 + _618;
  float _634 = _631 + _619;
  float _635 = _632 + _620;
  bool _638 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_638 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _642 = cb2_024x * _633;
    float _643 = cb2_024x * _634;
    float _644 = cb2_024x * _635;
    _646 = _642;
    _647 = _643;
    _648 = _644;
  } else {
    _646 = _633;
    _647 = _634;
    _648 = _635;
  }
  float _649 = _646 * 0.9708889722824097f;
  float _650 = mad(0.026962999254465103f, _647, _649);
  float _651 = mad(0.002148000057786703f, _648, _650);
  float _652 = _646 * 0.01088900025933981f;
  float _653 = mad(0.9869629740715027f, _647, _652);
  float _654 = mad(0.002148000057786703f, _648, _653);
  float _655 = mad(0.026962999254465103f, _647, _652);
  float _656 = mad(0.9621480107307434f, _648, _655);
  if (_638) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _661 = cb1_018y * 0.10000000149011612f;
        float _662 = log2(cb1_018z);
        float _663 = _662 + -13.287712097167969f;
        float _664 = _663 * 1.4929734468460083f;
        float _665 = _664 + 18.0f;
        float _666 = exp2(_665);
        float _667 = _666 * 0.18000000715255737f;
        float _668 = abs(_667);
        float _669 = log2(_668);
        float _670 = _669 * 1.5f;
        float _671 = exp2(_670);
        float _672 = _671 * _661;
        float _673 = _672 / cb1_018z;
        float _674 = _673 + -0.07636754959821701f;
        float _675 = _669 * 1.2750000953674316f;
        float _676 = exp2(_675);
        float _677 = _676 * 0.07636754959821701f;
        float _678 = cb1_018y * 0.011232397519052029f;
        float _679 = _678 * _671;
        float _680 = _679 / cb1_018z;
        float _681 = _677 - _680;
        float _682 = _676 + -0.11232396960258484f;
        float _683 = _682 * _661;
        float _684 = _683 / cb1_018z;
        float _685 = _684 * cb1_018z;
        float _686 = abs(_651);
        float _687 = abs(_654);
        float _688 = abs(_656);
        float _689 = log2(_686);
        float _690 = log2(_687);
        float _691 = log2(_688);
        float _692 = _689 * 1.5f;
        float _693 = _690 * 1.5f;
        float _694 = _691 * 1.5f;
        float _695 = exp2(_692);
        float _696 = exp2(_693);
        float _697 = exp2(_694);
        float _698 = _695 * _685;
        float _699 = _696 * _685;
        float _700 = _697 * _685;
        float _701 = _689 * 1.2750000953674316f;
        float _702 = _690 * 1.2750000953674316f;
        float _703 = _691 * 1.2750000953674316f;
        float _704 = exp2(_701);
        float _705 = exp2(_702);
        float _706 = exp2(_703);
        float _707 = _704 * _674;
        float _708 = _705 * _674;
        float _709 = _706 * _674;
        float _710 = _707 + _681;
        float _711 = _708 + _681;
        float _712 = _709 + _681;
        float _713 = _698 / _710;
        float _714 = _699 / _711;
        float _715 = _700 / _712;
        float _716 = _713 * 9.999999747378752e-05f;
        float _717 = _714 * 9.999999747378752e-05f;
        float _718 = _715 * 9.999999747378752e-05f;
        float _719 = 5000.0f / cb1_018y;
        float _720 = _716 * _719;
        float _721 = _717 * _719;
        float _722 = _718 * _719;
        _749 = _720;
        _750 = _721;
        _751 = _722;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_651, _654, _656));
      _749 = tonemapped.x, _750 = tonemapped.y, _751 = tonemapped.z;
    }
      } else {
        float _724 = _651 + 0.020616600289940834f;
        float _725 = _654 + 0.020616600289940834f;
        float _726 = _656 + 0.020616600289940834f;
        float _727 = _724 * _651;
        float _728 = _725 * _654;
        float _729 = _726 * _656;
        float _730 = _727 + -7.456949970219284e-05f;
        float _731 = _728 + -7.456949970219284e-05f;
        float _732 = _729 + -7.456949970219284e-05f;
        float _733 = _651 * 0.9837960004806519f;
        float _734 = _654 * 0.9837960004806519f;
        float _735 = _656 * 0.9837960004806519f;
        float _736 = _733 + 0.4336790144443512f;
        float _737 = _734 + 0.4336790144443512f;
        float _738 = _735 + 0.4336790144443512f;
        float _739 = _736 * _651;
        float _740 = _737 * _654;
        float _741 = _738 * _656;
        float _742 = _739 + 0.24617899954319f;
        float _743 = _740 + 0.24617899954319f;
        float _744 = _741 + 0.24617899954319f;
        float _745 = _730 / _742;
        float _746 = _731 / _743;
        float _747 = _732 / _744;
        _749 = _745;
        _750 = _746;
        _751 = _747;
      }
      float _752 = _749 * 1.6047500371932983f;
      float _753 = mad(-0.5310800075531006f, _750, _752);
      float _754 = mad(-0.07366999983787537f, _751, _753);
      float _755 = _749 * -0.10208000242710114f;
      float _756 = mad(1.1081299781799316f, _750, _755);
      float _757 = mad(-0.006049999967217445f, _751, _756);
      float _758 = _749 * -0.0032599999103695154f;
      float _759 = mad(-0.07275000214576721f, _750, _758);
      float _760 = mad(1.0760200023651123f, _751, _759);
      if (_638) {
        // float _762 = max(_754, 0.0f);
        // float _763 = max(_757, 0.0f);
        // float _764 = max(_760, 0.0f);
        // bool _765 = !(_762 >= 0.0030399328097701073f);
        // if (!_765) {
        //   float _767 = abs(_762);
        //   float _768 = log2(_767);
        //   float _769 = _768 * 0.4166666567325592f;
        //   float _770 = exp2(_769);
        //   float _771 = _770 * 1.0549999475479126f;
        //   float _772 = _771 + -0.054999999701976776f;
        //   _776 = _772;
        // } else {
        //   float _774 = _762 * 12.923210144042969f;
        //   _776 = _774;
        // }
        // bool _777 = !(_763 >= 0.0030399328097701073f);
        // if (!_777) {
        //   float _779 = abs(_763);
        //   float _780 = log2(_779);
        //   float _781 = _780 * 0.4166666567325592f;
        //   float _782 = exp2(_781);
        //   float _783 = _782 * 1.0549999475479126f;
        //   float _784 = _783 + -0.054999999701976776f;
        //   _788 = _784;
        // } else {
        //   float _786 = _763 * 12.923210144042969f;
        //   _788 = _786;
        // }
        // bool _789 = !(_764 >= 0.0030399328097701073f);
        // if (!_789) {
        //   float _791 = abs(_764);
        //   float _792 = log2(_791);
        //   float _793 = _792 * 0.4166666567325592f;
        //   float _794 = exp2(_793);
        //   float _795 = _794 * 1.0549999475479126f;
        //   float _796 = _795 + -0.054999999701976776f;
        //   _869 = _776;
        //   _870 = _788;
        //   _871 = _796;
        // } else {
        //   float _798 = _764 * 12.923210144042969f;
        //   _869 = _776;
        //   _870 = _788;
        //   _871 = _798;
        // }
        _869 = renodx::color::srgb::EncodeSafe(_754);
        _870 = renodx::color::srgb::EncodeSafe(_757);
        _871 = renodx::color::srgb::EncodeSafe(_760);

      } else {
        float _800 = saturate(_754);
        float _801 = saturate(_757);
        float _802 = saturate(_760);
        bool _803 = ((uint)(cb1_018w) == -2);
        if (!_803) {
          bool _805 = !(_800 >= 0.0030399328097701073f);
          if (!_805) {
            float _807 = abs(_800);
            float _808 = log2(_807);
            float _809 = _808 * 0.4166666567325592f;
            float _810 = exp2(_809);
            float _811 = _810 * 1.0549999475479126f;
            float _812 = _811 + -0.054999999701976776f;
            _816 = _812;
          } else {
            float _814 = _800 * 12.923210144042969f;
            _816 = _814;
          }
          bool _817 = !(_801 >= 0.0030399328097701073f);
          if (!_817) {
            float _819 = abs(_801);
            float _820 = log2(_819);
            float _821 = _820 * 0.4166666567325592f;
            float _822 = exp2(_821);
            float _823 = _822 * 1.0549999475479126f;
            float _824 = _823 + -0.054999999701976776f;
            _828 = _824;
          } else {
            float _826 = _801 * 12.923210144042969f;
            _828 = _826;
          }
          bool _829 = !(_802 >= 0.0030399328097701073f);
          if (!_829) {
            float _831 = abs(_802);
            float _832 = log2(_831);
            float _833 = _832 * 0.4166666567325592f;
            float _834 = exp2(_833);
            float _835 = _834 * 1.0549999475479126f;
            float _836 = _835 + -0.054999999701976776f;
            _840 = _816;
            _841 = _828;
            _842 = _836;
          } else {
            float _838 = _802 * 12.923210144042969f;
            _840 = _816;
            _841 = _828;
            _842 = _838;
          }
        } else {
          _840 = _800;
          _841 = _801;
          _842 = _802;
        }
        float _847 = abs(_840);
        float _848 = abs(_841);
        float _849 = abs(_842);
        float _850 = log2(_847);
        float _851 = log2(_848);
        float _852 = log2(_849);
        float _853 = _850 * cb2_000z;
        float _854 = _851 * cb2_000z;
        float _855 = _852 * cb2_000z;
        float _856 = exp2(_853);
        float _857 = exp2(_854);
        float _858 = exp2(_855);
        float _859 = _856 * cb2_000y;
        float _860 = _857 * cb2_000y;
        float _861 = _858 * cb2_000y;
        float _862 = _859 + cb2_000x;
        float _863 = _860 + cb2_000x;
        float _864 = _861 + cb2_000x;
        float _865 = saturate(_862);
        float _866 = saturate(_863);
        float _867 = saturate(_864);
        _869 = _865;
        _870 = _866;
        _871 = _867;
      }
      float _875 = cb2_023x * TEXCOORD0_centroid.x;
      float _876 = cb2_023y * TEXCOORD0_centroid.y;
      float _879 = _875 + cb2_023z;
      float _880 = _876 + cb2_023w;
      float4 _883 = t12.SampleLevel(s0_space2, float2(_879, _880), 0.0f);
      float _885 = _883.x + -0.5f;
      float _886 = _885 * cb2_022x;
      float _887 = _886 + 0.5f;
      float _888 = _887 * 2.0f;
      float _889 = _888 * _869;
      float _890 = _888 * _870;
      float _891 = _888 * _871;
      float _895 = float((uint)(cb2_019z));
      float _896 = float((uint)(cb2_019w));
      float _897 = _895 + SV_Position.x;
      float _898 = _896 + SV_Position.y;
      uint _899 = uint(_897);
      uint _900 = uint(_898);
      uint _903 = cb2_019x + -1u;
      uint _904 = cb2_019y + -1u;
      int _905 = _899 & _903;
      int _906 = _900 & _904;
      float4 _907 = t3.Load(int3(_905, _906, 0));
      float _911 = _907.x * 2.0f;
      float _912 = _907.y * 2.0f;
      float _913 = _907.z * 2.0f;
      float _914 = _911 + -1.0f;
      float _915 = _912 + -1.0f;
      float _916 = _913 + -1.0f;
      float _917 = _914 * _621;
      float _918 = _915 * _621;
      float _919 = _916 * _621;
      float _920 = _917 + _889;
      float _921 = _918 + _890;
      float _922 = _919 + _891;
      float _923 = dot(float3(_920, _921, _922), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _920;
      SV_Target.y = _921;
      SV_Target.z = _922;
      SV_Target.w = _923;
      SV_Target_1.x = _923;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
