#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = cb2_015x * TEXCOORD0_centroid.x;
  float _26 = cb2_015y * TEXCOORD0_centroid.y;
  float _29 = _25 + cb2_015z;
  float _30 = _26 + cb2_015w;
  float4 _31 = t6.SampleLevel(s0_space2, float2(_29, _30), 0.0f);
  float _35 = saturate(_31.x);
  float _36 = saturate(_31.z);
  float _39 = cb2_026x * _36;
  float _40 = _35 * 6.283199787139893f;
  float _41 = cos(_40);
  float _42 = sin(_40);
  float _43 = _39 * _41;
  float _44 = _42 * _39;
  float _45 = 1.0f - _31.y;
  float _46 = saturate(_45);
  float _47 = _43 * _46;
  float _48 = _44 * _46;
  float _49 = _47 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t1.SampleLevel(s4_space2, float2(_49, _50), 0.0f);
  float _55 = max(_51.x, 0.0f);
  float _56 = max(_51.y, 0.0f);
  float _57 = max(_51.z, 0.0f);
  float _58 = min(_55, 65000.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float4 _61 = t3.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _66 = max(_61.x, 0.0f);
  float _67 = max(_61.y, 0.0f);
  float _68 = max(_61.z, 0.0f);
  float _69 = max(_61.w, 0.0f);
  float _70 = min(_66, 5000.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _76 = _20.x * cb0_028z;
  float _77 = _76 + cb0_028x;
  float _78 = cb2_027w / _77;
  float _79 = 1.0f - _78;
  float _80 = abs(_79);
  float _82 = cb2_027y * _80;
  float _84 = _82 - cb2_027z;
  float _85 = saturate(_84);
  float _86 = max(_85, _73);
  float _87 = saturate(_86);
  float4 _88 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _92 = _70 - _58;
  float _93 = _71 - _59;
  float _94 = _72 - _60;
  float _95 = _87 * _92;
  float _96 = _87 * _93;
  float _97 = _87 * _94;
  float _98 = _95 + _58;
  float _99 = _96 + _59;
  float _100 = _97 + _60;
  float _101 = dot(float3(_98, _99, _100), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _105 = t0[0].SExposureData_020;
  float _107 = t0[0].SExposureData_004;
  float _109 = cb2_018x * 0.5f;
  float _110 = _109 * cb2_018y;
  float _111 = _107.x - _110;
  float _112 = cb2_018y * cb2_018x;
  float _113 = 1.0f / _112;
  float _114 = _111 * _113;
  float _115 = _101 / _105.x;
  float _116 = _115 * 5464.01611328125f;
  float _117 = _116 + 9.99999993922529e-09f;
  float _118 = log2(_117);
  float _119 = _118 - _111;
  float _120 = _119 * _113;
  float _121 = saturate(_120);
  float2 _122 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _121), 0.0f);
  float _125 = max(_122.y, 1.0000000116860974e-07f);
  float _126 = _122.x / _125;
  float _127 = _126 + _114;
  float _128 = _127 / _113;
  float _129 = _128 - _107.x;
  float _130 = -0.0f - _129;
  float _132 = _130 - cb2_027x;
  float _133 = max(0.0f, _132);
  float _135 = cb2_026z * _133;
  float _136 = _129 - cb2_027x;
  float _137 = max(0.0f, _136);
  float _139 = cb2_026w * _137;
  bool _140 = (_129 < 0.0f);
  float _141 = select(_140, _135, _139);
  float _142 = exp2(_141);
  float _143 = _142 * _98;
  float _144 = _142 * _99;
  float _145 = _142 * _100;
  float _150 = cb2_024y * _88.x;
  float _151 = cb2_024z * _88.y;
  float _152 = cb2_024w * _88.z;
  float _153 = _150 + _143;
  float _154 = _151 + _144;
  float _155 = _152 + _145;
  float _160 = _153 * cb2_025x;
  float _161 = _154 * cb2_025y;
  float _162 = _155 * cb2_025z;
  float _163 = dot(float3(_160, _161, _162), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _164 = t0[0].SExposureData_012;
  float _166 = _163 * 5464.01611328125f;
  float _167 = _166 * _164.x;
  float _168 = _167 + 9.99999993922529e-09f;
  float _169 = log2(_168);
  float _170 = _169 + 16.929765701293945f;
  float _171 = _170 * 0.05734497308731079f;
  float _172 = saturate(_171);
  float _173 = _172 * _172;
  float _174 = _172 * 2.0f;
  float _175 = 3.0f - _174;
  float _176 = _173 * _175;
  float _177 = _161 * 0.8450999855995178f;
  float _178 = _162 * 0.14589999616146088f;
  float _179 = _177 + _178;
  float _180 = _179 * 2.4890189170837402f;
  float _181 = _179 * 0.3754962384700775f;
  float _182 = _179 * 2.811495304107666f;
  float _183 = _179 * 5.519708156585693f;
  float _184 = _163 - _180;
  float _185 = _176 * _184;
  float _186 = _185 + _180;
  float _187 = _176 * 0.5f;
  float _188 = _187 + 0.5f;
  float _189 = _188 * _184;
  float _190 = _189 + _180;
  float _191 = _160 - _181;
  float _192 = _161 - _182;
  float _193 = _162 - _183;
  float _194 = _188 * _191;
  float _195 = _188 * _192;
  float _196 = _188 * _193;
  float _197 = _194 + _181;
  float _198 = _195 + _182;
  float _199 = _196 + _183;
  float _200 = 1.0f / _190;
  float _201 = _186 * _200;
  float _202 = _201 * _197;
  float _203 = _201 * _198;
  float _204 = _201 * _199;
  float _208 = cb2_020x * TEXCOORD0_centroid.x;
  float _209 = cb2_020y * TEXCOORD0_centroid.y;
  float _212 = _208 + cb2_020z;
  float _213 = _209 + cb2_020w;
  float _216 = dot(float2(_212, _213), float2(_212, _213));
  float _217 = 1.0f - _216;
  float _218 = saturate(_217);
  float _219 = log2(_218);
  float _220 = _219 * cb2_021w;
  float _221 = exp2(_220);
  float _225 = _202 - cb2_021x;
  float _226 = _203 - cb2_021y;
  float _227 = _204 - cb2_021z;
  float _228 = _225 * _221;
  float _229 = _226 * _221;
  float _230 = _227 * _221;
  float _231 = _228 + cb2_021x;
  float _232 = _229 + cb2_021y;
  float _233 = _230 + cb2_021z;
  float _234 = t0[0].SExposureData_000;
  float _236 = max(_105.x, 0.0010000000474974513f);
  float _237 = 1.0f / _236;
  float _238 = _237 * _234.x;
  bool _241 = ((uint)(cb2_069y) == 0);
  float _247;
  float _248;
  float _249;
  float _303;
  float _304;
  float _305;
  float _335;
  float _336;
  float _337;
  float _487;
  float _524;
  float _525;
  float _526;
  float _555;
  float _556;
  float _557;
  float _638;
  float _639;
  float _640;
  float _646;
  float _647;
  float _648;
  float _662;
  float _663;
  float _664;
  float _689;
  float _701;
  float _729;
  float _741;
  float _753;
  float _754;
  float _755;
  float _782;
  float _783;
  float _784;
  if (!_241) {
    float _243 = _238 * _231;
    float _244 = _238 * _232;
    float _245 = _238 * _233;
    _247 = _243;
    _248 = _244;
    _249 = _245;
  } else {
    _247 = _231;
    _248 = _232;
    _249 = _233;
  }
  float _250 = _247 * 0.6130970120429993f;
  float _251 = mad(0.33952298760414124f, _248, _250);
  float _252 = mad(0.04737899824976921f, _249, _251);
  float _253 = _247 * 0.07019399851560593f;
  float _254 = mad(0.9163540005683899f, _248, _253);
  float _255 = mad(0.013451999984681606f, _249, _254);
  float _256 = _247 * 0.02061600051820278f;
  float _257 = mad(0.10956999659538269f, _248, _256);
  float _258 = mad(0.8698149919509888f, _249, _257);
  float _259 = log2(_252);
  float _260 = log2(_255);
  float _261 = log2(_258);
  float _262 = _259 * 0.04211956635117531f;
  float _263 = _260 * 0.04211956635117531f;
  float _264 = _261 * 0.04211956635117531f;
  float _265 = _262 + 0.6252607107162476f;
  float _266 = _263 + 0.6252607107162476f;
  float _267 = _264 + 0.6252607107162476f;
  float4 _268 = t5.SampleLevel(s2_space2, float3(_265, _266, _267), 0.0f);
  bool _274 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_274 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _278 = cb2_017x * _268.x;
    float _279 = cb2_017x * _268.y;
    float _280 = cb2_017x * _268.z;
    float _282 = _278 + cb2_017y;
    float _283 = _279 + cb2_017y;
    float _284 = _280 + cb2_017y;
    float _285 = exp2(_282);
    float _286 = exp2(_283);
    float _287 = exp2(_284);
    float _288 = _285 + 1.0f;
    float _289 = _286 + 1.0f;
    float _290 = _287 + 1.0f;
    float _291 = 1.0f / _288;
    float _292 = 1.0f / _289;
    float _293 = 1.0f / _290;
    float _295 = cb2_017z * _291;
    float _296 = cb2_017z * _292;
    float _297 = cb2_017z * _293;
    float _299 = _295 + cb2_017w;
    float _300 = _296 + cb2_017w;
    float _301 = _297 + cb2_017w;
    _303 = _299;
    _304 = _300;
    _305 = _301;
  } else {
    _303 = _268.x;
    _304 = _268.y;
    _305 = _268.z;
  }
  float _306 = _303 * 23.0f;
  float _307 = _306 + -14.473931312561035f;
  float _308 = exp2(_307);
  float _309 = _304 * 23.0f;
  float _310 = _309 + -14.473931312561035f;
  float _311 = exp2(_310);
  float _312 = _305 * 23.0f;
  float _313 = _312 + -14.473931312561035f;
  float _314 = exp2(_313);
  float _320 = cb2_016x - _308;
  float _321 = cb2_016y - _311;
  float _322 = cb2_016z - _314;
  float _323 = _320 * cb2_016w;
  float _324 = _321 * cb2_016w;
  float _325 = _322 * cb2_016w;
  float _326 = _323 + _308;
  float _327 = _324 + _311;
  float _328 = _325 + _314;
  if (_274 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _331 = cb2_024x * _326;
    float _332 = cb2_024x * _327;
    float _333 = cb2_024x * _328;
    _335 = _331;
    _336 = _332;
    _337 = _333;
  } else {
    _335 = _326;
    _336 = _327;
    _337 = _328;
  }
  float _340 = _335 * 0.9708889722824097f;
  float _341 = mad(0.026962999254465103f, _336, _340);
  float _342 = mad(0.002148000057786703f, _337, _341);
  float _343 = _335 * 0.01088900025933981f;
  float _344 = mad(0.9869629740715027f, _336, _343);
  float _345 = mad(0.002148000057786703f, _337, _344);
  float _346 = mad(0.026962999254465103f, _336, _343);
  float _347 = mad(0.9621480107307434f, _337, _346);
  float _348 = max(_342, 0.0f);
  float _349 = max(_345, 0.0f);
  float _350 = max(_347, 0.0f);
  float _351 = min(_348, cb2_095y);
  float _352 = min(_349, cb2_095y);
  float _353 = min(_350, cb2_095y);
  bool _356 = ((uint)(cb2_095x) == 0);
  bool _359 = ((uint)(cb2_094w) == 0);
  bool _361 = ((uint)(cb2_094z) == 0);
  bool _363 = ((uint)(cb2_094y) != 0);
  bool _365 = ((uint)(cb2_094x) == 0);
  bool _367 = ((uint)(cb2_069z) != 0);
  float _414 = asfloat((uint)(cb2_075y));
  float _415 = asfloat((uint)(cb2_075z));
  float _416 = asfloat((uint)(cb2_075w));
  float _417 = asfloat((uint)(cb2_074z));
  float _418 = asfloat((uint)(cb2_074w));
  float _419 = asfloat((uint)(cb2_075x));
  float _420 = asfloat((uint)(cb2_073w));
  float _421 = asfloat((uint)(cb2_074x));
  float _422 = asfloat((uint)(cb2_074y));
  float _423 = asfloat((uint)(cb2_077x));
  float _424 = asfloat((uint)(cb2_077y));
  float _425 = asfloat((uint)(cb2_079x));
  float _426 = asfloat((uint)(cb2_079y));
  float _427 = asfloat((uint)(cb2_079z));
  float _428 = asfloat((uint)(cb2_078y));
  float _429 = asfloat((uint)(cb2_078z));
  float _430 = asfloat((uint)(cb2_078w));
  float _431 = asfloat((uint)(cb2_077z));
  float _432 = asfloat((uint)(cb2_077w));
  float _433 = asfloat((uint)(cb2_078x));
  float _434 = asfloat((uint)(cb2_072y));
  float _435 = asfloat((uint)(cb2_072z));
  float _436 = asfloat((uint)(cb2_072w));
  float _437 = asfloat((uint)(cb2_071x));
  float _438 = asfloat((uint)(cb2_071y));
  float _439 = asfloat((uint)(cb2_076x));
  float _440 = asfloat((uint)(cb2_070w));
  float _441 = asfloat((uint)(cb2_070x));
  float _442 = asfloat((uint)(cb2_070y));
  float _443 = asfloat((uint)(cb2_070z));
  float _444 = asfloat((uint)(cb2_073x));
  float _445 = asfloat((uint)(cb2_073y));
  float _446 = asfloat((uint)(cb2_073z));
  float _447 = asfloat((uint)(cb2_071z));
  float _448 = asfloat((uint)(cb2_071w));
  float _449 = asfloat((uint)(cb2_072x));
  float _450 = max(_352, _353);
  float _451 = max(_351, _450);
  float _452 = 1.0f / _451;
  float _453 = _452 * _351;
  float _454 = _452 * _352;
  float _455 = _452 * _353;
  float _456 = abs(_453);
  float _457 = log2(_456);
  float _458 = _457 * _441;
  float _459 = exp2(_458);
  float _460 = abs(_454);
  float _461 = log2(_460);
  float _462 = _461 * _442;
  float _463 = exp2(_462);
  float _464 = abs(_455);
  float _465 = log2(_464);
  float _466 = _465 * _443;
  float _467 = exp2(_466);
  if (_363) {
    float _470 = asfloat((uint)(cb2_076w));
    float _472 = asfloat((uint)(cb2_076z));
    float _474 = asfloat((uint)(cb2_076y));
    float _475 = _472 * _352;
    float _476 = _474 * _351;
    float _477 = _470 * _353;
    float _478 = _476 + _477;
    float _479 = _478 + _475;
    _487 = _479;
  } else {
    float _481 = _448 * _352;
    float _482 = _447 * _351;
    float _483 = _449 * _353;
    float _484 = _481 + _482;
    float _485 = _484 + _483;
    _487 = _485;
  }
  float _488 = abs(_487);
  float _489 = log2(_488);
  float _490 = _489 * _440;
  float _491 = exp2(_490);
  float _492 = log2(_491);
  float _493 = _492 * _439;
  float _494 = exp2(_493);
  float _495 = select(_367, _494, _491);
  float _496 = _495 * _437;
  float _497 = _496 + _438;
  float _498 = 1.0f / _497;
  float _499 = _498 * _491;
  if (_363) {
    if (!_365) {
      float _502 = _459 * _431;
      float _503 = _463 * _432;
      float _504 = _467 * _433;
      float _505 = _503 + _502;
      float _506 = _505 + _504;
      float _507 = _463 * _429;
      float _508 = _459 * _428;
      float _509 = _467 * _430;
      float _510 = _507 + _508;
      float _511 = _510 + _509;
      float _512 = _467 * _427;
      float _513 = _463 * _426;
      float _514 = _459 * _425;
      float _515 = _513 + _514;
      float _516 = _515 + _512;
      float _517 = max(_511, _516);
      float _518 = max(_506, _517);
      float _519 = 1.0f / _518;
      float _520 = _519 * _506;
      float _521 = _519 * _511;
      float _522 = _519 * _516;
      _524 = _520;
      _525 = _521;
      _526 = _522;
    } else {
      _524 = _459;
      _525 = _463;
      _526 = _467;
    }
    float _527 = _524 * _424;
    float _528 = exp2(_527);
    float _529 = _528 * _423;
    float _530 = saturate(_529);
    float _531 = _524 * _423;
    float _532 = _524 - _531;
    float _533 = saturate(_532);
    float _534 = max(_423, _533);
    float _535 = min(_534, _530);
    float _536 = _525 * _424;
    float _537 = exp2(_536);
    float _538 = _537 * _423;
    float _539 = saturate(_538);
    float _540 = _525 * _423;
    float _541 = _525 - _540;
    float _542 = saturate(_541);
    float _543 = max(_423, _542);
    float _544 = min(_543, _539);
    float _545 = _526 * _424;
    float _546 = exp2(_545);
    float _547 = _546 * _423;
    float _548 = saturate(_547);
    float _549 = _526 * _423;
    float _550 = _526 - _549;
    float _551 = saturate(_550);
    float _552 = max(_423, _551);
    float _553 = min(_552, _548);
    _555 = _535;
    _556 = _544;
    _557 = _553;
  } else {
    _555 = _459;
    _556 = _463;
    _557 = _467;
  }
  float _558 = _555 * _447;
  float _559 = _556 * _448;
  float _560 = _559 + _558;
  float _561 = _557 * _449;
  float _562 = _560 + _561;
  float _563 = 1.0f / _562;
  float _564 = _563 * _499;
  float _565 = saturate(_564);
  float _566 = _565 * _555;
  float _567 = saturate(_566);
  float _568 = _565 * _556;
  float _569 = saturate(_568);
  float _570 = _565 * _557;
  float _571 = saturate(_570);
  float _572 = _567 * _434;
  float _573 = _434 - _572;
  float _574 = _569 * _435;
  float _575 = _435 - _574;
  float _576 = _571 * _436;
  float _577 = _436 - _576;
  float _578 = _571 * _449;
  float _579 = _567 * _447;
  float _580 = _569 * _448;
  float _581 = _499 - _579;
  float _582 = _581 - _580;
  float _583 = _582 - _578;
  float _584 = saturate(_583);
  float _585 = _575 * _448;
  float _586 = _573 * _447;
  float _587 = _577 * _449;
  float _588 = _585 + _586;
  float _589 = _588 + _587;
  float _590 = 1.0f / _589;
  float _591 = _590 * _584;
  float _592 = _591 * _573;
  float _593 = _592 + _567;
  float _594 = saturate(_593);
  float _595 = _591 * _575;
  float _596 = _595 + _569;
  float _597 = saturate(_596);
  float _598 = _591 * _577;
  float _599 = _598 + _571;
  float _600 = saturate(_599);
  float _601 = _600 * _449;
  float _602 = _594 * _447;
  float _603 = _597 * _448;
  float _604 = _499 - _602;
  float _605 = _604 - _603;
  float _606 = _605 - _601;
  float _607 = saturate(_606);
  float _608 = _607 * _444;
  float _609 = _608 + _594;
  float _610 = saturate(_609);
  float _611 = _607 * _445;
  float _612 = _611 + _597;
  float _613 = saturate(_612);
  float _614 = _607 * _446;
  float _615 = _614 + _600;
  float _616 = saturate(_615);
  if (!_361) {
    float _618 = _610 * _420;
    float _619 = _613 * _421;
    float _620 = _616 * _422;
    float _621 = _619 + _618;
    float _622 = _621 + _620;
    float _623 = _613 * _418;
    float _624 = _610 * _417;
    float _625 = _616 * _419;
    float _626 = _623 + _624;
    float _627 = _626 + _625;
    float _628 = _616 * _416;
    float _629 = _613 * _415;
    float _630 = _610 * _414;
    float _631 = _629 + _630;
    float _632 = _631 + _628;
    if (!_359) {
      float _634 = saturate(_622);
      float _635 = saturate(_627);
      float _636 = saturate(_632);
      _638 = _636;
      _639 = _635;
      _640 = _634;
    } else {
      _638 = _632;
      _639 = _627;
      _640 = _622;
    }
  } else {
    _638 = _616;
    _639 = _613;
    _640 = _610;
  }
  if (!_356) {
    float _642 = _640 * _420;
    float _643 = _639 * _420;
    float _644 = _638 * _420;
    _646 = _644;
    _647 = _643;
    _648 = _642;
  } else {
    _646 = _638;
    _647 = _639;
    _648 = _640;
  }
  if (_274) {
    float _652 = cb1_018z * 9.999999747378752e-05f;
    float _653 = _652 * _648;
    float _654 = _652 * _647;
    float _655 = _652 * _646;
    float _657 = 5000.0f / cb1_018y;
    float _658 = _653 * _657;
    float _659 = _654 * _657;
    float _660 = _655 * _657;
    _662 = _658;
    _663 = _659;
    _664 = _660;
  } else {
    _662 = _648;
    _663 = _647;
    _664 = _646;
  }
  float _665 = _662 * 1.6047500371932983f;
  float _666 = mad(-0.5310800075531006f, _663, _665);
  float _667 = mad(-0.07366999983787537f, _664, _666);
  float _668 = _662 * -0.10208000242710114f;
  float _669 = mad(1.1081299781799316f, _663, _668);
  float _670 = mad(-0.006049999967217445f, _664, _669);
  float _671 = _662 * -0.0032599999103695154f;
  float _672 = mad(-0.07275000214576721f, _663, _671);
  float _673 = mad(1.0760200023651123f, _664, _672);
  if (_274) {
    // float _675 = max(_667, 0.0f);
    // float _676 = max(_670, 0.0f);
    // float _677 = max(_673, 0.0f);
    // bool _678 = !(_675 >= 0.0030399328097701073f);
    // if (!_678) {
    //   float _680 = abs(_675);
    //   float _681 = log2(_680);
    //   float _682 = _681 * 0.4166666567325592f;
    //   float _683 = exp2(_682);
    //   float _684 = _683 * 1.0549999475479126f;
    //   float _685 = _684 + -0.054999999701976776f;
    //   _689 = _685;
    // } else {
    //   float _687 = _675 * 12.923210144042969f;
    //   _689 = _687;
    // }
    // bool _690 = !(_676 >= 0.0030399328097701073f);
    // if (!_690) {
    //   float _692 = abs(_676);
    //   float _693 = log2(_692);
    //   float _694 = _693 * 0.4166666567325592f;
    //   float _695 = exp2(_694);
    //   float _696 = _695 * 1.0549999475479126f;
    //   float _697 = _696 + -0.054999999701976776f;
    //   _701 = _697;
    // } else {
    //   float _699 = _676 * 12.923210144042969f;
    //   _701 = _699;
    // }
    // bool _702 = !(_677 >= 0.0030399328097701073f);
    // if (!_702) {
    //   float _704 = abs(_677);
    //   float _705 = log2(_704);
    //   float _706 = _705 * 0.4166666567325592f;
    //   float _707 = exp2(_706);
    //   float _708 = _707 * 1.0549999475479126f;
    //   float _709 = _708 + -0.054999999701976776f;
    //   _782 = _689;
    //   _783 = _701;
    //   _784 = _709;
    // } else {
    //   float _711 = _677 * 12.923210144042969f;
    //   _782 = _689;
    //   _783 = _701;
    //   _784 = _711;
    // }
    _782 = renodx::color::srgb::EncodeSafe(_667);
    _783 = renodx::color::srgb::EncodeSafe(_670);
    _784 = renodx::color::srgb::EncodeSafe(_673);

  } else {
    float _713 = saturate(_667);
    float _714 = saturate(_670);
    float _715 = saturate(_673);
    bool _716 = ((uint)(cb1_018w) == -2);
    if (!_716) {
      bool _718 = !(_713 >= 0.0030399328097701073f);
      if (!_718) {
        float _720 = abs(_713);
        float _721 = log2(_720);
        float _722 = _721 * 0.4166666567325592f;
        float _723 = exp2(_722);
        float _724 = _723 * 1.0549999475479126f;
        float _725 = _724 + -0.054999999701976776f;
        _729 = _725;
      } else {
        float _727 = _713 * 12.923210144042969f;
        _729 = _727;
      }
      bool _730 = !(_714 >= 0.0030399328097701073f);
      if (!_730) {
        float _732 = abs(_714);
        float _733 = log2(_732);
        float _734 = _733 * 0.4166666567325592f;
        float _735 = exp2(_734);
        float _736 = _735 * 1.0549999475479126f;
        float _737 = _736 + -0.054999999701976776f;
        _741 = _737;
      } else {
        float _739 = _714 * 12.923210144042969f;
        _741 = _739;
      }
      bool _742 = !(_715 >= 0.0030399328097701073f);
      if (!_742) {
        float _744 = abs(_715);
        float _745 = log2(_744);
        float _746 = _745 * 0.4166666567325592f;
        float _747 = exp2(_746);
        float _748 = _747 * 1.0549999475479126f;
        float _749 = _748 + -0.054999999701976776f;
        _753 = _729;
        _754 = _741;
        _755 = _749;
      } else {
        float _751 = _715 * 12.923210144042969f;
        _753 = _729;
        _754 = _741;
        _755 = _751;
      }
    } else {
      _753 = _713;
      _754 = _714;
      _755 = _715;
    }
    float _760 = abs(_753);
    float _761 = abs(_754);
    float _762 = abs(_755);
    float _763 = log2(_760);
    float _764 = log2(_761);
    float _765 = log2(_762);
    float _766 = _763 * cb2_000z;
    float _767 = _764 * cb2_000z;
    float _768 = _765 * cb2_000z;
    float _769 = exp2(_766);
    float _770 = exp2(_767);
    float _771 = exp2(_768);
    float _772 = _769 * cb2_000y;
    float _773 = _770 * cb2_000y;
    float _774 = _771 * cb2_000y;
    float _775 = _772 + cb2_000x;
    float _776 = _773 + cb2_000x;
    float _777 = _774 + cb2_000x;
    float _778 = saturate(_775);
    float _779 = saturate(_776);
    float _780 = saturate(_777);
    _782 = _778;
    _783 = _779;
    _784 = _780;
  }
  float _785 = dot(float3(_782, _783, _784), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _782;
  SV_Target.y = _783;
  SV_Target.z = _784;
  SV_Target.w = _785;
  SV_Target_1.x = _785;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
