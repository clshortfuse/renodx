#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _23 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _27 = _23.x * 6.283199787139893f;
  float _28 = cos(_27);
  float _29 = sin(_27);
  float _30 = _28 * _23.z;
  float _31 = _29 * _23.z;
  float _32 = _30 + TEXCOORD0_centroid.x;
  float _33 = _31 + TEXCOORD0_centroid.y;
  float _34 = _32 * 10.0f;
  float _35 = 10.0f - _34;
  float _36 = min(_34, _35);
  float _37 = saturate(_36);
  float _38 = _37 * _30;
  float _39 = _33 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _31;
  float _44 = _38 + TEXCOORD0_centroid.x;
  float _45 = _43 + TEXCOORD0_centroid.y;
  float4 _46 = t6.SampleLevel(s2_space2, float2(_44, _45), 0.0f);
  float _48 = _46.w * _38;
  float _49 = _46.w * _43;
  float _50 = 1.0f - _23.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _57 = cb2_015x * TEXCOORD0_centroid.x;
  float _58 = cb2_015y * TEXCOORD0_centroid.y;
  float _61 = _57 + cb2_015z;
  float _62 = _58 + cb2_015w;
  float4 _63 = t7.SampleLevel(s0_space2, float2(_61, _62), 0.0f);
  float _67 = saturate(_63.x);
  float _68 = saturate(_63.z);
  float _71 = cb2_026x * _68;
  float _72 = _67 * 6.283199787139893f;
  float _73 = cos(_72);
  float _74 = sin(_72);
  float _75 = _71 * _73;
  float _76 = _74 * _71;
  float _77 = 1.0f - _63.y;
  float _78 = saturate(_77);
  float _79 = _75 * _78;
  float _80 = _76 * _78;
  float _81 = _52 + TEXCOORD0_centroid.x;
  float _82 = _81 + _79;
  float _83 = _53 + TEXCOORD0_centroid.y;
  float _84 = _83 + _80;
  float4 _85 = t6.SampleLevel(s2_space2, float2(_82, _84), 0.0f);
  bool _87 = (_85.y > 0.0f);
  float _88 = select(_87, TEXCOORD0_centroid.x, _82);
  float _89 = select(_87, TEXCOORD0_centroid.y, _84);
  float4 _90 = t1.SampleLevel(s4_space2, float2(_88, _89), 0.0f);
  float _94 = max(_90.x, 0.0f);
  float _95 = max(_90.y, 0.0f);
  float _96 = max(_90.z, 0.0f);
  float _97 = min(_94, 65000.0f);
  float _98 = min(_95, 65000.0f);
  float _99 = min(_96, 65000.0f);
  float4 _100 = t3.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _105 = max(_100.x, 0.0f);
  float _106 = max(_100.y, 0.0f);
  float _107 = max(_100.z, 0.0f);
  float _108 = max(_100.w, 0.0f);
  float _109 = min(_105, 5000.0f);
  float _110 = min(_106, 5000.0f);
  float _111 = min(_107, 5000.0f);
  float _112 = min(_108, 5000.0f);
  float _115 = _21.x * cb0_028z;
  float _116 = _115 + cb0_028x;
  float _117 = cb2_027w / _116;
  float _118 = 1.0f - _117;
  float _119 = abs(_118);
  float _121 = cb2_027y * _119;
  float _123 = _121 - cb2_027z;
  float _124 = saturate(_123);
  float _125 = max(_124, _112);
  float _126 = saturate(_125);
  float _130 = cb2_013x * _88;
  float _131 = cb2_013y * _89;
  float _134 = _130 + cb2_013z;
  float _135 = _131 + cb2_013w;
  float _138 = dot(float2(_134, _135), float2(_134, _135));
  float _139 = abs(_138);
  float _140 = log2(_139);
  float _141 = _140 * cb2_014x;
  float _142 = exp2(_141);
  float _143 = saturate(_142);
  float _147 = cb2_011x * _88;
  float _148 = cb2_011y * _89;
  float _151 = _147 + cb2_011z;
  float _152 = _148 + cb2_011w;
  float _153 = _151 * _143;
  float _154 = _152 * _143;
  float _155 = _153 + _88;
  float _156 = _154 + _89;
  float _160 = cb2_012x * _88;
  float _161 = cb2_012y * _89;
  float _164 = _160 + cb2_012z;
  float _165 = _161 + cb2_012w;
  float _166 = _164 * _143;
  float _167 = _165 * _143;
  float _168 = _166 + _88;
  float _169 = _167 + _89;
  float4 _170 = t1.SampleLevel(s2_space2, float2(_155, _156), 0.0f);
  float _174 = max(_170.x, 0.0f);
  float _175 = max(_170.y, 0.0f);
  float _176 = max(_170.z, 0.0f);
  float _177 = min(_174, 65000.0f);
  float _178 = min(_175, 65000.0f);
  float _179 = min(_176, 65000.0f);
  float4 _180 = t1.SampleLevel(s2_space2, float2(_168, _169), 0.0f);
  float _184 = max(_180.x, 0.0f);
  float _185 = max(_180.y, 0.0f);
  float _186 = max(_180.z, 0.0f);
  float _187 = min(_184, 65000.0f);
  float _188 = min(_185, 65000.0f);
  float _189 = min(_186, 65000.0f);
  float4 _190 = t3.SampleLevel(s2_space2, float2(_155, _156), 0.0f);
  float _194 = max(_190.x, 0.0f);
  float _195 = max(_190.y, 0.0f);
  float _196 = max(_190.z, 0.0f);
  float _197 = min(_194, 5000.0f);
  float _198 = min(_195, 5000.0f);
  float _199 = min(_196, 5000.0f);
  float4 _200 = t3.SampleLevel(s2_space2, float2(_168, _169), 0.0f);
  float _204 = max(_200.x, 0.0f);
  float _205 = max(_200.y, 0.0f);
  float _206 = max(_200.z, 0.0f);
  float _207 = min(_204, 5000.0f);
  float _208 = min(_205, 5000.0f);
  float _209 = min(_206, 5000.0f);
  float _214 = 1.0f - cb2_009x;
  float _215 = 1.0f - cb2_009y;
  float _216 = 1.0f - cb2_009z;
  float _221 = _214 - cb2_010x;
  float _222 = _215 - cb2_010y;
  float _223 = _216 - cb2_010z;
  float _224 = saturate(_221);
  float _225 = saturate(_222);
  float _226 = saturate(_223);
  float _227 = _224 * _97;
  float _228 = _225 * _98;
  float _229 = _226 * _99;
  float _230 = cb2_009x * _177;
  float _231 = cb2_009y * _178;
  float _232 = cb2_009z * _179;
  float _233 = _230 + _227;
  float _234 = _231 + _228;
  float _235 = _232 + _229;
  float _236 = cb2_010x * _187;
  float _237 = cb2_010y * _188;
  float _238 = cb2_010z * _189;
  float _239 = _233 + _236;
  float _240 = _234 + _237;
  float _241 = _235 + _238;
  float _242 = _224 * _109;
  float _243 = _225 * _110;
  float _244 = _226 * _111;
  float _245 = cb2_009x * _197;
  float _246 = cb2_009y * _198;
  float _247 = cb2_009z * _199;
  float _248 = cb2_010x * _207;
  float _249 = cb2_010y * _208;
  float _250 = cb2_010z * _209;
  float4 _251 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _255 = _242 - _239;
  float _256 = _255 + _245;
  float _257 = _256 + _248;
  float _258 = _243 - _240;
  float _259 = _258 + _246;
  float _260 = _259 + _249;
  float _261 = _244 - _241;
  float _262 = _261 + _247;
  float _263 = _262 + _250;
  float _264 = _257 * _126;
  float _265 = _260 * _126;
  float _266 = _263 * _126;
  float _267 = _264 + _239;
  float _268 = _265 + _240;
  float _269 = _266 + _241;
  float _270 = dot(float3(_267, _268, _269), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _274 = t0[0].SExposureData_020;
  float _276 = t0[0].SExposureData_004;
  float _278 = cb2_018x * 0.5f;
  float _279 = _278 * cb2_018y;
  float _280 = _276.x - _279;
  float _281 = cb2_018y * cb2_018x;
  float _282 = 1.0f / _281;
  float _283 = _280 * _282;
  float _284 = _270 / _274.x;
  float _285 = _284 * 5464.01611328125f;
  float _286 = _285 + 9.99999993922529e-09f;
  float _287 = log2(_286);
  float _288 = _287 - _280;
  float _289 = _288 * _282;
  float _290 = saturate(_289);
  float2 _291 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _290), 0.0f);
  float _294 = max(_291.y, 1.0000000116860974e-07f);
  float _295 = _291.x / _294;
  float _296 = _295 + _283;
  float _297 = _296 / _282;
  float _298 = _297 - _276.x;
  float _299 = -0.0f - _298;
  float _301 = _299 - cb2_027x;
  float _302 = max(0.0f, _301);
  float _304 = cb2_026z * _302;
  float _305 = _298 - cb2_027x;
  float _306 = max(0.0f, _305);
  float _308 = cb2_026w * _306;
  bool _309 = (_298 < 0.0f);
  float _310 = select(_309, _304, _308);
  float _311 = exp2(_310);
  float _312 = _311 * _267;
  float _313 = _311 * _268;
  float _314 = _311 * _269;
  float _319 = cb2_024y * _251.x;
  float _320 = cb2_024z * _251.y;
  float _321 = cb2_024w * _251.z;
  float _322 = _319 + _312;
  float _323 = _320 + _313;
  float _324 = _321 + _314;
  float _329 = _322 * cb2_025x;
  float _330 = _323 * cb2_025y;
  float _331 = _324 * cb2_025z;
  float _332 = dot(float3(_329, _330, _331), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _333 = t0[0].SExposureData_012;
  float _335 = _332 * 5464.01611328125f;
  float _336 = _335 * _333.x;
  float _337 = _336 + 9.99999993922529e-09f;
  float _338 = log2(_337);
  float _339 = _338 + 16.929765701293945f;
  float _340 = _339 * 0.05734497308731079f;
  float _341 = saturate(_340);
  float _342 = _341 * _341;
  float _343 = _341 * 2.0f;
  float _344 = 3.0f - _343;
  float _345 = _342 * _344;
  float _346 = _330 * 0.8450999855995178f;
  float _347 = _331 * 0.14589999616146088f;
  float _348 = _346 + _347;
  float _349 = _348 * 2.4890189170837402f;
  float _350 = _348 * 0.3754962384700775f;
  float _351 = _348 * 2.811495304107666f;
  float _352 = _348 * 5.519708156585693f;
  float _353 = _332 - _349;
  float _354 = _345 * _353;
  float _355 = _354 + _349;
  float _356 = _345 * 0.5f;
  float _357 = _356 + 0.5f;
  float _358 = _357 * _353;
  float _359 = _358 + _349;
  float _360 = _329 - _350;
  float _361 = _330 - _351;
  float _362 = _331 - _352;
  float _363 = _357 * _360;
  float _364 = _357 * _361;
  float _365 = _357 * _362;
  float _366 = _363 + _350;
  float _367 = _364 + _351;
  float _368 = _365 + _352;
  float _369 = 1.0f / _359;
  float _370 = _355 * _369;
  float _371 = _370 * _366;
  float _372 = _370 * _367;
  float _373 = _370 * _368;
  float _377 = cb2_020x * TEXCOORD0_centroid.x;
  float _378 = cb2_020y * TEXCOORD0_centroid.y;
  float _381 = _377 + cb2_020z;
  float _382 = _378 + cb2_020w;
  float _385 = dot(float2(_381, _382), float2(_381, _382));
  float _386 = 1.0f - _385;
  float _387 = saturate(_386);
  float _388 = log2(_387);
  float _389 = _388 * cb2_021w;
  float _390 = exp2(_389);
  float _394 = _371 - cb2_021x;
  float _395 = _372 - cb2_021y;
  float _396 = _373 - cb2_021z;
  float _397 = _394 * _390;
  float _398 = _395 * _390;
  float _399 = _396 * _390;
  float _400 = _397 + cb2_021x;
  float _401 = _398 + cb2_021y;
  float _402 = _399 + cb2_021z;
  float _403 = t0[0].SExposureData_000;
  float _405 = max(_274.x, 0.0010000000474974513f);
  float _406 = 1.0f / _405;
  float _407 = _406 * _403.x;
  bool _410 = ((uint)(cb2_069y) == 0);
  float _416;
  float _417;
  float _418;
  float _472;
  float _473;
  float _474;
  float _549;
  float _550;
  float _551;
  float _701;
  float _738;
  float _739;
  float _740;
  float _769;
  float _770;
  float _771;
  float _852;
  float _853;
  float _854;
  float _860;
  float _861;
  float _862;
  float _876;
  float _877;
  float _878;
  float _903;
  float _915;
  float _943;
  float _955;
  float _967;
  float _968;
  float _969;
  float _996;
  float _997;
  float _998;
  if (!_410) {
    float _412 = _407 * _400;
    float _413 = _407 * _401;
    float _414 = _407 * _402;
    _416 = _412;
    _417 = _413;
    _418 = _414;
  } else {
    _416 = _400;
    _417 = _401;
    _418 = _402;
  }
  float _419 = _416 * 0.6130970120429993f;
  float _420 = mad(0.33952298760414124f, _417, _419);
  float _421 = mad(0.04737899824976921f, _418, _420);
  float _422 = _416 * 0.07019399851560593f;
  float _423 = mad(0.9163540005683899f, _417, _422);
  float _424 = mad(0.013451999984681606f, _418, _423);
  float _425 = _416 * 0.02061600051820278f;
  float _426 = mad(0.10956999659538269f, _417, _425);
  float _427 = mad(0.8698149919509888f, _418, _426);
  float _428 = log2(_421);
  float _429 = log2(_424);
  float _430 = log2(_427);
  float _431 = _428 * 0.04211956635117531f;
  float _432 = _429 * 0.04211956635117531f;
  float _433 = _430 * 0.04211956635117531f;
  float _434 = _431 + 0.6252607107162476f;
  float _435 = _432 + 0.6252607107162476f;
  float _436 = _433 + 0.6252607107162476f;
  float4 _437 = t5.SampleLevel(s2_space2, float3(_434, _435, _436), 0.0f);
  bool _443 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_443 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _447 = cb2_017x * _437.x;
    float _448 = cb2_017x * _437.y;
    float _449 = cb2_017x * _437.z;
    float _451 = _447 + cb2_017y;
    float _452 = _448 + cb2_017y;
    float _453 = _449 + cb2_017y;
    float _454 = exp2(_451);
    float _455 = exp2(_452);
    float _456 = exp2(_453);
    float _457 = _454 + 1.0f;
    float _458 = _455 + 1.0f;
    float _459 = _456 + 1.0f;
    float _460 = 1.0f / _457;
    float _461 = 1.0f / _458;
    float _462 = 1.0f / _459;
    float _464 = cb2_017z * _460;
    float _465 = cb2_017z * _461;
    float _466 = cb2_017z * _462;
    float _468 = _464 + cb2_017w;
    float _469 = _465 + cb2_017w;
    float _470 = _466 + cb2_017w;
    _472 = _468;
    _473 = _469;
    _474 = _470;
  } else {
    _472 = _437.x;
    _473 = _437.y;
    _474 = _437.z;
  }
  float _475 = _472 * 23.0f;
  float _476 = _475 + -14.473931312561035f;
  float _477 = exp2(_476);
  float _478 = _473 * 23.0f;
  float _479 = _478 + -14.473931312561035f;
  float _480 = exp2(_479);
  float _481 = _474 * 23.0f;
  float _482 = _481 + -14.473931312561035f;
  float _483 = exp2(_482);
  float _484 = dot(float3(_477, _480, _483), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _489 = dot(float3(_477, _480, _483), float3(_477, _480, _483));
  float _490 = rsqrt(_489);
  float _491 = _490 * _477;
  float _492 = _490 * _480;
  float _493 = _490 * _483;
  float _494 = cb2_001x - _491;
  float _495 = cb2_001y - _492;
  float _496 = cb2_001z - _493;
  float _497 = dot(float3(_494, _495, _496), float3(_494, _495, _496));
  float _500 = cb2_002z * _497;
  float _502 = _500 + cb2_002w;
  float _503 = saturate(_502);
  float _505 = cb2_002x * _503;
  float _506 = _484 - _477;
  float _507 = _484 - _480;
  float _508 = _484 - _483;
  float _509 = _505 * _506;
  float _510 = _505 * _507;
  float _511 = _505 * _508;
  float _512 = _509 + _477;
  float _513 = _510 + _480;
  float _514 = _511 + _483;
  float _516 = cb2_002y * _503;
  float _517 = 0.10000000149011612f - _512;
  float _518 = 0.10000000149011612f - _513;
  float _519 = 0.10000000149011612f - _514;
  float _520 = _517 * _516;
  float _521 = _518 * _516;
  float _522 = _519 * _516;
  float _523 = _520 + _512;
  float _524 = _521 + _513;
  float _525 = _522 + _514;
  float _526 = saturate(_523);
  float _527 = saturate(_524);
  float _528 = saturate(_525);
  float _534 = cb2_016x - _526;
  float _535 = cb2_016y - _527;
  float _536 = cb2_016z - _528;
  float _537 = _534 * cb2_016w;
  float _538 = _535 * cb2_016w;
  float _539 = _536 * cb2_016w;
  float _540 = _537 + _526;
  float _541 = _538 + _527;
  float _542 = _539 + _528;
  if (_443 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _545 = cb2_024x * _540;
    float _546 = cb2_024x * _541;
    float _547 = cb2_024x * _542;
    _549 = _545;
    _550 = _546;
    _551 = _547;
  } else {
    _549 = _540;
    _550 = _541;
    _551 = _542;
  }
  float _554 = _549 * 0.9708889722824097f;
  float _555 = mad(0.026962999254465103f, _550, _554);
  float _556 = mad(0.002148000057786703f, _551, _555);
  float _557 = _549 * 0.01088900025933981f;
  float _558 = mad(0.9869629740715027f, _550, _557);
  float _559 = mad(0.002148000057786703f, _551, _558);
  float _560 = mad(0.026962999254465103f, _550, _557);
  float _561 = mad(0.9621480107307434f, _551, _560);
  float _562 = max(_556, 0.0f);
  float _563 = max(_559, 0.0f);
  float _564 = max(_561, 0.0f);
  float _565 = min(_562, cb2_095y);
  float _566 = min(_563, cb2_095y);
  float _567 = min(_564, cb2_095y);
  bool _570 = ((uint)(cb2_095x) == 0);
  bool _573 = ((uint)(cb2_094w) == 0);
  bool _575 = ((uint)(cb2_094z) == 0);
  bool _577 = ((uint)(cb2_094y) != 0);
  bool _579 = ((uint)(cb2_094x) == 0);
  bool _581 = ((uint)(cb2_069z) != 0);
  float _628 = asfloat((uint)(cb2_075y));
  float _629 = asfloat((uint)(cb2_075z));
  float _630 = asfloat((uint)(cb2_075w));
  float _631 = asfloat((uint)(cb2_074z));
  float _632 = asfloat((uint)(cb2_074w));
  float _633 = asfloat((uint)(cb2_075x));
  float _634 = asfloat((uint)(cb2_073w));
  float _635 = asfloat((uint)(cb2_074x));
  float _636 = asfloat((uint)(cb2_074y));
  float _637 = asfloat((uint)(cb2_077x));
  float _638 = asfloat((uint)(cb2_077y));
  float _639 = asfloat((uint)(cb2_079x));
  float _640 = asfloat((uint)(cb2_079y));
  float _641 = asfloat((uint)(cb2_079z));
  float _642 = asfloat((uint)(cb2_078y));
  float _643 = asfloat((uint)(cb2_078z));
  float _644 = asfloat((uint)(cb2_078w));
  float _645 = asfloat((uint)(cb2_077z));
  float _646 = asfloat((uint)(cb2_077w));
  float _647 = asfloat((uint)(cb2_078x));
  float _648 = asfloat((uint)(cb2_072y));
  float _649 = asfloat((uint)(cb2_072z));
  float _650 = asfloat((uint)(cb2_072w));
  float _651 = asfloat((uint)(cb2_071x));
  float _652 = asfloat((uint)(cb2_071y));
  float _653 = asfloat((uint)(cb2_076x));
  float _654 = asfloat((uint)(cb2_070w));
  float _655 = asfloat((uint)(cb2_070x));
  float _656 = asfloat((uint)(cb2_070y));
  float _657 = asfloat((uint)(cb2_070z));
  float _658 = asfloat((uint)(cb2_073x));
  float _659 = asfloat((uint)(cb2_073y));
  float _660 = asfloat((uint)(cb2_073z));
  float _661 = asfloat((uint)(cb2_071z));
  float _662 = asfloat((uint)(cb2_071w));
  float _663 = asfloat((uint)(cb2_072x));
  float _664 = max(_566, _567);
  float _665 = max(_565, _664);
  float _666 = 1.0f / _665;
  float _667 = _666 * _565;
  float _668 = _666 * _566;
  float _669 = _666 * _567;
  float _670 = abs(_667);
  float _671 = log2(_670);
  float _672 = _671 * _655;
  float _673 = exp2(_672);
  float _674 = abs(_668);
  float _675 = log2(_674);
  float _676 = _675 * _656;
  float _677 = exp2(_676);
  float _678 = abs(_669);
  float _679 = log2(_678);
  float _680 = _679 * _657;
  float _681 = exp2(_680);
  if (_577) {
    float _684 = asfloat((uint)(cb2_076w));
    float _686 = asfloat((uint)(cb2_076z));
    float _688 = asfloat((uint)(cb2_076y));
    float _689 = _686 * _566;
    float _690 = _688 * _565;
    float _691 = _684 * _567;
    float _692 = _690 + _691;
    float _693 = _692 + _689;
    _701 = _693;
  } else {
    float _695 = _662 * _566;
    float _696 = _661 * _565;
    float _697 = _663 * _567;
    float _698 = _695 + _696;
    float _699 = _698 + _697;
    _701 = _699;
  }
  float _702 = abs(_701);
  float _703 = log2(_702);
  float _704 = _703 * _654;
  float _705 = exp2(_704);
  float _706 = log2(_705);
  float _707 = _706 * _653;
  float _708 = exp2(_707);
  float _709 = select(_581, _708, _705);
  float _710 = _709 * _651;
  float _711 = _710 + _652;
  float _712 = 1.0f / _711;
  float _713 = _712 * _705;
  if (_577) {
    if (!_579) {
      float _716 = _673 * _645;
      float _717 = _677 * _646;
      float _718 = _681 * _647;
      float _719 = _717 + _716;
      float _720 = _719 + _718;
      float _721 = _677 * _643;
      float _722 = _673 * _642;
      float _723 = _681 * _644;
      float _724 = _721 + _722;
      float _725 = _724 + _723;
      float _726 = _681 * _641;
      float _727 = _677 * _640;
      float _728 = _673 * _639;
      float _729 = _727 + _728;
      float _730 = _729 + _726;
      float _731 = max(_725, _730);
      float _732 = max(_720, _731);
      float _733 = 1.0f / _732;
      float _734 = _733 * _720;
      float _735 = _733 * _725;
      float _736 = _733 * _730;
      _738 = _734;
      _739 = _735;
      _740 = _736;
    } else {
      _738 = _673;
      _739 = _677;
      _740 = _681;
    }
    float _741 = _738 * _638;
    float _742 = exp2(_741);
    float _743 = _742 * _637;
    float _744 = saturate(_743);
    float _745 = _738 * _637;
    float _746 = _738 - _745;
    float _747 = saturate(_746);
    float _748 = max(_637, _747);
    float _749 = min(_748, _744);
    float _750 = _739 * _638;
    float _751 = exp2(_750);
    float _752 = _751 * _637;
    float _753 = saturate(_752);
    float _754 = _739 * _637;
    float _755 = _739 - _754;
    float _756 = saturate(_755);
    float _757 = max(_637, _756);
    float _758 = min(_757, _753);
    float _759 = _740 * _638;
    float _760 = exp2(_759);
    float _761 = _760 * _637;
    float _762 = saturate(_761);
    float _763 = _740 * _637;
    float _764 = _740 - _763;
    float _765 = saturate(_764);
    float _766 = max(_637, _765);
    float _767 = min(_766, _762);
    _769 = _749;
    _770 = _758;
    _771 = _767;
  } else {
    _769 = _673;
    _770 = _677;
    _771 = _681;
  }
  float _772 = _769 * _661;
  float _773 = _770 * _662;
  float _774 = _773 + _772;
  float _775 = _771 * _663;
  float _776 = _774 + _775;
  float _777 = 1.0f / _776;
  float _778 = _777 * _713;
  float _779 = saturate(_778);
  float _780 = _779 * _769;
  float _781 = saturate(_780);
  float _782 = _779 * _770;
  float _783 = saturate(_782);
  float _784 = _779 * _771;
  float _785 = saturate(_784);
  float _786 = _781 * _648;
  float _787 = _648 - _786;
  float _788 = _783 * _649;
  float _789 = _649 - _788;
  float _790 = _785 * _650;
  float _791 = _650 - _790;
  float _792 = _785 * _663;
  float _793 = _781 * _661;
  float _794 = _783 * _662;
  float _795 = _713 - _793;
  float _796 = _795 - _794;
  float _797 = _796 - _792;
  float _798 = saturate(_797);
  float _799 = _789 * _662;
  float _800 = _787 * _661;
  float _801 = _791 * _663;
  float _802 = _799 + _800;
  float _803 = _802 + _801;
  float _804 = 1.0f / _803;
  float _805 = _804 * _798;
  float _806 = _805 * _787;
  float _807 = _806 + _781;
  float _808 = saturate(_807);
  float _809 = _805 * _789;
  float _810 = _809 + _783;
  float _811 = saturate(_810);
  float _812 = _805 * _791;
  float _813 = _812 + _785;
  float _814 = saturate(_813);
  float _815 = _814 * _663;
  float _816 = _808 * _661;
  float _817 = _811 * _662;
  float _818 = _713 - _816;
  float _819 = _818 - _817;
  float _820 = _819 - _815;
  float _821 = saturate(_820);
  float _822 = _821 * _658;
  float _823 = _822 + _808;
  float _824 = saturate(_823);
  float _825 = _821 * _659;
  float _826 = _825 + _811;
  float _827 = saturate(_826);
  float _828 = _821 * _660;
  float _829 = _828 + _814;
  float _830 = saturate(_829);
  if (!_575) {
    float _832 = _824 * _634;
    float _833 = _827 * _635;
    float _834 = _830 * _636;
    float _835 = _833 + _832;
    float _836 = _835 + _834;
    float _837 = _827 * _632;
    float _838 = _824 * _631;
    float _839 = _830 * _633;
    float _840 = _837 + _838;
    float _841 = _840 + _839;
    float _842 = _830 * _630;
    float _843 = _827 * _629;
    float _844 = _824 * _628;
    float _845 = _843 + _844;
    float _846 = _845 + _842;
    if (!_573) {
      float _848 = saturate(_836);
      float _849 = saturate(_841);
      float _850 = saturate(_846);
      _852 = _850;
      _853 = _849;
      _854 = _848;
    } else {
      _852 = _846;
      _853 = _841;
      _854 = _836;
    }
  } else {
    _852 = _830;
    _853 = _827;
    _854 = _824;
  }
  if (!_570) {
    float _856 = _854 * _634;
    float _857 = _853 * _634;
    float _858 = _852 * _634;
    _860 = _858;
    _861 = _857;
    _862 = _856;
  } else {
    _860 = _852;
    _861 = _853;
    _862 = _854;
  }
  if (_443) {
    float _866 = cb1_018z * 9.999999747378752e-05f;
    float _867 = _866 * _862;
    float _868 = _866 * _861;
    float _869 = _866 * _860;
    float _871 = 5000.0f / cb1_018y;
    float _872 = _867 * _871;
    float _873 = _868 * _871;
    float _874 = _869 * _871;
    _876 = _872;
    _877 = _873;
    _878 = _874;
  } else {
    _876 = _862;
    _877 = _861;
    _878 = _860;
  }
  float _879 = _876 * 1.6047500371932983f;
  float _880 = mad(-0.5310800075531006f, _877, _879);
  float _881 = mad(-0.07366999983787537f, _878, _880);
  float _882 = _876 * -0.10208000242710114f;
  float _883 = mad(1.1081299781799316f, _877, _882);
  float _884 = mad(-0.006049999967217445f, _878, _883);
  float _885 = _876 * -0.0032599999103695154f;
  float _886 = mad(-0.07275000214576721f, _877, _885);
  float _887 = mad(1.0760200023651123f, _878, _886);
  if (_443) {
    // float _889 = max(_881, 0.0f);
    // float _890 = max(_884, 0.0f);
    // float _891 = max(_887, 0.0f);
    // bool _892 = !(_889 >= 0.0030399328097701073f);
    // if (!_892) {
    //   float _894 = abs(_889);
    //   float _895 = log2(_894);
    //   float _896 = _895 * 0.4166666567325592f;
    //   float _897 = exp2(_896);
    //   float _898 = _897 * 1.0549999475479126f;
    //   float _899 = _898 + -0.054999999701976776f;
    //   _903 = _899;
    // } else {
    //   float _901 = _889 * 12.923210144042969f;
    //   _903 = _901;
    // }
    // bool _904 = !(_890 >= 0.0030399328097701073f);
    // if (!_904) {
    //   float _906 = abs(_890);
    //   float _907 = log2(_906);
    //   float _908 = _907 * 0.4166666567325592f;
    //   float _909 = exp2(_908);
    //   float _910 = _909 * 1.0549999475479126f;
    //   float _911 = _910 + -0.054999999701976776f;
    //   _915 = _911;
    // } else {
    //   float _913 = _890 * 12.923210144042969f;
    //   _915 = _913;
    // }
    // bool _916 = !(_891 >= 0.0030399328097701073f);
    // if (!_916) {
    //   float _918 = abs(_891);
    //   float _919 = log2(_918);
    //   float _920 = _919 * 0.4166666567325592f;
    //   float _921 = exp2(_920);
    //   float _922 = _921 * 1.0549999475479126f;
    //   float _923 = _922 + -0.054999999701976776f;
    //   _996 = _903;
    //   _997 = _915;
    //   _998 = _923;
    // } else {
    //   float _925 = _891 * 12.923210144042969f;
    //   _996 = _903;
    //   _997 = _915;
    //   _998 = _925;
    // }
    _996 = renodx::color::srgb::EncodeSafe(_881);
    _997 = renodx::color::srgb::EncodeSafe(_884);
    _998 = renodx::color::srgb::EncodeSafe(_887);

  } else {
    float _927 = saturate(_881);
    float _928 = saturate(_884);
    float _929 = saturate(_887);
    bool _930 = ((uint)(cb1_018w) == -2);
    if (!_930) {
      bool _932 = !(_927 >= 0.0030399328097701073f);
      if (!_932) {
        float _934 = abs(_927);
        float _935 = log2(_934);
        float _936 = _935 * 0.4166666567325592f;
        float _937 = exp2(_936);
        float _938 = _937 * 1.0549999475479126f;
        float _939 = _938 + -0.054999999701976776f;
        _943 = _939;
      } else {
        float _941 = _927 * 12.923210144042969f;
        _943 = _941;
      }
      bool _944 = !(_928 >= 0.0030399328097701073f);
      if (!_944) {
        float _946 = abs(_928);
        float _947 = log2(_946);
        float _948 = _947 * 0.4166666567325592f;
        float _949 = exp2(_948);
        float _950 = _949 * 1.0549999475479126f;
        float _951 = _950 + -0.054999999701976776f;
        _955 = _951;
      } else {
        float _953 = _928 * 12.923210144042969f;
        _955 = _953;
      }
      bool _956 = !(_929 >= 0.0030399328097701073f);
      if (!_956) {
        float _958 = abs(_929);
        float _959 = log2(_958);
        float _960 = _959 * 0.4166666567325592f;
        float _961 = exp2(_960);
        float _962 = _961 * 1.0549999475479126f;
        float _963 = _962 + -0.054999999701976776f;
        _967 = _943;
        _968 = _955;
        _969 = _963;
      } else {
        float _965 = _929 * 12.923210144042969f;
        _967 = _943;
        _968 = _955;
        _969 = _965;
      }
    } else {
      _967 = _927;
      _968 = _928;
      _969 = _929;
    }
    float _974 = abs(_967);
    float _975 = abs(_968);
    float _976 = abs(_969);
    float _977 = log2(_974);
    float _978 = log2(_975);
    float _979 = log2(_976);
    float _980 = _977 * cb2_000z;
    float _981 = _978 * cb2_000z;
    float _982 = _979 * cb2_000z;
    float _983 = exp2(_980);
    float _984 = exp2(_981);
    float _985 = exp2(_982);
    float _986 = _983 * cb2_000y;
    float _987 = _984 * cb2_000y;
    float _988 = _985 * cb2_000y;
    float _989 = _986 + cb2_000x;
    float _990 = _987 + cb2_000x;
    float _991 = _988 + cb2_000x;
    float _992 = saturate(_989);
    float _993 = saturate(_990);
    float _994 = saturate(_991);
    _996 = _992;
    _997 = _993;
    _998 = _994;
  }
  float _999 = dot(float3(_996, _997, _998), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _996;
  SV_Target.y = _997;
  SV_Target.z = _998;
  SV_Target.w = _999;
  SV_Target_1.x = _999;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
