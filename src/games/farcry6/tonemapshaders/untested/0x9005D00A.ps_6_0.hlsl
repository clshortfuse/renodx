#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = cb2_015x * TEXCOORD0_centroid.x;
  float _26 = cb2_015y * TEXCOORD0_centroid.y;
  float _29 = _25 + cb2_015z;
  float _30 = _26 + cb2_015w;
  float4 _31 = t6.SampleLevel(s0_space2, float2(_29, _30), 0.0f);
  float _35 = saturate(_31.x);
  float _36 = saturate(_31.z);
  float _39 = cb2_026x * _36;
  float _40 = _35 * 6.283199787139893f;
  float _41 = cos(_40);
  float _42 = sin(_40);
  float _43 = _39 * _41;
  float _44 = _42 * _39;
  float _45 = 1.0f - _31.y;
  float _46 = saturate(_45);
  float _47 = _43 * _46;
  float _48 = _44 * _46;
  float _49 = _47 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t1.SampleLevel(s4_space2, float2(_49, _50), 0.0f);
  float _55 = max(_51.x, 0.0f);
  float _56 = max(_51.y, 0.0f);
  float _57 = max(_51.z, 0.0f);
  float _58 = min(_55, 65000.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float4 _61 = t3.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _66 = max(_61.x, 0.0f);
  float _67 = max(_61.y, 0.0f);
  float _68 = max(_61.z, 0.0f);
  float _69 = max(_61.w, 0.0f);
  float _70 = min(_66, 5000.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _76 = _20.x * cb0_028z;
  float _77 = _76 + cb0_028x;
  float _78 = cb2_027w / _77;
  float _79 = 1.0f - _78;
  float _80 = abs(_79);
  float _82 = cb2_027y * _80;
  float _84 = _82 - cb2_027z;
  float _85 = saturate(_84);
  float _86 = max(_85, _73);
  float _87 = saturate(_86);
  float _91 = cb2_013x * _49;
  float _92 = cb2_013y * _50;
  float _95 = _91 + cb2_013z;
  float _96 = _92 + cb2_013w;
  float _99 = dot(float2(_95, _96), float2(_95, _96));
  float _100 = abs(_99);
  float _101 = log2(_100);
  float _102 = _101 * cb2_014x;
  float _103 = exp2(_102);
  float _104 = saturate(_103);
  float _108 = cb2_011x * _49;
  float _109 = cb2_011y * _50;
  float _112 = _108 + cb2_011z;
  float _113 = _109 + cb2_011w;
  float _114 = _112 * _104;
  float _115 = _113 * _104;
  float _116 = _114 + _49;
  float _117 = _115 + _50;
  float _121 = cb2_012x * _49;
  float _122 = cb2_012y * _50;
  float _125 = _121 + cb2_012z;
  float _126 = _122 + cb2_012w;
  float _127 = _125 * _104;
  float _128 = _126 * _104;
  float _129 = _127 + _49;
  float _130 = _128 + _50;
  float4 _131 = t1.SampleLevel(s2_space2, float2(_116, _117), 0.0f);
  float _135 = max(_131.x, 0.0f);
  float _136 = max(_131.y, 0.0f);
  float _137 = max(_131.z, 0.0f);
  float _138 = min(_135, 65000.0f);
  float _139 = min(_136, 65000.0f);
  float _140 = min(_137, 65000.0f);
  float4 _141 = t1.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _145 = max(_141.x, 0.0f);
  float _146 = max(_141.y, 0.0f);
  float _147 = max(_141.z, 0.0f);
  float _148 = min(_145, 65000.0f);
  float _149 = min(_146, 65000.0f);
  float _150 = min(_147, 65000.0f);
  float4 _151 = t3.SampleLevel(s2_space2, float2(_116, _117), 0.0f);
  float _155 = max(_151.x, 0.0f);
  float _156 = max(_151.y, 0.0f);
  float _157 = max(_151.z, 0.0f);
  float _158 = min(_155, 5000.0f);
  float _159 = min(_156, 5000.0f);
  float _160 = min(_157, 5000.0f);
  float4 _161 = t3.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _165 = max(_161.x, 0.0f);
  float _166 = max(_161.y, 0.0f);
  float _167 = max(_161.z, 0.0f);
  float _168 = min(_165, 5000.0f);
  float _169 = min(_166, 5000.0f);
  float _170 = min(_167, 5000.0f);
  float _175 = 1.0f - cb2_009x;
  float _176 = 1.0f - cb2_009y;
  float _177 = 1.0f - cb2_009z;
  float _182 = _175 - cb2_010x;
  float _183 = _176 - cb2_010y;
  float _184 = _177 - cb2_010z;
  float _185 = saturate(_182);
  float _186 = saturate(_183);
  float _187 = saturate(_184);
  float _188 = _185 * _58;
  float _189 = _186 * _59;
  float _190 = _187 * _60;
  float _191 = cb2_009x * _138;
  float _192 = cb2_009y * _139;
  float _193 = cb2_009z * _140;
  float _194 = _191 + _188;
  float _195 = _192 + _189;
  float _196 = _193 + _190;
  float _197 = cb2_010x * _148;
  float _198 = cb2_010y * _149;
  float _199 = cb2_010z * _150;
  float _200 = _194 + _197;
  float _201 = _195 + _198;
  float _202 = _196 + _199;
  float _203 = _185 * _70;
  float _204 = _186 * _71;
  float _205 = _187 * _72;
  float _206 = cb2_009x * _158;
  float _207 = cb2_009y * _159;
  float _208 = cb2_009z * _160;
  float _209 = cb2_010x * _168;
  float _210 = cb2_010y * _169;
  float _211 = cb2_010z * _170;
  float4 _212 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _216 = _203 - _200;
  float _217 = _216 + _206;
  float _218 = _217 + _209;
  float _219 = _204 - _201;
  float _220 = _219 + _207;
  float _221 = _220 + _210;
  float _222 = _205 - _202;
  float _223 = _222 + _208;
  float _224 = _223 + _211;
  float _225 = _218 * _87;
  float _226 = _221 * _87;
  float _227 = _224 * _87;
  float _228 = _225 + _200;
  float _229 = _226 + _201;
  float _230 = _227 + _202;
  float _231 = dot(float3(_228, _229, _230), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _235 = t0[0].SExposureData_020;
  float _237 = t0[0].SExposureData_004;
  float _239 = cb2_018x * 0.5f;
  float _240 = _239 * cb2_018y;
  float _241 = _237.x - _240;
  float _242 = cb2_018y * cb2_018x;
  float _243 = 1.0f / _242;
  float _244 = _241 * _243;
  float _245 = _231 / _235.x;
  float _246 = _245 * 5464.01611328125f;
  float _247 = _246 + 9.99999993922529e-09f;
  float _248 = log2(_247);
  float _249 = _248 - _241;
  float _250 = _249 * _243;
  float _251 = saturate(_250);
  float2 _252 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _251), 0.0f);
  float _255 = max(_252.y, 1.0000000116860974e-07f);
  float _256 = _252.x / _255;
  float _257 = _256 + _244;
  float _258 = _257 / _243;
  float _259 = _258 - _237.x;
  float _260 = -0.0f - _259;
  float _262 = _260 - cb2_027x;
  float _263 = max(0.0f, _262);
  float _265 = cb2_026z * _263;
  float _266 = _259 - cb2_027x;
  float _267 = max(0.0f, _266);
  float _269 = cb2_026w * _267;
  bool _270 = (_259 < 0.0f);
  float _271 = select(_270, _265, _269);
  float _272 = exp2(_271);
  float _273 = _272 * _228;
  float _274 = _272 * _229;
  float _275 = _272 * _230;
  float _280 = cb2_024y * _212.x;
  float _281 = cb2_024z * _212.y;
  float _282 = cb2_024w * _212.z;
  float _283 = _280 + _273;
  float _284 = _281 + _274;
  float _285 = _282 + _275;
  float _290 = _283 * cb2_025x;
  float _291 = _284 * cb2_025y;
  float _292 = _285 * cb2_025z;
  float _293 = dot(float3(_290, _291, _292), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _294 = t0[0].SExposureData_012;
  float _296 = _293 * 5464.01611328125f;
  float _297 = _296 * _294.x;
  float _298 = _297 + 9.99999993922529e-09f;
  float _299 = log2(_298);
  float _300 = _299 + 16.929765701293945f;
  float _301 = _300 * 0.05734497308731079f;
  float _302 = saturate(_301);
  float _303 = _302 * _302;
  float _304 = _302 * 2.0f;
  float _305 = 3.0f - _304;
  float _306 = _303 * _305;
  float _307 = _291 * 0.8450999855995178f;
  float _308 = _292 * 0.14589999616146088f;
  float _309 = _307 + _308;
  float _310 = _309 * 2.4890189170837402f;
  float _311 = _309 * 0.3754962384700775f;
  float _312 = _309 * 2.811495304107666f;
  float _313 = _309 * 5.519708156585693f;
  float _314 = _293 - _310;
  float _315 = _306 * _314;
  float _316 = _315 + _310;
  float _317 = _306 * 0.5f;
  float _318 = _317 + 0.5f;
  float _319 = _318 * _314;
  float _320 = _319 + _310;
  float _321 = _290 - _311;
  float _322 = _291 - _312;
  float _323 = _292 - _313;
  float _324 = _318 * _321;
  float _325 = _318 * _322;
  float _326 = _318 * _323;
  float _327 = _324 + _311;
  float _328 = _325 + _312;
  float _329 = _326 + _313;
  float _330 = 1.0f / _320;
  float _331 = _316 * _330;
  float _332 = _331 * _327;
  float _333 = _331 * _328;
  float _334 = _331 * _329;
  float _338 = cb2_020x * TEXCOORD0_centroid.x;
  float _339 = cb2_020y * TEXCOORD0_centroid.y;
  float _342 = _338 + cb2_020z;
  float _343 = _339 + cb2_020w;
  float _346 = dot(float2(_342, _343), float2(_342, _343));
  float _347 = 1.0f - _346;
  float _348 = saturate(_347);
  float _349 = log2(_348);
  float _350 = _349 * cb2_021w;
  float _351 = exp2(_350);
  float _355 = _332 - cb2_021x;
  float _356 = _333 - cb2_021y;
  float _357 = _334 - cb2_021z;
  float _358 = _355 * _351;
  float _359 = _356 * _351;
  float _360 = _357 * _351;
  float _361 = _358 + cb2_021x;
  float _362 = _359 + cb2_021y;
  float _363 = _360 + cb2_021z;
  float _364 = t0[0].SExposureData_000;
  float _366 = max(_235.x, 0.0010000000474974513f);
  float _367 = 1.0f / _366;
  float _368 = _367 * _364.x;
  bool _371 = ((uint)(cb2_069y) == 0);
  float _377;
  float _378;
  float _379;
  float _433;
  float _434;
  float _435;
  float _510;
  float _511;
  float _512;
  float _613;
  float _614;
  float _615;
  float _640;
  float _652;
  float _680;
  float _692;
  float _704;
  float _705;
  float _706;
  float _733;
  float _734;
  float _735;
  if (!_371) {
    float _373 = _368 * _361;
    float _374 = _368 * _362;
    float _375 = _368 * _363;
    _377 = _373;
    _378 = _374;
    _379 = _375;
  } else {
    _377 = _361;
    _378 = _362;
    _379 = _363;
  }
  float _380 = _377 * 0.6130970120429993f;
  float _381 = mad(0.33952298760414124f, _378, _380);
  float _382 = mad(0.04737899824976921f, _379, _381);
  float _383 = _377 * 0.07019399851560593f;
  float _384 = mad(0.9163540005683899f, _378, _383);
  float _385 = mad(0.013451999984681606f, _379, _384);
  float _386 = _377 * 0.02061600051820278f;
  float _387 = mad(0.10956999659538269f, _378, _386);
  float _388 = mad(0.8698149919509888f, _379, _387);
  float _389 = log2(_382);
  float _390 = log2(_385);
  float _391 = log2(_388);
  float _392 = _389 * 0.04211956635117531f;
  float _393 = _390 * 0.04211956635117531f;
  float _394 = _391 * 0.04211956635117531f;
  float _395 = _392 + 0.6252607107162476f;
  float _396 = _393 + 0.6252607107162476f;
  float _397 = _394 + 0.6252607107162476f;
  float4 _398 = t5.SampleLevel(s2_space2, float3(_395, _396, _397), 0.0f);
  bool _404 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_404 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _408 = cb2_017x * _398.x;
    float _409 = cb2_017x * _398.y;
    float _410 = cb2_017x * _398.z;
    float _412 = _408 + cb2_017y;
    float _413 = _409 + cb2_017y;
    float _414 = _410 + cb2_017y;
    float _415 = exp2(_412);
    float _416 = exp2(_413);
    float _417 = exp2(_414);
    float _418 = _415 + 1.0f;
    float _419 = _416 + 1.0f;
    float _420 = _417 + 1.0f;
    float _421 = 1.0f / _418;
    float _422 = 1.0f / _419;
    float _423 = 1.0f / _420;
    float _425 = cb2_017z * _421;
    float _426 = cb2_017z * _422;
    float _427 = cb2_017z * _423;
    float _429 = _425 + cb2_017w;
    float _430 = _426 + cb2_017w;
    float _431 = _427 + cb2_017w;
    _433 = _429;
    _434 = _430;
    _435 = _431;
  } else {
    _433 = _398.x;
    _434 = _398.y;
    _435 = _398.z;
  }
  float _436 = _433 * 23.0f;
  float _437 = _436 + -14.473931312561035f;
  float _438 = exp2(_437);
  float _439 = _434 * 23.0f;
  float _440 = _439 + -14.473931312561035f;
  float _441 = exp2(_440);
  float _442 = _435 * 23.0f;
  float _443 = _442 + -14.473931312561035f;
  float _444 = exp2(_443);
  float _445 = dot(float3(_438, _441, _444), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _450 = dot(float3(_438, _441, _444), float3(_438, _441, _444));
  float _451 = rsqrt(_450);
  float _452 = _451 * _438;
  float _453 = _451 * _441;
  float _454 = _451 * _444;
  float _455 = cb2_001x - _452;
  float _456 = cb2_001y - _453;
  float _457 = cb2_001z - _454;
  float _458 = dot(float3(_455, _456, _457), float3(_455, _456, _457));
  float _461 = cb2_002z * _458;
  float _463 = _461 + cb2_002w;
  float _464 = saturate(_463);
  float _466 = cb2_002x * _464;
  float _467 = _445 - _438;
  float _468 = _445 - _441;
  float _469 = _445 - _444;
  float _470 = _466 * _467;
  float _471 = _466 * _468;
  float _472 = _466 * _469;
  float _473 = _470 + _438;
  float _474 = _471 + _441;
  float _475 = _472 + _444;
  float _477 = cb2_002y * _464;
  float _478 = 0.10000000149011612f - _473;
  float _479 = 0.10000000149011612f - _474;
  float _480 = 0.10000000149011612f - _475;
  float _481 = _478 * _477;
  float _482 = _479 * _477;
  float _483 = _480 * _477;
  float _484 = _481 + _473;
  float _485 = _482 + _474;
  float _486 = _483 + _475;
  float _487 = saturate(_484);
  float _488 = saturate(_485);
  float _489 = saturate(_486);
  float _495 = cb2_016x - _487;
  float _496 = cb2_016y - _488;
  float _497 = cb2_016z - _489;
  float _498 = _495 * cb2_016w;
  float _499 = _496 * cb2_016w;
  float _500 = _497 * cb2_016w;
  float _501 = _498 + _487;
  float _502 = _499 + _488;
  float _503 = _500 + _489;
  if (_404 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _506 = cb2_024x * _501;
    float _507 = cb2_024x * _502;
    float _508 = cb2_024x * _503;
    _510 = _506;
    _511 = _507;
    _512 = _508;
  } else {
    _510 = _501;
    _511 = _502;
    _512 = _503;
  }
  float _513 = _510 * 0.9708889722824097f;
  float _514 = mad(0.026962999254465103f, _511, _513);
  float _515 = mad(0.002148000057786703f, _512, _514);
  float _516 = _510 * 0.01088900025933981f;
  float _517 = mad(0.9869629740715027f, _511, _516);
  float _518 = mad(0.002148000057786703f, _512, _517);
  float _519 = mad(0.026962999254465103f, _511, _516);
  float _520 = mad(0.9621480107307434f, _512, _519);
  if (_404) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _525 = cb1_018y * 0.10000000149011612f;
        float _526 = log2(cb1_018z);
        float _527 = _526 + -13.287712097167969f;
        float _528 = _527 * 1.4929734468460083f;
        float _529 = _528 + 18.0f;
        float _530 = exp2(_529);
        float _531 = _530 * 0.18000000715255737f;
        float _532 = abs(_531);
        float _533 = log2(_532);
        float _534 = _533 * 1.5f;
        float _535 = exp2(_534);
        float _536 = _535 * _525;
        float _537 = _536 / cb1_018z;
        float _538 = _537 + -0.07636754959821701f;
        float _539 = _533 * 1.2750000953674316f;
        float _540 = exp2(_539);
        float _541 = _540 * 0.07636754959821701f;
        float _542 = cb1_018y * 0.011232397519052029f;
        float _543 = _542 * _535;
        float _544 = _543 / cb1_018z;
        float _545 = _541 - _544;
        float _546 = _540 + -0.11232396960258484f;
        float _547 = _546 * _525;
        float _548 = _547 / cb1_018z;
        float _549 = _548 * cb1_018z;
        float _550 = abs(_515);
        float _551 = abs(_518);
        float _552 = abs(_520);
        float _553 = log2(_550);
        float _554 = log2(_551);
        float _555 = log2(_552);
        float _556 = _553 * 1.5f;
        float _557 = _554 * 1.5f;
        float _558 = _555 * 1.5f;
        float _559 = exp2(_556);
        float _560 = exp2(_557);
        float _561 = exp2(_558);
        float _562 = _559 * _549;
        float _563 = _560 * _549;
        float _564 = _561 * _549;
        float _565 = _553 * 1.2750000953674316f;
        float _566 = _554 * 1.2750000953674316f;
        float _567 = _555 * 1.2750000953674316f;
        float _568 = exp2(_565);
        float _569 = exp2(_566);
        float _570 = exp2(_567);
        float _571 = _568 * _538;
        float _572 = _569 * _538;
        float _573 = _570 * _538;
        float _574 = _571 + _545;
        float _575 = _572 + _545;
        float _576 = _573 + _545;
        float _577 = _562 / _574;
        float _578 = _563 / _575;
        float _579 = _564 / _576;
        float _580 = _577 * 9.999999747378752e-05f;
        float _581 = _578 * 9.999999747378752e-05f;
        float _582 = _579 * 9.999999747378752e-05f;
        float _583 = 5000.0f / cb1_018y;
        float _584 = _580 * _583;
        float _585 = _581 * _583;
        float _586 = _582 * _583;
        _613 = _584;
        _614 = _585;
        _615 = _586;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_515, _518, _520));
      _613 = tonemapped.x, _614 = tonemapped.y, _615 = tonemapped.z;
    }
      } else {
        float _588 = _515 + 0.020616600289940834f;
        float _589 = _518 + 0.020616600289940834f;
        float _590 = _520 + 0.020616600289940834f;
        float _591 = _588 * _515;
        float _592 = _589 * _518;
        float _593 = _590 * _520;
        float _594 = _591 + -7.456949970219284e-05f;
        float _595 = _592 + -7.456949970219284e-05f;
        float _596 = _593 + -7.456949970219284e-05f;
        float _597 = _515 * 0.9837960004806519f;
        float _598 = _518 * 0.9837960004806519f;
        float _599 = _520 * 0.9837960004806519f;
        float _600 = _597 + 0.4336790144443512f;
        float _601 = _598 + 0.4336790144443512f;
        float _602 = _599 + 0.4336790144443512f;
        float _603 = _600 * _515;
        float _604 = _601 * _518;
        float _605 = _602 * _520;
        float _606 = _603 + 0.24617899954319f;
        float _607 = _604 + 0.24617899954319f;
        float _608 = _605 + 0.24617899954319f;
        float _609 = _594 / _606;
        float _610 = _595 / _607;
        float _611 = _596 / _608;
        _613 = _609;
        _614 = _610;
        _615 = _611;
      }
      float _616 = _613 * 1.6047500371932983f;
      float _617 = mad(-0.5310800075531006f, _614, _616);
      float _618 = mad(-0.07366999983787537f, _615, _617);
      float _619 = _613 * -0.10208000242710114f;
      float _620 = mad(1.1081299781799316f, _614, _619);
      float _621 = mad(-0.006049999967217445f, _615, _620);
      float _622 = _613 * -0.0032599999103695154f;
      float _623 = mad(-0.07275000214576721f, _614, _622);
      float _624 = mad(1.0760200023651123f, _615, _623);
      if (_404) {
        // float _626 = max(_618, 0.0f);
        // float _627 = max(_621, 0.0f);
        // float _628 = max(_624, 0.0f);
        // bool _629 = !(_626 >= 0.0030399328097701073f);
        // if (!_629) {
        //   float _631 = abs(_626);
        //   float _632 = log2(_631);
        //   float _633 = _632 * 0.4166666567325592f;
        //   float _634 = exp2(_633);
        //   float _635 = _634 * 1.0549999475479126f;
        //   float _636 = _635 + -0.054999999701976776f;
        //   _640 = _636;
        // } else {
        //   float _638 = _626 * 12.923210144042969f;
        //   _640 = _638;
        // }
        // bool _641 = !(_627 >= 0.0030399328097701073f);
        // if (!_641) {
        //   float _643 = abs(_627);
        //   float _644 = log2(_643);
        //   float _645 = _644 * 0.4166666567325592f;
        //   float _646 = exp2(_645);
        //   float _647 = _646 * 1.0549999475479126f;
        //   float _648 = _647 + -0.054999999701976776f;
        //   _652 = _648;
        // } else {
        //   float _650 = _627 * 12.923210144042969f;
        //   _652 = _650;
        // }
        // bool _653 = !(_628 >= 0.0030399328097701073f);
        // if (!_653) {
        //   float _655 = abs(_628);
        //   float _656 = log2(_655);
        //   float _657 = _656 * 0.4166666567325592f;
        //   float _658 = exp2(_657);
        //   float _659 = _658 * 1.0549999475479126f;
        //   float _660 = _659 + -0.054999999701976776f;
        //   _733 = _640;
        //   _734 = _652;
        //   _735 = _660;
        // } else {
        //   float _662 = _628 * 12.923210144042969f;
        //   _733 = _640;
        //   _734 = _652;
        //   _735 = _662;
        // }
        _733 = renodx::color::srgb::EncodeSafe(_618);
        _734 = renodx::color::srgb::EncodeSafe(_621);
        _735 = renodx::color::srgb::EncodeSafe(_624);

      } else {
        float _664 = saturate(_618);
        float _665 = saturate(_621);
        float _666 = saturate(_624);
        bool _667 = ((uint)(cb1_018w) == -2);
        if (!_667) {
          bool _669 = !(_664 >= 0.0030399328097701073f);
          if (!_669) {
            float _671 = abs(_664);
            float _672 = log2(_671);
            float _673 = _672 * 0.4166666567325592f;
            float _674 = exp2(_673);
            float _675 = _674 * 1.0549999475479126f;
            float _676 = _675 + -0.054999999701976776f;
            _680 = _676;
          } else {
            float _678 = _664 * 12.923210144042969f;
            _680 = _678;
          }
          bool _681 = !(_665 >= 0.0030399328097701073f);
          if (!_681) {
            float _683 = abs(_665);
            float _684 = log2(_683);
            float _685 = _684 * 0.4166666567325592f;
            float _686 = exp2(_685);
            float _687 = _686 * 1.0549999475479126f;
            float _688 = _687 + -0.054999999701976776f;
            _692 = _688;
          } else {
            float _690 = _665 * 12.923210144042969f;
            _692 = _690;
          }
          bool _693 = !(_666 >= 0.0030399328097701073f);
          if (!_693) {
            float _695 = abs(_666);
            float _696 = log2(_695);
            float _697 = _696 * 0.4166666567325592f;
            float _698 = exp2(_697);
            float _699 = _698 * 1.0549999475479126f;
            float _700 = _699 + -0.054999999701976776f;
            _704 = _680;
            _705 = _692;
            _706 = _700;
          } else {
            float _702 = _666 * 12.923210144042969f;
            _704 = _680;
            _705 = _692;
            _706 = _702;
          }
        } else {
          _704 = _664;
          _705 = _665;
          _706 = _666;
        }
        float _711 = abs(_704);
        float _712 = abs(_705);
        float _713 = abs(_706);
        float _714 = log2(_711);
        float _715 = log2(_712);
        float _716 = log2(_713);
        float _717 = _714 * cb2_000z;
        float _718 = _715 * cb2_000z;
        float _719 = _716 * cb2_000z;
        float _720 = exp2(_717);
        float _721 = exp2(_718);
        float _722 = exp2(_719);
        float _723 = _720 * cb2_000y;
        float _724 = _721 * cb2_000y;
        float _725 = _722 * cb2_000y;
        float _726 = _723 + cb2_000x;
        float _727 = _724 + cb2_000x;
        float _728 = _725 + cb2_000x;
        float _729 = saturate(_726);
        float _730 = saturate(_727);
        float _731 = saturate(_728);
        _733 = _729;
        _734 = _730;
        _735 = _731;
      }
      float _736 = dot(float3(_733, _734, _735), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _733;
      SV_Target.y = _734;
      SV_Target.z = _735;
      SV_Target.w = _736;
      SV_Target_1.x = _736;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
