#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = max(_21.x, 0.0f);
  float _26 = max(_21.y, 0.0f);
  float _27 = max(_21.z, 0.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float _30 = min(_27, 65000.0f);
  float4 _31 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _36 = max(_31.x, 0.0f);
  float _37 = max(_31.y, 0.0f);
  float _38 = max(_31.z, 0.0f);
  float _39 = max(_31.w, 0.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _43 = min(_39, 5000.0f);
  float _46 = _19.x * cb0_028z;
  float _47 = _46 + cb0_028x;
  float _48 = cb2_027w / _47;
  float _49 = 1.0f - _48;
  float _50 = abs(_49);
  float _52 = cb2_027y * _50;
  float _54 = _52 - cb2_027z;
  float _55 = saturate(_54);
  float _56 = max(_55, _43);
  float _57 = saturate(_56);
  float _61 = cb2_013x * TEXCOORD0_centroid.x;
  float _62 = cb2_013y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_013z;
  float _66 = _62 + cb2_013w;
  float _69 = dot(float2(_65, _66), float2(_65, _66));
  float _70 = abs(_69);
  float _71 = log2(_70);
  float _72 = _71 * cb2_014x;
  float _73 = exp2(_72);
  float _74 = saturate(_73);
  float _78 = cb2_011x * TEXCOORD0_centroid.x;
  float _79 = cb2_011y * TEXCOORD0_centroid.y;
  float _82 = _78 + cb2_011z;
  float _83 = _79 + cb2_011w;
  float _84 = _82 * _74;
  float _85 = _83 * _74;
  float _86 = _84 + TEXCOORD0_centroid.x;
  float _87 = _85 + TEXCOORD0_centroid.y;
  float _91 = cb2_012x * TEXCOORD0_centroid.x;
  float _92 = cb2_012y * TEXCOORD0_centroid.y;
  float _95 = _91 + cb2_012z;
  float _96 = _92 + cb2_012w;
  float _97 = _95 * _74;
  float _98 = _96 * _74;
  float _99 = _97 + TEXCOORD0_centroid.x;
  float _100 = _98 + TEXCOORD0_centroid.y;
  float4 _101 = t1.SampleLevel(s2_space2, float2(_86, _87), 0.0f);
  float _105 = max(_101.x, 0.0f);
  float _106 = max(_101.y, 0.0f);
  float _107 = max(_101.z, 0.0f);
  float _108 = min(_105, 65000.0f);
  float _109 = min(_106, 65000.0f);
  float _110 = min(_107, 65000.0f);
  float4 _111 = t1.SampleLevel(s2_space2, float2(_99, _100), 0.0f);
  float _115 = max(_111.x, 0.0f);
  float _116 = max(_111.y, 0.0f);
  float _117 = max(_111.z, 0.0f);
  float _118 = min(_115, 65000.0f);
  float _119 = min(_116, 65000.0f);
  float _120 = min(_117, 65000.0f);
  float4 _121 = t3.SampleLevel(s2_space2, float2(_86, _87), 0.0f);
  float _125 = max(_121.x, 0.0f);
  float _126 = max(_121.y, 0.0f);
  float _127 = max(_121.z, 0.0f);
  float _128 = min(_125, 5000.0f);
  float _129 = min(_126, 5000.0f);
  float _130 = min(_127, 5000.0f);
  float4 _131 = t3.SampleLevel(s2_space2, float2(_99, _100), 0.0f);
  float _135 = max(_131.x, 0.0f);
  float _136 = max(_131.y, 0.0f);
  float _137 = max(_131.z, 0.0f);
  float _138 = min(_135, 5000.0f);
  float _139 = min(_136, 5000.0f);
  float _140 = min(_137, 5000.0f);
  float _145 = 1.0f - cb2_009x;
  float _146 = 1.0f - cb2_009y;
  float _147 = 1.0f - cb2_009z;
  float _152 = _145 - cb2_010x;
  float _153 = _146 - cb2_010y;
  float _154 = _147 - cb2_010z;
  float _155 = saturate(_152);
  float _156 = saturate(_153);
  float _157 = saturate(_154);
  float _158 = _155 * _28;
  float _159 = _156 * _29;
  float _160 = _157 * _30;
  float _161 = cb2_009x * _108;
  float _162 = cb2_009y * _109;
  float _163 = cb2_009z * _110;
  float _164 = _161 + _158;
  float _165 = _162 + _159;
  float _166 = _163 + _160;
  float _167 = cb2_010x * _118;
  float _168 = cb2_010y * _119;
  float _169 = cb2_010z * _120;
  float _170 = _164 + _167;
  float _171 = _165 + _168;
  float _172 = _166 + _169;
  float _173 = _155 * _40;
  float _174 = _156 * _41;
  float _175 = _157 * _42;
  float _176 = cb2_009x * _128;
  float _177 = cb2_009y * _129;
  float _178 = cb2_009z * _130;
  float _179 = cb2_010x * _138;
  float _180 = cb2_010y * _139;
  float _181 = cb2_010z * _140;
  float4 _182 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _186 = _173 - _170;
  float _187 = _186 + _176;
  float _188 = _187 + _179;
  float _189 = _174 - _171;
  float _190 = _189 + _177;
  float _191 = _190 + _180;
  float _192 = _175 - _172;
  float _193 = _192 + _178;
  float _194 = _193 + _181;
  float _195 = _188 * _57;
  float _196 = _191 * _57;
  float _197 = _194 * _57;
  float _198 = _195 + _170;
  float _199 = _196 + _171;
  float _200 = _197 + _172;
  float _201 = dot(float3(_198, _199, _200), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _205 = t0[0].SExposureData_020;
  float _207 = t0[0].SExposureData_004;
  float _209 = cb2_018x * 0.5f;
  float _210 = _209 * cb2_018y;
  float _211 = _207.x - _210;
  float _212 = cb2_018y * cb2_018x;
  float _213 = 1.0f / _212;
  float _214 = _211 * _213;
  float _215 = _201 / _205.x;
  float _216 = _215 * 5464.01611328125f;
  float _217 = _216 + 9.99999993922529e-09f;
  float _218 = log2(_217);
  float _219 = _218 - _211;
  float _220 = _219 * _213;
  float _221 = saturate(_220);
  float2 _222 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _221), 0.0f);
  float _225 = max(_222.y, 1.0000000116860974e-07f);
  float _226 = _222.x / _225;
  float _227 = _226 + _214;
  float _228 = _227 / _213;
  float _229 = _228 - _207.x;
  float _230 = -0.0f - _229;
  float _232 = _230 - cb2_027x;
  float _233 = max(0.0f, _232);
  float _236 = cb2_026z * _233;
  float _237 = _229 - cb2_027x;
  float _238 = max(0.0f, _237);
  float _240 = cb2_026w * _238;
  bool _241 = (_229 < 0.0f);
  float _242 = select(_241, _236, _240);
  float _243 = exp2(_242);
  float _244 = _243 * _198;
  float _245 = _243 * _199;
  float _246 = _243 * _200;
  float _251 = cb2_024y * _182.x;
  float _252 = cb2_024z * _182.y;
  float _253 = cb2_024w * _182.z;
  float _254 = _251 + _244;
  float _255 = _252 + _245;
  float _256 = _253 + _246;
  float _261 = _254 * cb2_025x;
  float _262 = _255 * cb2_025y;
  float _263 = _256 * cb2_025z;
  float _264 = dot(float3(_261, _262, _263), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _265 = t0[0].SExposureData_012;
  float _267 = _264 * 5464.01611328125f;
  float _268 = _267 * _265.x;
  float _269 = _268 + 9.99999993922529e-09f;
  float _270 = log2(_269);
  float _271 = _270 + 16.929765701293945f;
  float _272 = _271 * 0.05734497308731079f;
  float _273 = saturate(_272);
  float _274 = _273 * _273;
  float _275 = _273 * 2.0f;
  float _276 = 3.0f - _275;
  float _277 = _274 * _276;
  float _278 = _262 * 0.8450999855995178f;
  float _279 = _263 * 0.14589999616146088f;
  float _280 = _278 + _279;
  float _281 = _280 * 2.4890189170837402f;
  float _282 = _280 * 0.3754962384700775f;
  float _283 = _280 * 2.811495304107666f;
  float _284 = _280 * 5.519708156585693f;
  float _285 = _264 - _281;
  float _286 = _277 * _285;
  float _287 = _286 + _281;
  float _288 = _277 * 0.5f;
  float _289 = _288 + 0.5f;
  float _290 = _289 * _285;
  float _291 = _290 + _281;
  float _292 = _261 - _282;
  float _293 = _262 - _283;
  float _294 = _263 - _284;
  float _295 = _289 * _292;
  float _296 = _289 * _293;
  float _297 = _289 * _294;
  float _298 = _295 + _282;
  float _299 = _296 + _283;
  float _300 = _297 + _284;
  float _301 = 1.0f / _291;
  float _302 = _287 * _301;
  float _303 = _302 * _298;
  float _304 = _302 * _299;
  float _305 = _302 * _300;
  float _309 = cb2_020x * TEXCOORD0_centroid.x;
  float _310 = cb2_020y * TEXCOORD0_centroid.y;
  float _313 = _309 + cb2_020z;
  float _314 = _310 + cb2_020w;
  float _317 = dot(float2(_313, _314), float2(_313, _314));
  float _318 = 1.0f - _317;
  float _319 = saturate(_318);
  float _320 = log2(_319);
  float _321 = _320 * cb2_021w;
  float _322 = exp2(_321);
  float _326 = _303 - cb2_021x;
  float _327 = _304 - cb2_021y;
  float _328 = _305 - cb2_021z;
  float _329 = _326 * _322;
  float _330 = _327 * _322;
  float _331 = _328 * _322;
  float _332 = _329 + cb2_021x;
  float _333 = _330 + cb2_021y;
  float _334 = _331 + cb2_021z;
  float _335 = t0[0].SExposureData_000;
  float _337 = max(_205.x, 0.0010000000474974513f);
  float _338 = 1.0f / _337;
  float _339 = _338 * _335.x;
  bool _342 = ((uint)(cb2_069y) == 0);
  float _348;
  float _349;
  float _350;
  float _404;
  float _405;
  float _406;
  float _496;
  float _497;
  float _498;
  float _543;
  float _544;
  float _545;
  float _546;
  float _593;
  float _594;
  float _595;
  float _620;
  float _621;
  float _622;
  float _772;
  float _809;
  float _810;
  float _811;
  float _840;
  float _841;
  float _842;
  float _923;
  float _924;
  float _925;
  float _931;
  float _932;
  float _933;
  float _947;
  float _948;
  float _949;
  float _974;
  float _986;
  float _1014;
  float _1026;
  float _1038;
  float _1039;
  float _1040;
  float _1067;
  float _1068;
  float _1069;
  if (!_342) {
    float _344 = _339 * _332;
    float _345 = _339 * _333;
    float _346 = _339 * _334;
    _348 = _344;
    _349 = _345;
    _350 = _346;
  } else {
    _348 = _332;
    _349 = _333;
    _350 = _334;
  }
  float _351 = _348 * 0.6130970120429993f;
  float _352 = mad(0.33952298760414124f, _349, _351);
  float _353 = mad(0.04737899824976921f, _350, _352);
  float _354 = _348 * 0.07019399851560593f;
  float _355 = mad(0.9163540005683899f, _349, _354);
  float _356 = mad(0.013451999984681606f, _350, _355);
  float _357 = _348 * 0.02061600051820278f;
  float _358 = mad(0.10956999659538269f, _349, _357);
  float _359 = mad(0.8698149919509888f, _350, _358);
  float _360 = log2(_353);
  float _361 = log2(_356);
  float _362 = log2(_359);
  float _363 = _360 * 0.04211956635117531f;
  float _364 = _361 * 0.04211956635117531f;
  float _365 = _362 * 0.04211956635117531f;
  float _366 = _363 + 0.6252607107162476f;
  float _367 = _364 + 0.6252607107162476f;
  float _368 = _365 + 0.6252607107162476f;
  float4 _369 = t5.SampleLevel(s2_space2, float3(_366, _367, _368), 0.0f);
  bool _375 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_375 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _379 = cb2_017x * _369.x;
    float _380 = cb2_017x * _369.y;
    float _381 = cb2_017x * _369.z;
    float _383 = _379 + cb2_017y;
    float _384 = _380 + cb2_017y;
    float _385 = _381 + cb2_017y;
    float _386 = exp2(_383);
    float _387 = exp2(_384);
    float _388 = exp2(_385);
    float _389 = _386 + 1.0f;
    float _390 = _387 + 1.0f;
    float _391 = _388 + 1.0f;
    float _392 = 1.0f / _389;
    float _393 = 1.0f / _390;
    float _394 = 1.0f / _391;
    float _396 = cb2_017z * _392;
    float _397 = cb2_017z * _393;
    float _398 = cb2_017z * _394;
    float _400 = _396 + cb2_017w;
    float _401 = _397 + cb2_017w;
    float _402 = _398 + cb2_017w;
    _404 = _400;
    _405 = _401;
    _406 = _402;
  } else {
    _404 = _369.x;
    _405 = _369.y;
    _406 = _369.z;
  }
  float _407 = _404 * 23.0f;
  float _408 = _407 + -14.473931312561035f;
  float _409 = exp2(_408);
  float _410 = _405 * 23.0f;
  float _411 = _410 + -14.473931312561035f;
  float _412 = exp2(_411);
  float _413 = _406 * 23.0f;
  float _414 = _413 + -14.473931312561035f;
  float _415 = exp2(_414);
  float _416 = dot(float3(_409, _412, _415), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _421 = dot(float3(_409, _412, _415), float3(_409, _412, _415));
  float _422 = rsqrt(_421);
  float _423 = _422 * _409;
  float _424 = _422 * _412;
  float _425 = _422 * _415;
  float _426 = cb2_001x - _423;
  float _427 = cb2_001y - _424;
  float _428 = cb2_001z - _425;
  float _429 = dot(float3(_426, _427, _428), float3(_426, _427, _428));
  float _432 = cb2_002z * _429;
  float _434 = _432 + cb2_002w;
  float _435 = saturate(_434);
  float _437 = cb2_002x * _435;
  float _438 = _416 - _409;
  float _439 = _416 - _412;
  float _440 = _416 - _415;
  float _441 = _437 * _438;
  float _442 = _437 * _439;
  float _443 = _437 * _440;
  float _444 = _441 + _409;
  float _445 = _442 + _412;
  float _446 = _443 + _415;
  float _448 = cb2_002y * _435;
  float _449 = 0.10000000149011612f - _444;
  float _450 = 0.10000000149011612f - _445;
  float _451 = 0.10000000149011612f - _446;
  float _452 = _449 * _448;
  float _453 = _450 * _448;
  float _454 = _451 * _448;
  float _455 = _452 + _444;
  float _456 = _453 + _445;
  float _457 = _454 + _446;
  float _458 = saturate(_455);
  float _459 = saturate(_456);
  float _460 = saturate(_457);
  float _464 = cb2_004x * TEXCOORD0_centroid.x;
  float _465 = cb2_004y * TEXCOORD0_centroid.y;
  float _468 = _464 + cb2_004z;
  float _469 = _465 + cb2_004w;
  float4 _475 = t6.Sample(s2_space2, float2(_468, _469));
  float _480 = _475.x * cb2_003x;
  float _481 = _475.y * cb2_003y;
  float _482 = _475.z * cb2_003z;
  float _483 = _475.w * cb2_003w;
  float _486 = _483 + cb2_026y;
  float _487 = saturate(_486);
  bool _490 = ((uint)(cb2_069y) == 0);
  if (!_490) {
    float _492 = _480 * _339;
    float _493 = _481 * _339;
    float _494 = _482 * _339;
    _496 = _492;
    _497 = _493;
    _498 = _494;
  } else {
    _496 = _480;
    _497 = _481;
    _498 = _482;
  }
  bool _501 = ((uint)(cb2_028x) == 2);
  bool _502 = ((uint)(cb2_028x) == 3);
  int _503 = (uint)(cb2_028x) & -2;
  bool _504 = (_503 == 2);
  bool _505 = ((uint)(cb2_028x) == 6);
  bool _506 = _504 || _505;
  if (_506) {
    float _508 = _496 * _487;
    float _509 = _497 * _487;
    float _510 = _498 * _487;
    float _511 = _487 * _487;
    _543 = _508;
    _544 = _509;
    _545 = _510;
    _546 = _511;
  } else {
    bool _513 = ((uint)(cb2_028x) == 4);
    if (_513) {
      float _515 = _496 + -1.0f;
      float _516 = _497 + -1.0f;
      float _517 = _498 + -1.0f;
      float _518 = _487 + -1.0f;
      float _519 = _515 * _487;
      float _520 = _516 * _487;
      float _521 = _517 * _487;
      float _522 = _518 * _487;
      float _523 = _519 + 1.0f;
      float _524 = _520 + 1.0f;
      float _525 = _521 + 1.0f;
      float _526 = _522 + 1.0f;
      _543 = _523;
      _544 = _524;
      _545 = _525;
      _546 = _526;
    } else {
      bool _528 = ((uint)(cb2_028x) == 5);
      if (_528) {
        float _530 = _496 + -0.5f;
        float _531 = _497 + -0.5f;
        float _532 = _498 + -0.5f;
        float _533 = _487 + -0.5f;
        float _534 = _530 * _487;
        float _535 = _531 * _487;
        float _536 = _532 * _487;
        float _537 = _533 * _487;
        float _538 = _534 + 0.5f;
        float _539 = _535 + 0.5f;
        float _540 = _536 + 0.5f;
        float _541 = _537 + 0.5f;
        _543 = _538;
        _544 = _539;
        _545 = _540;
        _546 = _541;
      } else {
        _543 = _496;
        _544 = _497;
        _545 = _498;
        _546 = _487;
      }
    }
  }
  if (_501) {
    float _548 = _543 + _458;
    float _549 = _544 + _459;
    float _550 = _545 + _460;
    _593 = _548;
    _594 = _549;
    _595 = _550;
  } else {
    if (_502) {
      float _553 = 1.0f - _543;
      float _554 = 1.0f - _544;
      float _555 = 1.0f - _545;
      float _556 = _553 * _458;
      float _557 = _554 * _459;
      float _558 = _555 * _460;
      float _559 = _556 + _543;
      float _560 = _557 + _544;
      float _561 = _558 + _545;
      _593 = _559;
      _594 = _560;
      _595 = _561;
    } else {
      bool _563 = ((uint)(cb2_028x) == 4);
      if (_563) {
        float _565 = _543 * _458;
        float _566 = _544 * _459;
        float _567 = _545 * _460;
        _593 = _565;
        _594 = _566;
        _595 = _567;
      } else {
        bool _569 = ((uint)(cb2_028x) == 5);
        if (_569) {
          float _571 = _458 * 2.0f;
          float _572 = _571 * _543;
          float _573 = _459 * 2.0f;
          float _574 = _573 * _544;
          float _575 = _460 * 2.0f;
          float _576 = _575 * _545;
          _593 = _572;
          _594 = _574;
          _595 = _576;
        } else {
          if (_505) {
            float _579 = _458 - _543;
            float _580 = _459 - _544;
            float _581 = _460 - _545;
            _593 = _579;
            _594 = _580;
            _595 = _581;
          } else {
            float _583 = _543 - _458;
            float _584 = _544 - _459;
            float _585 = _545 - _460;
            float _586 = _546 * _583;
            float _587 = _546 * _584;
            float _588 = _546 * _585;
            float _589 = _586 + _458;
            float _590 = _587 + _459;
            float _591 = _588 + _460;
            _593 = _589;
            _594 = _590;
            _595 = _591;
          }
        }
      }
    }
  }
  float _601 = cb2_016x - _593;
  float _602 = cb2_016y - _594;
  float _603 = cb2_016z - _595;
  float _604 = _601 * cb2_016w;
  float _605 = _602 * cb2_016w;
  float _606 = _603 * cb2_016w;
  float _607 = _604 + _593;
  float _608 = _605 + _594;
  float _609 = _606 + _595;
  bool _612 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_612 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _616 = cb2_024x * _607;
    float _617 = cb2_024x * _608;
    float _618 = cb2_024x * _609;
    _620 = _616;
    _621 = _617;
    _622 = _618;
  } else {
    _620 = _607;
    _621 = _608;
    _622 = _609;
  }
  float _625 = _620 * 0.9708889722824097f;
  float _626 = mad(0.026962999254465103f, _621, _625);
  float _627 = mad(0.002148000057786703f, _622, _626);
  float _628 = _620 * 0.01088900025933981f;
  float _629 = mad(0.9869629740715027f, _621, _628);
  float _630 = mad(0.002148000057786703f, _622, _629);
  float _631 = mad(0.026962999254465103f, _621, _628);
  float _632 = mad(0.9621480107307434f, _622, _631);
  float _633 = max(_627, 0.0f);
  float _634 = max(_630, 0.0f);
  float _635 = max(_632, 0.0f);
  float _636 = min(_633, cb2_095y);
  float _637 = min(_634, cb2_095y);
  float _638 = min(_635, cb2_095y);
  bool _641 = ((uint)(cb2_095x) == 0);
  bool _644 = ((uint)(cb2_094w) == 0);
  bool _646 = ((uint)(cb2_094z) == 0);
  bool _648 = ((uint)(cb2_094y) != 0);
  bool _650 = ((uint)(cb2_094x) == 0);
  bool _652 = ((uint)(cb2_069z) != 0);
  float _699 = asfloat((uint)(cb2_075y));
  float _700 = asfloat((uint)(cb2_075z));
  float _701 = asfloat((uint)(cb2_075w));
  float _702 = asfloat((uint)(cb2_074z));
  float _703 = asfloat((uint)(cb2_074w));
  float _704 = asfloat((uint)(cb2_075x));
  float _705 = asfloat((uint)(cb2_073w));
  float _706 = asfloat((uint)(cb2_074x));
  float _707 = asfloat((uint)(cb2_074y));
  float _708 = asfloat((uint)(cb2_077x));
  float _709 = asfloat((uint)(cb2_077y));
  float _710 = asfloat((uint)(cb2_079x));
  float _711 = asfloat((uint)(cb2_079y));
  float _712 = asfloat((uint)(cb2_079z));
  float _713 = asfloat((uint)(cb2_078y));
  float _714 = asfloat((uint)(cb2_078z));
  float _715 = asfloat((uint)(cb2_078w));
  float _716 = asfloat((uint)(cb2_077z));
  float _717 = asfloat((uint)(cb2_077w));
  float _718 = asfloat((uint)(cb2_078x));
  float _719 = asfloat((uint)(cb2_072y));
  float _720 = asfloat((uint)(cb2_072z));
  float _721 = asfloat((uint)(cb2_072w));
  float _722 = asfloat((uint)(cb2_071x));
  float _723 = asfloat((uint)(cb2_071y));
  float _724 = asfloat((uint)(cb2_076x));
  float _725 = asfloat((uint)(cb2_070w));
  float _726 = asfloat((uint)(cb2_070x));
  float _727 = asfloat((uint)(cb2_070y));
  float _728 = asfloat((uint)(cb2_070z));
  float _729 = asfloat((uint)(cb2_073x));
  float _730 = asfloat((uint)(cb2_073y));
  float _731 = asfloat((uint)(cb2_073z));
  float _732 = asfloat((uint)(cb2_071z));
  float _733 = asfloat((uint)(cb2_071w));
  float _734 = asfloat((uint)(cb2_072x));
  float _735 = max(_637, _638);
  float _736 = max(_636, _735);
  float _737 = 1.0f / _736;
  float _738 = _737 * _636;
  float _739 = _737 * _637;
  float _740 = _737 * _638;
  float _741 = abs(_738);
  float _742 = log2(_741);
  float _743 = _742 * _726;
  float _744 = exp2(_743);
  float _745 = abs(_739);
  float _746 = log2(_745);
  float _747 = _746 * _727;
  float _748 = exp2(_747);
  float _749 = abs(_740);
  float _750 = log2(_749);
  float _751 = _750 * _728;
  float _752 = exp2(_751);
  if (_648) {
    float _755 = asfloat((uint)(cb2_076w));
    float _757 = asfloat((uint)(cb2_076z));
    float _759 = asfloat((uint)(cb2_076y));
    float _760 = _757 * _637;
    float _761 = _759 * _636;
    float _762 = _755 * _638;
    float _763 = _761 + _762;
    float _764 = _763 + _760;
    _772 = _764;
  } else {
    float _766 = _733 * _637;
    float _767 = _732 * _636;
    float _768 = _734 * _638;
    float _769 = _766 + _767;
    float _770 = _769 + _768;
    _772 = _770;
  }
  float _773 = abs(_772);
  float _774 = log2(_773);
  float _775 = _774 * _725;
  float _776 = exp2(_775);
  float _777 = log2(_776);
  float _778 = _777 * _724;
  float _779 = exp2(_778);
  float _780 = select(_652, _779, _776);
  float _781 = _780 * _722;
  float _782 = _781 + _723;
  float _783 = 1.0f / _782;
  float _784 = _783 * _776;
  if (_648) {
    if (!_650) {
      float _787 = _744 * _716;
      float _788 = _748 * _717;
      float _789 = _752 * _718;
      float _790 = _788 + _787;
      float _791 = _790 + _789;
      float _792 = _748 * _714;
      float _793 = _744 * _713;
      float _794 = _752 * _715;
      float _795 = _792 + _793;
      float _796 = _795 + _794;
      float _797 = _752 * _712;
      float _798 = _748 * _711;
      float _799 = _744 * _710;
      float _800 = _798 + _799;
      float _801 = _800 + _797;
      float _802 = max(_796, _801);
      float _803 = max(_791, _802);
      float _804 = 1.0f / _803;
      float _805 = _804 * _791;
      float _806 = _804 * _796;
      float _807 = _804 * _801;
      _809 = _805;
      _810 = _806;
      _811 = _807;
    } else {
      _809 = _744;
      _810 = _748;
      _811 = _752;
    }
    float _812 = _809 * _709;
    float _813 = exp2(_812);
    float _814 = _813 * _708;
    float _815 = saturate(_814);
    float _816 = _809 * _708;
    float _817 = _809 - _816;
    float _818 = saturate(_817);
    float _819 = max(_708, _818);
    float _820 = min(_819, _815);
    float _821 = _810 * _709;
    float _822 = exp2(_821);
    float _823 = _822 * _708;
    float _824 = saturate(_823);
    float _825 = _810 * _708;
    float _826 = _810 - _825;
    float _827 = saturate(_826);
    float _828 = max(_708, _827);
    float _829 = min(_828, _824);
    float _830 = _811 * _709;
    float _831 = exp2(_830);
    float _832 = _831 * _708;
    float _833 = saturate(_832);
    float _834 = _811 * _708;
    float _835 = _811 - _834;
    float _836 = saturate(_835);
    float _837 = max(_708, _836);
    float _838 = min(_837, _833);
    _840 = _820;
    _841 = _829;
    _842 = _838;
  } else {
    _840 = _744;
    _841 = _748;
    _842 = _752;
  }
  float _843 = _840 * _732;
  float _844 = _841 * _733;
  float _845 = _844 + _843;
  float _846 = _842 * _734;
  float _847 = _845 + _846;
  float _848 = 1.0f / _847;
  float _849 = _848 * _784;
  float _850 = saturate(_849);
  float _851 = _850 * _840;
  float _852 = saturate(_851);
  float _853 = _850 * _841;
  float _854 = saturate(_853);
  float _855 = _850 * _842;
  float _856 = saturate(_855);
  float _857 = _852 * _719;
  float _858 = _719 - _857;
  float _859 = _854 * _720;
  float _860 = _720 - _859;
  float _861 = _856 * _721;
  float _862 = _721 - _861;
  float _863 = _856 * _734;
  float _864 = _852 * _732;
  float _865 = _854 * _733;
  float _866 = _784 - _864;
  float _867 = _866 - _865;
  float _868 = _867 - _863;
  float _869 = saturate(_868);
  float _870 = _860 * _733;
  float _871 = _858 * _732;
  float _872 = _862 * _734;
  float _873 = _870 + _871;
  float _874 = _873 + _872;
  float _875 = 1.0f / _874;
  float _876 = _875 * _869;
  float _877 = _876 * _858;
  float _878 = _877 + _852;
  float _879 = saturate(_878);
  float _880 = _876 * _860;
  float _881 = _880 + _854;
  float _882 = saturate(_881);
  float _883 = _876 * _862;
  float _884 = _883 + _856;
  float _885 = saturate(_884);
  float _886 = _885 * _734;
  float _887 = _879 * _732;
  float _888 = _882 * _733;
  float _889 = _784 - _887;
  float _890 = _889 - _888;
  float _891 = _890 - _886;
  float _892 = saturate(_891);
  float _893 = _892 * _729;
  float _894 = _893 + _879;
  float _895 = saturate(_894);
  float _896 = _892 * _730;
  float _897 = _896 + _882;
  float _898 = saturate(_897);
  float _899 = _892 * _731;
  float _900 = _899 + _885;
  float _901 = saturate(_900);
  if (!_646) {
    float _903 = _895 * _705;
    float _904 = _898 * _706;
    float _905 = _901 * _707;
    float _906 = _904 + _903;
    float _907 = _906 + _905;
    float _908 = _898 * _703;
    float _909 = _895 * _702;
    float _910 = _901 * _704;
    float _911 = _908 + _909;
    float _912 = _911 + _910;
    float _913 = _901 * _701;
    float _914 = _898 * _700;
    float _915 = _895 * _699;
    float _916 = _914 + _915;
    float _917 = _916 + _913;
    if (!_644) {
      float _919 = saturate(_907);
      float _920 = saturate(_912);
      float _921 = saturate(_917);
      _923 = _921;
      _924 = _920;
      _925 = _919;
    } else {
      _923 = _917;
      _924 = _912;
      _925 = _907;
    }
  } else {
    _923 = _901;
    _924 = _898;
    _925 = _895;
  }
  if (!_641) {
    float _927 = _925 * _705;
    float _928 = _924 * _705;
    float _929 = _923 * _705;
    _931 = _929;
    _932 = _928;
    _933 = _927;
  } else {
    _931 = _923;
    _932 = _924;
    _933 = _925;
  }
  if (_612) {
    float _937 = cb1_018z * 9.999999747378752e-05f;
    float _938 = _937 * _933;
    float _939 = _937 * _932;
    float _940 = _937 * _931;
    float _942 = 5000.0f / cb1_018y;
    float _943 = _938 * _942;
    float _944 = _939 * _942;
    float _945 = _940 * _942;
    _947 = _943;
    _948 = _944;
    _949 = _945;
  } else {
    _947 = _933;
    _948 = _932;
    _949 = _931;
  }
  float _950 = _947 * 1.6047500371932983f;
  float _951 = mad(-0.5310800075531006f, _948, _950);
  float _952 = mad(-0.07366999983787537f, _949, _951);
  float _953 = _947 * -0.10208000242710114f;
  float _954 = mad(1.1081299781799316f, _948, _953);
  float _955 = mad(-0.006049999967217445f, _949, _954);
  float _956 = _947 * -0.0032599999103695154f;
  float _957 = mad(-0.07275000214576721f, _948, _956);
  float _958 = mad(1.0760200023651123f, _949, _957);
  if (_612) {
    // float _960 = max(_952, 0.0f);
    // float _961 = max(_955, 0.0f);
    // float _962 = max(_958, 0.0f);
    // bool _963 = !(_960 >= 0.0030399328097701073f);
    // if (!_963) {
    //   float _965 = abs(_960);
    //   float _966 = log2(_965);
    //   float _967 = _966 * 0.4166666567325592f;
    //   float _968 = exp2(_967);
    //   float _969 = _968 * 1.0549999475479126f;
    //   float _970 = _969 + -0.054999999701976776f;
    //   _974 = _970;
    // } else {
    //   float _972 = _960 * 12.923210144042969f;
    //   _974 = _972;
    // }
    // bool _975 = !(_961 >= 0.0030399328097701073f);
    // if (!_975) {
    //   float _977 = abs(_961);
    //   float _978 = log2(_977);
    //   float _979 = _978 * 0.4166666567325592f;
    //   float _980 = exp2(_979);
    //   float _981 = _980 * 1.0549999475479126f;
    //   float _982 = _981 + -0.054999999701976776f;
    //   _986 = _982;
    // } else {
    //   float _984 = _961 * 12.923210144042969f;
    //   _986 = _984;
    // }
    // bool _987 = !(_962 >= 0.0030399328097701073f);
    // if (!_987) {
    //   float _989 = abs(_962);
    //   float _990 = log2(_989);
    //   float _991 = _990 * 0.4166666567325592f;
    //   float _992 = exp2(_991);
    //   float _993 = _992 * 1.0549999475479126f;
    //   float _994 = _993 + -0.054999999701976776f;
    //   _1067 = _974;
    //   _1068 = _986;
    //   _1069 = _994;
    // } else {
    //   float _996 = _962 * 12.923210144042969f;
    //   _1067 = _974;
    //   _1068 = _986;
    //   _1069 = _996;
    // }
    _1067 = renodx::color::srgb::EncodeSafe(_952);
    _1068 = renodx::color::srgb::EncodeSafe(_955);
    _1069 = renodx::color::srgb::EncodeSafe(_958);

  } else {
    float _998 = saturate(_952);
    float _999 = saturate(_955);
    float _1000 = saturate(_958);
    bool _1001 = ((uint)(cb1_018w) == -2);
    if (!_1001) {
      bool _1003 = !(_998 >= 0.0030399328097701073f);
      if (!_1003) {
        float _1005 = abs(_998);
        float _1006 = log2(_1005);
        float _1007 = _1006 * 0.4166666567325592f;
        float _1008 = exp2(_1007);
        float _1009 = _1008 * 1.0549999475479126f;
        float _1010 = _1009 + -0.054999999701976776f;
        _1014 = _1010;
      } else {
        float _1012 = _998 * 12.923210144042969f;
        _1014 = _1012;
      }
      bool _1015 = !(_999 >= 0.0030399328097701073f);
      if (!_1015) {
        float _1017 = abs(_999);
        float _1018 = log2(_1017);
        float _1019 = _1018 * 0.4166666567325592f;
        float _1020 = exp2(_1019);
        float _1021 = _1020 * 1.0549999475479126f;
        float _1022 = _1021 + -0.054999999701976776f;
        _1026 = _1022;
      } else {
        float _1024 = _999 * 12.923210144042969f;
        _1026 = _1024;
      }
      bool _1027 = !(_1000 >= 0.0030399328097701073f);
      if (!_1027) {
        float _1029 = abs(_1000);
        float _1030 = log2(_1029);
        float _1031 = _1030 * 0.4166666567325592f;
        float _1032 = exp2(_1031);
        float _1033 = _1032 * 1.0549999475479126f;
        float _1034 = _1033 + -0.054999999701976776f;
        _1038 = _1014;
        _1039 = _1026;
        _1040 = _1034;
      } else {
        float _1036 = _1000 * 12.923210144042969f;
        _1038 = _1014;
        _1039 = _1026;
        _1040 = _1036;
      }
    } else {
      _1038 = _998;
      _1039 = _999;
      _1040 = _1000;
    }
    float _1045 = abs(_1038);
    float _1046 = abs(_1039);
    float _1047 = abs(_1040);
    float _1048 = log2(_1045);
    float _1049 = log2(_1046);
    float _1050 = log2(_1047);
    float _1051 = _1048 * cb2_000z;
    float _1052 = _1049 * cb2_000z;
    float _1053 = _1050 * cb2_000z;
    float _1054 = exp2(_1051);
    float _1055 = exp2(_1052);
    float _1056 = exp2(_1053);
    float _1057 = _1054 * cb2_000y;
    float _1058 = _1055 * cb2_000y;
    float _1059 = _1056 * cb2_000y;
    float _1060 = _1057 + cb2_000x;
    float _1061 = _1058 + cb2_000x;
    float _1062 = _1059 + cb2_000x;
    float _1063 = saturate(_1060);
    float _1064 = saturate(_1061);
    float _1065 = saturate(_1062);
    _1067 = _1063;
    _1068 = _1064;
    _1069 = _1065;
  }
  float _1070 = dot(float3(_1067, _1068, _1069), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1067;
  SV_Target.y = _1068;
  SV_Target.z = _1069;
  SV_Target.w = _1070;
  SV_Target_1.x = _1070;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
