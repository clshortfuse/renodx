#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = cb2_015x * TEXCOORD0_centroid.x;
  float _26 = cb2_015y * TEXCOORD0_centroid.y;
  float _29 = _25 + cb2_015z;
  float _30 = _26 + cb2_015w;
  float4 _31 = t6.SampleLevel(s0_space2, float2(_29, _30), 0.0f);
  float _35 = saturate(_31.x);
  float _36 = saturate(_31.z);
  float _39 = cb2_026x * _36;
  float _40 = _35 * 6.283199787139893f;
  float _41 = cos(_40);
  float _42 = sin(_40);
  float _43 = _39 * _41;
  float _44 = _42 * _39;
  float _45 = 1.0f - _31.y;
  float _46 = saturate(_45);
  float _47 = _43 * _46;
  float _48 = _44 * _46;
  float _49 = _47 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t1.SampleLevel(s4_space2, float2(_49, _50), 0.0f);
  float _55 = max(_51.x, 0.0f);
  float _56 = max(_51.y, 0.0f);
  float _57 = max(_51.z, 0.0f);
  float _58 = min(_55, 65000.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float4 _61 = t3.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _66 = max(_61.x, 0.0f);
  float _67 = max(_61.y, 0.0f);
  float _68 = max(_61.z, 0.0f);
  float _69 = max(_61.w, 0.0f);
  float _70 = min(_66, 5000.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _76 = _20.x * cb0_028z;
  float _77 = _76 + cb0_028x;
  float _78 = cb2_027w / _77;
  float _79 = 1.0f - _78;
  float _80 = abs(_79);
  float _82 = cb2_027y * _80;
  float _84 = _82 - cb2_027z;
  float _85 = saturate(_84);
  float _86 = max(_85, _73);
  float _87 = saturate(_86);
  float4 _88 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _92 = _70 - _58;
  float _93 = _71 - _59;
  float _94 = _72 - _60;
  float _95 = _87 * _92;
  float _96 = _87 * _93;
  float _97 = _87 * _94;
  float _98 = _95 + _58;
  float _99 = _96 + _59;
  float _100 = _97 + _60;
  float _101 = dot(float3(_98, _99, _100), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _105 = t0[0].SExposureData_020;
  float _107 = t0[0].SExposureData_004;
  float _109 = cb2_018x * 0.5f;
  float _110 = _109 * cb2_018y;
  float _111 = _107.x - _110;
  float _112 = cb2_018y * cb2_018x;
  float _113 = 1.0f / _112;
  float _114 = _111 * _113;
  float _115 = _101 / _105.x;
  float _116 = _115 * 5464.01611328125f;
  float _117 = _116 + 9.99999993922529e-09f;
  float _118 = log2(_117);
  float _119 = _118 - _111;
  float _120 = _119 * _113;
  float _121 = saturate(_120);
  float2 _122 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _121), 0.0f);
  float _125 = max(_122.y, 1.0000000116860974e-07f);
  float _126 = _122.x / _125;
  float _127 = _126 + _114;
  float _128 = _127 / _113;
  float _129 = _128 - _107.x;
  float _130 = -0.0f - _129;
  float _132 = _130 - cb2_027x;
  float _133 = max(0.0f, _132);
  float _135 = cb2_026z * _133;
  float _136 = _129 - cb2_027x;
  float _137 = max(0.0f, _136);
  float _139 = cb2_026w * _137;
  bool _140 = (_129 < 0.0f);
  float _141 = select(_140, _135, _139);
  float _142 = exp2(_141);
  float _143 = _142 * _98;
  float _144 = _142 * _99;
  float _145 = _142 * _100;
  float _150 = cb2_024y * _88.x;
  float _151 = cb2_024z * _88.y;
  float _152 = cb2_024w * _88.z;
  float _153 = _150 + _143;
  float _154 = _151 + _144;
  float _155 = _152 + _145;
  float _160 = _153 * cb2_025x;
  float _161 = _154 * cb2_025y;
  float _162 = _155 * cb2_025z;
  float _163 = dot(float3(_160, _161, _162), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _164 = t0[0].SExposureData_012;
  float _166 = _163 * 5464.01611328125f;
  float _167 = _166 * _164.x;
  float _168 = _167 + 9.99999993922529e-09f;
  float _169 = log2(_168);
  float _170 = _169 + 16.929765701293945f;
  float _171 = _170 * 0.05734497308731079f;
  float _172 = saturate(_171);
  float _173 = _172 * _172;
  float _174 = _172 * 2.0f;
  float _175 = 3.0f - _174;
  float _176 = _173 * _175;
  float _177 = _161 * 0.8450999855995178f;
  float _178 = _162 * 0.14589999616146088f;
  float _179 = _177 + _178;
  float _180 = _179 * 2.4890189170837402f;
  float _181 = _179 * 0.3754962384700775f;
  float _182 = _179 * 2.811495304107666f;
  float _183 = _179 * 5.519708156585693f;
  float _184 = _163 - _180;
  float _185 = _176 * _184;
  float _186 = _185 + _180;
  float _187 = _176 * 0.5f;
  float _188 = _187 + 0.5f;
  float _189 = _188 * _184;
  float _190 = _189 + _180;
  float _191 = _160 - _181;
  float _192 = _161 - _182;
  float _193 = _162 - _183;
  float _194 = _188 * _191;
  float _195 = _188 * _192;
  float _196 = _188 * _193;
  float _197 = _194 + _181;
  float _198 = _195 + _182;
  float _199 = _196 + _183;
  float _200 = 1.0f / _190;
  float _201 = _186 * _200;
  float _202 = _201 * _197;
  float _203 = _201 * _198;
  float _204 = _201 * _199;
  float _208 = cb2_020x * TEXCOORD0_centroid.x;
  float _209 = cb2_020y * TEXCOORD0_centroid.y;
  float _212 = _208 + cb2_020z;
  float _213 = _209 + cb2_020w;
  float _216 = dot(float2(_212, _213), float2(_212, _213));
  float _217 = 1.0f - _216;
  float _218 = saturate(_217);
  float _219 = log2(_218);
  float _220 = _219 * cb2_021w;
  float _221 = exp2(_220);
  float _225 = _202 - cb2_021x;
  float _226 = _203 - cb2_021y;
  float _227 = _204 - cb2_021z;
  float _228 = _225 * _221;
  float _229 = _226 * _221;
  float _230 = _227 * _221;
  float _231 = _228 + cb2_021x;
  float _232 = _229 + cb2_021y;
  float _233 = _230 + cb2_021z;
  float _234 = t0[0].SExposureData_000;
  float _236 = max(_105.x, 0.0010000000474974513f);
  float _237 = 1.0f / _236;
  float _238 = _237 * _234.x;
  bool _241 = ((uint)(cb2_069y) == 0);
  float _247;
  float _248;
  float _249;
  float _303;
  float _304;
  float _305;
  float _380;
  float _381;
  float _382;
  float _532;
  float _569;
  float _570;
  float _571;
  float _600;
  float _601;
  float _602;
  float _683;
  float _684;
  float _685;
  float _691;
  float _692;
  float _693;
  float _707;
  float _708;
  float _709;
  float _734;
  float _746;
  float _774;
  float _786;
  float _798;
  float _799;
  float _800;
  float _827;
  float _828;
  float _829;
  if (!_241) {
    float _243 = _238 * _231;
    float _244 = _238 * _232;
    float _245 = _238 * _233;
    _247 = _243;
    _248 = _244;
    _249 = _245;
  } else {
    _247 = _231;
    _248 = _232;
    _249 = _233;
  }
  float _250 = _247 * 0.6130970120429993f;
  float _251 = mad(0.33952298760414124f, _248, _250);
  float _252 = mad(0.04737899824976921f, _249, _251);
  float _253 = _247 * 0.07019399851560593f;
  float _254 = mad(0.9163540005683899f, _248, _253);
  float _255 = mad(0.013451999984681606f, _249, _254);
  float _256 = _247 * 0.02061600051820278f;
  float _257 = mad(0.10956999659538269f, _248, _256);
  float _258 = mad(0.8698149919509888f, _249, _257);
  float _259 = log2(_252);
  float _260 = log2(_255);
  float _261 = log2(_258);
  float _262 = _259 * 0.04211956635117531f;
  float _263 = _260 * 0.04211956635117531f;
  float _264 = _261 * 0.04211956635117531f;
  float _265 = _262 + 0.6252607107162476f;
  float _266 = _263 + 0.6252607107162476f;
  float _267 = _264 + 0.6252607107162476f;
  float4 _268 = t5.SampleLevel(s2_space2, float3(_265, _266, _267), 0.0f);
  bool _274 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_274 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _278 = cb2_017x * _268.x;
    float _279 = cb2_017x * _268.y;
    float _280 = cb2_017x * _268.z;
    float _282 = _278 + cb2_017y;
    float _283 = _279 + cb2_017y;
    float _284 = _280 + cb2_017y;
    float _285 = exp2(_282);
    float _286 = exp2(_283);
    float _287 = exp2(_284);
    float _288 = _285 + 1.0f;
    float _289 = _286 + 1.0f;
    float _290 = _287 + 1.0f;
    float _291 = 1.0f / _288;
    float _292 = 1.0f / _289;
    float _293 = 1.0f / _290;
    float _295 = cb2_017z * _291;
    float _296 = cb2_017z * _292;
    float _297 = cb2_017z * _293;
    float _299 = _295 + cb2_017w;
    float _300 = _296 + cb2_017w;
    float _301 = _297 + cb2_017w;
    _303 = _299;
    _304 = _300;
    _305 = _301;
  } else {
    _303 = _268.x;
    _304 = _268.y;
    _305 = _268.z;
  }
  float _306 = _303 * 23.0f;
  float _307 = _306 + -14.473931312561035f;
  float _308 = exp2(_307);
  float _309 = _304 * 23.0f;
  float _310 = _309 + -14.473931312561035f;
  float _311 = exp2(_310);
  float _312 = _305 * 23.0f;
  float _313 = _312 + -14.473931312561035f;
  float _314 = exp2(_313);
  float _315 = dot(float3(_308, _311, _314), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _320 = dot(float3(_308, _311, _314), float3(_308, _311, _314));
  float _321 = rsqrt(_320);
  float _322 = _321 * _308;
  float _323 = _321 * _311;
  float _324 = _321 * _314;
  float _325 = cb2_001x - _322;
  float _326 = cb2_001y - _323;
  float _327 = cb2_001z - _324;
  float _328 = dot(float3(_325, _326, _327), float3(_325, _326, _327));
  float _331 = cb2_002z * _328;
  float _333 = _331 + cb2_002w;
  float _334 = saturate(_333);
  float _336 = cb2_002x * _334;
  float _337 = _315 - _308;
  float _338 = _315 - _311;
  float _339 = _315 - _314;
  float _340 = _336 * _337;
  float _341 = _336 * _338;
  float _342 = _336 * _339;
  float _343 = _340 + _308;
  float _344 = _341 + _311;
  float _345 = _342 + _314;
  float _347 = cb2_002y * _334;
  float _348 = 0.10000000149011612f - _343;
  float _349 = 0.10000000149011612f - _344;
  float _350 = 0.10000000149011612f - _345;
  float _351 = _348 * _347;
  float _352 = _349 * _347;
  float _353 = _350 * _347;
  float _354 = _351 + _343;
  float _355 = _352 + _344;
  float _356 = _353 + _345;
  float _357 = saturate(_354);
  float _358 = saturate(_355);
  float _359 = saturate(_356);
  float _365 = cb2_016x - _357;
  float _366 = cb2_016y - _358;
  float _367 = cb2_016z - _359;
  float _368 = _365 * cb2_016w;
  float _369 = _366 * cb2_016w;
  float _370 = _367 * cb2_016w;
  float _371 = _368 + _357;
  float _372 = _369 + _358;
  float _373 = _370 + _359;
  if (_274 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _376 = cb2_024x * _371;
    float _377 = cb2_024x * _372;
    float _378 = cb2_024x * _373;
    _380 = _376;
    _381 = _377;
    _382 = _378;
  } else {
    _380 = _371;
    _381 = _372;
    _382 = _373;
  }
  float _385 = _380 * 0.9708889722824097f;
  float _386 = mad(0.026962999254465103f, _381, _385);
  float _387 = mad(0.002148000057786703f, _382, _386);
  float _388 = _380 * 0.01088900025933981f;
  float _389 = mad(0.9869629740715027f, _381, _388);
  float _390 = mad(0.002148000057786703f, _382, _389);
  float _391 = mad(0.026962999254465103f, _381, _388);
  float _392 = mad(0.9621480107307434f, _382, _391);
  float _393 = max(_387, 0.0f);
  float _394 = max(_390, 0.0f);
  float _395 = max(_392, 0.0f);
  float _396 = min(_393, cb2_095y);
  float _397 = min(_394, cb2_095y);
  float _398 = min(_395, cb2_095y);
  bool _401 = ((uint)(cb2_095x) == 0);
  bool _404 = ((uint)(cb2_094w) == 0);
  bool _406 = ((uint)(cb2_094z) == 0);
  bool _408 = ((uint)(cb2_094y) != 0);
  bool _410 = ((uint)(cb2_094x) == 0);
  bool _412 = ((uint)(cb2_069z) != 0);
  float _459 = asfloat((uint)(cb2_075y));
  float _460 = asfloat((uint)(cb2_075z));
  float _461 = asfloat((uint)(cb2_075w));
  float _462 = asfloat((uint)(cb2_074z));
  float _463 = asfloat((uint)(cb2_074w));
  float _464 = asfloat((uint)(cb2_075x));
  float _465 = asfloat((uint)(cb2_073w));
  float _466 = asfloat((uint)(cb2_074x));
  float _467 = asfloat((uint)(cb2_074y));
  float _468 = asfloat((uint)(cb2_077x));
  float _469 = asfloat((uint)(cb2_077y));
  float _470 = asfloat((uint)(cb2_079x));
  float _471 = asfloat((uint)(cb2_079y));
  float _472 = asfloat((uint)(cb2_079z));
  float _473 = asfloat((uint)(cb2_078y));
  float _474 = asfloat((uint)(cb2_078z));
  float _475 = asfloat((uint)(cb2_078w));
  float _476 = asfloat((uint)(cb2_077z));
  float _477 = asfloat((uint)(cb2_077w));
  float _478 = asfloat((uint)(cb2_078x));
  float _479 = asfloat((uint)(cb2_072y));
  float _480 = asfloat((uint)(cb2_072z));
  float _481 = asfloat((uint)(cb2_072w));
  float _482 = asfloat((uint)(cb2_071x));
  float _483 = asfloat((uint)(cb2_071y));
  float _484 = asfloat((uint)(cb2_076x));
  float _485 = asfloat((uint)(cb2_070w));
  float _486 = asfloat((uint)(cb2_070x));
  float _487 = asfloat((uint)(cb2_070y));
  float _488 = asfloat((uint)(cb2_070z));
  float _489 = asfloat((uint)(cb2_073x));
  float _490 = asfloat((uint)(cb2_073y));
  float _491 = asfloat((uint)(cb2_073z));
  float _492 = asfloat((uint)(cb2_071z));
  float _493 = asfloat((uint)(cb2_071w));
  float _494 = asfloat((uint)(cb2_072x));
  float _495 = max(_397, _398);
  float _496 = max(_396, _495);
  float _497 = 1.0f / _496;
  float _498 = _497 * _396;
  float _499 = _497 * _397;
  float _500 = _497 * _398;
  float _501 = abs(_498);
  float _502 = log2(_501);
  float _503 = _502 * _486;
  float _504 = exp2(_503);
  float _505 = abs(_499);
  float _506 = log2(_505);
  float _507 = _506 * _487;
  float _508 = exp2(_507);
  float _509 = abs(_500);
  float _510 = log2(_509);
  float _511 = _510 * _488;
  float _512 = exp2(_511);
  if (_408) {
    float _515 = asfloat((uint)(cb2_076w));
    float _517 = asfloat((uint)(cb2_076z));
    float _519 = asfloat((uint)(cb2_076y));
    float _520 = _517 * _397;
    float _521 = _519 * _396;
    float _522 = _515 * _398;
    float _523 = _521 + _522;
    float _524 = _523 + _520;
    _532 = _524;
  } else {
    float _526 = _493 * _397;
    float _527 = _492 * _396;
    float _528 = _494 * _398;
    float _529 = _526 + _527;
    float _530 = _529 + _528;
    _532 = _530;
  }
  float _533 = abs(_532);
  float _534 = log2(_533);
  float _535 = _534 * _485;
  float _536 = exp2(_535);
  float _537 = log2(_536);
  float _538 = _537 * _484;
  float _539 = exp2(_538);
  float _540 = select(_412, _539, _536);
  float _541 = _540 * _482;
  float _542 = _541 + _483;
  float _543 = 1.0f / _542;
  float _544 = _543 * _536;
  if (_408) {
    if (!_410) {
      float _547 = _504 * _476;
      float _548 = _508 * _477;
      float _549 = _512 * _478;
      float _550 = _548 + _547;
      float _551 = _550 + _549;
      float _552 = _508 * _474;
      float _553 = _504 * _473;
      float _554 = _512 * _475;
      float _555 = _552 + _553;
      float _556 = _555 + _554;
      float _557 = _512 * _472;
      float _558 = _508 * _471;
      float _559 = _504 * _470;
      float _560 = _558 + _559;
      float _561 = _560 + _557;
      float _562 = max(_556, _561);
      float _563 = max(_551, _562);
      float _564 = 1.0f / _563;
      float _565 = _564 * _551;
      float _566 = _564 * _556;
      float _567 = _564 * _561;
      _569 = _565;
      _570 = _566;
      _571 = _567;
    } else {
      _569 = _504;
      _570 = _508;
      _571 = _512;
    }
    float _572 = _569 * _469;
    float _573 = exp2(_572);
    float _574 = _573 * _468;
    float _575 = saturate(_574);
    float _576 = _569 * _468;
    float _577 = _569 - _576;
    float _578 = saturate(_577);
    float _579 = max(_468, _578);
    float _580 = min(_579, _575);
    float _581 = _570 * _469;
    float _582 = exp2(_581);
    float _583 = _582 * _468;
    float _584 = saturate(_583);
    float _585 = _570 * _468;
    float _586 = _570 - _585;
    float _587 = saturate(_586);
    float _588 = max(_468, _587);
    float _589 = min(_588, _584);
    float _590 = _571 * _469;
    float _591 = exp2(_590);
    float _592 = _591 * _468;
    float _593 = saturate(_592);
    float _594 = _571 * _468;
    float _595 = _571 - _594;
    float _596 = saturate(_595);
    float _597 = max(_468, _596);
    float _598 = min(_597, _593);
    _600 = _580;
    _601 = _589;
    _602 = _598;
  } else {
    _600 = _504;
    _601 = _508;
    _602 = _512;
  }
  float _603 = _600 * _492;
  float _604 = _601 * _493;
  float _605 = _604 + _603;
  float _606 = _602 * _494;
  float _607 = _605 + _606;
  float _608 = 1.0f / _607;
  float _609 = _608 * _544;
  float _610 = saturate(_609);
  float _611 = _610 * _600;
  float _612 = saturate(_611);
  float _613 = _610 * _601;
  float _614 = saturate(_613);
  float _615 = _610 * _602;
  float _616 = saturate(_615);
  float _617 = _612 * _479;
  float _618 = _479 - _617;
  float _619 = _614 * _480;
  float _620 = _480 - _619;
  float _621 = _616 * _481;
  float _622 = _481 - _621;
  float _623 = _616 * _494;
  float _624 = _612 * _492;
  float _625 = _614 * _493;
  float _626 = _544 - _624;
  float _627 = _626 - _625;
  float _628 = _627 - _623;
  float _629 = saturate(_628);
  float _630 = _620 * _493;
  float _631 = _618 * _492;
  float _632 = _622 * _494;
  float _633 = _630 + _631;
  float _634 = _633 + _632;
  float _635 = 1.0f / _634;
  float _636 = _635 * _629;
  float _637 = _636 * _618;
  float _638 = _637 + _612;
  float _639 = saturate(_638);
  float _640 = _636 * _620;
  float _641 = _640 + _614;
  float _642 = saturate(_641);
  float _643 = _636 * _622;
  float _644 = _643 + _616;
  float _645 = saturate(_644);
  float _646 = _645 * _494;
  float _647 = _639 * _492;
  float _648 = _642 * _493;
  float _649 = _544 - _647;
  float _650 = _649 - _648;
  float _651 = _650 - _646;
  float _652 = saturate(_651);
  float _653 = _652 * _489;
  float _654 = _653 + _639;
  float _655 = saturate(_654);
  float _656 = _652 * _490;
  float _657 = _656 + _642;
  float _658 = saturate(_657);
  float _659 = _652 * _491;
  float _660 = _659 + _645;
  float _661 = saturate(_660);
  if (!_406) {
    float _663 = _655 * _465;
    float _664 = _658 * _466;
    float _665 = _661 * _467;
    float _666 = _664 + _663;
    float _667 = _666 + _665;
    float _668 = _658 * _463;
    float _669 = _655 * _462;
    float _670 = _661 * _464;
    float _671 = _668 + _669;
    float _672 = _671 + _670;
    float _673 = _661 * _461;
    float _674 = _658 * _460;
    float _675 = _655 * _459;
    float _676 = _674 + _675;
    float _677 = _676 + _673;
    if (!_404) {
      float _679 = saturate(_667);
      float _680 = saturate(_672);
      float _681 = saturate(_677);
      _683 = _681;
      _684 = _680;
      _685 = _679;
    } else {
      _683 = _677;
      _684 = _672;
      _685 = _667;
    }
  } else {
    _683 = _661;
    _684 = _658;
    _685 = _655;
  }
  if (!_401) {
    float _687 = _685 * _465;
    float _688 = _684 * _465;
    float _689 = _683 * _465;
    _691 = _689;
    _692 = _688;
    _693 = _687;
  } else {
    _691 = _683;
    _692 = _684;
    _693 = _685;
  }
  if (_274) {
    float _697 = cb1_018z * 9.999999747378752e-05f;
    float _698 = _697 * _693;
    float _699 = _697 * _692;
    float _700 = _697 * _691;
    float _702 = 5000.0f / cb1_018y;
    float _703 = _698 * _702;
    float _704 = _699 * _702;
    float _705 = _700 * _702;
    _707 = _703;
    _708 = _704;
    _709 = _705;
  } else {
    _707 = _693;
    _708 = _692;
    _709 = _691;
  }
  float _710 = _707 * 1.6047500371932983f;
  float _711 = mad(-0.5310800075531006f, _708, _710);
  float _712 = mad(-0.07366999983787537f, _709, _711);
  float _713 = _707 * -0.10208000242710114f;
  float _714 = mad(1.1081299781799316f, _708, _713);
  float _715 = mad(-0.006049999967217445f, _709, _714);
  float _716 = _707 * -0.0032599999103695154f;
  float _717 = mad(-0.07275000214576721f, _708, _716);
  float _718 = mad(1.0760200023651123f, _709, _717);
  if (_274) {
    // float _720 = max(_712, 0.0f);
    // float _721 = max(_715, 0.0f);
    // float _722 = max(_718, 0.0f);
    // bool _723 = !(_720 >= 0.0030399328097701073f);
    // if (!_723) {
    //   float _725 = abs(_720);
    //   float _726 = log2(_725);
    //   float _727 = _726 * 0.4166666567325592f;
    //   float _728 = exp2(_727);
    //   float _729 = _728 * 1.0549999475479126f;
    //   float _730 = _729 + -0.054999999701976776f;
    //   _734 = _730;
    // } else {
    //   float _732 = _720 * 12.923210144042969f;
    //   _734 = _732;
    // }
    // bool _735 = !(_721 >= 0.0030399328097701073f);
    // if (!_735) {
    //   float _737 = abs(_721);
    //   float _738 = log2(_737);
    //   float _739 = _738 * 0.4166666567325592f;
    //   float _740 = exp2(_739);
    //   float _741 = _740 * 1.0549999475479126f;
    //   float _742 = _741 + -0.054999999701976776f;
    //   _746 = _742;
    // } else {
    //   float _744 = _721 * 12.923210144042969f;
    //   _746 = _744;
    // }
    // bool _747 = !(_722 >= 0.0030399328097701073f);
    // if (!_747) {
    //   float _749 = abs(_722);
    //   float _750 = log2(_749);
    //   float _751 = _750 * 0.4166666567325592f;
    //   float _752 = exp2(_751);
    //   float _753 = _752 * 1.0549999475479126f;
    //   float _754 = _753 + -0.054999999701976776f;
    //   _827 = _734;
    //   _828 = _746;
    //   _829 = _754;
    // } else {
    //   float _756 = _722 * 12.923210144042969f;
    //   _827 = _734;
    //   _828 = _746;
    //   _829 = _756;
    // }
    _827 = renodx::color::srgb::EncodeSafe(_712);
    _828 = renodx::color::srgb::EncodeSafe(_715);
    _829 = renodx::color::srgb::EncodeSafe(_718);

  } else {
    float _758 = saturate(_712);
    float _759 = saturate(_715);
    float _760 = saturate(_718);
    bool _761 = ((uint)(cb1_018w) == -2);
    if (!_761) {
      bool _763 = !(_758 >= 0.0030399328097701073f);
      if (!_763) {
        float _765 = abs(_758);
        float _766 = log2(_765);
        float _767 = _766 * 0.4166666567325592f;
        float _768 = exp2(_767);
        float _769 = _768 * 1.0549999475479126f;
        float _770 = _769 + -0.054999999701976776f;
        _774 = _770;
      } else {
        float _772 = _758 * 12.923210144042969f;
        _774 = _772;
      }
      bool _775 = !(_759 >= 0.0030399328097701073f);
      if (!_775) {
        float _777 = abs(_759);
        float _778 = log2(_777);
        float _779 = _778 * 0.4166666567325592f;
        float _780 = exp2(_779);
        float _781 = _780 * 1.0549999475479126f;
        float _782 = _781 + -0.054999999701976776f;
        _786 = _782;
      } else {
        float _784 = _759 * 12.923210144042969f;
        _786 = _784;
      }
      bool _787 = !(_760 >= 0.0030399328097701073f);
      if (!_787) {
        float _789 = abs(_760);
        float _790 = log2(_789);
        float _791 = _790 * 0.4166666567325592f;
        float _792 = exp2(_791);
        float _793 = _792 * 1.0549999475479126f;
        float _794 = _793 + -0.054999999701976776f;
        _798 = _774;
        _799 = _786;
        _800 = _794;
      } else {
        float _796 = _760 * 12.923210144042969f;
        _798 = _774;
        _799 = _786;
        _800 = _796;
      }
    } else {
      _798 = _758;
      _799 = _759;
      _800 = _760;
    }
    float _805 = abs(_798);
    float _806 = abs(_799);
    float _807 = abs(_800);
    float _808 = log2(_805);
    float _809 = log2(_806);
    float _810 = log2(_807);
    float _811 = _808 * cb2_000z;
    float _812 = _809 * cb2_000z;
    float _813 = _810 * cb2_000z;
    float _814 = exp2(_811);
    float _815 = exp2(_812);
    float _816 = exp2(_813);
    float _817 = _814 * cb2_000y;
    float _818 = _815 * cb2_000y;
    float _819 = _816 * cb2_000y;
    float _820 = _817 + cb2_000x;
    float _821 = _818 + cb2_000x;
    float _822 = _819 + cb2_000x;
    float _823 = saturate(_820);
    float _824 = saturate(_821);
    float _825 = saturate(_822);
    _827 = _823;
    _828 = _824;
    _829 = _825;
  }
  float _830 = dot(float3(_827, _828, _829), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _827;
  SV_Target.y = _828;
  SV_Target.z = _829;
  SV_Target.w = _830;
  SV_Target_1.x = _830;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
