#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = max(_27.x, 0.0f);
  float _32 = max(_27.y, 0.0f);
  float _33 = max(_27.z, 0.0f);
  float _34 = min(_31, 65000.0f);
  float _35 = min(_32, 65000.0f);
  float _36 = min(_33, 65000.0f);
  float4 _37 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _42 = max(_37.x, 0.0f);
  float _43 = max(_37.y, 0.0f);
  float _44 = max(_37.z, 0.0f);
  float _45 = max(_37.w, 0.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _48 = min(_44, 5000.0f);
  float _49 = min(_45, 5000.0f);
  float _52 = _25.x * cb0_028z;
  float _53 = _52 + cb0_028x;
  float _54 = cb2_027w / _53;
  float _55 = 1.0f - _54;
  float _56 = abs(_55);
  float _58 = cb2_027y * _56;
  float _60 = _58 - cb2_027z;
  float _61 = saturate(_60);
  float _62 = max(_61, _49);
  float _63 = saturate(_62);
  float _67 = cb2_006x * TEXCOORD0_centroid.x;
  float _68 = cb2_006y * TEXCOORD0_centroid.y;
  float _71 = _67 + cb2_006z;
  float _72 = _68 + cb2_006w;
  float _76 = cb2_007x * TEXCOORD0_centroid.x;
  float _77 = cb2_007y * TEXCOORD0_centroid.y;
  float _80 = _76 + cb2_007z;
  float _81 = _77 + cb2_007w;
  float _85 = cb2_008x * TEXCOORD0_centroid.x;
  float _86 = cb2_008y * TEXCOORD0_centroid.y;
  float _89 = _85 + cb2_008z;
  float _90 = _86 + cb2_008w;
  float4 _91 = t1.SampleLevel(s2_space2, float2(_71, _72), 0.0f);
  float _93 = max(_91.x, 0.0f);
  float _94 = min(_93, 65000.0f);
  float4 _95 = t1.SampleLevel(s2_space2, float2(_80, _81), 0.0f);
  float _97 = max(_95.y, 0.0f);
  float _98 = min(_97, 65000.0f);
  float4 _99 = t1.SampleLevel(s2_space2, float2(_89, _90), 0.0f);
  float _101 = max(_99.z, 0.0f);
  float _102 = min(_101, 65000.0f);
  float4 _103 = t4.SampleLevel(s2_space2, float2(_71, _72), 0.0f);
  float _105 = max(_103.x, 0.0f);
  float _106 = min(_105, 5000.0f);
  float4 _107 = t4.SampleLevel(s2_space2, float2(_80, _81), 0.0f);
  float _109 = max(_107.y, 0.0f);
  float _110 = min(_109, 5000.0f);
  float4 _111 = t4.SampleLevel(s2_space2, float2(_89, _90), 0.0f);
  float _113 = max(_111.z, 0.0f);
  float _114 = min(_113, 5000.0f);
  float4 _115 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _121 = cb2_005x * _115.x;
  float _122 = cb2_005x * _115.y;
  float _123 = cb2_005x * _115.z;
  float _124 = _94 - _34;
  float _125 = _98 - _35;
  float _126 = _102 - _36;
  float _127 = _121 * _124;
  float _128 = _122 * _125;
  float _129 = _123 * _126;
  float _130 = _127 + _34;
  float _131 = _128 + _35;
  float _132 = _129 + _36;
  float _133 = _106 - _46;
  float _134 = _110 - _47;
  float _135 = _114 - _48;
  float _136 = _121 * _133;
  float _137 = _122 * _134;
  float _138 = _123 * _135;
  float _139 = _136 + _46;
  float _140 = _137 + _47;
  float _141 = _138 + _48;
  float4 _142 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _146 = _139 - _130;
  float _147 = _140 - _131;
  float _148 = _141 - _132;
  float _149 = _146 * _63;
  float _150 = _147 * _63;
  float _151 = _148 * _63;
  float _152 = _149 + _130;
  float _153 = _150 + _131;
  float _154 = _151 + _132;
  float _155 = dot(float3(_152, _153, _154), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _159 = t0[0].SExposureData_020;
  float _161 = t0[0].SExposureData_004;
  float _163 = cb2_018x * 0.5f;
  float _164 = _163 * cb2_018y;
  float _165 = _161.x - _164;
  float _166 = cb2_018y * cb2_018x;
  float _167 = 1.0f / _166;
  float _168 = _165 * _167;
  float _169 = _155 / _159.x;
  float _170 = _169 * 5464.01611328125f;
  float _171 = _170 + 9.99999993922529e-09f;
  float _172 = log2(_171);
  float _173 = _172 - _165;
  float _174 = _173 * _167;
  float _175 = saturate(_174);
  float2 _176 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _175), 0.0f);
  float _179 = max(_176.y, 1.0000000116860974e-07f);
  float _180 = _176.x / _179;
  float _181 = _180 + _168;
  float _182 = _181 / _167;
  float _183 = _182 - _161.x;
  float _184 = -0.0f - _183;
  float _186 = _184 - cb2_027x;
  float _187 = max(0.0f, _186);
  float _190 = cb2_026z * _187;
  float _191 = _183 - cb2_027x;
  float _192 = max(0.0f, _191);
  float _194 = cb2_026w * _192;
  bool _195 = (_183 < 0.0f);
  float _196 = select(_195, _190, _194);
  float _197 = exp2(_196);
  float _198 = _197 * _152;
  float _199 = _197 * _153;
  float _200 = _197 * _154;
  float _205 = cb2_024y * _142.x;
  float _206 = cb2_024z * _142.y;
  float _207 = cb2_024w * _142.z;
  float _208 = _205 + _198;
  float _209 = _206 + _199;
  float _210 = _207 + _200;
  float _215 = _208 * cb2_025x;
  float _216 = _209 * cb2_025y;
  float _217 = _210 * cb2_025z;
  float _218 = dot(float3(_215, _216, _217), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _219 = t0[0].SExposureData_012;
  float _221 = _218 * 5464.01611328125f;
  float _222 = _221 * _219.x;
  float _223 = _222 + 9.99999993922529e-09f;
  float _224 = log2(_223);
  float _225 = _224 + 16.929765701293945f;
  float _226 = _225 * 0.05734497308731079f;
  float _227 = saturate(_226);
  float _228 = _227 * _227;
  float _229 = _227 * 2.0f;
  float _230 = 3.0f - _229;
  float _231 = _228 * _230;
  float _232 = _216 * 0.8450999855995178f;
  float _233 = _217 * 0.14589999616146088f;
  float _234 = _232 + _233;
  float _235 = _234 * 2.4890189170837402f;
  float _236 = _234 * 0.3754962384700775f;
  float _237 = _234 * 2.811495304107666f;
  float _238 = _234 * 5.519708156585693f;
  float _239 = _218 - _235;
  float _240 = _231 * _239;
  float _241 = _240 + _235;
  float _242 = _231 * 0.5f;
  float _243 = _242 + 0.5f;
  float _244 = _243 * _239;
  float _245 = _244 + _235;
  float _246 = _215 - _236;
  float _247 = _216 - _237;
  float _248 = _217 - _238;
  float _249 = _243 * _246;
  float _250 = _243 * _247;
  float _251 = _243 * _248;
  float _252 = _249 + _236;
  float _253 = _250 + _237;
  float _254 = _251 + _238;
  float _255 = 1.0f / _245;
  float _256 = _241 * _255;
  float _257 = _256 * _252;
  float _258 = _256 * _253;
  float _259 = _256 * _254;
  float _263 = cb2_020x * TEXCOORD0_centroid.x;
  float _264 = cb2_020y * TEXCOORD0_centroid.y;
  float _267 = _263 + cb2_020z;
  float _268 = _264 + cb2_020w;
  float _271 = dot(float2(_267, _268), float2(_267, _268));
  float _272 = 1.0f - _271;
  float _273 = saturate(_272);
  float _274 = log2(_273);
  float _275 = _274 * cb2_021w;
  float _276 = exp2(_275);
  float _280 = _257 - cb2_021x;
  float _281 = _258 - cb2_021y;
  float _282 = _259 - cb2_021z;
  float _283 = _280 * _276;
  float _284 = _281 * _276;
  float _285 = _282 * _276;
  float _286 = _283 + cb2_021x;
  float _287 = _284 + cb2_021y;
  float _288 = _285 + cb2_021z;
  float _289 = t0[0].SExposureData_000;
  float _291 = max(_159.x, 0.0010000000474974513f);
  float _292 = 1.0f / _291;
  float _293 = _292 * _289.x;
  bool _296 = ((uint)(cb2_069y) == 0);
  float _302;
  float _303;
  float _304;
  float _358;
  float _359;
  float _360;
  float _406;
  float _407;
  float _408;
  float _453;
  float _454;
  float _455;
  float _456;
  float _505;
  float _506;
  float _507;
  float _508;
  float _533;
  float _534;
  float _535;
  float _685;
  float _722;
  float _723;
  float _724;
  float _753;
  float _754;
  float _755;
  float _836;
  float _837;
  float _838;
  float _844;
  float _845;
  float _846;
  float _860;
  float _861;
  float _862;
  float _887;
  float _899;
  float _927;
  float _939;
  float _951;
  float _952;
  float _953;
  float _980;
  float _981;
  float _982;
  if (!_296) {
    float _298 = _293 * _286;
    float _299 = _293 * _287;
    float _300 = _293 * _288;
    _302 = _298;
    _303 = _299;
    _304 = _300;
  } else {
    _302 = _286;
    _303 = _287;
    _304 = _288;
  }
  float _305 = _302 * 0.6130970120429993f;
  float _306 = mad(0.33952298760414124f, _303, _305);
  float _307 = mad(0.04737899824976921f, _304, _306);
  float _308 = _302 * 0.07019399851560593f;
  float _309 = mad(0.9163540005683899f, _303, _308);
  float _310 = mad(0.013451999984681606f, _304, _309);
  float _311 = _302 * 0.02061600051820278f;
  float _312 = mad(0.10956999659538269f, _303, _311);
  float _313 = mad(0.8698149919509888f, _304, _312);
  float _314 = log2(_307);
  float _315 = log2(_310);
  float _316 = log2(_313);
  float _317 = _314 * 0.04211956635117531f;
  float _318 = _315 * 0.04211956635117531f;
  float _319 = _316 * 0.04211956635117531f;
  float _320 = _317 + 0.6252607107162476f;
  float _321 = _318 + 0.6252607107162476f;
  float _322 = _319 + 0.6252607107162476f;
  float4 _323 = t6.SampleLevel(s2_space2, float3(_320, _321, _322), 0.0f);
  bool _329 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_329 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _333 = cb2_017x * _323.x;
    float _334 = cb2_017x * _323.y;
    float _335 = cb2_017x * _323.z;
    float _337 = _333 + cb2_017y;
    float _338 = _334 + cb2_017y;
    float _339 = _335 + cb2_017y;
    float _340 = exp2(_337);
    float _341 = exp2(_338);
    float _342 = exp2(_339);
    float _343 = _340 + 1.0f;
    float _344 = _341 + 1.0f;
    float _345 = _342 + 1.0f;
    float _346 = 1.0f / _343;
    float _347 = 1.0f / _344;
    float _348 = 1.0f / _345;
    float _350 = cb2_017z * _346;
    float _351 = cb2_017z * _347;
    float _352 = cb2_017z * _348;
    float _354 = _350 + cb2_017w;
    float _355 = _351 + cb2_017w;
    float _356 = _352 + cb2_017w;
    _358 = _354;
    _359 = _355;
    _360 = _356;
  } else {
    _358 = _323.x;
    _359 = _323.y;
    _360 = _323.z;
  }
  float _361 = _358 * 23.0f;
  float _362 = _361 + -14.473931312561035f;
  float _363 = exp2(_362);
  float _364 = _359 * 23.0f;
  float _365 = _364 + -14.473931312561035f;
  float _366 = exp2(_365);
  float _367 = _360 * 23.0f;
  float _368 = _367 + -14.473931312561035f;
  float _369 = exp2(_368);
  float _374 = cb2_004x * TEXCOORD0_centroid.x;
  float _375 = cb2_004y * TEXCOORD0_centroid.y;
  float _378 = _374 + cb2_004z;
  float _379 = _375 + cb2_004w;
  float4 _385 = t8.Sample(s2_space2, float2(_378, _379));
  float _390 = _385.x * cb2_003x;
  float _391 = _385.y * cb2_003y;
  float _392 = _385.z * cb2_003z;
  float _393 = _385.w * cb2_003w;
  float _396 = _393 + cb2_026y;
  float _397 = saturate(_396);
  bool _400 = ((uint)(cb2_069y) == 0);
  if (!_400) {
    float _402 = _390 * _293;
    float _403 = _391 * _293;
    float _404 = _392 * _293;
    _406 = _402;
    _407 = _403;
    _408 = _404;
  } else {
    _406 = _390;
    _407 = _391;
    _408 = _392;
  }
  bool _411 = ((uint)(cb2_028x) == 2);
  bool _412 = ((uint)(cb2_028x) == 3);
  int _413 = (uint)(cb2_028x) & -2;
  bool _414 = (_413 == 2);
  bool _415 = ((uint)(cb2_028x) == 6);
  bool _416 = _414 || _415;
  if (_416) {
    float _418 = _406 * _397;
    float _419 = _407 * _397;
    float _420 = _408 * _397;
    float _421 = _397 * _397;
    _453 = _418;
    _454 = _419;
    _455 = _420;
    _456 = _421;
  } else {
    bool _423 = ((uint)(cb2_028x) == 4);
    if (_423) {
      float _425 = _406 + -1.0f;
      float _426 = _407 + -1.0f;
      float _427 = _408 + -1.0f;
      float _428 = _397 + -1.0f;
      float _429 = _425 * _397;
      float _430 = _426 * _397;
      float _431 = _427 * _397;
      float _432 = _428 * _397;
      float _433 = _429 + 1.0f;
      float _434 = _430 + 1.0f;
      float _435 = _431 + 1.0f;
      float _436 = _432 + 1.0f;
      _453 = _433;
      _454 = _434;
      _455 = _435;
      _456 = _436;
    } else {
      bool _438 = ((uint)(cb2_028x) == 5);
      if (_438) {
        float _440 = _406 + -0.5f;
        float _441 = _407 + -0.5f;
        float _442 = _408 + -0.5f;
        float _443 = _397 + -0.5f;
        float _444 = _440 * _397;
        float _445 = _441 * _397;
        float _446 = _442 * _397;
        float _447 = _443 * _397;
        float _448 = _444 + 0.5f;
        float _449 = _445 + 0.5f;
        float _450 = _446 + 0.5f;
        float _451 = _447 + 0.5f;
        _453 = _448;
        _454 = _449;
        _455 = _450;
        _456 = _451;
      } else {
        _453 = _406;
        _454 = _407;
        _455 = _408;
        _456 = _397;
      }
    }
  }
  if (_411) {
    float _458 = _453 + _363;
    float _459 = _454 + _366;
    float _460 = _455 + _369;
    _505 = _458;
    _506 = _459;
    _507 = _460;
    _508 = cb2_025w;
  } else {
    if (_412) {
      float _463 = 1.0f - _453;
      float _464 = 1.0f - _454;
      float _465 = 1.0f - _455;
      float _466 = _463 * _363;
      float _467 = _464 * _366;
      float _468 = _465 * _369;
      float _469 = _466 + _453;
      float _470 = _467 + _454;
      float _471 = _468 + _455;
      _505 = _469;
      _506 = _470;
      _507 = _471;
      _508 = cb2_025w;
    } else {
      bool _473 = ((uint)(cb2_028x) == 4);
      if (_473) {
        float _475 = _453 * _363;
        float _476 = _454 * _366;
        float _477 = _455 * _369;
        _505 = _475;
        _506 = _476;
        _507 = _477;
        _508 = cb2_025w;
      } else {
        bool _479 = ((uint)(cb2_028x) == 5);
        if (_479) {
          float _481 = _363 * 2.0f;
          float _482 = _481 * _453;
          float _483 = _366 * 2.0f;
          float _484 = _483 * _454;
          float _485 = _369 * 2.0f;
          float _486 = _485 * _455;
          _505 = _482;
          _506 = _484;
          _507 = _486;
          _508 = cb2_025w;
        } else {
          if (_415) {
            float _489 = _363 - _453;
            float _490 = _366 - _454;
            float _491 = _369 - _455;
            _505 = _489;
            _506 = _490;
            _507 = _491;
            _508 = cb2_025w;
          } else {
            float _493 = _453 - _363;
            float _494 = _454 - _366;
            float _495 = _455 - _369;
            float _496 = _456 * _493;
            float _497 = _456 * _494;
            float _498 = _456 * _495;
            float _499 = _496 + _363;
            float _500 = _497 + _366;
            float _501 = _498 + _369;
            float _502 = 1.0f - _456;
            float _503 = _502 * cb2_025w;
            _505 = _499;
            _506 = _500;
            _507 = _501;
            _508 = _503;
          }
        }
      }
    }
  }
  float _514 = cb2_016x - _505;
  float _515 = cb2_016y - _506;
  float _516 = cb2_016z - _507;
  float _517 = _514 * cb2_016w;
  float _518 = _515 * cb2_016w;
  float _519 = _516 * cb2_016w;
  float _520 = _517 + _505;
  float _521 = _518 + _506;
  float _522 = _519 + _507;
  bool _525 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_525 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _529 = cb2_024x * _520;
    float _530 = cb2_024x * _521;
    float _531 = cb2_024x * _522;
    _533 = _529;
    _534 = _530;
    _535 = _531;
  } else {
    _533 = _520;
    _534 = _521;
    _535 = _522;
  }
  float _538 = _533 * 0.9708889722824097f;
  float _539 = mad(0.026962999254465103f, _534, _538);
  float _540 = mad(0.002148000057786703f, _535, _539);
  float _541 = _533 * 0.01088900025933981f;
  float _542 = mad(0.9869629740715027f, _534, _541);
  float _543 = mad(0.002148000057786703f, _535, _542);
  float _544 = mad(0.026962999254465103f, _534, _541);
  float _545 = mad(0.9621480107307434f, _535, _544);
  float _546 = max(_540, 0.0f);
  float _547 = max(_543, 0.0f);
  float _548 = max(_545, 0.0f);
  float _549 = min(_546, cb2_095y);
  float _550 = min(_547, cb2_095y);
  float _551 = min(_548, cb2_095y);
  bool _554 = ((uint)(cb2_095x) == 0);
  bool _557 = ((uint)(cb2_094w) == 0);
  bool _559 = ((uint)(cb2_094z) == 0);
  bool _561 = ((uint)(cb2_094y) != 0);
  bool _563 = ((uint)(cb2_094x) == 0);
  bool _565 = ((uint)(cb2_069z) != 0);
  float _612 = asfloat((uint)(cb2_075y));
  float _613 = asfloat((uint)(cb2_075z));
  float _614 = asfloat((uint)(cb2_075w));
  float _615 = asfloat((uint)(cb2_074z));
  float _616 = asfloat((uint)(cb2_074w));
  float _617 = asfloat((uint)(cb2_075x));
  float _618 = asfloat((uint)(cb2_073w));
  float _619 = asfloat((uint)(cb2_074x));
  float _620 = asfloat((uint)(cb2_074y));
  float _621 = asfloat((uint)(cb2_077x));
  float _622 = asfloat((uint)(cb2_077y));
  float _623 = asfloat((uint)(cb2_079x));
  float _624 = asfloat((uint)(cb2_079y));
  float _625 = asfloat((uint)(cb2_079z));
  float _626 = asfloat((uint)(cb2_078y));
  float _627 = asfloat((uint)(cb2_078z));
  float _628 = asfloat((uint)(cb2_078w));
  float _629 = asfloat((uint)(cb2_077z));
  float _630 = asfloat((uint)(cb2_077w));
  float _631 = asfloat((uint)(cb2_078x));
  float _632 = asfloat((uint)(cb2_072y));
  float _633 = asfloat((uint)(cb2_072z));
  float _634 = asfloat((uint)(cb2_072w));
  float _635 = asfloat((uint)(cb2_071x));
  float _636 = asfloat((uint)(cb2_071y));
  float _637 = asfloat((uint)(cb2_076x));
  float _638 = asfloat((uint)(cb2_070w));
  float _639 = asfloat((uint)(cb2_070x));
  float _640 = asfloat((uint)(cb2_070y));
  float _641 = asfloat((uint)(cb2_070z));
  float _642 = asfloat((uint)(cb2_073x));
  float _643 = asfloat((uint)(cb2_073y));
  float _644 = asfloat((uint)(cb2_073z));
  float _645 = asfloat((uint)(cb2_071z));
  float _646 = asfloat((uint)(cb2_071w));
  float _647 = asfloat((uint)(cb2_072x));
  float _648 = max(_550, _551);
  float _649 = max(_549, _648);
  float _650 = 1.0f / _649;
  float _651 = _650 * _549;
  float _652 = _650 * _550;
  float _653 = _650 * _551;
  float _654 = abs(_651);
  float _655 = log2(_654);
  float _656 = _655 * _639;
  float _657 = exp2(_656);
  float _658 = abs(_652);
  float _659 = log2(_658);
  float _660 = _659 * _640;
  float _661 = exp2(_660);
  float _662 = abs(_653);
  float _663 = log2(_662);
  float _664 = _663 * _641;
  float _665 = exp2(_664);
  if (_561) {
    float _668 = asfloat((uint)(cb2_076w));
    float _670 = asfloat((uint)(cb2_076z));
    float _672 = asfloat((uint)(cb2_076y));
    float _673 = _670 * _550;
    float _674 = _672 * _549;
    float _675 = _668 * _551;
    float _676 = _674 + _675;
    float _677 = _676 + _673;
    _685 = _677;
  } else {
    float _679 = _646 * _550;
    float _680 = _645 * _549;
    float _681 = _647 * _551;
    float _682 = _679 + _680;
    float _683 = _682 + _681;
    _685 = _683;
  }
  float _686 = abs(_685);
  float _687 = log2(_686);
  float _688 = _687 * _638;
  float _689 = exp2(_688);
  float _690 = log2(_689);
  float _691 = _690 * _637;
  float _692 = exp2(_691);
  float _693 = select(_565, _692, _689);
  float _694 = _693 * _635;
  float _695 = _694 + _636;
  float _696 = 1.0f / _695;
  float _697 = _696 * _689;
  if (_561) {
    if (!_563) {
      float _700 = _657 * _629;
      float _701 = _661 * _630;
      float _702 = _665 * _631;
      float _703 = _701 + _700;
      float _704 = _703 + _702;
      float _705 = _661 * _627;
      float _706 = _657 * _626;
      float _707 = _665 * _628;
      float _708 = _705 + _706;
      float _709 = _708 + _707;
      float _710 = _665 * _625;
      float _711 = _661 * _624;
      float _712 = _657 * _623;
      float _713 = _711 + _712;
      float _714 = _713 + _710;
      float _715 = max(_709, _714);
      float _716 = max(_704, _715);
      float _717 = 1.0f / _716;
      float _718 = _717 * _704;
      float _719 = _717 * _709;
      float _720 = _717 * _714;
      _722 = _718;
      _723 = _719;
      _724 = _720;
    } else {
      _722 = _657;
      _723 = _661;
      _724 = _665;
    }
    float _725 = _722 * _622;
    float _726 = exp2(_725);
    float _727 = _726 * _621;
    float _728 = saturate(_727);
    float _729 = _722 * _621;
    float _730 = _722 - _729;
    float _731 = saturate(_730);
    float _732 = max(_621, _731);
    float _733 = min(_732, _728);
    float _734 = _723 * _622;
    float _735 = exp2(_734);
    float _736 = _735 * _621;
    float _737 = saturate(_736);
    float _738 = _723 * _621;
    float _739 = _723 - _738;
    float _740 = saturate(_739);
    float _741 = max(_621, _740);
    float _742 = min(_741, _737);
    float _743 = _724 * _622;
    float _744 = exp2(_743);
    float _745 = _744 * _621;
    float _746 = saturate(_745);
    float _747 = _724 * _621;
    float _748 = _724 - _747;
    float _749 = saturate(_748);
    float _750 = max(_621, _749);
    float _751 = min(_750, _746);
    _753 = _733;
    _754 = _742;
    _755 = _751;
  } else {
    _753 = _657;
    _754 = _661;
    _755 = _665;
  }
  float _756 = _753 * _645;
  float _757 = _754 * _646;
  float _758 = _757 + _756;
  float _759 = _755 * _647;
  float _760 = _758 + _759;
  float _761 = 1.0f / _760;
  float _762 = _761 * _697;
  float _763 = saturate(_762);
  float _764 = _763 * _753;
  float _765 = saturate(_764);
  float _766 = _763 * _754;
  float _767 = saturate(_766);
  float _768 = _763 * _755;
  float _769 = saturate(_768);
  float _770 = _765 * _632;
  float _771 = _632 - _770;
  float _772 = _767 * _633;
  float _773 = _633 - _772;
  float _774 = _769 * _634;
  float _775 = _634 - _774;
  float _776 = _769 * _647;
  float _777 = _765 * _645;
  float _778 = _767 * _646;
  float _779 = _697 - _777;
  float _780 = _779 - _778;
  float _781 = _780 - _776;
  float _782 = saturate(_781);
  float _783 = _773 * _646;
  float _784 = _771 * _645;
  float _785 = _775 * _647;
  float _786 = _783 + _784;
  float _787 = _786 + _785;
  float _788 = 1.0f / _787;
  float _789 = _788 * _782;
  float _790 = _789 * _771;
  float _791 = _790 + _765;
  float _792 = saturate(_791);
  float _793 = _789 * _773;
  float _794 = _793 + _767;
  float _795 = saturate(_794);
  float _796 = _789 * _775;
  float _797 = _796 + _769;
  float _798 = saturate(_797);
  float _799 = _798 * _647;
  float _800 = _792 * _645;
  float _801 = _795 * _646;
  float _802 = _697 - _800;
  float _803 = _802 - _801;
  float _804 = _803 - _799;
  float _805 = saturate(_804);
  float _806 = _805 * _642;
  float _807 = _806 + _792;
  float _808 = saturate(_807);
  float _809 = _805 * _643;
  float _810 = _809 + _795;
  float _811 = saturate(_810);
  float _812 = _805 * _644;
  float _813 = _812 + _798;
  float _814 = saturate(_813);
  if (!_559) {
    float _816 = _808 * _618;
    float _817 = _811 * _619;
    float _818 = _814 * _620;
    float _819 = _817 + _816;
    float _820 = _819 + _818;
    float _821 = _811 * _616;
    float _822 = _808 * _615;
    float _823 = _814 * _617;
    float _824 = _821 + _822;
    float _825 = _824 + _823;
    float _826 = _814 * _614;
    float _827 = _811 * _613;
    float _828 = _808 * _612;
    float _829 = _827 + _828;
    float _830 = _829 + _826;
    if (!_557) {
      float _832 = saturate(_820);
      float _833 = saturate(_825);
      float _834 = saturate(_830);
      _836 = _834;
      _837 = _833;
      _838 = _832;
    } else {
      _836 = _830;
      _837 = _825;
      _838 = _820;
    }
  } else {
    _836 = _814;
    _837 = _811;
    _838 = _808;
  }
  if (!_554) {
    float _840 = _838 * _618;
    float _841 = _837 * _618;
    float _842 = _836 * _618;
    _844 = _842;
    _845 = _841;
    _846 = _840;
  } else {
    _844 = _836;
    _845 = _837;
    _846 = _838;
  }
  if (_525) {
    float _850 = cb1_018z * 9.999999747378752e-05f;
    float _851 = _850 * _846;
    float _852 = _850 * _845;
    float _853 = _850 * _844;
    float _855 = 5000.0f / cb1_018y;
    float _856 = _851 * _855;
    float _857 = _852 * _855;
    float _858 = _853 * _855;
    _860 = _856;
    _861 = _857;
    _862 = _858;
  } else {
    _860 = _846;
    _861 = _845;
    _862 = _844;
  }
  float _863 = _860 * 1.6047500371932983f;
  float _864 = mad(-0.5310800075531006f, _861, _863);
  float _865 = mad(-0.07366999983787537f, _862, _864);
  float _866 = _860 * -0.10208000242710114f;
  float _867 = mad(1.1081299781799316f, _861, _866);
  float _868 = mad(-0.006049999967217445f, _862, _867);
  float _869 = _860 * -0.0032599999103695154f;
  float _870 = mad(-0.07275000214576721f, _861, _869);
  float _871 = mad(1.0760200023651123f, _862, _870);
  if (_525) {
    // float _873 = max(_865, 0.0f);
    // float _874 = max(_868, 0.0f);
    // float _875 = max(_871, 0.0f);
    // bool _876 = !(_873 >= 0.0030399328097701073f);
    // if (!_876) {
    //   float _878 = abs(_873);
    //   float _879 = log2(_878);
    //   float _880 = _879 * 0.4166666567325592f;
    //   float _881 = exp2(_880);
    //   float _882 = _881 * 1.0549999475479126f;
    //   float _883 = _882 + -0.054999999701976776f;
    //   _887 = _883;
    // } else {
    //   float _885 = _873 * 12.923210144042969f;
    //   _887 = _885;
    // }
    // bool _888 = !(_874 >= 0.0030399328097701073f);
    // if (!_888) {
    //   float _890 = abs(_874);
    //   float _891 = log2(_890);
    //   float _892 = _891 * 0.4166666567325592f;
    //   float _893 = exp2(_892);
    //   float _894 = _893 * 1.0549999475479126f;
    //   float _895 = _894 + -0.054999999701976776f;
    //   _899 = _895;
    // } else {
    //   float _897 = _874 * 12.923210144042969f;
    //   _899 = _897;
    // }
    // bool _900 = !(_875 >= 0.0030399328097701073f);
    // if (!_900) {
    //   float _902 = abs(_875);
    //   float _903 = log2(_902);
    //   float _904 = _903 * 0.4166666567325592f;
    //   float _905 = exp2(_904);
    //   float _906 = _905 * 1.0549999475479126f;
    //   float _907 = _906 + -0.054999999701976776f;
    //   _980 = _887;
    //   _981 = _899;
    //   _982 = _907;
    // } else {
    //   float _909 = _875 * 12.923210144042969f;
    //   _980 = _887;
    //   _981 = _899;
    //   _982 = _909;
    // }
    _980 = renodx::color::srgb::EncodeSafe(_865);
    _981 = renodx::color::srgb::EncodeSafe(_868);
    _982 = renodx::color::srgb::EncodeSafe(_871);

  } else {
    float _911 = saturate(_865);
    float _912 = saturate(_868);
    float _913 = saturate(_871);
    bool _914 = ((uint)(cb1_018w) == -2);
    if (!_914) {
      bool _916 = !(_911 >= 0.0030399328097701073f);
      if (!_916) {
        float _918 = abs(_911);
        float _919 = log2(_918);
        float _920 = _919 * 0.4166666567325592f;
        float _921 = exp2(_920);
        float _922 = _921 * 1.0549999475479126f;
        float _923 = _922 + -0.054999999701976776f;
        _927 = _923;
      } else {
        float _925 = _911 * 12.923210144042969f;
        _927 = _925;
      }
      bool _928 = !(_912 >= 0.0030399328097701073f);
      if (!_928) {
        float _930 = abs(_912);
        float _931 = log2(_930);
        float _932 = _931 * 0.4166666567325592f;
        float _933 = exp2(_932);
        float _934 = _933 * 1.0549999475479126f;
        float _935 = _934 + -0.054999999701976776f;
        _939 = _935;
      } else {
        float _937 = _912 * 12.923210144042969f;
        _939 = _937;
      }
      bool _940 = !(_913 >= 0.0030399328097701073f);
      if (!_940) {
        float _942 = abs(_913);
        float _943 = log2(_942);
        float _944 = _943 * 0.4166666567325592f;
        float _945 = exp2(_944);
        float _946 = _945 * 1.0549999475479126f;
        float _947 = _946 + -0.054999999701976776f;
        _951 = _927;
        _952 = _939;
        _953 = _947;
      } else {
        float _949 = _913 * 12.923210144042969f;
        _951 = _927;
        _952 = _939;
        _953 = _949;
      }
    } else {
      _951 = _911;
      _952 = _912;
      _953 = _913;
    }
    float _958 = abs(_951);
    float _959 = abs(_952);
    float _960 = abs(_953);
    float _961 = log2(_958);
    float _962 = log2(_959);
    float _963 = log2(_960);
    float _964 = _961 * cb2_000z;
    float _965 = _962 * cb2_000z;
    float _966 = _963 * cb2_000z;
    float _967 = exp2(_964);
    float _968 = exp2(_965);
    float _969 = exp2(_966);
    float _970 = _967 * cb2_000y;
    float _971 = _968 * cb2_000y;
    float _972 = _969 * cb2_000y;
    float _973 = _970 + cb2_000x;
    float _974 = _971 + cb2_000x;
    float _975 = _972 + cb2_000x;
    float _976 = saturate(_973);
    float _977 = saturate(_974);
    float _978 = saturate(_975);
    _980 = _976;
    _981 = _977;
    _982 = _978;
  }
  float _986 = cb2_023x * TEXCOORD0_centroid.x;
  float _987 = cb2_023y * TEXCOORD0_centroid.y;
  float _990 = _986 + cb2_023z;
  float _991 = _987 + cb2_023w;
  float4 _994 = t10.SampleLevel(s0_space2, float2(_990, _991), 0.0f);
  float _996 = _994.x + -0.5f;
  float _997 = _996 * cb2_022x;
  float _998 = _997 + 0.5f;
  float _999 = _998 * 2.0f;
  float _1000 = _999 * _980;
  float _1001 = _999 * _981;
  float _1002 = _999 * _982;
  float _1006 = float((uint)(cb2_019z));
  float _1007 = float((uint)(cb2_019w));
  float _1008 = _1006 + SV_Position.x;
  float _1009 = _1007 + SV_Position.y;
  uint _1010 = uint(_1008);
  uint _1011 = uint(_1009);
  uint _1014 = cb2_019x + -1u;
  uint _1015 = cb2_019y + -1u;
  int _1016 = _1010 & _1014;
  int _1017 = _1011 & _1015;
  float4 _1018 = t3.Load(int3(_1016, _1017, 0));
  float _1022 = _1018.x * 2.0f;
  float _1023 = _1018.y * 2.0f;
  float _1024 = _1018.z * 2.0f;
  float _1025 = _1022 + -1.0f;
  float _1026 = _1023 + -1.0f;
  float _1027 = _1024 + -1.0f;
  float _1028 = _1025 * _508;
  float _1029 = _1026 * _508;
  float _1030 = _1027 * _508;
  float _1031 = _1028 + _1000;
  float _1032 = _1029 + _1001;
  float _1033 = _1030 + _1002;
  float _1034 = dot(float3(_1031, _1032, _1033), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1031;
  SV_Target.y = _1032;
  SV_Target.z = _1033;
  SV_Target.w = _1034;
  SV_Target_1.x = _1034;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
