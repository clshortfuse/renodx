#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = cb2_015x * TEXCOORD0_centroid.x;
  float _30 = cb2_015y * TEXCOORD0_centroid.y;
  float _33 = _29 + cb2_015z;
  float _34 = _30 + cb2_015w;
  float4 _35 = t7.SampleLevel(s0_space2, float2(_33, _34), 0.0f);
  float _39 = saturate(_35.x);
  float _40 = saturate(_35.z);
  float _43 = cb2_026x * _40;
  float _44 = _39 * 6.283199787139893f;
  float _45 = cos(_44);
  float _46 = sin(_44);
  float _47 = _43 * _45;
  float _48 = _46 * _43;
  float _49 = 1.0f - _35.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t1.SampleLevel(s4_space2, float2(_53, _54), 0.0f);
  float _59 = max(_55.x, 0.0f);
  float _60 = max(_55.y, 0.0f);
  float _61 = max(_55.z, 0.0f);
  float _62 = min(_59, 65000.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float4 _65 = t4.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  float _70 = max(_65.x, 0.0f);
  float _71 = max(_65.y, 0.0f);
  float _72 = max(_65.z, 0.0f);
  float _73 = max(_65.w, 0.0f);
  float _74 = min(_70, 5000.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _80 = _24.x * cb0_028z;
  float _81 = _80 + cb0_028x;
  float _82 = cb2_027w / _81;
  float _83 = 1.0f - _82;
  float _84 = abs(_83);
  float _86 = cb2_027y * _84;
  float _88 = _86 - cb2_027z;
  float _89 = saturate(_88);
  float _90 = max(_89, _77);
  float _91 = saturate(_90);
  float4 _92 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _96 = _74 - _62;
  float _97 = _75 - _63;
  float _98 = _76 - _64;
  float _99 = _91 * _96;
  float _100 = _91 * _97;
  float _101 = _91 * _98;
  float _102 = _99 + _62;
  float _103 = _100 + _63;
  float _104 = _101 + _64;
  float _105 = dot(float3(_102, _103, _104), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _109 = t0[0].SExposureData_020;
  float _111 = t0[0].SExposureData_004;
  float _113 = cb2_018x * 0.5f;
  float _114 = _113 * cb2_018y;
  float _115 = _111.x - _114;
  float _116 = cb2_018y * cb2_018x;
  float _117 = 1.0f / _116;
  float _118 = _115 * _117;
  float _119 = _105 / _109.x;
  float _120 = _119 * 5464.01611328125f;
  float _121 = _120 + 9.99999993922529e-09f;
  float _122 = log2(_121);
  float _123 = _122 - _115;
  float _124 = _123 * _117;
  float _125 = saturate(_124);
  float2 _126 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _125), 0.0f);
  float _129 = max(_126.y, 1.0000000116860974e-07f);
  float _130 = _126.x / _129;
  float _131 = _130 + _118;
  float _132 = _131 / _117;
  float _133 = _132 - _111.x;
  float _134 = -0.0f - _133;
  float _136 = _134 - cb2_027x;
  float _137 = max(0.0f, _136);
  float _139 = cb2_026z * _137;
  float _140 = _133 - cb2_027x;
  float _141 = max(0.0f, _140);
  float _143 = cb2_026w * _141;
  bool _144 = (_133 < 0.0f);
  float _145 = select(_144, _139, _143);
  float _146 = exp2(_145);
  float _147 = _146 * _102;
  float _148 = _146 * _103;
  float _149 = _146 * _104;
  float _154 = cb2_024y * _92.x;
  float _155 = cb2_024z * _92.y;
  float _156 = cb2_024w * _92.z;
  float _157 = _154 + _147;
  float _158 = _155 + _148;
  float _159 = _156 + _149;
  float _164 = _157 * cb2_025x;
  float _165 = _158 * cb2_025y;
  float _166 = _159 * cb2_025z;
  float _167 = dot(float3(_164, _165, _166), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _168 = t0[0].SExposureData_012;
  float _170 = _167 * 5464.01611328125f;
  float _171 = _170 * _168.x;
  float _172 = _171 + 9.99999993922529e-09f;
  float _173 = log2(_172);
  float _174 = _173 + 16.929765701293945f;
  float _175 = _174 * 0.05734497308731079f;
  float _176 = saturate(_175);
  float _177 = _176 * _176;
  float _178 = _176 * 2.0f;
  float _179 = 3.0f - _178;
  float _180 = _177 * _179;
  float _181 = _165 * 0.8450999855995178f;
  float _182 = _166 * 0.14589999616146088f;
  float _183 = _181 + _182;
  float _184 = _183 * 2.4890189170837402f;
  float _185 = _183 * 0.3754962384700775f;
  float _186 = _183 * 2.811495304107666f;
  float _187 = _183 * 5.519708156585693f;
  float _188 = _167 - _184;
  float _189 = _180 * _188;
  float _190 = _189 + _184;
  float _191 = _180 * 0.5f;
  float _192 = _191 + 0.5f;
  float _193 = _192 * _188;
  float _194 = _193 + _184;
  float _195 = _164 - _185;
  float _196 = _165 - _186;
  float _197 = _166 - _187;
  float _198 = _192 * _195;
  float _199 = _192 * _196;
  float _200 = _192 * _197;
  float _201 = _198 + _185;
  float _202 = _199 + _186;
  float _203 = _200 + _187;
  float _204 = 1.0f / _194;
  float _205 = _190 * _204;
  float _206 = _205 * _201;
  float _207 = _205 * _202;
  float _208 = _205 * _203;
  float _212 = cb2_020x * TEXCOORD0_centroid.x;
  float _213 = cb2_020y * TEXCOORD0_centroid.y;
  float _216 = _212 + cb2_020z;
  float _217 = _213 + cb2_020w;
  float _220 = dot(float2(_216, _217), float2(_216, _217));
  float _221 = 1.0f - _220;
  float _222 = saturate(_221);
  float _223 = log2(_222);
  float _224 = _223 * cb2_021w;
  float _225 = exp2(_224);
  float _229 = _206 - cb2_021x;
  float _230 = _207 - cb2_021y;
  float _231 = _208 - cb2_021z;
  float _232 = _229 * _225;
  float _233 = _230 * _225;
  float _234 = _231 * _225;
  float _235 = _232 + cb2_021x;
  float _236 = _233 + cb2_021y;
  float _237 = _234 + cb2_021z;
  float _238 = t0[0].SExposureData_000;
  float _240 = max(_109.x, 0.0010000000474974513f);
  float _241 = 1.0f / _240;
  float _242 = _241 * _238.x;
  bool _245 = ((uint)(cb2_069y) == 0);
  float _251;
  float _252;
  float _253;
  float _307;
  float _308;
  float _309;
  float _340;
  float _341;
  float _342;
  float _492;
  float _529;
  float _530;
  float _531;
  float _560;
  float _561;
  float _562;
  float _643;
  float _644;
  float _645;
  float _651;
  float _652;
  float _653;
  float _667;
  float _668;
  float _669;
  float _694;
  float _706;
  float _734;
  float _746;
  float _758;
  float _759;
  float _760;
  float _787;
  float _788;
  float _789;
  if (!_245) {
    float _247 = _242 * _235;
    float _248 = _242 * _236;
    float _249 = _242 * _237;
    _251 = _247;
    _252 = _248;
    _253 = _249;
  } else {
    _251 = _235;
    _252 = _236;
    _253 = _237;
  }
  float _254 = _251 * 0.6130970120429993f;
  float _255 = mad(0.33952298760414124f, _252, _254);
  float _256 = mad(0.04737899824976921f, _253, _255);
  float _257 = _251 * 0.07019399851560593f;
  float _258 = mad(0.9163540005683899f, _252, _257);
  float _259 = mad(0.013451999984681606f, _253, _258);
  float _260 = _251 * 0.02061600051820278f;
  float _261 = mad(0.10956999659538269f, _252, _260);
  float _262 = mad(0.8698149919509888f, _253, _261);
  float _263 = log2(_256);
  float _264 = log2(_259);
  float _265 = log2(_262);
  float _266 = _263 * 0.04211956635117531f;
  float _267 = _264 * 0.04211956635117531f;
  float _268 = _265 * 0.04211956635117531f;
  float _269 = _266 + 0.6252607107162476f;
  float _270 = _267 + 0.6252607107162476f;
  float _271 = _268 + 0.6252607107162476f;
  float4 _272 = t6.SampleLevel(s2_space2, float3(_269, _270, _271), 0.0f);
  bool _278 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_278 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _282 = cb2_017x * _272.x;
    float _283 = cb2_017x * _272.y;
    float _284 = cb2_017x * _272.z;
    float _286 = _282 + cb2_017y;
    float _287 = _283 + cb2_017y;
    float _288 = _284 + cb2_017y;
    float _289 = exp2(_286);
    float _290 = exp2(_287);
    float _291 = exp2(_288);
    float _292 = _289 + 1.0f;
    float _293 = _290 + 1.0f;
    float _294 = _291 + 1.0f;
    float _295 = 1.0f / _292;
    float _296 = 1.0f / _293;
    float _297 = 1.0f / _294;
    float _299 = cb2_017z * _295;
    float _300 = cb2_017z * _296;
    float _301 = cb2_017z * _297;
    float _303 = _299 + cb2_017w;
    float _304 = _300 + cb2_017w;
    float _305 = _301 + cb2_017w;
    _307 = _303;
    _308 = _304;
    _309 = _305;
  } else {
    _307 = _272.x;
    _308 = _272.y;
    _309 = _272.z;
  }
  float _310 = _307 * 23.0f;
  float _311 = _310 + -14.473931312561035f;
  float _312 = exp2(_311);
  float _313 = _308 * 23.0f;
  float _314 = _313 + -14.473931312561035f;
  float _315 = exp2(_314);
  float _316 = _309 * 23.0f;
  float _317 = _316 + -14.473931312561035f;
  float _318 = exp2(_317);
  float _325 = cb2_016x - _312;
  float _326 = cb2_016y - _315;
  float _327 = cb2_016z - _318;
  float _328 = _325 * cb2_016w;
  float _329 = _326 * cb2_016w;
  float _330 = _327 * cb2_016w;
  float _331 = _328 + _312;
  float _332 = _329 + _315;
  float _333 = _330 + _318;
  if (_278 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _336 = cb2_024x * _331;
    float _337 = cb2_024x * _332;
    float _338 = cb2_024x * _333;
    _340 = _336;
    _341 = _337;
    _342 = _338;
  } else {
    _340 = _331;
    _341 = _332;
    _342 = _333;
  }
  float _345 = _340 * 0.9708889722824097f;
  float _346 = mad(0.026962999254465103f, _341, _345);
  float _347 = mad(0.002148000057786703f, _342, _346);
  float _348 = _340 * 0.01088900025933981f;
  float _349 = mad(0.9869629740715027f, _341, _348);
  float _350 = mad(0.002148000057786703f, _342, _349);
  float _351 = mad(0.026962999254465103f, _341, _348);
  float _352 = mad(0.9621480107307434f, _342, _351);
  float _353 = max(_347, 0.0f);
  float _354 = max(_350, 0.0f);
  float _355 = max(_352, 0.0f);
  float _356 = min(_353, cb2_095y);
  float _357 = min(_354, cb2_095y);
  float _358 = min(_355, cb2_095y);
  bool _361 = ((uint)(cb2_095x) == 0);
  bool _364 = ((uint)(cb2_094w) == 0);
  bool _366 = ((uint)(cb2_094z) == 0);
  bool _368 = ((uint)(cb2_094y) != 0);
  bool _370 = ((uint)(cb2_094x) == 0);
  bool _372 = ((uint)(cb2_069z) != 0);
  float _419 = asfloat((uint)(cb2_075y));
  float _420 = asfloat((uint)(cb2_075z));
  float _421 = asfloat((uint)(cb2_075w));
  float _422 = asfloat((uint)(cb2_074z));
  float _423 = asfloat((uint)(cb2_074w));
  float _424 = asfloat((uint)(cb2_075x));
  float _425 = asfloat((uint)(cb2_073w));
  float _426 = asfloat((uint)(cb2_074x));
  float _427 = asfloat((uint)(cb2_074y));
  float _428 = asfloat((uint)(cb2_077x));
  float _429 = asfloat((uint)(cb2_077y));
  float _430 = asfloat((uint)(cb2_079x));
  float _431 = asfloat((uint)(cb2_079y));
  float _432 = asfloat((uint)(cb2_079z));
  float _433 = asfloat((uint)(cb2_078y));
  float _434 = asfloat((uint)(cb2_078z));
  float _435 = asfloat((uint)(cb2_078w));
  float _436 = asfloat((uint)(cb2_077z));
  float _437 = asfloat((uint)(cb2_077w));
  float _438 = asfloat((uint)(cb2_078x));
  float _439 = asfloat((uint)(cb2_072y));
  float _440 = asfloat((uint)(cb2_072z));
  float _441 = asfloat((uint)(cb2_072w));
  float _442 = asfloat((uint)(cb2_071x));
  float _443 = asfloat((uint)(cb2_071y));
  float _444 = asfloat((uint)(cb2_076x));
  float _445 = asfloat((uint)(cb2_070w));
  float _446 = asfloat((uint)(cb2_070x));
  float _447 = asfloat((uint)(cb2_070y));
  float _448 = asfloat((uint)(cb2_070z));
  float _449 = asfloat((uint)(cb2_073x));
  float _450 = asfloat((uint)(cb2_073y));
  float _451 = asfloat((uint)(cb2_073z));
  float _452 = asfloat((uint)(cb2_071z));
  float _453 = asfloat((uint)(cb2_071w));
  float _454 = asfloat((uint)(cb2_072x));
  float _455 = max(_357, _358);
  float _456 = max(_356, _455);
  float _457 = 1.0f / _456;
  float _458 = _457 * _356;
  float _459 = _457 * _357;
  float _460 = _457 * _358;
  float _461 = abs(_458);
  float _462 = log2(_461);
  float _463 = _462 * _446;
  float _464 = exp2(_463);
  float _465 = abs(_459);
  float _466 = log2(_465);
  float _467 = _466 * _447;
  float _468 = exp2(_467);
  float _469 = abs(_460);
  float _470 = log2(_469);
  float _471 = _470 * _448;
  float _472 = exp2(_471);
  if (_368) {
    float _475 = asfloat((uint)(cb2_076w));
    float _477 = asfloat((uint)(cb2_076z));
    float _479 = asfloat((uint)(cb2_076y));
    float _480 = _477 * _357;
    float _481 = _479 * _356;
    float _482 = _475 * _358;
    float _483 = _481 + _482;
    float _484 = _483 + _480;
    _492 = _484;
  } else {
    float _486 = _453 * _357;
    float _487 = _452 * _356;
    float _488 = _454 * _358;
    float _489 = _486 + _487;
    float _490 = _489 + _488;
    _492 = _490;
  }
  float _493 = abs(_492);
  float _494 = log2(_493);
  float _495 = _494 * _445;
  float _496 = exp2(_495);
  float _497 = log2(_496);
  float _498 = _497 * _444;
  float _499 = exp2(_498);
  float _500 = select(_372, _499, _496);
  float _501 = _500 * _442;
  float _502 = _501 + _443;
  float _503 = 1.0f / _502;
  float _504 = _503 * _496;
  if (_368) {
    if (!_370) {
      float _507 = _464 * _436;
      float _508 = _468 * _437;
      float _509 = _472 * _438;
      float _510 = _508 + _507;
      float _511 = _510 + _509;
      float _512 = _468 * _434;
      float _513 = _464 * _433;
      float _514 = _472 * _435;
      float _515 = _512 + _513;
      float _516 = _515 + _514;
      float _517 = _472 * _432;
      float _518 = _468 * _431;
      float _519 = _464 * _430;
      float _520 = _518 + _519;
      float _521 = _520 + _517;
      float _522 = max(_516, _521);
      float _523 = max(_511, _522);
      float _524 = 1.0f / _523;
      float _525 = _524 * _511;
      float _526 = _524 * _516;
      float _527 = _524 * _521;
      _529 = _525;
      _530 = _526;
      _531 = _527;
    } else {
      _529 = _464;
      _530 = _468;
      _531 = _472;
    }
    float _532 = _529 * _429;
    float _533 = exp2(_532);
    float _534 = _533 * _428;
    float _535 = saturate(_534);
    float _536 = _529 * _428;
    float _537 = _529 - _536;
    float _538 = saturate(_537);
    float _539 = max(_428, _538);
    float _540 = min(_539, _535);
    float _541 = _530 * _429;
    float _542 = exp2(_541);
    float _543 = _542 * _428;
    float _544 = saturate(_543);
    float _545 = _530 * _428;
    float _546 = _530 - _545;
    float _547 = saturate(_546);
    float _548 = max(_428, _547);
    float _549 = min(_548, _544);
    float _550 = _531 * _429;
    float _551 = exp2(_550);
    float _552 = _551 * _428;
    float _553 = saturate(_552);
    float _554 = _531 * _428;
    float _555 = _531 - _554;
    float _556 = saturate(_555);
    float _557 = max(_428, _556);
    float _558 = min(_557, _553);
    _560 = _540;
    _561 = _549;
    _562 = _558;
  } else {
    _560 = _464;
    _561 = _468;
    _562 = _472;
  }
  float _563 = _560 * _452;
  float _564 = _561 * _453;
  float _565 = _564 + _563;
  float _566 = _562 * _454;
  float _567 = _565 + _566;
  float _568 = 1.0f / _567;
  float _569 = _568 * _504;
  float _570 = saturate(_569);
  float _571 = _570 * _560;
  float _572 = saturate(_571);
  float _573 = _570 * _561;
  float _574 = saturate(_573);
  float _575 = _570 * _562;
  float _576 = saturate(_575);
  float _577 = _572 * _439;
  float _578 = _439 - _577;
  float _579 = _574 * _440;
  float _580 = _440 - _579;
  float _581 = _576 * _441;
  float _582 = _441 - _581;
  float _583 = _576 * _454;
  float _584 = _572 * _452;
  float _585 = _574 * _453;
  float _586 = _504 - _584;
  float _587 = _586 - _585;
  float _588 = _587 - _583;
  float _589 = saturate(_588);
  float _590 = _580 * _453;
  float _591 = _578 * _452;
  float _592 = _582 * _454;
  float _593 = _590 + _591;
  float _594 = _593 + _592;
  float _595 = 1.0f / _594;
  float _596 = _595 * _589;
  float _597 = _596 * _578;
  float _598 = _597 + _572;
  float _599 = saturate(_598);
  float _600 = _596 * _580;
  float _601 = _600 + _574;
  float _602 = saturate(_601);
  float _603 = _596 * _582;
  float _604 = _603 + _576;
  float _605 = saturate(_604);
  float _606 = _605 * _454;
  float _607 = _599 * _452;
  float _608 = _602 * _453;
  float _609 = _504 - _607;
  float _610 = _609 - _608;
  float _611 = _610 - _606;
  float _612 = saturate(_611);
  float _613 = _612 * _449;
  float _614 = _613 + _599;
  float _615 = saturate(_614);
  float _616 = _612 * _450;
  float _617 = _616 + _602;
  float _618 = saturate(_617);
  float _619 = _612 * _451;
  float _620 = _619 + _605;
  float _621 = saturate(_620);
  if (!_366) {
    float _623 = _615 * _425;
    float _624 = _618 * _426;
    float _625 = _621 * _427;
    float _626 = _624 + _623;
    float _627 = _626 + _625;
    float _628 = _618 * _423;
    float _629 = _615 * _422;
    float _630 = _621 * _424;
    float _631 = _628 + _629;
    float _632 = _631 + _630;
    float _633 = _621 * _421;
    float _634 = _618 * _420;
    float _635 = _615 * _419;
    float _636 = _634 + _635;
    float _637 = _636 + _633;
    if (!_364) {
      float _639 = saturate(_627);
      float _640 = saturate(_632);
      float _641 = saturate(_637);
      _643 = _641;
      _644 = _640;
      _645 = _639;
    } else {
      _643 = _637;
      _644 = _632;
      _645 = _627;
    }
  } else {
    _643 = _621;
    _644 = _618;
    _645 = _615;
  }
  if (!_361) {
    float _647 = _645 * _425;
    float _648 = _644 * _425;
    float _649 = _643 * _425;
    _651 = _649;
    _652 = _648;
    _653 = _647;
  } else {
    _651 = _643;
    _652 = _644;
    _653 = _645;
  }
  if (_278) {
    float _657 = cb1_018z * 9.999999747378752e-05f;
    float _658 = _657 * _653;
    float _659 = _657 * _652;
    float _660 = _657 * _651;
    float _662 = 5000.0f / cb1_018y;
    float _663 = _658 * _662;
    float _664 = _659 * _662;
    float _665 = _660 * _662;
    _667 = _663;
    _668 = _664;
    _669 = _665;
  } else {
    _667 = _653;
    _668 = _652;
    _669 = _651;
  }
  float _670 = _667 * 1.6047500371932983f;
  float _671 = mad(-0.5310800075531006f, _668, _670);
  float _672 = mad(-0.07366999983787537f, _669, _671);
  float _673 = _667 * -0.10208000242710114f;
  float _674 = mad(1.1081299781799316f, _668, _673);
  float _675 = mad(-0.006049999967217445f, _669, _674);
  float _676 = _667 * -0.0032599999103695154f;
  float _677 = mad(-0.07275000214576721f, _668, _676);
  float _678 = mad(1.0760200023651123f, _669, _677);
  if (_278) {
    // float _680 = max(_672, 0.0f);
    // float _681 = max(_675, 0.0f);
    // float _682 = max(_678, 0.0f);
    // bool _683 = !(_680 >= 0.0030399328097701073f);
    // if (!_683) {
    //   float _685 = abs(_680);
    //   float _686 = log2(_685);
    //   float _687 = _686 * 0.4166666567325592f;
    //   float _688 = exp2(_687);
    //   float _689 = _688 * 1.0549999475479126f;
    //   float _690 = _689 + -0.054999999701976776f;
    //   _694 = _690;
    // } else {
    //   float _692 = _680 * 12.923210144042969f;
    //   _694 = _692;
    // }
    // bool _695 = !(_681 >= 0.0030399328097701073f);
    // if (!_695) {
    //   float _697 = abs(_681);
    //   float _698 = log2(_697);
    //   float _699 = _698 * 0.4166666567325592f;
    //   float _700 = exp2(_699);
    //   float _701 = _700 * 1.0549999475479126f;
    //   float _702 = _701 + -0.054999999701976776f;
    //   _706 = _702;
    // } else {
    //   float _704 = _681 * 12.923210144042969f;
    //   _706 = _704;
    // }
    // bool _707 = !(_682 >= 0.0030399328097701073f);
    // if (!_707) {
    //   float _709 = abs(_682);
    //   float _710 = log2(_709);
    //   float _711 = _710 * 0.4166666567325592f;
    //   float _712 = exp2(_711);
    //   float _713 = _712 * 1.0549999475479126f;
    //   float _714 = _713 + -0.054999999701976776f;
    //   _787 = _694;
    //   _788 = _706;
    //   _789 = _714;
    // } else {
    //   float _716 = _682 * 12.923210144042969f;
    //   _787 = _694;
    //   _788 = _706;
    //   _789 = _716;
    // }
    _787 = renodx::color::srgb::EncodeSafe(_672);
    _788 = renodx::color::srgb::EncodeSafe(_675);
    _789 = renodx::color::srgb::EncodeSafe(_678);

  } else {
    float _718 = saturate(_672);
    float _719 = saturate(_675);
    float _720 = saturate(_678);
    bool _721 = ((uint)(cb1_018w) == -2);
    if (!_721) {
      bool _723 = !(_718 >= 0.0030399328097701073f);
      if (!_723) {
        float _725 = abs(_718);
        float _726 = log2(_725);
        float _727 = _726 * 0.4166666567325592f;
        float _728 = exp2(_727);
        float _729 = _728 * 1.0549999475479126f;
        float _730 = _729 + -0.054999999701976776f;
        _734 = _730;
      } else {
        float _732 = _718 * 12.923210144042969f;
        _734 = _732;
      }
      bool _735 = !(_719 >= 0.0030399328097701073f);
      if (!_735) {
        float _737 = abs(_719);
        float _738 = log2(_737);
        float _739 = _738 * 0.4166666567325592f;
        float _740 = exp2(_739);
        float _741 = _740 * 1.0549999475479126f;
        float _742 = _741 + -0.054999999701976776f;
        _746 = _742;
      } else {
        float _744 = _719 * 12.923210144042969f;
        _746 = _744;
      }
      bool _747 = !(_720 >= 0.0030399328097701073f);
      if (!_747) {
        float _749 = abs(_720);
        float _750 = log2(_749);
        float _751 = _750 * 0.4166666567325592f;
        float _752 = exp2(_751);
        float _753 = _752 * 1.0549999475479126f;
        float _754 = _753 + -0.054999999701976776f;
        _758 = _734;
        _759 = _746;
        _760 = _754;
      } else {
        float _756 = _720 * 12.923210144042969f;
        _758 = _734;
        _759 = _746;
        _760 = _756;
      }
    } else {
      _758 = _718;
      _759 = _719;
      _760 = _720;
    }
    float _765 = abs(_758);
    float _766 = abs(_759);
    float _767 = abs(_760);
    float _768 = log2(_765);
    float _769 = log2(_766);
    float _770 = log2(_767);
    float _771 = _768 * cb2_000z;
    float _772 = _769 * cb2_000z;
    float _773 = _770 * cb2_000z;
    float _774 = exp2(_771);
    float _775 = exp2(_772);
    float _776 = exp2(_773);
    float _777 = _774 * cb2_000y;
    float _778 = _775 * cb2_000y;
    float _779 = _776 * cb2_000y;
    float _780 = _777 + cb2_000x;
    float _781 = _778 + cb2_000x;
    float _782 = _779 + cb2_000x;
    float _783 = saturate(_780);
    float _784 = saturate(_781);
    float _785 = saturate(_782);
    _787 = _783;
    _788 = _784;
    _789 = _785;
  }
  float _793 = cb2_023x * TEXCOORD0_centroid.x;
  float _794 = cb2_023y * TEXCOORD0_centroid.y;
  float _797 = _793 + cb2_023z;
  float _798 = _794 + cb2_023w;
  float4 _801 = t9.SampleLevel(s0_space2, float2(_797, _798), 0.0f);
  float _803 = _801.x + -0.5f;
  float _804 = _803 * cb2_022x;
  float _805 = _804 + 0.5f;
  float _806 = _805 * 2.0f;
  float _807 = _806 * _787;
  float _808 = _806 * _788;
  float _809 = _806 * _789;
  float _813 = float((uint)(cb2_019z));
  float _814 = float((uint)(cb2_019w));
  float _815 = _813 + SV_Position.x;
  float _816 = _814 + SV_Position.y;
  uint _817 = uint(_815);
  uint _818 = uint(_816);
  uint _821 = cb2_019x + -1u;
  uint _822 = cb2_019y + -1u;
  int _823 = _817 & _821;
  int _824 = _818 & _822;
  float4 _825 = t3.Load(int3(_823, _824, 0));
  float _829 = _825.x * 2.0f;
  float _830 = _825.y * 2.0f;
  float _831 = _825.z * 2.0f;
  float _832 = _829 + -1.0f;
  float _833 = _830 + -1.0f;
  float _834 = _831 + -1.0f;
  float _835 = _832 * cb2_025w;
  float _836 = _833 * cb2_025w;
  float _837 = _834 * cb2_025w;
  float _838 = _835 + _807;
  float _839 = _836 + _808;
  float _840 = _837 + _809;
  float _841 = dot(float3(_838, _839, _840), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _838;
  SV_Target.y = _839;
  SV_Target.z = _840;
  SV_Target.w = _841;
  SV_Target_1.x = _841;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
