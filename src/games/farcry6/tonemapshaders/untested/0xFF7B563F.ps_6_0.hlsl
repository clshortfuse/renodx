#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _23 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _27 = _23.x * 6.283199787139893f;
  float _28 = cos(_27);
  float _29 = sin(_27);
  float _30 = _28 * _23.z;
  float _31 = _29 * _23.z;
  float _32 = _30 + TEXCOORD0_centroid.x;
  float _33 = _31 + TEXCOORD0_centroid.y;
  float _34 = _32 * 10.0f;
  float _35 = 10.0f - _34;
  float _36 = min(_34, _35);
  float _37 = saturate(_36);
  float _38 = _37 * _30;
  float _39 = _33 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _31;
  float _44 = _38 + TEXCOORD0_centroid.x;
  float _45 = _43 + TEXCOORD0_centroid.y;
  float4 _46 = t6.SampleLevel(s2_space2, float2(_44, _45), 0.0f);
  float _48 = _46.w * _38;
  float _49 = _46.w * _43;
  float _50 = 1.0f - _23.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _57 = cb2_015x * TEXCOORD0_centroid.x;
  float _58 = cb2_015y * TEXCOORD0_centroid.y;
  float _61 = _57 + cb2_015z;
  float _62 = _58 + cb2_015w;
  float4 _63 = t7.SampleLevel(s0_space2, float2(_61, _62), 0.0f);
  float _67 = saturate(_63.x);
  float _68 = saturate(_63.z);
  float _71 = cb2_026x * _68;
  float _72 = _67 * 6.283199787139893f;
  float _73 = cos(_72);
  float _74 = sin(_72);
  float _75 = _71 * _73;
  float _76 = _74 * _71;
  float _77 = 1.0f - _63.y;
  float _78 = saturate(_77);
  float _79 = _75 * _78;
  float _80 = _76 * _78;
  float _81 = _52 + TEXCOORD0_centroid.x;
  float _82 = _81 + _79;
  float _83 = _53 + TEXCOORD0_centroid.y;
  float _84 = _83 + _80;
  float4 _85 = t6.SampleLevel(s2_space2, float2(_82, _84), 0.0f);
  bool _87 = (_85.y > 0.0f);
  float _88 = select(_87, TEXCOORD0_centroid.x, _82);
  float _89 = select(_87, TEXCOORD0_centroid.y, _84);
  float4 _90 = t1.SampleLevel(s4_space2, float2(_88, _89), 0.0f);
  float _94 = max(_90.x, 0.0f);
  float _95 = max(_90.y, 0.0f);
  float _96 = max(_90.z, 0.0f);
  float _97 = min(_94, 65000.0f);
  float _98 = min(_95, 65000.0f);
  float _99 = min(_96, 65000.0f);
  float4 _100 = t3.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _105 = max(_100.x, 0.0f);
  float _106 = max(_100.y, 0.0f);
  float _107 = max(_100.z, 0.0f);
  float _108 = max(_100.w, 0.0f);
  float _109 = min(_105, 5000.0f);
  float _110 = min(_106, 5000.0f);
  float _111 = min(_107, 5000.0f);
  float _112 = min(_108, 5000.0f);
  float _115 = _21.x * cb0_028z;
  float _116 = _115 + cb0_028x;
  float _117 = cb2_027w / _116;
  float _118 = 1.0f - _117;
  float _119 = abs(_118);
  float _121 = cb2_027y * _119;
  float _123 = _121 - cb2_027z;
  float _124 = saturate(_123);
  float _125 = max(_124, _112);
  float _126 = saturate(_125);
  float4 _127 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _131 = _109 - _97;
  float _132 = _110 - _98;
  float _133 = _111 - _99;
  float _134 = _126 * _131;
  float _135 = _126 * _132;
  float _136 = _126 * _133;
  float _137 = _134 + _97;
  float _138 = _135 + _98;
  float _139 = _136 + _99;
  float _140 = dot(float3(_137, _138, _139), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _144 = t0[0].SExposureData_020;
  float _146 = t0[0].SExposureData_004;
  float _148 = cb2_018x * 0.5f;
  float _149 = _148 * cb2_018y;
  float _150 = _146.x - _149;
  float _151 = cb2_018y * cb2_018x;
  float _152 = 1.0f / _151;
  float _153 = _150 * _152;
  float _154 = _140 / _144.x;
  float _155 = _154 * 5464.01611328125f;
  float _156 = _155 + 9.99999993922529e-09f;
  float _157 = log2(_156);
  float _158 = _157 - _150;
  float _159 = _158 * _152;
  float _160 = saturate(_159);
  float2 _161 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _160), 0.0f);
  float _164 = max(_161.y, 1.0000000116860974e-07f);
  float _165 = _161.x / _164;
  float _166 = _165 + _153;
  float _167 = _166 / _152;
  float _168 = _167 - _146.x;
  float _169 = -0.0f - _168;
  float _171 = _169 - cb2_027x;
  float _172 = max(0.0f, _171);
  float _174 = cb2_026z * _172;
  float _175 = _168 - cb2_027x;
  float _176 = max(0.0f, _175);
  float _178 = cb2_026w * _176;
  bool _179 = (_168 < 0.0f);
  float _180 = select(_179, _174, _178);
  float _181 = exp2(_180);
  float _182 = _181 * _137;
  float _183 = _181 * _138;
  float _184 = _181 * _139;
  float _189 = cb2_024y * _127.x;
  float _190 = cb2_024z * _127.y;
  float _191 = cb2_024w * _127.z;
  float _192 = _189 + _182;
  float _193 = _190 + _183;
  float _194 = _191 + _184;
  float _199 = _192 * cb2_025x;
  float _200 = _193 * cb2_025y;
  float _201 = _194 * cb2_025z;
  float _202 = dot(float3(_199, _200, _201), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _203 = t0[0].SExposureData_012;
  float _205 = _202 * 5464.01611328125f;
  float _206 = _205 * _203.x;
  float _207 = _206 + 9.99999993922529e-09f;
  float _208 = log2(_207);
  float _209 = _208 + 16.929765701293945f;
  float _210 = _209 * 0.05734497308731079f;
  float _211 = saturate(_210);
  float _212 = _211 * _211;
  float _213 = _211 * 2.0f;
  float _214 = 3.0f - _213;
  float _215 = _212 * _214;
  float _216 = _200 * 0.8450999855995178f;
  float _217 = _201 * 0.14589999616146088f;
  float _218 = _216 + _217;
  float _219 = _218 * 2.4890189170837402f;
  float _220 = _218 * 0.3754962384700775f;
  float _221 = _218 * 2.811495304107666f;
  float _222 = _218 * 5.519708156585693f;
  float _223 = _202 - _219;
  float _224 = _215 * _223;
  float _225 = _224 + _219;
  float _226 = _215 * 0.5f;
  float _227 = _226 + 0.5f;
  float _228 = _227 * _223;
  float _229 = _228 + _219;
  float _230 = _199 - _220;
  float _231 = _200 - _221;
  float _232 = _201 - _222;
  float _233 = _227 * _230;
  float _234 = _227 * _231;
  float _235 = _227 * _232;
  float _236 = _233 + _220;
  float _237 = _234 + _221;
  float _238 = _235 + _222;
  float _239 = 1.0f / _229;
  float _240 = _225 * _239;
  float _241 = _240 * _236;
  float _242 = _240 * _237;
  float _243 = _240 * _238;
  float _247 = cb2_020x * TEXCOORD0_centroid.x;
  float _248 = cb2_020y * TEXCOORD0_centroid.y;
  float _251 = _247 + cb2_020z;
  float _252 = _248 + cb2_020w;
  float _255 = dot(float2(_251, _252), float2(_251, _252));
  float _256 = 1.0f - _255;
  float _257 = saturate(_256);
  float _258 = log2(_257);
  float _259 = _258 * cb2_021w;
  float _260 = exp2(_259);
  float _264 = _241 - cb2_021x;
  float _265 = _242 - cb2_021y;
  float _266 = _243 - cb2_021z;
  float _267 = _264 * _260;
  float _268 = _265 * _260;
  float _269 = _266 * _260;
  float _270 = _267 + cb2_021x;
  float _271 = _268 + cb2_021y;
  float _272 = _269 + cb2_021z;
  float _273 = t0[0].SExposureData_000;
  float _275 = max(_144.x, 0.0010000000474974513f);
  float _276 = 1.0f / _275;
  float _277 = _276 * _273.x;
  bool _280 = ((uint)(cb2_069y) == 0);
  float _286;
  float _287;
  float _288;
  float _342;
  float _343;
  float _344;
  float _419;
  float _420;
  float _421;
  float _571;
  float _608;
  float _609;
  float _610;
  float _639;
  float _640;
  float _641;
  float _722;
  float _723;
  float _724;
  float _730;
  float _731;
  float _732;
  float _746;
  float _747;
  float _748;
  float _773;
  float _785;
  float _813;
  float _825;
  float _837;
  float _838;
  float _839;
  float _866;
  float _867;
  float _868;
  if (!_280) {
    float _282 = _277 * _270;
    float _283 = _277 * _271;
    float _284 = _277 * _272;
    _286 = _282;
    _287 = _283;
    _288 = _284;
  } else {
    _286 = _270;
    _287 = _271;
    _288 = _272;
  }
  float _289 = _286 * 0.6130970120429993f;
  float _290 = mad(0.33952298760414124f, _287, _289);
  float _291 = mad(0.04737899824976921f, _288, _290);
  float _292 = _286 * 0.07019399851560593f;
  float _293 = mad(0.9163540005683899f, _287, _292);
  float _294 = mad(0.013451999984681606f, _288, _293);
  float _295 = _286 * 0.02061600051820278f;
  float _296 = mad(0.10956999659538269f, _287, _295);
  float _297 = mad(0.8698149919509888f, _288, _296);
  float _298 = log2(_291);
  float _299 = log2(_294);
  float _300 = log2(_297);
  float _301 = _298 * 0.04211956635117531f;
  float _302 = _299 * 0.04211956635117531f;
  float _303 = _300 * 0.04211956635117531f;
  float _304 = _301 + 0.6252607107162476f;
  float _305 = _302 + 0.6252607107162476f;
  float _306 = _303 + 0.6252607107162476f;
  float4 _307 = t5.SampleLevel(s2_space2, float3(_304, _305, _306), 0.0f);
  bool _313 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_313 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _317 = cb2_017x * _307.x;
    float _318 = cb2_017x * _307.y;
    float _319 = cb2_017x * _307.z;
    float _321 = _317 + cb2_017y;
    float _322 = _318 + cb2_017y;
    float _323 = _319 + cb2_017y;
    float _324 = exp2(_321);
    float _325 = exp2(_322);
    float _326 = exp2(_323);
    float _327 = _324 + 1.0f;
    float _328 = _325 + 1.0f;
    float _329 = _326 + 1.0f;
    float _330 = 1.0f / _327;
    float _331 = 1.0f / _328;
    float _332 = 1.0f / _329;
    float _334 = cb2_017z * _330;
    float _335 = cb2_017z * _331;
    float _336 = cb2_017z * _332;
    float _338 = _334 + cb2_017w;
    float _339 = _335 + cb2_017w;
    float _340 = _336 + cb2_017w;
    _342 = _338;
    _343 = _339;
    _344 = _340;
  } else {
    _342 = _307.x;
    _343 = _307.y;
    _344 = _307.z;
  }
  float _345 = _342 * 23.0f;
  float _346 = _345 + -14.473931312561035f;
  float _347 = exp2(_346);
  float _348 = _343 * 23.0f;
  float _349 = _348 + -14.473931312561035f;
  float _350 = exp2(_349);
  float _351 = _344 * 23.0f;
  float _352 = _351 + -14.473931312561035f;
  float _353 = exp2(_352);
  float _354 = dot(float3(_347, _350, _353), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _359 = dot(float3(_347, _350, _353), float3(_347, _350, _353));
  float _360 = rsqrt(_359);
  float _361 = _360 * _347;
  float _362 = _360 * _350;
  float _363 = _360 * _353;
  float _364 = cb2_001x - _361;
  float _365 = cb2_001y - _362;
  float _366 = cb2_001z - _363;
  float _367 = dot(float3(_364, _365, _366), float3(_364, _365, _366));
  float _370 = cb2_002z * _367;
  float _372 = _370 + cb2_002w;
  float _373 = saturate(_372);
  float _375 = cb2_002x * _373;
  float _376 = _354 - _347;
  float _377 = _354 - _350;
  float _378 = _354 - _353;
  float _379 = _375 * _376;
  float _380 = _375 * _377;
  float _381 = _375 * _378;
  float _382 = _379 + _347;
  float _383 = _380 + _350;
  float _384 = _381 + _353;
  float _386 = cb2_002y * _373;
  float _387 = 0.10000000149011612f - _382;
  float _388 = 0.10000000149011612f - _383;
  float _389 = 0.10000000149011612f - _384;
  float _390 = _387 * _386;
  float _391 = _388 * _386;
  float _392 = _389 * _386;
  float _393 = _390 + _382;
  float _394 = _391 + _383;
  float _395 = _392 + _384;
  float _396 = saturate(_393);
  float _397 = saturate(_394);
  float _398 = saturate(_395);
  float _404 = cb2_016x - _396;
  float _405 = cb2_016y - _397;
  float _406 = cb2_016z - _398;
  float _407 = _404 * cb2_016w;
  float _408 = _405 * cb2_016w;
  float _409 = _406 * cb2_016w;
  float _410 = _407 + _396;
  float _411 = _408 + _397;
  float _412 = _409 + _398;
  if (_313 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _415 = cb2_024x * _410;
    float _416 = cb2_024x * _411;
    float _417 = cb2_024x * _412;
    _419 = _415;
    _420 = _416;
    _421 = _417;
  } else {
    _419 = _410;
    _420 = _411;
    _421 = _412;
  }
  float _424 = _419 * 0.9708889722824097f;
  float _425 = mad(0.026962999254465103f, _420, _424);
  float _426 = mad(0.002148000057786703f, _421, _425);
  float _427 = _419 * 0.01088900025933981f;
  float _428 = mad(0.9869629740715027f, _420, _427);
  float _429 = mad(0.002148000057786703f, _421, _428);
  float _430 = mad(0.026962999254465103f, _420, _427);
  float _431 = mad(0.9621480107307434f, _421, _430);
  float _432 = max(_426, 0.0f);
  float _433 = max(_429, 0.0f);
  float _434 = max(_431, 0.0f);
  float _435 = min(_432, cb2_095y);
  float _436 = min(_433, cb2_095y);
  float _437 = min(_434, cb2_095y);
  bool _440 = ((uint)(cb2_095x) == 0);
  bool _443 = ((uint)(cb2_094w) == 0);
  bool _445 = ((uint)(cb2_094z) == 0);
  bool _447 = ((uint)(cb2_094y) != 0);
  bool _449 = ((uint)(cb2_094x) == 0);
  bool _451 = ((uint)(cb2_069z) != 0);
  float _498 = asfloat((uint)(cb2_075y));
  float _499 = asfloat((uint)(cb2_075z));
  float _500 = asfloat((uint)(cb2_075w));
  float _501 = asfloat((uint)(cb2_074z));
  float _502 = asfloat((uint)(cb2_074w));
  float _503 = asfloat((uint)(cb2_075x));
  float _504 = asfloat((uint)(cb2_073w));
  float _505 = asfloat((uint)(cb2_074x));
  float _506 = asfloat((uint)(cb2_074y));
  float _507 = asfloat((uint)(cb2_077x));
  float _508 = asfloat((uint)(cb2_077y));
  float _509 = asfloat((uint)(cb2_079x));
  float _510 = asfloat((uint)(cb2_079y));
  float _511 = asfloat((uint)(cb2_079z));
  float _512 = asfloat((uint)(cb2_078y));
  float _513 = asfloat((uint)(cb2_078z));
  float _514 = asfloat((uint)(cb2_078w));
  float _515 = asfloat((uint)(cb2_077z));
  float _516 = asfloat((uint)(cb2_077w));
  float _517 = asfloat((uint)(cb2_078x));
  float _518 = asfloat((uint)(cb2_072y));
  float _519 = asfloat((uint)(cb2_072z));
  float _520 = asfloat((uint)(cb2_072w));
  float _521 = asfloat((uint)(cb2_071x));
  float _522 = asfloat((uint)(cb2_071y));
  float _523 = asfloat((uint)(cb2_076x));
  float _524 = asfloat((uint)(cb2_070w));
  float _525 = asfloat((uint)(cb2_070x));
  float _526 = asfloat((uint)(cb2_070y));
  float _527 = asfloat((uint)(cb2_070z));
  float _528 = asfloat((uint)(cb2_073x));
  float _529 = asfloat((uint)(cb2_073y));
  float _530 = asfloat((uint)(cb2_073z));
  float _531 = asfloat((uint)(cb2_071z));
  float _532 = asfloat((uint)(cb2_071w));
  float _533 = asfloat((uint)(cb2_072x));
  float _534 = max(_436, _437);
  float _535 = max(_435, _534);
  float _536 = 1.0f / _535;
  float _537 = _536 * _435;
  float _538 = _536 * _436;
  float _539 = _536 * _437;
  float _540 = abs(_537);
  float _541 = log2(_540);
  float _542 = _541 * _525;
  float _543 = exp2(_542);
  float _544 = abs(_538);
  float _545 = log2(_544);
  float _546 = _545 * _526;
  float _547 = exp2(_546);
  float _548 = abs(_539);
  float _549 = log2(_548);
  float _550 = _549 * _527;
  float _551 = exp2(_550);
  if (_447) {
    float _554 = asfloat((uint)(cb2_076w));
    float _556 = asfloat((uint)(cb2_076z));
    float _558 = asfloat((uint)(cb2_076y));
    float _559 = _556 * _436;
    float _560 = _558 * _435;
    float _561 = _554 * _437;
    float _562 = _560 + _561;
    float _563 = _562 + _559;
    _571 = _563;
  } else {
    float _565 = _532 * _436;
    float _566 = _531 * _435;
    float _567 = _533 * _437;
    float _568 = _565 + _566;
    float _569 = _568 + _567;
    _571 = _569;
  }
  float _572 = abs(_571);
  float _573 = log2(_572);
  float _574 = _573 * _524;
  float _575 = exp2(_574);
  float _576 = log2(_575);
  float _577 = _576 * _523;
  float _578 = exp2(_577);
  float _579 = select(_451, _578, _575);
  float _580 = _579 * _521;
  float _581 = _580 + _522;
  float _582 = 1.0f / _581;
  float _583 = _582 * _575;
  if (_447) {
    if (!_449) {
      float _586 = _543 * _515;
      float _587 = _547 * _516;
      float _588 = _551 * _517;
      float _589 = _587 + _586;
      float _590 = _589 + _588;
      float _591 = _547 * _513;
      float _592 = _543 * _512;
      float _593 = _551 * _514;
      float _594 = _591 + _592;
      float _595 = _594 + _593;
      float _596 = _551 * _511;
      float _597 = _547 * _510;
      float _598 = _543 * _509;
      float _599 = _597 + _598;
      float _600 = _599 + _596;
      float _601 = max(_595, _600);
      float _602 = max(_590, _601);
      float _603 = 1.0f / _602;
      float _604 = _603 * _590;
      float _605 = _603 * _595;
      float _606 = _603 * _600;
      _608 = _604;
      _609 = _605;
      _610 = _606;
    } else {
      _608 = _543;
      _609 = _547;
      _610 = _551;
    }
    float _611 = _608 * _508;
    float _612 = exp2(_611);
    float _613 = _612 * _507;
    float _614 = saturate(_613);
    float _615 = _608 * _507;
    float _616 = _608 - _615;
    float _617 = saturate(_616);
    float _618 = max(_507, _617);
    float _619 = min(_618, _614);
    float _620 = _609 * _508;
    float _621 = exp2(_620);
    float _622 = _621 * _507;
    float _623 = saturate(_622);
    float _624 = _609 * _507;
    float _625 = _609 - _624;
    float _626 = saturate(_625);
    float _627 = max(_507, _626);
    float _628 = min(_627, _623);
    float _629 = _610 * _508;
    float _630 = exp2(_629);
    float _631 = _630 * _507;
    float _632 = saturate(_631);
    float _633 = _610 * _507;
    float _634 = _610 - _633;
    float _635 = saturate(_634);
    float _636 = max(_507, _635);
    float _637 = min(_636, _632);
    _639 = _619;
    _640 = _628;
    _641 = _637;
  } else {
    _639 = _543;
    _640 = _547;
    _641 = _551;
  }
  float _642 = _639 * _531;
  float _643 = _640 * _532;
  float _644 = _643 + _642;
  float _645 = _641 * _533;
  float _646 = _644 + _645;
  float _647 = 1.0f / _646;
  float _648 = _647 * _583;
  float _649 = saturate(_648);
  float _650 = _649 * _639;
  float _651 = saturate(_650);
  float _652 = _649 * _640;
  float _653 = saturate(_652);
  float _654 = _649 * _641;
  float _655 = saturate(_654);
  float _656 = _651 * _518;
  float _657 = _518 - _656;
  float _658 = _653 * _519;
  float _659 = _519 - _658;
  float _660 = _655 * _520;
  float _661 = _520 - _660;
  float _662 = _655 * _533;
  float _663 = _651 * _531;
  float _664 = _653 * _532;
  float _665 = _583 - _663;
  float _666 = _665 - _664;
  float _667 = _666 - _662;
  float _668 = saturate(_667);
  float _669 = _659 * _532;
  float _670 = _657 * _531;
  float _671 = _661 * _533;
  float _672 = _669 + _670;
  float _673 = _672 + _671;
  float _674 = 1.0f / _673;
  float _675 = _674 * _668;
  float _676 = _675 * _657;
  float _677 = _676 + _651;
  float _678 = saturate(_677);
  float _679 = _675 * _659;
  float _680 = _679 + _653;
  float _681 = saturate(_680);
  float _682 = _675 * _661;
  float _683 = _682 + _655;
  float _684 = saturate(_683);
  float _685 = _684 * _533;
  float _686 = _678 * _531;
  float _687 = _681 * _532;
  float _688 = _583 - _686;
  float _689 = _688 - _687;
  float _690 = _689 - _685;
  float _691 = saturate(_690);
  float _692 = _691 * _528;
  float _693 = _692 + _678;
  float _694 = saturate(_693);
  float _695 = _691 * _529;
  float _696 = _695 + _681;
  float _697 = saturate(_696);
  float _698 = _691 * _530;
  float _699 = _698 + _684;
  float _700 = saturate(_699);
  if (!_445) {
    float _702 = _694 * _504;
    float _703 = _697 * _505;
    float _704 = _700 * _506;
    float _705 = _703 + _702;
    float _706 = _705 + _704;
    float _707 = _697 * _502;
    float _708 = _694 * _501;
    float _709 = _700 * _503;
    float _710 = _707 + _708;
    float _711 = _710 + _709;
    float _712 = _700 * _500;
    float _713 = _697 * _499;
    float _714 = _694 * _498;
    float _715 = _713 + _714;
    float _716 = _715 + _712;
    if (!_443) {
      float _718 = saturate(_706);
      float _719 = saturate(_711);
      float _720 = saturate(_716);
      _722 = _720;
      _723 = _719;
      _724 = _718;
    } else {
      _722 = _716;
      _723 = _711;
      _724 = _706;
    }
  } else {
    _722 = _700;
    _723 = _697;
    _724 = _694;
  }
  if (!_440) {
    float _726 = _724 * _504;
    float _727 = _723 * _504;
    float _728 = _722 * _504;
    _730 = _728;
    _731 = _727;
    _732 = _726;
  } else {
    _730 = _722;
    _731 = _723;
    _732 = _724;
  }
  if (_313) {
    float _736 = cb1_018z * 9.999999747378752e-05f;
    float _737 = _736 * _732;
    float _738 = _736 * _731;
    float _739 = _736 * _730;
    float _741 = 5000.0f / cb1_018y;
    float _742 = _737 * _741;
    float _743 = _738 * _741;
    float _744 = _739 * _741;
    _746 = _742;
    _747 = _743;
    _748 = _744;
  } else {
    _746 = _732;
    _747 = _731;
    _748 = _730;
  }
  float _749 = _746 * 1.6047500371932983f;
  float _750 = mad(-0.5310800075531006f, _747, _749);
  float _751 = mad(-0.07366999983787537f, _748, _750);
  float _752 = _746 * -0.10208000242710114f;
  float _753 = mad(1.1081299781799316f, _747, _752);
  float _754 = mad(-0.006049999967217445f, _748, _753);
  float _755 = _746 * -0.0032599999103695154f;
  float _756 = mad(-0.07275000214576721f, _747, _755);
  float _757 = mad(1.0760200023651123f, _748, _756);
  if (_313) {
    // float _759 = max(_751, 0.0f);
    // float _760 = max(_754, 0.0f);
    // float _761 = max(_757, 0.0f);
    // bool _762 = !(_759 >= 0.0030399328097701073f);
    // if (!_762) {
    //   float _764 = abs(_759);
    //   float _765 = log2(_764);
    //   float _766 = _765 * 0.4166666567325592f;
    //   float _767 = exp2(_766);
    //   float _768 = _767 * 1.0549999475479126f;
    //   float _769 = _768 + -0.054999999701976776f;
    //   _773 = _769;
    // } else {
    //   float _771 = _759 * 12.923210144042969f;
    //   _773 = _771;
    // }
    // bool _774 = !(_760 >= 0.0030399328097701073f);
    // if (!_774) {
    //   float _776 = abs(_760);
    //   float _777 = log2(_776);
    //   float _778 = _777 * 0.4166666567325592f;
    //   float _779 = exp2(_778);
    //   float _780 = _779 * 1.0549999475479126f;
    //   float _781 = _780 + -0.054999999701976776f;
    //   _785 = _781;
    // } else {
    //   float _783 = _760 * 12.923210144042969f;
    //   _785 = _783;
    // }
    // bool _786 = !(_761 >= 0.0030399328097701073f);
    // if (!_786) {
    //   float _788 = abs(_761);
    //   float _789 = log2(_788);
    //   float _790 = _789 * 0.4166666567325592f;
    //   float _791 = exp2(_790);
    //   float _792 = _791 * 1.0549999475479126f;
    //   float _793 = _792 + -0.054999999701976776f;
    //   _866 = _773;
    //   _867 = _785;
    //   _868 = _793;
    // } else {
    //   float _795 = _761 * 12.923210144042969f;
    //   _866 = _773;
    //   _867 = _785;
    //   _868 = _795;
    // }
    _866 = renodx::color::srgb::EncodeSafe(_751);
    _867 = renodx::color::srgb::EncodeSafe(_754);
    _868 = renodx::color::srgb::EncodeSafe(_757);

  } else {
    float _797 = saturate(_751);
    float _798 = saturate(_754);
    float _799 = saturate(_757);
    bool _800 = ((uint)(cb1_018w) == -2);
    if (!_800) {
      bool _802 = !(_797 >= 0.0030399328097701073f);
      if (!_802) {
        float _804 = abs(_797);
        float _805 = log2(_804);
        float _806 = _805 * 0.4166666567325592f;
        float _807 = exp2(_806);
        float _808 = _807 * 1.0549999475479126f;
        float _809 = _808 + -0.054999999701976776f;
        _813 = _809;
      } else {
        float _811 = _797 * 12.923210144042969f;
        _813 = _811;
      }
      bool _814 = !(_798 >= 0.0030399328097701073f);
      if (!_814) {
        float _816 = abs(_798);
        float _817 = log2(_816);
        float _818 = _817 * 0.4166666567325592f;
        float _819 = exp2(_818);
        float _820 = _819 * 1.0549999475479126f;
        float _821 = _820 + -0.054999999701976776f;
        _825 = _821;
      } else {
        float _823 = _798 * 12.923210144042969f;
        _825 = _823;
      }
      bool _826 = !(_799 >= 0.0030399328097701073f);
      if (!_826) {
        float _828 = abs(_799);
        float _829 = log2(_828);
        float _830 = _829 * 0.4166666567325592f;
        float _831 = exp2(_830);
        float _832 = _831 * 1.0549999475479126f;
        float _833 = _832 + -0.054999999701976776f;
        _837 = _813;
        _838 = _825;
        _839 = _833;
      } else {
        float _835 = _799 * 12.923210144042969f;
        _837 = _813;
        _838 = _825;
        _839 = _835;
      }
    } else {
      _837 = _797;
      _838 = _798;
      _839 = _799;
    }
    float _844 = abs(_837);
    float _845 = abs(_838);
    float _846 = abs(_839);
    float _847 = log2(_844);
    float _848 = log2(_845);
    float _849 = log2(_846);
    float _850 = _847 * cb2_000z;
    float _851 = _848 * cb2_000z;
    float _852 = _849 * cb2_000z;
    float _853 = exp2(_850);
    float _854 = exp2(_851);
    float _855 = exp2(_852);
    float _856 = _853 * cb2_000y;
    float _857 = _854 * cb2_000y;
    float _858 = _855 * cb2_000y;
    float _859 = _856 + cb2_000x;
    float _860 = _857 + cb2_000x;
    float _861 = _858 + cb2_000x;
    float _862 = saturate(_859);
    float _863 = saturate(_860);
    float _864 = saturate(_861);
    _866 = _862;
    _867 = _863;
    _868 = _864;
  }
  float _869 = dot(float3(_866, _867, _868), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _866;
  SV_Target.y = _867;
  SV_Target.z = _868;
  SV_Target.w = _869;
  SV_Target_1.x = _869;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
