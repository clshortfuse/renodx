#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = _21.x * 6.283199787139893f;
  float _26 = cos(_25);
  float _27 = sin(_25);
  float _28 = _26 * _21.z;
  float _29 = _27 * _21.z;
  float _30 = _28 + TEXCOORD0_centroid.x;
  float _31 = _29 + TEXCOORD0_centroid.y;
  float _32 = _30 * 10.0f;
  float _33 = 10.0f - _32;
  float _34 = min(_32, _33);
  float _35 = saturate(_34);
  float _36 = _35 * _28;
  float _37 = _31 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _29;
  float _42 = _36 + TEXCOORD0_centroid.x;
  float _43 = _41 + TEXCOORD0_centroid.y;
  float4 _44 = t6.SampleLevel(s2_space2, float2(_42, _43), 0.0f);
  float _46 = _44.w * _36;
  float _47 = _44.w * _41;
  float _48 = 1.0f - _21.y;
  float _49 = saturate(_48);
  float _50 = _46 * _49;
  float _51 = _47 * _49;
  float _52 = _50 + TEXCOORD0_centroid.x;
  float _53 = _51 + TEXCOORD0_centroid.y;
  float4 _54 = t6.SampleLevel(s2_space2, float2(_52, _53), 0.0f);
  bool _56 = (_54.y > 0.0f);
  float _57 = select(_56, TEXCOORD0_centroid.x, _52);
  float _58 = select(_56, TEXCOORD0_centroid.y, _53);
  float4 _59 = t1.SampleLevel(s4_space2, float2(_57, _58), 0.0f);
  float _63 = max(_59.x, 0.0f);
  float _64 = max(_59.y, 0.0f);
  float _65 = max(_59.z, 0.0f);
  float _66 = min(_63, 65000.0f);
  float _67 = min(_64, 65000.0f);
  float _68 = min(_65, 65000.0f);
  float4 _69 = t3.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  float _74 = max(_69.x, 0.0f);
  float _75 = max(_69.y, 0.0f);
  float _76 = max(_69.z, 0.0f);
  float _77 = max(_69.w, 0.0f);
  float _78 = min(_74, 5000.0f);
  float _79 = min(_75, 5000.0f);
  float _80 = min(_76, 5000.0f);
  float _81 = min(_77, 5000.0f);
  float _84 = _19.x * cb0_028z;
  float _85 = _84 + cb0_028x;
  float _86 = cb2_027w / _85;
  float _87 = 1.0f - _86;
  float _88 = abs(_87);
  float _90 = cb2_027y * _88;
  float _92 = _90 - cb2_027z;
  float _93 = saturate(_92);
  float _94 = max(_93, _81);
  float _95 = saturate(_94);
  float _99 = cb2_013x * _57;
  float _100 = cb2_013y * _58;
  float _103 = _99 + cb2_013z;
  float _104 = _100 + cb2_013w;
  float _107 = dot(float2(_103, _104), float2(_103, _104));
  float _108 = abs(_107);
  float _109 = log2(_108);
  float _110 = _109 * cb2_014x;
  float _111 = exp2(_110);
  float _112 = saturate(_111);
  float _116 = cb2_011x * _57;
  float _117 = cb2_011y * _58;
  float _120 = _116 + cb2_011z;
  float _121 = _117 + cb2_011w;
  float _122 = _120 * _112;
  float _123 = _121 * _112;
  float _124 = _122 + _57;
  float _125 = _123 + _58;
  float _129 = cb2_012x * _57;
  float _130 = cb2_012y * _58;
  float _133 = _129 + cb2_012z;
  float _134 = _130 + cb2_012w;
  float _135 = _133 * _112;
  float _136 = _134 * _112;
  float _137 = _135 + _57;
  float _138 = _136 + _58;
  float4 _139 = t1.SampleLevel(s2_space2, float2(_124, _125), 0.0f);
  float _143 = max(_139.x, 0.0f);
  float _144 = max(_139.y, 0.0f);
  float _145 = max(_139.z, 0.0f);
  float _146 = min(_143, 65000.0f);
  float _147 = min(_144, 65000.0f);
  float _148 = min(_145, 65000.0f);
  float4 _149 = t1.SampleLevel(s2_space2, float2(_137, _138), 0.0f);
  float _153 = max(_149.x, 0.0f);
  float _154 = max(_149.y, 0.0f);
  float _155 = max(_149.z, 0.0f);
  float _156 = min(_153, 65000.0f);
  float _157 = min(_154, 65000.0f);
  float _158 = min(_155, 65000.0f);
  float4 _159 = t3.SampleLevel(s2_space2, float2(_124, _125), 0.0f);
  float _163 = max(_159.x, 0.0f);
  float _164 = max(_159.y, 0.0f);
  float _165 = max(_159.z, 0.0f);
  float _166 = min(_163, 5000.0f);
  float _167 = min(_164, 5000.0f);
  float _168 = min(_165, 5000.0f);
  float4 _169 = t3.SampleLevel(s2_space2, float2(_137, _138), 0.0f);
  float _173 = max(_169.x, 0.0f);
  float _174 = max(_169.y, 0.0f);
  float _175 = max(_169.z, 0.0f);
  float _176 = min(_173, 5000.0f);
  float _177 = min(_174, 5000.0f);
  float _178 = min(_175, 5000.0f);
  float _183 = 1.0f - cb2_009x;
  float _184 = 1.0f - cb2_009y;
  float _185 = 1.0f - cb2_009z;
  float _190 = _183 - cb2_010x;
  float _191 = _184 - cb2_010y;
  float _192 = _185 - cb2_010z;
  float _193 = saturate(_190);
  float _194 = saturate(_191);
  float _195 = saturate(_192);
  float _196 = _193 * _66;
  float _197 = _194 * _67;
  float _198 = _195 * _68;
  float _199 = cb2_009x * _146;
  float _200 = cb2_009y * _147;
  float _201 = cb2_009z * _148;
  float _202 = _199 + _196;
  float _203 = _200 + _197;
  float _204 = _201 + _198;
  float _205 = cb2_010x * _156;
  float _206 = cb2_010y * _157;
  float _207 = cb2_010z * _158;
  float _208 = _202 + _205;
  float _209 = _203 + _206;
  float _210 = _204 + _207;
  float _211 = _193 * _78;
  float _212 = _194 * _79;
  float _213 = _195 * _80;
  float _214 = cb2_009x * _166;
  float _215 = cb2_009y * _167;
  float _216 = cb2_009z * _168;
  float _217 = cb2_010x * _176;
  float _218 = cb2_010y * _177;
  float _219 = cb2_010z * _178;
  float4 _220 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _224 = _211 - _208;
  float _225 = _224 + _214;
  float _226 = _225 + _217;
  float _227 = _212 - _209;
  float _228 = _227 + _215;
  float _229 = _228 + _218;
  float _230 = _213 - _210;
  float _231 = _230 + _216;
  float _232 = _231 + _219;
  float _233 = _226 * _95;
  float _234 = _229 * _95;
  float _235 = _232 * _95;
  float _236 = _233 + _208;
  float _237 = _234 + _209;
  float _238 = _235 + _210;
  float _239 = dot(float3(_236, _237, _238), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _243 = t0[0].SExposureData_020;
  float _245 = t0[0].SExposureData_004;
  float _247 = cb2_018x * 0.5f;
  float _248 = _247 * cb2_018y;
  float _249 = _245.x - _248;
  float _250 = cb2_018y * cb2_018x;
  float _251 = 1.0f / _250;
  float _252 = _249 * _251;
  float _253 = _239 / _243.x;
  float _254 = _253 * 5464.01611328125f;
  float _255 = _254 + 9.99999993922529e-09f;
  float _256 = log2(_255);
  float _257 = _256 - _249;
  float _258 = _257 * _251;
  float _259 = saturate(_258);
  float2 _260 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _259), 0.0f);
  float _263 = max(_260.y, 1.0000000116860974e-07f);
  float _264 = _260.x / _263;
  float _265 = _264 + _252;
  float _266 = _265 / _251;
  float _267 = _266 - _245.x;
  float _268 = -0.0f - _267;
  float _270 = _268 - cb2_027x;
  float _271 = max(0.0f, _270);
  float _274 = cb2_026z * _271;
  float _275 = _267 - cb2_027x;
  float _276 = max(0.0f, _275);
  float _278 = cb2_026w * _276;
  bool _279 = (_267 < 0.0f);
  float _280 = select(_279, _274, _278);
  float _281 = exp2(_280);
  float _282 = _281 * _236;
  float _283 = _281 * _237;
  float _284 = _281 * _238;
  float _289 = cb2_024y * _220.x;
  float _290 = cb2_024z * _220.y;
  float _291 = cb2_024w * _220.z;
  float _292 = _289 + _282;
  float _293 = _290 + _283;
  float _294 = _291 + _284;
  float _299 = _292 * cb2_025x;
  float _300 = _293 * cb2_025y;
  float _301 = _294 * cb2_025z;
  float _302 = dot(float3(_299, _300, _301), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _303 = t0[0].SExposureData_012;
  float _305 = _302 * 5464.01611328125f;
  float _306 = _305 * _303.x;
  float _307 = _306 + 9.99999993922529e-09f;
  float _308 = log2(_307);
  float _309 = _308 + 16.929765701293945f;
  float _310 = _309 * 0.05734497308731079f;
  float _311 = saturate(_310);
  float _312 = _311 * _311;
  float _313 = _311 * 2.0f;
  float _314 = 3.0f - _313;
  float _315 = _312 * _314;
  float _316 = _300 * 0.8450999855995178f;
  float _317 = _301 * 0.14589999616146088f;
  float _318 = _316 + _317;
  float _319 = _318 * 2.4890189170837402f;
  float _320 = _318 * 0.3754962384700775f;
  float _321 = _318 * 2.811495304107666f;
  float _322 = _318 * 5.519708156585693f;
  float _323 = _302 - _319;
  float _324 = _315 * _323;
  float _325 = _324 + _319;
  float _326 = _315 * 0.5f;
  float _327 = _326 + 0.5f;
  float _328 = _327 * _323;
  float _329 = _328 + _319;
  float _330 = _299 - _320;
  float _331 = _300 - _321;
  float _332 = _301 - _322;
  float _333 = _327 * _330;
  float _334 = _327 * _331;
  float _335 = _327 * _332;
  float _336 = _333 + _320;
  float _337 = _334 + _321;
  float _338 = _335 + _322;
  float _339 = 1.0f / _329;
  float _340 = _325 * _339;
  float _341 = _340 * _336;
  float _342 = _340 * _337;
  float _343 = _340 * _338;
  float _347 = cb2_020x * TEXCOORD0_centroid.x;
  float _348 = cb2_020y * TEXCOORD0_centroid.y;
  float _351 = _347 + cb2_020z;
  float _352 = _348 + cb2_020w;
  float _355 = dot(float2(_351, _352), float2(_351, _352));
  float _356 = 1.0f - _355;
  float _357 = saturate(_356);
  float _358 = log2(_357);
  float _359 = _358 * cb2_021w;
  float _360 = exp2(_359);
  float _364 = _341 - cb2_021x;
  float _365 = _342 - cb2_021y;
  float _366 = _343 - cb2_021z;
  float _367 = _364 * _360;
  float _368 = _365 * _360;
  float _369 = _366 * _360;
  float _370 = _367 + cb2_021x;
  float _371 = _368 + cb2_021y;
  float _372 = _369 + cb2_021z;
  float _373 = t0[0].SExposureData_000;
  float _375 = max(_243.x, 0.0010000000474974513f);
  float _376 = 1.0f / _375;
  float _377 = _376 * _373.x;
  bool _380 = ((uint)(cb2_069y) == 0);
  float _386;
  float _387;
  float _388;
  float _442;
  float _443;
  float _444;
  float _474;
  float _475;
  float _476;
  float _577;
  float _578;
  float _579;
  float _604;
  float _616;
  float _644;
  float _656;
  float _668;
  float _669;
  float _670;
  float _697;
  float _698;
  float _699;
  if (!_380) {
    float _382 = _377 * _370;
    float _383 = _377 * _371;
    float _384 = _377 * _372;
    _386 = _382;
    _387 = _383;
    _388 = _384;
  } else {
    _386 = _370;
    _387 = _371;
    _388 = _372;
  }
  float _389 = _386 * 0.6130970120429993f;
  float _390 = mad(0.33952298760414124f, _387, _389);
  float _391 = mad(0.04737899824976921f, _388, _390);
  float _392 = _386 * 0.07019399851560593f;
  float _393 = mad(0.9163540005683899f, _387, _392);
  float _394 = mad(0.013451999984681606f, _388, _393);
  float _395 = _386 * 0.02061600051820278f;
  float _396 = mad(0.10956999659538269f, _387, _395);
  float _397 = mad(0.8698149919509888f, _388, _396);
  float _398 = log2(_391);
  float _399 = log2(_394);
  float _400 = log2(_397);
  float _401 = _398 * 0.04211956635117531f;
  float _402 = _399 * 0.04211956635117531f;
  float _403 = _400 * 0.04211956635117531f;
  float _404 = _401 + 0.6252607107162476f;
  float _405 = _402 + 0.6252607107162476f;
  float _406 = _403 + 0.6252607107162476f;
  float4 _407 = t5.SampleLevel(s2_space2, float3(_404, _405, _406), 0.0f);
  bool _413 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_413 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _417 = cb2_017x * _407.x;
    float _418 = cb2_017x * _407.y;
    float _419 = cb2_017x * _407.z;
    float _421 = _417 + cb2_017y;
    float _422 = _418 + cb2_017y;
    float _423 = _419 + cb2_017y;
    float _424 = exp2(_421);
    float _425 = exp2(_422);
    float _426 = exp2(_423);
    float _427 = _424 + 1.0f;
    float _428 = _425 + 1.0f;
    float _429 = _426 + 1.0f;
    float _430 = 1.0f / _427;
    float _431 = 1.0f / _428;
    float _432 = 1.0f / _429;
    float _434 = cb2_017z * _430;
    float _435 = cb2_017z * _431;
    float _436 = cb2_017z * _432;
    float _438 = _434 + cb2_017w;
    float _439 = _435 + cb2_017w;
    float _440 = _436 + cb2_017w;
    _442 = _438;
    _443 = _439;
    _444 = _440;
  } else {
    _442 = _407.x;
    _443 = _407.y;
    _444 = _407.z;
  }
  float _445 = _442 * 23.0f;
  float _446 = _445 + -14.473931312561035f;
  float _447 = exp2(_446);
  float _448 = _443 * 23.0f;
  float _449 = _448 + -14.473931312561035f;
  float _450 = exp2(_449);
  float _451 = _444 * 23.0f;
  float _452 = _451 + -14.473931312561035f;
  float _453 = exp2(_452);
  float _459 = cb2_016x - _447;
  float _460 = cb2_016y - _450;
  float _461 = cb2_016z - _453;
  float _462 = _459 * cb2_016w;
  float _463 = _460 * cb2_016w;
  float _464 = _461 * cb2_016w;
  float _465 = _462 + _447;
  float _466 = _463 + _450;
  float _467 = _464 + _453;
  if (_413 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _470 = cb2_024x * _465;
    float _471 = cb2_024x * _466;
    float _472 = cb2_024x * _467;
    _474 = _470;
    _475 = _471;
    _476 = _472;
  } else {
    _474 = _465;
    _475 = _466;
    _476 = _467;
  }
  float _477 = _474 * 0.9708889722824097f;
  float _478 = mad(0.026962999254465103f, _475, _477);
  float _479 = mad(0.002148000057786703f, _476, _478);
  float _480 = _474 * 0.01088900025933981f;
  float _481 = mad(0.9869629740715027f, _475, _480);
  float _482 = mad(0.002148000057786703f, _476, _481);
  float _483 = mad(0.026962999254465103f, _475, _480);
  float _484 = mad(0.9621480107307434f, _476, _483);
  if (_413) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _489 = cb1_018y * 0.10000000149011612f;
        float _490 = log2(cb1_018z);
        float _491 = _490 + -13.287712097167969f;
        float _492 = _491 * 1.4929734468460083f;
        float _493 = _492 + 18.0f;
        float _494 = exp2(_493);
        float _495 = _494 * 0.18000000715255737f;
        float _496 = abs(_495);
        float _497 = log2(_496);
        float _498 = _497 * 1.5f;
        float _499 = exp2(_498);
        float _500 = _499 * _489;
        float _501 = _500 / cb1_018z;
        float _502 = _501 + -0.07636754959821701f;
        float _503 = _497 * 1.2750000953674316f;
        float _504 = exp2(_503);
        float _505 = _504 * 0.07636754959821701f;
        float _506 = cb1_018y * 0.011232397519052029f;
        float _507 = _506 * _499;
        float _508 = _507 / cb1_018z;
        float _509 = _505 - _508;
        float _510 = _504 + -0.11232396960258484f;
        float _511 = _510 * _489;
        float _512 = _511 / cb1_018z;
        float _513 = _512 * cb1_018z;
        float _514 = abs(_479);
        float _515 = abs(_482);
        float _516 = abs(_484);
        float _517 = log2(_514);
        float _518 = log2(_515);
        float _519 = log2(_516);
        float _520 = _517 * 1.5f;
        float _521 = _518 * 1.5f;
        float _522 = _519 * 1.5f;
        float _523 = exp2(_520);
        float _524 = exp2(_521);
        float _525 = exp2(_522);
        float _526 = _523 * _513;
        float _527 = _524 * _513;
        float _528 = _525 * _513;
        float _529 = _517 * 1.2750000953674316f;
        float _530 = _518 * 1.2750000953674316f;
        float _531 = _519 * 1.2750000953674316f;
        float _532 = exp2(_529);
        float _533 = exp2(_530);
        float _534 = exp2(_531);
        float _535 = _532 * _502;
        float _536 = _533 * _502;
        float _537 = _534 * _502;
        float _538 = _535 + _509;
        float _539 = _536 + _509;
        float _540 = _537 + _509;
        float _541 = _526 / _538;
        float _542 = _527 / _539;
        float _543 = _528 / _540;
        float _544 = _541 * 9.999999747378752e-05f;
        float _545 = _542 * 9.999999747378752e-05f;
        float _546 = _543 * 9.999999747378752e-05f;
        float _547 = 5000.0f / cb1_018y;
        float _548 = _544 * _547;
        float _549 = _545 * _547;
        float _550 = _546 * _547;
        _577 = _548;
        _578 = _549;
        _579 = _550;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_479, _482, _484));
      _577 = tonemapped.x, _578 = tonemapped.y, _579 = tonemapped.z;
    }
      } else {
        float _552 = _479 + 0.020616600289940834f;
        float _553 = _482 + 0.020616600289940834f;
        float _554 = _484 + 0.020616600289940834f;
        float _555 = _552 * _479;
        float _556 = _553 * _482;
        float _557 = _554 * _484;
        float _558 = _555 + -7.456949970219284e-05f;
        float _559 = _556 + -7.456949970219284e-05f;
        float _560 = _557 + -7.456949970219284e-05f;
        float _561 = _479 * 0.9837960004806519f;
        float _562 = _482 * 0.9837960004806519f;
        float _563 = _484 * 0.9837960004806519f;
        float _564 = _561 + 0.4336790144443512f;
        float _565 = _562 + 0.4336790144443512f;
        float _566 = _563 + 0.4336790144443512f;
        float _567 = _564 * _479;
        float _568 = _565 * _482;
        float _569 = _566 * _484;
        float _570 = _567 + 0.24617899954319f;
        float _571 = _568 + 0.24617899954319f;
        float _572 = _569 + 0.24617899954319f;
        float _573 = _558 / _570;
        float _574 = _559 / _571;
        float _575 = _560 / _572;
        _577 = _573;
        _578 = _574;
        _579 = _575;
      }
      float _580 = _577 * 1.6047500371932983f;
      float _581 = mad(-0.5310800075531006f, _578, _580);
      float _582 = mad(-0.07366999983787537f, _579, _581);
      float _583 = _577 * -0.10208000242710114f;
      float _584 = mad(1.1081299781799316f, _578, _583);
      float _585 = mad(-0.006049999967217445f, _579, _584);
      float _586 = _577 * -0.0032599999103695154f;
      float _587 = mad(-0.07275000214576721f, _578, _586);
      float _588 = mad(1.0760200023651123f, _579, _587);
      if (_413) {
        // float _590 = max(_582, 0.0f);
        // float _591 = max(_585, 0.0f);
        // float _592 = max(_588, 0.0f);
        // bool _593 = !(_590 >= 0.0030399328097701073f);
        // if (!_593) {
        //   float _595 = abs(_590);
        //   float _596 = log2(_595);
        //   float _597 = _596 * 0.4166666567325592f;
        //   float _598 = exp2(_597);
        //   float _599 = _598 * 1.0549999475479126f;
        //   float _600 = _599 + -0.054999999701976776f;
        //   _604 = _600;
        // } else {
        //   float _602 = _590 * 12.923210144042969f;
        //   _604 = _602;
        // }
        // bool _605 = !(_591 >= 0.0030399328097701073f);
        // if (!_605) {
        //   float _607 = abs(_591);
        //   float _608 = log2(_607);
        //   float _609 = _608 * 0.4166666567325592f;
        //   float _610 = exp2(_609);
        //   float _611 = _610 * 1.0549999475479126f;
        //   float _612 = _611 + -0.054999999701976776f;
        //   _616 = _612;
        // } else {
        //   float _614 = _591 * 12.923210144042969f;
        //   _616 = _614;
        // }
        // bool _617 = !(_592 >= 0.0030399328097701073f);
        // if (!_617) {
        //   float _619 = abs(_592);
        //   float _620 = log2(_619);
        //   float _621 = _620 * 0.4166666567325592f;
        //   float _622 = exp2(_621);
        //   float _623 = _622 * 1.0549999475479126f;
        //   float _624 = _623 + -0.054999999701976776f;
        //   _697 = _604;
        //   _698 = _616;
        //   _699 = _624;
        // } else {
        //   float _626 = _592 * 12.923210144042969f;
        //   _697 = _604;
        //   _698 = _616;
        //   _699 = _626;
        // }
        _697 = renodx::color::srgb::EncodeSafe(_582);
        _698 = renodx::color::srgb::EncodeSafe(_585);
        _699 = renodx::color::srgb::EncodeSafe(_588);

      } else {
        float _628 = saturate(_582);
        float _629 = saturate(_585);
        float _630 = saturate(_588);
        bool _631 = ((uint)(cb1_018w) == -2);
        if (!_631) {
          bool _633 = !(_628 >= 0.0030399328097701073f);
          if (!_633) {
            float _635 = abs(_628);
            float _636 = log2(_635);
            float _637 = _636 * 0.4166666567325592f;
            float _638 = exp2(_637);
            float _639 = _638 * 1.0549999475479126f;
            float _640 = _639 + -0.054999999701976776f;
            _644 = _640;
          } else {
            float _642 = _628 * 12.923210144042969f;
            _644 = _642;
          }
          bool _645 = !(_629 >= 0.0030399328097701073f);
          if (!_645) {
            float _647 = abs(_629);
            float _648 = log2(_647);
            float _649 = _648 * 0.4166666567325592f;
            float _650 = exp2(_649);
            float _651 = _650 * 1.0549999475479126f;
            float _652 = _651 + -0.054999999701976776f;
            _656 = _652;
          } else {
            float _654 = _629 * 12.923210144042969f;
            _656 = _654;
          }
          bool _657 = !(_630 >= 0.0030399328097701073f);
          if (!_657) {
            float _659 = abs(_630);
            float _660 = log2(_659);
            float _661 = _660 * 0.4166666567325592f;
            float _662 = exp2(_661);
            float _663 = _662 * 1.0549999475479126f;
            float _664 = _663 + -0.054999999701976776f;
            _668 = _644;
            _669 = _656;
            _670 = _664;
          } else {
            float _666 = _630 * 12.923210144042969f;
            _668 = _644;
            _669 = _656;
            _670 = _666;
          }
        } else {
          _668 = _628;
          _669 = _629;
          _670 = _630;
        }
        float _675 = abs(_668);
        float _676 = abs(_669);
        float _677 = abs(_670);
        float _678 = log2(_675);
        float _679 = log2(_676);
        float _680 = log2(_677);
        float _681 = _678 * cb2_000z;
        float _682 = _679 * cb2_000z;
        float _683 = _680 * cb2_000z;
        float _684 = exp2(_681);
        float _685 = exp2(_682);
        float _686 = exp2(_683);
        float _687 = _684 * cb2_000y;
        float _688 = _685 * cb2_000y;
        float _689 = _686 * cb2_000y;
        float _690 = _687 + cb2_000x;
        float _691 = _688 + cb2_000x;
        float _692 = _689 + cb2_000x;
        float _693 = saturate(_690);
        float _694 = saturate(_691);
        float _695 = saturate(_692);
        _697 = _693;
        _698 = _694;
        _699 = _695;
      }
      float _700 = dot(float3(_697, _698, _699), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _697;
      SV_Target.y = _698;
      SV_Target.z = _699;
      SV_Target.w = _700;
      SV_Target_1.x = _700;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
