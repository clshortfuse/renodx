#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _22 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _26 = _22.x * 6.283199787139893f;
  float _27 = cos(_26);
  float _28 = sin(_26);
  float _29 = _27 * _22.z;
  float _30 = _28 * _22.z;
  float _31 = _29 + TEXCOORD0_centroid.x;
  float _32 = _30 + TEXCOORD0_centroid.y;
  float _33 = _31 * 10.0f;
  float _34 = 10.0f - _33;
  float _35 = min(_33, _34);
  float _36 = saturate(_35);
  float _37 = _36 * _29;
  float _38 = _32 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _30;
  float _43 = _37 + TEXCOORD0_centroid.x;
  float _44 = _42 + TEXCOORD0_centroid.y;
  float4 _45 = t7.SampleLevel(s2_space2, float2(_43, _44), 0.0f);
  float _47 = _45.w * _37;
  float _48 = _45.w * _42;
  float _49 = 1.0f - _22.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t7.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  bool _57 = (_55.y > 0.0f);
  float _58 = select(_57, TEXCOORD0_centroid.x, _53);
  float _59 = select(_57, TEXCOORD0_centroid.y, _54);
  float4 _60 = t1.SampleLevel(s4_space2, float2(_58, _59), 0.0f);
  float _64 = max(_60.x, 0.0f);
  float _65 = max(_60.y, 0.0f);
  float _66 = max(_60.z, 0.0f);
  float _67 = min(_64, 65000.0f);
  float _68 = min(_65, 65000.0f);
  float _69 = min(_66, 65000.0f);
  float4 _70 = t3.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  float _75 = max(_70.x, 0.0f);
  float _76 = max(_70.y, 0.0f);
  float _77 = max(_70.z, 0.0f);
  float _78 = max(_70.w, 0.0f);
  float _79 = min(_75, 5000.0f);
  float _80 = min(_76, 5000.0f);
  float _81 = min(_77, 5000.0f);
  float _82 = min(_78, 5000.0f);
  float _85 = _20.x * cb0_028z;
  float _86 = _85 + cb0_028x;
  float _87 = cb2_027w / _86;
  float _88 = 1.0f - _87;
  float _89 = abs(_88);
  float _91 = cb2_027y * _89;
  float _93 = _91 - cb2_027z;
  float _94 = saturate(_93);
  float _95 = max(_94, _82);
  float _96 = saturate(_95);
  float _100 = cb2_006x * _58;
  float _101 = cb2_006y * _59;
  float _104 = _100 + cb2_006z;
  float _105 = _101 + cb2_006w;
  float _109 = cb2_007x * _58;
  float _110 = cb2_007y * _59;
  float _113 = _109 + cb2_007z;
  float _114 = _110 + cb2_007w;
  float _118 = cb2_008x * _58;
  float _119 = cb2_008y * _59;
  float _122 = _118 + cb2_008z;
  float _123 = _119 + cb2_008w;
  float4 _124 = t1.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _126 = max(_124.x, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t1.SampleLevel(s2_space2, float2(_113, _114), 0.0f);
  float _130 = max(_128.y, 0.0f);
  float _131 = min(_130, 65000.0f);
  float4 _132 = t1.SampleLevel(s2_space2, float2(_122, _123), 0.0f);
  float _134 = max(_132.z, 0.0f);
  float _135 = min(_134, 65000.0f);
  float4 _136 = t3.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _138 = max(_136.x, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t3.SampleLevel(s2_space2, float2(_113, _114), 0.0f);
  float _142 = max(_140.y, 0.0f);
  float _143 = min(_142, 5000.0f);
  float4 _144 = t3.SampleLevel(s2_space2, float2(_122, _123), 0.0f);
  float _146 = max(_144.z, 0.0f);
  float _147 = min(_146, 5000.0f);
  float4 _148 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _154 = cb2_005x * _148.x;
  float _155 = cb2_005x * _148.y;
  float _156 = cb2_005x * _148.z;
  float _157 = _127 - _67;
  float _158 = _131 - _68;
  float _159 = _135 - _69;
  float _160 = _154 * _157;
  float _161 = _155 * _158;
  float _162 = _156 * _159;
  float _163 = _160 + _67;
  float _164 = _161 + _68;
  float _165 = _162 + _69;
  float _166 = _139 - _79;
  float _167 = _143 - _80;
  float _168 = _147 - _81;
  float _169 = _154 * _166;
  float _170 = _155 * _167;
  float _171 = _156 * _168;
  float _172 = _169 + _79;
  float _173 = _170 + _80;
  float _174 = _171 + _81;
  float4 _175 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _179 = _172 - _163;
  float _180 = _173 - _164;
  float _181 = _174 - _165;
  float _182 = _179 * _96;
  float _183 = _180 * _96;
  float _184 = _181 * _96;
  float _185 = _182 + _163;
  float _186 = _183 + _164;
  float _187 = _184 + _165;
  float _188 = dot(float3(_185, _186, _187), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _192 = t0[0].SExposureData_020;
  float _194 = t0[0].SExposureData_004;
  float _196 = cb2_018x * 0.5f;
  float _197 = _196 * cb2_018y;
  float _198 = _194.x - _197;
  float _199 = cb2_018y * cb2_018x;
  float _200 = 1.0f / _199;
  float _201 = _198 * _200;
  float _202 = _188 / _192.x;
  float _203 = _202 * 5464.01611328125f;
  float _204 = _203 + 9.99999993922529e-09f;
  float _205 = log2(_204);
  float _206 = _205 - _198;
  float _207 = _206 * _200;
  float _208 = saturate(_207);
  float2 _209 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _208), 0.0f);
  float _212 = max(_209.y, 1.0000000116860974e-07f);
  float _213 = _209.x / _212;
  float _214 = _213 + _201;
  float _215 = _214 / _200;
  float _216 = _215 - _194.x;
  float _217 = -0.0f - _216;
  float _219 = _217 - cb2_027x;
  float _220 = max(0.0f, _219);
  float _223 = cb2_026z * _220;
  float _224 = _216 - cb2_027x;
  float _225 = max(0.0f, _224);
  float _227 = cb2_026w * _225;
  bool _228 = (_216 < 0.0f);
  float _229 = select(_228, _223, _227);
  float _230 = exp2(_229);
  float _231 = _230 * _185;
  float _232 = _230 * _186;
  float _233 = _230 * _187;
  float _238 = cb2_024y * _175.x;
  float _239 = cb2_024z * _175.y;
  float _240 = cb2_024w * _175.z;
  float _241 = _238 + _231;
  float _242 = _239 + _232;
  float _243 = _240 + _233;
  float _248 = _241 * cb2_025x;
  float _249 = _242 * cb2_025y;
  float _250 = _243 * cb2_025z;
  float _251 = dot(float3(_248, _249, _250), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _252 = t0[0].SExposureData_012;
  float _254 = _251 * 5464.01611328125f;
  float _255 = _254 * _252.x;
  float _256 = _255 + 9.99999993922529e-09f;
  float _257 = log2(_256);
  float _258 = _257 + 16.929765701293945f;
  float _259 = _258 * 0.05734497308731079f;
  float _260 = saturate(_259);
  float _261 = _260 * _260;
  float _262 = _260 * 2.0f;
  float _263 = 3.0f - _262;
  float _264 = _261 * _263;
  float _265 = _249 * 0.8450999855995178f;
  float _266 = _250 * 0.14589999616146088f;
  float _267 = _265 + _266;
  float _268 = _267 * 2.4890189170837402f;
  float _269 = _267 * 0.3754962384700775f;
  float _270 = _267 * 2.811495304107666f;
  float _271 = _267 * 5.519708156585693f;
  float _272 = _251 - _268;
  float _273 = _264 * _272;
  float _274 = _273 + _268;
  float _275 = _264 * 0.5f;
  float _276 = _275 + 0.5f;
  float _277 = _276 * _272;
  float _278 = _277 + _268;
  float _279 = _248 - _269;
  float _280 = _249 - _270;
  float _281 = _250 - _271;
  float _282 = _276 * _279;
  float _283 = _276 * _280;
  float _284 = _276 * _281;
  float _285 = _282 + _269;
  float _286 = _283 + _270;
  float _287 = _284 + _271;
  float _288 = 1.0f / _278;
  float _289 = _274 * _288;
  float _290 = _289 * _285;
  float _291 = _289 * _286;
  float _292 = _289 * _287;
  float _296 = cb2_020x * TEXCOORD0_centroid.x;
  float _297 = cb2_020y * TEXCOORD0_centroid.y;
  float _300 = _296 + cb2_020z;
  float _301 = _297 + cb2_020w;
  float _304 = dot(float2(_300, _301), float2(_300, _301));
  float _305 = 1.0f - _304;
  float _306 = saturate(_305);
  float _307 = log2(_306);
  float _308 = _307 * cb2_021w;
  float _309 = exp2(_308);
  float _313 = _290 - cb2_021x;
  float _314 = _291 - cb2_021y;
  float _315 = _292 - cb2_021z;
  float _316 = _313 * _309;
  float _317 = _314 * _309;
  float _318 = _315 * _309;
  float _319 = _316 + cb2_021x;
  float _320 = _317 + cb2_021y;
  float _321 = _318 + cb2_021z;
  float _322 = t0[0].SExposureData_000;
  float _324 = max(_192.x, 0.0010000000474974513f);
  float _325 = 1.0f / _324;
  float _326 = _325 * _322.x;
  bool _329 = ((uint)(cb2_069y) == 0);
  float _335;
  float _336;
  float _337;
  float _391;
  float _392;
  float _393;
  float _468;
  float _469;
  float _470;
  float _620;
  float _657;
  float _658;
  float _659;
  float _688;
  float _689;
  float _690;
  float _771;
  float _772;
  float _773;
  float _779;
  float _780;
  float _781;
  float _795;
  float _796;
  float _797;
  float _822;
  float _834;
  float _862;
  float _874;
  float _886;
  float _887;
  float _888;
  float _915;
  float _916;
  float _917;
  if (!_329) {
    float _331 = _326 * _319;
    float _332 = _326 * _320;
    float _333 = _326 * _321;
    _335 = _331;
    _336 = _332;
    _337 = _333;
  } else {
    _335 = _319;
    _336 = _320;
    _337 = _321;
  }
  float _338 = _335 * 0.6130970120429993f;
  float _339 = mad(0.33952298760414124f, _336, _338);
  float _340 = mad(0.04737899824976921f, _337, _339);
  float _341 = _335 * 0.07019399851560593f;
  float _342 = mad(0.9163540005683899f, _336, _341);
  float _343 = mad(0.013451999984681606f, _337, _342);
  float _344 = _335 * 0.02061600051820278f;
  float _345 = mad(0.10956999659538269f, _336, _344);
  float _346 = mad(0.8698149919509888f, _337, _345);
  float _347 = log2(_340);
  float _348 = log2(_343);
  float _349 = log2(_346);
  float _350 = _347 * 0.04211956635117531f;
  float _351 = _348 * 0.04211956635117531f;
  float _352 = _349 * 0.04211956635117531f;
  float _353 = _350 + 0.6252607107162476f;
  float _354 = _351 + 0.6252607107162476f;
  float _355 = _352 + 0.6252607107162476f;
  float4 _356 = t5.SampleLevel(s2_space2, float3(_353, _354, _355), 0.0f);
  bool _362 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_362 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _366 = cb2_017x * _356.x;
    float _367 = cb2_017x * _356.y;
    float _368 = cb2_017x * _356.z;
    float _370 = _366 + cb2_017y;
    float _371 = _367 + cb2_017y;
    float _372 = _368 + cb2_017y;
    float _373 = exp2(_370);
    float _374 = exp2(_371);
    float _375 = exp2(_372);
    float _376 = _373 + 1.0f;
    float _377 = _374 + 1.0f;
    float _378 = _375 + 1.0f;
    float _379 = 1.0f / _376;
    float _380 = 1.0f / _377;
    float _381 = 1.0f / _378;
    float _383 = cb2_017z * _379;
    float _384 = cb2_017z * _380;
    float _385 = cb2_017z * _381;
    float _387 = _383 + cb2_017w;
    float _388 = _384 + cb2_017w;
    float _389 = _385 + cb2_017w;
    _391 = _387;
    _392 = _388;
    _393 = _389;
  } else {
    _391 = _356.x;
    _392 = _356.y;
    _393 = _356.z;
  }
  float _394 = _391 * 23.0f;
  float _395 = _394 + -14.473931312561035f;
  float _396 = exp2(_395);
  float _397 = _392 * 23.0f;
  float _398 = _397 + -14.473931312561035f;
  float _399 = exp2(_398);
  float _400 = _393 * 23.0f;
  float _401 = _400 + -14.473931312561035f;
  float _402 = exp2(_401);
  float _403 = dot(float3(_396, _399, _402), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _408 = dot(float3(_396, _399, _402), float3(_396, _399, _402));
  float _409 = rsqrt(_408);
  float _410 = _409 * _396;
  float _411 = _409 * _399;
  float _412 = _409 * _402;
  float _413 = cb2_001x - _410;
  float _414 = cb2_001y - _411;
  float _415 = cb2_001z - _412;
  float _416 = dot(float3(_413, _414, _415), float3(_413, _414, _415));
  float _419 = cb2_002z * _416;
  float _421 = _419 + cb2_002w;
  float _422 = saturate(_421);
  float _424 = cb2_002x * _422;
  float _425 = _403 - _396;
  float _426 = _403 - _399;
  float _427 = _403 - _402;
  float _428 = _424 * _425;
  float _429 = _424 * _426;
  float _430 = _424 * _427;
  float _431 = _428 + _396;
  float _432 = _429 + _399;
  float _433 = _430 + _402;
  float _435 = cb2_002y * _422;
  float _436 = 0.10000000149011612f - _431;
  float _437 = 0.10000000149011612f - _432;
  float _438 = 0.10000000149011612f - _433;
  float _439 = _436 * _435;
  float _440 = _437 * _435;
  float _441 = _438 * _435;
  float _442 = _439 + _431;
  float _443 = _440 + _432;
  float _444 = _441 + _433;
  float _445 = saturate(_442);
  float _446 = saturate(_443);
  float _447 = saturate(_444);
  float _453 = cb2_016x - _445;
  float _454 = cb2_016y - _446;
  float _455 = cb2_016z - _447;
  float _456 = _453 * cb2_016w;
  float _457 = _454 * cb2_016w;
  float _458 = _455 * cb2_016w;
  float _459 = _456 + _445;
  float _460 = _457 + _446;
  float _461 = _458 + _447;
  if (_362 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _464 = cb2_024x * _459;
    float _465 = cb2_024x * _460;
    float _466 = cb2_024x * _461;
    _468 = _464;
    _469 = _465;
    _470 = _466;
  } else {
    _468 = _459;
    _469 = _460;
    _470 = _461;
  }
  float _473 = _468 * 0.9708889722824097f;
  float _474 = mad(0.026962999254465103f, _469, _473);
  float _475 = mad(0.002148000057786703f, _470, _474);
  float _476 = _468 * 0.01088900025933981f;
  float _477 = mad(0.9869629740715027f, _469, _476);
  float _478 = mad(0.002148000057786703f, _470, _477);
  float _479 = mad(0.026962999254465103f, _469, _476);
  float _480 = mad(0.9621480107307434f, _470, _479);
  float _481 = max(_475, 0.0f);
  float _482 = max(_478, 0.0f);
  float _483 = max(_480, 0.0f);
  float _484 = min(_481, cb2_095y);
  float _485 = min(_482, cb2_095y);
  float _486 = min(_483, cb2_095y);
  bool _489 = ((uint)(cb2_095x) == 0);
  bool _492 = ((uint)(cb2_094w) == 0);
  bool _494 = ((uint)(cb2_094z) == 0);
  bool _496 = ((uint)(cb2_094y) != 0);
  bool _498 = ((uint)(cb2_094x) == 0);
  bool _500 = ((uint)(cb2_069z) != 0);
  float _547 = asfloat((uint)(cb2_075y));
  float _548 = asfloat((uint)(cb2_075z));
  float _549 = asfloat((uint)(cb2_075w));
  float _550 = asfloat((uint)(cb2_074z));
  float _551 = asfloat((uint)(cb2_074w));
  float _552 = asfloat((uint)(cb2_075x));
  float _553 = asfloat((uint)(cb2_073w));
  float _554 = asfloat((uint)(cb2_074x));
  float _555 = asfloat((uint)(cb2_074y));
  float _556 = asfloat((uint)(cb2_077x));
  float _557 = asfloat((uint)(cb2_077y));
  float _558 = asfloat((uint)(cb2_079x));
  float _559 = asfloat((uint)(cb2_079y));
  float _560 = asfloat((uint)(cb2_079z));
  float _561 = asfloat((uint)(cb2_078y));
  float _562 = asfloat((uint)(cb2_078z));
  float _563 = asfloat((uint)(cb2_078w));
  float _564 = asfloat((uint)(cb2_077z));
  float _565 = asfloat((uint)(cb2_077w));
  float _566 = asfloat((uint)(cb2_078x));
  float _567 = asfloat((uint)(cb2_072y));
  float _568 = asfloat((uint)(cb2_072z));
  float _569 = asfloat((uint)(cb2_072w));
  float _570 = asfloat((uint)(cb2_071x));
  float _571 = asfloat((uint)(cb2_071y));
  float _572 = asfloat((uint)(cb2_076x));
  float _573 = asfloat((uint)(cb2_070w));
  float _574 = asfloat((uint)(cb2_070x));
  float _575 = asfloat((uint)(cb2_070y));
  float _576 = asfloat((uint)(cb2_070z));
  float _577 = asfloat((uint)(cb2_073x));
  float _578 = asfloat((uint)(cb2_073y));
  float _579 = asfloat((uint)(cb2_073z));
  float _580 = asfloat((uint)(cb2_071z));
  float _581 = asfloat((uint)(cb2_071w));
  float _582 = asfloat((uint)(cb2_072x));
  float _583 = max(_485, _486);
  float _584 = max(_484, _583);
  float _585 = 1.0f / _584;
  float _586 = _585 * _484;
  float _587 = _585 * _485;
  float _588 = _585 * _486;
  float _589 = abs(_586);
  float _590 = log2(_589);
  float _591 = _590 * _574;
  float _592 = exp2(_591);
  float _593 = abs(_587);
  float _594 = log2(_593);
  float _595 = _594 * _575;
  float _596 = exp2(_595);
  float _597 = abs(_588);
  float _598 = log2(_597);
  float _599 = _598 * _576;
  float _600 = exp2(_599);
  if (_496) {
    float _603 = asfloat((uint)(cb2_076w));
    float _605 = asfloat((uint)(cb2_076z));
    float _607 = asfloat((uint)(cb2_076y));
    float _608 = _605 * _485;
    float _609 = _607 * _484;
    float _610 = _603 * _486;
    float _611 = _609 + _610;
    float _612 = _611 + _608;
    _620 = _612;
  } else {
    float _614 = _581 * _485;
    float _615 = _580 * _484;
    float _616 = _582 * _486;
    float _617 = _614 + _615;
    float _618 = _617 + _616;
    _620 = _618;
  }
  float _621 = abs(_620);
  float _622 = log2(_621);
  float _623 = _622 * _573;
  float _624 = exp2(_623);
  float _625 = log2(_624);
  float _626 = _625 * _572;
  float _627 = exp2(_626);
  float _628 = select(_500, _627, _624);
  float _629 = _628 * _570;
  float _630 = _629 + _571;
  float _631 = 1.0f / _630;
  float _632 = _631 * _624;
  if (_496) {
    if (!_498) {
      float _635 = _592 * _564;
      float _636 = _596 * _565;
      float _637 = _600 * _566;
      float _638 = _636 + _635;
      float _639 = _638 + _637;
      float _640 = _596 * _562;
      float _641 = _592 * _561;
      float _642 = _600 * _563;
      float _643 = _640 + _641;
      float _644 = _643 + _642;
      float _645 = _600 * _560;
      float _646 = _596 * _559;
      float _647 = _592 * _558;
      float _648 = _646 + _647;
      float _649 = _648 + _645;
      float _650 = max(_644, _649);
      float _651 = max(_639, _650);
      float _652 = 1.0f / _651;
      float _653 = _652 * _639;
      float _654 = _652 * _644;
      float _655 = _652 * _649;
      _657 = _653;
      _658 = _654;
      _659 = _655;
    } else {
      _657 = _592;
      _658 = _596;
      _659 = _600;
    }
    float _660 = _657 * _557;
    float _661 = exp2(_660);
    float _662 = _661 * _556;
    float _663 = saturate(_662);
    float _664 = _657 * _556;
    float _665 = _657 - _664;
    float _666 = saturate(_665);
    float _667 = max(_556, _666);
    float _668 = min(_667, _663);
    float _669 = _658 * _557;
    float _670 = exp2(_669);
    float _671 = _670 * _556;
    float _672 = saturate(_671);
    float _673 = _658 * _556;
    float _674 = _658 - _673;
    float _675 = saturate(_674);
    float _676 = max(_556, _675);
    float _677 = min(_676, _672);
    float _678 = _659 * _557;
    float _679 = exp2(_678);
    float _680 = _679 * _556;
    float _681 = saturate(_680);
    float _682 = _659 * _556;
    float _683 = _659 - _682;
    float _684 = saturate(_683);
    float _685 = max(_556, _684);
    float _686 = min(_685, _681);
    _688 = _668;
    _689 = _677;
    _690 = _686;
  } else {
    _688 = _592;
    _689 = _596;
    _690 = _600;
  }
  float _691 = _688 * _580;
  float _692 = _689 * _581;
  float _693 = _692 + _691;
  float _694 = _690 * _582;
  float _695 = _693 + _694;
  float _696 = 1.0f / _695;
  float _697 = _696 * _632;
  float _698 = saturate(_697);
  float _699 = _698 * _688;
  float _700 = saturate(_699);
  float _701 = _698 * _689;
  float _702 = saturate(_701);
  float _703 = _698 * _690;
  float _704 = saturate(_703);
  float _705 = _700 * _567;
  float _706 = _567 - _705;
  float _707 = _702 * _568;
  float _708 = _568 - _707;
  float _709 = _704 * _569;
  float _710 = _569 - _709;
  float _711 = _704 * _582;
  float _712 = _700 * _580;
  float _713 = _702 * _581;
  float _714 = _632 - _712;
  float _715 = _714 - _713;
  float _716 = _715 - _711;
  float _717 = saturate(_716);
  float _718 = _708 * _581;
  float _719 = _706 * _580;
  float _720 = _710 * _582;
  float _721 = _718 + _719;
  float _722 = _721 + _720;
  float _723 = 1.0f / _722;
  float _724 = _723 * _717;
  float _725 = _724 * _706;
  float _726 = _725 + _700;
  float _727 = saturate(_726);
  float _728 = _724 * _708;
  float _729 = _728 + _702;
  float _730 = saturate(_729);
  float _731 = _724 * _710;
  float _732 = _731 + _704;
  float _733 = saturate(_732);
  float _734 = _733 * _582;
  float _735 = _727 * _580;
  float _736 = _730 * _581;
  float _737 = _632 - _735;
  float _738 = _737 - _736;
  float _739 = _738 - _734;
  float _740 = saturate(_739);
  float _741 = _740 * _577;
  float _742 = _741 + _727;
  float _743 = saturate(_742);
  float _744 = _740 * _578;
  float _745 = _744 + _730;
  float _746 = saturate(_745);
  float _747 = _740 * _579;
  float _748 = _747 + _733;
  float _749 = saturate(_748);
  if (!_494) {
    float _751 = _743 * _553;
    float _752 = _746 * _554;
    float _753 = _749 * _555;
    float _754 = _752 + _751;
    float _755 = _754 + _753;
    float _756 = _746 * _551;
    float _757 = _743 * _550;
    float _758 = _749 * _552;
    float _759 = _756 + _757;
    float _760 = _759 + _758;
    float _761 = _749 * _549;
    float _762 = _746 * _548;
    float _763 = _743 * _547;
    float _764 = _762 + _763;
    float _765 = _764 + _761;
    if (!_492) {
      float _767 = saturate(_755);
      float _768 = saturate(_760);
      float _769 = saturate(_765);
      _771 = _769;
      _772 = _768;
      _773 = _767;
    } else {
      _771 = _765;
      _772 = _760;
      _773 = _755;
    }
  } else {
    _771 = _749;
    _772 = _746;
    _773 = _743;
  }
  if (!_489) {
    float _775 = _773 * _553;
    float _776 = _772 * _553;
    float _777 = _771 * _553;
    _779 = _777;
    _780 = _776;
    _781 = _775;
  } else {
    _779 = _771;
    _780 = _772;
    _781 = _773;
  }
  if (_362) {
    float _785 = cb1_018z * 9.999999747378752e-05f;
    float _786 = _785 * _781;
    float _787 = _785 * _780;
    float _788 = _785 * _779;
    float _790 = 5000.0f / cb1_018y;
    float _791 = _786 * _790;
    float _792 = _787 * _790;
    float _793 = _788 * _790;
    _795 = _791;
    _796 = _792;
    _797 = _793;
  } else {
    _795 = _781;
    _796 = _780;
    _797 = _779;
  }
  float _798 = _795 * 1.6047500371932983f;
  float _799 = mad(-0.5310800075531006f, _796, _798);
  float _800 = mad(-0.07366999983787537f, _797, _799);
  float _801 = _795 * -0.10208000242710114f;
  float _802 = mad(1.1081299781799316f, _796, _801);
  float _803 = mad(-0.006049999967217445f, _797, _802);
  float _804 = _795 * -0.0032599999103695154f;
  float _805 = mad(-0.07275000214576721f, _796, _804);
  float _806 = mad(1.0760200023651123f, _797, _805);
  if (_362) {
    // float _808 = max(_800, 0.0f);
    // float _809 = max(_803, 0.0f);
    // float _810 = max(_806, 0.0f);
    // bool _811 = !(_808 >= 0.0030399328097701073f);
    // if (!_811) {
    //   float _813 = abs(_808);
    //   float _814 = log2(_813);
    //   float _815 = _814 * 0.4166666567325592f;
    //   float _816 = exp2(_815);
    //   float _817 = _816 * 1.0549999475479126f;
    //   float _818 = _817 + -0.054999999701976776f;
    //   _822 = _818;
    // } else {
    //   float _820 = _808 * 12.923210144042969f;
    //   _822 = _820;
    // }
    // bool _823 = !(_809 >= 0.0030399328097701073f);
    // if (!_823) {
    //   float _825 = abs(_809);
    //   float _826 = log2(_825);
    //   float _827 = _826 * 0.4166666567325592f;
    //   float _828 = exp2(_827);
    //   float _829 = _828 * 1.0549999475479126f;
    //   float _830 = _829 + -0.054999999701976776f;
    //   _834 = _830;
    // } else {
    //   float _832 = _809 * 12.923210144042969f;
    //   _834 = _832;
    // }
    // bool _835 = !(_810 >= 0.0030399328097701073f);
    // if (!_835) {
    //   float _837 = abs(_810);
    //   float _838 = log2(_837);
    //   float _839 = _838 * 0.4166666567325592f;
    //   float _840 = exp2(_839);
    //   float _841 = _840 * 1.0549999475479126f;
    //   float _842 = _841 + -0.054999999701976776f;
    //   _915 = _822;
    //   _916 = _834;
    //   _917 = _842;
    // } else {
    //   float _844 = _810 * 12.923210144042969f;
    //   _915 = _822;
    //   _916 = _834;
    //   _917 = _844;
    // }
    _915 = renodx::color::srgb::EncodeSafe(_800);
    _916 = renodx::color::srgb::EncodeSafe(_803);
    _917 = renodx::color::srgb::EncodeSafe(_806);

  } else {
    float _846 = saturate(_800);
    float _847 = saturate(_803);
    float _848 = saturate(_806);
    bool _849 = ((uint)(cb1_018w) == -2);
    if (!_849) {
      bool _851 = !(_846 >= 0.0030399328097701073f);
      if (!_851) {
        float _853 = abs(_846);
        float _854 = log2(_853);
        float _855 = _854 * 0.4166666567325592f;
        float _856 = exp2(_855);
        float _857 = _856 * 1.0549999475479126f;
        float _858 = _857 + -0.054999999701976776f;
        _862 = _858;
      } else {
        float _860 = _846 * 12.923210144042969f;
        _862 = _860;
      }
      bool _863 = !(_847 >= 0.0030399328097701073f);
      if (!_863) {
        float _865 = abs(_847);
        float _866 = log2(_865);
        float _867 = _866 * 0.4166666567325592f;
        float _868 = exp2(_867);
        float _869 = _868 * 1.0549999475479126f;
        float _870 = _869 + -0.054999999701976776f;
        _874 = _870;
      } else {
        float _872 = _847 * 12.923210144042969f;
        _874 = _872;
      }
      bool _875 = !(_848 >= 0.0030399328097701073f);
      if (!_875) {
        float _877 = abs(_848);
        float _878 = log2(_877);
        float _879 = _878 * 0.4166666567325592f;
        float _880 = exp2(_879);
        float _881 = _880 * 1.0549999475479126f;
        float _882 = _881 + -0.054999999701976776f;
        _886 = _862;
        _887 = _874;
        _888 = _882;
      } else {
        float _884 = _848 * 12.923210144042969f;
        _886 = _862;
        _887 = _874;
        _888 = _884;
      }
    } else {
      _886 = _846;
      _887 = _847;
      _888 = _848;
    }
    float _893 = abs(_886);
    float _894 = abs(_887);
    float _895 = abs(_888);
    float _896 = log2(_893);
    float _897 = log2(_894);
    float _898 = log2(_895);
    float _899 = _896 * cb2_000z;
    float _900 = _897 * cb2_000z;
    float _901 = _898 * cb2_000z;
    float _902 = exp2(_899);
    float _903 = exp2(_900);
    float _904 = exp2(_901);
    float _905 = _902 * cb2_000y;
    float _906 = _903 * cb2_000y;
    float _907 = _904 * cb2_000y;
    float _908 = _905 + cb2_000x;
    float _909 = _906 + cb2_000x;
    float _910 = _907 + cb2_000x;
    float _911 = saturate(_908);
    float _912 = saturate(_909);
    float _913 = saturate(_910);
    _915 = _911;
    _916 = _912;
    _917 = _913;
  }
  float _918 = dot(float3(_915, _916, _917), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _915;
  SV_Target.y = _916;
  SV_Target.z = _917;
  SV_Target.w = _918;
  SV_Target_1.x = _918;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
