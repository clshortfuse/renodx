#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = _26.x * 6.283199787139893f;
  float _31 = cos(_30);
  float _32 = sin(_30);
  float _33 = _31 * _26.z;
  float _34 = _32 * _26.z;
  float _35 = _33 + TEXCOORD0_centroid.x;
  float _36 = _34 + TEXCOORD0_centroid.y;
  float _37 = _35 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _33;
  float _42 = _36 * 10.0f;
  float _43 = 10.0f - _42;
  float _44 = min(_42, _43);
  float _45 = saturate(_44);
  float _46 = _45 * _34;
  float _47 = _41 + TEXCOORD0_centroid.x;
  float _48 = _46 + TEXCOORD0_centroid.y;
  float4 _49 = t7.SampleLevel(s2_space2, float2(_47, _48), 0.0f);
  float _51 = _49.w * _41;
  float _52 = _49.w * _46;
  float _53 = 1.0f - _26.y;
  float _54 = saturate(_53);
  float _55 = _51 * _54;
  float _56 = _52 * _54;
  float _57 = _55 + TEXCOORD0_centroid.x;
  float _58 = _56 + TEXCOORD0_centroid.y;
  float4 _59 = t7.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  bool _61 = (_59.y > 0.0f);
  float _62 = select(_61, TEXCOORD0_centroid.x, _57);
  float _63 = select(_61, TEXCOORD0_centroid.y, _58);
  float4 _64 = t1.SampleLevel(s4_space2, float2(_62, _63), 0.0f);
  float _68 = max(_64.x, 0.0f);
  float _69 = max(_64.y, 0.0f);
  float _70 = max(_64.z, 0.0f);
  float _71 = min(_68, 65000.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float4 _74 = t4.SampleLevel(s2_space2, float2(_62, _63), 0.0f);
  float _79 = max(_74.x, 0.0f);
  float _80 = max(_74.y, 0.0f);
  float _81 = max(_74.z, 0.0f);
  float _82 = max(_74.w, 0.0f);
  float _83 = min(_79, 5000.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _89 = _24.x * cb0_028z;
  float _90 = _89 + cb0_028x;
  float _91 = cb2_027w / _90;
  float _92 = 1.0f - _91;
  float _93 = abs(_92);
  float _95 = cb2_027y * _93;
  float _97 = _95 - cb2_027z;
  float _98 = saturate(_97);
  float _99 = max(_98, _86);
  float _100 = saturate(_99);
  float _104 = cb2_013x * _62;
  float _105 = cb2_013y * _63;
  float _108 = _104 + cb2_013z;
  float _109 = _105 + cb2_013w;
  float _112 = dot(float2(_108, _109), float2(_108, _109));
  float _113 = abs(_112);
  float _114 = log2(_113);
  float _115 = _114 * cb2_014x;
  float _116 = exp2(_115);
  float _117 = saturate(_116);
  float _121 = cb2_011x * _62;
  float _122 = cb2_011y * _63;
  float _125 = _121 + cb2_011z;
  float _126 = _122 + cb2_011w;
  float _127 = _125 * _117;
  float _128 = _126 * _117;
  float _129 = _127 + _62;
  float _130 = _128 + _63;
  float _134 = cb2_012x * _62;
  float _135 = cb2_012y * _63;
  float _138 = _134 + cb2_012z;
  float _139 = _135 + cb2_012w;
  float _140 = _138 * _117;
  float _141 = _139 * _117;
  float _142 = _140 + _62;
  float _143 = _141 + _63;
  float4 _144 = t1.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _148 = max(_144.x, 0.0f);
  float _149 = max(_144.y, 0.0f);
  float _150 = max(_144.z, 0.0f);
  float _151 = min(_148, 65000.0f);
  float _152 = min(_149, 65000.0f);
  float _153 = min(_150, 65000.0f);
  float4 _154 = t1.SampleLevel(s2_space2, float2(_142, _143), 0.0f);
  float _158 = max(_154.x, 0.0f);
  float _159 = max(_154.y, 0.0f);
  float _160 = max(_154.z, 0.0f);
  float _161 = min(_158, 65000.0f);
  float _162 = min(_159, 65000.0f);
  float _163 = min(_160, 65000.0f);
  float4 _164 = t4.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _168 = max(_164.x, 0.0f);
  float _169 = max(_164.y, 0.0f);
  float _170 = max(_164.z, 0.0f);
  float _171 = min(_168, 5000.0f);
  float _172 = min(_169, 5000.0f);
  float _173 = min(_170, 5000.0f);
  float4 _174 = t4.SampleLevel(s2_space2, float2(_142, _143), 0.0f);
  float _178 = max(_174.x, 0.0f);
  float _179 = max(_174.y, 0.0f);
  float _180 = max(_174.z, 0.0f);
  float _181 = min(_178, 5000.0f);
  float _182 = min(_179, 5000.0f);
  float _183 = min(_180, 5000.0f);
  float _188 = 1.0f - cb2_009x;
  float _189 = 1.0f - cb2_009y;
  float _190 = 1.0f - cb2_009z;
  float _195 = _188 - cb2_010x;
  float _196 = _189 - cb2_010y;
  float _197 = _190 - cb2_010z;
  float _198 = saturate(_195);
  float _199 = saturate(_196);
  float _200 = saturate(_197);
  float _201 = _198 * _71;
  float _202 = _199 * _72;
  float _203 = _200 * _73;
  float _204 = cb2_009x * _151;
  float _205 = cb2_009y * _152;
  float _206 = cb2_009z * _153;
  float _207 = _204 + _201;
  float _208 = _205 + _202;
  float _209 = _206 + _203;
  float _210 = cb2_010x * _161;
  float _211 = cb2_010y * _162;
  float _212 = cb2_010z * _163;
  float _213 = _207 + _210;
  float _214 = _208 + _211;
  float _215 = _209 + _212;
  float _216 = _198 * _83;
  float _217 = _199 * _84;
  float _218 = _200 * _85;
  float _219 = cb2_009x * _171;
  float _220 = cb2_009y * _172;
  float _221 = cb2_009z * _173;
  float _222 = cb2_010x * _181;
  float _223 = cb2_010y * _182;
  float _224 = cb2_010z * _183;
  float4 _225 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _229 = _216 - _213;
  float _230 = _229 + _219;
  float _231 = _230 + _222;
  float _232 = _217 - _214;
  float _233 = _232 + _220;
  float _234 = _233 + _223;
  float _235 = _218 - _215;
  float _236 = _235 + _221;
  float _237 = _236 + _224;
  float _238 = _231 * _100;
  float _239 = _234 * _100;
  float _240 = _237 * _100;
  float _241 = _238 + _213;
  float _242 = _239 + _214;
  float _243 = _240 + _215;
  float _244 = dot(float3(_241, _242, _243), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _248 = t0[0].SExposureData_020;
  float _250 = t0[0].SExposureData_004;
  float _252 = cb2_018x * 0.5f;
  float _253 = _252 * cb2_018y;
  float _254 = _250.x - _253;
  float _255 = cb2_018y * cb2_018x;
  float _256 = 1.0f / _255;
  float _257 = _254 * _256;
  float _258 = _244 / _248.x;
  float _259 = _258 * 5464.01611328125f;
  float _260 = _259 + 9.99999993922529e-09f;
  float _261 = log2(_260);
  float _262 = _261 - _254;
  float _263 = _262 * _256;
  float _264 = saturate(_263);
  float2 _265 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _264), 0.0f);
  float _268 = max(_265.y, 1.0000000116860974e-07f);
  float _269 = _265.x / _268;
  float _270 = _269 + _257;
  float _271 = _270 / _256;
  float _272 = _271 - _250.x;
  float _273 = -0.0f - _272;
  float _275 = _273 - cb2_027x;
  float _276 = max(0.0f, _275);
  float _279 = cb2_026z * _276;
  float _280 = _272 - cb2_027x;
  float _281 = max(0.0f, _280);
  float _283 = cb2_026w * _281;
  bool _284 = (_272 < 0.0f);
  float _285 = select(_284, _279, _283);
  float _286 = exp2(_285);
  float _287 = _286 * _241;
  float _288 = _286 * _242;
  float _289 = _286 * _243;
  float _294 = cb2_024y * _225.x;
  float _295 = cb2_024z * _225.y;
  float _296 = cb2_024w * _225.z;
  float _297 = _294 + _287;
  float _298 = _295 + _288;
  float _299 = _296 + _289;
  float _304 = _297 * cb2_025x;
  float _305 = _298 * cb2_025y;
  float _306 = _299 * cb2_025z;
  float _307 = dot(float3(_304, _305, _306), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _308 = t0[0].SExposureData_012;
  float _310 = _307 * 5464.01611328125f;
  float _311 = _310 * _308.x;
  float _312 = _311 + 9.99999993922529e-09f;
  float _313 = log2(_312);
  float _314 = _313 + 16.929765701293945f;
  float _315 = _314 * 0.05734497308731079f;
  float _316 = saturate(_315);
  float _317 = _316 * _316;
  float _318 = _316 * 2.0f;
  float _319 = 3.0f - _318;
  float _320 = _317 * _319;
  float _321 = _305 * 0.8450999855995178f;
  float _322 = _306 * 0.14589999616146088f;
  float _323 = _321 + _322;
  float _324 = _323 * 2.4890189170837402f;
  float _325 = _323 * 0.3754962384700775f;
  float _326 = _323 * 2.811495304107666f;
  float _327 = _323 * 5.519708156585693f;
  float _328 = _307 - _324;
  float _329 = _320 * _328;
  float _330 = _329 + _324;
  float _331 = _320 * 0.5f;
  float _332 = _331 + 0.5f;
  float _333 = _332 * _328;
  float _334 = _333 + _324;
  float _335 = _304 - _325;
  float _336 = _305 - _326;
  float _337 = _306 - _327;
  float _338 = _332 * _335;
  float _339 = _332 * _336;
  float _340 = _332 * _337;
  float _341 = _338 + _325;
  float _342 = _339 + _326;
  float _343 = _340 + _327;
  float _344 = 1.0f / _334;
  float _345 = _330 * _344;
  float _346 = _345 * _341;
  float _347 = _345 * _342;
  float _348 = _345 * _343;
  float _352 = cb2_020x * TEXCOORD0_centroid.x;
  float _353 = cb2_020y * TEXCOORD0_centroid.y;
  float _356 = _352 + cb2_020z;
  float _357 = _353 + cb2_020w;
  float _360 = dot(float2(_356, _357), float2(_356, _357));
  float _361 = 1.0f - _360;
  float _362 = saturate(_361);
  float _363 = log2(_362);
  float _364 = _363 * cb2_021w;
  float _365 = exp2(_364);
  float _369 = _346 - cb2_021x;
  float _370 = _347 - cb2_021y;
  float _371 = _348 - cb2_021z;
  float _372 = _369 * _365;
  float _373 = _370 * _365;
  float _374 = _371 * _365;
  float _375 = _372 + cb2_021x;
  float _376 = _373 + cb2_021y;
  float _377 = _374 + cb2_021z;
  float _378 = t0[0].SExposureData_000;
  float _380 = max(_248.x, 0.0010000000474974513f);
  float _381 = 1.0f / _380;
  float _382 = _381 * _378.x;
  bool _385 = ((uint)(cb2_069y) == 0);
  float _391;
  float _392;
  float _393;
  float _447;
  float _448;
  float _449;
  float _480;
  float _481;
  float _482;
  float _632;
  float _669;
  float _670;
  float _671;
  float _700;
  float _701;
  float _702;
  float _783;
  float _784;
  float _785;
  float _791;
  float _792;
  float _793;
  float _807;
  float _808;
  float _809;
  float _834;
  float _846;
  float _874;
  float _886;
  float _898;
  float _899;
  float _900;
  float _927;
  float _928;
  float _929;
  if (!_385) {
    float _387 = _382 * _375;
    float _388 = _382 * _376;
    float _389 = _382 * _377;
    _391 = _387;
    _392 = _388;
    _393 = _389;
  } else {
    _391 = _375;
    _392 = _376;
    _393 = _377;
  }
  float _394 = _391 * 0.6130970120429993f;
  float _395 = mad(0.33952298760414124f, _392, _394);
  float _396 = mad(0.04737899824976921f, _393, _395);
  float _397 = _391 * 0.07019399851560593f;
  float _398 = mad(0.9163540005683899f, _392, _397);
  float _399 = mad(0.013451999984681606f, _393, _398);
  float _400 = _391 * 0.02061600051820278f;
  float _401 = mad(0.10956999659538269f, _392, _400);
  float _402 = mad(0.8698149919509888f, _393, _401);
  float _403 = log2(_396);
  float _404 = log2(_399);
  float _405 = log2(_402);
  float _406 = _403 * 0.04211956635117531f;
  float _407 = _404 * 0.04211956635117531f;
  float _408 = _405 * 0.04211956635117531f;
  float _409 = _406 + 0.6252607107162476f;
  float _410 = _407 + 0.6252607107162476f;
  float _411 = _408 + 0.6252607107162476f;
  float4 _412 = t6.SampleLevel(s2_space2, float3(_409, _410, _411), 0.0f);
  bool _418 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_418 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _422 = cb2_017x * _412.x;
    float _423 = cb2_017x * _412.y;
    float _424 = cb2_017x * _412.z;
    float _426 = _422 + cb2_017y;
    float _427 = _423 + cb2_017y;
    float _428 = _424 + cb2_017y;
    float _429 = exp2(_426);
    float _430 = exp2(_427);
    float _431 = exp2(_428);
    float _432 = _429 + 1.0f;
    float _433 = _430 + 1.0f;
    float _434 = _431 + 1.0f;
    float _435 = 1.0f / _432;
    float _436 = 1.0f / _433;
    float _437 = 1.0f / _434;
    float _439 = cb2_017z * _435;
    float _440 = cb2_017z * _436;
    float _441 = cb2_017z * _437;
    float _443 = _439 + cb2_017w;
    float _444 = _440 + cb2_017w;
    float _445 = _441 + cb2_017w;
    _447 = _443;
    _448 = _444;
    _449 = _445;
  } else {
    _447 = _412.x;
    _448 = _412.y;
    _449 = _412.z;
  }
  float _450 = _447 * 23.0f;
  float _451 = _450 + -14.473931312561035f;
  float _452 = exp2(_451);
  float _453 = _448 * 23.0f;
  float _454 = _453 + -14.473931312561035f;
  float _455 = exp2(_454);
  float _456 = _449 * 23.0f;
  float _457 = _456 + -14.473931312561035f;
  float _458 = exp2(_457);
  float _465 = cb2_016x - _452;
  float _466 = cb2_016y - _455;
  float _467 = cb2_016z - _458;
  float _468 = _465 * cb2_016w;
  float _469 = _466 * cb2_016w;
  float _470 = _467 * cb2_016w;
  float _471 = _468 + _452;
  float _472 = _469 + _455;
  float _473 = _470 + _458;
  if (_418 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _476 = cb2_024x * _471;
    float _477 = cb2_024x * _472;
    float _478 = cb2_024x * _473;
    _480 = _476;
    _481 = _477;
    _482 = _478;
  } else {
    _480 = _471;
    _481 = _472;
    _482 = _473;
  }
  float _485 = _480 * 0.9708889722824097f;
  float _486 = mad(0.026962999254465103f, _481, _485);
  float _487 = mad(0.002148000057786703f, _482, _486);
  float _488 = _480 * 0.01088900025933981f;
  float _489 = mad(0.9869629740715027f, _481, _488);
  float _490 = mad(0.002148000057786703f, _482, _489);
  float _491 = mad(0.026962999254465103f, _481, _488);
  float _492 = mad(0.9621480107307434f, _482, _491);
  float _493 = max(_487, 0.0f);
  float _494 = max(_490, 0.0f);
  float _495 = max(_492, 0.0f);
  float _496 = min(_493, cb2_095y);
  float _497 = min(_494, cb2_095y);
  float _498 = min(_495, cb2_095y);
  bool _501 = ((uint)(cb2_095x) == 0);
  bool _504 = ((uint)(cb2_094w) == 0);
  bool _506 = ((uint)(cb2_094z) == 0);
  bool _508 = ((uint)(cb2_094y) != 0);
  bool _510 = ((uint)(cb2_094x) == 0);
  bool _512 = ((uint)(cb2_069z) != 0);
  float _559 = asfloat((uint)(cb2_075y));
  float _560 = asfloat((uint)(cb2_075z));
  float _561 = asfloat((uint)(cb2_075w));
  float _562 = asfloat((uint)(cb2_074z));
  float _563 = asfloat((uint)(cb2_074w));
  float _564 = asfloat((uint)(cb2_075x));
  float _565 = asfloat((uint)(cb2_073w));
  float _566 = asfloat((uint)(cb2_074x));
  float _567 = asfloat((uint)(cb2_074y));
  float _568 = asfloat((uint)(cb2_077x));
  float _569 = asfloat((uint)(cb2_077y));
  float _570 = asfloat((uint)(cb2_079x));
  float _571 = asfloat((uint)(cb2_079y));
  float _572 = asfloat((uint)(cb2_079z));
  float _573 = asfloat((uint)(cb2_078y));
  float _574 = asfloat((uint)(cb2_078z));
  float _575 = asfloat((uint)(cb2_078w));
  float _576 = asfloat((uint)(cb2_077z));
  float _577 = asfloat((uint)(cb2_077w));
  float _578 = asfloat((uint)(cb2_078x));
  float _579 = asfloat((uint)(cb2_072y));
  float _580 = asfloat((uint)(cb2_072z));
  float _581 = asfloat((uint)(cb2_072w));
  float _582 = asfloat((uint)(cb2_071x));
  float _583 = asfloat((uint)(cb2_071y));
  float _584 = asfloat((uint)(cb2_076x));
  float _585 = asfloat((uint)(cb2_070w));
  float _586 = asfloat((uint)(cb2_070x));
  float _587 = asfloat((uint)(cb2_070y));
  float _588 = asfloat((uint)(cb2_070z));
  float _589 = asfloat((uint)(cb2_073x));
  float _590 = asfloat((uint)(cb2_073y));
  float _591 = asfloat((uint)(cb2_073z));
  float _592 = asfloat((uint)(cb2_071z));
  float _593 = asfloat((uint)(cb2_071w));
  float _594 = asfloat((uint)(cb2_072x));
  float _595 = max(_497, _498);
  float _596 = max(_496, _595);
  float _597 = 1.0f / _596;
  float _598 = _597 * _496;
  float _599 = _597 * _497;
  float _600 = _597 * _498;
  float _601 = abs(_598);
  float _602 = log2(_601);
  float _603 = _602 * _586;
  float _604 = exp2(_603);
  float _605 = abs(_599);
  float _606 = log2(_605);
  float _607 = _606 * _587;
  float _608 = exp2(_607);
  float _609 = abs(_600);
  float _610 = log2(_609);
  float _611 = _610 * _588;
  float _612 = exp2(_611);
  if (_508) {
    float _615 = asfloat((uint)(cb2_076w));
    float _617 = asfloat((uint)(cb2_076z));
    float _619 = asfloat((uint)(cb2_076y));
    float _620 = _617 * _497;
    float _621 = _619 * _496;
    float _622 = _615 * _498;
    float _623 = _621 + _622;
    float _624 = _623 + _620;
    _632 = _624;
  } else {
    float _626 = _593 * _497;
    float _627 = _592 * _496;
    float _628 = _594 * _498;
    float _629 = _626 + _627;
    float _630 = _629 + _628;
    _632 = _630;
  }
  float _633 = abs(_632);
  float _634 = log2(_633);
  float _635 = _634 * _585;
  float _636 = exp2(_635);
  float _637 = log2(_636);
  float _638 = _637 * _584;
  float _639 = exp2(_638);
  float _640 = select(_512, _639, _636);
  float _641 = _640 * _582;
  float _642 = _641 + _583;
  float _643 = 1.0f / _642;
  float _644 = _643 * _636;
  if (_508) {
    if (!_510) {
      float _647 = _604 * _576;
      float _648 = _608 * _577;
      float _649 = _612 * _578;
      float _650 = _648 + _647;
      float _651 = _650 + _649;
      float _652 = _608 * _574;
      float _653 = _604 * _573;
      float _654 = _612 * _575;
      float _655 = _652 + _653;
      float _656 = _655 + _654;
      float _657 = _612 * _572;
      float _658 = _608 * _571;
      float _659 = _604 * _570;
      float _660 = _658 + _659;
      float _661 = _660 + _657;
      float _662 = max(_656, _661);
      float _663 = max(_651, _662);
      float _664 = 1.0f / _663;
      float _665 = _664 * _651;
      float _666 = _664 * _656;
      float _667 = _664 * _661;
      _669 = _665;
      _670 = _666;
      _671 = _667;
    } else {
      _669 = _604;
      _670 = _608;
      _671 = _612;
    }
    float _672 = _669 * _569;
    float _673 = exp2(_672);
    float _674 = _673 * _568;
    float _675 = saturate(_674);
    float _676 = _669 * _568;
    float _677 = _669 - _676;
    float _678 = saturate(_677);
    float _679 = max(_568, _678);
    float _680 = min(_679, _675);
    float _681 = _670 * _569;
    float _682 = exp2(_681);
    float _683 = _682 * _568;
    float _684 = saturate(_683);
    float _685 = _670 * _568;
    float _686 = _670 - _685;
    float _687 = saturate(_686);
    float _688 = max(_568, _687);
    float _689 = min(_688, _684);
    float _690 = _671 * _569;
    float _691 = exp2(_690);
    float _692 = _691 * _568;
    float _693 = saturate(_692);
    float _694 = _671 * _568;
    float _695 = _671 - _694;
    float _696 = saturate(_695);
    float _697 = max(_568, _696);
    float _698 = min(_697, _693);
    _700 = _680;
    _701 = _689;
    _702 = _698;
  } else {
    _700 = _604;
    _701 = _608;
    _702 = _612;
  }
  float _703 = _700 * _592;
  float _704 = _701 * _593;
  float _705 = _704 + _703;
  float _706 = _702 * _594;
  float _707 = _705 + _706;
  float _708 = 1.0f / _707;
  float _709 = _708 * _644;
  float _710 = saturate(_709);
  float _711 = _710 * _700;
  float _712 = saturate(_711);
  float _713 = _710 * _701;
  float _714 = saturate(_713);
  float _715 = _710 * _702;
  float _716 = saturate(_715);
  float _717 = _712 * _579;
  float _718 = _579 - _717;
  float _719 = _714 * _580;
  float _720 = _580 - _719;
  float _721 = _716 * _581;
  float _722 = _581 - _721;
  float _723 = _716 * _594;
  float _724 = _712 * _592;
  float _725 = _714 * _593;
  float _726 = _644 - _724;
  float _727 = _726 - _725;
  float _728 = _727 - _723;
  float _729 = saturate(_728);
  float _730 = _720 * _593;
  float _731 = _718 * _592;
  float _732 = _722 * _594;
  float _733 = _730 + _731;
  float _734 = _733 + _732;
  float _735 = 1.0f / _734;
  float _736 = _735 * _729;
  float _737 = _736 * _718;
  float _738 = _737 + _712;
  float _739 = saturate(_738);
  float _740 = _736 * _720;
  float _741 = _740 + _714;
  float _742 = saturate(_741);
  float _743 = _736 * _722;
  float _744 = _743 + _716;
  float _745 = saturate(_744);
  float _746 = _745 * _594;
  float _747 = _739 * _592;
  float _748 = _742 * _593;
  float _749 = _644 - _747;
  float _750 = _749 - _748;
  float _751 = _750 - _746;
  float _752 = saturate(_751);
  float _753 = _752 * _589;
  float _754 = _753 + _739;
  float _755 = saturate(_754);
  float _756 = _752 * _590;
  float _757 = _756 + _742;
  float _758 = saturate(_757);
  float _759 = _752 * _591;
  float _760 = _759 + _745;
  float _761 = saturate(_760);
  if (!_506) {
    float _763 = _755 * _565;
    float _764 = _758 * _566;
    float _765 = _761 * _567;
    float _766 = _764 + _763;
    float _767 = _766 + _765;
    float _768 = _758 * _563;
    float _769 = _755 * _562;
    float _770 = _761 * _564;
    float _771 = _768 + _769;
    float _772 = _771 + _770;
    float _773 = _761 * _561;
    float _774 = _758 * _560;
    float _775 = _755 * _559;
    float _776 = _774 + _775;
    float _777 = _776 + _773;
    if (!_504) {
      float _779 = saturate(_767);
      float _780 = saturate(_772);
      float _781 = saturate(_777);
      _783 = _781;
      _784 = _780;
      _785 = _779;
    } else {
      _783 = _777;
      _784 = _772;
      _785 = _767;
    }
  } else {
    _783 = _761;
    _784 = _758;
    _785 = _755;
  }
  if (!_501) {
    float _787 = _785 * _565;
    float _788 = _784 * _565;
    float _789 = _783 * _565;
    _791 = _789;
    _792 = _788;
    _793 = _787;
  } else {
    _791 = _783;
    _792 = _784;
    _793 = _785;
  }
  if (_418) {
    float _797 = cb1_018z * 9.999999747378752e-05f;
    float _798 = _797 * _793;
    float _799 = _797 * _792;
    float _800 = _797 * _791;
    float _802 = 5000.0f / cb1_018y;
    float _803 = _798 * _802;
    float _804 = _799 * _802;
    float _805 = _800 * _802;
    _807 = _803;
    _808 = _804;
    _809 = _805;
  } else {
    _807 = _793;
    _808 = _792;
    _809 = _791;
  }
  float _810 = _807 * 1.6047500371932983f;
  float _811 = mad(-0.5310800075531006f, _808, _810);
  float _812 = mad(-0.07366999983787537f, _809, _811);
  float _813 = _807 * -0.10208000242710114f;
  float _814 = mad(1.1081299781799316f, _808, _813);
  float _815 = mad(-0.006049999967217445f, _809, _814);
  float _816 = _807 * -0.0032599999103695154f;
  float _817 = mad(-0.07275000214576721f, _808, _816);
  float _818 = mad(1.0760200023651123f, _809, _817);
  if (_418) {
    // float _820 = max(_812, 0.0f);
    // float _821 = max(_815, 0.0f);
    // float _822 = max(_818, 0.0f);
    // bool _823 = !(_820 >= 0.0030399328097701073f);
    // if (!_823) {
    //   float _825 = abs(_820);
    //   float _826 = log2(_825);
    //   float _827 = _826 * 0.4166666567325592f;
    //   float _828 = exp2(_827);
    //   float _829 = _828 * 1.0549999475479126f;
    //   float _830 = _829 + -0.054999999701976776f;
    //   _834 = _830;
    // } else {
    //   float _832 = _820 * 12.923210144042969f;
    //   _834 = _832;
    // }
    // bool _835 = !(_821 >= 0.0030399328097701073f);
    // if (!_835) {
    //   float _837 = abs(_821);
    //   float _838 = log2(_837);
    //   float _839 = _838 * 0.4166666567325592f;
    //   float _840 = exp2(_839);
    //   float _841 = _840 * 1.0549999475479126f;
    //   float _842 = _841 + -0.054999999701976776f;
    //   _846 = _842;
    // } else {
    //   float _844 = _821 * 12.923210144042969f;
    //   _846 = _844;
    // }
    // bool _847 = !(_822 >= 0.0030399328097701073f);
    // if (!_847) {
    //   float _849 = abs(_822);
    //   float _850 = log2(_849);
    //   float _851 = _850 * 0.4166666567325592f;
    //   float _852 = exp2(_851);
    //   float _853 = _852 * 1.0549999475479126f;
    //   float _854 = _853 + -0.054999999701976776f;
    //   _927 = _834;
    //   _928 = _846;
    //   _929 = _854;
    // } else {
    //   float _856 = _822 * 12.923210144042969f;
    //   _927 = _834;
    //   _928 = _846;
    //   _929 = _856;
    // }
    _927 = renodx::color::srgb::EncodeSafe(_812);
    _928 = renodx::color::srgb::EncodeSafe(_815);
    _929 = renodx::color::srgb::EncodeSafe(_818);

  } else {
    float _858 = saturate(_812);
    float _859 = saturate(_815);
    float _860 = saturate(_818);
    bool _861 = ((uint)(cb1_018w) == -2);
    if (!_861) {
      bool _863 = !(_858 >= 0.0030399328097701073f);
      if (!_863) {
        float _865 = abs(_858);
        float _866 = log2(_865);
        float _867 = _866 * 0.4166666567325592f;
        float _868 = exp2(_867);
        float _869 = _868 * 1.0549999475479126f;
        float _870 = _869 + -0.054999999701976776f;
        _874 = _870;
      } else {
        float _872 = _858 * 12.923210144042969f;
        _874 = _872;
      }
      bool _875 = !(_859 >= 0.0030399328097701073f);
      if (!_875) {
        float _877 = abs(_859);
        float _878 = log2(_877);
        float _879 = _878 * 0.4166666567325592f;
        float _880 = exp2(_879);
        float _881 = _880 * 1.0549999475479126f;
        float _882 = _881 + -0.054999999701976776f;
        _886 = _882;
      } else {
        float _884 = _859 * 12.923210144042969f;
        _886 = _884;
      }
      bool _887 = !(_860 >= 0.0030399328097701073f);
      if (!_887) {
        float _889 = abs(_860);
        float _890 = log2(_889);
        float _891 = _890 * 0.4166666567325592f;
        float _892 = exp2(_891);
        float _893 = _892 * 1.0549999475479126f;
        float _894 = _893 + -0.054999999701976776f;
        _898 = _874;
        _899 = _886;
        _900 = _894;
      } else {
        float _896 = _860 * 12.923210144042969f;
        _898 = _874;
        _899 = _886;
        _900 = _896;
      }
    } else {
      _898 = _858;
      _899 = _859;
      _900 = _860;
    }
    float _905 = abs(_898);
    float _906 = abs(_899);
    float _907 = abs(_900);
    float _908 = log2(_905);
    float _909 = log2(_906);
    float _910 = log2(_907);
    float _911 = _908 * cb2_000z;
    float _912 = _909 * cb2_000z;
    float _913 = _910 * cb2_000z;
    float _914 = exp2(_911);
    float _915 = exp2(_912);
    float _916 = exp2(_913);
    float _917 = _914 * cb2_000y;
    float _918 = _915 * cb2_000y;
    float _919 = _916 * cb2_000y;
    float _920 = _917 + cb2_000x;
    float _921 = _918 + cb2_000x;
    float _922 = _919 + cb2_000x;
    float _923 = saturate(_920);
    float _924 = saturate(_921);
    float _925 = saturate(_922);
    _927 = _923;
    _928 = _924;
    _929 = _925;
  }
  float _933 = cb2_023x * TEXCOORD0_centroid.x;
  float _934 = cb2_023y * TEXCOORD0_centroid.y;
  float _937 = _933 + cb2_023z;
  float _938 = _934 + cb2_023w;
  float4 _941 = t9.SampleLevel(s0_space2, float2(_937, _938), 0.0f);
  float _943 = _941.x + -0.5f;
  float _944 = _943 * cb2_022x;
  float _945 = _944 + 0.5f;
  float _946 = _945 * 2.0f;
  float _947 = _946 * _927;
  float _948 = _946 * _928;
  float _949 = _946 * _929;
  float _953 = float((uint)(cb2_019z));
  float _954 = float((uint)(cb2_019w));
  float _955 = _953 + SV_Position.x;
  float _956 = _954 + SV_Position.y;
  uint _957 = uint(_955);
  uint _958 = uint(_956);
  uint _961 = cb2_019x + -1u;
  uint _962 = cb2_019y + -1u;
  int _963 = _957 & _961;
  int _964 = _958 & _962;
  float4 _965 = t3.Load(int3(_963, _964, 0));
  float _969 = _965.x * 2.0f;
  float _970 = _965.y * 2.0f;
  float _971 = _965.z * 2.0f;
  float _972 = _969 + -1.0f;
  float _973 = _970 + -1.0f;
  float _974 = _971 + -1.0f;
  float _975 = _972 * cb2_025w;
  float _976 = _973 * cb2_025w;
  float _977 = _974 * cb2_025w;
  float _978 = _975 + _947;
  float _979 = _976 + _948;
  float _980 = _977 + _949;
  float _981 = dot(float3(_978, _979, _980), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _978;
  SV_Target.y = _979;
  SV_Target.z = _980;
  SV_Target.w = _981;
  SV_Target_1.x = _981;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
