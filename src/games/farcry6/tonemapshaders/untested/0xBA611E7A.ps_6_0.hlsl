#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _26 = cb2_015x * TEXCOORD0_centroid.x;
  float _27 = cb2_015y * TEXCOORD0_centroid.y;
  float _30 = _26 + cb2_015z;
  float _31 = _27 + cb2_015w;
  float4 _32 = t7.SampleLevel(s0_space2, float2(_30, _31), 0.0f);
  float _36 = saturate(_32.x);
  float _37 = saturate(_32.z);
  float _40 = cb2_026x * _37;
  float _41 = _36 * 6.283199787139893f;
  float _42 = cos(_41);
  float _43 = sin(_41);
  float _44 = _40 * _42;
  float _45 = _43 * _40;
  float _46 = 1.0f - _32.y;
  float _47 = saturate(_46);
  float _48 = _44 * _47;
  float _49 = _45 * _47;
  float _50 = _48 + TEXCOORD0_centroid.x;
  float _51 = _49 + TEXCOORD0_centroid.y;
  float4 _52 = t1.SampleLevel(s4_space2, float2(_50, _51), 0.0f);
  float _56 = max(_52.x, 0.0f);
  float _57 = max(_52.y, 0.0f);
  float _58 = max(_52.z, 0.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float _61 = min(_58, 65000.0f);
  float4 _62 = t3.SampleLevel(s2_space2, float2(_50, _51), 0.0f);
  float _67 = max(_62.x, 0.0f);
  float _68 = max(_62.y, 0.0f);
  float _69 = max(_62.z, 0.0f);
  float _70 = max(_62.w, 0.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _74 = min(_70, 5000.0f);
  float _77 = _21.x * cb0_028z;
  float _78 = _77 + cb0_028x;
  float _79 = cb2_027w / _78;
  float _80 = 1.0f - _79;
  float _81 = abs(_80);
  float _83 = cb2_027y * _81;
  float _85 = _83 - cb2_027z;
  float _86 = saturate(_85);
  float _87 = max(_86, _74);
  float _88 = saturate(_87);
  float _92 = cb2_013x * _50;
  float _93 = cb2_013y * _51;
  float _96 = _92 + cb2_013z;
  float _97 = _93 + cb2_013w;
  float _100 = dot(float2(_96, _97), float2(_96, _97));
  float _101 = abs(_100);
  float _102 = log2(_101);
  float _103 = _102 * cb2_014x;
  float _104 = exp2(_103);
  float _105 = saturate(_104);
  float _109 = cb2_011x * _50;
  float _110 = cb2_011y * _51;
  float _113 = _109 + cb2_011z;
  float _114 = _110 + cb2_011w;
  float _115 = _113 * _105;
  float _116 = _114 * _105;
  float _117 = _115 + _50;
  float _118 = _116 + _51;
  float _122 = cb2_012x * _50;
  float _123 = cb2_012y * _51;
  float _126 = _122 + cb2_012z;
  float _127 = _123 + cb2_012w;
  float _128 = _126 * _105;
  float _129 = _127 * _105;
  float _130 = _128 + _50;
  float _131 = _129 + _51;
  float4 _132 = t1.SampleLevel(s2_space2, float2(_117, _118), 0.0f);
  float _136 = max(_132.x, 0.0f);
  float _137 = max(_132.y, 0.0f);
  float _138 = max(_132.z, 0.0f);
  float _139 = min(_136, 65000.0f);
  float _140 = min(_137, 65000.0f);
  float _141 = min(_138, 65000.0f);
  float4 _142 = t1.SampleLevel(s2_space2, float2(_130, _131), 0.0f);
  float _146 = max(_142.x, 0.0f);
  float _147 = max(_142.y, 0.0f);
  float _148 = max(_142.z, 0.0f);
  float _149 = min(_146, 65000.0f);
  float _150 = min(_147, 65000.0f);
  float _151 = min(_148, 65000.0f);
  float4 _152 = t3.SampleLevel(s2_space2, float2(_117, _118), 0.0f);
  float _156 = max(_152.x, 0.0f);
  float _157 = max(_152.y, 0.0f);
  float _158 = max(_152.z, 0.0f);
  float _159 = min(_156, 5000.0f);
  float _160 = min(_157, 5000.0f);
  float _161 = min(_158, 5000.0f);
  float4 _162 = t3.SampleLevel(s2_space2, float2(_130, _131), 0.0f);
  float _166 = max(_162.x, 0.0f);
  float _167 = max(_162.y, 0.0f);
  float _168 = max(_162.z, 0.0f);
  float _169 = min(_166, 5000.0f);
  float _170 = min(_167, 5000.0f);
  float _171 = min(_168, 5000.0f);
  float _176 = 1.0f - cb2_009x;
  float _177 = 1.0f - cb2_009y;
  float _178 = 1.0f - cb2_009z;
  float _183 = _176 - cb2_010x;
  float _184 = _177 - cb2_010y;
  float _185 = _178 - cb2_010z;
  float _186 = saturate(_183);
  float _187 = saturate(_184);
  float _188 = saturate(_185);
  float _189 = _186 * _59;
  float _190 = _187 * _60;
  float _191 = _188 * _61;
  float _192 = cb2_009x * _139;
  float _193 = cb2_009y * _140;
  float _194 = cb2_009z * _141;
  float _195 = _192 + _189;
  float _196 = _193 + _190;
  float _197 = _194 + _191;
  float _198 = cb2_010x * _149;
  float _199 = cb2_010y * _150;
  float _200 = cb2_010z * _151;
  float _201 = _195 + _198;
  float _202 = _196 + _199;
  float _203 = _197 + _200;
  float _204 = _186 * _71;
  float _205 = _187 * _72;
  float _206 = _188 * _73;
  float _207 = cb2_009x * _159;
  float _208 = cb2_009y * _160;
  float _209 = cb2_009z * _161;
  float _210 = cb2_010x * _169;
  float _211 = cb2_010y * _170;
  float _212 = cb2_010z * _171;
  float4 _213 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _217 = _204 - _201;
  float _218 = _217 + _207;
  float _219 = _218 + _210;
  float _220 = _205 - _202;
  float _221 = _220 + _208;
  float _222 = _221 + _211;
  float _223 = _206 - _203;
  float _224 = _223 + _209;
  float _225 = _224 + _212;
  float _226 = _219 * _88;
  float _227 = _222 * _88;
  float _228 = _225 * _88;
  float _229 = _226 + _201;
  float _230 = _227 + _202;
  float _231 = _228 + _203;
  float _232 = dot(float3(_229, _230, _231), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _236 = t0[0].SExposureData_020;
  float _238 = t0[0].SExposureData_004;
  float _240 = cb2_018x * 0.5f;
  float _241 = _240 * cb2_018y;
  float _242 = _238.x - _241;
  float _243 = cb2_018y * cb2_018x;
  float _244 = 1.0f / _243;
  float _245 = _242 * _244;
  float _246 = _232 / _236.x;
  float _247 = _246 * 5464.01611328125f;
  float _248 = _247 + 9.99999993922529e-09f;
  float _249 = log2(_248);
  float _250 = _249 - _242;
  float _251 = _250 * _244;
  float _252 = saturate(_251);
  float2 _253 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _252), 0.0f);
  float _256 = max(_253.y, 1.0000000116860974e-07f);
  float _257 = _253.x / _256;
  float _258 = _257 + _245;
  float _259 = _258 / _244;
  float _260 = _259 - _238.x;
  float _261 = -0.0f - _260;
  float _263 = _261 - cb2_027x;
  float _264 = max(0.0f, _263);
  float _266 = cb2_026z * _264;
  float _267 = _260 - cb2_027x;
  float _268 = max(0.0f, _267);
  float _270 = cb2_026w * _268;
  bool _271 = (_260 < 0.0f);
  float _272 = select(_271, _266, _270);
  float _273 = exp2(_272);
  float _274 = _273 * _229;
  float _275 = _273 * _230;
  float _276 = _273 * _231;
  float _281 = cb2_024y * _213.x;
  float _282 = cb2_024z * _213.y;
  float _283 = cb2_024w * _213.z;
  float _284 = _281 + _274;
  float _285 = _282 + _275;
  float _286 = _283 + _276;
  float _291 = _284 * cb2_025x;
  float _292 = _285 * cb2_025y;
  float _293 = _286 * cb2_025z;
  float _294 = dot(float3(_291, _292, _293), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _295 = t0[0].SExposureData_012;
  float _297 = _294 * 5464.01611328125f;
  float _298 = _297 * _295.x;
  float _299 = _298 + 9.99999993922529e-09f;
  float _300 = log2(_299);
  float _301 = _300 + 16.929765701293945f;
  float _302 = _301 * 0.05734497308731079f;
  float _303 = saturate(_302);
  float _304 = _303 * _303;
  float _305 = _303 * 2.0f;
  float _306 = 3.0f - _305;
  float _307 = _304 * _306;
  float _308 = _292 * 0.8450999855995178f;
  float _309 = _293 * 0.14589999616146088f;
  float _310 = _308 + _309;
  float _311 = _310 * 2.4890189170837402f;
  float _312 = _310 * 0.3754962384700775f;
  float _313 = _310 * 2.811495304107666f;
  float _314 = _310 * 5.519708156585693f;
  float _315 = _294 - _311;
  float _316 = _307 * _315;
  float _317 = _316 + _311;
  float _318 = _307 * 0.5f;
  float _319 = _318 + 0.5f;
  float _320 = _319 * _315;
  float _321 = _320 + _311;
  float _322 = _291 - _312;
  float _323 = _292 - _313;
  float _324 = _293 - _314;
  float _325 = _319 * _322;
  float _326 = _319 * _323;
  float _327 = _319 * _324;
  float _328 = _325 + _312;
  float _329 = _326 + _313;
  float _330 = _327 + _314;
  float _331 = 1.0f / _321;
  float _332 = _317 * _331;
  float _333 = _332 * _328;
  float _334 = _332 * _329;
  float _335 = _332 * _330;
  float _339 = cb2_020x * TEXCOORD0_centroid.x;
  float _340 = cb2_020y * TEXCOORD0_centroid.y;
  float _343 = _339 + cb2_020z;
  float _344 = _340 + cb2_020w;
  float _347 = dot(float2(_343, _344), float2(_343, _344));
  float _348 = 1.0f - _347;
  float _349 = saturate(_348);
  float _350 = log2(_349);
  float _351 = _350 * cb2_021w;
  float _352 = exp2(_351);
  float _356 = _333 - cb2_021x;
  float _357 = _334 - cb2_021y;
  float _358 = _335 - cb2_021z;
  float _359 = _356 * _352;
  float _360 = _357 * _352;
  float _361 = _358 * _352;
  float _362 = _359 + cb2_021x;
  float _363 = _360 + cb2_021y;
  float _364 = _361 + cb2_021z;
  float _365 = t0[0].SExposureData_000;
  float _367 = max(_236.x, 0.0010000000474974513f);
  float _368 = 1.0f / _367;
  float _369 = _368 * _365.x;
  bool _372 = ((uint)(cb2_069y) == 0);
  float _378;
  float _379;
  float _380;
  float _434;
  float _435;
  float _436;
  float _481;
  float _482;
  float _483;
  float _528;
  float _529;
  float _530;
  float _531;
  float _578;
  float _579;
  float _580;
  float _605;
  float _606;
  float _607;
  float _757;
  float _794;
  float _795;
  float _796;
  float _825;
  float _826;
  float _827;
  float _908;
  float _909;
  float _910;
  float _916;
  float _917;
  float _918;
  float _932;
  float _933;
  float _934;
  float _959;
  float _971;
  float _999;
  float _1011;
  float _1023;
  float _1024;
  float _1025;
  float _1052;
  float _1053;
  float _1054;
  if (!_372) {
    float _374 = _369 * _362;
    float _375 = _369 * _363;
    float _376 = _369 * _364;
    _378 = _374;
    _379 = _375;
    _380 = _376;
  } else {
    _378 = _362;
    _379 = _363;
    _380 = _364;
  }
  float _381 = _378 * 0.6130970120429993f;
  float _382 = mad(0.33952298760414124f, _379, _381);
  float _383 = mad(0.04737899824976921f, _380, _382);
  float _384 = _378 * 0.07019399851560593f;
  float _385 = mad(0.9163540005683899f, _379, _384);
  float _386 = mad(0.013451999984681606f, _380, _385);
  float _387 = _378 * 0.02061600051820278f;
  float _388 = mad(0.10956999659538269f, _379, _387);
  float _389 = mad(0.8698149919509888f, _380, _388);
  float _390 = log2(_383);
  float _391 = log2(_386);
  float _392 = log2(_389);
  float _393 = _390 * 0.04211956635117531f;
  float _394 = _391 * 0.04211956635117531f;
  float _395 = _392 * 0.04211956635117531f;
  float _396 = _393 + 0.6252607107162476f;
  float _397 = _394 + 0.6252607107162476f;
  float _398 = _395 + 0.6252607107162476f;
  float4 _399 = t5.SampleLevel(s2_space2, float3(_396, _397, _398), 0.0f);
  bool _405 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_405 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _409 = cb2_017x * _399.x;
    float _410 = cb2_017x * _399.y;
    float _411 = cb2_017x * _399.z;
    float _413 = _409 + cb2_017y;
    float _414 = _410 + cb2_017y;
    float _415 = _411 + cb2_017y;
    float _416 = exp2(_413);
    float _417 = exp2(_414);
    float _418 = exp2(_415);
    float _419 = _416 + 1.0f;
    float _420 = _417 + 1.0f;
    float _421 = _418 + 1.0f;
    float _422 = 1.0f / _419;
    float _423 = 1.0f / _420;
    float _424 = 1.0f / _421;
    float _426 = cb2_017z * _422;
    float _427 = cb2_017z * _423;
    float _428 = cb2_017z * _424;
    float _430 = _426 + cb2_017w;
    float _431 = _427 + cb2_017w;
    float _432 = _428 + cb2_017w;
    _434 = _430;
    _435 = _431;
    _436 = _432;
  } else {
    _434 = _399.x;
    _435 = _399.y;
    _436 = _399.z;
  }
  float _437 = _434 * 23.0f;
  float _438 = _437 + -14.473931312561035f;
  float _439 = exp2(_438);
  float _440 = _435 * 23.0f;
  float _441 = _440 + -14.473931312561035f;
  float _442 = exp2(_441);
  float _443 = _436 * 23.0f;
  float _444 = _443 + -14.473931312561035f;
  float _445 = exp2(_444);
  float _449 = cb2_004x * TEXCOORD0_centroid.x;
  float _450 = cb2_004y * TEXCOORD0_centroid.y;
  float _453 = _449 + cb2_004z;
  float _454 = _450 + cb2_004w;
  float4 _460 = t6.Sample(s2_space2, float2(_453, _454));
  float _465 = _460.x * cb2_003x;
  float _466 = _460.y * cb2_003y;
  float _467 = _460.z * cb2_003z;
  float _468 = _460.w * cb2_003w;
  float _471 = _468 + cb2_026y;
  float _472 = saturate(_471);
  bool _475 = ((uint)(cb2_069y) == 0);
  if (!_475) {
    float _477 = _465 * _369;
    float _478 = _466 * _369;
    float _479 = _467 * _369;
    _481 = _477;
    _482 = _478;
    _483 = _479;
  } else {
    _481 = _465;
    _482 = _466;
    _483 = _467;
  }
  bool _486 = ((uint)(cb2_028x) == 2);
  bool _487 = ((uint)(cb2_028x) == 3);
  int _488 = (uint)(cb2_028x) & -2;
  bool _489 = (_488 == 2);
  bool _490 = ((uint)(cb2_028x) == 6);
  bool _491 = _489 || _490;
  if (_491) {
    float _493 = _481 * _472;
    float _494 = _482 * _472;
    float _495 = _483 * _472;
    float _496 = _472 * _472;
    _528 = _493;
    _529 = _494;
    _530 = _495;
    _531 = _496;
  } else {
    bool _498 = ((uint)(cb2_028x) == 4);
    if (_498) {
      float _500 = _481 + -1.0f;
      float _501 = _482 + -1.0f;
      float _502 = _483 + -1.0f;
      float _503 = _472 + -1.0f;
      float _504 = _500 * _472;
      float _505 = _501 * _472;
      float _506 = _502 * _472;
      float _507 = _503 * _472;
      float _508 = _504 + 1.0f;
      float _509 = _505 + 1.0f;
      float _510 = _506 + 1.0f;
      float _511 = _507 + 1.0f;
      _528 = _508;
      _529 = _509;
      _530 = _510;
      _531 = _511;
    } else {
      bool _513 = ((uint)(cb2_028x) == 5);
      if (_513) {
        float _515 = _481 + -0.5f;
        float _516 = _482 + -0.5f;
        float _517 = _483 + -0.5f;
        float _518 = _472 + -0.5f;
        float _519 = _515 * _472;
        float _520 = _516 * _472;
        float _521 = _517 * _472;
        float _522 = _518 * _472;
        float _523 = _519 + 0.5f;
        float _524 = _520 + 0.5f;
        float _525 = _521 + 0.5f;
        float _526 = _522 + 0.5f;
        _528 = _523;
        _529 = _524;
        _530 = _525;
        _531 = _526;
      } else {
        _528 = _481;
        _529 = _482;
        _530 = _483;
        _531 = _472;
      }
    }
  }
  if (_486) {
    float _533 = _528 + _439;
    float _534 = _529 + _442;
    float _535 = _530 + _445;
    _578 = _533;
    _579 = _534;
    _580 = _535;
  } else {
    if (_487) {
      float _538 = 1.0f - _528;
      float _539 = 1.0f - _529;
      float _540 = 1.0f - _530;
      float _541 = _538 * _439;
      float _542 = _539 * _442;
      float _543 = _540 * _445;
      float _544 = _541 + _528;
      float _545 = _542 + _529;
      float _546 = _543 + _530;
      _578 = _544;
      _579 = _545;
      _580 = _546;
    } else {
      bool _548 = ((uint)(cb2_028x) == 4);
      if (_548) {
        float _550 = _528 * _439;
        float _551 = _529 * _442;
        float _552 = _530 * _445;
        _578 = _550;
        _579 = _551;
        _580 = _552;
      } else {
        bool _554 = ((uint)(cb2_028x) == 5);
        if (_554) {
          float _556 = _439 * 2.0f;
          float _557 = _556 * _528;
          float _558 = _442 * 2.0f;
          float _559 = _558 * _529;
          float _560 = _445 * 2.0f;
          float _561 = _560 * _530;
          _578 = _557;
          _579 = _559;
          _580 = _561;
        } else {
          if (_490) {
            float _564 = _439 - _528;
            float _565 = _442 - _529;
            float _566 = _445 - _530;
            _578 = _564;
            _579 = _565;
            _580 = _566;
          } else {
            float _568 = _528 - _439;
            float _569 = _529 - _442;
            float _570 = _530 - _445;
            float _571 = _531 * _568;
            float _572 = _531 * _569;
            float _573 = _531 * _570;
            float _574 = _571 + _439;
            float _575 = _572 + _442;
            float _576 = _573 + _445;
            _578 = _574;
            _579 = _575;
            _580 = _576;
          }
        }
      }
    }
  }
  float _586 = cb2_016x - _578;
  float _587 = cb2_016y - _579;
  float _588 = cb2_016z - _580;
  float _589 = _586 * cb2_016w;
  float _590 = _587 * cb2_016w;
  float _591 = _588 * cb2_016w;
  float _592 = _589 + _578;
  float _593 = _590 + _579;
  float _594 = _591 + _580;
  bool _597 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_597 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _601 = cb2_024x * _592;
    float _602 = cb2_024x * _593;
    float _603 = cb2_024x * _594;
    _605 = _601;
    _606 = _602;
    _607 = _603;
  } else {
    _605 = _592;
    _606 = _593;
    _607 = _594;
  }
  float _610 = _605 * 0.9708889722824097f;
  float _611 = mad(0.026962999254465103f, _606, _610);
  float _612 = mad(0.002148000057786703f, _607, _611);
  float _613 = _605 * 0.01088900025933981f;
  float _614 = mad(0.9869629740715027f, _606, _613);
  float _615 = mad(0.002148000057786703f, _607, _614);
  float _616 = mad(0.026962999254465103f, _606, _613);
  float _617 = mad(0.9621480107307434f, _607, _616);
  float _618 = max(_612, 0.0f);
  float _619 = max(_615, 0.0f);
  float _620 = max(_617, 0.0f);
  float _621 = min(_618, cb2_095y);
  float _622 = min(_619, cb2_095y);
  float _623 = min(_620, cb2_095y);
  bool _626 = ((uint)(cb2_095x) == 0);
  bool _629 = ((uint)(cb2_094w) == 0);
  bool _631 = ((uint)(cb2_094z) == 0);
  bool _633 = ((uint)(cb2_094y) != 0);
  bool _635 = ((uint)(cb2_094x) == 0);
  bool _637 = ((uint)(cb2_069z) != 0);
  float _684 = asfloat((uint)(cb2_075y));
  float _685 = asfloat((uint)(cb2_075z));
  float _686 = asfloat((uint)(cb2_075w));
  float _687 = asfloat((uint)(cb2_074z));
  float _688 = asfloat((uint)(cb2_074w));
  float _689 = asfloat((uint)(cb2_075x));
  float _690 = asfloat((uint)(cb2_073w));
  float _691 = asfloat((uint)(cb2_074x));
  float _692 = asfloat((uint)(cb2_074y));
  float _693 = asfloat((uint)(cb2_077x));
  float _694 = asfloat((uint)(cb2_077y));
  float _695 = asfloat((uint)(cb2_079x));
  float _696 = asfloat((uint)(cb2_079y));
  float _697 = asfloat((uint)(cb2_079z));
  float _698 = asfloat((uint)(cb2_078y));
  float _699 = asfloat((uint)(cb2_078z));
  float _700 = asfloat((uint)(cb2_078w));
  float _701 = asfloat((uint)(cb2_077z));
  float _702 = asfloat((uint)(cb2_077w));
  float _703 = asfloat((uint)(cb2_078x));
  float _704 = asfloat((uint)(cb2_072y));
  float _705 = asfloat((uint)(cb2_072z));
  float _706 = asfloat((uint)(cb2_072w));
  float _707 = asfloat((uint)(cb2_071x));
  float _708 = asfloat((uint)(cb2_071y));
  float _709 = asfloat((uint)(cb2_076x));
  float _710 = asfloat((uint)(cb2_070w));
  float _711 = asfloat((uint)(cb2_070x));
  float _712 = asfloat((uint)(cb2_070y));
  float _713 = asfloat((uint)(cb2_070z));
  float _714 = asfloat((uint)(cb2_073x));
  float _715 = asfloat((uint)(cb2_073y));
  float _716 = asfloat((uint)(cb2_073z));
  float _717 = asfloat((uint)(cb2_071z));
  float _718 = asfloat((uint)(cb2_071w));
  float _719 = asfloat((uint)(cb2_072x));
  float _720 = max(_622, _623);
  float _721 = max(_621, _720);
  float _722 = 1.0f / _721;
  float _723 = _722 * _621;
  float _724 = _722 * _622;
  float _725 = _722 * _623;
  float _726 = abs(_723);
  float _727 = log2(_726);
  float _728 = _727 * _711;
  float _729 = exp2(_728);
  float _730 = abs(_724);
  float _731 = log2(_730);
  float _732 = _731 * _712;
  float _733 = exp2(_732);
  float _734 = abs(_725);
  float _735 = log2(_734);
  float _736 = _735 * _713;
  float _737 = exp2(_736);
  if (_633) {
    float _740 = asfloat((uint)(cb2_076w));
    float _742 = asfloat((uint)(cb2_076z));
    float _744 = asfloat((uint)(cb2_076y));
    float _745 = _742 * _622;
    float _746 = _744 * _621;
    float _747 = _740 * _623;
    float _748 = _746 + _747;
    float _749 = _748 + _745;
    _757 = _749;
  } else {
    float _751 = _718 * _622;
    float _752 = _717 * _621;
    float _753 = _719 * _623;
    float _754 = _751 + _752;
    float _755 = _754 + _753;
    _757 = _755;
  }
  float _758 = abs(_757);
  float _759 = log2(_758);
  float _760 = _759 * _710;
  float _761 = exp2(_760);
  float _762 = log2(_761);
  float _763 = _762 * _709;
  float _764 = exp2(_763);
  float _765 = select(_637, _764, _761);
  float _766 = _765 * _707;
  float _767 = _766 + _708;
  float _768 = 1.0f / _767;
  float _769 = _768 * _761;
  if (_633) {
    if (!_635) {
      float _772 = _729 * _701;
      float _773 = _733 * _702;
      float _774 = _737 * _703;
      float _775 = _773 + _772;
      float _776 = _775 + _774;
      float _777 = _733 * _699;
      float _778 = _729 * _698;
      float _779 = _737 * _700;
      float _780 = _777 + _778;
      float _781 = _780 + _779;
      float _782 = _737 * _697;
      float _783 = _733 * _696;
      float _784 = _729 * _695;
      float _785 = _783 + _784;
      float _786 = _785 + _782;
      float _787 = max(_781, _786);
      float _788 = max(_776, _787);
      float _789 = 1.0f / _788;
      float _790 = _789 * _776;
      float _791 = _789 * _781;
      float _792 = _789 * _786;
      _794 = _790;
      _795 = _791;
      _796 = _792;
    } else {
      _794 = _729;
      _795 = _733;
      _796 = _737;
    }
    float _797 = _794 * _694;
    float _798 = exp2(_797);
    float _799 = _798 * _693;
    float _800 = saturate(_799);
    float _801 = _794 * _693;
    float _802 = _794 - _801;
    float _803 = saturate(_802);
    float _804 = max(_693, _803);
    float _805 = min(_804, _800);
    float _806 = _795 * _694;
    float _807 = exp2(_806);
    float _808 = _807 * _693;
    float _809 = saturate(_808);
    float _810 = _795 * _693;
    float _811 = _795 - _810;
    float _812 = saturate(_811);
    float _813 = max(_693, _812);
    float _814 = min(_813, _809);
    float _815 = _796 * _694;
    float _816 = exp2(_815);
    float _817 = _816 * _693;
    float _818 = saturate(_817);
    float _819 = _796 * _693;
    float _820 = _796 - _819;
    float _821 = saturate(_820);
    float _822 = max(_693, _821);
    float _823 = min(_822, _818);
    _825 = _805;
    _826 = _814;
    _827 = _823;
  } else {
    _825 = _729;
    _826 = _733;
    _827 = _737;
  }
  float _828 = _825 * _717;
  float _829 = _826 * _718;
  float _830 = _829 + _828;
  float _831 = _827 * _719;
  float _832 = _830 + _831;
  float _833 = 1.0f / _832;
  float _834 = _833 * _769;
  float _835 = saturate(_834);
  float _836 = _835 * _825;
  float _837 = saturate(_836);
  float _838 = _835 * _826;
  float _839 = saturate(_838);
  float _840 = _835 * _827;
  float _841 = saturate(_840);
  float _842 = _837 * _704;
  float _843 = _704 - _842;
  float _844 = _839 * _705;
  float _845 = _705 - _844;
  float _846 = _841 * _706;
  float _847 = _706 - _846;
  float _848 = _841 * _719;
  float _849 = _837 * _717;
  float _850 = _839 * _718;
  float _851 = _769 - _849;
  float _852 = _851 - _850;
  float _853 = _852 - _848;
  float _854 = saturate(_853);
  float _855 = _845 * _718;
  float _856 = _843 * _717;
  float _857 = _847 * _719;
  float _858 = _855 + _856;
  float _859 = _858 + _857;
  float _860 = 1.0f / _859;
  float _861 = _860 * _854;
  float _862 = _861 * _843;
  float _863 = _862 + _837;
  float _864 = saturate(_863);
  float _865 = _861 * _845;
  float _866 = _865 + _839;
  float _867 = saturate(_866);
  float _868 = _861 * _847;
  float _869 = _868 + _841;
  float _870 = saturate(_869);
  float _871 = _870 * _719;
  float _872 = _864 * _717;
  float _873 = _867 * _718;
  float _874 = _769 - _872;
  float _875 = _874 - _873;
  float _876 = _875 - _871;
  float _877 = saturate(_876);
  float _878 = _877 * _714;
  float _879 = _878 + _864;
  float _880 = saturate(_879);
  float _881 = _877 * _715;
  float _882 = _881 + _867;
  float _883 = saturate(_882);
  float _884 = _877 * _716;
  float _885 = _884 + _870;
  float _886 = saturate(_885);
  if (!_631) {
    float _888 = _880 * _690;
    float _889 = _883 * _691;
    float _890 = _886 * _692;
    float _891 = _889 + _888;
    float _892 = _891 + _890;
    float _893 = _883 * _688;
    float _894 = _880 * _687;
    float _895 = _886 * _689;
    float _896 = _893 + _894;
    float _897 = _896 + _895;
    float _898 = _886 * _686;
    float _899 = _883 * _685;
    float _900 = _880 * _684;
    float _901 = _899 + _900;
    float _902 = _901 + _898;
    if (!_629) {
      float _904 = saturate(_892);
      float _905 = saturate(_897);
      float _906 = saturate(_902);
      _908 = _906;
      _909 = _905;
      _910 = _904;
    } else {
      _908 = _902;
      _909 = _897;
      _910 = _892;
    }
  } else {
    _908 = _886;
    _909 = _883;
    _910 = _880;
  }
  if (!_626) {
    float _912 = _910 * _690;
    float _913 = _909 * _690;
    float _914 = _908 * _690;
    _916 = _914;
    _917 = _913;
    _918 = _912;
  } else {
    _916 = _908;
    _917 = _909;
    _918 = _910;
  }
  if (_597) {
    float _922 = cb1_018z * 9.999999747378752e-05f;
    float _923 = _922 * _918;
    float _924 = _922 * _917;
    float _925 = _922 * _916;
    float _927 = 5000.0f / cb1_018y;
    float _928 = _923 * _927;
    float _929 = _924 * _927;
    float _930 = _925 * _927;
    _932 = _928;
    _933 = _929;
    _934 = _930;
  } else {
    _932 = _918;
    _933 = _917;
    _934 = _916;
  }
  float _935 = _932 * 1.6047500371932983f;
  float _936 = mad(-0.5310800075531006f, _933, _935);
  float _937 = mad(-0.07366999983787537f, _934, _936);
  float _938 = _932 * -0.10208000242710114f;
  float _939 = mad(1.1081299781799316f, _933, _938);
  float _940 = mad(-0.006049999967217445f, _934, _939);
  float _941 = _932 * -0.0032599999103695154f;
  float _942 = mad(-0.07275000214576721f, _933, _941);
  float _943 = mad(1.0760200023651123f, _934, _942);
  if (_597) {
    // float _945 = max(_937, 0.0f);
    // float _946 = max(_940, 0.0f);
    // float _947 = max(_943, 0.0f);
    // bool _948 = !(_945 >= 0.0030399328097701073f);
    // if (!_948) {
    //   float _950 = abs(_945);
    //   float _951 = log2(_950);
    //   float _952 = _951 * 0.4166666567325592f;
    //   float _953 = exp2(_952);
    //   float _954 = _953 * 1.0549999475479126f;
    //   float _955 = _954 + -0.054999999701976776f;
    //   _959 = _955;
    // } else {
    //   float _957 = _945 * 12.923210144042969f;
    //   _959 = _957;
    // }
    // bool _960 = !(_946 >= 0.0030399328097701073f);
    // if (!_960) {
    //   float _962 = abs(_946);
    //   float _963 = log2(_962);
    //   float _964 = _963 * 0.4166666567325592f;
    //   float _965 = exp2(_964);
    //   float _966 = _965 * 1.0549999475479126f;
    //   float _967 = _966 + -0.054999999701976776f;
    //   _971 = _967;
    // } else {
    //   float _969 = _946 * 12.923210144042969f;
    //   _971 = _969;
    // }
    // bool _972 = !(_947 >= 0.0030399328097701073f);
    // if (!_972) {
    //   float _974 = abs(_947);
    //   float _975 = log2(_974);
    //   float _976 = _975 * 0.4166666567325592f;
    //   float _977 = exp2(_976);
    //   float _978 = _977 * 1.0549999475479126f;
    //   float _979 = _978 + -0.054999999701976776f;
    //   _1052 = _959;
    //   _1053 = _971;
    //   _1054 = _979;
    // } else {
    //   float _981 = _947 * 12.923210144042969f;
    //   _1052 = _959;
    //   _1053 = _971;
    //   _1054 = _981;
    // }
    _1052 = renodx::color::srgb::EncodeSafe(_937);
    _1053 = renodx::color::srgb::EncodeSafe(_940);
    _1054 = renodx::color::srgb::EncodeSafe(_943);

  } else {
    float _983 = saturate(_937);
    float _984 = saturate(_940);
    float _985 = saturate(_943);
    bool _986 = ((uint)(cb1_018w) == -2);
    if (!_986) {
      bool _988 = !(_983 >= 0.0030399328097701073f);
      if (!_988) {
        float _990 = abs(_983);
        float _991 = log2(_990);
        float _992 = _991 * 0.4166666567325592f;
        float _993 = exp2(_992);
        float _994 = _993 * 1.0549999475479126f;
        float _995 = _994 + -0.054999999701976776f;
        _999 = _995;
      } else {
        float _997 = _983 * 12.923210144042969f;
        _999 = _997;
      }
      bool _1000 = !(_984 >= 0.0030399328097701073f);
      if (!_1000) {
        float _1002 = abs(_984);
        float _1003 = log2(_1002);
        float _1004 = _1003 * 0.4166666567325592f;
        float _1005 = exp2(_1004);
        float _1006 = _1005 * 1.0549999475479126f;
        float _1007 = _1006 + -0.054999999701976776f;
        _1011 = _1007;
      } else {
        float _1009 = _984 * 12.923210144042969f;
        _1011 = _1009;
      }
      bool _1012 = !(_985 >= 0.0030399328097701073f);
      if (!_1012) {
        float _1014 = abs(_985);
        float _1015 = log2(_1014);
        float _1016 = _1015 * 0.4166666567325592f;
        float _1017 = exp2(_1016);
        float _1018 = _1017 * 1.0549999475479126f;
        float _1019 = _1018 + -0.054999999701976776f;
        _1023 = _999;
        _1024 = _1011;
        _1025 = _1019;
      } else {
        float _1021 = _985 * 12.923210144042969f;
        _1023 = _999;
        _1024 = _1011;
        _1025 = _1021;
      }
    } else {
      _1023 = _983;
      _1024 = _984;
      _1025 = _985;
    }
    float _1030 = abs(_1023);
    float _1031 = abs(_1024);
    float _1032 = abs(_1025);
    float _1033 = log2(_1030);
    float _1034 = log2(_1031);
    float _1035 = log2(_1032);
    float _1036 = _1033 * cb2_000z;
    float _1037 = _1034 * cb2_000z;
    float _1038 = _1035 * cb2_000z;
    float _1039 = exp2(_1036);
    float _1040 = exp2(_1037);
    float _1041 = exp2(_1038);
    float _1042 = _1039 * cb2_000y;
    float _1043 = _1040 * cb2_000y;
    float _1044 = _1041 * cb2_000y;
    float _1045 = _1042 + cb2_000x;
    float _1046 = _1043 + cb2_000x;
    float _1047 = _1044 + cb2_000x;
    float _1048 = saturate(_1045);
    float _1049 = saturate(_1046);
    float _1050 = saturate(_1047);
    _1052 = _1048;
    _1053 = _1049;
    _1054 = _1050;
  }
  float _1055 = dot(float3(_1052, _1053, _1054), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1052;
  SV_Target.y = _1053;
  SV_Target.z = _1054;
  SV_Target.w = _1055;
  SV_Target_1.x = _1055;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
