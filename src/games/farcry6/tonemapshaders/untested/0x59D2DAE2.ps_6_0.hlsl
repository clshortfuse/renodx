#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = cb2_015x * TEXCOORD0_centroid.x;
  float _31 = cb2_015y * TEXCOORD0_centroid.y;
  float _34 = _30 + cb2_015z;
  float _35 = _31 + cb2_015w;
  float4 _36 = t8.SampleLevel(s0_space2, float2(_34, _35), 0.0f);
  float _40 = saturate(_36.x);
  float _41 = saturate(_36.z);
  float _44 = cb2_026x * _41;
  float _45 = _40 * 6.283199787139893f;
  float _46 = cos(_45);
  float _47 = sin(_45);
  float _48 = _44 * _46;
  float _49 = _47 * _44;
  float _50 = 1.0f - _36.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _54 = _52 + TEXCOORD0_centroid.x;
  float _55 = _53 + TEXCOORD0_centroid.y;
  float4 _56 = t1.SampleLevel(s4_space2, float2(_54, _55), 0.0f);
  float _60 = max(_56.x, 0.0f);
  float _61 = max(_56.y, 0.0f);
  float _62 = max(_56.z, 0.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float _65 = min(_62, 65000.0f);
  float4 _66 = t4.SampleLevel(s2_space2, float2(_54, _55), 0.0f);
  float _71 = max(_66.x, 0.0f);
  float _72 = max(_66.y, 0.0f);
  float _73 = max(_66.z, 0.0f);
  float _74 = max(_66.w, 0.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _78 = min(_74, 5000.0f);
  float _81 = _25.x * cb0_028z;
  float _82 = _81 + cb0_028x;
  float _83 = cb2_027w / _82;
  float _84 = 1.0f - _83;
  float _85 = abs(_84);
  float _87 = cb2_027y * _85;
  float _89 = _87 - cb2_027z;
  float _90 = saturate(_89);
  float _91 = max(_90, _78);
  float _92 = saturate(_91);
  float _96 = cb2_013x * _54;
  float _97 = cb2_013y * _55;
  float _100 = _96 + cb2_013z;
  float _101 = _97 + cb2_013w;
  float _104 = dot(float2(_100, _101), float2(_100, _101));
  float _105 = abs(_104);
  float _106 = log2(_105);
  float _107 = _106 * cb2_014x;
  float _108 = exp2(_107);
  float _109 = saturate(_108);
  float _113 = cb2_011x * _54;
  float _114 = cb2_011y * _55;
  float _117 = _113 + cb2_011z;
  float _118 = _114 + cb2_011w;
  float _119 = _117 * _109;
  float _120 = _118 * _109;
  float _121 = _119 + _54;
  float _122 = _120 + _55;
  float _126 = cb2_012x * _54;
  float _127 = cb2_012y * _55;
  float _130 = _126 + cb2_012z;
  float _131 = _127 + cb2_012w;
  float _132 = _130 * _109;
  float _133 = _131 * _109;
  float _134 = _132 + _54;
  float _135 = _133 + _55;
  float4 _136 = t1.SampleLevel(s2_space2, float2(_121, _122), 0.0f);
  float _140 = max(_136.x, 0.0f);
  float _141 = max(_136.y, 0.0f);
  float _142 = max(_136.z, 0.0f);
  float _143 = min(_140, 65000.0f);
  float _144 = min(_141, 65000.0f);
  float _145 = min(_142, 65000.0f);
  float4 _146 = t1.SampleLevel(s2_space2, float2(_134, _135), 0.0f);
  float _150 = max(_146.x, 0.0f);
  float _151 = max(_146.y, 0.0f);
  float _152 = max(_146.z, 0.0f);
  float _153 = min(_150, 65000.0f);
  float _154 = min(_151, 65000.0f);
  float _155 = min(_152, 65000.0f);
  float4 _156 = t4.SampleLevel(s2_space2, float2(_121, _122), 0.0f);
  float _160 = max(_156.x, 0.0f);
  float _161 = max(_156.y, 0.0f);
  float _162 = max(_156.z, 0.0f);
  float _163 = min(_160, 5000.0f);
  float _164 = min(_161, 5000.0f);
  float _165 = min(_162, 5000.0f);
  float4 _166 = t4.SampleLevel(s2_space2, float2(_134, _135), 0.0f);
  float _170 = max(_166.x, 0.0f);
  float _171 = max(_166.y, 0.0f);
  float _172 = max(_166.z, 0.0f);
  float _173 = min(_170, 5000.0f);
  float _174 = min(_171, 5000.0f);
  float _175 = min(_172, 5000.0f);
  float _180 = 1.0f - cb2_009x;
  float _181 = 1.0f - cb2_009y;
  float _182 = 1.0f - cb2_009z;
  float _187 = _180 - cb2_010x;
  float _188 = _181 - cb2_010y;
  float _189 = _182 - cb2_010z;
  float _190 = saturate(_187);
  float _191 = saturate(_188);
  float _192 = saturate(_189);
  float _193 = _190 * _63;
  float _194 = _191 * _64;
  float _195 = _192 * _65;
  float _196 = cb2_009x * _143;
  float _197 = cb2_009y * _144;
  float _198 = cb2_009z * _145;
  float _199 = _196 + _193;
  float _200 = _197 + _194;
  float _201 = _198 + _195;
  float _202 = cb2_010x * _153;
  float _203 = cb2_010y * _154;
  float _204 = cb2_010z * _155;
  float _205 = _199 + _202;
  float _206 = _200 + _203;
  float _207 = _201 + _204;
  float _208 = _190 * _75;
  float _209 = _191 * _76;
  float _210 = _192 * _77;
  float _211 = cb2_009x * _163;
  float _212 = cb2_009y * _164;
  float _213 = cb2_009z * _165;
  float _214 = cb2_010x * _173;
  float _215 = cb2_010y * _174;
  float _216 = cb2_010z * _175;
  float4 _217 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _221 = _208 - _205;
  float _222 = _221 + _211;
  float _223 = _222 + _214;
  float _224 = _209 - _206;
  float _225 = _224 + _212;
  float _226 = _225 + _215;
  float _227 = _210 - _207;
  float _228 = _227 + _213;
  float _229 = _228 + _216;
  float _230 = _223 * _92;
  float _231 = _226 * _92;
  float _232 = _229 * _92;
  float _233 = _230 + _205;
  float _234 = _231 + _206;
  float _235 = _232 + _207;
  float _236 = dot(float3(_233, _234, _235), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _240 = t0[0].SExposureData_020;
  float _242 = t0[0].SExposureData_004;
  float _244 = cb2_018x * 0.5f;
  float _245 = _244 * cb2_018y;
  float _246 = _242.x - _245;
  float _247 = cb2_018y * cb2_018x;
  float _248 = 1.0f / _247;
  float _249 = _246 * _248;
  float _250 = _236 / _240.x;
  float _251 = _250 * 5464.01611328125f;
  float _252 = _251 + 9.99999993922529e-09f;
  float _253 = log2(_252);
  float _254 = _253 - _246;
  float _255 = _254 * _248;
  float _256 = saturate(_255);
  float2 _257 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _256), 0.0f);
  float _260 = max(_257.y, 1.0000000116860974e-07f);
  float _261 = _257.x / _260;
  float _262 = _261 + _249;
  float _263 = _262 / _248;
  float _264 = _263 - _242.x;
  float _265 = -0.0f - _264;
  float _267 = _265 - cb2_027x;
  float _268 = max(0.0f, _267);
  float _270 = cb2_026z * _268;
  float _271 = _264 - cb2_027x;
  float _272 = max(0.0f, _271);
  float _274 = cb2_026w * _272;
  bool _275 = (_264 < 0.0f);
  float _276 = select(_275, _270, _274);
  float _277 = exp2(_276);
  float _278 = _277 * _233;
  float _279 = _277 * _234;
  float _280 = _277 * _235;
  float _285 = cb2_024y * _217.x;
  float _286 = cb2_024z * _217.y;
  float _287 = cb2_024w * _217.z;
  float _288 = _285 + _278;
  float _289 = _286 + _279;
  float _290 = _287 + _280;
  float _295 = _288 * cb2_025x;
  float _296 = _289 * cb2_025y;
  float _297 = _290 * cb2_025z;
  float _298 = dot(float3(_295, _296, _297), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _299 = t0[0].SExposureData_012;
  float _301 = _298 * 5464.01611328125f;
  float _302 = _301 * _299.x;
  float _303 = _302 + 9.99999993922529e-09f;
  float _304 = log2(_303);
  float _305 = _304 + 16.929765701293945f;
  float _306 = _305 * 0.05734497308731079f;
  float _307 = saturate(_306);
  float _308 = _307 * _307;
  float _309 = _307 * 2.0f;
  float _310 = 3.0f - _309;
  float _311 = _308 * _310;
  float _312 = _296 * 0.8450999855995178f;
  float _313 = _297 * 0.14589999616146088f;
  float _314 = _312 + _313;
  float _315 = _314 * 2.4890189170837402f;
  float _316 = _314 * 0.3754962384700775f;
  float _317 = _314 * 2.811495304107666f;
  float _318 = _314 * 5.519708156585693f;
  float _319 = _298 - _315;
  float _320 = _311 * _319;
  float _321 = _320 + _315;
  float _322 = _311 * 0.5f;
  float _323 = _322 + 0.5f;
  float _324 = _323 * _319;
  float _325 = _324 + _315;
  float _326 = _295 - _316;
  float _327 = _296 - _317;
  float _328 = _297 - _318;
  float _329 = _323 * _326;
  float _330 = _323 * _327;
  float _331 = _323 * _328;
  float _332 = _329 + _316;
  float _333 = _330 + _317;
  float _334 = _331 + _318;
  float _335 = 1.0f / _325;
  float _336 = _321 * _335;
  float _337 = _336 * _332;
  float _338 = _336 * _333;
  float _339 = _336 * _334;
  float _343 = cb2_020x * TEXCOORD0_centroid.x;
  float _344 = cb2_020y * TEXCOORD0_centroid.y;
  float _347 = _343 + cb2_020z;
  float _348 = _344 + cb2_020w;
  float _351 = dot(float2(_347, _348), float2(_347, _348));
  float _352 = 1.0f - _351;
  float _353 = saturate(_352);
  float _354 = log2(_353);
  float _355 = _354 * cb2_021w;
  float _356 = exp2(_355);
  float _360 = _337 - cb2_021x;
  float _361 = _338 - cb2_021y;
  float _362 = _339 - cb2_021z;
  float _363 = _360 * _356;
  float _364 = _361 * _356;
  float _365 = _362 * _356;
  float _366 = _363 + cb2_021x;
  float _367 = _364 + cb2_021y;
  float _368 = _365 + cb2_021z;
  float _369 = t0[0].SExposureData_000;
  float _371 = max(_240.x, 0.0010000000474974513f);
  float _372 = 1.0f / _371;
  float _373 = _372 * _369.x;
  bool _376 = ((uint)(cb2_069y) == 0);
  float _382;
  float _383;
  float _384;
  float _438;
  float _439;
  float _440;
  float _531;
  float _532;
  float _533;
  float _578;
  float _579;
  float _580;
  float _581;
  float _630;
  float _631;
  float _632;
  float _633;
  float _658;
  float _659;
  float _660;
  float _810;
  float _847;
  float _848;
  float _849;
  float _878;
  float _879;
  float _880;
  float _961;
  float _962;
  float _963;
  float _969;
  float _970;
  float _971;
  float _985;
  float _986;
  float _987;
  float _1012;
  float _1024;
  float _1052;
  float _1064;
  float _1076;
  float _1077;
  float _1078;
  float _1105;
  float _1106;
  float _1107;
  if (!_376) {
    float _378 = _373 * _366;
    float _379 = _373 * _367;
    float _380 = _373 * _368;
    _382 = _378;
    _383 = _379;
    _384 = _380;
  } else {
    _382 = _366;
    _383 = _367;
    _384 = _368;
  }
  float _385 = _382 * 0.6130970120429993f;
  float _386 = mad(0.33952298760414124f, _383, _385);
  float _387 = mad(0.04737899824976921f, _384, _386);
  float _388 = _382 * 0.07019399851560593f;
  float _389 = mad(0.9163540005683899f, _383, _388);
  float _390 = mad(0.013451999984681606f, _384, _389);
  float _391 = _382 * 0.02061600051820278f;
  float _392 = mad(0.10956999659538269f, _383, _391);
  float _393 = mad(0.8698149919509888f, _384, _392);
  float _394 = log2(_387);
  float _395 = log2(_390);
  float _396 = log2(_393);
  float _397 = _394 * 0.04211956635117531f;
  float _398 = _395 * 0.04211956635117531f;
  float _399 = _396 * 0.04211956635117531f;
  float _400 = _397 + 0.6252607107162476f;
  float _401 = _398 + 0.6252607107162476f;
  float _402 = _399 + 0.6252607107162476f;
  float4 _403 = t6.SampleLevel(s2_space2, float3(_400, _401, _402), 0.0f);
  bool _409 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_409 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _413 = cb2_017x * _403.x;
    float _414 = cb2_017x * _403.y;
    float _415 = cb2_017x * _403.z;
    float _417 = _413 + cb2_017y;
    float _418 = _414 + cb2_017y;
    float _419 = _415 + cb2_017y;
    float _420 = exp2(_417);
    float _421 = exp2(_418);
    float _422 = exp2(_419);
    float _423 = _420 + 1.0f;
    float _424 = _421 + 1.0f;
    float _425 = _422 + 1.0f;
    float _426 = 1.0f / _423;
    float _427 = 1.0f / _424;
    float _428 = 1.0f / _425;
    float _430 = cb2_017z * _426;
    float _431 = cb2_017z * _427;
    float _432 = cb2_017z * _428;
    float _434 = _430 + cb2_017w;
    float _435 = _431 + cb2_017w;
    float _436 = _432 + cb2_017w;
    _438 = _434;
    _439 = _435;
    _440 = _436;
  } else {
    _438 = _403.x;
    _439 = _403.y;
    _440 = _403.z;
  }
  float _441 = _438 * 23.0f;
  float _442 = _441 + -14.473931312561035f;
  float _443 = exp2(_442);
  float _444 = _439 * 23.0f;
  float _445 = _444 + -14.473931312561035f;
  float _446 = exp2(_445);
  float _447 = _440 * 23.0f;
  float _448 = _447 + -14.473931312561035f;
  float _449 = exp2(_448);
  float _450 = dot(float3(_443, _446, _449), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _455 = dot(float3(_443, _446, _449), float3(_443, _446, _449));
  float _456 = rsqrt(_455);
  float _457 = _456 * _443;
  float _458 = _456 * _446;
  float _459 = _456 * _449;
  float _460 = cb2_001x - _457;
  float _461 = cb2_001y - _458;
  float _462 = cb2_001z - _459;
  float _463 = dot(float3(_460, _461, _462), float3(_460, _461, _462));
  float _466 = cb2_002z * _463;
  float _468 = _466 + cb2_002w;
  float _469 = saturate(_468);
  float _471 = cb2_002x * _469;
  float _472 = _450 - _443;
  float _473 = _450 - _446;
  float _474 = _450 - _449;
  float _475 = _471 * _472;
  float _476 = _471 * _473;
  float _477 = _471 * _474;
  float _478 = _475 + _443;
  float _479 = _476 + _446;
  float _480 = _477 + _449;
  float _482 = cb2_002y * _469;
  float _483 = 0.10000000149011612f - _478;
  float _484 = 0.10000000149011612f - _479;
  float _485 = 0.10000000149011612f - _480;
  float _486 = _483 * _482;
  float _487 = _484 * _482;
  float _488 = _485 * _482;
  float _489 = _486 + _478;
  float _490 = _487 + _479;
  float _491 = _488 + _480;
  float _492 = saturate(_489);
  float _493 = saturate(_490);
  float _494 = saturate(_491);
  float _499 = cb2_004x * TEXCOORD0_centroid.x;
  float _500 = cb2_004y * TEXCOORD0_centroid.y;
  float _503 = _499 + cb2_004z;
  float _504 = _500 + cb2_004w;
  float4 _510 = t7.Sample(s2_space2, float2(_503, _504));
  float _515 = _510.x * cb2_003x;
  float _516 = _510.y * cb2_003y;
  float _517 = _510.z * cb2_003z;
  float _518 = _510.w * cb2_003w;
  float _521 = _518 + cb2_026y;
  float _522 = saturate(_521);
  bool _525 = ((uint)(cb2_069y) == 0);
  if (!_525) {
    float _527 = _515 * _373;
    float _528 = _516 * _373;
    float _529 = _517 * _373;
    _531 = _527;
    _532 = _528;
    _533 = _529;
  } else {
    _531 = _515;
    _532 = _516;
    _533 = _517;
  }
  bool _536 = ((uint)(cb2_028x) == 2);
  bool _537 = ((uint)(cb2_028x) == 3);
  int _538 = (uint)(cb2_028x) & -2;
  bool _539 = (_538 == 2);
  bool _540 = ((uint)(cb2_028x) == 6);
  bool _541 = _539 || _540;
  if (_541) {
    float _543 = _531 * _522;
    float _544 = _532 * _522;
    float _545 = _533 * _522;
    float _546 = _522 * _522;
    _578 = _543;
    _579 = _544;
    _580 = _545;
    _581 = _546;
  } else {
    bool _548 = ((uint)(cb2_028x) == 4);
    if (_548) {
      float _550 = _531 + -1.0f;
      float _551 = _532 + -1.0f;
      float _552 = _533 + -1.0f;
      float _553 = _522 + -1.0f;
      float _554 = _550 * _522;
      float _555 = _551 * _522;
      float _556 = _552 * _522;
      float _557 = _553 * _522;
      float _558 = _554 + 1.0f;
      float _559 = _555 + 1.0f;
      float _560 = _556 + 1.0f;
      float _561 = _557 + 1.0f;
      _578 = _558;
      _579 = _559;
      _580 = _560;
      _581 = _561;
    } else {
      bool _563 = ((uint)(cb2_028x) == 5);
      if (_563) {
        float _565 = _531 + -0.5f;
        float _566 = _532 + -0.5f;
        float _567 = _533 + -0.5f;
        float _568 = _522 + -0.5f;
        float _569 = _565 * _522;
        float _570 = _566 * _522;
        float _571 = _567 * _522;
        float _572 = _568 * _522;
        float _573 = _569 + 0.5f;
        float _574 = _570 + 0.5f;
        float _575 = _571 + 0.5f;
        float _576 = _572 + 0.5f;
        _578 = _573;
        _579 = _574;
        _580 = _575;
        _581 = _576;
      } else {
        _578 = _531;
        _579 = _532;
        _580 = _533;
        _581 = _522;
      }
    }
  }
  if (_536) {
    float _583 = _578 + _492;
    float _584 = _579 + _493;
    float _585 = _580 + _494;
    _630 = _583;
    _631 = _584;
    _632 = _585;
    _633 = cb2_025w;
  } else {
    if (_537) {
      float _588 = 1.0f - _578;
      float _589 = 1.0f - _579;
      float _590 = 1.0f - _580;
      float _591 = _588 * _492;
      float _592 = _589 * _493;
      float _593 = _590 * _494;
      float _594 = _591 + _578;
      float _595 = _592 + _579;
      float _596 = _593 + _580;
      _630 = _594;
      _631 = _595;
      _632 = _596;
      _633 = cb2_025w;
    } else {
      bool _598 = ((uint)(cb2_028x) == 4);
      if (_598) {
        float _600 = _578 * _492;
        float _601 = _579 * _493;
        float _602 = _580 * _494;
        _630 = _600;
        _631 = _601;
        _632 = _602;
        _633 = cb2_025w;
      } else {
        bool _604 = ((uint)(cb2_028x) == 5);
        if (_604) {
          float _606 = _492 * 2.0f;
          float _607 = _606 * _578;
          float _608 = _493 * 2.0f;
          float _609 = _608 * _579;
          float _610 = _494 * 2.0f;
          float _611 = _610 * _580;
          _630 = _607;
          _631 = _609;
          _632 = _611;
          _633 = cb2_025w;
        } else {
          if (_540) {
            float _614 = _492 - _578;
            float _615 = _493 - _579;
            float _616 = _494 - _580;
            _630 = _614;
            _631 = _615;
            _632 = _616;
            _633 = cb2_025w;
          } else {
            float _618 = _578 - _492;
            float _619 = _579 - _493;
            float _620 = _580 - _494;
            float _621 = _581 * _618;
            float _622 = _581 * _619;
            float _623 = _581 * _620;
            float _624 = _621 + _492;
            float _625 = _622 + _493;
            float _626 = _623 + _494;
            float _627 = 1.0f - _581;
            float _628 = _627 * cb2_025w;
            _630 = _624;
            _631 = _625;
            _632 = _626;
            _633 = _628;
          }
        }
      }
    }
  }
  float _639 = cb2_016x - _630;
  float _640 = cb2_016y - _631;
  float _641 = cb2_016z - _632;
  float _642 = _639 * cb2_016w;
  float _643 = _640 * cb2_016w;
  float _644 = _641 * cb2_016w;
  float _645 = _642 + _630;
  float _646 = _643 + _631;
  float _647 = _644 + _632;
  bool _650 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_650 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _654 = cb2_024x * _645;
    float _655 = cb2_024x * _646;
    float _656 = cb2_024x * _647;
    _658 = _654;
    _659 = _655;
    _660 = _656;
  } else {
    _658 = _645;
    _659 = _646;
    _660 = _647;
  }
  float _663 = _658 * 0.9708889722824097f;
  float _664 = mad(0.026962999254465103f, _659, _663);
  float _665 = mad(0.002148000057786703f, _660, _664);
  float _666 = _658 * 0.01088900025933981f;
  float _667 = mad(0.9869629740715027f, _659, _666);
  float _668 = mad(0.002148000057786703f, _660, _667);
  float _669 = mad(0.026962999254465103f, _659, _666);
  float _670 = mad(0.9621480107307434f, _660, _669);
  float _671 = max(_665, 0.0f);
  float _672 = max(_668, 0.0f);
  float _673 = max(_670, 0.0f);
  float _674 = min(_671, cb2_095y);
  float _675 = min(_672, cb2_095y);
  float _676 = min(_673, cb2_095y);
  bool _679 = ((uint)(cb2_095x) == 0);
  bool _682 = ((uint)(cb2_094w) == 0);
  bool _684 = ((uint)(cb2_094z) == 0);
  bool _686 = ((uint)(cb2_094y) != 0);
  bool _688 = ((uint)(cb2_094x) == 0);
  bool _690 = ((uint)(cb2_069z) != 0);
  float _737 = asfloat((uint)(cb2_075y));
  float _738 = asfloat((uint)(cb2_075z));
  float _739 = asfloat((uint)(cb2_075w));
  float _740 = asfloat((uint)(cb2_074z));
  float _741 = asfloat((uint)(cb2_074w));
  float _742 = asfloat((uint)(cb2_075x));
  float _743 = asfloat((uint)(cb2_073w));
  float _744 = asfloat((uint)(cb2_074x));
  float _745 = asfloat((uint)(cb2_074y));
  float _746 = asfloat((uint)(cb2_077x));
  float _747 = asfloat((uint)(cb2_077y));
  float _748 = asfloat((uint)(cb2_079x));
  float _749 = asfloat((uint)(cb2_079y));
  float _750 = asfloat((uint)(cb2_079z));
  float _751 = asfloat((uint)(cb2_078y));
  float _752 = asfloat((uint)(cb2_078z));
  float _753 = asfloat((uint)(cb2_078w));
  float _754 = asfloat((uint)(cb2_077z));
  float _755 = asfloat((uint)(cb2_077w));
  float _756 = asfloat((uint)(cb2_078x));
  float _757 = asfloat((uint)(cb2_072y));
  float _758 = asfloat((uint)(cb2_072z));
  float _759 = asfloat((uint)(cb2_072w));
  float _760 = asfloat((uint)(cb2_071x));
  float _761 = asfloat((uint)(cb2_071y));
  float _762 = asfloat((uint)(cb2_076x));
  float _763 = asfloat((uint)(cb2_070w));
  float _764 = asfloat((uint)(cb2_070x));
  float _765 = asfloat((uint)(cb2_070y));
  float _766 = asfloat((uint)(cb2_070z));
  float _767 = asfloat((uint)(cb2_073x));
  float _768 = asfloat((uint)(cb2_073y));
  float _769 = asfloat((uint)(cb2_073z));
  float _770 = asfloat((uint)(cb2_071z));
  float _771 = asfloat((uint)(cb2_071w));
  float _772 = asfloat((uint)(cb2_072x));
  float _773 = max(_675, _676);
  float _774 = max(_674, _773);
  float _775 = 1.0f / _774;
  float _776 = _775 * _674;
  float _777 = _775 * _675;
  float _778 = _775 * _676;
  float _779 = abs(_776);
  float _780 = log2(_779);
  float _781 = _780 * _764;
  float _782 = exp2(_781);
  float _783 = abs(_777);
  float _784 = log2(_783);
  float _785 = _784 * _765;
  float _786 = exp2(_785);
  float _787 = abs(_778);
  float _788 = log2(_787);
  float _789 = _788 * _766;
  float _790 = exp2(_789);
  if (_686) {
    float _793 = asfloat((uint)(cb2_076w));
    float _795 = asfloat((uint)(cb2_076z));
    float _797 = asfloat((uint)(cb2_076y));
    float _798 = _795 * _675;
    float _799 = _797 * _674;
    float _800 = _793 * _676;
    float _801 = _799 + _800;
    float _802 = _801 + _798;
    _810 = _802;
  } else {
    float _804 = _771 * _675;
    float _805 = _770 * _674;
    float _806 = _772 * _676;
    float _807 = _804 + _805;
    float _808 = _807 + _806;
    _810 = _808;
  }
  float _811 = abs(_810);
  float _812 = log2(_811);
  float _813 = _812 * _763;
  float _814 = exp2(_813);
  float _815 = log2(_814);
  float _816 = _815 * _762;
  float _817 = exp2(_816);
  float _818 = select(_690, _817, _814);
  float _819 = _818 * _760;
  float _820 = _819 + _761;
  float _821 = 1.0f / _820;
  float _822 = _821 * _814;
  if (_686) {
    if (!_688) {
      float _825 = _782 * _754;
      float _826 = _786 * _755;
      float _827 = _790 * _756;
      float _828 = _826 + _825;
      float _829 = _828 + _827;
      float _830 = _786 * _752;
      float _831 = _782 * _751;
      float _832 = _790 * _753;
      float _833 = _830 + _831;
      float _834 = _833 + _832;
      float _835 = _790 * _750;
      float _836 = _786 * _749;
      float _837 = _782 * _748;
      float _838 = _836 + _837;
      float _839 = _838 + _835;
      float _840 = max(_834, _839);
      float _841 = max(_829, _840);
      float _842 = 1.0f / _841;
      float _843 = _842 * _829;
      float _844 = _842 * _834;
      float _845 = _842 * _839;
      _847 = _843;
      _848 = _844;
      _849 = _845;
    } else {
      _847 = _782;
      _848 = _786;
      _849 = _790;
    }
    float _850 = _847 * _747;
    float _851 = exp2(_850);
    float _852 = _851 * _746;
    float _853 = saturate(_852);
    float _854 = _847 * _746;
    float _855 = _847 - _854;
    float _856 = saturate(_855);
    float _857 = max(_746, _856);
    float _858 = min(_857, _853);
    float _859 = _848 * _747;
    float _860 = exp2(_859);
    float _861 = _860 * _746;
    float _862 = saturate(_861);
    float _863 = _848 * _746;
    float _864 = _848 - _863;
    float _865 = saturate(_864);
    float _866 = max(_746, _865);
    float _867 = min(_866, _862);
    float _868 = _849 * _747;
    float _869 = exp2(_868);
    float _870 = _869 * _746;
    float _871 = saturate(_870);
    float _872 = _849 * _746;
    float _873 = _849 - _872;
    float _874 = saturate(_873);
    float _875 = max(_746, _874);
    float _876 = min(_875, _871);
    _878 = _858;
    _879 = _867;
    _880 = _876;
  } else {
    _878 = _782;
    _879 = _786;
    _880 = _790;
  }
  float _881 = _878 * _770;
  float _882 = _879 * _771;
  float _883 = _882 + _881;
  float _884 = _880 * _772;
  float _885 = _883 + _884;
  float _886 = 1.0f / _885;
  float _887 = _886 * _822;
  float _888 = saturate(_887);
  float _889 = _888 * _878;
  float _890 = saturate(_889);
  float _891 = _888 * _879;
  float _892 = saturate(_891);
  float _893 = _888 * _880;
  float _894 = saturate(_893);
  float _895 = _890 * _757;
  float _896 = _757 - _895;
  float _897 = _892 * _758;
  float _898 = _758 - _897;
  float _899 = _894 * _759;
  float _900 = _759 - _899;
  float _901 = _894 * _772;
  float _902 = _890 * _770;
  float _903 = _892 * _771;
  float _904 = _822 - _902;
  float _905 = _904 - _903;
  float _906 = _905 - _901;
  float _907 = saturate(_906);
  float _908 = _898 * _771;
  float _909 = _896 * _770;
  float _910 = _900 * _772;
  float _911 = _908 + _909;
  float _912 = _911 + _910;
  float _913 = 1.0f / _912;
  float _914 = _913 * _907;
  float _915 = _914 * _896;
  float _916 = _915 + _890;
  float _917 = saturate(_916);
  float _918 = _914 * _898;
  float _919 = _918 + _892;
  float _920 = saturate(_919);
  float _921 = _914 * _900;
  float _922 = _921 + _894;
  float _923 = saturate(_922);
  float _924 = _923 * _772;
  float _925 = _917 * _770;
  float _926 = _920 * _771;
  float _927 = _822 - _925;
  float _928 = _927 - _926;
  float _929 = _928 - _924;
  float _930 = saturate(_929);
  float _931 = _930 * _767;
  float _932 = _931 + _917;
  float _933 = saturate(_932);
  float _934 = _930 * _768;
  float _935 = _934 + _920;
  float _936 = saturate(_935);
  float _937 = _930 * _769;
  float _938 = _937 + _923;
  float _939 = saturate(_938);
  if (!_684) {
    float _941 = _933 * _743;
    float _942 = _936 * _744;
    float _943 = _939 * _745;
    float _944 = _942 + _941;
    float _945 = _944 + _943;
    float _946 = _936 * _741;
    float _947 = _933 * _740;
    float _948 = _939 * _742;
    float _949 = _946 + _947;
    float _950 = _949 + _948;
    float _951 = _939 * _739;
    float _952 = _936 * _738;
    float _953 = _933 * _737;
    float _954 = _952 + _953;
    float _955 = _954 + _951;
    if (!_682) {
      float _957 = saturate(_945);
      float _958 = saturate(_950);
      float _959 = saturate(_955);
      _961 = _959;
      _962 = _958;
      _963 = _957;
    } else {
      _961 = _955;
      _962 = _950;
      _963 = _945;
    }
  } else {
    _961 = _939;
    _962 = _936;
    _963 = _933;
  }
  if (!_679) {
    float _965 = _963 * _743;
    float _966 = _962 * _743;
    float _967 = _961 * _743;
    _969 = _967;
    _970 = _966;
    _971 = _965;
  } else {
    _969 = _961;
    _970 = _962;
    _971 = _963;
  }
  if (_650) {
    float _975 = cb1_018z * 9.999999747378752e-05f;
    float _976 = _975 * _971;
    float _977 = _975 * _970;
    float _978 = _975 * _969;
    float _980 = 5000.0f / cb1_018y;
    float _981 = _976 * _980;
    float _982 = _977 * _980;
    float _983 = _978 * _980;
    _985 = _981;
    _986 = _982;
    _987 = _983;
  } else {
    _985 = _971;
    _986 = _970;
    _987 = _969;
  }
  float _988 = _985 * 1.6047500371932983f;
  float _989 = mad(-0.5310800075531006f, _986, _988);
  float _990 = mad(-0.07366999983787537f, _987, _989);
  float _991 = _985 * -0.10208000242710114f;
  float _992 = mad(1.1081299781799316f, _986, _991);
  float _993 = mad(-0.006049999967217445f, _987, _992);
  float _994 = _985 * -0.0032599999103695154f;
  float _995 = mad(-0.07275000214576721f, _986, _994);
  float _996 = mad(1.0760200023651123f, _987, _995);
  if (_650) {
    // float _998 = max(_990, 0.0f);
    // float _999 = max(_993, 0.0f);
    // float _1000 = max(_996, 0.0f);
    // bool _1001 = !(_998 >= 0.0030399328097701073f);
    // if (!_1001) {
    //   float _1003 = abs(_998);
    //   float _1004 = log2(_1003);
    //   float _1005 = _1004 * 0.4166666567325592f;
    //   float _1006 = exp2(_1005);
    //   float _1007 = _1006 * 1.0549999475479126f;
    //   float _1008 = _1007 + -0.054999999701976776f;
    //   _1012 = _1008;
    // } else {
    //   float _1010 = _998 * 12.923210144042969f;
    //   _1012 = _1010;
    // }
    // bool _1013 = !(_999 >= 0.0030399328097701073f);
    // if (!_1013) {
    //   float _1015 = abs(_999);
    //   float _1016 = log2(_1015);
    //   float _1017 = _1016 * 0.4166666567325592f;
    //   float _1018 = exp2(_1017);
    //   float _1019 = _1018 * 1.0549999475479126f;
    //   float _1020 = _1019 + -0.054999999701976776f;
    //   _1024 = _1020;
    // } else {
    //   float _1022 = _999 * 12.923210144042969f;
    //   _1024 = _1022;
    // }
    // bool _1025 = !(_1000 >= 0.0030399328097701073f);
    // if (!_1025) {
    //   float _1027 = abs(_1000);
    //   float _1028 = log2(_1027);
    //   float _1029 = _1028 * 0.4166666567325592f;
    //   float _1030 = exp2(_1029);
    //   float _1031 = _1030 * 1.0549999475479126f;
    //   float _1032 = _1031 + -0.054999999701976776f;
    //   _1105 = _1012;
    //   _1106 = _1024;
    //   _1107 = _1032;
    // } else {
    //   float _1034 = _1000 * 12.923210144042969f;
    //   _1105 = _1012;
    //   _1106 = _1024;
    //   _1107 = _1034;
    // }
    _1105 = renodx::color::srgb::EncodeSafe(_990);
    _1106 = renodx::color::srgb::EncodeSafe(_993);
    _1107 = renodx::color::srgb::EncodeSafe(_996);

  } else {
    float _1036 = saturate(_990);
    float _1037 = saturate(_993);
    float _1038 = saturate(_996);
    bool _1039 = ((uint)(cb1_018w) == -2);
    if (!_1039) {
      bool _1041 = !(_1036 >= 0.0030399328097701073f);
      if (!_1041) {
        float _1043 = abs(_1036);
        float _1044 = log2(_1043);
        float _1045 = _1044 * 0.4166666567325592f;
        float _1046 = exp2(_1045);
        float _1047 = _1046 * 1.0549999475479126f;
        float _1048 = _1047 + -0.054999999701976776f;
        _1052 = _1048;
      } else {
        float _1050 = _1036 * 12.923210144042969f;
        _1052 = _1050;
      }
      bool _1053 = !(_1037 >= 0.0030399328097701073f);
      if (!_1053) {
        float _1055 = abs(_1037);
        float _1056 = log2(_1055);
        float _1057 = _1056 * 0.4166666567325592f;
        float _1058 = exp2(_1057);
        float _1059 = _1058 * 1.0549999475479126f;
        float _1060 = _1059 + -0.054999999701976776f;
        _1064 = _1060;
      } else {
        float _1062 = _1037 * 12.923210144042969f;
        _1064 = _1062;
      }
      bool _1065 = !(_1038 >= 0.0030399328097701073f);
      if (!_1065) {
        float _1067 = abs(_1038);
        float _1068 = log2(_1067);
        float _1069 = _1068 * 0.4166666567325592f;
        float _1070 = exp2(_1069);
        float _1071 = _1070 * 1.0549999475479126f;
        float _1072 = _1071 + -0.054999999701976776f;
        _1076 = _1052;
        _1077 = _1064;
        _1078 = _1072;
      } else {
        float _1074 = _1038 * 12.923210144042969f;
        _1076 = _1052;
        _1077 = _1064;
        _1078 = _1074;
      }
    } else {
      _1076 = _1036;
      _1077 = _1037;
      _1078 = _1038;
    }
    float _1083 = abs(_1076);
    float _1084 = abs(_1077);
    float _1085 = abs(_1078);
    float _1086 = log2(_1083);
    float _1087 = log2(_1084);
    float _1088 = log2(_1085);
    float _1089 = _1086 * cb2_000z;
    float _1090 = _1087 * cb2_000z;
    float _1091 = _1088 * cb2_000z;
    float _1092 = exp2(_1089);
    float _1093 = exp2(_1090);
    float _1094 = exp2(_1091);
    float _1095 = _1092 * cb2_000y;
    float _1096 = _1093 * cb2_000y;
    float _1097 = _1094 * cb2_000y;
    float _1098 = _1095 + cb2_000x;
    float _1099 = _1096 + cb2_000x;
    float _1100 = _1097 + cb2_000x;
    float _1101 = saturate(_1098);
    float _1102 = saturate(_1099);
    float _1103 = saturate(_1100);
    _1105 = _1101;
    _1106 = _1102;
    _1107 = _1103;
  }
  float _1111 = cb2_023x * TEXCOORD0_centroid.x;
  float _1112 = cb2_023y * TEXCOORD0_centroid.y;
  float _1115 = _1111 + cb2_023z;
  float _1116 = _1112 + cb2_023w;
  float4 _1119 = t10.SampleLevel(s0_space2, float2(_1115, _1116), 0.0f);
  float _1121 = _1119.x + -0.5f;
  float _1122 = _1121 * cb2_022x;
  float _1123 = _1122 + 0.5f;
  float _1124 = _1123 * 2.0f;
  float _1125 = _1124 * _1105;
  float _1126 = _1124 * _1106;
  float _1127 = _1124 * _1107;
  float _1131 = float((uint)(cb2_019z));
  float _1132 = float((uint)(cb2_019w));
  float _1133 = _1131 + SV_Position.x;
  float _1134 = _1132 + SV_Position.y;
  uint _1135 = uint(_1133);
  uint _1136 = uint(_1134);
  uint _1139 = cb2_019x + -1u;
  uint _1140 = cb2_019y + -1u;
  int _1141 = _1135 & _1139;
  int _1142 = _1136 & _1140;
  float4 _1143 = t3.Load(int3(_1141, _1142, 0));
  float _1147 = _1143.x * 2.0f;
  float _1148 = _1143.y * 2.0f;
  float _1149 = _1143.z * 2.0f;
  float _1150 = _1147 + -1.0f;
  float _1151 = _1148 + -1.0f;
  float _1152 = _1149 + -1.0f;
  float _1153 = _1150 * _633;
  float _1154 = _1151 * _633;
  float _1155 = _1152 * _633;
  float _1156 = _1153 + _1125;
  float _1157 = _1154 + _1126;
  float _1158 = _1155 + _1127;
  float _1159 = dot(float3(_1156, _1157, _1158), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1156;
  SV_Target.y = _1157;
  SV_Target.z = _1158;
  SV_Target.w = _1159;
  SV_Target_1.x = _1159;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
