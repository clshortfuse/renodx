#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t7.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _61 = cb2_015x * TEXCOORD0_centroid.x;
  float _62 = cb2_015y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_015z;
  float _66 = _62 + cb2_015w;
  float4 _67 = t8.SampleLevel(s0_space2, float2(_65, _66), 0.0f);
  float _71 = saturate(_67.x);
  float _72 = saturate(_67.z);
  float _75 = cb2_026x * _72;
  float _76 = _71 * 6.283199787139893f;
  float _77 = cos(_76);
  float _78 = sin(_76);
  float _79 = _75 * _77;
  float _80 = _78 * _75;
  float _81 = 1.0f - _67.y;
  float _82 = saturate(_81);
  float _83 = _79 * _82;
  float _84 = _80 * _82;
  float _85 = _56 + TEXCOORD0_centroid.x;
  float _86 = _85 + _83;
  float _87 = _57 + TEXCOORD0_centroid.y;
  float _88 = _87 + _84;
  float4 _89 = t7.SampleLevel(s2_space2, float2(_86, _88), 0.0f);
  bool _91 = (_89.y > 0.0f);
  float _92 = select(_91, TEXCOORD0_centroid.x, _86);
  float _93 = select(_91, TEXCOORD0_centroid.y, _88);
  float4 _94 = t1.SampleLevel(s4_space2, float2(_92, _93), 0.0f);
  float _98 = max(_94.x, 0.0f);
  float _99 = max(_94.y, 0.0f);
  float _100 = max(_94.z, 0.0f);
  float _101 = min(_98, 65000.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float4 _104 = t4.SampleLevel(s2_space2, float2(_92, _93), 0.0f);
  float _109 = max(_104.x, 0.0f);
  float _110 = max(_104.y, 0.0f);
  float _111 = max(_104.z, 0.0f);
  float _112 = max(_104.w, 0.0f);
  float _113 = min(_109, 5000.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _119 = _25.x * cb0_028z;
  float _120 = _119 + cb0_028x;
  float _121 = cb2_027w / _120;
  float _122 = 1.0f - _121;
  float _123 = abs(_122);
  float _125 = cb2_027y * _123;
  float _127 = _125 - cb2_027z;
  float _128 = saturate(_127);
  float _129 = max(_128, _116);
  float _130 = saturate(_129);
  float4 _131 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _135 = _113 - _101;
  float _136 = _114 - _102;
  float _137 = _115 - _103;
  float _138 = _130 * _135;
  float _139 = _130 * _136;
  float _140 = _130 * _137;
  float _141 = _138 + _101;
  float _142 = _139 + _102;
  float _143 = _140 + _103;
  float _144 = dot(float3(_141, _142, _143), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _148 = t0[0].SExposureData_020;
  float _150 = t0[0].SExposureData_004;
  float _152 = cb2_018x * 0.5f;
  float _153 = _152 * cb2_018y;
  float _154 = _150.x - _153;
  float _155 = cb2_018y * cb2_018x;
  float _156 = 1.0f / _155;
  float _157 = _154 * _156;
  float _158 = _144 / _148.x;
  float _159 = _158 * 5464.01611328125f;
  float _160 = _159 + 9.99999993922529e-09f;
  float _161 = log2(_160);
  float _162 = _161 - _154;
  float _163 = _162 * _156;
  float _164 = saturate(_163);
  float2 _165 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _164), 0.0f);
  float _168 = max(_165.y, 1.0000000116860974e-07f);
  float _169 = _165.x / _168;
  float _170 = _169 + _157;
  float _171 = _170 / _156;
  float _172 = _171 - _150.x;
  float _173 = -0.0f - _172;
  float _175 = _173 - cb2_027x;
  float _176 = max(0.0f, _175);
  float _178 = cb2_026z * _176;
  float _179 = _172 - cb2_027x;
  float _180 = max(0.0f, _179);
  float _182 = cb2_026w * _180;
  bool _183 = (_172 < 0.0f);
  float _184 = select(_183, _178, _182);
  float _185 = exp2(_184);
  float _186 = _185 * _141;
  float _187 = _185 * _142;
  float _188 = _185 * _143;
  float _193 = cb2_024y * _131.x;
  float _194 = cb2_024z * _131.y;
  float _195 = cb2_024w * _131.z;
  float _196 = _193 + _186;
  float _197 = _194 + _187;
  float _198 = _195 + _188;
  float _203 = _196 * cb2_025x;
  float _204 = _197 * cb2_025y;
  float _205 = _198 * cb2_025z;
  float _206 = dot(float3(_203, _204, _205), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _207 = t0[0].SExposureData_012;
  float _209 = _206 * 5464.01611328125f;
  float _210 = _209 * _207.x;
  float _211 = _210 + 9.99999993922529e-09f;
  float _212 = log2(_211);
  float _213 = _212 + 16.929765701293945f;
  float _214 = _213 * 0.05734497308731079f;
  float _215 = saturate(_214);
  float _216 = _215 * _215;
  float _217 = _215 * 2.0f;
  float _218 = 3.0f - _217;
  float _219 = _216 * _218;
  float _220 = _204 * 0.8450999855995178f;
  float _221 = _205 * 0.14589999616146088f;
  float _222 = _220 + _221;
  float _223 = _222 * 2.4890189170837402f;
  float _224 = _222 * 0.3754962384700775f;
  float _225 = _222 * 2.811495304107666f;
  float _226 = _222 * 5.519708156585693f;
  float _227 = _206 - _223;
  float _228 = _219 * _227;
  float _229 = _228 + _223;
  float _230 = _219 * 0.5f;
  float _231 = _230 + 0.5f;
  float _232 = _231 * _227;
  float _233 = _232 + _223;
  float _234 = _203 - _224;
  float _235 = _204 - _225;
  float _236 = _205 - _226;
  float _237 = _231 * _234;
  float _238 = _231 * _235;
  float _239 = _231 * _236;
  float _240 = _237 + _224;
  float _241 = _238 + _225;
  float _242 = _239 + _226;
  float _243 = 1.0f / _233;
  float _244 = _229 * _243;
  float _245 = _244 * _240;
  float _246 = _244 * _241;
  float _247 = _244 * _242;
  float _251 = cb2_020x * TEXCOORD0_centroid.x;
  float _252 = cb2_020y * TEXCOORD0_centroid.y;
  float _255 = _251 + cb2_020z;
  float _256 = _252 + cb2_020w;
  float _259 = dot(float2(_255, _256), float2(_255, _256));
  float _260 = 1.0f - _259;
  float _261 = saturate(_260);
  float _262 = log2(_261);
  float _263 = _262 * cb2_021w;
  float _264 = exp2(_263);
  float _268 = _245 - cb2_021x;
  float _269 = _246 - cb2_021y;
  float _270 = _247 - cb2_021z;
  float _271 = _268 * _264;
  float _272 = _269 * _264;
  float _273 = _270 * _264;
  float _274 = _271 + cb2_021x;
  float _275 = _272 + cb2_021y;
  float _276 = _273 + cb2_021z;
  float _277 = t0[0].SExposureData_000;
  float _279 = max(_148.x, 0.0010000000474974513f);
  float _280 = 1.0f / _279;
  float _281 = _280 * _277.x;
  bool _284 = ((uint)(cb2_069y) == 0);
  float _290;
  float _291;
  float _292;
  float _346;
  float _347;
  float _348;
  float _424;
  float _425;
  float _426;
  float _576;
  float _613;
  float _614;
  float _615;
  float _644;
  float _645;
  float _646;
  float _727;
  float _728;
  float _729;
  float _735;
  float _736;
  float _737;
  float _751;
  float _752;
  float _753;
  float _778;
  float _790;
  float _818;
  float _830;
  float _842;
  float _843;
  float _844;
  float _871;
  float _872;
  float _873;
  if (!_284) {
    float _286 = _281 * _274;
    float _287 = _281 * _275;
    float _288 = _281 * _276;
    _290 = _286;
    _291 = _287;
    _292 = _288;
  } else {
    _290 = _274;
    _291 = _275;
    _292 = _276;
  }
  float _293 = _290 * 0.6130970120429993f;
  float _294 = mad(0.33952298760414124f, _291, _293);
  float _295 = mad(0.04737899824976921f, _292, _294);
  float _296 = _290 * 0.07019399851560593f;
  float _297 = mad(0.9163540005683899f, _291, _296);
  float _298 = mad(0.013451999984681606f, _292, _297);
  float _299 = _290 * 0.02061600051820278f;
  float _300 = mad(0.10956999659538269f, _291, _299);
  float _301 = mad(0.8698149919509888f, _292, _300);
  float _302 = log2(_295);
  float _303 = log2(_298);
  float _304 = log2(_301);
  float _305 = _302 * 0.04211956635117531f;
  float _306 = _303 * 0.04211956635117531f;
  float _307 = _304 * 0.04211956635117531f;
  float _308 = _305 + 0.6252607107162476f;
  float _309 = _306 + 0.6252607107162476f;
  float _310 = _307 + 0.6252607107162476f;
  float4 _311 = t6.SampleLevel(s2_space2, float3(_308, _309, _310), 0.0f);
  bool _317 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_317 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _321 = cb2_017x * _311.x;
    float _322 = cb2_017x * _311.y;
    float _323 = cb2_017x * _311.z;
    float _325 = _321 + cb2_017y;
    float _326 = _322 + cb2_017y;
    float _327 = _323 + cb2_017y;
    float _328 = exp2(_325);
    float _329 = exp2(_326);
    float _330 = exp2(_327);
    float _331 = _328 + 1.0f;
    float _332 = _329 + 1.0f;
    float _333 = _330 + 1.0f;
    float _334 = 1.0f / _331;
    float _335 = 1.0f / _332;
    float _336 = 1.0f / _333;
    float _338 = cb2_017z * _334;
    float _339 = cb2_017z * _335;
    float _340 = cb2_017z * _336;
    float _342 = _338 + cb2_017w;
    float _343 = _339 + cb2_017w;
    float _344 = _340 + cb2_017w;
    _346 = _342;
    _347 = _343;
    _348 = _344;
  } else {
    _346 = _311.x;
    _347 = _311.y;
    _348 = _311.z;
  }
  float _349 = _346 * 23.0f;
  float _350 = _349 + -14.473931312561035f;
  float _351 = exp2(_350);
  float _352 = _347 * 23.0f;
  float _353 = _352 + -14.473931312561035f;
  float _354 = exp2(_353);
  float _355 = _348 * 23.0f;
  float _356 = _355 + -14.473931312561035f;
  float _357 = exp2(_356);
  float _358 = dot(float3(_351, _354, _357), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _363 = dot(float3(_351, _354, _357), float3(_351, _354, _357));
  float _364 = rsqrt(_363);
  float _365 = _364 * _351;
  float _366 = _364 * _354;
  float _367 = _364 * _357;
  float _368 = cb2_001x - _365;
  float _369 = cb2_001y - _366;
  float _370 = cb2_001z - _367;
  float _371 = dot(float3(_368, _369, _370), float3(_368, _369, _370));
  float _374 = cb2_002z * _371;
  float _376 = _374 + cb2_002w;
  float _377 = saturate(_376);
  float _379 = cb2_002x * _377;
  float _380 = _358 - _351;
  float _381 = _358 - _354;
  float _382 = _358 - _357;
  float _383 = _379 * _380;
  float _384 = _379 * _381;
  float _385 = _379 * _382;
  float _386 = _383 + _351;
  float _387 = _384 + _354;
  float _388 = _385 + _357;
  float _390 = cb2_002y * _377;
  float _391 = 0.10000000149011612f - _386;
  float _392 = 0.10000000149011612f - _387;
  float _393 = 0.10000000149011612f - _388;
  float _394 = _391 * _390;
  float _395 = _392 * _390;
  float _396 = _393 * _390;
  float _397 = _394 + _386;
  float _398 = _395 + _387;
  float _399 = _396 + _388;
  float _400 = saturate(_397);
  float _401 = saturate(_398);
  float _402 = saturate(_399);
  float _409 = cb2_016x - _400;
  float _410 = cb2_016y - _401;
  float _411 = cb2_016z - _402;
  float _412 = _409 * cb2_016w;
  float _413 = _410 * cb2_016w;
  float _414 = _411 * cb2_016w;
  float _415 = _412 + _400;
  float _416 = _413 + _401;
  float _417 = _414 + _402;
  if (_317 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _420 = cb2_024x * _415;
    float _421 = cb2_024x * _416;
    float _422 = cb2_024x * _417;
    _424 = _420;
    _425 = _421;
    _426 = _422;
  } else {
    _424 = _415;
    _425 = _416;
    _426 = _417;
  }
  float _429 = _424 * 0.9708889722824097f;
  float _430 = mad(0.026962999254465103f, _425, _429);
  float _431 = mad(0.002148000057786703f, _426, _430);
  float _432 = _424 * 0.01088900025933981f;
  float _433 = mad(0.9869629740715027f, _425, _432);
  float _434 = mad(0.002148000057786703f, _426, _433);
  float _435 = mad(0.026962999254465103f, _425, _432);
  float _436 = mad(0.9621480107307434f, _426, _435);
  float _437 = max(_431, 0.0f);
  float _438 = max(_434, 0.0f);
  float _439 = max(_436, 0.0f);
  float _440 = min(_437, cb2_095y);
  float _441 = min(_438, cb2_095y);
  float _442 = min(_439, cb2_095y);
  bool _445 = ((uint)(cb2_095x) == 0);
  bool _448 = ((uint)(cb2_094w) == 0);
  bool _450 = ((uint)(cb2_094z) == 0);
  bool _452 = ((uint)(cb2_094y) != 0);
  bool _454 = ((uint)(cb2_094x) == 0);
  bool _456 = ((uint)(cb2_069z) != 0);
  float _503 = asfloat((uint)(cb2_075y));
  float _504 = asfloat((uint)(cb2_075z));
  float _505 = asfloat((uint)(cb2_075w));
  float _506 = asfloat((uint)(cb2_074z));
  float _507 = asfloat((uint)(cb2_074w));
  float _508 = asfloat((uint)(cb2_075x));
  float _509 = asfloat((uint)(cb2_073w));
  float _510 = asfloat((uint)(cb2_074x));
  float _511 = asfloat((uint)(cb2_074y));
  float _512 = asfloat((uint)(cb2_077x));
  float _513 = asfloat((uint)(cb2_077y));
  float _514 = asfloat((uint)(cb2_079x));
  float _515 = asfloat((uint)(cb2_079y));
  float _516 = asfloat((uint)(cb2_079z));
  float _517 = asfloat((uint)(cb2_078y));
  float _518 = asfloat((uint)(cb2_078z));
  float _519 = asfloat((uint)(cb2_078w));
  float _520 = asfloat((uint)(cb2_077z));
  float _521 = asfloat((uint)(cb2_077w));
  float _522 = asfloat((uint)(cb2_078x));
  float _523 = asfloat((uint)(cb2_072y));
  float _524 = asfloat((uint)(cb2_072z));
  float _525 = asfloat((uint)(cb2_072w));
  float _526 = asfloat((uint)(cb2_071x));
  float _527 = asfloat((uint)(cb2_071y));
  float _528 = asfloat((uint)(cb2_076x));
  float _529 = asfloat((uint)(cb2_070w));
  float _530 = asfloat((uint)(cb2_070x));
  float _531 = asfloat((uint)(cb2_070y));
  float _532 = asfloat((uint)(cb2_070z));
  float _533 = asfloat((uint)(cb2_073x));
  float _534 = asfloat((uint)(cb2_073y));
  float _535 = asfloat((uint)(cb2_073z));
  float _536 = asfloat((uint)(cb2_071z));
  float _537 = asfloat((uint)(cb2_071w));
  float _538 = asfloat((uint)(cb2_072x));
  float _539 = max(_441, _442);
  float _540 = max(_440, _539);
  float _541 = 1.0f / _540;
  float _542 = _541 * _440;
  float _543 = _541 * _441;
  float _544 = _541 * _442;
  float _545 = abs(_542);
  float _546 = log2(_545);
  float _547 = _546 * _530;
  float _548 = exp2(_547);
  float _549 = abs(_543);
  float _550 = log2(_549);
  float _551 = _550 * _531;
  float _552 = exp2(_551);
  float _553 = abs(_544);
  float _554 = log2(_553);
  float _555 = _554 * _532;
  float _556 = exp2(_555);
  if (_452) {
    float _559 = asfloat((uint)(cb2_076w));
    float _561 = asfloat((uint)(cb2_076z));
    float _563 = asfloat((uint)(cb2_076y));
    float _564 = _561 * _441;
    float _565 = _563 * _440;
    float _566 = _559 * _442;
    float _567 = _565 + _566;
    float _568 = _567 + _564;
    _576 = _568;
  } else {
    float _570 = _537 * _441;
    float _571 = _536 * _440;
    float _572 = _538 * _442;
    float _573 = _570 + _571;
    float _574 = _573 + _572;
    _576 = _574;
  }
  float _577 = abs(_576);
  float _578 = log2(_577);
  float _579 = _578 * _529;
  float _580 = exp2(_579);
  float _581 = log2(_580);
  float _582 = _581 * _528;
  float _583 = exp2(_582);
  float _584 = select(_456, _583, _580);
  float _585 = _584 * _526;
  float _586 = _585 + _527;
  float _587 = 1.0f / _586;
  float _588 = _587 * _580;
  if (_452) {
    if (!_454) {
      float _591 = _548 * _520;
      float _592 = _552 * _521;
      float _593 = _556 * _522;
      float _594 = _592 + _591;
      float _595 = _594 + _593;
      float _596 = _552 * _518;
      float _597 = _548 * _517;
      float _598 = _556 * _519;
      float _599 = _596 + _597;
      float _600 = _599 + _598;
      float _601 = _556 * _516;
      float _602 = _552 * _515;
      float _603 = _548 * _514;
      float _604 = _602 + _603;
      float _605 = _604 + _601;
      float _606 = max(_600, _605);
      float _607 = max(_595, _606);
      float _608 = 1.0f / _607;
      float _609 = _608 * _595;
      float _610 = _608 * _600;
      float _611 = _608 * _605;
      _613 = _609;
      _614 = _610;
      _615 = _611;
    } else {
      _613 = _548;
      _614 = _552;
      _615 = _556;
    }
    float _616 = _613 * _513;
    float _617 = exp2(_616);
    float _618 = _617 * _512;
    float _619 = saturate(_618);
    float _620 = _613 * _512;
    float _621 = _613 - _620;
    float _622 = saturate(_621);
    float _623 = max(_512, _622);
    float _624 = min(_623, _619);
    float _625 = _614 * _513;
    float _626 = exp2(_625);
    float _627 = _626 * _512;
    float _628 = saturate(_627);
    float _629 = _614 * _512;
    float _630 = _614 - _629;
    float _631 = saturate(_630);
    float _632 = max(_512, _631);
    float _633 = min(_632, _628);
    float _634 = _615 * _513;
    float _635 = exp2(_634);
    float _636 = _635 * _512;
    float _637 = saturate(_636);
    float _638 = _615 * _512;
    float _639 = _615 - _638;
    float _640 = saturate(_639);
    float _641 = max(_512, _640);
    float _642 = min(_641, _637);
    _644 = _624;
    _645 = _633;
    _646 = _642;
  } else {
    _644 = _548;
    _645 = _552;
    _646 = _556;
  }
  float _647 = _644 * _536;
  float _648 = _645 * _537;
  float _649 = _648 + _647;
  float _650 = _646 * _538;
  float _651 = _649 + _650;
  float _652 = 1.0f / _651;
  float _653 = _652 * _588;
  float _654 = saturate(_653);
  float _655 = _654 * _644;
  float _656 = saturate(_655);
  float _657 = _654 * _645;
  float _658 = saturate(_657);
  float _659 = _654 * _646;
  float _660 = saturate(_659);
  float _661 = _656 * _523;
  float _662 = _523 - _661;
  float _663 = _658 * _524;
  float _664 = _524 - _663;
  float _665 = _660 * _525;
  float _666 = _525 - _665;
  float _667 = _660 * _538;
  float _668 = _656 * _536;
  float _669 = _658 * _537;
  float _670 = _588 - _668;
  float _671 = _670 - _669;
  float _672 = _671 - _667;
  float _673 = saturate(_672);
  float _674 = _664 * _537;
  float _675 = _662 * _536;
  float _676 = _666 * _538;
  float _677 = _674 + _675;
  float _678 = _677 + _676;
  float _679 = 1.0f / _678;
  float _680 = _679 * _673;
  float _681 = _680 * _662;
  float _682 = _681 + _656;
  float _683 = saturate(_682);
  float _684 = _680 * _664;
  float _685 = _684 + _658;
  float _686 = saturate(_685);
  float _687 = _680 * _666;
  float _688 = _687 + _660;
  float _689 = saturate(_688);
  float _690 = _689 * _538;
  float _691 = _683 * _536;
  float _692 = _686 * _537;
  float _693 = _588 - _691;
  float _694 = _693 - _692;
  float _695 = _694 - _690;
  float _696 = saturate(_695);
  float _697 = _696 * _533;
  float _698 = _697 + _683;
  float _699 = saturate(_698);
  float _700 = _696 * _534;
  float _701 = _700 + _686;
  float _702 = saturate(_701);
  float _703 = _696 * _535;
  float _704 = _703 + _689;
  float _705 = saturate(_704);
  if (!_450) {
    float _707 = _699 * _509;
    float _708 = _702 * _510;
    float _709 = _705 * _511;
    float _710 = _708 + _707;
    float _711 = _710 + _709;
    float _712 = _702 * _507;
    float _713 = _699 * _506;
    float _714 = _705 * _508;
    float _715 = _712 + _713;
    float _716 = _715 + _714;
    float _717 = _705 * _505;
    float _718 = _702 * _504;
    float _719 = _699 * _503;
    float _720 = _718 + _719;
    float _721 = _720 + _717;
    if (!_448) {
      float _723 = saturate(_711);
      float _724 = saturate(_716);
      float _725 = saturate(_721);
      _727 = _725;
      _728 = _724;
      _729 = _723;
    } else {
      _727 = _721;
      _728 = _716;
      _729 = _711;
    }
  } else {
    _727 = _705;
    _728 = _702;
    _729 = _699;
  }
  if (!_445) {
    float _731 = _729 * _509;
    float _732 = _728 * _509;
    float _733 = _727 * _509;
    _735 = _733;
    _736 = _732;
    _737 = _731;
  } else {
    _735 = _727;
    _736 = _728;
    _737 = _729;
  }
  if (_317) {
    float _741 = cb1_018z * 9.999999747378752e-05f;
    float _742 = _741 * _737;
    float _743 = _741 * _736;
    float _744 = _741 * _735;
    float _746 = 5000.0f / cb1_018y;
    float _747 = _742 * _746;
    float _748 = _743 * _746;
    float _749 = _744 * _746;
    _751 = _747;
    _752 = _748;
    _753 = _749;
  } else {
    _751 = _737;
    _752 = _736;
    _753 = _735;
  }
  float _754 = _751 * 1.6047500371932983f;
  float _755 = mad(-0.5310800075531006f, _752, _754);
  float _756 = mad(-0.07366999983787537f, _753, _755);
  float _757 = _751 * -0.10208000242710114f;
  float _758 = mad(1.1081299781799316f, _752, _757);
  float _759 = mad(-0.006049999967217445f, _753, _758);
  float _760 = _751 * -0.0032599999103695154f;
  float _761 = mad(-0.07275000214576721f, _752, _760);
  float _762 = mad(1.0760200023651123f, _753, _761);
  if (_317) {
    // float _764 = max(_756, 0.0f);
    // float _765 = max(_759, 0.0f);
    // float _766 = max(_762, 0.0f);
    // bool _767 = !(_764 >= 0.0030399328097701073f);
    // if (!_767) {
    //   float _769 = abs(_764);
    //   float _770 = log2(_769);
    //   float _771 = _770 * 0.4166666567325592f;
    //   float _772 = exp2(_771);
    //   float _773 = _772 * 1.0549999475479126f;
    //   float _774 = _773 + -0.054999999701976776f;
    //   _778 = _774;
    // } else {
    //   float _776 = _764 * 12.923210144042969f;
    //   _778 = _776;
    // }
    // bool _779 = !(_765 >= 0.0030399328097701073f);
    // if (!_779) {
    //   float _781 = abs(_765);
    //   float _782 = log2(_781);
    //   float _783 = _782 * 0.4166666567325592f;
    //   float _784 = exp2(_783);
    //   float _785 = _784 * 1.0549999475479126f;
    //   float _786 = _785 + -0.054999999701976776f;
    //   _790 = _786;
    // } else {
    //   float _788 = _765 * 12.923210144042969f;
    //   _790 = _788;
    // }
    // bool _791 = !(_766 >= 0.0030399328097701073f);
    // if (!_791) {
    //   float _793 = abs(_766);
    //   float _794 = log2(_793);
    //   float _795 = _794 * 0.4166666567325592f;
    //   float _796 = exp2(_795);
    //   float _797 = _796 * 1.0549999475479126f;
    //   float _798 = _797 + -0.054999999701976776f;
    //   _871 = _778;
    //   _872 = _790;
    //   _873 = _798;
    // } else {
    //   float _800 = _766 * 12.923210144042969f;
    //   _871 = _778;
    //   _872 = _790;
    //   _873 = _800;
    // }
    _871 = renodx::color::srgb::EncodeSafe(_756);
    _872 = renodx::color::srgb::EncodeSafe(_759);
    _873 = renodx::color::srgb::EncodeSafe(_762);

  } else {
    float _802 = saturate(_756);
    float _803 = saturate(_759);
    float _804 = saturate(_762);
    bool _805 = ((uint)(cb1_018w) == -2);
    if (!_805) {
      bool _807 = !(_802 >= 0.0030399328097701073f);
      if (!_807) {
        float _809 = abs(_802);
        float _810 = log2(_809);
        float _811 = _810 * 0.4166666567325592f;
        float _812 = exp2(_811);
        float _813 = _812 * 1.0549999475479126f;
        float _814 = _813 + -0.054999999701976776f;
        _818 = _814;
      } else {
        float _816 = _802 * 12.923210144042969f;
        _818 = _816;
      }
      bool _819 = !(_803 >= 0.0030399328097701073f);
      if (!_819) {
        float _821 = abs(_803);
        float _822 = log2(_821);
        float _823 = _822 * 0.4166666567325592f;
        float _824 = exp2(_823);
        float _825 = _824 * 1.0549999475479126f;
        float _826 = _825 + -0.054999999701976776f;
        _830 = _826;
      } else {
        float _828 = _803 * 12.923210144042969f;
        _830 = _828;
      }
      bool _831 = !(_804 >= 0.0030399328097701073f);
      if (!_831) {
        float _833 = abs(_804);
        float _834 = log2(_833);
        float _835 = _834 * 0.4166666567325592f;
        float _836 = exp2(_835);
        float _837 = _836 * 1.0549999475479126f;
        float _838 = _837 + -0.054999999701976776f;
        _842 = _818;
        _843 = _830;
        _844 = _838;
      } else {
        float _840 = _804 * 12.923210144042969f;
        _842 = _818;
        _843 = _830;
        _844 = _840;
      }
    } else {
      _842 = _802;
      _843 = _803;
      _844 = _804;
    }
    float _849 = abs(_842);
    float _850 = abs(_843);
    float _851 = abs(_844);
    float _852 = log2(_849);
    float _853 = log2(_850);
    float _854 = log2(_851);
    float _855 = _852 * cb2_000z;
    float _856 = _853 * cb2_000z;
    float _857 = _854 * cb2_000z;
    float _858 = exp2(_855);
    float _859 = exp2(_856);
    float _860 = exp2(_857);
    float _861 = _858 * cb2_000y;
    float _862 = _859 * cb2_000y;
    float _863 = _860 * cb2_000y;
    float _864 = _861 + cb2_000x;
    float _865 = _862 + cb2_000x;
    float _866 = _863 + cb2_000x;
    float _867 = saturate(_864);
    float _868 = saturate(_865);
    float _869 = saturate(_866);
    _871 = _867;
    _872 = _868;
    _873 = _869;
  }
  float _877 = cb2_023x * TEXCOORD0_centroid.x;
  float _878 = cb2_023y * TEXCOORD0_centroid.y;
  float _881 = _877 + cb2_023z;
  float _882 = _878 + cb2_023w;
  float4 _885 = t10.SampleLevel(s0_space2, float2(_881, _882), 0.0f);
  float _887 = _885.x + -0.5f;
  float _888 = _887 * cb2_022x;
  float _889 = _888 + 0.5f;
  float _890 = _889 * 2.0f;
  float _891 = _890 * _871;
  float _892 = _890 * _872;
  float _893 = _890 * _873;
  float _897 = float((uint)(cb2_019z));
  float _898 = float((uint)(cb2_019w));
  float _899 = _897 + SV_Position.x;
  float _900 = _898 + SV_Position.y;
  uint _901 = uint(_899);
  uint _902 = uint(_900);
  uint _905 = cb2_019x + -1u;
  uint _906 = cb2_019y + -1u;
  int _907 = _901 & _905;
  int _908 = _902 & _906;
  float4 _909 = t3.Load(int3(_907, _908, 0));
  float _913 = _909.x * 2.0f;
  float _914 = _909.y * 2.0f;
  float _915 = _909.z * 2.0f;
  float _916 = _913 + -1.0f;
  float _917 = _914 + -1.0f;
  float _918 = _915 + -1.0f;
  float _919 = _916 * cb2_025w;
  float _920 = _917 * cb2_025w;
  float _921 = _918 * cb2_025w;
  float _922 = _919 + _891;
  float _923 = _920 + _892;
  float _924 = _921 + _893;
  float _925 = dot(float3(_922, _923, _924), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _922;
  SV_Target.y = _923;
  SV_Target.z = _924;
  SV_Target.w = _925;
  SV_Target_1.x = _925;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
