#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture3D<float2> t6 : register(t6);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _18 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _20 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _24 = max(_20.x, 0.0f);
  float _25 = max(_20.y, 0.0f);
  float _26 = max(_20.z, 0.0f);
  float _27 = min(_24, 65000.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float4 _30 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _35 = max(_30.x, 0.0f);
  float _36 = max(_30.y, 0.0f);
  float _37 = max(_30.z, 0.0f);
  float _38 = max(_30.w, 0.0f);
  float _39 = min(_35, 5000.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _45 = _18.x * cb0_028z;
  float _46 = _45 + cb0_028x;
  float _47 = cb2_027w / _46;
  float _48 = 1.0f - _47;
  float _49 = abs(_48);
  float _51 = cb2_027y * _49;
  float _53 = _51 - cb2_027z;
  float _54 = saturate(_53);
  float _55 = max(_54, _42);
  float _56 = saturate(_55);
  float4 _57 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _61 = _39 - _27;
  float _62 = _40 - _28;
  float _63 = _41 - _29;
  float _64 = _56 * _61;
  float _65 = _56 * _62;
  float _66 = _56 * _63;
  float _67 = _64 + _27;
  float _68 = _65 + _28;
  float _69 = _66 + _29;
  float _70 = dot(float3(_67, _68, _69), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _74 = t0[0].SExposureData_020;
  float _76 = t0[0].SExposureData_004;
  float _78 = cb2_018x * 0.5f;
  float _79 = _78 * cb2_018y;
  float _80 = _76.x - _79;
  float _81 = cb2_018y * cb2_018x;
  float _82 = 1.0f / _81;
  float _83 = _80 * _82;
  float _84 = _70 / _74.x;
  float _85 = _84 * 5464.01611328125f;
  float _86 = _85 + 9.99999993922529e-09f;
  float _87 = log2(_86);
  float _88 = _87 - _80;
  float _89 = _88 * _82;
  float _90 = saturate(_89);
  float2 _91 = t6.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _90), 0.0f);
  float _94 = max(_91.y, 1.0000000116860974e-07f);
  float _95 = _91.x / _94;
  float _96 = _95 + _83;
  float _97 = _96 / _82;
  float _98 = _97 - _76.x;
  float _99 = -0.0f - _98;
  float _101 = _99 - cb2_027x;
  float _102 = max(0.0f, _101);
  float _105 = cb2_026z * _102;
  float _106 = _98 - cb2_027x;
  float _107 = max(0.0f, _106);
  float _109 = cb2_026w * _107;
  bool _110 = (_98 < 0.0f);
  float _111 = select(_110, _105, _109);
  float _112 = exp2(_111);
  float _113 = _112 * _67;
  float _114 = _112 * _68;
  float _115 = _112 * _69;
  float _120 = cb2_024y * _57.x;
  float _121 = cb2_024z * _57.y;
  float _122 = cb2_024w * _57.z;
  float _123 = _120 + _113;
  float _124 = _121 + _114;
  float _125 = _122 + _115;
  float _130 = _123 * cb2_025x;
  float _131 = _124 * cb2_025y;
  float _132 = _125 * cb2_025z;
  float _133 = dot(float3(_130, _131, _132), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _134 = t0[0].SExposureData_012;
  float _136 = _133 * 5464.01611328125f;
  float _137 = _136 * _134.x;
  float _138 = _137 + 9.99999993922529e-09f;
  float _139 = log2(_138);
  float _140 = _139 + 16.929765701293945f;
  float _141 = _140 * 0.05734497308731079f;
  float _142 = saturate(_141);
  float _143 = _142 * _142;
  float _144 = _142 * 2.0f;
  float _145 = 3.0f - _144;
  float _146 = _143 * _145;
  float _147 = _131 * 0.8450999855995178f;
  float _148 = _132 * 0.14589999616146088f;
  float _149 = _147 + _148;
  float _150 = _149 * 2.4890189170837402f;
  float _151 = _149 * 0.3754962384700775f;
  float _152 = _149 * 2.811495304107666f;
  float _153 = _149 * 5.519708156585693f;
  float _154 = _133 - _150;
  float _155 = _146 * _154;
  float _156 = _155 + _150;
  float _157 = _146 * 0.5f;
  float _158 = _157 + 0.5f;
  float _159 = _158 * _154;
  float _160 = _159 + _150;
  float _161 = _130 - _151;
  float _162 = _131 - _152;
  float _163 = _132 - _153;
  float _164 = _158 * _161;
  float _165 = _158 * _162;
  float _166 = _158 * _163;
  float _167 = _164 + _151;
  float _168 = _165 + _152;
  float _169 = _166 + _153;
  float _170 = 1.0f / _160;
  float _171 = _156 * _170;
  float _172 = _171 * _167;
  float _173 = _171 * _168;
  float _174 = _171 * _169;
  float _178 = cb2_020x * TEXCOORD0_centroid.x;
  float _179 = cb2_020y * TEXCOORD0_centroid.y;
  float _182 = _178 + cb2_020z;
  float _183 = _179 + cb2_020w;
  float _186 = dot(float2(_182, _183), float2(_182, _183));
  float _187 = 1.0f - _186;
  float _188 = saturate(_187);
  float _189 = log2(_188);
  float _190 = _189 * cb2_021w;
  float _191 = exp2(_190);
  float _195 = _172 - cb2_021x;
  float _196 = _173 - cb2_021y;
  float _197 = _174 - cb2_021z;
  float _198 = _195 * _191;
  float _199 = _196 * _191;
  float _200 = _197 * _191;
  float _201 = _198 + cb2_021x;
  float _202 = _199 + cb2_021y;
  float _203 = _200 + cb2_021z;
  float _204 = t0[0].SExposureData_000;
  float _206 = max(_74.x, 0.0010000000474974513f);
  float _207 = 1.0f / _206;
  float _208 = _207 * _204.x;
  bool _211 = ((uint)(cb2_069y) == 0);
  float _217;
  float _218;
  float _219;
  float _273;
  float _274;
  float _275;
  float _350;
  float _351;
  float _352;
  float _502;
  float _539;
  float _540;
  float _541;
  float _570;
  float _571;
  float _572;
  float _653;
  float _654;
  float _655;
  float _661;
  float _662;
  float _663;
  float _677;
  float _678;
  float _679;
  float _704;
  float _716;
  float _744;
  float _756;
  float _768;
  float _769;
  float _770;
  float _797;
  float _798;
  float _799;
  if (!_211) {
    float _213 = _208 * _201;
    float _214 = _208 * _202;
    float _215 = _208 * _203;
    _217 = _213;
    _218 = _214;
    _219 = _215;
  } else {
    _217 = _201;
    _218 = _202;
    _219 = _203;
  }
  float _220 = _217 * 0.6130970120429993f;
  float _221 = mad(0.33952298760414124f, _218, _220);
  float _222 = mad(0.04737899824976921f, _219, _221);
  float _223 = _217 * 0.07019399851560593f;
  float _224 = mad(0.9163540005683899f, _218, _223);
  float _225 = mad(0.013451999984681606f, _219, _224);
  float _226 = _217 * 0.02061600051820278f;
  float _227 = mad(0.10956999659538269f, _218, _226);
  float _228 = mad(0.8698149919509888f, _219, _227);
  float _229 = log2(_222);
  float _230 = log2(_225);
  float _231 = log2(_228);
  float _232 = _229 * 0.04211956635117531f;
  float _233 = _230 * 0.04211956635117531f;
  float _234 = _231 * 0.04211956635117531f;
  float _235 = _232 + 0.6252607107162476f;
  float _236 = _233 + 0.6252607107162476f;
  float _237 = _234 + 0.6252607107162476f;
  float4 _238 = t5.SampleLevel(s2_space2, float3(_235, _236, _237), 0.0f);
  bool _244 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_244 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _248 = cb2_017x * _238.x;
    float _249 = cb2_017x * _238.y;
    float _250 = cb2_017x * _238.z;
    float _252 = _248 + cb2_017y;
    float _253 = _249 + cb2_017y;
    float _254 = _250 + cb2_017y;
    float _255 = exp2(_252);
    float _256 = exp2(_253);
    float _257 = exp2(_254);
    float _258 = _255 + 1.0f;
    float _259 = _256 + 1.0f;
    float _260 = _257 + 1.0f;
    float _261 = 1.0f / _258;
    float _262 = 1.0f / _259;
    float _263 = 1.0f / _260;
    float _265 = cb2_017z * _261;
    float _266 = cb2_017z * _262;
    float _267 = cb2_017z * _263;
    float _269 = _265 + cb2_017w;
    float _270 = _266 + cb2_017w;
    float _271 = _267 + cb2_017w;
    _273 = _269;
    _274 = _270;
    _275 = _271;
  } else {
    _273 = _238.x;
    _274 = _238.y;
    _275 = _238.z;
  }
  float _276 = _273 * 23.0f;
  float _277 = _276 + -14.473931312561035f;
  float _278 = exp2(_277);
  float _279 = _274 * 23.0f;
  float _280 = _279 + -14.473931312561035f;
  float _281 = exp2(_280);
  float _282 = _275 * 23.0f;
  float _283 = _282 + -14.473931312561035f;
  float _284 = exp2(_283);
  float _285 = dot(float3(_278, _281, _284), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _290 = dot(float3(_278, _281, _284), float3(_278, _281, _284));
  float _291 = rsqrt(_290);
  float _292 = _291 * _278;
  float _293 = _291 * _281;
  float _294 = _291 * _284;
  float _295 = cb2_001x - _292;
  float _296 = cb2_001y - _293;
  float _297 = cb2_001z - _294;
  float _298 = dot(float3(_295, _296, _297), float3(_295, _296, _297));
  float _301 = cb2_002z * _298;
  float _303 = _301 + cb2_002w;
  float _304 = saturate(_303);
  float _306 = cb2_002x * _304;
  float _307 = _285 - _278;
  float _308 = _285 - _281;
  float _309 = _285 - _284;
  float _310 = _306 * _307;
  float _311 = _306 * _308;
  float _312 = _306 * _309;
  float _313 = _310 + _278;
  float _314 = _311 + _281;
  float _315 = _312 + _284;
  float _317 = cb2_002y * _304;
  float _318 = 0.10000000149011612f - _313;
  float _319 = 0.10000000149011612f - _314;
  float _320 = 0.10000000149011612f - _315;
  float _321 = _318 * _317;
  float _322 = _319 * _317;
  float _323 = _320 * _317;
  float _324 = _321 + _313;
  float _325 = _322 + _314;
  float _326 = _323 + _315;
  float _327 = saturate(_324);
  float _328 = saturate(_325);
  float _329 = saturate(_326);
  float _335 = cb2_016x - _327;
  float _336 = cb2_016y - _328;
  float _337 = cb2_016z - _329;
  float _338 = _335 * cb2_016w;
  float _339 = _336 * cb2_016w;
  float _340 = _337 * cb2_016w;
  float _341 = _338 + _327;
  float _342 = _339 + _328;
  float _343 = _340 + _329;
  if (_244 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _346 = cb2_024x * _341;
    float _347 = cb2_024x * _342;
    float _348 = cb2_024x * _343;
    _350 = _346;
    _351 = _347;
    _352 = _348;
  } else {
    _350 = _341;
    _351 = _342;
    _352 = _343;
  }
  float _355 = _350 * 0.9708889722824097f;
  float _356 = mad(0.026962999254465103f, _351, _355);
  float _357 = mad(0.002148000057786703f, _352, _356);
  float _358 = _350 * 0.01088900025933981f;
  float _359 = mad(0.9869629740715027f, _351, _358);
  float _360 = mad(0.002148000057786703f, _352, _359);
  float _361 = mad(0.026962999254465103f, _351, _358);
  float _362 = mad(0.9621480107307434f, _352, _361);
  float _363 = max(_357, 0.0f);
  float _364 = max(_360, 0.0f);
  float _365 = max(_362, 0.0f);
  float _366 = min(_363, cb2_095y);
  float _367 = min(_364, cb2_095y);
  float _368 = min(_365, cb2_095y);
  bool _371 = ((uint)(cb2_095x) == 0);
  bool _374 = ((uint)(cb2_094w) == 0);
  bool _376 = ((uint)(cb2_094z) == 0);
  bool _378 = ((uint)(cb2_094y) != 0);
  bool _380 = ((uint)(cb2_094x) == 0);
  bool _382 = ((uint)(cb2_069z) != 0);
  float _429 = asfloat((uint)(cb2_075y));
  float _430 = asfloat((uint)(cb2_075z));
  float _431 = asfloat((uint)(cb2_075w));
  float _432 = asfloat((uint)(cb2_074z));
  float _433 = asfloat((uint)(cb2_074w));
  float _434 = asfloat((uint)(cb2_075x));
  float _435 = asfloat((uint)(cb2_073w));
  float _436 = asfloat((uint)(cb2_074x));
  float _437 = asfloat((uint)(cb2_074y));
  float _438 = asfloat((uint)(cb2_077x));
  float _439 = asfloat((uint)(cb2_077y));
  float _440 = asfloat((uint)(cb2_079x));
  float _441 = asfloat((uint)(cb2_079y));
  float _442 = asfloat((uint)(cb2_079z));
  float _443 = asfloat((uint)(cb2_078y));
  float _444 = asfloat((uint)(cb2_078z));
  float _445 = asfloat((uint)(cb2_078w));
  float _446 = asfloat((uint)(cb2_077z));
  float _447 = asfloat((uint)(cb2_077w));
  float _448 = asfloat((uint)(cb2_078x));
  float _449 = asfloat((uint)(cb2_072y));
  float _450 = asfloat((uint)(cb2_072z));
  float _451 = asfloat((uint)(cb2_072w));
  float _452 = asfloat((uint)(cb2_071x));
  float _453 = asfloat((uint)(cb2_071y));
  float _454 = asfloat((uint)(cb2_076x));
  float _455 = asfloat((uint)(cb2_070w));
  float _456 = asfloat((uint)(cb2_070x));
  float _457 = asfloat((uint)(cb2_070y));
  float _458 = asfloat((uint)(cb2_070z));
  float _459 = asfloat((uint)(cb2_073x));
  float _460 = asfloat((uint)(cb2_073y));
  float _461 = asfloat((uint)(cb2_073z));
  float _462 = asfloat((uint)(cb2_071z));
  float _463 = asfloat((uint)(cb2_071w));
  float _464 = asfloat((uint)(cb2_072x));
  float _465 = max(_367, _368);
  float _466 = max(_366, _465);
  float _467 = 1.0f / _466;
  float _468 = _467 * _366;
  float _469 = _467 * _367;
  float _470 = _467 * _368;
  float _471 = abs(_468);
  float _472 = log2(_471);
  float _473 = _472 * _456;
  float _474 = exp2(_473);
  float _475 = abs(_469);
  float _476 = log2(_475);
  float _477 = _476 * _457;
  float _478 = exp2(_477);
  float _479 = abs(_470);
  float _480 = log2(_479);
  float _481 = _480 * _458;
  float _482 = exp2(_481);
  if (_378) {
    float _485 = asfloat((uint)(cb2_076w));
    float _487 = asfloat((uint)(cb2_076z));
    float _489 = asfloat((uint)(cb2_076y));
    float _490 = _487 * _367;
    float _491 = _489 * _366;
    float _492 = _485 * _368;
    float _493 = _491 + _492;
    float _494 = _493 + _490;
    _502 = _494;
  } else {
    float _496 = _463 * _367;
    float _497 = _462 * _366;
    float _498 = _464 * _368;
    float _499 = _496 + _497;
    float _500 = _499 + _498;
    _502 = _500;
  }
  float _503 = abs(_502);
  float _504 = log2(_503);
  float _505 = _504 * _455;
  float _506 = exp2(_505);
  float _507 = log2(_506);
  float _508 = _507 * _454;
  float _509 = exp2(_508);
  float _510 = select(_382, _509, _506);
  float _511 = _510 * _452;
  float _512 = _511 + _453;
  float _513 = 1.0f / _512;
  float _514 = _513 * _506;
  if (_378) {
    if (!_380) {
      float _517 = _474 * _446;
      float _518 = _478 * _447;
      float _519 = _482 * _448;
      float _520 = _518 + _517;
      float _521 = _520 + _519;
      float _522 = _478 * _444;
      float _523 = _474 * _443;
      float _524 = _482 * _445;
      float _525 = _522 + _523;
      float _526 = _525 + _524;
      float _527 = _482 * _442;
      float _528 = _478 * _441;
      float _529 = _474 * _440;
      float _530 = _528 + _529;
      float _531 = _530 + _527;
      float _532 = max(_526, _531);
      float _533 = max(_521, _532);
      float _534 = 1.0f / _533;
      float _535 = _534 * _521;
      float _536 = _534 * _526;
      float _537 = _534 * _531;
      _539 = _535;
      _540 = _536;
      _541 = _537;
    } else {
      _539 = _474;
      _540 = _478;
      _541 = _482;
    }
    float _542 = _539 * _439;
    float _543 = exp2(_542);
    float _544 = _543 * _438;
    float _545 = saturate(_544);
    float _546 = _539 * _438;
    float _547 = _539 - _546;
    float _548 = saturate(_547);
    float _549 = max(_438, _548);
    float _550 = min(_549, _545);
    float _551 = _540 * _439;
    float _552 = exp2(_551);
    float _553 = _552 * _438;
    float _554 = saturate(_553);
    float _555 = _540 * _438;
    float _556 = _540 - _555;
    float _557 = saturate(_556);
    float _558 = max(_438, _557);
    float _559 = min(_558, _554);
    float _560 = _541 * _439;
    float _561 = exp2(_560);
    float _562 = _561 * _438;
    float _563 = saturate(_562);
    float _564 = _541 * _438;
    float _565 = _541 - _564;
    float _566 = saturate(_565);
    float _567 = max(_438, _566);
    float _568 = min(_567, _563);
    _570 = _550;
    _571 = _559;
    _572 = _568;
  } else {
    _570 = _474;
    _571 = _478;
    _572 = _482;
  }
  float _573 = _570 * _462;
  float _574 = _571 * _463;
  float _575 = _574 + _573;
  float _576 = _572 * _464;
  float _577 = _575 + _576;
  float _578 = 1.0f / _577;
  float _579 = _578 * _514;
  float _580 = saturate(_579);
  float _581 = _580 * _570;
  float _582 = saturate(_581);
  float _583 = _580 * _571;
  float _584 = saturate(_583);
  float _585 = _580 * _572;
  float _586 = saturate(_585);
  float _587 = _582 * _449;
  float _588 = _449 - _587;
  float _589 = _584 * _450;
  float _590 = _450 - _589;
  float _591 = _586 * _451;
  float _592 = _451 - _591;
  float _593 = _586 * _464;
  float _594 = _582 * _462;
  float _595 = _584 * _463;
  float _596 = _514 - _594;
  float _597 = _596 - _595;
  float _598 = _597 - _593;
  float _599 = saturate(_598);
  float _600 = _590 * _463;
  float _601 = _588 * _462;
  float _602 = _592 * _464;
  float _603 = _600 + _601;
  float _604 = _603 + _602;
  float _605 = 1.0f / _604;
  float _606 = _605 * _599;
  float _607 = _606 * _588;
  float _608 = _607 + _582;
  float _609 = saturate(_608);
  float _610 = _606 * _590;
  float _611 = _610 + _584;
  float _612 = saturate(_611);
  float _613 = _606 * _592;
  float _614 = _613 + _586;
  float _615 = saturate(_614);
  float _616 = _615 * _464;
  float _617 = _609 * _462;
  float _618 = _612 * _463;
  float _619 = _514 - _617;
  float _620 = _619 - _618;
  float _621 = _620 - _616;
  float _622 = saturate(_621);
  float _623 = _622 * _459;
  float _624 = _623 + _609;
  float _625 = saturate(_624);
  float _626 = _622 * _460;
  float _627 = _626 + _612;
  float _628 = saturate(_627);
  float _629 = _622 * _461;
  float _630 = _629 + _615;
  float _631 = saturate(_630);
  if (!_376) {
    float _633 = _625 * _435;
    float _634 = _628 * _436;
    float _635 = _631 * _437;
    float _636 = _634 + _633;
    float _637 = _636 + _635;
    float _638 = _628 * _433;
    float _639 = _625 * _432;
    float _640 = _631 * _434;
    float _641 = _638 + _639;
    float _642 = _641 + _640;
    float _643 = _631 * _431;
    float _644 = _628 * _430;
    float _645 = _625 * _429;
    float _646 = _644 + _645;
    float _647 = _646 + _643;
    if (!_374) {
      float _649 = saturate(_637);
      float _650 = saturate(_642);
      float _651 = saturate(_647);
      _653 = _651;
      _654 = _650;
      _655 = _649;
    } else {
      _653 = _647;
      _654 = _642;
      _655 = _637;
    }
  } else {
    _653 = _631;
    _654 = _628;
    _655 = _625;
  }
  if (!_371) {
    float _657 = _655 * _435;
    float _658 = _654 * _435;
    float _659 = _653 * _435;
    _661 = _659;
    _662 = _658;
    _663 = _657;
  } else {
    _661 = _653;
    _662 = _654;
    _663 = _655;
  }
  if (_244) {
    float _667 = cb1_018z * 9.999999747378752e-05f;
    float _668 = _667 * _663;
    float _669 = _667 * _662;
    float _670 = _667 * _661;
    float _672 = 5000.0f / cb1_018y;
    float _673 = _668 * _672;
    float _674 = _669 * _672;
    float _675 = _670 * _672;
    _677 = _673;
    _678 = _674;
    _679 = _675;
  } else {
    _677 = _663;
    _678 = _662;
    _679 = _661;
  }
  float _680 = _677 * 1.6047500371932983f;
  float _681 = mad(-0.5310800075531006f, _678, _680);
  float _682 = mad(-0.07366999983787537f, _679, _681);
  float _683 = _677 * -0.10208000242710114f;
  float _684 = mad(1.1081299781799316f, _678, _683);
  float _685 = mad(-0.006049999967217445f, _679, _684);
  float _686 = _677 * -0.0032599999103695154f;
  float _687 = mad(-0.07275000214576721f, _678, _686);
  float _688 = mad(1.0760200023651123f, _679, _687);
  if (_244) {
    // float _690 = max(_682, 0.0f);
    // float _691 = max(_685, 0.0f);
    // float _692 = max(_688, 0.0f);
    // bool _693 = !(_690 >= 0.0030399328097701073f);
    // if (!_693) {
    //   float _695 = abs(_690);
    //   float _696 = log2(_695);
    //   float _697 = _696 * 0.4166666567325592f;
    //   float _698 = exp2(_697);
    //   float _699 = _698 * 1.0549999475479126f;
    //   float _700 = _699 + -0.054999999701976776f;
    //   _704 = _700;
    // } else {
    //   float _702 = _690 * 12.923210144042969f;
    //   _704 = _702;
    // }
    // bool _705 = !(_691 >= 0.0030399328097701073f);
    // if (!_705) {
    //   float _707 = abs(_691);
    //   float _708 = log2(_707);
    //   float _709 = _708 * 0.4166666567325592f;
    //   float _710 = exp2(_709);
    //   float _711 = _710 * 1.0549999475479126f;
    //   float _712 = _711 + -0.054999999701976776f;
    //   _716 = _712;
    // } else {
    //   float _714 = _691 * 12.923210144042969f;
    //   _716 = _714;
    // }
    // bool _717 = !(_692 >= 0.0030399328097701073f);
    // if (!_717) {
    //   float _719 = abs(_692);
    //   float _720 = log2(_719);
    //   float _721 = _720 * 0.4166666567325592f;
    //   float _722 = exp2(_721);
    //   float _723 = _722 * 1.0549999475479126f;
    //   float _724 = _723 + -0.054999999701976776f;
    //   _797 = _704;
    //   _798 = _716;
    //   _799 = _724;
    // } else {
    //   float _726 = _692 * 12.923210144042969f;
    //   _797 = _704;
    //   _798 = _716;
    //   _799 = _726;
    // }
    _797 = renodx::color::srgb::EncodeSafe(_682);
    _798 = renodx::color::srgb::EncodeSafe(_685);
    _799 = renodx::color::srgb::EncodeSafe(_688);

  } else {
    float _728 = saturate(_682);
    float _729 = saturate(_685);
    float _730 = saturate(_688);
    bool _731 = ((uint)(cb1_018w) == -2);
    if (!_731) {
      bool _733 = !(_728 >= 0.0030399328097701073f);
      if (!_733) {
        float _735 = abs(_728);
        float _736 = log2(_735);
        float _737 = _736 * 0.4166666567325592f;
        float _738 = exp2(_737);
        float _739 = _738 * 1.0549999475479126f;
        float _740 = _739 + -0.054999999701976776f;
        _744 = _740;
      } else {
        float _742 = _728 * 12.923210144042969f;
        _744 = _742;
      }
      bool _745 = !(_729 >= 0.0030399328097701073f);
      if (!_745) {
        float _747 = abs(_729);
        float _748 = log2(_747);
        float _749 = _748 * 0.4166666567325592f;
        float _750 = exp2(_749);
        float _751 = _750 * 1.0549999475479126f;
        float _752 = _751 + -0.054999999701976776f;
        _756 = _752;
      } else {
        float _754 = _729 * 12.923210144042969f;
        _756 = _754;
      }
      bool _757 = !(_730 >= 0.0030399328097701073f);
      if (!_757) {
        float _759 = abs(_730);
        float _760 = log2(_759);
        float _761 = _760 * 0.4166666567325592f;
        float _762 = exp2(_761);
        float _763 = _762 * 1.0549999475479126f;
        float _764 = _763 + -0.054999999701976776f;
        _768 = _744;
        _769 = _756;
        _770 = _764;
      } else {
        float _766 = _730 * 12.923210144042969f;
        _768 = _744;
        _769 = _756;
        _770 = _766;
      }
    } else {
      _768 = _728;
      _769 = _729;
      _770 = _730;
    }
    float _775 = abs(_768);
    float _776 = abs(_769);
    float _777 = abs(_770);
    float _778 = log2(_775);
    float _779 = log2(_776);
    float _780 = log2(_777);
    float _781 = _778 * cb2_000z;
    float _782 = _779 * cb2_000z;
    float _783 = _780 * cb2_000z;
    float _784 = exp2(_781);
    float _785 = exp2(_782);
    float _786 = exp2(_783);
    float _787 = _784 * cb2_000y;
    float _788 = _785 * cb2_000y;
    float _789 = _786 * cb2_000y;
    float _790 = _787 + cb2_000x;
    float _791 = _788 + cb2_000x;
    float _792 = _789 + cb2_000x;
    float _793 = saturate(_790);
    float _794 = saturate(_791);
    float _795 = saturate(_792);
    _797 = _793;
    _798 = _794;
    _799 = _795;
  }
  float _800 = dot(float3(_797, _798, _799), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _797;
  SV_Target.y = _798;
  SV_Target.z = _799;
  SV_Target.w = _800;
  SV_Target_1.x = _800;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
