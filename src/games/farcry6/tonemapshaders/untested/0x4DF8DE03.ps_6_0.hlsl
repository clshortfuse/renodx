#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = max(_21.x, 0.0f);
  float _26 = max(_21.y, 0.0f);
  float _27 = max(_21.z, 0.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float _30 = min(_27, 65000.0f);
  float4 _31 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _36 = max(_31.x, 0.0f);
  float _37 = max(_31.y, 0.0f);
  float _38 = max(_31.z, 0.0f);
  float _39 = max(_31.w, 0.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _43 = min(_39, 5000.0f);
  float _46 = _19.x * cb0_028z;
  float _47 = _46 + cb0_028x;
  float _48 = cb2_027w / _47;
  float _49 = 1.0f - _48;
  float _50 = abs(_49);
  float _52 = cb2_027y * _50;
  float _54 = _52 - cb2_027z;
  float _55 = saturate(_54);
  float _56 = max(_55, _43);
  float _57 = saturate(_56);
  float _61 = cb2_013x * TEXCOORD0_centroid.x;
  float _62 = cb2_013y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_013z;
  float _66 = _62 + cb2_013w;
  float _69 = dot(float2(_65, _66), float2(_65, _66));
  float _70 = abs(_69);
  float _71 = log2(_70);
  float _72 = _71 * cb2_014x;
  float _73 = exp2(_72);
  float _74 = saturate(_73);
  float _78 = cb2_011x * TEXCOORD0_centroid.x;
  float _79 = cb2_011y * TEXCOORD0_centroid.y;
  float _82 = _78 + cb2_011z;
  float _83 = _79 + cb2_011w;
  float _84 = _82 * _74;
  float _85 = _83 * _74;
  float _86 = _84 + TEXCOORD0_centroid.x;
  float _87 = _85 + TEXCOORD0_centroid.y;
  float _91 = cb2_012x * TEXCOORD0_centroid.x;
  float _92 = cb2_012y * TEXCOORD0_centroid.y;
  float _95 = _91 + cb2_012z;
  float _96 = _92 + cb2_012w;
  float _97 = _95 * _74;
  float _98 = _96 * _74;
  float _99 = _97 + TEXCOORD0_centroid.x;
  float _100 = _98 + TEXCOORD0_centroid.y;
  float4 _101 = t1.SampleLevel(s2_space2, float2(_86, _87), 0.0f);
  float _105 = max(_101.x, 0.0f);
  float _106 = max(_101.y, 0.0f);
  float _107 = max(_101.z, 0.0f);
  float _108 = min(_105, 65000.0f);
  float _109 = min(_106, 65000.0f);
  float _110 = min(_107, 65000.0f);
  float4 _111 = t1.SampleLevel(s2_space2, float2(_99, _100), 0.0f);
  float _115 = max(_111.x, 0.0f);
  float _116 = max(_111.y, 0.0f);
  float _117 = max(_111.z, 0.0f);
  float _118 = min(_115, 65000.0f);
  float _119 = min(_116, 65000.0f);
  float _120 = min(_117, 65000.0f);
  float4 _121 = t3.SampleLevel(s2_space2, float2(_86, _87), 0.0f);
  float _125 = max(_121.x, 0.0f);
  float _126 = max(_121.y, 0.0f);
  float _127 = max(_121.z, 0.0f);
  float _128 = min(_125, 5000.0f);
  float _129 = min(_126, 5000.0f);
  float _130 = min(_127, 5000.0f);
  float4 _131 = t3.SampleLevel(s2_space2, float2(_99, _100), 0.0f);
  float _135 = max(_131.x, 0.0f);
  float _136 = max(_131.y, 0.0f);
  float _137 = max(_131.z, 0.0f);
  float _138 = min(_135, 5000.0f);
  float _139 = min(_136, 5000.0f);
  float _140 = min(_137, 5000.0f);
  float _145 = 1.0f - cb2_009x;
  float _146 = 1.0f - cb2_009y;
  float _147 = 1.0f - cb2_009z;
  float _152 = _145 - cb2_010x;
  float _153 = _146 - cb2_010y;
  float _154 = _147 - cb2_010z;
  float _155 = saturate(_152);
  float _156 = saturate(_153);
  float _157 = saturate(_154);
  float _158 = _155 * _28;
  float _159 = _156 * _29;
  float _160 = _157 * _30;
  float _161 = cb2_009x * _108;
  float _162 = cb2_009y * _109;
  float _163 = cb2_009z * _110;
  float _164 = _161 + _158;
  float _165 = _162 + _159;
  float _166 = _163 + _160;
  float _167 = cb2_010x * _118;
  float _168 = cb2_010y * _119;
  float _169 = cb2_010z * _120;
  float _170 = _164 + _167;
  float _171 = _165 + _168;
  float _172 = _166 + _169;
  float _173 = _155 * _40;
  float _174 = _156 * _41;
  float _175 = _157 * _42;
  float _176 = cb2_009x * _128;
  float _177 = cb2_009y * _129;
  float _178 = cb2_009z * _130;
  float _179 = cb2_010x * _138;
  float _180 = cb2_010y * _139;
  float _181 = cb2_010z * _140;
  float4 _182 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _186 = _173 - _170;
  float _187 = _186 + _176;
  float _188 = _187 + _179;
  float _189 = _174 - _171;
  float _190 = _189 + _177;
  float _191 = _190 + _180;
  float _192 = _175 - _172;
  float _193 = _192 + _178;
  float _194 = _193 + _181;
  float _195 = _188 * _57;
  float _196 = _191 * _57;
  float _197 = _194 * _57;
  float _198 = _195 + _170;
  float _199 = _196 + _171;
  float _200 = _197 + _172;
  float _201 = dot(float3(_198, _199, _200), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _205 = t0[0].SExposureData_020;
  float _207 = t0[0].SExposureData_004;
  float _209 = cb2_018x * 0.5f;
  float _210 = _209 * cb2_018y;
  float _211 = _207.x - _210;
  float _212 = cb2_018y * cb2_018x;
  float _213 = 1.0f / _212;
  float _214 = _211 * _213;
  float _215 = _201 / _205.x;
  float _216 = _215 * 5464.01611328125f;
  float _217 = _216 + 9.99999993922529e-09f;
  float _218 = log2(_217);
  float _219 = _218 - _211;
  float _220 = _219 * _213;
  float _221 = saturate(_220);
  float2 _222 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _221), 0.0f);
  float _225 = max(_222.y, 1.0000000116860974e-07f);
  float _226 = _222.x / _225;
  float _227 = _226 + _214;
  float _228 = _227 / _213;
  float _229 = _228 - _207.x;
  float _230 = -0.0f - _229;
  float _232 = _230 - cb2_027x;
  float _233 = max(0.0f, _232);
  float _236 = cb2_026z * _233;
  float _237 = _229 - cb2_027x;
  float _238 = max(0.0f, _237);
  float _240 = cb2_026w * _238;
  bool _241 = (_229 < 0.0f);
  float _242 = select(_241, _236, _240);
  float _243 = exp2(_242);
  float _244 = _243 * _198;
  float _245 = _243 * _199;
  float _246 = _243 * _200;
  float _251 = cb2_024y * _182.x;
  float _252 = cb2_024z * _182.y;
  float _253 = cb2_024w * _182.z;
  float _254 = _251 + _244;
  float _255 = _252 + _245;
  float _256 = _253 + _246;
  float _261 = _254 * cb2_025x;
  float _262 = _255 * cb2_025y;
  float _263 = _256 * cb2_025z;
  float _264 = dot(float3(_261, _262, _263), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _265 = t0[0].SExposureData_012;
  float _267 = _264 * 5464.01611328125f;
  float _268 = _267 * _265.x;
  float _269 = _268 + 9.99999993922529e-09f;
  float _270 = log2(_269);
  float _271 = _270 + 16.929765701293945f;
  float _272 = _271 * 0.05734497308731079f;
  float _273 = saturate(_272);
  float _274 = _273 * _273;
  float _275 = _273 * 2.0f;
  float _276 = 3.0f - _275;
  float _277 = _274 * _276;
  float _278 = _262 * 0.8450999855995178f;
  float _279 = _263 * 0.14589999616146088f;
  float _280 = _278 + _279;
  float _281 = _280 * 2.4890189170837402f;
  float _282 = _280 * 0.3754962384700775f;
  float _283 = _280 * 2.811495304107666f;
  float _284 = _280 * 5.519708156585693f;
  float _285 = _264 - _281;
  float _286 = _277 * _285;
  float _287 = _286 + _281;
  float _288 = _277 * 0.5f;
  float _289 = _288 + 0.5f;
  float _290 = _289 * _285;
  float _291 = _290 + _281;
  float _292 = _261 - _282;
  float _293 = _262 - _283;
  float _294 = _263 - _284;
  float _295 = _289 * _292;
  float _296 = _289 * _293;
  float _297 = _289 * _294;
  float _298 = _295 + _282;
  float _299 = _296 + _283;
  float _300 = _297 + _284;
  float _301 = 1.0f / _291;
  float _302 = _287 * _301;
  float _303 = _302 * _298;
  float _304 = _302 * _299;
  float _305 = _302 * _300;
  float _309 = cb2_020x * TEXCOORD0_centroid.x;
  float _310 = cb2_020y * TEXCOORD0_centroid.y;
  float _313 = _309 + cb2_020z;
  float _314 = _310 + cb2_020w;
  float _317 = dot(float2(_313, _314), float2(_313, _314));
  float _318 = 1.0f - _317;
  float _319 = saturate(_318);
  float _320 = log2(_319);
  float _321 = _320 * cb2_021w;
  float _322 = exp2(_321);
  float _326 = _303 - cb2_021x;
  float _327 = _304 - cb2_021y;
  float _328 = _305 - cb2_021z;
  float _329 = _326 * _322;
  float _330 = _327 * _322;
  float _331 = _328 * _322;
  float _332 = _329 + cb2_021x;
  float _333 = _330 + cb2_021y;
  float _334 = _331 + cb2_021z;
  float _335 = t0[0].SExposureData_000;
  float _337 = max(_205.x, 0.0010000000474974513f);
  float _338 = 1.0f / _337;
  float _339 = _338 * _335.x;
  bool _342 = ((uint)(cb2_069y) == 0);
  float _348;
  float _349;
  float _350;
  float _404;
  float _405;
  float _406;
  float _451;
  float _452;
  float _453;
  float _498;
  float _499;
  float _500;
  float _501;
  float _548;
  float _549;
  float _550;
  float _575;
  float _576;
  float _577;
  float _727;
  float _764;
  float _765;
  float _766;
  float _795;
  float _796;
  float _797;
  float _878;
  float _879;
  float _880;
  float _886;
  float _887;
  float _888;
  float _902;
  float _903;
  float _904;
  float _929;
  float _941;
  float _969;
  float _981;
  float _993;
  float _994;
  float _995;
  float _1022;
  float _1023;
  float _1024;
  if (!_342) {
    float _344 = _339 * _332;
    float _345 = _339 * _333;
    float _346 = _339 * _334;
    _348 = _344;
    _349 = _345;
    _350 = _346;
  } else {
    _348 = _332;
    _349 = _333;
    _350 = _334;
  }
  float _351 = _348 * 0.6130970120429993f;
  float _352 = mad(0.33952298760414124f, _349, _351);
  float _353 = mad(0.04737899824976921f, _350, _352);
  float _354 = _348 * 0.07019399851560593f;
  float _355 = mad(0.9163540005683899f, _349, _354);
  float _356 = mad(0.013451999984681606f, _350, _355);
  float _357 = _348 * 0.02061600051820278f;
  float _358 = mad(0.10956999659538269f, _349, _357);
  float _359 = mad(0.8698149919509888f, _350, _358);
  float _360 = log2(_353);
  float _361 = log2(_356);
  float _362 = log2(_359);
  float _363 = _360 * 0.04211956635117531f;
  float _364 = _361 * 0.04211956635117531f;
  float _365 = _362 * 0.04211956635117531f;
  float _366 = _363 + 0.6252607107162476f;
  float _367 = _364 + 0.6252607107162476f;
  float _368 = _365 + 0.6252607107162476f;
  float4 _369 = t5.SampleLevel(s2_space2, float3(_366, _367, _368), 0.0f);
  bool _375 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_375 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _379 = cb2_017x * _369.x;
    float _380 = cb2_017x * _369.y;
    float _381 = cb2_017x * _369.z;
    float _383 = _379 + cb2_017y;
    float _384 = _380 + cb2_017y;
    float _385 = _381 + cb2_017y;
    float _386 = exp2(_383);
    float _387 = exp2(_384);
    float _388 = exp2(_385);
    float _389 = _386 + 1.0f;
    float _390 = _387 + 1.0f;
    float _391 = _388 + 1.0f;
    float _392 = 1.0f / _389;
    float _393 = 1.0f / _390;
    float _394 = 1.0f / _391;
    float _396 = cb2_017z * _392;
    float _397 = cb2_017z * _393;
    float _398 = cb2_017z * _394;
    float _400 = _396 + cb2_017w;
    float _401 = _397 + cb2_017w;
    float _402 = _398 + cb2_017w;
    _404 = _400;
    _405 = _401;
    _406 = _402;
  } else {
    _404 = _369.x;
    _405 = _369.y;
    _406 = _369.z;
  }
  float _407 = _404 * 23.0f;
  float _408 = _407 + -14.473931312561035f;
  float _409 = exp2(_408);
  float _410 = _405 * 23.0f;
  float _411 = _410 + -14.473931312561035f;
  float _412 = exp2(_411);
  float _413 = _406 * 23.0f;
  float _414 = _413 + -14.473931312561035f;
  float _415 = exp2(_414);
  float _419 = cb2_004x * TEXCOORD0_centroid.x;
  float _420 = cb2_004y * TEXCOORD0_centroid.y;
  float _423 = _419 + cb2_004z;
  float _424 = _420 + cb2_004w;
  float4 _430 = t6.Sample(s2_space2, float2(_423, _424));
  float _435 = _430.x * cb2_003x;
  float _436 = _430.y * cb2_003y;
  float _437 = _430.z * cb2_003z;
  float _438 = _430.w * cb2_003w;
  float _441 = _438 + cb2_026y;
  float _442 = saturate(_441);
  bool _445 = ((uint)(cb2_069y) == 0);
  if (!_445) {
    float _447 = _435 * _339;
    float _448 = _436 * _339;
    float _449 = _437 * _339;
    _451 = _447;
    _452 = _448;
    _453 = _449;
  } else {
    _451 = _435;
    _452 = _436;
    _453 = _437;
  }
  bool _456 = ((uint)(cb2_028x) == 2);
  bool _457 = ((uint)(cb2_028x) == 3);
  int _458 = (uint)(cb2_028x) & -2;
  bool _459 = (_458 == 2);
  bool _460 = ((uint)(cb2_028x) == 6);
  bool _461 = _459 || _460;
  if (_461) {
    float _463 = _451 * _442;
    float _464 = _452 * _442;
    float _465 = _453 * _442;
    float _466 = _442 * _442;
    _498 = _463;
    _499 = _464;
    _500 = _465;
    _501 = _466;
  } else {
    bool _468 = ((uint)(cb2_028x) == 4);
    if (_468) {
      float _470 = _451 + -1.0f;
      float _471 = _452 + -1.0f;
      float _472 = _453 + -1.0f;
      float _473 = _442 + -1.0f;
      float _474 = _470 * _442;
      float _475 = _471 * _442;
      float _476 = _472 * _442;
      float _477 = _473 * _442;
      float _478 = _474 + 1.0f;
      float _479 = _475 + 1.0f;
      float _480 = _476 + 1.0f;
      float _481 = _477 + 1.0f;
      _498 = _478;
      _499 = _479;
      _500 = _480;
      _501 = _481;
    } else {
      bool _483 = ((uint)(cb2_028x) == 5);
      if (_483) {
        float _485 = _451 + -0.5f;
        float _486 = _452 + -0.5f;
        float _487 = _453 + -0.5f;
        float _488 = _442 + -0.5f;
        float _489 = _485 * _442;
        float _490 = _486 * _442;
        float _491 = _487 * _442;
        float _492 = _488 * _442;
        float _493 = _489 + 0.5f;
        float _494 = _490 + 0.5f;
        float _495 = _491 + 0.5f;
        float _496 = _492 + 0.5f;
        _498 = _493;
        _499 = _494;
        _500 = _495;
        _501 = _496;
      } else {
        _498 = _451;
        _499 = _452;
        _500 = _453;
        _501 = _442;
      }
    }
  }
  if (_456) {
    float _503 = _498 + _409;
    float _504 = _499 + _412;
    float _505 = _500 + _415;
    _548 = _503;
    _549 = _504;
    _550 = _505;
  } else {
    if (_457) {
      float _508 = 1.0f - _498;
      float _509 = 1.0f - _499;
      float _510 = 1.0f - _500;
      float _511 = _508 * _409;
      float _512 = _509 * _412;
      float _513 = _510 * _415;
      float _514 = _511 + _498;
      float _515 = _512 + _499;
      float _516 = _513 + _500;
      _548 = _514;
      _549 = _515;
      _550 = _516;
    } else {
      bool _518 = ((uint)(cb2_028x) == 4);
      if (_518) {
        float _520 = _498 * _409;
        float _521 = _499 * _412;
        float _522 = _500 * _415;
        _548 = _520;
        _549 = _521;
        _550 = _522;
      } else {
        bool _524 = ((uint)(cb2_028x) == 5);
        if (_524) {
          float _526 = _409 * 2.0f;
          float _527 = _526 * _498;
          float _528 = _412 * 2.0f;
          float _529 = _528 * _499;
          float _530 = _415 * 2.0f;
          float _531 = _530 * _500;
          _548 = _527;
          _549 = _529;
          _550 = _531;
        } else {
          if (_460) {
            float _534 = _409 - _498;
            float _535 = _412 - _499;
            float _536 = _415 - _500;
            _548 = _534;
            _549 = _535;
            _550 = _536;
          } else {
            float _538 = _498 - _409;
            float _539 = _499 - _412;
            float _540 = _500 - _415;
            float _541 = _501 * _538;
            float _542 = _501 * _539;
            float _543 = _501 * _540;
            float _544 = _541 + _409;
            float _545 = _542 + _412;
            float _546 = _543 + _415;
            _548 = _544;
            _549 = _545;
            _550 = _546;
          }
        }
      }
    }
  }
  float _556 = cb2_016x - _548;
  float _557 = cb2_016y - _549;
  float _558 = cb2_016z - _550;
  float _559 = _556 * cb2_016w;
  float _560 = _557 * cb2_016w;
  float _561 = _558 * cb2_016w;
  float _562 = _559 + _548;
  float _563 = _560 + _549;
  float _564 = _561 + _550;
  bool _567 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_567 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _571 = cb2_024x * _562;
    float _572 = cb2_024x * _563;
    float _573 = cb2_024x * _564;
    _575 = _571;
    _576 = _572;
    _577 = _573;
  } else {
    _575 = _562;
    _576 = _563;
    _577 = _564;
  }
  float _580 = _575 * 0.9708889722824097f;
  float _581 = mad(0.026962999254465103f, _576, _580);
  float _582 = mad(0.002148000057786703f, _577, _581);
  float _583 = _575 * 0.01088900025933981f;
  float _584 = mad(0.9869629740715027f, _576, _583);
  float _585 = mad(0.002148000057786703f, _577, _584);
  float _586 = mad(0.026962999254465103f, _576, _583);
  float _587 = mad(0.9621480107307434f, _577, _586);
  float _588 = max(_582, 0.0f);
  float _589 = max(_585, 0.0f);
  float _590 = max(_587, 0.0f);
  float _591 = min(_588, cb2_095y);
  float _592 = min(_589, cb2_095y);
  float _593 = min(_590, cb2_095y);
  bool _596 = ((uint)(cb2_095x) == 0);
  bool _599 = ((uint)(cb2_094w) == 0);
  bool _601 = ((uint)(cb2_094z) == 0);
  bool _603 = ((uint)(cb2_094y) != 0);
  bool _605 = ((uint)(cb2_094x) == 0);
  bool _607 = ((uint)(cb2_069z) != 0);
  float _654 = asfloat((uint)(cb2_075y));
  float _655 = asfloat((uint)(cb2_075z));
  float _656 = asfloat((uint)(cb2_075w));
  float _657 = asfloat((uint)(cb2_074z));
  float _658 = asfloat((uint)(cb2_074w));
  float _659 = asfloat((uint)(cb2_075x));
  float _660 = asfloat((uint)(cb2_073w));
  float _661 = asfloat((uint)(cb2_074x));
  float _662 = asfloat((uint)(cb2_074y));
  float _663 = asfloat((uint)(cb2_077x));
  float _664 = asfloat((uint)(cb2_077y));
  float _665 = asfloat((uint)(cb2_079x));
  float _666 = asfloat((uint)(cb2_079y));
  float _667 = asfloat((uint)(cb2_079z));
  float _668 = asfloat((uint)(cb2_078y));
  float _669 = asfloat((uint)(cb2_078z));
  float _670 = asfloat((uint)(cb2_078w));
  float _671 = asfloat((uint)(cb2_077z));
  float _672 = asfloat((uint)(cb2_077w));
  float _673 = asfloat((uint)(cb2_078x));
  float _674 = asfloat((uint)(cb2_072y));
  float _675 = asfloat((uint)(cb2_072z));
  float _676 = asfloat((uint)(cb2_072w));
  float _677 = asfloat((uint)(cb2_071x));
  float _678 = asfloat((uint)(cb2_071y));
  float _679 = asfloat((uint)(cb2_076x));
  float _680 = asfloat((uint)(cb2_070w));
  float _681 = asfloat((uint)(cb2_070x));
  float _682 = asfloat((uint)(cb2_070y));
  float _683 = asfloat((uint)(cb2_070z));
  float _684 = asfloat((uint)(cb2_073x));
  float _685 = asfloat((uint)(cb2_073y));
  float _686 = asfloat((uint)(cb2_073z));
  float _687 = asfloat((uint)(cb2_071z));
  float _688 = asfloat((uint)(cb2_071w));
  float _689 = asfloat((uint)(cb2_072x));
  float _690 = max(_592, _593);
  float _691 = max(_591, _690);
  float _692 = 1.0f / _691;
  float _693 = _692 * _591;
  float _694 = _692 * _592;
  float _695 = _692 * _593;
  float _696 = abs(_693);
  float _697 = log2(_696);
  float _698 = _697 * _681;
  float _699 = exp2(_698);
  float _700 = abs(_694);
  float _701 = log2(_700);
  float _702 = _701 * _682;
  float _703 = exp2(_702);
  float _704 = abs(_695);
  float _705 = log2(_704);
  float _706 = _705 * _683;
  float _707 = exp2(_706);
  if (_603) {
    float _710 = asfloat((uint)(cb2_076w));
    float _712 = asfloat((uint)(cb2_076z));
    float _714 = asfloat((uint)(cb2_076y));
    float _715 = _712 * _592;
    float _716 = _714 * _591;
    float _717 = _710 * _593;
    float _718 = _716 + _717;
    float _719 = _718 + _715;
    _727 = _719;
  } else {
    float _721 = _688 * _592;
    float _722 = _687 * _591;
    float _723 = _689 * _593;
    float _724 = _721 + _722;
    float _725 = _724 + _723;
    _727 = _725;
  }
  float _728 = abs(_727);
  float _729 = log2(_728);
  float _730 = _729 * _680;
  float _731 = exp2(_730);
  float _732 = log2(_731);
  float _733 = _732 * _679;
  float _734 = exp2(_733);
  float _735 = select(_607, _734, _731);
  float _736 = _735 * _677;
  float _737 = _736 + _678;
  float _738 = 1.0f / _737;
  float _739 = _738 * _731;
  if (_603) {
    if (!_605) {
      float _742 = _699 * _671;
      float _743 = _703 * _672;
      float _744 = _707 * _673;
      float _745 = _743 + _742;
      float _746 = _745 + _744;
      float _747 = _703 * _669;
      float _748 = _699 * _668;
      float _749 = _707 * _670;
      float _750 = _747 + _748;
      float _751 = _750 + _749;
      float _752 = _707 * _667;
      float _753 = _703 * _666;
      float _754 = _699 * _665;
      float _755 = _753 + _754;
      float _756 = _755 + _752;
      float _757 = max(_751, _756);
      float _758 = max(_746, _757);
      float _759 = 1.0f / _758;
      float _760 = _759 * _746;
      float _761 = _759 * _751;
      float _762 = _759 * _756;
      _764 = _760;
      _765 = _761;
      _766 = _762;
    } else {
      _764 = _699;
      _765 = _703;
      _766 = _707;
    }
    float _767 = _764 * _664;
    float _768 = exp2(_767);
    float _769 = _768 * _663;
    float _770 = saturate(_769);
    float _771 = _764 * _663;
    float _772 = _764 - _771;
    float _773 = saturate(_772);
    float _774 = max(_663, _773);
    float _775 = min(_774, _770);
    float _776 = _765 * _664;
    float _777 = exp2(_776);
    float _778 = _777 * _663;
    float _779 = saturate(_778);
    float _780 = _765 * _663;
    float _781 = _765 - _780;
    float _782 = saturate(_781);
    float _783 = max(_663, _782);
    float _784 = min(_783, _779);
    float _785 = _766 * _664;
    float _786 = exp2(_785);
    float _787 = _786 * _663;
    float _788 = saturate(_787);
    float _789 = _766 * _663;
    float _790 = _766 - _789;
    float _791 = saturate(_790);
    float _792 = max(_663, _791);
    float _793 = min(_792, _788);
    _795 = _775;
    _796 = _784;
    _797 = _793;
  } else {
    _795 = _699;
    _796 = _703;
    _797 = _707;
  }
  float _798 = _795 * _687;
  float _799 = _796 * _688;
  float _800 = _799 + _798;
  float _801 = _797 * _689;
  float _802 = _800 + _801;
  float _803 = 1.0f / _802;
  float _804 = _803 * _739;
  float _805 = saturate(_804);
  float _806 = _805 * _795;
  float _807 = saturate(_806);
  float _808 = _805 * _796;
  float _809 = saturate(_808);
  float _810 = _805 * _797;
  float _811 = saturate(_810);
  float _812 = _807 * _674;
  float _813 = _674 - _812;
  float _814 = _809 * _675;
  float _815 = _675 - _814;
  float _816 = _811 * _676;
  float _817 = _676 - _816;
  float _818 = _811 * _689;
  float _819 = _807 * _687;
  float _820 = _809 * _688;
  float _821 = _739 - _819;
  float _822 = _821 - _820;
  float _823 = _822 - _818;
  float _824 = saturate(_823);
  float _825 = _815 * _688;
  float _826 = _813 * _687;
  float _827 = _817 * _689;
  float _828 = _825 + _826;
  float _829 = _828 + _827;
  float _830 = 1.0f / _829;
  float _831 = _830 * _824;
  float _832 = _831 * _813;
  float _833 = _832 + _807;
  float _834 = saturate(_833);
  float _835 = _831 * _815;
  float _836 = _835 + _809;
  float _837 = saturate(_836);
  float _838 = _831 * _817;
  float _839 = _838 + _811;
  float _840 = saturate(_839);
  float _841 = _840 * _689;
  float _842 = _834 * _687;
  float _843 = _837 * _688;
  float _844 = _739 - _842;
  float _845 = _844 - _843;
  float _846 = _845 - _841;
  float _847 = saturate(_846);
  float _848 = _847 * _684;
  float _849 = _848 + _834;
  float _850 = saturate(_849);
  float _851 = _847 * _685;
  float _852 = _851 + _837;
  float _853 = saturate(_852);
  float _854 = _847 * _686;
  float _855 = _854 + _840;
  float _856 = saturate(_855);
  if (!_601) {
    float _858 = _850 * _660;
    float _859 = _853 * _661;
    float _860 = _856 * _662;
    float _861 = _859 + _858;
    float _862 = _861 + _860;
    float _863 = _853 * _658;
    float _864 = _850 * _657;
    float _865 = _856 * _659;
    float _866 = _863 + _864;
    float _867 = _866 + _865;
    float _868 = _856 * _656;
    float _869 = _853 * _655;
    float _870 = _850 * _654;
    float _871 = _869 + _870;
    float _872 = _871 + _868;
    if (!_599) {
      float _874 = saturate(_862);
      float _875 = saturate(_867);
      float _876 = saturate(_872);
      _878 = _876;
      _879 = _875;
      _880 = _874;
    } else {
      _878 = _872;
      _879 = _867;
      _880 = _862;
    }
  } else {
    _878 = _856;
    _879 = _853;
    _880 = _850;
  }
  if (!_596) {
    float _882 = _880 * _660;
    float _883 = _879 * _660;
    float _884 = _878 * _660;
    _886 = _884;
    _887 = _883;
    _888 = _882;
  } else {
    _886 = _878;
    _887 = _879;
    _888 = _880;
  }
  if (_567) {
    float _892 = cb1_018z * 9.999999747378752e-05f;
    float _893 = _892 * _888;
    float _894 = _892 * _887;
    float _895 = _892 * _886;
    float _897 = 5000.0f / cb1_018y;
    float _898 = _893 * _897;
    float _899 = _894 * _897;
    float _900 = _895 * _897;
    _902 = _898;
    _903 = _899;
    _904 = _900;
  } else {
    _902 = _888;
    _903 = _887;
    _904 = _886;
  }
  float _905 = _902 * 1.6047500371932983f;
  float _906 = mad(-0.5310800075531006f, _903, _905);
  float _907 = mad(-0.07366999983787537f, _904, _906);
  float _908 = _902 * -0.10208000242710114f;
  float _909 = mad(1.1081299781799316f, _903, _908);
  float _910 = mad(-0.006049999967217445f, _904, _909);
  float _911 = _902 * -0.0032599999103695154f;
  float _912 = mad(-0.07275000214576721f, _903, _911);
  float _913 = mad(1.0760200023651123f, _904, _912);
  if (_567) {
    // float _915 = max(_907, 0.0f);
    // float _916 = max(_910, 0.0f);
    // float _917 = max(_913, 0.0f);
    // bool _918 = !(_915 >= 0.0030399328097701073f);
    // if (!_918) {
    //   float _920 = abs(_915);
    //   float _921 = log2(_920);
    //   float _922 = _921 * 0.4166666567325592f;
    //   float _923 = exp2(_922);
    //   float _924 = _923 * 1.0549999475479126f;
    //   float _925 = _924 + -0.054999999701976776f;
    //   _929 = _925;
    // } else {
    //   float _927 = _915 * 12.923210144042969f;
    //   _929 = _927;
    // }
    // bool _930 = !(_916 >= 0.0030399328097701073f);
    // if (!_930) {
    //   float _932 = abs(_916);
    //   float _933 = log2(_932);
    //   float _934 = _933 * 0.4166666567325592f;
    //   float _935 = exp2(_934);
    //   float _936 = _935 * 1.0549999475479126f;
    //   float _937 = _936 + -0.054999999701976776f;
    //   _941 = _937;
    // } else {
    //   float _939 = _916 * 12.923210144042969f;
    //   _941 = _939;
    // }
    // bool _942 = !(_917 >= 0.0030399328097701073f);
    // if (!_942) {
    //   float _944 = abs(_917);
    //   float _945 = log2(_944);
    //   float _946 = _945 * 0.4166666567325592f;
    //   float _947 = exp2(_946);
    //   float _948 = _947 * 1.0549999475479126f;
    //   float _949 = _948 + -0.054999999701976776f;
    //   _1022 = _929;
    //   _1023 = _941;
    //   _1024 = _949;
    // } else {
    //   float _951 = _917 * 12.923210144042969f;
    //   _1022 = _929;
    //   _1023 = _941;
    //   _1024 = _951;
    // }
    _1022 = renodx::color::srgb::EncodeSafe(_907);
    _1023 = renodx::color::srgb::EncodeSafe(_910);
    _1024 = renodx::color::srgb::EncodeSafe(_913);

  } else {
    float _953 = saturate(_907);
    float _954 = saturate(_910);
    float _955 = saturate(_913);
    bool _956 = ((uint)(cb1_018w) == -2);
    if (!_956) {
      bool _958 = !(_953 >= 0.0030399328097701073f);
      if (!_958) {
        float _960 = abs(_953);
        float _961 = log2(_960);
        float _962 = _961 * 0.4166666567325592f;
        float _963 = exp2(_962);
        float _964 = _963 * 1.0549999475479126f;
        float _965 = _964 + -0.054999999701976776f;
        _969 = _965;
      } else {
        float _967 = _953 * 12.923210144042969f;
        _969 = _967;
      }
      bool _970 = !(_954 >= 0.0030399328097701073f);
      if (!_970) {
        float _972 = abs(_954);
        float _973 = log2(_972);
        float _974 = _973 * 0.4166666567325592f;
        float _975 = exp2(_974);
        float _976 = _975 * 1.0549999475479126f;
        float _977 = _976 + -0.054999999701976776f;
        _981 = _977;
      } else {
        float _979 = _954 * 12.923210144042969f;
        _981 = _979;
      }
      bool _982 = !(_955 >= 0.0030399328097701073f);
      if (!_982) {
        float _984 = abs(_955);
        float _985 = log2(_984);
        float _986 = _985 * 0.4166666567325592f;
        float _987 = exp2(_986);
        float _988 = _987 * 1.0549999475479126f;
        float _989 = _988 + -0.054999999701976776f;
        _993 = _969;
        _994 = _981;
        _995 = _989;
      } else {
        float _991 = _955 * 12.923210144042969f;
        _993 = _969;
        _994 = _981;
        _995 = _991;
      }
    } else {
      _993 = _953;
      _994 = _954;
      _995 = _955;
    }
    float _1000 = abs(_993);
    float _1001 = abs(_994);
    float _1002 = abs(_995);
    float _1003 = log2(_1000);
    float _1004 = log2(_1001);
    float _1005 = log2(_1002);
    float _1006 = _1003 * cb2_000z;
    float _1007 = _1004 * cb2_000z;
    float _1008 = _1005 * cb2_000z;
    float _1009 = exp2(_1006);
    float _1010 = exp2(_1007);
    float _1011 = exp2(_1008);
    float _1012 = _1009 * cb2_000y;
    float _1013 = _1010 * cb2_000y;
    float _1014 = _1011 * cb2_000y;
    float _1015 = _1012 + cb2_000x;
    float _1016 = _1013 + cb2_000x;
    float _1017 = _1014 + cb2_000x;
    float _1018 = saturate(_1015);
    float _1019 = saturate(_1016);
    float _1020 = saturate(_1017);
    _1022 = _1018;
    _1023 = _1019;
    _1024 = _1020;
  }
  float _1025 = dot(float3(_1022, _1023, _1024), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1022;
  SV_Target.y = _1023;
  SV_Target.z = _1024;
  SV_Target.w = _1025;
  SV_Target_1.x = _1025;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
