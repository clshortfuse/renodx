#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = _21.x * 6.283199787139893f;
  float _26 = cos(_25);
  float _27 = sin(_25);
  float _28 = _26 * _21.z;
  float _29 = _27 * _21.z;
  float _30 = _28 + TEXCOORD0_centroid.x;
  float _31 = _29 + TEXCOORD0_centroid.y;
  float _32 = _30 * 10.0f;
  float _33 = 10.0f - _32;
  float _34 = min(_32, _33);
  float _35 = saturate(_34);
  float _36 = _35 * _28;
  float _37 = _31 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _29;
  float _42 = _36 + TEXCOORD0_centroid.x;
  float _43 = _41 + TEXCOORD0_centroid.y;
  float4 _44 = t6.SampleLevel(s2_space2, float2(_42, _43), 0.0f);
  float _46 = _44.w * _36;
  float _47 = _44.w * _41;
  float _48 = 1.0f - _21.y;
  float _49 = saturate(_48);
  float _50 = _46 * _49;
  float _51 = _47 * _49;
  float _52 = _50 + TEXCOORD0_centroid.x;
  float _53 = _51 + TEXCOORD0_centroid.y;
  float4 _54 = t6.SampleLevel(s2_space2, float2(_52, _53), 0.0f);
  bool _56 = (_54.y > 0.0f);
  float _57 = select(_56, TEXCOORD0_centroid.x, _52);
  float _58 = select(_56, TEXCOORD0_centroid.y, _53);
  float4 _59 = t1.SampleLevel(s4_space2, float2(_57, _58), 0.0f);
  float _63 = max(_59.x, 0.0f);
  float _64 = max(_59.y, 0.0f);
  float _65 = max(_59.z, 0.0f);
  float _66 = min(_63, 65000.0f);
  float _67 = min(_64, 65000.0f);
  float _68 = min(_65, 65000.0f);
  float4 _69 = t3.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  float _74 = max(_69.x, 0.0f);
  float _75 = max(_69.y, 0.0f);
  float _76 = max(_69.z, 0.0f);
  float _77 = max(_69.w, 0.0f);
  float _78 = min(_74, 5000.0f);
  float _79 = min(_75, 5000.0f);
  float _80 = min(_76, 5000.0f);
  float _81 = min(_77, 5000.0f);
  float _84 = _19.x * cb0_028z;
  float _85 = _84 + cb0_028x;
  float _86 = cb2_027w / _85;
  float _87 = 1.0f - _86;
  float _88 = abs(_87);
  float _90 = cb2_027y * _88;
  float _92 = _90 - cb2_027z;
  float _93 = saturate(_92);
  float _94 = max(_93, _81);
  float _95 = saturate(_94);
  float4 _96 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _100 = _78 - _66;
  float _101 = _79 - _67;
  float _102 = _80 - _68;
  float _103 = _95 * _100;
  float _104 = _95 * _101;
  float _105 = _95 * _102;
  float _106 = _103 + _66;
  float _107 = _104 + _67;
  float _108 = _105 + _68;
  float _109 = dot(float3(_106, _107, _108), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _113 = t0[0].SExposureData_020;
  float _115 = t0[0].SExposureData_004;
  float _117 = cb2_018x * 0.5f;
  float _118 = _117 * cb2_018y;
  float _119 = _115.x - _118;
  float _120 = cb2_018y * cb2_018x;
  float _121 = 1.0f / _120;
  float _122 = _119 * _121;
  float _123 = _109 / _113.x;
  float _124 = _123 * 5464.01611328125f;
  float _125 = _124 + 9.99999993922529e-09f;
  float _126 = log2(_125);
  float _127 = _126 - _119;
  float _128 = _127 * _121;
  float _129 = saturate(_128);
  float2 _130 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _129), 0.0f);
  float _133 = max(_130.y, 1.0000000116860974e-07f);
  float _134 = _130.x / _133;
  float _135 = _134 + _122;
  float _136 = _135 / _121;
  float _137 = _136 - _115.x;
  float _138 = -0.0f - _137;
  float _140 = _138 - cb2_027x;
  float _141 = max(0.0f, _140);
  float _144 = cb2_026z * _141;
  float _145 = _137 - cb2_027x;
  float _146 = max(0.0f, _145);
  float _148 = cb2_026w * _146;
  bool _149 = (_137 < 0.0f);
  float _150 = select(_149, _144, _148);
  float _151 = exp2(_150);
  float _152 = _151 * _106;
  float _153 = _151 * _107;
  float _154 = _151 * _108;
  float _159 = cb2_024y * _96.x;
  float _160 = cb2_024z * _96.y;
  float _161 = cb2_024w * _96.z;
  float _162 = _159 + _152;
  float _163 = _160 + _153;
  float _164 = _161 + _154;
  float _169 = _162 * cb2_025x;
  float _170 = _163 * cb2_025y;
  float _171 = _164 * cb2_025z;
  float _172 = dot(float3(_169, _170, _171), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _173 = t0[0].SExposureData_012;
  float _175 = _172 * 5464.01611328125f;
  float _176 = _175 * _173.x;
  float _177 = _176 + 9.99999993922529e-09f;
  float _178 = log2(_177);
  float _179 = _178 + 16.929765701293945f;
  float _180 = _179 * 0.05734497308731079f;
  float _181 = saturate(_180);
  float _182 = _181 * _181;
  float _183 = _181 * 2.0f;
  float _184 = 3.0f - _183;
  float _185 = _182 * _184;
  float _186 = _170 * 0.8450999855995178f;
  float _187 = _171 * 0.14589999616146088f;
  float _188 = _186 + _187;
  float _189 = _188 * 2.4890189170837402f;
  float _190 = _188 * 0.3754962384700775f;
  float _191 = _188 * 2.811495304107666f;
  float _192 = _188 * 5.519708156585693f;
  float _193 = _172 - _189;
  float _194 = _185 * _193;
  float _195 = _194 + _189;
  float _196 = _185 * 0.5f;
  float _197 = _196 + 0.5f;
  float _198 = _197 * _193;
  float _199 = _198 + _189;
  float _200 = _169 - _190;
  float _201 = _170 - _191;
  float _202 = _171 - _192;
  float _203 = _197 * _200;
  float _204 = _197 * _201;
  float _205 = _197 * _202;
  float _206 = _203 + _190;
  float _207 = _204 + _191;
  float _208 = _205 + _192;
  float _209 = 1.0f / _199;
  float _210 = _195 * _209;
  float _211 = _210 * _206;
  float _212 = _210 * _207;
  float _213 = _210 * _208;
  float _217 = cb2_020x * TEXCOORD0_centroid.x;
  float _218 = cb2_020y * TEXCOORD0_centroid.y;
  float _221 = _217 + cb2_020z;
  float _222 = _218 + cb2_020w;
  float _225 = dot(float2(_221, _222), float2(_221, _222));
  float _226 = 1.0f - _225;
  float _227 = saturate(_226);
  float _228 = log2(_227);
  float _229 = _228 * cb2_021w;
  float _230 = exp2(_229);
  float _234 = _211 - cb2_021x;
  float _235 = _212 - cb2_021y;
  float _236 = _213 - cb2_021z;
  float _237 = _234 * _230;
  float _238 = _235 * _230;
  float _239 = _236 * _230;
  float _240 = _237 + cb2_021x;
  float _241 = _238 + cb2_021y;
  float _242 = _239 + cb2_021z;
  float _243 = t0[0].SExposureData_000;
  float _245 = max(_113.x, 0.0010000000474974513f);
  float _246 = 1.0f / _245;
  float _247 = _246 * _243.x;
  bool _250 = ((uint)(cb2_069y) == 0);
  float _256;
  float _257;
  float _258;
  float _312;
  float _313;
  float _314;
  float _389;
  float _390;
  float _391;
  float _541;
  float _578;
  float _579;
  float _580;
  float _609;
  float _610;
  float _611;
  float _692;
  float _693;
  float _694;
  float _700;
  float _701;
  float _702;
  float _716;
  float _717;
  float _718;
  float _743;
  float _755;
  float _783;
  float _795;
  float _807;
  float _808;
  float _809;
  float _836;
  float _837;
  float _838;
  if (!_250) {
    float _252 = _247 * _240;
    float _253 = _247 * _241;
    float _254 = _247 * _242;
    _256 = _252;
    _257 = _253;
    _258 = _254;
  } else {
    _256 = _240;
    _257 = _241;
    _258 = _242;
  }
  float _259 = _256 * 0.6130970120429993f;
  float _260 = mad(0.33952298760414124f, _257, _259);
  float _261 = mad(0.04737899824976921f, _258, _260);
  float _262 = _256 * 0.07019399851560593f;
  float _263 = mad(0.9163540005683899f, _257, _262);
  float _264 = mad(0.013451999984681606f, _258, _263);
  float _265 = _256 * 0.02061600051820278f;
  float _266 = mad(0.10956999659538269f, _257, _265);
  float _267 = mad(0.8698149919509888f, _258, _266);
  float _268 = log2(_261);
  float _269 = log2(_264);
  float _270 = log2(_267);
  float _271 = _268 * 0.04211956635117531f;
  float _272 = _269 * 0.04211956635117531f;
  float _273 = _270 * 0.04211956635117531f;
  float _274 = _271 + 0.6252607107162476f;
  float _275 = _272 + 0.6252607107162476f;
  float _276 = _273 + 0.6252607107162476f;
  float4 _277 = t5.SampleLevel(s2_space2, float3(_274, _275, _276), 0.0f);
  bool _283 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_283 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _287 = cb2_017x * _277.x;
    float _288 = cb2_017x * _277.y;
    float _289 = cb2_017x * _277.z;
    float _291 = _287 + cb2_017y;
    float _292 = _288 + cb2_017y;
    float _293 = _289 + cb2_017y;
    float _294 = exp2(_291);
    float _295 = exp2(_292);
    float _296 = exp2(_293);
    float _297 = _294 + 1.0f;
    float _298 = _295 + 1.0f;
    float _299 = _296 + 1.0f;
    float _300 = 1.0f / _297;
    float _301 = 1.0f / _298;
    float _302 = 1.0f / _299;
    float _304 = cb2_017z * _300;
    float _305 = cb2_017z * _301;
    float _306 = cb2_017z * _302;
    float _308 = _304 + cb2_017w;
    float _309 = _305 + cb2_017w;
    float _310 = _306 + cb2_017w;
    _312 = _308;
    _313 = _309;
    _314 = _310;
  } else {
    _312 = _277.x;
    _313 = _277.y;
    _314 = _277.z;
  }
  float _315 = _312 * 23.0f;
  float _316 = _315 + -14.473931312561035f;
  float _317 = exp2(_316);
  float _318 = _313 * 23.0f;
  float _319 = _318 + -14.473931312561035f;
  float _320 = exp2(_319);
  float _321 = _314 * 23.0f;
  float _322 = _321 + -14.473931312561035f;
  float _323 = exp2(_322);
  float _324 = dot(float3(_317, _320, _323), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _329 = dot(float3(_317, _320, _323), float3(_317, _320, _323));
  float _330 = rsqrt(_329);
  float _331 = _330 * _317;
  float _332 = _330 * _320;
  float _333 = _330 * _323;
  float _334 = cb2_001x - _331;
  float _335 = cb2_001y - _332;
  float _336 = cb2_001z - _333;
  float _337 = dot(float3(_334, _335, _336), float3(_334, _335, _336));
  float _340 = cb2_002z * _337;
  float _342 = _340 + cb2_002w;
  float _343 = saturate(_342);
  float _345 = cb2_002x * _343;
  float _346 = _324 - _317;
  float _347 = _324 - _320;
  float _348 = _324 - _323;
  float _349 = _345 * _346;
  float _350 = _345 * _347;
  float _351 = _345 * _348;
  float _352 = _349 + _317;
  float _353 = _350 + _320;
  float _354 = _351 + _323;
  float _356 = cb2_002y * _343;
  float _357 = 0.10000000149011612f - _352;
  float _358 = 0.10000000149011612f - _353;
  float _359 = 0.10000000149011612f - _354;
  float _360 = _357 * _356;
  float _361 = _358 * _356;
  float _362 = _359 * _356;
  float _363 = _360 + _352;
  float _364 = _361 + _353;
  float _365 = _362 + _354;
  float _366 = saturate(_363);
  float _367 = saturate(_364);
  float _368 = saturate(_365);
  float _374 = cb2_016x - _366;
  float _375 = cb2_016y - _367;
  float _376 = cb2_016z - _368;
  float _377 = _374 * cb2_016w;
  float _378 = _375 * cb2_016w;
  float _379 = _376 * cb2_016w;
  float _380 = _377 + _366;
  float _381 = _378 + _367;
  float _382 = _379 + _368;
  if (_283 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _385 = cb2_024x * _380;
    float _386 = cb2_024x * _381;
    float _387 = cb2_024x * _382;
    _389 = _385;
    _390 = _386;
    _391 = _387;
  } else {
    _389 = _380;
    _390 = _381;
    _391 = _382;
  }
  float _394 = _389 * 0.9708889722824097f;
  float _395 = mad(0.026962999254465103f, _390, _394);
  float _396 = mad(0.002148000057786703f, _391, _395);
  float _397 = _389 * 0.01088900025933981f;
  float _398 = mad(0.9869629740715027f, _390, _397);
  float _399 = mad(0.002148000057786703f, _391, _398);
  float _400 = mad(0.026962999254465103f, _390, _397);
  float _401 = mad(0.9621480107307434f, _391, _400);
  float _402 = max(_396, 0.0f);
  float _403 = max(_399, 0.0f);
  float _404 = max(_401, 0.0f);
  float _405 = min(_402, cb2_095y);
  float _406 = min(_403, cb2_095y);
  float _407 = min(_404, cb2_095y);
  bool _410 = ((uint)(cb2_095x) == 0);
  bool _413 = ((uint)(cb2_094w) == 0);
  bool _415 = ((uint)(cb2_094z) == 0);
  bool _417 = ((uint)(cb2_094y) != 0);
  bool _419 = ((uint)(cb2_094x) == 0);
  bool _421 = ((uint)(cb2_069z) != 0);
  float _468 = asfloat((uint)(cb2_075y));
  float _469 = asfloat((uint)(cb2_075z));
  float _470 = asfloat((uint)(cb2_075w));
  float _471 = asfloat((uint)(cb2_074z));
  float _472 = asfloat((uint)(cb2_074w));
  float _473 = asfloat((uint)(cb2_075x));
  float _474 = asfloat((uint)(cb2_073w));
  float _475 = asfloat((uint)(cb2_074x));
  float _476 = asfloat((uint)(cb2_074y));
  float _477 = asfloat((uint)(cb2_077x));
  float _478 = asfloat((uint)(cb2_077y));
  float _479 = asfloat((uint)(cb2_079x));
  float _480 = asfloat((uint)(cb2_079y));
  float _481 = asfloat((uint)(cb2_079z));
  float _482 = asfloat((uint)(cb2_078y));
  float _483 = asfloat((uint)(cb2_078z));
  float _484 = asfloat((uint)(cb2_078w));
  float _485 = asfloat((uint)(cb2_077z));
  float _486 = asfloat((uint)(cb2_077w));
  float _487 = asfloat((uint)(cb2_078x));
  float _488 = asfloat((uint)(cb2_072y));
  float _489 = asfloat((uint)(cb2_072z));
  float _490 = asfloat((uint)(cb2_072w));
  float _491 = asfloat((uint)(cb2_071x));
  float _492 = asfloat((uint)(cb2_071y));
  float _493 = asfloat((uint)(cb2_076x));
  float _494 = asfloat((uint)(cb2_070w));
  float _495 = asfloat((uint)(cb2_070x));
  float _496 = asfloat((uint)(cb2_070y));
  float _497 = asfloat((uint)(cb2_070z));
  float _498 = asfloat((uint)(cb2_073x));
  float _499 = asfloat((uint)(cb2_073y));
  float _500 = asfloat((uint)(cb2_073z));
  float _501 = asfloat((uint)(cb2_071z));
  float _502 = asfloat((uint)(cb2_071w));
  float _503 = asfloat((uint)(cb2_072x));
  float _504 = max(_406, _407);
  float _505 = max(_405, _504);
  float _506 = 1.0f / _505;
  float _507 = _506 * _405;
  float _508 = _506 * _406;
  float _509 = _506 * _407;
  float _510 = abs(_507);
  float _511 = log2(_510);
  float _512 = _511 * _495;
  float _513 = exp2(_512);
  float _514 = abs(_508);
  float _515 = log2(_514);
  float _516 = _515 * _496;
  float _517 = exp2(_516);
  float _518 = abs(_509);
  float _519 = log2(_518);
  float _520 = _519 * _497;
  float _521 = exp2(_520);
  if (_417) {
    float _524 = asfloat((uint)(cb2_076w));
    float _526 = asfloat((uint)(cb2_076z));
    float _528 = asfloat((uint)(cb2_076y));
    float _529 = _526 * _406;
    float _530 = _528 * _405;
    float _531 = _524 * _407;
    float _532 = _530 + _531;
    float _533 = _532 + _529;
    _541 = _533;
  } else {
    float _535 = _502 * _406;
    float _536 = _501 * _405;
    float _537 = _503 * _407;
    float _538 = _535 + _536;
    float _539 = _538 + _537;
    _541 = _539;
  }
  float _542 = abs(_541);
  float _543 = log2(_542);
  float _544 = _543 * _494;
  float _545 = exp2(_544);
  float _546 = log2(_545);
  float _547 = _546 * _493;
  float _548 = exp2(_547);
  float _549 = select(_421, _548, _545);
  float _550 = _549 * _491;
  float _551 = _550 + _492;
  float _552 = 1.0f / _551;
  float _553 = _552 * _545;
  if (_417) {
    if (!_419) {
      float _556 = _513 * _485;
      float _557 = _517 * _486;
      float _558 = _521 * _487;
      float _559 = _557 + _556;
      float _560 = _559 + _558;
      float _561 = _517 * _483;
      float _562 = _513 * _482;
      float _563 = _521 * _484;
      float _564 = _561 + _562;
      float _565 = _564 + _563;
      float _566 = _521 * _481;
      float _567 = _517 * _480;
      float _568 = _513 * _479;
      float _569 = _567 + _568;
      float _570 = _569 + _566;
      float _571 = max(_565, _570);
      float _572 = max(_560, _571);
      float _573 = 1.0f / _572;
      float _574 = _573 * _560;
      float _575 = _573 * _565;
      float _576 = _573 * _570;
      _578 = _574;
      _579 = _575;
      _580 = _576;
    } else {
      _578 = _513;
      _579 = _517;
      _580 = _521;
    }
    float _581 = _578 * _478;
    float _582 = exp2(_581);
    float _583 = _582 * _477;
    float _584 = saturate(_583);
    float _585 = _578 * _477;
    float _586 = _578 - _585;
    float _587 = saturate(_586);
    float _588 = max(_477, _587);
    float _589 = min(_588, _584);
    float _590 = _579 * _478;
    float _591 = exp2(_590);
    float _592 = _591 * _477;
    float _593 = saturate(_592);
    float _594 = _579 * _477;
    float _595 = _579 - _594;
    float _596 = saturate(_595);
    float _597 = max(_477, _596);
    float _598 = min(_597, _593);
    float _599 = _580 * _478;
    float _600 = exp2(_599);
    float _601 = _600 * _477;
    float _602 = saturate(_601);
    float _603 = _580 * _477;
    float _604 = _580 - _603;
    float _605 = saturate(_604);
    float _606 = max(_477, _605);
    float _607 = min(_606, _602);
    _609 = _589;
    _610 = _598;
    _611 = _607;
  } else {
    _609 = _513;
    _610 = _517;
    _611 = _521;
  }
  float _612 = _609 * _501;
  float _613 = _610 * _502;
  float _614 = _613 + _612;
  float _615 = _611 * _503;
  float _616 = _614 + _615;
  float _617 = 1.0f / _616;
  float _618 = _617 * _553;
  float _619 = saturate(_618);
  float _620 = _619 * _609;
  float _621 = saturate(_620);
  float _622 = _619 * _610;
  float _623 = saturate(_622);
  float _624 = _619 * _611;
  float _625 = saturate(_624);
  float _626 = _621 * _488;
  float _627 = _488 - _626;
  float _628 = _623 * _489;
  float _629 = _489 - _628;
  float _630 = _625 * _490;
  float _631 = _490 - _630;
  float _632 = _625 * _503;
  float _633 = _621 * _501;
  float _634 = _623 * _502;
  float _635 = _553 - _633;
  float _636 = _635 - _634;
  float _637 = _636 - _632;
  float _638 = saturate(_637);
  float _639 = _629 * _502;
  float _640 = _627 * _501;
  float _641 = _631 * _503;
  float _642 = _639 + _640;
  float _643 = _642 + _641;
  float _644 = 1.0f / _643;
  float _645 = _644 * _638;
  float _646 = _645 * _627;
  float _647 = _646 + _621;
  float _648 = saturate(_647);
  float _649 = _645 * _629;
  float _650 = _649 + _623;
  float _651 = saturate(_650);
  float _652 = _645 * _631;
  float _653 = _652 + _625;
  float _654 = saturate(_653);
  float _655 = _654 * _503;
  float _656 = _648 * _501;
  float _657 = _651 * _502;
  float _658 = _553 - _656;
  float _659 = _658 - _657;
  float _660 = _659 - _655;
  float _661 = saturate(_660);
  float _662 = _661 * _498;
  float _663 = _662 + _648;
  float _664 = saturate(_663);
  float _665 = _661 * _499;
  float _666 = _665 + _651;
  float _667 = saturate(_666);
  float _668 = _661 * _500;
  float _669 = _668 + _654;
  float _670 = saturate(_669);
  if (!_415) {
    float _672 = _664 * _474;
    float _673 = _667 * _475;
    float _674 = _670 * _476;
    float _675 = _673 + _672;
    float _676 = _675 + _674;
    float _677 = _667 * _472;
    float _678 = _664 * _471;
    float _679 = _670 * _473;
    float _680 = _677 + _678;
    float _681 = _680 + _679;
    float _682 = _670 * _470;
    float _683 = _667 * _469;
    float _684 = _664 * _468;
    float _685 = _683 + _684;
    float _686 = _685 + _682;
    if (!_413) {
      float _688 = saturate(_676);
      float _689 = saturate(_681);
      float _690 = saturate(_686);
      _692 = _690;
      _693 = _689;
      _694 = _688;
    } else {
      _692 = _686;
      _693 = _681;
      _694 = _676;
    }
  } else {
    _692 = _670;
    _693 = _667;
    _694 = _664;
  }
  if (!_410) {
    float _696 = _694 * _474;
    float _697 = _693 * _474;
    float _698 = _692 * _474;
    _700 = _698;
    _701 = _697;
    _702 = _696;
  } else {
    _700 = _692;
    _701 = _693;
    _702 = _694;
  }
  if (_283) {
    float _706 = cb1_018z * 9.999999747378752e-05f;
    float _707 = _706 * _702;
    float _708 = _706 * _701;
    float _709 = _706 * _700;
    float _711 = 5000.0f / cb1_018y;
    float _712 = _707 * _711;
    float _713 = _708 * _711;
    float _714 = _709 * _711;
    _716 = _712;
    _717 = _713;
    _718 = _714;
  } else {
    _716 = _702;
    _717 = _701;
    _718 = _700;
  }
  float _719 = _716 * 1.6047500371932983f;
  float _720 = mad(-0.5310800075531006f, _717, _719);
  float _721 = mad(-0.07366999983787537f, _718, _720);
  float _722 = _716 * -0.10208000242710114f;
  float _723 = mad(1.1081299781799316f, _717, _722);
  float _724 = mad(-0.006049999967217445f, _718, _723);
  float _725 = _716 * -0.0032599999103695154f;
  float _726 = mad(-0.07275000214576721f, _717, _725);
  float _727 = mad(1.0760200023651123f, _718, _726);
  if (_283) {
    // float _729 = max(_721, 0.0f);
    // float _730 = max(_724, 0.0f);
    // float _731 = max(_727, 0.0f);
    // bool _732 = !(_729 >= 0.0030399328097701073f);
    // if (!_732) {
    //   float _734 = abs(_729);
    //   float _735 = log2(_734);
    //   float _736 = _735 * 0.4166666567325592f;
    //   float _737 = exp2(_736);
    //   float _738 = _737 * 1.0549999475479126f;
    //   float _739 = _738 + -0.054999999701976776f;
    //   _743 = _739;
    // } else {
    //   float _741 = _729 * 12.923210144042969f;
    //   _743 = _741;
    // }
    // bool _744 = !(_730 >= 0.0030399328097701073f);
    // if (!_744) {
    //   float _746 = abs(_730);
    //   float _747 = log2(_746);
    //   float _748 = _747 * 0.4166666567325592f;
    //   float _749 = exp2(_748);
    //   float _750 = _749 * 1.0549999475479126f;
    //   float _751 = _750 + -0.054999999701976776f;
    //   _755 = _751;
    // } else {
    //   float _753 = _730 * 12.923210144042969f;
    //   _755 = _753;
    // }
    // bool _756 = !(_731 >= 0.0030399328097701073f);
    // if (!_756) {
    //   float _758 = abs(_731);
    //   float _759 = log2(_758);
    //   float _760 = _759 * 0.4166666567325592f;
    //   float _761 = exp2(_760);
    //   float _762 = _761 * 1.0549999475479126f;
    //   float _763 = _762 + -0.054999999701976776f;
    //   _836 = _743;
    //   _837 = _755;
    //   _838 = _763;
    // } else {
    //   float _765 = _731 * 12.923210144042969f;
    //   _836 = _743;
    //   _837 = _755;
    //   _838 = _765;
    // }
    _836 = renodx::color::srgb::EncodeSafe(_721);
    _837 = renodx::color::srgb::EncodeSafe(_724);
    _838 = renodx::color::srgb::EncodeSafe(_727);

  } else {
    float _767 = saturate(_721);
    float _768 = saturate(_724);
    float _769 = saturate(_727);
    bool _770 = ((uint)(cb1_018w) == -2);
    if (!_770) {
      bool _772 = !(_767 >= 0.0030399328097701073f);
      if (!_772) {
        float _774 = abs(_767);
        float _775 = log2(_774);
        float _776 = _775 * 0.4166666567325592f;
        float _777 = exp2(_776);
        float _778 = _777 * 1.0549999475479126f;
        float _779 = _778 + -0.054999999701976776f;
        _783 = _779;
      } else {
        float _781 = _767 * 12.923210144042969f;
        _783 = _781;
      }
      bool _784 = !(_768 >= 0.0030399328097701073f);
      if (!_784) {
        float _786 = abs(_768);
        float _787 = log2(_786);
        float _788 = _787 * 0.4166666567325592f;
        float _789 = exp2(_788);
        float _790 = _789 * 1.0549999475479126f;
        float _791 = _790 + -0.054999999701976776f;
        _795 = _791;
      } else {
        float _793 = _768 * 12.923210144042969f;
        _795 = _793;
      }
      bool _796 = !(_769 >= 0.0030399328097701073f);
      if (!_796) {
        float _798 = abs(_769);
        float _799 = log2(_798);
        float _800 = _799 * 0.4166666567325592f;
        float _801 = exp2(_800);
        float _802 = _801 * 1.0549999475479126f;
        float _803 = _802 + -0.054999999701976776f;
        _807 = _783;
        _808 = _795;
        _809 = _803;
      } else {
        float _805 = _769 * 12.923210144042969f;
        _807 = _783;
        _808 = _795;
        _809 = _805;
      }
    } else {
      _807 = _767;
      _808 = _768;
      _809 = _769;
    }
    float _814 = abs(_807);
    float _815 = abs(_808);
    float _816 = abs(_809);
    float _817 = log2(_814);
    float _818 = log2(_815);
    float _819 = log2(_816);
    float _820 = _817 * cb2_000z;
    float _821 = _818 * cb2_000z;
    float _822 = _819 * cb2_000z;
    float _823 = exp2(_820);
    float _824 = exp2(_821);
    float _825 = exp2(_822);
    float _826 = _823 * cb2_000y;
    float _827 = _824 * cb2_000y;
    float _828 = _825 * cb2_000y;
    float _829 = _826 + cb2_000x;
    float _830 = _827 + cb2_000x;
    float _831 = _828 + cb2_000x;
    float _832 = saturate(_829);
    float _833 = saturate(_830);
    float _834 = saturate(_831);
    _836 = _832;
    _837 = _833;
    _838 = _834;
  }
  float _839 = dot(float3(_836, _837, _838), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _836;
  SV_Target.y = _837;
  SV_Target.z = _838;
  SV_Target.w = _839;
  SV_Target_1.x = _839;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
