#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = _26.x * 6.283199787139893f;
  float _31 = cos(_30);
  float _32 = sin(_30);
  float _33 = _31 * _26.z;
  float _34 = _32 * _26.z;
  float _35 = _33 + TEXCOORD0_centroid.x;
  float _36 = _34 + TEXCOORD0_centroid.y;
  float _37 = _35 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _33;
  float _42 = _36 * 10.0f;
  float _43 = 10.0f - _42;
  float _44 = min(_42, _43);
  float _45 = saturate(_44);
  float _46 = _45 * _34;
  float _47 = _41 + TEXCOORD0_centroid.x;
  float _48 = _46 + TEXCOORD0_centroid.y;
  float4 _49 = t7.SampleLevel(s2_space2, float2(_47, _48), 0.0f);
  float _51 = _49.w * _41;
  float _52 = _49.w * _46;
  float _53 = 1.0f - _26.y;
  float _54 = saturate(_53);
  float _55 = _51 * _54;
  float _56 = _52 * _54;
  float _57 = _55 + TEXCOORD0_centroid.x;
  float _58 = _56 + TEXCOORD0_centroid.y;
  float4 _59 = t7.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  bool _61 = (_59.y > 0.0f);
  float _62 = select(_61, TEXCOORD0_centroid.x, _57);
  float _63 = select(_61, TEXCOORD0_centroid.y, _58);
  float4 _64 = t1.SampleLevel(s4_space2, float2(_62, _63), 0.0f);
  float _68 = max(_64.x, 0.0f);
  float _69 = max(_64.y, 0.0f);
  float _70 = max(_64.z, 0.0f);
  float _71 = min(_68, 65000.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float4 _74 = t4.SampleLevel(s2_space2, float2(_62, _63), 0.0f);
  float _79 = max(_74.x, 0.0f);
  float _80 = max(_74.y, 0.0f);
  float _81 = max(_74.z, 0.0f);
  float _82 = max(_74.w, 0.0f);
  float _83 = min(_79, 5000.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _89 = _24.x * cb0_028z;
  float _90 = _89 + cb0_028x;
  float _91 = cb2_027w / _90;
  float _92 = 1.0f - _91;
  float _93 = abs(_92);
  float _95 = cb2_027y * _93;
  float _97 = _95 - cb2_027z;
  float _98 = saturate(_97);
  float _99 = max(_98, _86);
  float _100 = saturate(_99);
  float4 _101 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _105 = _83 - _71;
  float _106 = _84 - _72;
  float _107 = _85 - _73;
  float _108 = _100 * _105;
  float _109 = _100 * _106;
  float _110 = _100 * _107;
  float _111 = _108 + _71;
  float _112 = _109 + _72;
  float _113 = _110 + _73;
  float _114 = dot(float3(_111, _112, _113), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _118 = t0[0].SExposureData_020;
  float _120 = t0[0].SExposureData_004;
  float _122 = cb2_018x * 0.5f;
  float _123 = _122 * cb2_018y;
  float _124 = _120.x - _123;
  float _125 = cb2_018y * cb2_018x;
  float _126 = 1.0f / _125;
  float _127 = _124 * _126;
  float _128 = _114 / _118.x;
  float _129 = _128 * 5464.01611328125f;
  float _130 = _129 + 9.99999993922529e-09f;
  float _131 = log2(_130);
  float _132 = _131 - _124;
  float _133 = _132 * _126;
  float _134 = saturate(_133);
  float2 _135 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _134), 0.0f);
  float _138 = max(_135.y, 1.0000000116860974e-07f);
  float _139 = _135.x / _138;
  float _140 = _139 + _127;
  float _141 = _140 / _126;
  float _142 = _141 - _120.x;
  float _143 = -0.0f - _142;
  float _145 = _143 - cb2_027x;
  float _146 = max(0.0f, _145);
  float _149 = cb2_026z * _146;
  float _150 = _142 - cb2_027x;
  float _151 = max(0.0f, _150);
  float _153 = cb2_026w * _151;
  bool _154 = (_142 < 0.0f);
  float _155 = select(_154, _149, _153);
  float _156 = exp2(_155);
  float _157 = _156 * _111;
  float _158 = _156 * _112;
  float _159 = _156 * _113;
  float _164 = cb2_024y * _101.x;
  float _165 = cb2_024z * _101.y;
  float _166 = cb2_024w * _101.z;
  float _167 = _164 + _157;
  float _168 = _165 + _158;
  float _169 = _166 + _159;
  float _174 = _167 * cb2_025x;
  float _175 = _168 * cb2_025y;
  float _176 = _169 * cb2_025z;
  float _177 = dot(float3(_174, _175, _176), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _178 = t0[0].SExposureData_012;
  float _180 = _177 * 5464.01611328125f;
  float _181 = _180 * _178.x;
  float _182 = _181 + 9.99999993922529e-09f;
  float _183 = log2(_182);
  float _184 = _183 + 16.929765701293945f;
  float _185 = _184 * 0.05734497308731079f;
  float _186 = saturate(_185);
  float _187 = _186 * _186;
  float _188 = _186 * 2.0f;
  float _189 = 3.0f - _188;
  float _190 = _187 * _189;
  float _191 = _175 * 0.8450999855995178f;
  float _192 = _176 * 0.14589999616146088f;
  float _193 = _191 + _192;
  float _194 = _193 * 2.4890189170837402f;
  float _195 = _193 * 0.3754962384700775f;
  float _196 = _193 * 2.811495304107666f;
  float _197 = _193 * 5.519708156585693f;
  float _198 = _177 - _194;
  float _199 = _190 * _198;
  float _200 = _199 + _194;
  float _201 = _190 * 0.5f;
  float _202 = _201 + 0.5f;
  float _203 = _202 * _198;
  float _204 = _203 + _194;
  float _205 = _174 - _195;
  float _206 = _175 - _196;
  float _207 = _176 - _197;
  float _208 = _202 * _205;
  float _209 = _202 * _206;
  float _210 = _202 * _207;
  float _211 = _208 + _195;
  float _212 = _209 + _196;
  float _213 = _210 + _197;
  float _214 = 1.0f / _204;
  float _215 = _200 * _214;
  float _216 = _215 * _211;
  float _217 = _215 * _212;
  float _218 = _215 * _213;
  float _222 = cb2_020x * TEXCOORD0_centroid.x;
  float _223 = cb2_020y * TEXCOORD0_centroid.y;
  float _226 = _222 + cb2_020z;
  float _227 = _223 + cb2_020w;
  float _230 = dot(float2(_226, _227), float2(_226, _227));
  float _231 = 1.0f - _230;
  float _232 = saturate(_231);
  float _233 = log2(_232);
  float _234 = _233 * cb2_021w;
  float _235 = exp2(_234);
  float _239 = _216 - cb2_021x;
  float _240 = _217 - cb2_021y;
  float _241 = _218 - cb2_021z;
  float _242 = _239 * _235;
  float _243 = _240 * _235;
  float _244 = _241 * _235;
  float _245 = _242 + cb2_021x;
  float _246 = _243 + cb2_021y;
  float _247 = _244 + cb2_021z;
  float _248 = t0[0].SExposureData_000;
  float _250 = max(_118.x, 0.0010000000474974513f);
  float _251 = 1.0f / _250;
  float _252 = _251 * _248.x;
  bool _255 = ((uint)(cb2_069y) == 0);
  float _261;
  float _262;
  float _263;
  float _317;
  float _318;
  float _319;
  float _395;
  float _396;
  float _397;
  float _547;
  float _584;
  float _585;
  float _586;
  float _615;
  float _616;
  float _617;
  float _698;
  float _699;
  float _700;
  float _706;
  float _707;
  float _708;
  float _722;
  float _723;
  float _724;
  float _749;
  float _761;
  float _789;
  float _801;
  float _813;
  float _814;
  float _815;
  float _842;
  float _843;
  float _844;
  if (!_255) {
    float _257 = _252 * _245;
    float _258 = _252 * _246;
    float _259 = _252 * _247;
    _261 = _257;
    _262 = _258;
    _263 = _259;
  } else {
    _261 = _245;
    _262 = _246;
    _263 = _247;
  }
  float _264 = _261 * 0.6130970120429993f;
  float _265 = mad(0.33952298760414124f, _262, _264);
  float _266 = mad(0.04737899824976921f, _263, _265);
  float _267 = _261 * 0.07019399851560593f;
  float _268 = mad(0.9163540005683899f, _262, _267);
  float _269 = mad(0.013451999984681606f, _263, _268);
  float _270 = _261 * 0.02061600051820278f;
  float _271 = mad(0.10956999659538269f, _262, _270);
  float _272 = mad(0.8698149919509888f, _263, _271);
  float _273 = log2(_266);
  float _274 = log2(_269);
  float _275 = log2(_272);
  float _276 = _273 * 0.04211956635117531f;
  float _277 = _274 * 0.04211956635117531f;
  float _278 = _275 * 0.04211956635117531f;
  float _279 = _276 + 0.6252607107162476f;
  float _280 = _277 + 0.6252607107162476f;
  float _281 = _278 + 0.6252607107162476f;
  float4 _282 = t6.SampleLevel(s2_space2, float3(_279, _280, _281), 0.0f);
  bool _288 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_288 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _292 = cb2_017x * _282.x;
    float _293 = cb2_017x * _282.y;
    float _294 = cb2_017x * _282.z;
    float _296 = _292 + cb2_017y;
    float _297 = _293 + cb2_017y;
    float _298 = _294 + cb2_017y;
    float _299 = exp2(_296);
    float _300 = exp2(_297);
    float _301 = exp2(_298);
    float _302 = _299 + 1.0f;
    float _303 = _300 + 1.0f;
    float _304 = _301 + 1.0f;
    float _305 = 1.0f / _302;
    float _306 = 1.0f / _303;
    float _307 = 1.0f / _304;
    float _309 = cb2_017z * _305;
    float _310 = cb2_017z * _306;
    float _311 = cb2_017z * _307;
    float _313 = _309 + cb2_017w;
    float _314 = _310 + cb2_017w;
    float _315 = _311 + cb2_017w;
    _317 = _313;
    _318 = _314;
    _319 = _315;
  } else {
    _317 = _282.x;
    _318 = _282.y;
    _319 = _282.z;
  }
  float _320 = _317 * 23.0f;
  float _321 = _320 + -14.473931312561035f;
  float _322 = exp2(_321);
  float _323 = _318 * 23.0f;
  float _324 = _323 + -14.473931312561035f;
  float _325 = exp2(_324);
  float _326 = _319 * 23.0f;
  float _327 = _326 + -14.473931312561035f;
  float _328 = exp2(_327);
  float _329 = dot(float3(_322, _325, _328), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _334 = dot(float3(_322, _325, _328), float3(_322, _325, _328));
  float _335 = rsqrt(_334);
  float _336 = _335 * _322;
  float _337 = _335 * _325;
  float _338 = _335 * _328;
  float _339 = cb2_001x - _336;
  float _340 = cb2_001y - _337;
  float _341 = cb2_001z - _338;
  float _342 = dot(float3(_339, _340, _341), float3(_339, _340, _341));
  float _345 = cb2_002z * _342;
  float _347 = _345 + cb2_002w;
  float _348 = saturate(_347);
  float _350 = cb2_002x * _348;
  float _351 = _329 - _322;
  float _352 = _329 - _325;
  float _353 = _329 - _328;
  float _354 = _350 * _351;
  float _355 = _350 * _352;
  float _356 = _350 * _353;
  float _357 = _354 + _322;
  float _358 = _355 + _325;
  float _359 = _356 + _328;
  float _361 = cb2_002y * _348;
  float _362 = 0.10000000149011612f - _357;
  float _363 = 0.10000000149011612f - _358;
  float _364 = 0.10000000149011612f - _359;
  float _365 = _362 * _361;
  float _366 = _363 * _361;
  float _367 = _364 * _361;
  float _368 = _365 + _357;
  float _369 = _366 + _358;
  float _370 = _367 + _359;
  float _371 = saturate(_368);
  float _372 = saturate(_369);
  float _373 = saturate(_370);
  float _380 = cb2_016x - _371;
  float _381 = cb2_016y - _372;
  float _382 = cb2_016z - _373;
  float _383 = _380 * cb2_016w;
  float _384 = _381 * cb2_016w;
  float _385 = _382 * cb2_016w;
  float _386 = _383 + _371;
  float _387 = _384 + _372;
  float _388 = _385 + _373;
  if (_288 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _391 = cb2_024x * _386;
    float _392 = cb2_024x * _387;
    float _393 = cb2_024x * _388;
    _395 = _391;
    _396 = _392;
    _397 = _393;
  } else {
    _395 = _386;
    _396 = _387;
    _397 = _388;
  }
  float _400 = _395 * 0.9708889722824097f;
  float _401 = mad(0.026962999254465103f, _396, _400);
  float _402 = mad(0.002148000057786703f, _397, _401);
  float _403 = _395 * 0.01088900025933981f;
  float _404 = mad(0.9869629740715027f, _396, _403);
  float _405 = mad(0.002148000057786703f, _397, _404);
  float _406 = mad(0.026962999254465103f, _396, _403);
  float _407 = mad(0.9621480107307434f, _397, _406);
  float _408 = max(_402, 0.0f);
  float _409 = max(_405, 0.0f);
  float _410 = max(_407, 0.0f);
  float _411 = min(_408, cb2_095y);
  float _412 = min(_409, cb2_095y);
  float _413 = min(_410, cb2_095y);
  bool _416 = ((uint)(cb2_095x) == 0);
  bool _419 = ((uint)(cb2_094w) == 0);
  bool _421 = ((uint)(cb2_094z) == 0);
  bool _423 = ((uint)(cb2_094y) != 0);
  bool _425 = ((uint)(cb2_094x) == 0);
  bool _427 = ((uint)(cb2_069z) != 0);
  float _474 = asfloat((uint)(cb2_075y));
  float _475 = asfloat((uint)(cb2_075z));
  float _476 = asfloat((uint)(cb2_075w));
  float _477 = asfloat((uint)(cb2_074z));
  float _478 = asfloat((uint)(cb2_074w));
  float _479 = asfloat((uint)(cb2_075x));
  float _480 = asfloat((uint)(cb2_073w));
  float _481 = asfloat((uint)(cb2_074x));
  float _482 = asfloat((uint)(cb2_074y));
  float _483 = asfloat((uint)(cb2_077x));
  float _484 = asfloat((uint)(cb2_077y));
  float _485 = asfloat((uint)(cb2_079x));
  float _486 = asfloat((uint)(cb2_079y));
  float _487 = asfloat((uint)(cb2_079z));
  float _488 = asfloat((uint)(cb2_078y));
  float _489 = asfloat((uint)(cb2_078z));
  float _490 = asfloat((uint)(cb2_078w));
  float _491 = asfloat((uint)(cb2_077z));
  float _492 = asfloat((uint)(cb2_077w));
  float _493 = asfloat((uint)(cb2_078x));
  float _494 = asfloat((uint)(cb2_072y));
  float _495 = asfloat((uint)(cb2_072z));
  float _496 = asfloat((uint)(cb2_072w));
  float _497 = asfloat((uint)(cb2_071x));
  float _498 = asfloat((uint)(cb2_071y));
  float _499 = asfloat((uint)(cb2_076x));
  float _500 = asfloat((uint)(cb2_070w));
  float _501 = asfloat((uint)(cb2_070x));
  float _502 = asfloat((uint)(cb2_070y));
  float _503 = asfloat((uint)(cb2_070z));
  float _504 = asfloat((uint)(cb2_073x));
  float _505 = asfloat((uint)(cb2_073y));
  float _506 = asfloat((uint)(cb2_073z));
  float _507 = asfloat((uint)(cb2_071z));
  float _508 = asfloat((uint)(cb2_071w));
  float _509 = asfloat((uint)(cb2_072x));
  float _510 = max(_412, _413);
  float _511 = max(_411, _510);
  float _512 = 1.0f / _511;
  float _513 = _512 * _411;
  float _514 = _512 * _412;
  float _515 = _512 * _413;
  float _516 = abs(_513);
  float _517 = log2(_516);
  float _518 = _517 * _501;
  float _519 = exp2(_518);
  float _520 = abs(_514);
  float _521 = log2(_520);
  float _522 = _521 * _502;
  float _523 = exp2(_522);
  float _524 = abs(_515);
  float _525 = log2(_524);
  float _526 = _525 * _503;
  float _527 = exp2(_526);
  if (_423) {
    float _530 = asfloat((uint)(cb2_076w));
    float _532 = asfloat((uint)(cb2_076z));
    float _534 = asfloat((uint)(cb2_076y));
    float _535 = _532 * _412;
    float _536 = _534 * _411;
    float _537 = _530 * _413;
    float _538 = _536 + _537;
    float _539 = _538 + _535;
    _547 = _539;
  } else {
    float _541 = _508 * _412;
    float _542 = _507 * _411;
    float _543 = _509 * _413;
    float _544 = _541 + _542;
    float _545 = _544 + _543;
    _547 = _545;
  }
  float _548 = abs(_547);
  float _549 = log2(_548);
  float _550 = _549 * _500;
  float _551 = exp2(_550);
  float _552 = log2(_551);
  float _553 = _552 * _499;
  float _554 = exp2(_553);
  float _555 = select(_427, _554, _551);
  float _556 = _555 * _497;
  float _557 = _556 + _498;
  float _558 = 1.0f / _557;
  float _559 = _558 * _551;
  if (_423) {
    if (!_425) {
      float _562 = _519 * _491;
      float _563 = _523 * _492;
      float _564 = _527 * _493;
      float _565 = _563 + _562;
      float _566 = _565 + _564;
      float _567 = _523 * _489;
      float _568 = _519 * _488;
      float _569 = _527 * _490;
      float _570 = _567 + _568;
      float _571 = _570 + _569;
      float _572 = _527 * _487;
      float _573 = _523 * _486;
      float _574 = _519 * _485;
      float _575 = _573 + _574;
      float _576 = _575 + _572;
      float _577 = max(_571, _576);
      float _578 = max(_566, _577);
      float _579 = 1.0f / _578;
      float _580 = _579 * _566;
      float _581 = _579 * _571;
      float _582 = _579 * _576;
      _584 = _580;
      _585 = _581;
      _586 = _582;
    } else {
      _584 = _519;
      _585 = _523;
      _586 = _527;
    }
    float _587 = _584 * _484;
    float _588 = exp2(_587);
    float _589 = _588 * _483;
    float _590 = saturate(_589);
    float _591 = _584 * _483;
    float _592 = _584 - _591;
    float _593 = saturate(_592);
    float _594 = max(_483, _593);
    float _595 = min(_594, _590);
    float _596 = _585 * _484;
    float _597 = exp2(_596);
    float _598 = _597 * _483;
    float _599 = saturate(_598);
    float _600 = _585 * _483;
    float _601 = _585 - _600;
    float _602 = saturate(_601);
    float _603 = max(_483, _602);
    float _604 = min(_603, _599);
    float _605 = _586 * _484;
    float _606 = exp2(_605);
    float _607 = _606 * _483;
    float _608 = saturate(_607);
    float _609 = _586 * _483;
    float _610 = _586 - _609;
    float _611 = saturate(_610);
    float _612 = max(_483, _611);
    float _613 = min(_612, _608);
    _615 = _595;
    _616 = _604;
    _617 = _613;
  } else {
    _615 = _519;
    _616 = _523;
    _617 = _527;
  }
  float _618 = _615 * _507;
  float _619 = _616 * _508;
  float _620 = _619 + _618;
  float _621 = _617 * _509;
  float _622 = _620 + _621;
  float _623 = 1.0f / _622;
  float _624 = _623 * _559;
  float _625 = saturate(_624);
  float _626 = _625 * _615;
  float _627 = saturate(_626);
  float _628 = _625 * _616;
  float _629 = saturate(_628);
  float _630 = _625 * _617;
  float _631 = saturate(_630);
  float _632 = _627 * _494;
  float _633 = _494 - _632;
  float _634 = _629 * _495;
  float _635 = _495 - _634;
  float _636 = _631 * _496;
  float _637 = _496 - _636;
  float _638 = _631 * _509;
  float _639 = _627 * _507;
  float _640 = _629 * _508;
  float _641 = _559 - _639;
  float _642 = _641 - _640;
  float _643 = _642 - _638;
  float _644 = saturate(_643);
  float _645 = _635 * _508;
  float _646 = _633 * _507;
  float _647 = _637 * _509;
  float _648 = _645 + _646;
  float _649 = _648 + _647;
  float _650 = 1.0f / _649;
  float _651 = _650 * _644;
  float _652 = _651 * _633;
  float _653 = _652 + _627;
  float _654 = saturate(_653);
  float _655 = _651 * _635;
  float _656 = _655 + _629;
  float _657 = saturate(_656);
  float _658 = _651 * _637;
  float _659 = _658 + _631;
  float _660 = saturate(_659);
  float _661 = _660 * _509;
  float _662 = _654 * _507;
  float _663 = _657 * _508;
  float _664 = _559 - _662;
  float _665 = _664 - _663;
  float _666 = _665 - _661;
  float _667 = saturate(_666);
  float _668 = _667 * _504;
  float _669 = _668 + _654;
  float _670 = saturate(_669);
  float _671 = _667 * _505;
  float _672 = _671 + _657;
  float _673 = saturate(_672);
  float _674 = _667 * _506;
  float _675 = _674 + _660;
  float _676 = saturate(_675);
  if (!_421) {
    float _678 = _670 * _480;
    float _679 = _673 * _481;
    float _680 = _676 * _482;
    float _681 = _679 + _678;
    float _682 = _681 + _680;
    float _683 = _673 * _478;
    float _684 = _670 * _477;
    float _685 = _676 * _479;
    float _686 = _683 + _684;
    float _687 = _686 + _685;
    float _688 = _676 * _476;
    float _689 = _673 * _475;
    float _690 = _670 * _474;
    float _691 = _689 + _690;
    float _692 = _691 + _688;
    if (!_419) {
      float _694 = saturate(_682);
      float _695 = saturate(_687);
      float _696 = saturate(_692);
      _698 = _696;
      _699 = _695;
      _700 = _694;
    } else {
      _698 = _692;
      _699 = _687;
      _700 = _682;
    }
  } else {
    _698 = _676;
    _699 = _673;
    _700 = _670;
  }
  if (!_416) {
    float _702 = _700 * _480;
    float _703 = _699 * _480;
    float _704 = _698 * _480;
    _706 = _704;
    _707 = _703;
    _708 = _702;
  } else {
    _706 = _698;
    _707 = _699;
    _708 = _700;
  }
  if (_288) {
    float _712 = cb1_018z * 9.999999747378752e-05f;
    float _713 = _712 * _708;
    float _714 = _712 * _707;
    float _715 = _712 * _706;
    float _717 = 5000.0f / cb1_018y;
    float _718 = _713 * _717;
    float _719 = _714 * _717;
    float _720 = _715 * _717;
    _722 = _718;
    _723 = _719;
    _724 = _720;
  } else {
    _722 = _708;
    _723 = _707;
    _724 = _706;
  }
  float _725 = _722 * 1.6047500371932983f;
  float _726 = mad(-0.5310800075531006f, _723, _725);
  float _727 = mad(-0.07366999983787537f, _724, _726);
  float _728 = _722 * -0.10208000242710114f;
  float _729 = mad(1.1081299781799316f, _723, _728);
  float _730 = mad(-0.006049999967217445f, _724, _729);
  float _731 = _722 * -0.0032599999103695154f;
  float _732 = mad(-0.07275000214576721f, _723, _731);
  float _733 = mad(1.0760200023651123f, _724, _732);
  if (_288) {
    // float _735 = max(_727, 0.0f);
    // float _736 = max(_730, 0.0f);
    // float _737 = max(_733, 0.0f);
    // bool _738 = !(_735 >= 0.0030399328097701073f);
    // if (!_738) {
    //   float _740 = abs(_735);
    //   float _741 = log2(_740);
    //   float _742 = _741 * 0.4166666567325592f;
    //   float _743 = exp2(_742);
    //   float _744 = _743 * 1.0549999475479126f;
    //   float _745 = _744 + -0.054999999701976776f;
    //   _749 = _745;
    // } else {
    //   float _747 = _735 * 12.923210144042969f;
    //   _749 = _747;
    // }
    // bool _750 = !(_736 >= 0.0030399328097701073f);
    // if (!_750) {
    //   float _752 = abs(_736);
    //   float _753 = log2(_752);
    //   float _754 = _753 * 0.4166666567325592f;
    //   float _755 = exp2(_754);
    //   float _756 = _755 * 1.0549999475479126f;
    //   float _757 = _756 + -0.054999999701976776f;
    //   _761 = _757;
    // } else {
    //   float _759 = _736 * 12.923210144042969f;
    //   _761 = _759;
    // }
    // bool _762 = !(_737 >= 0.0030399328097701073f);
    // if (!_762) {
    //   float _764 = abs(_737);
    //   float _765 = log2(_764);
    //   float _766 = _765 * 0.4166666567325592f;
    //   float _767 = exp2(_766);
    //   float _768 = _767 * 1.0549999475479126f;
    //   float _769 = _768 + -0.054999999701976776f;
    //   _842 = _749;
    //   _843 = _761;
    //   _844 = _769;
    // } else {
    //   float _771 = _737 * 12.923210144042969f;
    //   _842 = _749;
    //   _843 = _761;
    //   _844 = _771;
    // }
    _842 = renodx::color::srgb::EncodeSafe(_727);
    _843 = renodx::color::srgb::EncodeSafe(_730);
    _844 = renodx::color::srgb::EncodeSafe(_733);

  } else {
    float _773 = saturate(_727);
    float _774 = saturate(_730);
    float _775 = saturate(_733);
    bool _776 = ((uint)(cb1_018w) == -2);
    if (!_776) {
      bool _778 = !(_773 >= 0.0030399328097701073f);
      if (!_778) {
        float _780 = abs(_773);
        float _781 = log2(_780);
        float _782 = _781 * 0.4166666567325592f;
        float _783 = exp2(_782);
        float _784 = _783 * 1.0549999475479126f;
        float _785 = _784 + -0.054999999701976776f;
        _789 = _785;
      } else {
        float _787 = _773 * 12.923210144042969f;
        _789 = _787;
      }
      bool _790 = !(_774 >= 0.0030399328097701073f);
      if (!_790) {
        float _792 = abs(_774);
        float _793 = log2(_792);
        float _794 = _793 * 0.4166666567325592f;
        float _795 = exp2(_794);
        float _796 = _795 * 1.0549999475479126f;
        float _797 = _796 + -0.054999999701976776f;
        _801 = _797;
      } else {
        float _799 = _774 * 12.923210144042969f;
        _801 = _799;
      }
      bool _802 = !(_775 >= 0.0030399328097701073f);
      if (!_802) {
        float _804 = abs(_775);
        float _805 = log2(_804);
        float _806 = _805 * 0.4166666567325592f;
        float _807 = exp2(_806);
        float _808 = _807 * 1.0549999475479126f;
        float _809 = _808 + -0.054999999701976776f;
        _813 = _789;
        _814 = _801;
        _815 = _809;
      } else {
        float _811 = _775 * 12.923210144042969f;
        _813 = _789;
        _814 = _801;
        _815 = _811;
      }
    } else {
      _813 = _773;
      _814 = _774;
      _815 = _775;
    }
    float _820 = abs(_813);
    float _821 = abs(_814);
    float _822 = abs(_815);
    float _823 = log2(_820);
    float _824 = log2(_821);
    float _825 = log2(_822);
    float _826 = _823 * cb2_000z;
    float _827 = _824 * cb2_000z;
    float _828 = _825 * cb2_000z;
    float _829 = exp2(_826);
    float _830 = exp2(_827);
    float _831 = exp2(_828);
    float _832 = _829 * cb2_000y;
    float _833 = _830 * cb2_000y;
    float _834 = _831 * cb2_000y;
    float _835 = _832 + cb2_000x;
    float _836 = _833 + cb2_000x;
    float _837 = _834 + cb2_000x;
    float _838 = saturate(_835);
    float _839 = saturate(_836);
    float _840 = saturate(_837);
    _842 = _838;
    _843 = _839;
    _844 = _840;
  }
  float _848 = cb2_023x * TEXCOORD0_centroid.x;
  float _849 = cb2_023y * TEXCOORD0_centroid.y;
  float _852 = _848 + cb2_023z;
  float _853 = _849 + cb2_023w;
  float4 _856 = t9.SampleLevel(s0_space2, float2(_852, _853), 0.0f);
  float _858 = _856.x + -0.5f;
  float _859 = _858 * cb2_022x;
  float _860 = _859 + 0.5f;
  float _861 = _860 * 2.0f;
  float _862 = _861 * _842;
  float _863 = _861 * _843;
  float _864 = _861 * _844;
  float _868 = float((uint)(cb2_019z));
  float _869 = float((uint)(cb2_019w));
  float _870 = _868 + SV_Position.x;
  float _871 = _869 + SV_Position.y;
  uint _872 = uint(_870);
  uint _873 = uint(_871);
  uint _876 = cb2_019x + -1u;
  uint _877 = cb2_019y + -1u;
  int _878 = _872 & _876;
  int _879 = _873 & _877;
  float4 _880 = t3.Load(int3(_878, _879, 0));
  float _884 = _880.x * 2.0f;
  float _885 = _880.y * 2.0f;
  float _886 = _880.z * 2.0f;
  float _887 = _884 + -1.0f;
  float _888 = _885 + -1.0f;
  float _889 = _886 + -1.0f;
  float _890 = _887 * cb2_025w;
  float _891 = _888 * cb2_025w;
  float _892 = _889 * cb2_025w;
  float _893 = _890 + _862;
  float _894 = _891 + _863;
  float _895 = _892 + _864;
  float _896 = dot(float3(_893, _894, _895), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _893;
  SV_Target.y = _894;
  SV_Target.z = _895;
  SV_Target.w = _896;
  SV_Target_1.x = _896;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
