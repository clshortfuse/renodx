#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t7.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _61 = cb2_015x * TEXCOORD0_centroid.x;
  float _62 = cb2_015y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_015z;
  float _66 = _62 + cb2_015w;
  float4 _67 = t8.SampleLevel(s0_space2, float2(_65, _66), 0.0f);
  float _71 = saturate(_67.x);
  float _72 = saturate(_67.z);
  float _75 = cb2_026x * _72;
  float _76 = _71 * 6.283199787139893f;
  float _77 = cos(_76);
  float _78 = sin(_76);
  float _79 = _75 * _77;
  float _80 = _78 * _75;
  float _81 = 1.0f - _67.y;
  float _82 = saturate(_81);
  float _83 = _79 * _82;
  float _84 = _80 * _82;
  float _85 = _56 + TEXCOORD0_centroid.x;
  float _86 = _85 + _83;
  float _87 = _57 + TEXCOORD0_centroid.y;
  float _88 = _87 + _84;
  float4 _89 = t7.SampleLevel(s2_space2, float2(_86, _88), 0.0f);
  bool _91 = (_89.y > 0.0f);
  float _92 = select(_91, TEXCOORD0_centroid.x, _86);
  float _93 = select(_91, TEXCOORD0_centroid.y, _88);
  float4 _94 = t1.SampleLevel(s4_space2, float2(_92, _93), 0.0f);
  float _98 = max(_94.x, 0.0f);
  float _99 = max(_94.y, 0.0f);
  float _100 = max(_94.z, 0.0f);
  float _101 = min(_98, 65000.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float4 _104 = t4.SampleLevel(s2_space2, float2(_92, _93), 0.0f);
  float _109 = max(_104.x, 0.0f);
  float _110 = max(_104.y, 0.0f);
  float _111 = max(_104.z, 0.0f);
  float _112 = max(_104.w, 0.0f);
  float _113 = min(_109, 5000.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _119 = _25.x * cb0_028z;
  float _120 = _119 + cb0_028x;
  float _121 = cb2_027w / _120;
  float _122 = 1.0f - _121;
  float _123 = abs(_122);
  float _125 = cb2_027y * _123;
  float _127 = _125 - cb2_027z;
  float _128 = saturate(_127);
  float _129 = max(_128, _116);
  float _130 = saturate(_129);
  float _134 = cb2_013x * _92;
  float _135 = cb2_013y * _93;
  float _138 = _134 + cb2_013z;
  float _139 = _135 + cb2_013w;
  float _142 = dot(float2(_138, _139), float2(_138, _139));
  float _143 = abs(_142);
  float _144 = log2(_143);
  float _145 = _144 * cb2_014x;
  float _146 = exp2(_145);
  float _147 = saturate(_146);
  float _151 = cb2_011x * _92;
  float _152 = cb2_011y * _93;
  float _155 = _151 + cb2_011z;
  float _156 = _152 + cb2_011w;
  float _157 = _155 * _147;
  float _158 = _156 * _147;
  float _159 = _157 + _92;
  float _160 = _158 + _93;
  float _164 = cb2_012x * _92;
  float _165 = cb2_012y * _93;
  float _168 = _164 + cb2_012z;
  float _169 = _165 + cb2_012w;
  float _170 = _168 * _147;
  float _171 = _169 * _147;
  float _172 = _170 + _92;
  float _173 = _171 + _93;
  float4 _174 = t1.SampleLevel(s2_space2, float2(_159, _160), 0.0f);
  float _178 = max(_174.x, 0.0f);
  float _179 = max(_174.y, 0.0f);
  float _180 = max(_174.z, 0.0f);
  float _181 = min(_178, 65000.0f);
  float _182 = min(_179, 65000.0f);
  float _183 = min(_180, 65000.0f);
  float4 _184 = t1.SampleLevel(s2_space2, float2(_172, _173), 0.0f);
  float _188 = max(_184.x, 0.0f);
  float _189 = max(_184.y, 0.0f);
  float _190 = max(_184.z, 0.0f);
  float _191 = min(_188, 65000.0f);
  float _192 = min(_189, 65000.0f);
  float _193 = min(_190, 65000.0f);
  float4 _194 = t4.SampleLevel(s2_space2, float2(_159, _160), 0.0f);
  float _198 = max(_194.x, 0.0f);
  float _199 = max(_194.y, 0.0f);
  float _200 = max(_194.z, 0.0f);
  float _201 = min(_198, 5000.0f);
  float _202 = min(_199, 5000.0f);
  float _203 = min(_200, 5000.0f);
  float4 _204 = t4.SampleLevel(s2_space2, float2(_172, _173), 0.0f);
  float _208 = max(_204.x, 0.0f);
  float _209 = max(_204.y, 0.0f);
  float _210 = max(_204.z, 0.0f);
  float _211 = min(_208, 5000.0f);
  float _212 = min(_209, 5000.0f);
  float _213 = min(_210, 5000.0f);
  float _218 = 1.0f - cb2_009x;
  float _219 = 1.0f - cb2_009y;
  float _220 = 1.0f - cb2_009z;
  float _225 = _218 - cb2_010x;
  float _226 = _219 - cb2_010y;
  float _227 = _220 - cb2_010z;
  float _228 = saturate(_225);
  float _229 = saturate(_226);
  float _230 = saturate(_227);
  float _231 = _228 * _101;
  float _232 = _229 * _102;
  float _233 = _230 * _103;
  float _234 = cb2_009x * _181;
  float _235 = cb2_009y * _182;
  float _236 = cb2_009z * _183;
  float _237 = _234 + _231;
  float _238 = _235 + _232;
  float _239 = _236 + _233;
  float _240 = cb2_010x * _191;
  float _241 = cb2_010y * _192;
  float _242 = cb2_010z * _193;
  float _243 = _237 + _240;
  float _244 = _238 + _241;
  float _245 = _239 + _242;
  float _246 = _228 * _113;
  float _247 = _229 * _114;
  float _248 = _230 * _115;
  float _249 = cb2_009x * _201;
  float _250 = cb2_009y * _202;
  float _251 = cb2_009z * _203;
  float _252 = cb2_010x * _211;
  float _253 = cb2_010y * _212;
  float _254 = cb2_010z * _213;
  float4 _255 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _259 = _246 - _243;
  float _260 = _259 + _249;
  float _261 = _260 + _252;
  float _262 = _247 - _244;
  float _263 = _262 + _250;
  float _264 = _263 + _253;
  float _265 = _248 - _245;
  float _266 = _265 + _251;
  float _267 = _266 + _254;
  float _268 = _261 * _130;
  float _269 = _264 * _130;
  float _270 = _267 * _130;
  float _271 = _268 + _243;
  float _272 = _269 + _244;
  float _273 = _270 + _245;
  float _274 = dot(float3(_271, _272, _273), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _278 = t0[0].SExposureData_020;
  float _280 = t0[0].SExposureData_004;
  float _282 = cb2_018x * 0.5f;
  float _283 = _282 * cb2_018y;
  float _284 = _280.x - _283;
  float _285 = cb2_018y * cb2_018x;
  float _286 = 1.0f / _285;
  float _287 = _284 * _286;
  float _288 = _274 / _278.x;
  float _289 = _288 * 5464.01611328125f;
  float _290 = _289 + 9.99999993922529e-09f;
  float _291 = log2(_290);
  float _292 = _291 - _284;
  float _293 = _292 * _286;
  float _294 = saturate(_293);
  float2 _295 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _294), 0.0f);
  float _298 = max(_295.y, 1.0000000116860974e-07f);
  float _299 = _295.x / _298;
  float _300 = _299 + _287;
  float _301 = _300 / _286;
  float _302 = _301 - _280.x;
  float _303 = -0.0f - _302;
  float _305 = _303 - cb2_027x;
  float _306 = max(0.0f, _305);
  float _308 = cb2_026z * _306;
  float _309 = _302 - cb2_027x;
  float _310 = max(0.0f, _309);
  float _312 = cb2_026w * _310;
  bool _313 = (_302 < 0.0f);
  float _314 = select(_313, _308, _312);
  float _315 = exp2(_314);
  float _316 = _315 * _271;
  float _317 = _315 * _272;
  float _318 = _315 * _273;
  float _323 = cb2_024y * _255.x;
  float _324 = cb2_024z * _255.y;
  float _325 = cb2_024w * _255.z;
  float _326 = _323 + _316;
  float _327 = _324 + _317;
  float _328 = _325 + _318;
  float _333 = _326 * cb2_025x;
  float _334 = _327 * cb2_025y;
  float _335 = _328 * cb2_025z;
  float _336 = dot(float3(_333, _334, _335), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _337 = t0[0].SExposureData_012;
  float _339 = _336 * 5464.01611328125f;
  float _340 = _339 * _337.x;
  float _341 = _340 + 9.99999993922529e-09f;
  float _342 = log2(_341);
  float _343 = _342 + 16.929765701293945f;
  float _344 = _343 * 0.05734497308731079f;
  float _345 = saturate(_344);
  float _346 = _345 * _345;
  float _347 = _345 * 2.0f;
  float _348 = 3.0f - _347;
  float _349 = _346 * _348;
  float _350 = _334 * 0.8450999855995178f;
  float _351 = _335 * 0.14589999616146088f;
  float _352 = _350 + _351;
  float _353 = _352 * 2.4890189170837402f;
  float _354 = _352 * 0.3754962384700775f;
  float _355 = _352 * 2.811495304107666f;
  float _356 = _352 * 5.519708156585693f;
  float _357 = _336 - _353;
  float _358 = _349 * _357;
  float _359 = _358 + _353;
  float _360 = _349 * 0.5f;
  float _361 = _360 + 0.5f;
  float _362 = _361 * _357;
  float _363 = _362 + _353;
  float _364 = _333 - _354;
  float _365 = _334 - _355;
  float _366 = _335 - _356;
  float _367 = _361 * _364;
  float _368 = _361 * _365;
  float _369 = _361 * _366;
  float _370 = _367 + _354;
  float _371 = _368 + _355;
  float _372 = _369 + _356;
  float _373 = 1.0f / _363;
  float _374 = _359 * _373;
  float _375 = _374 * _370;
  float _376 = _374 * _371;
  float _377 = _374 * _372;
  float _381 = cb2_020x * TEXCOORD0_centroid.x;
  float _382 = cb2_020y * TEXCOORD0_centroid.y;
  float _385 = _381 + cb2_020z;
  float _386 = _382 + cb2_020w;
  float _389 = dot(float2(_385, _386), float2(_385, _386));
  float _390 = 1.0f - _389;
  float _391 = saturate(_390);
  float _392 = log2(_391);
  float _393 = _392 * cb2_021w;
  float _394 = exp2(_393);
  float _398 = _375 - cb2_021x;
  float _399 = _376 - cb2_021y;
  float _400 = _377 - cb2_021z;
  float _401 = _398 * _394;
  float _402 = _399 * _394;
  float _403 = _400 * _394;
  float _404 = _401 + cb2_021x;
  float _405 = _402 + cb2_021y;
  float _406 = _403 + cb2_021z;
  float _407 = t0[0].SExposureData_000;
  float _409 = max(_278.x, 0.0010000000474974513f);
  float _410 = 1.0f / _409;
  float _411 = _410 * _407.x;
  bool _414 = ((uint)(cb2_069y) == 0);
  float _420;
  float _421;
  float _422;
  float _476;
  float _477;
  float _478;
  float _554;
  float _555;
  float _556;
  float _706;
  float _743;
  float _744;
  float _745;
  float _774;
  float _775;
  float _776;
  float _857;
  float _858;
  float _859;
  float _865;
  float _866;
  float _867;
  float _881;
  float _882;
  float _883;
  float _908;
  float _920;
  float _948;
  float _960;
  float _972;
  float _973;
  float _974;
  float _1001;
  float _1002;
  float _1003;
  if (!_414) {
    float _416 = _411 * _404;
    float _417 = _411 * _405;
    float _418 = _411 * _406;
    _420 = _416;
    _421 = _417;
    _422 = _418;
  } else {
    _420 = _404;
    _421 = _405;
    _422 = _406;
  }
  float _423 = _420 * 0.6130970120429993f;
  float _424 = mad(0.33952298760414124f, _421, _423);
  float _425 = mad(0.04737899824976921f, _422, _424);
  float _426 = _420 * 0.07019399851560593f;
  float _427 = mad(0.9163540005683899f, _421, _426);
  float _428 = mad(0.013451999984681606f, _422, _427);
  float _429 = _420 * 0.02061600051820278f;
  float _430 = mad(0.10956999659538269f, _421, _429);
  float _431 = mad(0.8698149919509888f, _422, _430);
  float _432 = log2(_425);
  float _433 = log2(_428);
  float _434 = log2(_431);
  float _435 = _432 * 0.04211956635117531f;
  float _436 = _433 * 0.04211956635117531f;
  float _437 = _434 * 0.04211956635117531f;
  float _438 = _435 + 0.6252607107162476f;
  float _439 = _436 + 0.6252607107162476f;
  float _440 = _437 + 0.6252607107162476f;
  float4 _441 = t6.SampleLevel(s2_space2, float3(_438, _439, _440), 0.0f);
  bool _447 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_447 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _451 = cb2_017x * _441.x;
    float _452 = cb2_017x * _441.y;
    float _453 = cb2_017x * _441.z;
    float _455 = _451 + cb2_017y;
    float _456 = _452 + cb2_017y;
    float _457 = _453 + cb2_017y;
    float _458 = exp2(_455);
    float _459 = exp2(_456);
    float _460 = exp2(_457);
    float _461 = _458 + 1.0f;
    float _462 = _459 + 1.0f;
    float _463 = _460 + 1.0f;
    float _464 = 1.0f / _461;
    float _465 = 1.0f / _462;
    float _466 = 1.0f / _463;
    float _468 = cb2_017z * _464;
    float _469 = cb2_017z * _465;
    float _470 = cb2_017z * _466;
    float _472 = _468 + cb2_017w;
    float _473 = _469 + cb2_017w;
    float _474 = _470 + cb2_017w;
    _476 = _472;
    _477 = _473;
    _478 = _474;
  } else {
    _476 = _441.x;
    _477 = _441.y;
    _478 = _441.z;
  }
  float _479 = _476 * 23.0f;
  float _480 = _479 + -14.473931312561035f;
  float _481 = exp2(_480);
  float _482 = _477 * 23.0f;
  float _483 = _482 + -14.473931312561035f;
  float _484 = exp2(_483);
  float _485 = _478 * 23.0f;
  float _486 = _485 + -14.473931312561035f;
  float _487 = exp2(_486);
  float _488 = dot(float3(_481, _484, _487), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _493 = dot(float3(_481, _484, _487), float3(_481, _484, _487));
  float _494 = rsqrt(_493);
  float _495 = _494 * _481;
  float _496 = _494 * _484;
  float _497 = _494 * _487;
  float _498 = cb2_001x - _495;
  float _499 = cb2_001y - _496;
  float _500 = cb2_001z - _497;
  float _501 = dot(float3(_498, _499, _500), float3(_498, _499, _500));
  float _504 = cb2_002z * _501;
  float _506 = _504 + cb2_002w;
  float _507 = saturate(_506);
  float _509 = cb2_002x * _507;
  float _510 = _488 - _481;
  float _511 = _488 - _484;
  float _512 = _488 - _487;
  float _513 = _509 * _510;
  float _514 = _509 * _511;
  float _515 = _509 * _512;
  float _516 = _513 + _481;
  float _517 = _514 + _484;
  float _518 = _515 + _487;
  float _520 = cb2_002y * _507;
  float _521 = 0.10000000149011612f - _516;
  float _522 = 0.10000000149011612f - _517;
  float _523 = 0.10000000149011612f - _518;
  float _524 = _521 * _520;
  float _525 = _522 * _520;
  float _526 = _523 * _520;
  float _527 = _524 + _516;
  float _528 = _525 + _517;
  float _529 = _526 + _518;
  float _530 = saturate(_527);
  float _531 = saturate(_528);
  float _532 = saturate(_529);
  float _539 = cb2_016x - _530;
  float _540 = cb2_016y - _531;
  float _541 = cb2_016z - _532;
  float _542 = _539 * cb2_016w;
  float _543 = _540 * cb2_016w;
  float _544 = _541 * cb2_016w;
  float _545 = _542 + _530;
  float _546 = _543 + _531;
  float _547 = _544 + _532;
  if (_447 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _550 = cb2_024x * _545;
    float _551 = cb2_024x * _546;
    float _552 = cb2_024x * _547;
    _554 = _550;
    _555 = _551;
    _556 = _552;
  } else {
    _554 = _545;
    _555 = _546;
    _556 = _547;
  }
  float _559 = _554 * 0.9708889722824097f;
  float _560 = mad(0.026962999254465103f, _555, _559);
  float _561 = mad(0.002148000057786703f, _556, _560);
  float _562 = _554 * 0.01088900025933981f;
  float _563 = mad(0.9869629740715027f, _555, _562);
  float _564 = mad(0.002148000057786703f, _556, _563);
  float _565 = mad(0.026962999254465103f, _555, _562);
  float _566 = mad(0.9621480107307434f, _556, _565);
  float _567 = max(_561, 0.0f);
  float _568 = max(_564, 0.0f);
  float _569 = max(_566, 0.0f);
  float _570 = min(_567, cb2_095y);
  float _571 = min(_568, cb2_095y);
  float _572 = min(_569, cb2_095y);
  bool _575 = ((uint)(cb2_095x) == 0);
  bool _578 = ((uint)(cb2_094w) == 0);
  bool _580 = ((uint)(cb2_094z) == 0);
  bool _582 = ((uint)(cb2_094y) != 0);
  bool _584 = ((uint)(cb2_094x) == 0);
  bool _586 = ((uint)(cb2_069z) != 0);
  float _633 = asfloat((uint)(cb2_075y));
  float _634 = asfloat((uint)(cb2_075z));
  float _635 = asfloat((uint)(cb2_075w));
  float _636 = asfloat((uint)(cb2_074z));
  float _637 = asfloat((uint)(cb2_074w));
  float _638 = asfloat((uint)(cb2_075x));
  float _639 = asfloat((uint)(cb2_073w));
  float _640 = asfloat((uint)(cb2_074x));
  float _641 = asfloat((uint)(cb2_074y));
  float _642 = asfloat((uint)(cb2_077x));
  float _643 = asfloat((uint)(cb2_077y));
  float _644 = asfloat((uint)(cb2_079x));
  float _645 = asfloat((uint)(cb2_079y));
  float _646 = asfloat((uint)(cb2_079z));
  float _647 = asfloat((uint)(cb2_078y));
  float _648 = asfloat((uint)(cb2_078z));
  float _649 = asfloat((uint)(cb2_078w));
  float _650 = asfloat((uint)(cb2_077z));
  float _651 = asfloat((uint)(cb2_077w));
  float _652 = asfloat((uint)(cb2_078x));
  float _653 = asfloat((uint)(cb2_072y));
  float _654 = asfloat((uint)(cb2_072z));
  float _655 = asfloat((uint)(cb2_072w));
  float _656 = asfloat((uint)(cb2_071x));
  float _657 = asfloat((uint)(cb2_071y));
  float _658 = asfloat((uint)(cb2_076x));
  float _659 = asfloat((uint)(cb2_070w));
  float _660 = asfloat((uint)(cb2_070x));
  float _661 = asfloat((uint)(cb2_070y));
  float _662 = asfloat((uint)(cb2_070z));
  float _663 = asfloat((uint)(cb2_073x));
  float _664 = asfloat((uint)(cb2_073y));
  float _665 = asfloat((uint)(cb2_073z));
  float _666 = asfloat((uint)(cb2_071z));
  float _667 = asfloat((uint)(cb2_071w));
  float _668 = asfloat((uint)(cb2_072x));
  float _669 = max(_571, _572);
  float _670 = max(_570, _669);
  float _671 = 1.0f / _670;
  float _672 = _671 * _570;
  float _673 = _671 * _571;
  float _674 = _671 * _572;
  float _675 = abs(_672);
  float _676 = log2(_675);
  float _677 = _676 * _660;
  float _678 = exp2(_677);
  float _679 = abs(_673);
  float _680 = log2(_679);
  float _681 = _680 * _661;
  float _682 = exp2(_681);
  float _683 = abs(_674);
  float _684 = log2(_683);
  float _685 = _684 * _662;
  float _686 = exp2(_685);
  if (_582) {
    float _689 = asfloat((uint)(cb2_076w));
    float _691 = asfloat((uint)(cb2_076z));
    float _693 = asfloat((uint)(cb2_076y));
    float _694 = _691 * _571;
    float _695 = _693 * _570;
    float _696 = _689 * _572;
    float _697 = _695 + _696;
    float _698 = _697 + _694;
    _706 = _698;
  } else {
    float _700 = _667 * _571;
    float _701 = _666 * _570;
    float _702 = _668 * _572;
    float _703 = _700 + _701;
    float _704 = _703 + _702;
    _706 = _704;
  }
  float _707 = abs(_706);
  float _708 = log2(_707);
  float _709 = _708 * _659;
  float _710 = exp2(_709);
  float _711 = log2(_710);
  float _712 = _711 * _658;
  float _713 = exp2(_712);
  float _714 = select(_586, _713, _710);
  float _715 = _714 * _656;
  float _716 = _715 + _657;
  float _717 = 1.0f / _716;
  float _718 = _717 * _710;
  if (_582) {
    if (!_584) {
      float _721 = _678 * _650;
      float _722 = _682 * _651;
      float _723 = _686 * _652;
      float _724 = _722 + _721;
      float _725 = _724 + _723;
      float _726 = _682 * _648;
      float _727 = _678 * _647;
      float _728 = _686 * _649;
      float _729 = _726 + _727;
      float _730 = _729 + _728;
      float _731 = _686 * _646;
      float _732 = _682 * _645;
      float _733 = _678 * _644;
      float _734 = _732 + _733;
      float _735 = _734 + _731;
      float _736 = max(_730, _735);
      float _737 = max(_725, _736);
      float _738 = 1.0f / _737;
      float _739 = _738 * _725;
      float _740 = _738 * _730;
      float _741 = _738 * _735;
      _743 = _739;
      _744 = _740;
      _745 = _741;
    } else {
      _743 = _678;
      _744 = _682;
      _745 = _686;
    }
    float _746 = _743 * _643;
    float _747 = exp2(_746);
    float _748 = _747 * _642;
    float _749 = saturate(_748);
    float _750 = _743 * _642;
    float _751 = _743 - _750;
    float _752 = saturate(_751);
    float _753 = max(_642, _752);
    float _754 = min(_753, _749);
    float _755 = _744 * _643;
    float _756 = exp2(_755);
    float _757 = _756 * _642;
    float _758 = saturate(_757);
    float _759 = _744 * _642;
    float _760 = _744 - _759;
    float _761 = saturate(_760);
    float _762 = max(_642, _761);
    float _763 = min(_762, _758);
    float _764 = _745 * _643;
    float _765 = exp2(_764);
    float _766 = _765 * _642;
    float _767 = saturate(_766);
    float _768 = _745 * _642;
    float _769 = _745 - _768;
    float _770 = saturate(_769);
    float _771 = max(_642, _770);
    float _772 = min(_771, _767);
    _774 = _754;
    _775 = _763;
    _776 = _772;
  } else {
    _774 = _678;
    _775 = _682;
    _776 = _686;
  }
  float _777 = _774 * _666;
  float _778 = _775 * _667;
  float _779 = _778 + _777;
  float _780 = _776 * _668;
  float _781 = _779 + _780;
  float _782 = 1.0f / _781;
  float _783 = _782 * _718;
  float _784 = saturate(_783);
  float _785 = _784 * _774;
  float _786 = saturate(_785);
  float _787 = _784 * _775;
  float _788 = saturate(_787);
  float _789 = _784 * _776;
  float _790 = saturate(_789);
  float _791 = _786 * _653;
  float _792 = _653 - _791;
  float _793 = _788 * _654;
  float _794 = _654 - _793;
  float _795 = _790 * _655;
  float _796 = _655 - _795;
  float _797 = _790 * _668;
  float _798 = _786 * _666;
  float _799 = _788 * _667;
  float _800 = _718 - _798;
  float _801 = _800 - _799;
  float _802 = _801 - _797;
  float _803 = saturate(_802);
  float _804 = _794 * _667;
  float _805 = _792 * _666;
  float _806 = _796 * _668;
  float _807 = _804 + _805;
  float _808 = _807 + _806;
  float _809 = 1.0f / _808;
  float _810 = _809 * _803;
  float _811 = _810 * _792;
  float _812 = _811 + _786;
  float _813 = saturate(_812);
  float _814 = _810 * _794;
  float _815 = _814 + _788;
  float _816 = saturate(_815);
  float _817 = _810 * _796;
  float _818 = _817 + _790;
  float _819 = saturate(_818);
  float _820 = _819 * _668;
  float _821 = _813 * _666;
  float _822 = _816 * _667;
  float _823 = _718 - _821;
  float _824 = _823 - _822;
  float _825 = _824 - _820;
  float _826 = saturate(_825);
  float _827 = _826 * _663;
  float _828 = _827 + _813;
  float _829 = saturate(_828);
  float _830 = _826 * _664;
  float _831 = _830 + _816;
  float _832 = saturate(_831);
  float _833 = _826 * _665;
  float _834 = _833 + _819;
  float _835 = saturate(_834);
  if (!_580) {
    float _837 = _829 * _639;
    float _838 = _832 * _640;
    float _839 = _835 * _641;
    float _840 = _838 + _837;
    float _841 = _840 + _839;
    float _842 = _832 * _637;
    float _843 = _829 * _636;
    float _844 = _835 * _638;
    float _845 = _842 + _843;
    float _846 = _845 + _844;
    float _847 = _835 * _635;
    float _848 = _832 * _634;
    float _849 = _829 * _633;
    float _850 = _848 + _849;
    float _851 = _850 + _847;
    if (!_578) {
      float _853 = saturate(_841);
      float _854 = saturate(_846);
      float _855 = saturate(_851);
      _857 = _855;
      _858 = _854;
      _859 = _853;
    } else {
      _857 = _851;
      _858 = _846;
      _859 = _841;
    }
  } else {
    _857 = _835;
    _858 = _832;
    _859 = _829;
  }
  if (!_575) {
    float _861 = _859 * _639;
    float _862 = _858 * _639;
    float _863 = _857 * _639;
    _865 = _863;
    _866 = _862;
    _867 = _861;
  } else {
    _865 = _857;
    _866 = _858;
    _867 = _859;
  }
  if (_447) {
    float _871 = cb1_018z * 9.999999747378752e-05f;
    float _872 = _871 * _867;
    float _873 = _871 * _866;
    float _874 = _871 * _865;
    float _876 = 5000.0f / cb1_018y;
    float _877 = _872 * _876;
    float _878 = _873 * _876;
    float _879 = _874 * _876;
    _881 = _877;
    _882 = _878;
    _883 = _879;
  } else {
    _881 = _867;
    _882 = _866;
    _883 = _865;
  }
  float _884 = _881 * 1.6047500371932983f;
  float _885 = mad(-0.5310800075531006f, _882, _884);
  float _886 = mad(-0.07366999983787537f, _883, _885);
  float _887 = _881 * -0.10208000242710114f;
  float _888 = mad(1.1081299781799316f, _882, _887);
  float _889 = mad(-0.006049999967217445f, _883, _888);
  float _890 = _881 * -0.0032599999103695154f;
  float _891 = mad(-0.07275000214576721f, _882, _890);
  float _892 = mad(1.0760200023651123f, _883, _891);
  if (_447) {
    // float _894 = max(_886, 0.0f);
    // float _895 = max(_889, 0.0f);
    // float _896 = max(_892, 0.0f);
    // bool _897 = !(_894 >= 0.0030399328097701073f);
    // if (!_897) {
    //   float _899 = abs(_894);
    //   float _900 = log2(_899);
    //   float _901 = _900 * 0.4166666567325592f;
    //   float _902 = exp2(_901);
    //   float _903 = _902 * 1.0549999475479126f;
    //   float _904 = _903 + -0.054999999701976776f;
    //   _908 = _904;
    // } else {
    //   float _906 = _894 * 12.923210144042969f;
    //   _908 = _906;
    // }
    // bool _909 = !(_895 >= 0.0030399328097701073f);
    // if (!_909) {
    //   float _911 = abs(_895);
    //   float _912 = log2(_911);
    //   float _913 = _912 * 0.4166666567325592f;
    //   float _914 = exp2(_913);
    //   float _915 = _914 * 1.0549999475479126f;
    //   float _916 = _915 + -0.054999999701976776f;
    //   _920 = _916;
    // } else {
    //   float _918 = _895 * 12.923210144042969f;
    //   _920 = _918;
    // }
    // bool _921 = !(_896 >= 0.0030399328097701073f);
    // if (!_921) {
    //   float _923 = abs(_896);
    //   float _924 = log2(_923);
    //   float _925 = _924 * 0.4166666567325592f;
    //   float _926 = exp2(_925);
    //   float _927 = _926 * 1.0549999475479126f;
    //   float _928 = _927 + -0.054999999701976776f;
    //   _1001 = _908;
    //   _1002 = _920;
    //   _1003 = _928;
    // } else {
    //   float _930 = _896 * 12.923210144042969f;
    //   _1001 = _908;
    //   _1002 = _920;
    //   _1003 = _930;
    // }
    _1001 = renodx::color::srgb::EncodeSafe(_886);
    _1002 = renodx::color::srgb::EncodeSafe(_889);
    _1003 = renodx::color::srgb::EncodeSafe(_892);

  } else {
    float _932 = saturate(_886);
    float _933 = saturate(_889);
    float _934 = saturate(_892);
    bool _935 = ((uint)(cb1_018w) == -2);
    if (!_935) {
      bool _937 = !(_932 >= 0.0030399328097701073f);
      if (!_937) {
        float _939 = abs(_932);
        float _940 = log2(_939);
        float _941 = _940 * 0.4166666567325592f;
        float _942 = exp2(_941);
        float _943 = _942 * 1.0549999475479126f;
        float _944 = _943 + -0.054999999701976776f;
        _948 = _944;
      } else {
        float _946 = _932 * 12.923210144042969f;
        _948 = _946;
      }
      bool _949 = !(_933 >= 0.0030399328097701073f);
      if (!_949) {
        float _951 = abs(_933);
        float _952 = log2(_951);
        float _953 = _952 * 0.4166666567325592f;
        float _954 = exp2(_953);
        float _955 = _954 * 1.0549999475479126f;
        float _956 = _955 + -0.054999999701976776f;
        _960 = _956;
      } else {
        float _958 = _933 * 12.923210144042969f;
        _960 = _958;
      }
      bool _961 = !(_934 >= 0.0030399328097701073f);
      if (!_961) {
        float _963 = abs(_934);
        float _964 = log2(_963);
        float _965 = _964 * 0.4166666567325592f;
        float _966 = exp2(_965);
        float _967 = _966 * 1.0549999475479126f;
        float _968 = _967 + -0.054999999701976776f;
        _972 = _948;
        _973 = _960;
        _974 = _968;
      } else {
        float _970 = _934 * 12.923210144042969f;
        _972 = _948;
        _973 = _960;
        _974 = _970;
      }
    } else {
      _972 = _932;
      _973 = _933;
      _974 = _934;
    }
    float _979 = abs(_972);
    float _980 = abs(_973);
    float _981 = abs(_974);
    float _982 = log2(_979);
    float _983 = log2(_980);
    float _984 = log2(_981);
    float _985 = _982 * cb2_000z;
    float _986 = _983 * cb2_000z;
    float _987 = _984 * cb2_000z;
    float _988 = exp2(_985);
    float _989 = exp2(_986);
    float _990 = exp2(_987);
    float _991 = _988 * cb2_000y;
    float _992 = _989 * cb2_000y;
    float _993 = _990 * cb2_000y;
    float _994 = _991 + cb2_000x;
    float _995 = _992 + cb2_000x;
    float _996 = _993 + cb2_000x;
    float _997 = saturate(_994);
    float _998 = saturate(_995);
    float _999 = saturate(_996);
    _1001 = _997;
    _1002 = _998;
    _1003 = _999;
  }
  float _1007 = cb2_023x * TEXCOORD0_centroid.x;
  float _1008 = cb2_023y * TEXCOORD0_centroid.y;
  float _1011 = _1007 + cb2_023z;
  float _1012 = _1008 + cb2_023w;
  float4 _1015 = t10.SampleLevel(s0_space2, float2(_1011, _1012), 0.0f);
  float _1017 = _1015.x + -0.5f;
  float _1018 = _1017 * cb2_022x;
  float _1019 = _1018 + 0.5f;
  float _1020 = _1019 * 2.0f;
  float _1021 = _1020 * _1001;
  float _1022 = _1020 * _1002;
  float _1023 = _1020 * _1003;
  float _1027 = float((uint)(cb2_019z));
  float _1028 = float((uint)(cb2_019w));
  float _1029 = _1027 + SV_Position.x;
  float _1030 = _1028 + SV_Position.y;
  uint _1031 = uint(_1029);
  uint _1032 = uint(_1030);
  uint _1035 = cb2_019x + -1u;
  uint _1036 = cb2_019y + -1u;
  int _1037 = _1031 & _1035;
  int _1038 = _1032 & _1036;
  float4 _1039 = t3.Load(int3(_1037, _1038, 0));
  float _1043 = _1039.x * 2.0f;
  float _1044 = _1039.y * 2.0f;
  float _1045 = _1039.z * 2.0f;
  float _1046 = _1043 + -1.0f;
  float _1047 = _1044 + -1.0f;
  float _1048 = _1045 + -1.0f;
  float _1049 = _1046 * cb2_025w;
  float _1050 = _1047 * cb2_025w;
  float _1051 = _1048 * cb2_025w;
  float _1052 = _1049 + _1021;
  float _1053 = _1050 + _1022;
  float _1054 = _1051 + _1023;
  float _1055 = dot(float3(_1052, _1053, _1054), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1052;
  SV_Target.y = _1053;
  SV_Target.z = _1054;
  SV_Target.w = _1055;
  SV_Target_1.x = _1055;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
