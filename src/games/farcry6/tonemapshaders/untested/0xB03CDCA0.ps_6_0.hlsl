#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _23 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _25 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = max(_25.x, 0.0f);
  float _30 = max(_25.y, 0.0f);
  float _31 = max(_25.z, 0.0f);
  float _32 = min(_29, 65000.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float4 _35 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _40 = max(_35.x, 0.0f);
  float _41 = max(_35.y, 0.0f);
  float _42 = max(_35.z, 0.0f);
  float _43 = max(_35.w, 0.0f);
  float _44 = min(_40, 5000.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _50 = _23.x * cb0_028z;
  float _51 = _50 + cb0_028x;
  float _52 = cb2_027w / _51;
  float _53 = 1.0f - _52;
  float _54 = abs(_53);
  float _56 = cb2_027y * _54;
  float _58 = _56 - cb2_027z;
  float _59 = saturate(_58);
  float _60 = max(_59, _47);
  float _61 = saturate(_60);
  float _65 = cb2_013x * TEXCOORD0_centroid.x;
  float _66 = cb2_013y * TEXCOORD0_centroid.y;
  float _69 = _65 + cb2_013z;
  float _70 = _66 + cb2_013w;
  float _73 = dot(float2(_69, _70), float2(_69, _70));
  float _74 = abs(_73);
  float _75 = log2(_74);
  float _76 = _75 * cb2_014x;
  float _77 = exp2(_76);
  float _78 = saturate(_77);
  float _82 = cb2_011x * TEXCOORD0_centroid.x;
  float _83 = cb2_011y * TEXCOORD0_centroid.y;
  float _86 = _82 + cb2_011z;
  float _87 = _83 + cb2_011w;
  float _88 = _86 * _78;
  float _89 = _87 * _78;
  float _90 = _88 + TEXCOORD0_centroid.x;
  float _91 = _89 + TEXCOORD0_centroid.y;
  float _95 = cb2_012x * TEXCOORD0_centroid.x;
  float _96 = cb2_012y * TEXCOORD0_centroid.y;
  float _99 = _95 + cb2_012z;
  float _100 = _96 + cb2_012w;
  float _101 = _99 * _78;
  float _102 = _100 * _78;
  float _103 = _101 + TEXCOORD0_centroid.x;
  float _104 = _102 + TEXCOORD0_centroid.y;
  float4 _105 = t1.SampleLevel(s2_space2, float2(_90, _91), 0.0f);
  float _109 = max(_105.x, 0.0f);
  float _110 = max(_105.y, 0.0f);
  float _111 = max(_105.z, 0.0f);
  float _112 = min(_109, 65000.0f);
  float _113 = min(_110, 65000.0f);
  float _114 = min(_111, 65000.0f);
  float4 _115 = t1.SampleLevel(s2_space2, float2(_103, _104), 0.0f);
  float _119 = max(_115.x, 0.0f);
  float _120 = max(_115.y, 0.0f);
  float _121 = max(_115.z, 0.0f);
  float _122 = min(_119, 65000.0f);
  float _123 = min(_120, 65000.0f);
  float _124 = min(_121, 65000.0f);
  float4 _125 = t4.SampleLevel(s2_space2, float2(_90, _91), 0.0f);
  float _129 = max(_125.x, 0.0f);
  float _130 = max(_125.y, 0.0f);
  float _131 = max(_125.z, 0.0f);
  float _132 = min(_129, 5000.0f);
  float _133 = min(_130, 5000.0f);
  float _134 = min(_131, 5000.0f);
  float4 _135 = t4.SampleLevel(s2_space2, float2(_103, _104), 0.0f);
  float _139 = max(_135.x, 0.0f);
  float _140 = max(_135.y, 0.0f);
  float _141 = max(_135.z, 0.0f);
  float _142 = min(_139, 5000.0f);
  float _143 = min(_140, 5000.0f);
  float _144 = min(_141, 5000.0f);
  float _149 = 1.0f - cb2_009x;
  float _150 = 1.0f - cb2_009y;
  float _151 = 1.0f - cb2_009z;
  float _156 = _149 - cb2_010x;
  float _157 = _150 - cb2_010y;
  float _158 = _151 - cb2_010z;
  float _159 = saturate(_156);
  float _160 = saturate(_157);
  float _161 = saturate(_158);
  float _162 = _159 * _32;
  float _163 = _160 * _33;
  float _164 = _161 * _34;
  float _165 = cb2_009x * _112;
  float _166 = cb2_009y * _113;
  float _167 = cb2_009z * _114;
  float _168 = _165 + _162;
  float _169 = _166 + _163;
  float _170 = _167 + _164;
  float _171 = cb2_010x * _122;
  float _172 = cb2_010y * _123;
  float _173 = cb2_010z * _124;
  float _174 = _168 + _171;
  float _175 = _169 + _172;
  float _176 = _170 + _173;
  float _177 = _159 * _44;
  float _178 = _160 * _45;
  float _179 = _161 * _46;
  float _180 = cb2_009x * _132;
  float _181 = cb2_009y * _133;
  float _182 = cb2_009z * _134;
  float _183 = cb2_010x * _142;
  float _184 = cb2_010y * _143;
  float _185 = cb2_010z * _144;
  float4 _186 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _190 = _177 - _174;
  float _191 = _190 + _180;
  float _192 = _191 + _183;
  float _193 = _178 - _175;
  float _194 = _193 + _181;
  float _195 = _194 + _184;
  float _196 = _179 - _176;
  float _197 = _196 + _182;
  float _198 = _197 + _185;
  float _199 = _192 * _61;
  float _200 = _195 * _61;
  float _201 = _198 * _61;
  float _202 = _199 + _174;
  float _203 = _200 + _175;
  float _204 = _201 + _176;
  float _205 = dot(float3(_202, _203, _204), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _209 = t0[0].SExposureData_020;
  float _211 = t0[0].SExposureData_004;
  float _213 = cb2_018x * 0.5f;
  float _214 = _213 * cb2_018y;
  float _215 = _211.x - _214;
  float _216 = cb2_018y * cb2_018x;
  float _217 = 1.0f / _216;
  float _218 = _215 * _217;
  float _219 = _205 / _209.x;
  float _220 = _219 * 5464.01611328125f;
  float _221 = _220 + 9.99999993922529e-09f;
  float _222 = log2(_221);
  float _223 = _222 - _215;
  float _224 = _223 * _217;
  float _225 = saturate(_224);
  float2 _226 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _225), 0.0f);
  float _229 = max(_226.y, 1.0000000116860974e-07f);
  float _230 = _226.x / _229;
  float _231 = _230 + _218;
  float _232 = _231 / _217;
  float _233 = _232 - _211.x;
  float _234 = -0.0f - _233;
  float _236 = _234 - cb2_027x;
  float _237 = max(0.0f, _236);
  float _240 = cb2_026z * _237;
  float _241 = _233 - cb2_027x;
  float _242 = max(0.0f, _241);
  float _244 = cb2_026w * _242;
  bool _245 = (_233 < 0.0f);
  float _246 = select(_245, _240, _244);
  float _247 = exp2(_246);
  float _248 = _247 * _202;
  float _249 = _247 * _203;
  float _250 = _247 * _204;
  float _255 = cb2_024y * _186.x;
  float _256 = cb2_024z * _186.y;
  float _257 = cb2_024w * _186.z;
  float _258 = _255 + _248;
  float _259 = _256 + _249;
  float _260 = _257 + _250;
  float _265 = _258 * cb2_025x;
  float _266 = _259 * cb2_025y;
  float _267 = _260 * cb2_025z;
  float _268 = dot(float3(_265, _266, _267), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _269 = t0[0].SExposureData_012;
  float _271 = _268 * 5464.01611328125f;
  float _272 = _271 * _269.x;
  float _273 = _272 + 9.99999993922529e-09f;
  float _274 = log2(_273);
  float _275 = _274 + 16.929765701293945f;
  float _276 = _275 * 0.05734497308731079f;
  float _277 = saturate(_276);
  float _278 = _277 * _277;
  float _279 = _277 * 2.0f;
  float _280 = 3.0f - _279;
  float _281 = _278 * _280;
  float _282 = _266 * 0.8450999855995178f;
  float _283 = _267 * 0.14589999616146088f;
  float _284 = _282 + _283;
  float _285 = _284 * 2.4890189170837402f;
  float _286 = _284 * 0.3754962384700775f;
  float _287 = _284 * 2.811495304107666f;
  float _288 = _284 * 5.519708156585693f;
  float _289 = _268 - _285;
  float _290 = _281 * _289;
  float _291 = _290 + _285;
  float _292 = _281 * 0.5f;
  float _293 = _292 + 0.5f;
  float _294 = _293 * _289;
  float _295 = _294 + _285;
  float _296 = _265 - _286;
  float _297 = _266 - _287;
  float _298 = _267 - _288;
  float _299 = _293 * _296;
  float _300 = _293 * _297;
  float _301 = _293 * _298;
  float _302 = _299 + _286;
  float _303 = _300 + _287;
  float _304 = _301 + _288;
  float _305 = 1.0f / _295;
  float _306 = _291 * _305;
  float _307 = _306 * _302;
  float _308 = _306 * _303;
  float _309 = _306 * _304;
  float _313 = cb2_020x * TEXCOORD0_centroid.x;
  float _314 = cb2_020y * TEXCOORD0_centroid.y;
  float _317 = _313 + cb2_020z;
  float _318 = _314 + cb2_020w;
  float _321 = dot(float2(_317, _318), float2(_317, _318));
  float _322 = 1.0f - _321;
  float _323 = saturate(_322);
  float _324 = log2(_323);
  float _325 = _324 * cb2_021w;
  float _326 = exp2(_325);
  float _330 = _307 - cb2_021x;
  float _331 = _308 - cb2_021y;
  float _332 = _309 - cb2_021z;
  float _333 = _330 * _326;
  float _334 = _331 * _326;
  float _335 = _332 * _326;
  float _336 = _333 + cb2_021x;
  float _337 = _334 + cb2_021y;
  float _338 = _335 + cb2_021z;
  float _339 = t0[0].SExposureData_000;
  float _341 = max(_209.x, 0.0010000000474974513f);
  float _342 = 1.0f / _341;
  float _343 = _342 * _339.x;
  bool _346 = ((uint)(cb2_069y) == 0);
  float _352;
  float _353;
  float _354;
  float _408;
  float _409;
  float _410;
  float _486;
  float _487;
  float _488;
  float _638;
  float _675;
  float _676;
  float _677;
  float _706;
  float _707;
  float _708;
  float _789;
  float _790;
  float _791;
  float _797;
  float _798;
  float _799;
  float _813;
  float _814;
  float _815;
  float _840;
  float _852;
  float _880;
  float _892;
  float _904;
  float _905;
  float _906;
  float _933;
  float _934;
  float _935;
  if (!_346) {
    float _348 = _343 * _336;
    float _349 = _343 * _337;
    float _350 = _343 * _338;
    _352 = _348;
    _353 = _349;
    _354 = _350;
  } else {
    _352 = _336;
    _353 = _337;
    _354 = _338;
  }
  float _355 = _352 * 0.6130970120429993f;
  float _356 = mad(0.33952298760414124f, _353, _355);
  float _357 = mad(0.04737899824976921f, _354, _356);
  float _358 = _352 * 0.07019399851560593f;
  float _359 = mad(0.9163540005683899f, _353, _358);
  float _360 = mad(0.013451999984681606f, _354, _359);
  float _361 = _352 * 0.02061600051820278f;
  float _362 = mad(0.10956999659538269f, _353, _361);
  float _363 = mad(0.8698149919509888f, _354, _362);
  float _364 = log2(_357);
  float _365 = log2(_360);
  float _366 = log2(_363);
  float _367 = _364 * 0.04211956635117531f;
  float _368 = _365 * 0.04211956635117531f;
  float _369 = _366 * 0.04211956635117531f;
  float _370 = _367 + 0.6252607107162476f;
  float _371 = _368 + 0.6252607107162476f;
  float _372 = _369 + 0.6252607107162476f;
  float4 _373 = t6.SampleLevel(s2_space2, float3(_370, _371, _372), 0.0f);
  bool _379 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_379 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _383 = cb2_017x * _373.x;
    float _384 = cb2_017x * _373.y;
    float _385 = cb2_017x * _373.z;
    float _387 = _383 + cb2_017y;
    float _388 = _384 + cb2_017y;
    float _389 = _385 + cb2_017y;
    float _390 = exp2(_387);
    float _391 = exp2(_388);
    float _392 = exp2(_389);
    float _393 = _390 + 1.0f;
    float _394 = _391 + 1.0f;
    float _395 = _392 + 1.0f;
    float _396 = 1.0f / _393;
    float _397 = 1.0f / _394;
    float _398 = 1.0f / _395;
    float _400 = cb2_017z * _396;
    float _401 = cb2_017z * _397;
    float _402 = cb2_017z * _398;
    float _404 = _400 + cb2_017w;
    float _405 = _401 + cb2_017w;
    float _406 = _402 + cb2_017w;
    _408 = _404;
    _409 = _405;
    _410 = _406;
  } else {
    _408 = _373.x;
    _409 = _373.y;
    _410 = _373.z;
  }
  float _411 = _408 * 23.0f;
  float _412 = _411 + -14.473931312561035f;
  float _413 = exp2(_412);
  float _414 = _409 * 23.0f;
  float _415 = _414 + -14.473931312561035f;
  float _416 = exp2(_415);
  float _417 = _410 * 23.0f;
  float _418 = _417 + -14.473931312561035f;
  float _419 = exp2(_418);
  float _420 = dot(float3(_413, _416, _419), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _425 = dot(float3(_413, _416, _419), float3(_413, _416, _419));
  float _426 = rsqrt(_425);
  float _427 = _426 * _413;
  float _428 = _426 * _416;
  float _429 = _426 * _419;
  float _430 = cb2_001x - _427;
  float _431 = cb2_001y - _428;
  float _432 = cb2_001z - _429;
  float _433 = dot(float3(_430, _431, _432), float3(_430, _431, _432));
  float _436 = cb2_002z * _433;
  float _438 = _436 + cb2_002w;
  float _439 = saturate(_438);
  float _441 = cb2_002x * _439;
  float _442 = _420 - _413;
  float _443 = _420 - _416;
  float _444 = _420 - _419;
  float _445 = _441 * _442;
  float _446 = _441 * _443;
  float _447 = _441 * _444;
  float _448 = _445 + _413;
  float _449 = _446 + _416;
  float _450 = _447 + _419;
  float _452 = cb2_002y * _439;
  float _453 = 0.10000000149011612f - _448;
  float _454 = 0.10000000149011612f - _449;
  float _455 = 0.10000000149011612f - _450;
  float _456 = _453 * _452;
  float _457 = _454 * _452;
  float _458 = _455 * _452;
  float _459 = _456 + _448;
  float _460 = _457 + _449;
  float _461 = _458 + _450;
  float _462 = saturate(_459);
  float _463 = saturate(_460);
  float _464 = saturate(_461);
  float _471 = cb2_016x - _462;
  float _472 = cb2_016y - _463;
  float _473 = cb2_016z - _464;
  float _474 = _471 * cb2_016w;
  float _475 = _472 * cb2_016w;
  float _476 = _473 * cb2_016w;
  float _477 = _474 + _462;
  float _478 = _475 + _463;
  float _479 = _476 + _464;
  if (_379 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _482 = cb2_024x * _477;
    float _483 = cb2_024x * _478;
    float _484 = cb2_024x * _479;
    _486 = _482;
    _487 = _483;
    _488 = _484;
  } else {
    _486 = _477;
    _487 = _478;
    _488 = _479;
  }
  float _491 = _486 * 0.9708889722824097f;
  float _492 = mad(0.026962999254465103f, _487, _491);
  float _493 = mad(0.002148000057786703f, _488, _492);
  float _494 = _486 * 0.01088900025933981f;
  float _495 = mad(0.9869629740715027f, _487, _494);
  float _496 = mad(0.002148000057786703f, _488, _495);
  float _497 = mad(0.026962999254465103f, _487, _494);
  float _498 = mad(0.9621480107307434f, _488, _497);
  float _499 = max(_493, 0.0f);
  float _500 = max(_496, 0.0f);
  float _501 = max(_498, 0.0f);
  float _502 = min(_499, cb2_095y);
  float _503 = min(_500, cb2_095y);
  float _504 = min(_501, cb2_095y);
  bool _507 = ((uint)(cb2_095x) == 0);
  bool _510 = ((uint)(cb2_094w) == 0);
  bool _512 = ((uint)(cb2_094z) == 0);
  bool _514 = ((uint)(cb2_094y) != 0);
  bool _516 = ((uint)(cb2_094x) == 0);
  bool _518 = ((uint)(cb2_069z) != 0);
  float _565 = asfloat((uint)(cb2_075y));
  float _566 = asfloat((uint)(cb2_075z));
  float _567 = asfloat((uint)(cb2_075w));
  float _568 = asfloat((uint)(cb2_074z));
  float _569 = asfloat((uint)(cb2_074w));
  float _570 = asfloat((uint)(cb2_075x));
  float _571 = asfloat((uint)(cb2_073w));
  float _572 = asfloat((uint)(cb2_074x));
  float _573 = asfloat((uint)(cb2_074y));
  float _574 = asfloat((uint)(cb2_077x));
  float _575 = asfloat((uint)(cb2_077y));
  float _576 = asfloat((uint)(cb2_079x));
  float _577 = asfloat((uint)(cb2_079y));
  float _578 = asfloat((uint)(cb2_079z));
  float _579 = asfloat((uint)(cb2_078y));
  float _580 = asfloat((uint)(cb2_078z));
  float _581 = asfloat((uint)(cb2_078w));
  float _582 = asfloat((uint)(cb2_077z));
  float _583 = asfloat((uint)(cb2_077w));
  float _584 = asfloat((uint)(cb2_078x));
  float _585 = asfloat((uint)(cb2_072y));
  float _586 = asfloat((uint)(cb2_072z));
  float _587 = asfloat((uint)(cb2_072w));
  float _588 = asfloat((uint)(cb2_071x));
  float _589 = asfloat((uint)(cb2_071y));
  float _590 = asfloat((uint)(cb2_076x));
  float _591 = asfloat((uint)(cb2_070w));
  float _592 = asfloat((uint)(cb2_070x));
  float _593 = asfloat((uint)(cb2_070y));
  float _594 = asfloat((uint)(cb2_070z));
  float _595 = asfloat((uint)(cb2_073x));
  float _596 = asfloat((uint)(cb2_073y));
  float _597 = asfloat((uint)(cb2_073z));
  float _598 = asfloat((uint)(cb2_071z));
  float _599 = asfloat((uint)(cb2_071w));
  float _600 = asfloat((uint)(cb2_072x));
  float _601 = max(_503, _504);
  float _602 = max(_502, _601);
  float _603 = 1.0f / _602;
  float _604 = _603 * _502;
  float _605 = _603 * _503;
  float _606 = _603 * _504;
  float _607 = abs(_604);
  float _608 = log2(_607);
  float _609 = _608 * _592;
  float _610 = exp2(_609);
  float _611 = abs(_605);
  float _612 = log2(_611);
  float _613 = _612 * _593;
  float _614 = exp2(_613);
  float _615 = abs(_606);
  float _616 = log2(_615);
  float _617 = _616 * _594;
  float _618 = exp2(_617);
  if (_514) {
    float _621 = asfloat((uint)(cb2_076w));
    float _623 = asfloat((uint)(cb2_076z));
    float _625 = asfloat((uint)(cb2_076y));
    float _626 = _623 * _503;
    float _627 = _625 * _502;
    float _628 = _621 * _504;
    float _629 = _627 + _628;
    float _630 = _629 + _626;
    _638 = _630;
  } else {
    float _632 = _599 * _503;
    float _633 = _598 * _502;
    float _634 = _600 * _504;
    float _635 = _632 + _633;
    float _636 = _635 + _634;
    _638 = _636;
  }
  float _639 = abs(_638);
  float _640 = log2(_639);
  float _641 = _640 * _591;
  float _642 = exp2(_641);
  float _643 = log2(_642);
  float _644 = _643 * _590;
  float _645 = exp2(_644);
  float _646 = select(_518, _645, _642);
  float _647 = _646 * _588;
  float _648 = _647 + _589;
  float _649 = 1.0f / _648;
  float _650 = _649 * _642;
  if (_514) {
    if (!_516) {
      float _653 = _610 * _582;
      float _654 = _614 * _583;
      float _655 = _618 * _584;
      float _656 = _654 + _653;
      float _657 = _656 + _655;
      float _658 = _614 * _580;
      float _659 = _610 * _579;
      float _660 = _618 * _581;
      float _661 = _658 + _659;
      float _662 = _661 + _660;
      float _663 = _618 * _578;
      float _664 = _614 * _577;
      float _665 = _610 * _576;
      float _666 = _664 + _665;
      float _667 = _666 + _663;
      float _668 = max(_662, _667);
      float _669 = max(_657, _668);
      float _670 = 1.0f / _669;
      float _671 = _670 * _657;
      float _672 = _670 * _662;
      float _673 = _670 * _667;
      _675 = _671;
      _676 = _672;
      _677 = _673;
    } else {
      _675 = _610;
      _676 = _614;
      _677 = _618;
    }
    float _678 = _675 * _575;
    float _679 = exp2(_678);
    float _680 = _679 * _574;
    float _681 = saturate(_680);
    float _682 = _675 * _574;
    float _683 = _675 - _682;
    float _684 = saturate(_683);
    float _685 = max(_574, _684);
    float _686 = min(_685, _681);
    float _687 = _676 * _575;
    float _688 = exp2(_687);
    float _689 = _688 * _574;
    float _690 = saturate(_689);
    float _691 = _676 * _574;
    float _692 = _676 - _691;
    float _693 = saturate(_692);
    float _694 = max(_574, _693);
    float _695 = min(_694, _690);
    float _696 = _677 * _575;
    float _697 = exp2(_696);
    float _698 = _697 * _574;
    float _699 = saturate(_698);
    float _700 = _677 * _574;
    float _701 = _677 - _700;
    float _702 = saturate(_701);
    float _703 = max(_574, _702);
    float _704 = min(_703, _699);
    _706 = _686;
    _707 = _695;
    _708 = _704;
  } else {
    _706 = _610;
    _707 = _614;
    _708 = _618;
  }
  float _709 = _706 * _598;
  float _710 = _707 * _599;
  float _711 = _710 + _709;
  float _712 = _708 * _600;
  float _713 = _711 + _712;
  float _714 = 1.0f / _713;
  float _715 = _714 * _650;
  float _716 = saturate(_715);
  float _717 = _716 * _706;
  float _718 = saturate(_717);
  float _719 = _716 * _707;
  float _720 = saturate(_719);
  float _721 = _716 * _708;
  float _722 = saturate(_721);
  float _723 = _718 * _585;
  float _724 = _585 - _723;
  float _725 = _720 * _586;
  float _726 = _586 - _725;
  float _727 = _722 * _587;
  float _728 = _587 - _727;
  float _729 = _722 * _600;
  float _730 = _718 * _598;
  float _731 = _720 * _599;
  float _732 = _650 - _730;
  float _733 = _732 - _731;
  float _734 = _733 - _729;
  float _735 = saturate(_734);
  float _736 = _726 * _599;
  float _737 = _724 * _598;
  float _738 = _728 * _600;
  float _739 = _736 + _737;
  float _740 = _739 + _738;
  float _741 = 1.0f / _740;
  float _742 = _741 * _735;
  float _743 = _742 * _724;
  float _744 = _743 + _718;
  float _745 = saturate(_744);
  float _746 = _742 * _726;
  float _747 = _746 + _720;
  float _748 = saturate(_747);
  float _749 = _742 * _728;
  float _750 = _749 + _722;
  float _751 = saturate(_750);
  float _752 = _751 * _600;
  float _753 = _745 * _598;
  float _754 = _748 * _599;
  float _755 = _650 - _753;
  float _756 = _755 - _754;
  float _757 = _756 - _752;
  float _758 = saturate(_757);
  float _759 = _758 * _595;
  float _760 = _759 + _745;
  float _761 = saturate(_760);
  float _762 = _758 * _596;
  float _763 = _762 + _748;
  float _764 = saturate(_763);
  float _765 = _758 * _597;
  float _766 = _765 + _751;
  float _767 = saturate(_766);
  if (!_512) {
    float _769 = _761 * _571;
    float _770 = _764 * _572;
    float _771 = _767 * _573;
    float _772 = _770 + _769;
    float _773 = _772 + _771;
    float _774 = _764 * _569;
    float _775 = _761 * _568;
    float _776 = _767 * _570;
    float _777 = _774 + _775;
    float _778 = _777 + _776;
    float _779 = _767 * _567;
    float _780 = _764 * _566;
    float _781 = _761 * _565;
    float _782 = _780 + _781;
    float _783 = _782 + _779;
    if (!_510) {
      float _785 = saturate(_773);
      float _786 = saturate(_778);
      float _787 = saturate(_783);
      _789 = _787;
      _790 = _786;
      _791 = _785;
    } else {
      _789 = _783;
      _790 = _778;
      _791 = _773;
    }
  } else {
    _789 = _767;
    _790 = _764;
    _791 = _761;
  }
  if (!_507) {
    float _793 = _791 * _571;
    float _794 = _790 * _571;
    float _795 = _789 * _571;
    _797 = _795;
    _798 = _794;
    _799 = _793;
  } else {
    _797 = _789;
    _798 = _790;
    _799 = _791;
  }
  if (_379) {
    float _803 = cb1_018z * 9.999999747378752e-05f;
    float _804 = _803 * _799;
    float _805 = _803 * _798;
    float _806 = _803 * _797;
    float _808 = 5000.0f / cb1_018y;
    float _809 = _804 * _808;
    float _810 = _805 * _808;
    float _811 = _806 * _808;
    _813 = _809;
    _814 = _810;
    _815 = _811;
  } else {
    _813 = _799;
    _814 = _798;
    _815 = _797;
  }
  float _816 = _813 * 1.6047500371932983f;
  float _817 = mad(-0.5310800075531006f, _814, _816);
  float _818 = mad(-0.07366999983787537f, _815, _817);
  float _819 = _813 * -0.10208000242710114f;
  float _820 = mad(1.1081299781799316f, _814, _819);
  float _821 = mad(-0.006049999967217445f, _815, _820);
  float _822 = _813 * -0.0032599999103695154f;
  float _823 = mad(-0.07275000214576721f, _814, _822);
  float _824 = mad(1.0760200023651123f, _815, _823);
  if (_379) {
    // float _826 = max(_818, 0.0f);
    // float _827 = max(_821, 0.0f);
    // float _828 = max(_824, 0.0f);
    // bool _829 = !(_826 >= 0.0030399328097701073f);
    // if (!_829) {
    //   float _831 = abs(_826);
    //   float _832 = log2(_831);
    //   float _833 = _832 * 0.4166666567325592f;
    //   float _834 = exp2(_833);
    //   float _835 = _834 * 1.0549999475479126f;
    //   float _836 = _835 + -0.054999999701976776f;
    //   _840 = _836;
    // } else {
    //   float _838 = _826 * 12.923210144042969f;
    //   _840 = _838;
    // }
    // bool _841 = !(_827 >= 0.0030399328097701073f);
    // if (!_841) {
    //   float _843 = abs(_827);
    //   float _844 = log2(_843);
    //   float _845 = _844 * 0.4166666567325592f;
    //   float _846 = exp2(_845);
    //   float _847 = _846 * 1.0549999475479126f;
    //   float _848 = _847 + -0.054999999701976776f;
    //   _852 = _848;
    // } else {
    //   float _850 = _827 * 12.923210144042969f;
    //   _852 = _850;
    // }
    // bool _853 = !(_828 >= 0.0030399328097701073f);
    // if (!_853) {
    //   float _855 = abs(_828);
    //   float _856 = log2(_855);
    //   float _857 = _856 * 0.4166666567325592f;
    //   float _858 = exp2(_857);
    //   float _859 = _858 * 1.0549999475479126f;
    //   float _860 = _859 + -0.054999999701976776f;
    //   _933 = _840;
    //   _934 = _852;
    //   _935 = _860;
    // } else {
    //   float _862 = _828 * 12.923210144042969f;
    //   _933 = _840;
    //   _934 = _852;
    //   _935 = _862;
    // }
    _933 = renodx::color::srgb::EncodeSafe(_818);
    _934 = renodx::color::srgb::EncodeSafe(_821);
    _935 = renodx::color::srgb::EncodeSafe(_824);

  } else {
    float _864 = saturate(_818);
    float _865 = saturate(_821);
    float _866 = saturate(_824);
    bool _867 = ((uint)(cb1_018w) == -2);
    if (!_867) {
      bool _869 = !(_864 >= 0.0030399328097701073f);
      if (!_869) {
        float _871 = abs(_864);
        float _872 = log2(_871);
        float _873 = _872 * 0.4166666567325592f;
        float _874 = exp2(_873);
        float _875 = _874 * 1.0549999475479126f;
        float _876 = _875 + -0.054999999701976776f;
        _880 = _876;
      } else {
        float _878 = _864 * 12.923210144042969f;
        _880 = _878;
      }
      bool _881 = !(_865 >= 0.0030399328097701073f);
      if (!_881) {
        float _883 = abs(_865);
        float _884 = log2(_883);
        float _885 = _884 * 0.4166666567325592f;
        float _886 = exp2(_885);
        float _887 = _886 * 1.0549999475479126f;
        float _888 = _887 + -0.054999999701976776f;
        _892 = _888;
      } else {
        float _890 = _865 * 12.923210144042969f;
        _892 = _890;
      }
      bool _893 = !(_866 >= 0.0030399328097701073f);
      if (!_893) {
        float _895 = abs(_866);
        float _896 = log2(_895);
        float _897 = _896 * 0.4166666567325592f;
        float _898 = exp2(_897);
        float _899 = _898 * 1.0549999475479126f;
        float _900 = _899 + -0.054999999701976776f;
        _904 = _880;
        _905 = _892;
        _906 = _900;
      } else {
        float _902 = _866 * 12.923210144042969f;
        _904 = _880;
        _905 = _892;
        _906 = _902;
      }
    } else {
      _904 = _864;
      _905 = _865;
      _906 = _866;
    }
    float _911 = abs(_904);
    float _912 = abs(_905);
    float _913 = abs(_906);
    float _914 = log2(_911);
    float _915 = log2(_912);
    float _916 = log2(_913);
    float _917 = _914 * cb2_000z;
    float _918 = _915 * cb2_000z;
    float _919 = _916 * cb2_000z;
    float _920 = exp2(_917);
    float _921 = exp2(_918);
    float _922 = exp2(_919);
    float _923 = _920 * cb2_000y;
    float _924 = _921 * cb2_000y;
    float _925 = _922 * cb2_000y;
    float _926 = _923 + cb2_000x;
    float _927 = _924 + cb2_000x;
    float _928 = _925 + cb2_000x;
    float _929 = saturate(_926);
    float _930 = saturate(_927);
    float _931 = saturate(_928);
    _933 = _929;
    _934 = _930;
    _935 = _931;
  }
  float _939 = cb2_023x * TEXCOORD0_centroid.x;
  float _940 = cb2_023y * TEXCOORD0_centroid.y;
  float _943 = _939 + cb2_023z;
  float _944 = _940 + cb2_023w;
  float4 _947 = t8.SampleLevel(s0_space2, float2(_943, _944), 0.0f);
  float _949 = _947.x + -0.5f;
  float _950 = _949 * cb2_022x;
  float _951 = _950 + 0.5f;
  float _952 = _951 * 2.0f;
  float _953 = _952 * _933;
  float _954 = _952 * _934;
  float _955 = _952 * _935;
  float _959 = float((uint)(cb2_019z));
  float _960 = float((uint)(cb2_019w));
  float _961 = _959 + SV_Position.x;
  float _962 = _960 + SV_Position.y;
  uint _963 = uint(_961);
  uint _964 = uint(_962);
  uint _967 = cb2_019x + -1u;
  uint _968 = cb2_019y + -1u;
  int _969 = _963 & _967;
  int _970 = _964 & _968;
  float4 _971 = t3.Load(int3(_969, _970, 0));
  float _975 = _971.x * 2.0f;
  float _976 = _971.y * 2.0f;
  float _977 = _971.z * 2.0f;
  float _978 = _975 + -1.0f;
  float _979 = _976 + -1.0f;
  float _980 = _977 + -1.0f;
  float _981 = _978 * cb2_025w;
  float _982 = _979 * cb2_025w;
  float _983 = _980 * cb2_025w;
  float _984 = _981 + _953;
  float _985 = _982 + _954;
  float _986 = _983 + _955;
  float _987 = dot(float3(_984, _985, _986), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _984;
  SV_Target.y = _985;
  SV_Target.z = _986;
  SV_Target.w = _987;
  SV_Target_1.x = _987;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
