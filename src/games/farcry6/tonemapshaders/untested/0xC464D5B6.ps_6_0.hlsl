#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = _21.x * 6.283199787139893f;
  float _26 = cos(_25);
  float _27 = sin(_25);
  float _28 = _26 * _21.z;
  float _29 = _27 * _21.z;
  float _30 = _28 + TEXCOORD0_centroid.x;
  float _31 = _29 + TEXCOORD0_centroid.y;
  float _32 = _30 * 10.0f;
  float _33 = 10.0f - _32;
  float _34 = min(_32, _33);
  float _35 = saturate(_34);
  float _36 = _35 * _28;
  float _37 = _31 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _29;
  float _42 = _36 + TEXCOORD0_centroid.x;
  float _43 = _41 + TEXCOORD0_centroid.y;
  float4 _44 = t6.SampleLevel(s2_space2, float2(_42, _43), 0.0f);
  float _46 = _44.w * _36;
  float _47 = _44.w * _41;
  float _48 = 1.0f - _21.y;
  float _49 = saturate(_48);
  float _50 = _46 * _49;
  float _51 = _47 * _49;
  float _52 = _50 + TEXCOORD0_centroid.x;
  float _53 = _51 + TEXCOORD0_centroid.y;
  float4 _54 = t6.SampleLevel(s2_space2, float2(_52, _53), 0.0f);
  bool _56 = (_54.y > 0.0f);
  float _57 = select(_56, TEXCOORD0_centroid.x, _52);
  float _58 = select(_56, TEXCOORD0_centroid.y, _53);
  float4 _59 = t1.SampleLevel(s4_space2, float2(_57, _58), 0.0f);
  float _63 = max(_59.x, 0.0f);
  float _64 = max(_59.y, 0.0f);
  float _65 = max(_59.z, 0.0f);
  float _66 = min(_63, 65000.0f);
  float _67 = min(_64, 65000.0f);
  float _68 = min(_65, 65000.0f);
  float4 _69 = t3.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  float _74 = max(_69.x, 0.0f);
  float _75 = max(_69.y, 0.0f);
  float _76 = max(_69.z, 0.0f);
  float _77 = max(_69.w, 0.0f);
  float _78 = min(_74, 5000.0f);
  float _79 = min(_75, 5000.0f);
  float _80 = min(_76, 5000.0f);
  float _81 = min(_77, 5000.0f);
  float _84 = _19.x * cb0_028z;
  float _85 = _84 + cb0_028x;
  float _86 = cb2_027w / _85;
  float _87 = 1.0f - _86;
  float _88 = abs(_87);
  float _90 = cb2_027y * _88;
  float _92 = _90 - cb2_027z;
  float _93 = saturate(_92);
  float _94 = max(_93, _81);
  float _95 = saturate(_94);
  float4 _96 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _100 = _78 - _66;
  float _101 = _79 - _67;
  float _102 = _80 - _68;
  float _103 = _95 * _100;
  float _104 = _95 * _101;
  float _105 = _95 * _102;
  float _106 = _103 + _66;
  float _107 = _104 + _67;
  float _108 = _105 + _68;
  float _109 = dot(float3(_106, _107, _108), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _113 = t0[0].SExposureData_020;
  float _115 = t0[0].SExposureData_004;
  float _117 = cb2_018x * 0.5f;
  float _118 = _117 * cb2_018y;
  float _119 = _115.x - _118;
  float _120 = cb2_018y * cb2_018x;
  float _121 = 1.0f / _120;
  float _122 = _119 * _121;
  float _123 = _109 / _113.x;
  float _124 = _123 * 5464.01611328125f;
  float _125 = _124 + 9.99999993922529e-09f;
  float _126 = log2(_125);
  float _127 = _126 - _119;
  float _128 = _127 * _121;
  float _129 = saturate(_128);
  float2 _130 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _129), 0.0f);
  float _133 = max(_130.y, 1.0000000116860974e-07f);
  float _134 = _130.x / _133;
  float _135 = _134 + _122;
  float _136 = _135 / _121;
  float _137 = _136 - _115.x;
  float _138 = -0.0f - _137;
  float _140 = _138 - cb2_027x;
  float _141 = max(0.0f, _140);
  float _144 = cb2_026z * _141;
  float _145 = _137 - cb2_027x;
  float _146 = max(0.0f, _145);
  float _148 = cb2_026w * _146;
  bool _149 = (_137 < 0.0f);
  float _150 = select(_149, _144, _148);
  float _151 = exp2(_150);
  float _152 = _151 * _106;
  float _153 = _151 * _107;
  float _154 = _151 * _108;
  float _159 = cb2_024y * _96.x;
  float _160 = cb2_024z * _96.y;
  float _161 = cb2_024w * _96.z;
  float _162 = _159 + _152;
  float _163 = _160 + _153;
  float _164 = _161 + _154;
  float _169 = _162 * cb2_025x;
  float _170 = _163 * cb2_025y;
  float _171 = _164 * cb2_025z;
  float _172 = dot(float3(_169, _170, _171), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _173 = t0[0].SExposureData_012;
  float _175 = _172 * 5464.01611328125f;
  float _176 = _175 * _173.x;
  float _177 = _176 + 9.99999993922529e-09f;
  float _178 = log2(_177);
  float _179 = _178 + 16.929765701293945f;
  float _180 = _179 * 0.05734497308731079f;
  float _181 = saturate(_180);
  float _182 = _181 * _181;
  float _183 = _181 * 2.0f;
  float _184 = 3.0f - _183;
  float _185 = _182 * _184;
  float _186 = _170 * 0.8450999855995178f;
  float _187 = _171 * 0.14589999616146088f;
  float _188 = _186 + _187;
  float _189 = _188 * 2.4890189170837402f;
  float _190 = _188 * 0.3754962384700775f;
  float _191 = _188 * 2.811495304107666f;
  float _192 = _188 * 5.519708156585693f;
  float _193 = _172 - _189;
  float _194 = _185 * _193;
  float _195 = _194 + _189;
  float _196 = _185 * 0.5f;
  float _197 = _196 + 0.5f;
  float _198 = _197 * _193;
  float _199 = _198 + _189;
  float _200 = _169 - _190;
  float _201 = _170 - _191;
  float _202 = _171 - _192;
  float _203 = _197 * _200;
  float _204 = _197 * _201;
  float _205 = _197 * _202;
  float _206 = _203 + _190;
  float _207 = _204 + _191;
  float _208 = _205 + _192;
  float _209 = 1.0f / _199;
  float _210 = _195 * _209;
  float _211 = _210 * _206;
  float _212 = _210 * _207;
  float _213 = _210 * _208;
  float _217 = cb2_020x * TEXCOORD0_centroid.x;
  float _218 = cb2_020y * TEXCOORD0_centroid.y;
  float _221 = _217 + cb2_020z;
  float _222 = _218 + cb2_020w;
  float _225 = dot(float2(_221, _222), float2(_221, _222));
  float _226 = 1.0f - _225;
  float _227 = saturate(_226);
  float _228 = log2(_227);
  float _229 = _228 * cb2_021w;
  float _230 = exp2(_229);
  float _234 = _211 - cb2_021x;
  float _235 = _212 - cb2_021y;
  float _236 = _213 - cb2_021z;
  float _237 = _234 * _230;
  float _238 = _235 * _230;
  float _239 = _236 * _230;
  float _240 = _237 + cb2_021x;
  float _241 = _238 + cb2_021y;
  float _242 = _239 + cb2_021z;
  float _243 = t0[0].SExposureData_000;
  float _245 = max(_113.x, 0.0010000000474974513f);
  float _246 = 1.0f / _245;
  float _247 = _246 * _243.x;
  bool _250 = ((uint)(cb2_069y) == 0);
  float _256;
  float _257;
  float _258;
  float _312;
  float _313;
  float _314;
  float _344;
  float _345;
  float _346;
  float _496;
  float _533;
  float _534;
  float _535;
  float _564;
  float _565;
  float _566;
  float _647;
  float _648;
  float _649;
  float _655;
  float _656;
  float _657;
  float _671;
  float _672;
  float _673;
  float _698;
  float _710;
  float _738;
  float _750;
  float _762;
  float _763;
  float _764;
  float _791;
  float _792;
  float _793;
  if (!_250) {
    float _252 = _247 * _240;
    float _253 = _247 * _241;
    float _254 = _247 * _242;
    _256 = _252;
    _257 = _253;
    _258 = _254;
  } else {
    _256 = _240;
    _257 = _241;
    _258 = _242;
  }
  float _259 = _256 * 0.6130970120429993f;
  float _260 = mad(0.33952298760414124f, _257, _259);
  float _261 = mad(0.04737899824976921f, _258, _260);
  float _262 = _256 * 0.07019399851560593f;
  float _263 = mad(0.9163540005683899f, _257, _262);
  float _264 = mad(0.013451999984681606f, _258, _263);
  float _265 = _256 * 0.02061600051820278f;
  float _266 = mad(0.10956999659538269f, _257, _265);
  float _267 = mad(0.8698149919509888f, _258, _266);
  float _268 = log2(_261);
  float _269 = log2(_264);
  float _270 = log2(_267);
  float _271 = _268 * 0.04211956635117531f;
  float _272 = _269 * 0.04211956635117531f;
  float _273 = _270 * 0.04211956635117531f;
  float _274 = _271 + 0.6252607107162476f;
  float _275 = _272 + 0.6252607107162476f;
  float _276 = _273 + 0.6252607107162476f;
  float4 _277 = t5.SampleLevel(s2_space2, float3(_274, _275, _276), 0.0f);
  bool _283 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_283 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _287 = cb2_017x * _277.x;
    float _288 = cb2_017x * _277.y;
    float _289 = cb2_017x * _277.z;
    float _291 = _287 + cb2_017y;
    float _292 = _288 + cb2_017y;
    float _293 = _289 + cb2_017y;
    float _294 = exp2(_291);
    float _295 = exp2(_292);
    float _296 = exp2(_293);
    float _297 = _294 + 1.0f;
    float _298 = _295 + 1.0f;
    float _299 = _296 + 1.0f;
    float _300 = 1.0f / _297;
    float _301 = 1.0f / _298;
    float _302 = 1.0f / _299;
    float _304 = cb2_017z * _300;
    float _305 = cb2_017z * _301;
    float _306 = cb2_017z * _302;
    float _308 = _304 + cb2_017w;
    float _309 = _305 + cb2_017w;
    float _310 = _306 + cb2_017w;
    _312 = _308;
    _313 = _309;
    _314 = _310;
  } else {
    _312 = _277.x;
    _313 = _277.y;
    _314 = _277.z;
  }
  float _315 = _312 * 23.0f;
  float _316 = _315 + -14.473931312561035f;
  float _317 = exp2(_316);
  float _318 = _313 * 23.0f;
  float _319 = _318 + -14.473931312561035f;
  float _320 = exp2(_319);
  float _321 = _314 * 23.0f;
  float _322 = _321 + -14.473931312561035f;
  float _323 = exp2(_322);
  float _329 = cb2_016x - _317;
  float _330 = cb2_016y - _320;
  float _331 = cb2_016z - _323;
  float _332 = _329 * cb2_016w;
  float _333 = _330 * cb2_016w;
  float _334 = _331 * cb2_016w;
  float _335 = _332 + _317;
  float _336 = _333 + _320;
  float _337 = _334 + _323;
  if (_283 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _340 = cb2_024x * _335;
    float _341 = cb2_024x * _336;
    float _342 = cb2_024x * _337;
    _344 = _340;
    _345 = _341;
    _346 = _342;
  } else {
    _344 = _335;
    _345 = _336;
    _346 = _337;
  }
  float _349 = _344 * 0.9708889722824097f;
  float _350 = mad(0.026962999254465103f, _345, _349);
  float _351 = mad(0.002148000057786703f, _346, _350);
  float _352 = _344 * 0.01088900025933981f;
  float _353 = mad(0.9869629740715027f, _345, _352);
  float _354 = mad(0.002148000057786703f, _346, _353);
  float _355 = mad(0.026962999254465103f, _345, _352);
  float _356 = mad(0.9621480107307434f, _346, _355);
  float _357 = max(_351, 0.0f);
  float _358 = max(_354, 0.0f);
  float _359 = max(_356, 0.0f);
  float _360 = min(_357, cb2_095y);
  float _361 = min(_358, cb2_095y);
  float _362 = min(_359, cb2_095y);
  bool _365 = ((uint)(cb2_095x) == 0);
  bool _368 = ((uint)(cb2_094w) == 0);
  bool _370 = ((uint)(cb2_094z) == 0);
  bool _372 = ((uint)(cb2_094y) != 0);
  bool _374 = ((uint)(cb2_094x) == 0);
  bool _376 = ((uint)(cb2_069z) != 0);
  float _423 = asfloat((uint)(cb2_075y));
  float _424 = asfloat((uint)(cb2_075z));
  float _425 = asfloat((uint)(cb2_075w));
  float _426 = asfloat((uint)(cb2_074z));
  float _427 = asfloat((uint)(cb2_074w));
  float _428 = asfloat((uint)(cb2_075x));
  float _429 = asfloat((uint)(cb2_073w));
  float _430 = asfloat((uint)(cb2_074x));
  float _431 = asfloat((uint)(cb2_074y));
  float _432 = asfloat((uint)(cb2_077x));
  float _433 = asfloat((uint)(cb2_077y));
  float _434 = asfloat((uint)(cb2_079x));
  float _435 = asfloat((uint)(cb2_079y));
  float _436 = asfloat((uint)(cb2_079z));
  float _437 = asfloat((uint)(cb2_078y));
  float _438 = asfloat((uint)(cb2_078z));
  float _439 = asfloat((uint)(cb2_078w));
  float _440 = asfloat((uint)(cb2_077z));
  float _441 = asfloat((uint)(cb2_077w));
  float _442 = asfloat((uint)(cb2_078x));
  float _443 = asfloat((uint)(cb2_072y));
  float _444 = asfloat((uint)(cb2_072z));
  float _445 = asfloat((uint)(cb2_072w));
  float _446 = asfloat((uint)(cb2_071x));
  float _447 = asfloat((uint)(cb2_071y));
  float _448 = asfloat((uint)(cb2_076x));
  float _449 = asfloat((uint)(cb2_070w));
  float _450 = asfloat((uint)(cb2_070x));
  float _451 = asfloat((uint)(cb2_070y));
  float _452 = asfloat((uint)(cb2_070z));
  float _453 = asfloat((uint)(cb2_073x));
  float _454 = asfloat((uint)(cb2_073y));
  float _455 = asfloat((uint)(cb2_073z));
  float _456 = asfloat((uint)(cb2_071z));
  float _457 = asfloat((uint)(cb2_071w));
  float _458 = asfloat((uint)(cb2_072x));
  float _459 = max(_361, _362);
  float _460 = max(_360, _459);
  float _461 = 1.0f / _460;
  float _462 = _461 * _360;
  float _463 = _461 * _361;
  float _464 = _461 * _362;
  float _465 = abs(_462);
  float _466 = log2(_465);
  float _467 = _466 * _450;
  float _468 = exp2(_467);
  float _469 = abs(_463);
  float _470 = log2(_469);
  float _471 = _470 * _451;
  float _472 = exp2(_471);
  float _473 = abs(_464);
  float _474 = log2(_473);
  float _475 = _474 * _452;
  float _476 = exp2(_475);
  if (_372) {
    float _479 = asfloat((uint)(cb2_076w));
    float _481 = asfloat((uint)(cb2_076z));
    float _483 = asfloat((uint)(cb2_076y));
    float _484 = _481 * _361;
    float _485 = _483 * _360;
    float _486 = _479 * _362;
    float _487 = _485 + _486;
    float _488 = _487 + _484;
    _496 = _488;
  } else {
    float _490 = _457 * _361;
    float _491 = _456 * _360;
    float _492 = _458 * _362;
    float _493 = _490 + _491;
    float _494 = _493 + _492;
    _496 = _494;
  }
  float _497 = abs(_496);
  float _498 = log2(_497);
  float _499 = _498 * _449;
  float _500 = exp2(_499);
  float _501 = log2(_500);
  float _502 = _501 * _448;
  float _503 = exp2(_502);
  float _504 = select(_376, _503, _500);
  float _505 = _504 * _446;
  float _506 = _505 + _447;
  float _507 = 1.0f / _506;
  float _508 = _507 * _500;
  if (_372) {
    if (!_374) {
      float _511 = _468 * _440;
      float _512 = _472 * _441;
      float _513 = _476 * _442;
      float _514 = _512 + _511;
      float _515 = _514 + _513;
      float _516 = _472 * _438;
      float _517 = _468 * _437;
      float _518 = _476 * _439;
      float _519 = _516 + _517;
      float _520 = _519 + _518;
      float _521 = _476 * _436;
      float _522 = _472 * _435;
      float _523 = _468 * _434;
      float _524 = _522 + _523;
      float _525 = _524 + _521;
      float _526 = max(_520, _525);
      float _527 = max(_515, _526);
      float _528 = 1.0f / _527;
      float _529 = _528 * _515;
      float _530 = _528 * _520;
      float _531 = _528 * _525;
      _533 = _529;
      _534 = _530;
      _535 = _531;
    } else {
      _533 = _468;
      _534 = _472;
      _535 = _476;
    }
    float _536 = _533 * _433;
    float _537 = exp2(_536);
    float _538 = _537 * _432;
    float _539 = saturate(_538);
    float _540 = _533 * _432;
    float _541 = _533 - _540;
    float _542 = saturate(_541);
    float _543 = max(_432, _542);
    float _544 = min(_543, _539);
    float _545 = _534 * _433;
    float _546 = exp2(_545);
    float _547 = _546 * _432;
    float _548 = saturate(_547);
    float _549 = _534 * _432;
    float _550 = _534 - _549;
    float _551 = saturate(_550);
    float _552 = max(_432, _551);
    float _553 = min(_552, _548);
    float _554 = _535 * _433;
    float _555 = exp2(_554);
    float _556 = _555 * _432;
    float _557 = saturate(_556);
    float _558 = _535 * _432;
    float _559 = _535 - _558;
    float _560 = saturate(_559);
    float _561 = max(_432, _560);
    float _562 = min(_561, _557);
    _564 = _544;
    _565 = _553;
    _566 = _562;
  } else {
    _564 = _468;
    _565 = _472;
    _566 = _476;
  }
  float _567 = _564 * _456;
  float _568 = _565 * _457;
  float _569 = _568 + _567;
  float _570 = _566 * _458;
  float _571 = _569 + _570;
  float _572 = 1.0f / _571;
  float _573 = _572 * _508;
  float _574 = saturate(_573);
  float _575 = _574 * _564;
  float _576 = saturate(_575);
  float _577 = _574 * _565;
  float _578 = saturate(_577);
  float _579 = _574 * _566;
  float _580 = saturate(_579);
  float _581 = _576 * _443;
  float _582 = _443 - _581;
  float _583 = _578 * _444;
  float _584 = _444 - _583;
  float _585 = _580 * _445;
  float _586 = _445 - _585;
  float _587 = _580 * _458;
  float _588 = _576 * _456;
  float _589 = _578 * _457;
  float _590 = _508 - _588;
  float _591 = _590 - _589;
  float _592 = _591 - _587;
  float _593 = saturate(_592);
  float _594 = _584 * _457;
  float _595 = _582 * _456;
  float _596 = _586 * _458;
  float _597 = _594 + _595;
  float _598 = _597 + _596;
  float _599 = 1.0f / _598;
  float _600 = _599 * _593;
  float _601 = _600 * _582;
  float _602 = _601 + _576;
  float _603 = saturate(_602);
  float _604 = _600 * _584;
  float _605 = _604 + _578;
  float _606 = saturate(_605);
  float _607 = _600 * _586;
  float _608 = _607 + _580;
  float _609 = saturate(_608);
  float _610 = _609 * _458;
  float _611 = _603 * _456;
  float _612 = _606 * _457;
  float _613 = _508 - _611;
  float _614 = _613 - _612;
  float _615 = _614 - _610;
  float _616 = saturate(_615);
  float _617 = _616 * _453;
  float _618 = _617 + _603;
  float _619 = saturate(_618);
  float _620 = _616 * _454;
  float _621 = _620 + _606;
  float _622 = saturate(_621);
  float _623 = _616 * _455;
  float _624 = _623 + _609;
  float _625 = saturate(_624);
  if (!_370) {
    float _627 = _619 * _429;
    float _628 = _622 * _430;
    float _629 = _625 * _431;
    float _630 = _628 + _627;
    float _631 = _630 + _629;
    float _632 = _622 * _427;
    float _633 = _619 * _426;
    float _634 = _625 * _428;
    float _635 = _632 + _633;
    float _636 = _635 + _634;
    float _637 = _625 * _425;
    float _638 = _622 * _424;
    float _639 = _619 * _423;
    float _640 = _638 + _639;
    float _641 = _640 + _637;
    if (!_368) {
      float _643 = saturate(_631);
      float _644 = saturate(_636);
      float _645 = saturate(_641);
      _647 = _645;
      _648 = _644;
      _649 = _643;
    } else {
      _647 = _641;
      _648 = _636;
      _649 = _631;
    }
  } else {
    _647 = _625;
    _648 = _622;
    _649 = _619;
  }
  if (!_365) {
    float _651 = _649 * _429;
    float _652 = _648 * _429;
    float _653 = _647 * _429;
    _655 = _653;
    _656 = _652;
    _657 = _651;
  } else {
    _655 = _647;
    _656 = _648;
    _657 = _649;
  }
  if (_283) {
    float _661 = cb1_018z * 9.999999747378752e-05f;
    float _662 = _661 * _657;
    float _663 = _661 * _656;
    float _664 = _661 * _655;
    float _666 = 5000.0f / cb1_018y;
    float _667 = _662 * _666;
    float _668 = _663 * _666;
    float _669 = _664 * _666;
    _671 = _667;
    _672 = _668;
    _673 = _669;
  } else {
    _671 = _657;
    _672 = _656;
    _673 = _655;
  }
  float _674 = _671 * 1.6047500371932983f;
  float _675 = mad(-0.5310800075531006f, _672, _674);
  float _676 = mad(-0.07366999983787537f, _673, _675);
  float _677 = _671 * -0.10208000242710114f;
  float _678 = mad(1.1081299781799316f, _672, _677);
  float _679 = mad(-0.006049999967217445f, _673, _678);
  float _680 = _671 * -0.0032599999103695154f;
  float _681 = mad(-0.07275000214576721f, _672, _680);
  float _682 = mad(1.0760200023651123f, _673, _681);
  if (_283) {
    // float _684 = max(_676, 0.0f);
    // float _685 = max(_679, 0.0f);
    // float _686 = max(_682, 0.0f);
    // bool _687 = !(_684 >= 0.0030399328097701073f);
    // if (!_687) {
    //   float _689 = abs(_684);
    //   float _690 = log2(_689);
    //   float _691 = _690 * 0.4166666567325592f;
    //   float _692 = exp2(_691);
    //   float _693 = _692 * 1.0549999475479126f;
    //   float _694 = _693 + -0.054999999701976776f;
    //   _698 = _694;
    // } else {
    //   float _696 = _684 * 12.923210144042969f;
    //   _698 = _696;
    // }
    // bool _699 = !(_685 >= 0.0030399328097701073f);
    // if (!_699) {
    //   float _701 = abs(_685);
    //   float _702 = log2(_701);
    //   float _703 = _702 * 0.4166666567325592f;
    //   float _704 = exp2(_703);
    //   float _705 = _704 * 1.0549999475479126f;
    //   float _706 = _705 + -0.054999999701976776f;
    //   _710 = _706;
    // } else {
    //   float _708 = _685 * 12.923210144042969f;
    //   _710 = _708;
    // }
    // bool _711 = !(_686 >= 0.0030399328097701073f);
    // if (!_711) {
    //   float _713 = abs(_686);
    //   float _714 = log2(_713);
    //   float _715 = _714 * 0.4166666567325592f;
    //   float _716 = exp2(_715);
    //   float _717 = _716 * 1.0549999475479126f;
    //   float _718 = _717 + -0.054999999701976776f;
    //   _791 = _698;
    //   _792 = _710;
    //   _793 = _718;
    // } else {
    //   float _720 = _686 * 12.923210144042969f;
    //   _791 = _698;
    //   _792 = _710;
    //   _793 = _720;
    // }
    _791 = renodx::color::srgb::EncodeSafe(_676);
    _792 = renodx::color::srgb::EncodeSafe(_679);
    _793 = renodx::color::srgb::EncodeSafe(_682);

  } else {
    float _722 = saturate(_676);
    float _723 = saturate(_679);
    float _724 = saturate(_682);
    bool _725 = ((uint)(cb1_018w) == -2);
    if (!_725) {
      bool _727 = !(_722 >= 0.0030399328097701073f);
      if (!_727) {
        float _729 = abs(_722);
        float _730 = log2(_729);
        float _731 = _730 * 0.4166666567325592f;
        float _732 = exp2(_731);
        float _733 = _732 * 1.0549999475479126f;
        float _734 = _733 + -0.054999999701976776f;
        _738 = _734;
      } else {
        float _736 = _722 * 12.923210144042969f;
        _738 = _736;
      }
      bool _739 = !(_723 >= 0.0030399328097701073f);
      if (!_739) {
        float _741 = abs(_723);
        float _742 = log2(_741);
        float _743 = _742 * 0.4166666567325592f;
        float _744 = exp2(_743);
        float _745 = _744 * 1.0549999475479126f;
        float _746 = _745 + -0.054999999701976776f;
        _750 = _746;
      } else {
        float _748 = _723 * 12.923210144042969f;
        _750 = _748;
      }
      bool _751 = !(_724 >= 0.0030399328097701073f);
      if (!_751) {
        float _753 = abs(_724);
        float _754 = log2(_753);
        float _755 = _754 * 0.4166666567325592f;
        float _756 = exp2(_755);
        float _757 = _756 * 1.0549999475479126f;
        float _758 = _757 + -0.054999999701976776f;
        _762 = _738;
        _763 = _750;
        _764 = _758;
      } else {
        float _760 = _724 * 12.923210144042969f;
        _762 = _738;
        _763 = _750;
        _764 = _760;
      }
    } else {
      _762 = _722;
      _763 = _723;
      _764 = _724;
    }
    float _769 = abs(_762);
    float _770 = abs(_763);
    float _771 = abs(_764);
    float _772 = log2(_769);
    float _773 = log2(_770);
    float _774 = log2(_771);
    float _775 = _772 * cb2_000z;
    float _776 = _773 * cb2_000z;
    float _777 = _774 * cb2_000z;
    float _778 = exp2(_775);
    float _779 = exp2(_776);
    float _780 = exp2(_777);
    float _781 = _778 * cb2_000y;
    float _782 = _779 * cb2_000y;
    float _783 = _780 * cb2_000y;
    float _784 = _781 + cb2_000x;
    float _785 = _782 + cb2_000x;
    float _786 = _783 + cb2_000x;
    float _787 = saturate(_784);
    float _788 = saturate(_785);
    float _789 = saturate(_786);
    _791 = _787;
    _792 = _788;
    _793 = _789;
  }
  float _794 = dot(float3(_791, _792, _793), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _791;
  SV_Target.y = _792;
  SV_Target.z = _793;
  SV_Target.w = _794;
  SV_Target_1.x = _794;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
