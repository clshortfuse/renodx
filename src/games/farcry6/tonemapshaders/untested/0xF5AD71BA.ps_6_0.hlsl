#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = cb2_015x * TEXCOORD0_centroid.x;
  float _30 = cb2_015y * TEXCOORD0_centroid.y;
  float _33 = _29 + cb2_015z;
  float _34 = _30 + cb2_015w;
  float4 _35 = t7.SampleLevel(s0_space2, float2(_33, _34), 0.0f);
  float _39 = saturate(_35.x);
  float _40 = saturate(_35.z);
  float _43 = cb2_026x * _40;
  float _44 = _39 * 6.283199787139893f;
  float _45 = cos(_44);
  float _46 = sin(_44);
  float _47 = _43 * _45;
  float _48 = _46 * _43;
  float _49 = 1.0f - _35.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t1.SampleLevel(s4_space2, float2(_53, _54), 0.0f);
  float _59 = max(_55.x, 0.0f);
  float _60 = max(_55.y, 0.0f);
  float _61 = max(_55.z, 0.0f);
  float _62 = min(_59, 65000.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float4 _65 = t4.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  float _70 = max(_65.x, 0.0f);
  float _71 = max(_65.y, 0.0f);
  float _72 = max(_65.z, 0.0f);
  float _73 = max(_65.w, 0.0f);
  float _74 = min(_70, 5000.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _80 = _24.x * cb0_028z;
  float _81 = _80 + cb0_028x;
  float _82 = cb2_027w / _81;
  float _83 = 1.0f - _82;
  float _84 = abs(_83);
  float _86 = cb2_027y * _84;
  float _88 = _86 - cb2_027z;
  float _89 = saturate(_88);
  float _90 = max(_89, _77);
  float _91 = saturate(_90);
  float _95 = cb2_013x * _53;
  float _96 = cb2_013y * _54;
  float _99 = _95 + cb2_013z;
  float _100 = _96 + cb2_013w;
  float _103 = dot(float2(_99, _100), float2(_99, _100));
  float _104 = abs(_103);
  float _105 = log2(_104);
  float _106 = _105 * cb2_014x;
  float _107 = exp2(_106);
  float _108 = saturate(_107);
  float _112 = cb2_011x * _53;
  float _113 = cb2_011y * _54;
  float _116 = _112 + cb2_011z;
  float _117 = _113 + cb2_011w;
  float _118 = _116 * _108;
  float _119 = _117 * _108;
  float _120 = _118 + _53;
  float _121 = _119 + _54;
  float _125 = cb2_012x * _53;
  float _126 = cb2_012y * _54;
  float _129 = _125 + cb2_012z;
  float _130 = _126 + cb2_012w;
  float _131 = _129 * _108;
  float _132 = _130 * _108;
  float _133 = _131 + _53;
  float _134 = _132 + _54;
  float4 _135 = t1.SampleLevel(s2_space2, float2(_120, _121), 0.0f);
  float _139 = max(_135.x, 0.0f);
  float _140 = max(_135.y, 0.0f);
  float _141 = max(_135.z, 0.0f);
  float _142 = min(_139, 65000.0f);
  float _143 = min(_140, 65000.0f);
  float _144 = min(_141, 65000.0f);
  float4 _145 = t1.SampleLevel(s2_space2, float2(_133, _134), 0.0f);
  float _149 = max(_145.x, 0.0f);
  float _150 = max(_145.y, 0.0f);
  float _151 = max(_145.z, 0.0f);
  float _152 = min(_149, 65000.0f);
  float _153 = min(_150, 65000.0f);
  float _154 = min(_151, 65000.0f);
  float4 _155 = t4.SampleLevel(s2_space2, float2(_120, _121), 0.0f);
  float _159 = max(_155.x, 0.0f);
  float _160 = max(_155.y, 0.0f);
  float _161 = max(_155.z, 0.0f);
  float _162 = min(_159, 5000.0f);
  float _163 = min(_160, 5000.0f);
  float _164 = min(_161, 5000.0f);
  float4 _165 = t4.SampleLevel(s2_space2, float2(_133, _134), 0.0f);
  float _169 = max(_165.x, 0.0f);
  float _170 = max(_165.y, 0.0f);
  float _171 = max(_165.z, 0.0f);
  float _172 = min(_169, 5000.0f);
  float _173 = min(_170, 5000.0f);
  float _174 = min(_171, 5000.0f);
  float _179 = 1.0f - cb2_009x;
  float _180 = 1.0f - cb2_009y;
  float _181 = 1.0f - cb2_009z;
  float _186 = _179 - cb2_010x;
  float _187 = _180 - cb2_010y;
  float _188 = _181 - cb2_010z;
  float _189 = saturate(_186);
  float _190 = saturate(_187);
  float _191 = saturate(_188);
  float _192 = _189 * _62;
  float _193 = _190 * _63;
  float _194 = _191 * _64;
  float _195 = cb2_009x * _142;
  float _196 = cb2_009y * _143;
  float _197 = cb2_009z * _144;
  float _198 = _195 + _192;
  float _199 = _196 + _193;
  float _200 = _197 + _194;
  float _201 = cb2_010x * _152;
  float _202 = cb2_010y * _153;
  float _203 = cb2_010z * _154;
  float _204 = _198 + _201;
  float _205 = _199 + _202;
  float _206 = _200 + _203;
  float _207 = _189 * _74;
  float _208 = _190 * _75;
  float _209 = _191 * _76;
  float _210 = cb2_009x * _162;
  float _211 = cb2_009y * _163;
  float _212 = cb2_009z * _164;
  float _213 = cb2_010x * _172;
  float _214 = cb2_010y * _173;
  float _215 = cb2_010z * _174;
  float4 _216 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _220 = _207 - _204;
  float _221 = _220 + _210;
  float _222 = _221 + _213;
  float _223 = _208 - _205;
  float _224 = _223 + _211;
  float _225 = _224 + _214;
  float _226 = _209 - _206;
  float _227 = _226 + _212;
  float _228 = _227 + _215;
  float _229 = _222 * _91;
  float _230 = _225 * _91;
  float _231 = _228 * _91;
  float _232 = _229 + _204;
  float _233 = _230 + _205;
  float _234 = _231 + _206;
  float _235 = dot(float3(_232, _233, _234), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _239 = t0[0].SExposureData_020;
  float _241 = t0[0].SExposureData_004;
  float _243 = cb2_018x * 0.5f;
  float _244 = _243 * cb2_018y;
  float _245 = _241.x - _244;
  float _246 = cb2_018y * cb2_018x;
  float _247 = 1.0f / _246;
  float _248 = _245 * _247;
  float _249 = _235 / _239.x;
  float _250 = _249 * 5464.01611328125f;
  float _251 = _250 + 9.99999993922529e-09f;
  float _252 = log2(_251);
  float _253 = _252 - _245;
  float _254 = _253 * _247;
  float _255 = saturate(_254);
  float2 _256 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _255), 0.0f);
  float _259 = max(_256.y, 1.0000000116860974e-07f);
  float _260 = _256.x / _259;
  float _261 = _260 + _248;
  float _262 = _261 / _247;
  float _263 = _262 - _241.x;
  float _264 = -0.0f - _263;
  float _266 = _264 - cb2_027x;
  float _267 = max(0.0f, _266);
  float _269 = cb2_026z * _267;
  float _270 = _263 - cb2_027x;
  float _271 = max(0.0f, _270);
  float _273 = cb2_026w * _271;
  bool _274 = (_263 < 0.0f);
  float _275 = select(_274, _269, _273);
  float _276 = exp2(_275);
  float _277 = _276 * _232;
  float _278 = _276 * _233;
  float _279 = _276 * _234;
  float _284 = cb2_024y * _216.x;
  float _285 = cb2_024z * _216.y;
  float _286 = cb2_024w * _216.z;
  float _287 = _284 + _277;
  float _288 = _285 + _278;
  float _289 = _286 + _279;
  float _294 = _287 * cb2_025x;
  float _295 = _288 * cb2_025y;
  float _296 = _289 * cb2_025z;
  float _297 = dot(float3(_294, _295, _296), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _298 = t0[0].SExposureData_012;
  float _300 = _297 * 5464.01611328125f;
  float _301 = _300 * _298.x;
  float _302 = _301 + 9.99999993922529e-09f;
  float _303 = log2(_302);
  float _304 = _303 + 16.929765701293945f;
  float _305 = _304 * 0.05734497308731079f;
  float _306 = saturate(_305);
  float _307 = _306 * _306;
  float _308 = _306 * 2.0f;
  float _309 = 3.0f - _308;
  float _310 = _307 * _309;
  float _311 = _295 * 0.8450999855995178f;
  float _312 = _296 * 0.14589999616146088f;
  float _313 = _311 + _312;
  float _314 = _313 * 2.4890189170837402f;
  float _315 = _313 * 0.3754962384700775f;
  float _316 = _313 * 2.811495304107666f;
  float _317 = _313 * 5.519708156585693f;
  float _318 = _297 - _314;
  float _319 = _310 * _318;
  float _320 = _319 + _314;
  float _321 = _310 * 0.5f;
  float _322 = _321 + 0.5f;
  float _323 = _322 * _318;
  float _324 = _323 + _314;
  float _325 = _294 - _315;
  float _326 = _295 - _316;
  float _327 = _296 - _317;
  float _328 = _322 * _325;
  float _329 = _322 * _326;
  float _330 = _322 * _327;
  float _331 = _328 + _315;
  float _332 = _329 + _316;
  float _333 = _330 + _317;
  float _334 = 1.0f / _324;
  float _335 = _320 * _334;
  float _336 = _335 * _331;
  float _337 = _335 * _332;
  float _338 = _335 * _333;
  float _342 = cb2_020x * TEXCOORD0_centroid.x;
  float _343 = cb2_020y * TEXCOORD0_centroid.y;
  float _346 = _342 + cb2_020z;
  float _347 = _343 + cb2_020w;
  float _350 = dot(float2(_346, _347), float2(_346, _347));
  float _351 = 1.0f - _350;
  float _352 = saturate(_351);
  float _353 = log2(_352);
  float _354 = _353 * cb2_021w;
  float _355 = exp2(_354);
  float _359 = _336 - cb2_021x;
  float _360 = _337 - cb2_021y;
  float _361 = _338 - cb2_021z;
  float _362 = _359 * _355;
  float _363 = _360 * _355;
  float _364 = _361 * _355;
  float _365 = _362 + cb2_021x;
  float _366 = _363 + cb2_021y;
  float _367 = _364 + cb2_021z;
  float _368 = t0[0].SExposureData_000;
  float _370 = max(_239.x, 0.0010000000474974513f);
  float _371 = 1.0f / _370;
  float _372 = _371 * _368.x;
  bool _375 = ((uint)(cb2_069y) == 0);
  float _381;
  float _382;
  float _383;
  float _437;
  float _438;
  float _439;
  float _515;
  float _516;
  float _517;
  float _667;
  float _704;
  float _705;
  float _706;
  float _735;
  float _736;
  float _737;
  float _818;
  float _819;
  float _820;
  float _826;
  float _827;
  float _828;
  float _842;
  float _843;
  float _844;
  float _869;
  float _881;
  float _909;
  float _921;
  float _933;
  float _934;
  float _935;
  float _962;
  float _963;
  float _964;
  if (!_375) {
    float _377 = _372 * _365;
    float _378 = _372 * _366;
    float _379 = _372 * _367;
    _381 = _377;
    _382 = _378;
    _383 = _379;
  } else {
    _381 = _365;
    _382 = _366;
    _383 = _367;
  }
  float _384 = _381 * 0.6130970120429993f;
  float _385 = mad(0.33952298760414124f, _382, _384);
  float _386 = mad(0.04737899824976921f, _383, _385);
  float _387 = _381 * 0.07019399851560593f;
  float _388 = mad(0.9163540005683899f, _382, _387);
  float _389 = mad(0.013451999984681606f, _383, _388);
  float _390 = _381 * 0.02061600051820278f;
  float _391 = mad(0.10956999659538269f, _382, _390);
  float _392 = mad(0.8698149919509888f, _383, _391);
  float _393 = log2(_386);
  float _394 = log2(_389);
  float _395 = log2(_392);
  float _396 = _393 * 0.04211956635117531f;
  float _397 = _394 * 0.04211956635117531f;
  float _398 = _395 * 0.04211956635117531f;
  float _399 = _396 + 0.6252607107162476f;
  float _400 = _397 + 0.6252607107162476f;
  float _401 = _398 + 0.6252607107162476f;
  float4 _402 = t6.SampleLevel(s2_space2, float3(_399, _400, _401), 0.0f);
  bool _408 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_408 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _412 = cb2_017x * _402.x;
    float _413 = cb2_017x * _402.y;
    float _414 = cb2_017x * _402.z;
    float _416 = _412 + cb2_017y;
    float _417 = _413 + cb2_017y;
    float _418 = _414 + cb2_017y;
    float _419 = exp2(_416);
    float _420 = exp2(_417);
    float _421 = exp2(_418);
    float _422 = _419 + 1.0f;
    float _423 = _420 + 1.0f;
    float _424 = _421 + 1.0f;
    float _425 = 1.0f / _422;
    float _426 = 1.0f / _423;
    float _427 = 1.0f / _424;
    float _429 = cb2_017z * _425;
    float _430 = cb2_017z * _426;
    float _431 = cb2_017z * _427;
    float _433 = _429 + cb2_017w;
    float _434 = _430 + cb2_017w;
    float _435 = _431 + cb2_017w;
    _437 = _433;
    _438 = _434;
    _439 = _435;
  } else {
    _437 = _402.x;
    _438 = _402.y;
    _439 = _402.z;
  }
  float _440 = _437 * 23.0f;
  float _441 = _440 + -14.473931312561035f;
  float _442 = exp2(_441);
  float _443 = _438 * 23.0f;
  float _444 = _443 + -14.473931312561035f;
  float _445 = exp2(_444);
  float _446 = _439 * 23.0f;
  float _447 = _446 + -14.473931312561035f;
  float _448 = exp2(_447);
  float _449 = dot(float3(_442, _445, _448), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _454 = dot(float3(_442, _445, _448), float3(_442, _445, _448));
  float _455 = rsqrt(_454);
  float _456 = _455 * _442;
  float _457 = _455 * _445;
  float _458 = _455 * _448;
  float _459 = cb2_001x - _456;
  float _460 = cb2_001y - _457;
  float _461 = cb2_001z - _458;
  float _462 = dot(float3(_459, _460, _461), float3(_459, _460, _461));
  float _465 = cb2_002z * _462;
  float _467 = _465 + cb2_002w;
  float _468 = saturate(_467);
  float _470 = cb2_002x * _468;
  float _471 = _449 - _442;
  float _472 = _449 - _445;
  float _473 = _449 - _448;
  float _474 = _470 * _471;
  float _475 = _470 * _472;
  float _476 = _470 * _473;
  float _477 = _474 + _442;
  float _478 = _475 + _445;
  float _479 = _476 + _448;
  float _481 = cb2_002y * _468;
  float _482 = 0.10000000149011612f - _477;
  float _483 = 0.10000000149011612f - _478;
  float _484 = 0.10000000149011612f - _479;
  float _485 = _482 * _481;
  float _486 = _483 * _481;
  float _487 = _484 * _481;
  float _488 = _485 + _477;
  float _489 = _486 + _478;
  float _490 = _487 + _479;
  float _491 = saturate(_488);
  float _492 = saturate(_489);
  float _493 = saturate(_490);
  float _500 = cb2_016x - _491;
  float _501 = cb2_016y - _492;
  float _502 = cb2_016z - _493;
  float _503 = _500 * cb2_016w;
  float _504 = _501 * cb2_016w;
  float _505 = _502 * cb2_016w;
  float _506 = _503 + _491;
  float _507 = _504 + _492;
  float _508 = _505 + _493;
  if (_408 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _511 = cb2_024x * _506;
    float _512 = cb2_024x * _507;
    float _513 = cb2_024x * _508;
    _515 = _511;
    _516 = _512;
    _517 = _513;
  } else {
    _515 = _506;
    _516 = _507;
    _517 = _508;
  }
  float _520 = _515 * 0.9708889722824097f;
  float _521 = mad(0.026962999254465103f, _516, _520);
  float _522 = mad(0.002148000057786703f, _517, _521);
  float _523 = _515 * 0.01088900025933981f;
  float _524 = mad(0.9869629740715027f, _516, _523);
  float _525 = mad(0.002148000057786703f, _517, _524);
  float _526 = mad(0.026962999254465103f, _516, _523);
  float _527 = mad(0.9621480107307434f, _517, _526);
  float _528 = max(_522, 0.0f);
  float _529 = max(_525, 0.0f);
  float _530 = max(_527, 0.0f);
  float _531 = min(_528, cb2_095y);
  float _532 = min(_529, cb2_095y);
  float _533 = min(_530, cb2_095y);
  bool _536 = ((uint)(cb2_095x) == 0);
  bool _539 = ((uint)(cb2_094w) == 0);
  bool _541 = ((uint)(cb2_094z) == 0);
  bool _543 = ((uint)(cb2_094y) != 0);
  bool _545 = ((uint)(cb2_094x) == 0);
  bool _547 = ((uint)(cb2_069z) != 0);
  float _594 = asfloat((uint)(cb2_075y));
  float _595 = asfloat((uint)(cb2_075z));
  float _596 = asfloat((uint)(cb2_075w));
  float _597 = asfloat((uint)(cb2_074z));
  float _598 = asfloat((uint)(cb2_074w));
  float _599 = asfloat((uint)(cb2_075x));
  float _600 = asfloat((uint)(cb2_073w));
  float _601 = asfloat((uint)(cb2_074x));
  float _602 = asfloat((uint)(cb2_074y));
  float _603 = asfloat((uint)(cb2_077x));
  float _604 = asfloat((uint)(cb2_077y));
  float _605 = asfloat((uint)(cb2_079x));
  float _606 = asfloat((uint)(cb2_079y));
  float _607 = asfloat((uint)(cb2_079z));
  float _608 = asfloat((uint)(cb2_078y));
  float _609 = asfloat((uint)(cb2_078z));
  float _610 = asfloat((uint)(cb2_078w));
  float _611 = asfloat((uint)(cb2_077z));
  float _612 = asfloat((uint)(cb2_077w));
  float _613 = asfloat((uint)(cb2_078x));
  float _614 = asfloat((uint)(cb2_072y));
  float _615 = asfloat((uint)(cb2_072z));
  float _616 = asfloat((uint)(cb2_072w));
  float _617 = asfloat((uint)(cb2_071x));
  float _618 = asfloat((uint)(cb2_071y));
  float _619 = asfloat((uint)(cb2_076x));
  float _620 = asfloat((uint)(cb2_070w));
  float _621 = asfloat((uint)(cb2_070x));
  float _622 = asfloat((uint)(cb2_070y));
  float _623 = asfloat((uint)(cb2_070z));
  float _624 = asfloat((uint)(cb2_073x));
  float _625 = asfloat((uint)(cb2_073y));
  float _626 = asfloat((uint)(cb2_073z));
  float _627 = asfloat((uint)(cb2_071z));
  float _628 = asfloat((uint)(cb2_071w));
  float _629 = asfloat((uint)(cb2_072x));
  float _630 = max(_532, _533);
  float _631 = max(_531, _630);
  float _632 = 1.0f / _631;
  float _633 = _632 * _531;
  float _634 = _632 * _532;
  float _635 = _632 * _533;
  float _636 = abs(_633);
  float _637 = log2(_636);
  float _638 = _637 * _621;
  float _639 = exp2(_638);
  float _640 = abs(_634);
  float _641 = log2(_640);
  float _642 = _641 * _622;
  float _643 = exp2(_642);
  float _644 = abs(_635);
  float _645 = log2(_644);
  float _646 = _645 * _623;
  float _647 = exp2(_646);
  if (_543) {
    float _650 = asfloat((uint)(cb2_076w));
    float _652 = asfloat((uint)(cb2_076z));
    float _654 = asfloat((uint)(cb2_076y));
    float _655 = _652 * _532;
    float _656 = _654 * _531;
    float _657 = _650 * _533;
    float _658 = _656 + _657;
    float _659 = _658 + _655;
    _667 = _659;
  } else {
    float _661 = _628 * _532;
    float _662 = _627 * _531;
    float _663 = _629 * _533;
    float _664 = _661 + _662;
    float _665 = _664 + _663;
    _667 = _665;
  }
  float _668 = abs(_667);
  float _669 = log2(_668);
  float _670 = _669 * _620;
  float _671 = exp2(_670);
  float _672 = log2(_671);
  float _673 = _672 * _619;
  float _674 = exp2(_673);
  float _675 = select(_547, _674, _671);
  float _676 = _675 * _617;
  float _677 = _676 + _618;
  float _678 = 1.0f / _677;
  float _679 = _678 * _671;
  if (_543) {
    if (!_545) {
      float _682 = _639 * _611;
      float _683 = _643 * _612;
      float _684 = _647 * _613;
      float _685 = _683 + _682;
      float _686 = _685 + _684;
      float _687 = _643 * _609;
      float _688 = _639 * _608;
      float _689 = _647 * _610;
      float _690 = _687 + _688;
      float _691 = _690 + _689;
      float _692 = _647 * _607;
      float _693 = _643 * _606;
      float _694 = _639 * _605;
      float _695 = _693 + _694;
      float _696 = _695 + _692;
      float _697 = max(_691, _696);
      float _698 = max(_686, _697);
      float _699 = 1.0f / _698;
      float _700 = _699 * _686;
      float _701 = _699 * _691;
      float _702 = _699 * _696;
      _704 = _700;
      _705 = _701;
      _706 = _702;
    } else {
      _704 = _639;
      _705 = _643;
      _706 = _647;
    }
    float _707 = _704 * _604;
    float _708 = exp2(_707);
    float _709 = _708 * _603;
    float _710 = saturate(_709);
    float _711 = _704 * _603;
    float _712 = _704 - _711;
    float _713 = saturate(_712);
    float _714 = max(_603, _713);
    float _715 = min(_714, _710);
    float _716 = _705 * _604;
    float _717 = exp2(_716);
    float _718 = _717 * _603;
    float _719 = saturate(_718);
    float _720 = _705 * _603;
    float _721 = _705 - _720;
    float _722 = saturate(_721);
    float _723 = max(_603, _722);
    float _724 = min(_723, _719);
    float _725 = _706 * _604;
    float _726 = exp2(_725);
    float _727 = _726 * _603;
    float _728 = saturate(_727);
    float _729 = _706 * _603;
    float _730 = _706 - _729;
    float _731 = saturate(_730);
    float _732 = max(_603, _731);
    float _733 = min(_732, _728);
    _735 = _715;
    _736 = _724;
    _737 = _733;
  } else {
    _735 = _639;
    _736 = _643;
    _737 = _647;
  }
  float _738 = _735 * _627;
  float _739 = _736 * _628;
  float _740 = _739 + _738;
  float _741 = _737 * _629;
  float _742 = _740 + _741;
  float _743 = 1.0f / _742;
  float _744 = _743 * _679;
  float _745 = saturate(_744);
  float _746 = _745 * _735;
  float _747 = saturate(_746);
  float _748 = _745 * _736;
  float _749 = saturate(_748);
  float _750 = _745 * _737;
  float _751 = saturate(_750);
  float _752 = _747 * _614;
  float _753 = _614 - _752;
  float _754 = _749 * _615;
  float _755 = _615 - _754;
  float _756 = _751 * _616;
  float _757 = _616 - _756;
  float _758 = _751 * _629;
  float _759 = _747 * _627;
  float _760 = _749 * _628;
  float _761 = _679 - _759;
  float _762 = _761 - _760;
  float _763 = _762 - _758;
  float _764 = saturate(_763);
  float _765 = _755 * _628;
  float _766 = _753 * _627;
  float _767 = _757 * _629;
  float _768 = _765 + _766;
  float _769 = _768 + _767;
  float _770 = 1.0f / _769;
  float _771 = _770 * _764;
  float _772 = _771 * _753;
  float _773 = _772 + _747;
  float _774 = saturate(_773);
  float _775 = _771 * _755;
  float _776 = _775 + _749;
  float _777 = saturate(_776);
  float _778 = _771 * _757;
  float _779 = _778 + _751;
  float _780 = saturate(_779);
  float _781 = _780 * _629;
  float _782 = _774 * _627;
  float _783 = _777 * _628;
  float _784 = _679 - _782;
  float _785 = _784 - _783;
  float _786 = _785 - _781;
  float _787 = saturate(_786);
  float _788 = _787 * _624;
  float _789 = _788 + _774;
  float _790 = saturate(_789);
  float _791 = _787 * _625;
  float _792 = _791 + _777;
  float _793 = saturate(_792);
  float _794 = _787 * _626;
  float _795 = _794 + _780;
  float _796 = saturate(_795);
  if (!_541) {
    float _798 = _790 * _600;
    float _799 = _793 * _601;
    float _800 = _796 * _602;
    float _801 = _799 + _798;
    float _802 = _801 + _800;
    float _803 = _793 * _598;
    float _804 = _790 * _597;
    float _805 = _796 * _599;
    float _806 = _803 + _804;
    float _807 = _806 + _805;
    float _808 = _796 * _596;
    float _809 = _793 * _595;
    float _810 = _790 * _594;
    float _811 = _809 + _810;
    float _812 = _811 + _808;
    if (!_539) {
      float _814 = saturate(_802);
      float _815 = saturate(_807);
      float _816 = saturate(_812);
      _818 = _816;
      _819 = _815;
      _820 = _814;
    } else {
      _818 = _812;
      _819 = _807;
      _820 = _802;
    }
  } else {
    _818 = _796;
    _819 = _793;
    _820 = _790;
  }
  if (!_536) {
    float _822 = _820 * _600;
    float _823 = _819 * _600;
    float _824 = _818 * _600;
    _826 = _824;
    _827 = _823;
    _828 = _822;
  } else {
    _826 = _818;
    _827 = _819;
    _828 = _820;
  }
  if (_408) {
    float _832 = cb1_018z * 9.999999747378752e-05f;
    float _833 = _832 * _828;
    float _834 = _832 * _827;
    float _835 = _832 * _826;
    float _837 = 5000.0f / cb1_018y;
    float _838 = _833 * _837;
    float _839 = _834 * _837;
    float _840 = _835 * _837;
    _842 = _838;
    _843 = _839;
    _844 = _840;
  } else {
    _842 = _828;
    _843 = _827;
    _844 = _826;
  }
  float _845 = _842 * 1.6047500371932983f;
  float _846 = mad(-0.5310800075531006f, _843, _845);
  float _847 = mad(-0.07366999983787537f, _844, _846);
  float _848 = _842 * -0.10208000242710114f;
  float _849 = mad(1.1081299781799316f, _843, _848);
  float _850 = mad(-0.006049999967217445f, _844, _849);
  float _851 = _842 * -0.0032599999103695154f;
  float _852 = mad(-0.07275000214576721f, _843, _851);
  float _853 = mad(1.0760200023651123f, _844, _852);
  if (_408) {
    // float _855 = max(_847, 0.0f);
    // float _856 = max(_850, 0.0f);
    // float _857 = max(_853, 0.0f);
    // bool _858 = !(_855 >= 0.0030399328097701073f);
    // if (!_858) {
    //   float _860 = abs(_855);
    //   float _861 = log2(_860);
    //   float _862 = _861 * 0.4166666567325592f;
    //   float _863 = exp2(_862);
    //   float _864 = _863 * 1.0549999475479126f;
    //   float _865 = _864 + -0.054999999701976776f;
    //   _869 = _865;
    // } else {
    //   float _867 = _855 * 12.923210144042969f;
    //   _869 = _867;
    // }
    // bool _870 = !(_856 >= 0.0030399328097701073f);
    // if (!_870) {
    //   float _872 = abs(_856);
    //   float _873 = log2(_872);
    //   float _874 = _873 * 0.4166666567325592f;
    //   float _875 = exp2(_874);
    //   float _876 = _875 * 1.0549999475479126f;
    //   float _877 = _876 + -0.054999999701976776f;
    //   _881 = _877;
    // } else {
    //   float _879 = _856 * 12.923210144042969f;
    //   _881 = _879;
    // }
    // bool _882 = !(_857 >= 0.0030399328097701073f);
    // if (!_882) {
    //   float _884 = abs(_857);
    //   float _885 = log2(_884);
    //   float _886 = _885 * 0.4166666567325592f;
    //   float _887 = exp2(_886);
    //   float _888 = _887 * 1.0549999475479126f;
    //   float _889 = _888 + -0.054999999701976776f;
    //   _962 = _869;
    //   _963 = _881;
    //   _964 = _889;
    // } else {
    //   float _891 = _857 * 12.923210144042969f;
    //   _962 = _869;
    //   _963 = _881;
    //   _964 = _891;
    // }
    _962 = renodx::color::srgb::EncodeSafe(_847);
    _963 = renodx::color::srgb::EncodeSafe(_850);
    _964 = renodx::color::srgb::EncodeSafe(_853);

  } else {
    float _893 = saturate(_847);
    float _894 = saturate(_850);
    float _895 = saturate(_853);
    bool _896 = ((uint)(cb1_018w) == -2);
    if (!_896) {
      bool _898 = !(_893 >= 0.0030399328097701073f);
      if (!_898) {
        float _900 = abs(_893);
        float _901 = log2(_900);
        float _902 = _901 * 0.4166666567325592f;
        float _903 = exp2(_902);
        float _904 = _903 * 1.0549999475479126f;
        float _905 = _904 + -0.054999999701976776f;
        _909 = _905;
      } else {
        float _907 = _893 * 12.923210144042969f;
        _909 = _907;
      }
      bool _910 = !(_894 >= 0.0030399328097701073f);
      if (!_910) {
        float _912 = abs(_894);
        float _913 = log2(_912);
        float _914 = _913 * 0.4166666567325592f;
        float _915 = exp2(_914);
        float _916 = _915 * 1.0549999475479126f;
        float _917 = _916 + -0.054999999701976776f;
        _921 = _917;
      } else {
        float _919 = _894 * 12.923210144042969f;
        _921 = _919;
      }
      bool _922 = !(_895 >= 0.0030399328097701073f);
      if (!_922) {
        float _924 = abs(_895);
        float _925 = log2(_924);
        float _926 = _925 * 0.4166666567325592f;
        float _927 = exp2(_926);
        float _928 = _927 * 1.0549999475479126f;
        float _929 = _928 + -0.054999999701976776f;
        _933 = _909;
        _934 = _921;
        _935 = _929;
      } else {
        float _931 = _895 * 12.923210144042969f;
        _933 = _909;
        _934 = _921;
        _935 = _931;
      }
    } else {
      _933 = _893;
      _934 = _894;
      _935 = _895;
    }
    float _940 = abs(_933);
    float _941 = abs(_934);
    float _942 = abs(_935);
    float _943 = log2(_940);
    float _944 = log2(_941);
    float _945 = log2(_942);
    float _946 = _943 * cb2_000z;
    float _947 = _944 * cb2_000z;
    float _948 = _945 * cb2_000z;
    float _949 = exp2(_946);
    float _950 = exp2(_947);
    float _951 = exp2(_948);
    float _952 = _949 * cb2_000y;
    float _953 = _950 * cb2_000y;
    float _954 = _951 * cb2_000y;
    float _955 = _952 + cb2_000x;
    float _956 = _953 + cb2_000x;
    float _957 = _954 + cb2_000x;
    float _958 = saturate(_955);
    float _959 = saturate(_956);
    float _960 = saturate(_957);
    _962 = _958;
    _963 = _959;
    _964 = _960;
  }
  float _968 = cb2_023x * TEXCOORD0_centroid.x;
  float _969 = cb2_023y * TEXCOORD0_centroid.y;
  float _972 = _968 + cb2_023z;
  float _973 = _969 + cb2_023w;
  float4 _976 = t9.SampleLevel(s0_space2, float2(_972, _973), 0.0f);
  float _978 = _976.x + -0.5f;
  float _979 = _978 * cb2_022x;
  float _980 = _979 + 0.5f;
  float _981 = _980 * 2.0f;
  float _982 = _981 * _962;
  float _983 = _981 * _963;
  float _984 = _981 * _964;
  float _988 = float((uint)(cb2_019z));
  float _989 = float((uint)(cb2_019w));
  float _990 = _988 + SV_Position.x;
  float _991 = _989 + SV_Position.y;
  uint _992 = uint(_990);
  uint _993 = uint(_991);
  uint _996 = cb2_019x + -1u;
  uint _997 = cb2_019y + -1u;
  int _998 = _992 & _996;
  int _999 = _993 & _997;
  float4 _1000 = t3.Load(int3(_998, _999, 0));
  float _1004 = _1000.x * 2.0f;
  float _1005 = _1000.y * 2.0f;
  float _1006 = _1000.z * 2.0f;
  float _1007 = _1004 + -1.0f;
  float _1008 = _1005 + -1.0f;
  float _1009 = _1006 + -1.0f;
  float _1010 = _1007 * cb2_025w;
  float _1011 = _1008 * cb2_025w;
  float _1012 = _1009 * cb2_025w;
  float _1013 = _1010 + _982;
  float _1014 = _1011 + _983;
  float _1015 = _1012 + _984;
  float _1016 = dot(float3(_1013, _1014, _1015), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1013;
  SV_Target.y = _1014;
  SV_Target.z = _1015;
  SV_Target.w = _1016;
  SV_Target_1.x = _1016;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
