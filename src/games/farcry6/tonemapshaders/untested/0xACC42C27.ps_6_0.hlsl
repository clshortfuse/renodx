#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = cb2_015x * TEXCOORD0_centroid.x;
  float _31 = cb2_015y * TEXCOORD0_centroid.y;
  float _34 = _30 + cb2_015z;
  float _35 = _31 + cb2_015w;
  float4 _36 = t8.SampleLevel(s0_space2, float2(_34, _35), 0.0f);
  float _40 = saturate(_36.x);
  float _41 = saturate(_36.z);
  float _44 = cb2_026x * _41;
  float _45 = _40 * 6.283199787139893f;
  float _46 = cos(_45);
  float _47 = sin(_45);
  float _48 = _44 * _46;
  float _49 = _47 * _44;
  float _50 = 1.0f - _36.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _54 = _52 + TEXCOORD0_centroid.x;
  float _55 = _53 + TEXCOORD0_centroid.y;
  float4 _56 = t1.SampleLevel(s4_space2, float2(_54, _55), 0.0f);
  float _60 = max(_56.x, 0.0f);
  float _61 = max(_56.y, 0.0f);
  float _62 = max(_56.z, 0.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float _65 = min(_62, 65000.0f);
  float4 _66 = t4.SampleLevel(s2_space2, float2(_54, _55), 0.0f);
  float _71 = max(_66.x, 0.0f);
  float _72 = max(_66.y, 0.0f);
  float _73 = max(_66.z, 0.0f);
  float _74 = max(_66.w, 0.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _78 = min(_74, 5000.0f);
  float _81 = _25.x * cb0_028z;
  float _82 = _81 + cb0_028x;
  float _83 = cb2_027w / _82;
  float _84 = 1.0f - _83;
  float _85 = abs(_84);
  float _87 = cb2_027y * _85;
  float _89 = _87 - cb2_027z;
  float _90 = saturate(_89);
  float _91 = max(_90, _78);
  float _92 = saturate(_91);
  float4 _93 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _97 = _75 - _63;
  float _98 = _76 - _64;
  float _99 = _77 - _65;
  float _100 = _92 * _97;
  float _101 = _92 * _98;
  float _102 = _92 * _99;
  float _103 = _100 + _63;
  float _104 = _101 + _64;
  float _105 = _102 + _65;
  float _106 = dot(float3(_103, _104, _105), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _110 = t0[0].SExposureData_020;
  float _112 = t0[0].SExposureData_004;
  float _114 = cb2_018x * 0.5f;
  float _115 = _114 * cb2_018y;
  float _116 = _112.x - _115;
  float _117 = cb2_018y * cb2_018x;
  float _118 = 1.0f / _117;
  float _119 = _116 * _118;
  float _120 = _106 / _110.x;
  float _121 = _120 * 5464.01611328125f;
  float _122 = _121 + 9.99999993922529e-09f;
  float _123 = log2(_122);
  float _124 = _123 - _116;
  float _125 = _124 * _118;
  float _126 = saturate(_125);
  float2 _127 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _126), 0.0f);
  float _130 = max(_127.y, 1.0000000116860974e-07f);
  float _131 = _127.x / _130;
  float _132 = _131 + _119;
  float _133 = _132 / _118;
  float _134 = _133 - _112.x;
  float _135 = -0.0f - _134;
  float _137 = _135 - cb2_027x;
  float _138 = max(0.0f, _137);
  float _140 = cb2_026z * _138;
  float _141 = _134 - cb2_027x;
  float _142 = max(0.0f, _141);
  float _144 = cb2_026w * _142;
  bool _145 = (_134 < 0.0f);
  float _146 = select(_145, _140, _144);
  float _147 = exp2(_146);
  float _148 = _147 * _103;
  float _149 = _147 * _104;
  float _150 = _147 * _105;
  float _155 = cb2_024y * _93.x;
  float _156 = cb2_024z * _93.y;
  float _157 = cb2_024w * _93.z;
  float _158 = _155 + _148;
  float _159 = _156 + _149;
  float _160 = _157 + _150;
  float _165 = _158 * cb2_025x;
  float _166 = _159 * cb2_025y;
  float _167 = _160 * cb2_025z;
  float _168 = dot(float3(_165, _166, _167), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _169 = t0[0].SExposureData_012;
  float _171 = _168 * 5464.01611328125f;
  float _172 = _171 * _169.x;
  float _173 = _172 + 9.99999993922529e-09f;
  float _174 = log2(_173);
  float _175 = _174 + 16.929765701293945f;
  float _176 = _175 * 0.05734497308731079f;
  float _177 = saturate(_176);
  float _178 = _177 * _177;
  float _179 = _177 * 2.0f;
  float _180 = 3.0f - _179;
  float _181 = _178 * _180;
  float _182 = _166 * 0.8450999855995178f;
  float _183 = _167 * 0.14589999616146088f;
  float _184 = _182 + _183;
  float _185 = _184 * 2.4890189170837402f;
  float _186 = _184 * 0.3754962384700775f;
  float _187 = _184 * 2.811495304107666f;
  float _188 = _184 * 5.519708156585693f;
  float _189 = _168 - _185;
  float _190 = _181 * _189;
  float _191 = _190 + _185;
  float _192 = _181 * 0.5f;
  float _193 = _192 + 0.5f;
  float _194 = _193 * _189;
  float _195 = _194 + _185;
  float _196 = _165 - _186;
  float _197 = _166 - _187;
  float _198 = _167 - _188;
  float _199 = _193 * _196;
  float _200 = _193 * _197;
  float _201 = _193 * _198;
  float _202 = _199 + _186;
  float _203 = _200 + _187;
  float _204 = _201 + _188;
  float _205 = 1.0f / _195;
  float _206 = _191 * _205;
  float _207 = _206 * _202;
  float _208 = _206 * _203;
  float _209 = _206 * _204;
  float _213 = cb2_020x * TEXCOORD0_centroid.x;
  float _214 = cb2_020y * TEXCOORD0_centroid.y;
  float _217 = _213 + cb2_020z;
  float _218 = _214 + cb2_020w;
  float _221 = dot(float2(_217, _218), float2(_217, _218));
  float _222 = 1.0f - _221;
  float _223 = saturate(_222);
  float _224 = log2(_223);
  float _225 = _224 * cb2_021w;
  float _226 = exp2(_225);
  float _230 = _207 - cb2_021x;
  float _231 = _208 - cb2_021y;
  float _232 = _209 - cb2_021z;
  float _233 = _230 * _226;
  float _234 = _231 * _226;
  float _235 = _232 * _226;
  float _236 = _233 + cb2_021x;
  float _237 = _234 + cb2_021y;
  float _238 = _235 + cb2_021z;
  float _239 = t0[0].SExposureData_000;
  float _241 = max(_110.x, 0.0010000000474974513f);
  float _242 = 1.0f / _241;
  float _243 = _242 * _239.x;
  bool _246 = ((uint)(cb2_069y) == 0);
  float _252;
  float _253;
  float _254;
  float _308;
  float _309;
  float _310;
  float _401;
  float _402;
  float _403;
  float _448;
  float _449;
  float _450;
  float _451;
  float _500;
  float _501;
  float _502;
  float _503;
  float _528;
  float _529;
  float _530;
  float _680;
  float _717;
  float _718;
  float _719;
  float _748;
  float _749;
  float _750;
  float _831;
  float _832;
  float _833;
  float _839;
  float _840;
  float _841;
  float _855;
  float _856;
  float _857;
  float _882;
  float _894;
  float _922;
  float _934;
  float _946;
  float _947;
  float _948;
  float _975;
  float _976;
  float _977;
  if (!_246) {
    float _248 = _243 * _236;
    float _249 = _243 * _237;
    float _250 = _243 * _238;
    _252 = _248;
    _253 = _249;
    _254 = _250;
  } else {
    _252 = _236;
    _253 = _237;
    _254 = _238;
  }
  float _255 = _252 * 0.6130970120429993f;
  float _256 = mad(0.33952298760414124f, _253, _255);
  float _257 = mad(0.04737899824976921f, _254, _256);
  float _258 = _252 * 0.07019399851560593f;
  float _259 = mad(0.9163540005683899f, _253, _258);
  float _260 = mad(0.013451999984681606f, _254, _259);
  float _261 = _252 * 0.02061600051820278f;
  float _262 = mad(0.10956999659538269f, _253, _261);
  float _263 = mad(0.8698149919509888f, _254, _262);
  float _264 = log2(_257);
  float _265 = log2(_260);
  float _266 = log2(_263);
  float _267 = _264 * 0.04211956635117531f;
  float _268 = _265 * 0.04211956635117531f;
  float _269 = _266 * 0.04211956635117531f;
  float _270 = _267 + 0.6252607107162476f;
  float _271 = _268 + 0.6252607107162476f;
  float _272 = _269 + 0.6252607107162476f;
  float4 _273 = t6.SampleLevel(s2_space2, float3(_270, _271, _272), 0.0f);
  bool _279 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_279 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _283 = cb2_017x * _273.x;
    float _284 = cb2_017x * _273.y;
    float _285 = cb2_017x * _273.z;
    float _287 = _283 + cb2_017y;
    float _288 = _284 + cb2_017y;
    float _289 = _285 + cb2_017y;
    float _290 = exp2(_287);
    float _291 = exp2(_288);
    float _292 = exp2(_289);
    float _293 = _290 + 1.0f;
    float _294 = _291 + 1.0f;
    float _295 = _292 + 1.0f;
    float _296 = 1.0f / _293;
    float _297 = 1.0f / _294;
    float _298 = 1.0f / _295;
    float _300 = cb2_017z * _296;
    float _301 = cb2_017z * _297;
    float _302 = cb2_017z * _298;
    float _304 = _300 + cb2_017w;
    float _305 = _301 + cb2_017w;
    float _306 = _302 + cb2_017w;
    _308 = _304;
    _309 = _305;
    _310 = _306;
  } else {
    _308 = _273.x;
    _309 = _273.y;
    _310 = _273.z;
  }
  float _311 = _308 * 23.0f;
  float _312 = _311 + -14.473931312561035f;
  float _313 = exp2(_312);
  float _314 = _309 * 23.0f;
  float _315 = _314 + -14.473931312561035f;
  float _316 = exp2(_315);
  float _317 = _310 * 23.0f;
  float _318 = _317 + -14.473931312561035f;
  float _319 = exp2(_318);
  float _320 = dot(float3(_313, _316, _319), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _325 = dot(float3(_313, _316, _319), float3(_313, _316, _319));
  float _326 = rsqrt(_325);
  float _327 = _326 * _313;
  float _328 = _326 * _316;
  float _329 = _326 * _319;
  float _330 = cb2_001x - _327;
  float _331 = cb2_001y - _328;
  float _332 = cb2_001z - _329;
  float _333 = dot(float3(_330, _331, _332), float3(_330, _331, _332));
  float _336 = cb2_002z * _333;
  float _338 = _336 + cb2_002w;
  float _339 = saturate(_338);
  float _341 = cb2_002x * _339;
  float _342 = _320 - _313;
  float _343 = _320 - _316;
  float _344 = _320 - _319;
  float _345 = _341 * _342;
  float _346 = _341 * _343;
  float _347 = _341 * _344;
  float _348 = _345 + _313;
  float _349 = _346 + _316;
  float _350 = _347 + _319;
  float _352 = cb2_002y * _339;
  float _353 = 0.10000000149011612f - _348;
  float _354 = 0.10000000149011612f - _349;
  float _355 = 0.10000000149011612f - _350;
  float _356 = _353 * _352;
  float _357 = _354 * _352;
  float _358 = _355 * _352;
  float _359 = _356 + _348;
  float _360 = _357 + _349;
  float _361 = _358 + _350;
  float _362 = saturate(_359);
  float _363 = saturate(_360);
  float _364 = saturate(_361);
  float _369 = cb2_004x * TEXCOORD0_centroid.x;
  float _370 = cb2_004y * TEXCOORD0_centroid.y;
  float _373 = _369 + cb2_004z;
  float _374 = _370 + cb2_004w;
  float4 _380 = t7.Sample(s2_space2, float2(_373, _374));
  float _385 = _380.x * cb2_003x;
  float _386 = _380.y * cb2_003y;
  float _387 = _380.z * cb2_003z;
  float _388 = _380.w * cb2_003w;
  float _391 = _388 + cb2_026y;
  float _392 = saturate(_391);
  bool _395 = ((uint)(cb2_069y) == 0);
  if (!_395) {
    float _397 = _385 * _243;
    float _398 = _386 * _243;
    float _399 = _387 * _243;
    _401 = _397;
    _402 = _398;
    _403 = _399;
  } else {
    _401 = _385;
    _402 = _386;
    _403 = _387;
  }
  bool _406 = ((uint)(cb2_028x) == 2);
  bool _407 = ((uint)(cb2_028x) == 3);
  int _408 = (uint)(cb2_028x) & -2;
  bool _409 = (_408 == 2);
  bool _410 = ((uint)(cb2_028x) == 6);
  bool _411 = _409 || _410;
  if (_411) {
    float _413 = _401 * _392;
    float _414 = _402 * _392;
    float _415 = _403 * _392;
    float _416 = _392 * _392;
    _448 = _413;
    _449 = _414;
    _450 = _415;
    _451 = _416;
  } else {
    bool _418 = ((uint)(cb2_028x) == 4);
    if (_418) {
      float _420 = _401 + -1.0f;
      float _421 = _402 + -1.0f;
      float _422 = _403 + -1.0f;
      float _423 = _392 + -1.0f;
      float _424 = _420 * _392;
      float _425 = _421 * _392;
      float _426 = _422 * _392;
      float _427 = _423 * _392;
      float _428 = _424 + 1.0f;
      float _429 = _425 + 1.0f;
      float _430 = _426 + 1.0f;
      float _431 = _427 + 1.0f;
      _448 = _428;
      _449 = _429;
      _450 = _430;
      _451 = _431;
    } else {
      bool _433 = ((uint)(cb2_028x) == 5);
      if (_433) {
        float _435 = _401 + -0.5f;
        float _436 = _402 + -0.5f;
        float _437 = _403 + -0.5f;
        float _438 = _392 + -0.5f;
        float _439 = _435 * _392;
        float _440 = _436 * _392;
        float _441 = _437 * _392;
        float _442 = _438 * _392;
        float _443 = _439 + 0.5f;
        float _444 = _440 + 0.5f;
        float _445 = _441 + 0.5f;
        float _446 = _442 + 0.5f;
        _448 = _443;
        _449 = _444;
        _450 = _445;
        _451 = _446;
      } else {
        _448 = _401;
        _449 = _402;
        _450 = _403;
        _451 = _392;
      }
    }
  }
  if (_406) {
    float _453 = _448 + _362;
    float _454 = _449 + _363;
    float _455 = _450 + _364;
    _500 = _453;
    _501 = _454;
    _502 = _455;
    _503 = cb2_025w;
  } else {
    if (_407) {
      float _458 = 1.0f - _448;
      float _459 = 1.0f - _449;
      float _460 = 1.0f - _450;
      float _461 = _458 * _362;
      float _462 = _459 * _363;
      float _463 = _460 * _364;
      float _464 = _461 + _448;
      float _465 = _462 + _449;
      float _466 = _463 + _450;
      _500 = _464;
      _501 = _465;
      _502 = _466;
      _503 = cb2_025w;
    } else {
      bool _468 = ((uint)(cb2_028x) == 4);
      if (_468) {
        float _470 = _448 * _362;
        float _471 = _449 * _363;
        float _472 = _450 * _364;
        _500 = _470;
        _501 = _471;
        _502 = _472;
        _503 = cb2_025w;
      } else {
        bool _474 = ((uint)(cb2_028x) == 5);
        if (_474) {
          float _476 = _362 * 2.0f;
          float _477 = _476 * _448;
          float _478 = _363 * 2.0f;
          float _479 = _478 * _449;
          float _480 = _364 * 2.0f;
          float _481 = _480 * _450;
          _500 = _477;
          _501 = _479;
          _502 = _481;
          _503 = cb2_025w;
        } else {
          if (_410) {
            float _484 = _362 - _448;
            float _485 = _363 - _449;
            float _486 = _364 - _450;
            _500 = _484;
            _501 = _485;
            _502 = _486;
            _503 = cb2_025w;
          } else {
            float _488 = _448 - _362;
            float _489 = _449 - _363;
            float _490 = _450 - _364;
            float _491 = _451 * _488;
            float _492 = _451 * _489;
            float _493 = _451 * _490;
            float _494 = _491 + _362;
            float _495 = _492 + _363;
            float _496 = _493 + _364;
            float _497 = 1.0f - _451;
            float _498 = _497 * cb2_025w;
            _500 = _494;
            _501 = _495;
            _502 = _496;
            _503 = _498;
          }
        }
      }
    }
  }
  float _509 = cb2_016x - _500;
  float _510 = cb2_016y - _501;
  float _511 = cb2_016z - _502;
  float _512 = _509 * cb2_016w;
  float _513 = _510 * cb2_016w;
  float _514 = _511 * cb2_016w;
  float _515 = _512 + _500;
  float _516 = _513 + _501;
  float _517 = _514 + _502;
  bool _520 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_520 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _524 = cb2_024x * _515;
    float _525 = cb2_024x * _516;
    float _526 = cb2_024x * _517;
    _528 = _524;
    _529 = _525;
    _530 = _526;
  } else {
    _528 = _515;
    _529 = _516;
    _530 = _517;
  }
  float _533 = _528 * 0.9708889722824097f;
  float _534 = mad(0.026962999254465103f, _529, _533);
  float _535 = mad(0.002148000057786703f, _530, _534);
  float _536 = _528 * 0.01088900025933981f;
  float _537 = mad(0.9869629740715027f, _529, _536);
  float _538 = mad(0.002148000057786703f, _530, _537);
  float _539 = mad(0.026962999254465103f, _529, _536);
  float _540 = mad(0.9621480107307434f, _530, _539);
  float _541 = max(_535, 0.0f);
  float _542 = max(_538, 0.0f);
  float _543 = max(_540, 0.0f);
  float _544 = min(_541, cb2_095y);
  float _545 = min(_542, cb2_095y);
  float _546 = min(_543, cb2_095y);
  bool _549 = ((uint)(cb2_095x) == 0);
  bool _552 = ((uint)(cb2_094w) == 0);
  bool _554 = ((uint)(cb2_094z) == 0);
  bool _556 = ((uint)(cb2_094y) != 0);
  bool _558 = ((uint)(cb2_094x) == 0);
  bool _560 = ((uint)(cb2_069z) != 0);
  float _607 = asfloat((uint)(cb2_075y));
  float _608 = asfloat((uint)(cb2_075z));
  float _609 = asfloat((uint)(cb2_075w));
  float _610 = asfloat((uint)(cb2_074z));
  float _611 = asfloat((uint)(cb2_074w));
  float _612 = asfloat((uint)(cb2_075x));
  float _613 = asfloat((uint)(cb2_073w));
  float _614 = asfloat((uint)(cb2_074x));
  float _615 = asfloat((uint)(cb2_074y));
  float _616 = asfloat((uint)(cb2_077x));
  float _617 = asfloat((uint)(cb2_077y));
  float _618 = asfloat((uint)(cb2_079x));
  float _619 = asfloat((uint)(cb2_079y));
  float _620 = asfloat((uint)(cb2_079z));
  float _621 = asfloat((uint)(cb2_078y));
  float _622 = asfloat((uint)(cb2_078z));
  float _623 = asfloat((uint)(cb2_078w));
  float _624 = asfloat((uint)(cb2_077z));
  float _625 = asfloat((uint)(cb2_077w));
  float _626 = asfloat((uint)(cb2_078x));
  float _627 = asfloat((uint)(cb2_072y));
  float _628 = asfloat((uint)(cb2_072z));
  float _629 = asfloat((uint)(cb2_072w));
  float _630 = asfloat((uint)(cb2_071x));
  float _631 = asfloat((uint)(cb2_071y));
  float _632 = asfloat((uint)(cb2_076x));
  float _633 = asfloat((uint)(cb2_070w));
  float _634 = asfloat((uint)(cb2_070x));
  float _635 = asfloat((uint)(cb2_070y));
  float _636 = asfloat((uint)(cb2_070z));
  float _637 = asfloat((uint)(cb2_073x));
  float _638 = asfloat((uint)(cb2_073y));
  float _639 = asfloat((uint)(cb2_073z));
  float _640 = asfloat((uint)(cb2_071z));
  float _641 = asfloat((uint)(cb2_071w));
  float _642 = asfloat((uint)(cb2_072x));
  float _643 = max(_545, _546);
  float _644 = max(_544, _643);
  float _645 = 1.0f / _644;
  float _646 = _645 * _544;
  float _647 = _645 * _545;
  float _648 = _645 * _546;
  float _649 = abs(_646);
  float _650 = log2(_649);
  float _651 = _650 * _634;
  float _652 = exp2(_651);
  float _653 = abs(_647);
  float _654 = log2(_653);
  float _655 = _654 * _635;
  float _656 = exp2(_655);
  float _657 = abs(_648);
  float _658 = log2(_657);
  float _659 = _658 * _636;
  float _660 = exp2(_659);
  if (_556) {
    float _663 = asfloat((uint)(cb2_076w));
    float _665 = asfloat((uint)(cb2_076z));
    float _667 = asfloat((uint)(cb2_076y));
    float _668 = _665 * _545;
    float _669 = _667 * _544;
    float _670 = _663 * _546;
    float _671 = _669 + _670;
    float _672 = _671 + _668;
    _680 = _672;
  } else {
    float _674 = _641 * _545;
    float _675 = _640 * _544;
    float _676 = _642 * _546;
    float _677 = _674 + _675;
    float _678 = _677 + _676;
    _680 = _678;
  }
  float _681 = abs(_680);
  float _682 = log2(_681);
  float _683 = _682 * _633;
  float _684 = exp2(_683);
  float _685 = log2(_684);
  float _686 = _685 * _632;
  float _687 = exp2(_686);
  float _688 = select(_560, _687, _684);
  float _689 = _688 * _630;
  float _690 = _689 + _631;
  float _691 = 1.0f / _690;
  float _692 = _691 * _684;
  if (_556) {
    if (!_558) {
      float _695 = _652 * _624;
      float _696 = _656 * _625;
      float _697 = _660 * _626;
      float _698 = _696 + _695;
      float _699 = _698 + _697;
      float _700 = _656 * _622;
      float _701 = _652 * _621;
      float _702 = _660 * _623;
      float _703 = _700 + _701;
      float _704 = _703 + _702;
      float _705 = _660 * _620;
      float _706 = _656 * _619;
      float _707 = _652 * _618;
      float _708 = _706 + _707;
      float _709 = _708 + _705;
      float _710 = max(_704, _709);
      float _711 = max(_699, _710);
      float _712 = 1.0f / _711;
      float _713 = _712 * _699;
      float _714 = _712 * _704;
      float _715 = _712 * _709;
      _717 = _713;
      _718 = _714;
      _719 = _715;
    } else {
      _717 = _652;
      _718 = _656;
      _719 = _660;
    }
    float _720 = _717 * _617;
    float _721 = exp2(_720);
    float _722 = _721 * _616;
    float _723 = saturate(_722);
    float _724 = _717 * _616;
    float _725 = _717 - _724;
    float _726 = saturate(_725);
    float _727 = max(_616, _726);
    float _728 = min(_727, _723);
    float _729 = _718 * _617;
    float _730 = exp2(_729);
    float _731 = _730 * _616;
    float _732 = saturate(_731);
    float _733 = _718 * _616;
    float _734 = _718 - _733;
    float _735 = saturate(_734);
    float _736 = max(_616, _735);
    float _737 = min(_736, _732);
    float _738 = _719 * _617;
    float _739 = exp2(_738);
    float _740 = _739 * _616;
    float _741 = saturate(_740);
    float _742 = _719 * _616;
    float _743 = _719 - _742;
    float _744 = saturate(_743);
    float _745 = max(_616, _744);
    float _746 = min(_745, _741);
    _748 = _728;
    _749 = _737;
    _750 = _746;
  } else {
    _748 = _652;
    _749 = _656;
    _750 = _660;
  }
  float _751 = _748 * _640;
  float _752 = _749 * _641;
  float _753 = _752 + _751;
  float _754 = _750 * _642;
  float _755 = _753 + _754;
  float _756 = 1.0f / _755;
  float _757 = _756 * _692;
  float _758 = saturate(_757);
  float _759 = _758 * _748;
  float _760 = saturate(_759);
  float _761 = _758 * _749;
  float _762 = saturate(_761);
  float _763 = _758 * _750;
  float _764 = saturate(_763);
  float _765 = _760 * _627;
  float _766 = _627 - _765;
  float _767 = _762 * _628;
  float _768 = _628 - _767;
  float _769 = _764 * _629;
  float _770 = _629 - _769;
  float _771 = _764 * _642;
  float _772 = _760 * _640;
  float _773 = _762 * _641;
  float _774 = _692 - _772;
  float _775 = _774 - _773;
  float _776 = _775 - _771;
  float _777 = saturate(_776);
  float _778 = _768 * _641;
  float _779 = _766 * _640;
  float _780 = _770 * _642;
  float _781 = _778 + _779;
  float _782 = _781 + _780;
  float _783 = 1.0f / _782;
  float _784 = _783 * _777;
  float _785 = _784 * _766;
  float _786 = _785 + _760;
  float _787 = saturate(_786);
  float _788 = _784 * _768;
  float _789 = _788 + _762;
  float _790 = saturate(_789);
  float _791 = _784 * _770;
  float _792 = _791 + _764;
  float _793 = saturate(_792);
  float _794 = _793 * _642;
  float _795 = _787 * _640;
  float _796 = _790 * _641;
  float _797 = _692 - _795;
  float _798 = _797 - _796;
  float _799 = _798 - _794;
  float _800 = saturate(_799);
  float _801 = _800 * _637;
  float _802 = _801 + _787;
  float _803 = saturate(_802);
  float _804 = _800 * _638;
  float _805 = _804 + _790;
  float _806 = saturate(_805);
  float _807 = _800 * _639;
  float _808 = _807 + _793;
  float _809 = saturate(_808);
  if (!_554) {
    float _811 = _803 * _613;
    float _812 = _806 * _614;
    float _813 = _809 * _615;
    float _814 = _812 + _811;
    float _815 = _814 + _813;
    float _816 = _806 * _611;
    float _817 = _803 * _610;
    float _818 = _809 * _612;
    float _819 = _816 + _817;
    float _820 = _819 + _818;
    float _821 = _809 * _609;
    float _822 = _806 * _608;
    float _823 = _803 * _607;
    float _824 = _822 + _823;
    float _825 = _824 + _821;
    if (!_552) {
      float _827 = saturate(_815);
      float _828 = saturate(_820);
      float _829 = saturate(_825);
      _831 = _829;
      _832 = _828;
      _833 = _827;
    } else {
      _831 = _825;
      _832 = _820;
      _833 = _815;
    }
  } else {
    _831 = _809;
    _832 = _806;
    _833 = _803;
  }
  if (!_549) {
    float _835 = _833 * _613;
    float _836 = _832 * _613;
    float _837 = _831 * _613;
    _839 = _837;
    _840 = _836;
    _841 = _835;
  } else {
    _839 = _831;
    _840 = _832;
    _841 = _833;
  }
  if (_520) {
    float _845 = cb1_018z * 9.999999747378752e-05f;
    float _846 = _845 * _841;
    float _847 = _845 * _840;
    float _848 = _845 * _839;
    float _850 = 5000.0f / cb1_018y;
    float _851 = _846 * _850;
    float _852 = _847 * _850;
    float _853 = _848 * _850;
    _855 = _851;
    _856 = _852;
    _857 = _853;
  } else {
    _855 = _841;
    _856 = _840;
    _857 = _839;
  }
  float _858 = _855 * 1.6047500371932983f;
  float _859 = mad(-0.5310800075531006f, _856, _858);
  float _860 = mad(-0.07366999983787537f, _857, _859);
  float _861 = _855 * -0.10208000242710114f;
  float _862 = mad(1.1081299781799316f, _856, _861);
  float _863 = mad(-0.006049999967217445f, _857, _862);
  float _864 = _855 * -0.0032599999103695154f;
  float _865 = mad(-0.07275000214576721f, _856, _864);
  float _866 = mad(1.0760200023651123f, _857, _865);
  if (_520) {
    // float _868 = max(_860, 0.0f);
    // float _869 = max(_863, 0.0f);
    // float _870 = max(_866, 0.0f);
    // bool _871 = !(_868 >= 0.0030399328097701073f);
    // if (!_871) {
    //   float _873 = abs(_868);
    //   float _874 = log2(_873);
    //   float _875 = _874 * 0.4166666567325592f;
    //   float _876 = exp2(_875);
    //   float _877 = _876 * 1.0549999475479126f;
    //   float _878 = _877 + -0.054999999701976776f;
    //   _882 = _878;
    // } else {
    //   float _880 = _868 * 12.923210144042969f;
    //   _882 = _880;
    // }
    // bool _883 = !(_869 >= 0.0030399328097701073f);
    // if (!_883) {
    //   float _885 = abs(_869);
    //   float _886 = log2(_885);
    //   float _887 = _886 * 0.4166666567325592f;
    //   float _888 = exp2(_887);
    //   float _889 = _888 * 1.0549999475479126f;
    //   float _890 = _889 + -0.054999999701976776f;
    //   _894 = _890;
    // } else {
    //   float _892 = _869 * 12.923210144042969f;
    //   _894 = _892;
    // }
    // bool _895 = !(_870 >= 0.0030399328097701073f);
    // if (!_895) {
    //   float _897 = abs(_870);
    //   float _898 = log2(_897);
    //   float _899 = _898 * 0.4166666567325592f;
    //   float _900 = exp2(_899);
    //   float _901 = _900 * 1.0549999475479126f;
    //   float _902 = _901 + -0.054999999701976776f;
    //   _975 = _882;
    //   _976 = _894;
    //   _977 = _902;
    // } else {
    //   float _904 = _870 * 12.923210144042969f;
    //   _975 = _882;
    //   _976 = _894;
    //   _977 = _904;
    // }
    _975 = renodx::color::srgb::EncodeSafe(_860);
    _976 = renodx::color::srgb::EncodeSafe(_863);
    _977 = renodx::color::srgb::EncodeSafe(_866);

  } else {
    float _906 = saturate(_860);
    float _907 = saturate(_863);
    float _908 = saturate(_866);
    bool _909 = ((uint)(cb1_018w) == -2);
    if (!_909) {
      bool _911 = !(_906 >= 0.0030399328097701073f);
      if (!_911) {
        float _913 = abs(_906);
        float _914 = log2(_913);
        float _915 = _914 * 0.4166666567325592f;
        float _916 = exp2(_915);
        float _917 = _916 * 1.0549999475479126f;
        float _918 = _917 + -0.054999999701976776f;
        _922 = _918;
      } else {
        float _920 = _906 * 12.923210144042969f;
        _922 = _920;
      }
      bool _923 = !(_907 >= 0.0030399328097701073f);
      if (!_923) {
        float _925 = abs(_907);
        float _926 = log2(_925);
        float _927 = _926 * 0.4166666567325592f;
        float _928 = exp2(_927);
        float _929 = _928 * 1.0549999475479126f;
        float _930 = _929 + -0.054999999701976776f;
        _934 = _930;
      } else {
        float _932 = _907 * 12.923210144042969f;
        _934 = _932;
      }
      bool _935 = !(_908 >= 0.0030399328097701073f);
      if (!_935) {
        float _937 = abs(_908);
        float _938 = log2(_937);
        float _939 = _938 * 0.4166666567325592f;
        float _940 = exp2(_939);
        float _941 = _940 * 1.0549999475479126f;
        float _942 = _941 + -0.054999999701976776f;
        _946 = _922;
        _947 = _934;
        _948 = _942;
      } else {
        float _944 = _908 * 12.923210144042969f;
        _946 = _922;
        _947 = _934;
        _948 = _944;
      }
    } else {
      _946 = _906;
      _947 = _907;
      _948 = _908;
    }
    float _953 = abs(_946);
    float _954 = abs(_947);
    float _955 = abs(_948);
    float _956 = log2(_953);
    float _957 = log2(_954);
    float _958 = log2(_955);
    float _959 = _956 * cb2_000z;
    float _960 = _957 * cb2_000z;
    float _961 = _958 * cb2_000z;
    float _962 = exp2(_959);
    float _963 = exp2(_960);
    float _964 = exp2(_961);
    float _965 = _962 * cb2_000y;
    float _966 = _963 * cb2_000y;
    float _967 = _964 * cb2_000y;
    float _968 = _965 + cb2_000x;
    float _969 = _966 + cb2_000x;
    float _970 = _967 + cb2_000x;
    float _971 = saturate(_968);
    float _972 = saturate(_969);
    float _973 = saturate(_970);
    _975 = _971;
    _976 = _972;
    _977 = _973;
  }
  float _981 = cb2_023x * TEXCOORD0_centroid.x;
  float _982 = cb2_023y * TEXCOORD0_centroid.y;
  float _985 = _981 + cb2_023z;
  float _986 = _982 + cb2_023w;
  float4 _989 = t10.SampleLevel(s0_space2, float2(_985, _986), 0.0f);
  float _991 = _989.x + -0.5f;
  float _992 = _991 * cb2_022x;
  float _993 = _992 + 0.5f;
  float _994 = _993 * 2.0f;
  float _995 = _994 * _975;
  float _996 = _994 * _976;
  float _997 = _994 * _977;
  float _1001 = float((uint)(cb2_019z));
  float _1002 = float((uint)(cb2_019w));
  float _1003 = _1001 + SV_Position.x;
  float _1004 = _1002 + SV_Position.y;
  uint _1005 = uint(_1003);
  uint _1006 = uint(_1004);
  uint _1009 = cb2_019x + -1u;
  uint _1010 = cb2_019y + -1u;
  int _1011 = _1005 & _1009;
  int _1012 = _1006 & _1010;
  float4 _1013 = t3.Load(int3(_1011, _1012, 0));
  float _1017 = _1013.x * 2.0f;
  float _1018 = _1013.y * 2.0f;
  float _1019 = _1013.z * 2.0f;
  float _1020 = _1017 + -1.0f;
  float _1021 = _1018 + -1.0f;
  float _1022 = _1019 + -1.0f;
  float _1023 = _1020 * _503;
  float _1024 = _1021 * _503;
  float _1025 = _1022 * _503;
  float _1026 = _1023 + _995;
  float _1027 = _1024 + _996;
  float _1028 = _1025 + _997;
  float _1029 = dot(float3(_1026, _1027, _1028), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1026;
  SV_Target.y = _1027;
  SV_Target.z = _1028;
  SV_Target.w = _1029;
  SV_Target_1.x = _1029;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
