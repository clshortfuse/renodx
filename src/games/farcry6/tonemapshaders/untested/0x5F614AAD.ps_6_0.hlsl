#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = cb2_015x * TEXCOORD0_centroid.x;
  float _30 = cb2_015y * TEXCOORD0_centroid.y;
  float _33 = _29 + cb2_015z;
  float _34 = _30 + cb2_015w;
  float4 _35 = t7.SampleLevel(s0_space2, float2(_33, _34), 0.0f);
  float _39 = saturate(_35.x);
  float _40 = saturate(_35.z);
  float _43 = cb2_026x * _40;
  float _44 = _39 * 6.283199787139893f;
  float _45 = cos(_44);
  float _46 = sin(_44);
  float _47 = _43 * _45;
  float _48 = _46 * _43;
  float _49 = 1.0f - _35.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t1.SampleLevel(s4_space2, float2(_53, _54), 0.0f);
  float _59 = max(_55.x, 0.0f);
  float _60 = max(_55.y, 0.0f);
  float _61 = max(_55.z, 0.0f);
  float _62 = min(_59, 65000.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float4 _65 = t4.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  float _70 = max(_65.x, 0.0f);
  float _71 = max(_65.y, 0.0f);
  float _72 = max(_65.z, 0.0f);
  float _73 = max(_65.w, 0.0f);
  float _74 = min(_70, 5000.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _80 = _24.x * cb0_028z;
  float _81 = _80 + cb0_028x;
  float _82 = cb2_027w / _81;
  float _83 = 1.0f - _82;
  float _84 = abs(_83);
  float _86 = cb2_027y * _84;
  float _88 = _86 - cb2_027z;
  float _89 = saturate(_88);
  float _90 = max(_89, _77);
  float _91 = saturate(_90);
  float _95 = cb2_013x * _53;
  float _96 = cb2_013y * _54;
  float _99 = _95 + cb2_013z;
  float _100 = _96 + cb2_013w;
  float _103 = dot(float2(_99, _100), float2(_99, _100));
  float _104 = abs(_103);
  float _105 = log2(_104);
  float _106 = _105 * cb2_014x;
  float _107 = exp2(_106);
  float _108 = saturate(_107);
  float _112 = cb2_011x * _53;
  float _113 = cb2_011y * _54;
  float _116 = _112 + cb2_011z;
  float _117 = _113 + cb2_011w;
  float _118 = _116 * _108;
  float _119 = _117 * _108;
  float _120 = _118 + _53;
  float _121 = _119 + _54;
  float _125 = cb2_012x * _53;
  float _126 = cb2_012y * _54;
  float _129 = _125 + cb2_012z;
  float _130 = _126 + cb2_012w;
  float _131 = _129 * _108;
  float _132 = _130 * _108;
  float _133 = _131 + _53;
  float _134 = _132 + _54;
  float4 _135 = t1.SampleLevel(s2_space2, float2(_120, _121), 0.0f);
  float _139 = max(_135.x, 0.0f);
  float _140 = max(_135.y, 0.0f);
  float _141 = max(_135.z, 0.0f);
  float _142 = min(_139, 65000.0f);
  float _143 = min(_140, 65000.0f);
  float _144 = min(_141, 65000.0f);
  float4 _145 = t1.SampleLevel(s2_space2, float2(_133, _134), 0.0f);
  float _149 = max(_145.x, 0.0f);
  float _150 = max(_145.y, 0.0f);
  float _151 = max(_145.z, 0.0f);
  float _152 = min(_149, 65000.0f);
  float _153 = min(_150, 65000.0f);
  float _154 = min(_151, 65000.0f);
  float4 _155 = t4.SampleLevel(s2_space2, float2(_120, _121), 0.0f);
  float _159 = max(_155.x, 0.0f);
  float _160 = max(_155.y, 0.0f);
  float _161 = max(_155.z, 0.0f);
  float _162 = min(_159, 5000.0f);
  float _163 = min(_160, 5000.0f);
  float _164 = min(_161, 5000.0f);
  float4 _165 = t4.SampleLevel(s2_space2, float2(_133, _134), 0.0f);
  float _169 = max(_165.x, 0.0f);
  float _170 = max(_165.y, 0.0f);
  float _171 = max(_165.z, 0.0f);
  float _172 = min(_169, 5000.0f);
  float _173 = min(_170, 5000.0f);
  float _174 = min(_171, 5000.0f);
  float _179 = 1.0f - cb2_009x;
  float _180 = 1.0f - cb2_009y;
  float _181 = 1.0f - cb2_009z;
  float _186 = _179 - cb2_010x;
  float _187 = _180 - cb2_010y;
  float _188 = _181 - cb2_010z;
  float _189 = saturate(_186);
  float _190 = saturate(_187);
  float _191 = saturate(_188);
  float _192 = _189 * _62;
  float _193 = _190 * _63;
  float _194 = _191 * _64;
  float _195 = cb2_009x * _142;
  float _196 = cb2_009y * _143;
  float _197 = cb2_009z * _144;
  float _198 = _195 + _192;
  float _199 = _196 + _193;
  float _200 = _197 + _194;
  float _201 = cb2_010x * _152;
  float _202 = cb2_010y * _153;
  float _203 = cb2_010z * _154;
  float _204 = _198 + _201;
  float _205 = _199 + _202;
  float _206 = _200 + _203;
  float _207 = _189 * _74;
  float _208 = _190 * _75;
  float _209 = _191 * _76;
  float _210 = cb2_009x * _162;
  float _211 = cb2_009y * _163;
  float _212 = cb2_009z * _164;
  float _213 = cb2_010x * _172;
  float _214 = cb2_010y * _173;
  float _215 = cb2_010z * _174;
  float4 _216 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _220 = _207 - _204;
  float _221 = _220 + _210;
  float _222 = _221 + _213;
  float _223 = _208 - _205;
  float _224 = _223 + _211;
  float _225 = _224 + _214;
  float _226 = _209 - _206;
  float _227 = _226 + _212;
  float _228 = _227 + _215;
  float _229 = _222 * _91;
  float _230 = _225 * _91;
  float _231 = _228 * _91;
  float _232 = _229 + _204;
  float _233 = _230 + _205;
  float _234 = _231 + _206;
  float _235 = dot(float3(_232, _233, _234), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _239 = t0[0].SExposureData_020;
  float _241 = t0[0].SExposureData_004;
  float _243 = cb2_018x * 0.5f;
  float _244 = _243 * cb2_018y;
  float _245 = _241.x - _244;
  float _246 = cb2_018y * cb2_018x;
  float _247 = 1.0f / _246;
  float _248 = _245 * _247;
  float _249 = _235 / _239.x;
  float _250 = _249 * 5464.01611328125f;
  float _251 = _250 + 9.99999993922529e-09f;
  float _252 = log2(_251);
  float _253 = _252 - _245;
  float _254 = _253 * _247;
  float _255 = saturate(_254);
  float2 _256 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _255), 0.0f);
  float _259 = max(_256.y, 1.0000000116860974e-07f);
  float _260 = _256.x / _259;
  float _261 = _260 + _248;
  float _262 = _261 / _247;
  float _263 = _262 - _241.x;
  float _264 = -0.0f - _263;
  float _266 = _264 - cb2_027x;
  float _267 = max(0.0f, _266);
  float _269 = cb2_026z * _267;
  float _270 = _263 - cb2_027x;
  float _271 = max(0.0f, _270);
  float _273 = cb2_026w * _271;
  bool _274 = (_263 < 0.0f);
  float _275 = select(_274, _269, _273);
  float _276 = exp2(_275);
  float _277 = _276 * _232;
  float _278 = _276 * _233;
  float _279 = _276 * _234;
  float _284 = cb2_024y * _216.x;
  float _285 = cb2_024z * _216.y;
  float _286 = cb2_024w * _216.z;
  float _287 = _284 + _277;
  float _288 = _285 + _278;
  float _289 = _286 + _279;
  float _294 = _287 * cb2_025x;
  float _295 = _288 * cb2_025y;
  float _296 = _289 * cb2_025z;
  float _297 = dot(float3(_294, _295, _296), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _298 = t0[0].SExposureData_012;
  float _300 = _297 * 5464.01611328125f;
  float _301 = _300 * _298.x;
  float _302 = _301 + 9.99999993922529e-09f;
  float _303 = log2(_302);
  float _304 = _303 + 16.929765701293945f;
  float _305 = _304 * 0.05734497308731079f;
  float _306 = saturate(_305);
  float _307 = _306 * _306;
  float _308 = _306 * 2.0f;
  float _309 = 3.0f - _308;
  float _310 = _307 * _309;
  float _311 = _295 * 0.8450999855995178f;
  float _312 = _296 * 0.14589999616146088f;
  float _313 = _311 + _312;
  float _314 = _313 * 2.4890189170837402f;
  float _315 = _313 * 0.3754962384700775f;
  float _316 = _313 * 2.811495304107666f;
  float _317 = _313 * 5.519708156585693f;
  float _318 = _297 - _314;
  float _319 = _310 * _318;
  float _320 = _319 + _314;
  float _321 = _310 * 0.5f;
  float _322 = _321 + 0.5f;
  float _323 = _322 * _318;
  float _324 = _323 + _314;
  float _325 = _294 - _315;
  float _326 = _295 - _316;
  float _327 = _296 - _317;
  float _328 = _322 * _325;
  float _329 = _322 * _326;
  float _330 = _322 * _327;
  float _331 = _328 + _315;
  float _332 = _329 + _316;
  float _333 = _330 + _317;
  float _334 = 1.0f / _324;
  float _335 = _320 * _334;
  float _336 = _335 * _331;
  float _337 = _335 * _332;
  float _338 = _335 * _333;
  float _342 = cb2_020x * TEXCOORD0_centroid.x;
  float _343 = cb2_020y * TEXCOORD0_centroid.y;
  float _346 = _342 + cb2_020z;
  float _347 = _343 + cb2_020w;
  float _350 = dot(float2(_346, _347), float2(_346, _347));
  float _351 = 1.0f - _350;
  float _352 = saturate(_351);
  float _353 = log2(_352);
  float _354 = _353 * cb2_021w;
  float _355 = exp2(_354);
  float _359 = _336 - cb2_021x;
  float _360 = _337 - cb2_021y;
  float _361 = _338 - cb2_021z;
  float _362 = _359 * _355;
  float _363 = _360 * _355;
  float _364 = _361 * _355;
  float _365 = _362 + cb2_021x;
  float _366 = _363 + cb2_021y;
  float _367 = _364 + cb2_021z;
  float _368 = t0[0].SExposureData_000;
  float _370 = max(_239.x, 0.0010000000474974513f);
  float _371 = 1.0f / _370;
  float _372 = _371 * _368.x;
  bool _375 = ((uint)(cb2_069y) == 0);
  float _381;
  float _382;
  float _383;
  float _437;
  float _438;
  float _439;
  float _470;
  float _471;
  float _472;
  float _573;
  float _574;
  float _575;
  float _600;
  float _612;
  float _640;
  float _652;
  float _664;
  float _665;
  float _666;
  float _693;
  float _694;
  float _695;
  if (!_375) {
    float _377 = _372 * _365;
    float _378 = _372 * _366;
    float _379 = _372 * _367;
    _381 = _377;
    _382 = _378;
    _383 = _379;
  } else {
    _381 = _365;
    _382 = _366;
    _383 = _367;
  }
  float _384 = _381 * 0.6130970120429993f;
  float _385 = mad(0.33952298760414124f, _382, _384);
  float _386 = mad(0.04737899824976921f, _383, _385);
  float _387 = _381 * 0.07019399851560593f;
  float _388 = mad(0.9163540005683899f, _382, _387);
  float _389 = mad(0.013451999984681606f, _383, _388);
  float _390 = _381 * 0.02061600051820278f;
  float _391 = mad(0.10956999659538269f, _382, _390);
  float _392 = mad(0.8698149919509888f, _383, _391);
  float _393 = log2(_386);
  float _394 = log2(_389);
  float _395 = log2(_392);
  float _396 = _393 * 0.04211956635117531f;
  float _397 = _394 * 0.04211956635117531f;
  float _398 = _395 * 0.04211956635117531f;
  float _399 = _396 + 0.6252607107162476f;
  float _400 = _397 + 0.6252607107162476f;
  float _401 = _398 + 0.6252607107162476f;
  float4 _402 = t6.SampleLevel(s2_space2, float3(_399, _400, _401), 0.0f);
  bool _408 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_408 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _412 = cb2_017x * _402.x;
    float _413 = cb2_017x * _402.y;
    float _414 = cb2_017x * _402.z;
    float _416 = _412 + cb2_017y;
    float _417 = _413 + cb2_017y;
    float _418 = _414 + cb2_017y;
    float _419 = exp2(_416);
    float _420 = exp2(_417);
    float _421 = exp2(_418);
    float _422 = _419 + 1.0f;
    float _423 = _420 + 1.0f;
    float _424 = _421 + 1.0f;
    float _425 = 1.0f / _422;
    float _426 = 1.0f / _423;
    float _427 = 1.0f / _424;
    float _429 = cb2_017z * _425;
    float _430 = cb2_017z * _426;
    float _431 = cb2_017z * _427;
    float _433 = _429 + cb2_017w;
    float _434 = _430 + cb2_017w;
    float _435 = _431 + cb2_017w;
    _437 = _433;
    _438 = _434;
    _439 = _435;
  } else {
    _437 = _402.x;
    _438 = _402.y;
    _439 = _402.z;
  }
  float _440 = _437 * 23.0f;
  float _441 = _440 + -14.473931312561035f;
  float _442 = exp2(_441);
  float _443 = _438 * 23.0f;
  float _444 = _443 + -14.473931312561035f;
  float _445 = exp2(_444);
  float _446 = _439 * 23.0f;
  float _447 = _446 + -14.473931312561035f;
  float _448 = exp2(_447);
  float _455 = cb2_016x - _442;
  float _456 = cb2_016y - _445;
  float _457 = cb2_016z - _448;
  float _458 = _455 * cb2_016w;
  float _459 = _456 * cb2_016w;
  float _460 = _457 * cb2_016w;
  float _461 = _458 + _442;
  float _462 = _459 + _445;
  float _463 = _460 + _448;
  if (_408 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _466 = cb2_024x * _461;
    float _467 = cb2_024x * _462;
    float _468 = cb2_024x * _463;
    _470 = _466;
    _471 = _467;
    _472 = _468;
  } else {
    _470 = _461;
    _471 = _462;
    _472 = _463;
  }
  float _473 = _470 * 0.9708889722824097f;
  float _474 = mad(0.026962999254465103f, _471, _473);
  float _475 = mad(0.002148000057786703f, _472, _474);
  float _476 = _470 * 0.01088900025933981f;
  float _477 = mad(0.9869629740715027f, _471, _476);
  float _478 = mad(0.002148000057786703f, _472, _477);
  float _479 = mad(0.026962999254465103f, _471, _476);
  float _480 = mad(0.9621480107307434f, _472, _479);
  if (_408) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _485 = cb1_018y * 0.10000000149011612f;
        float _486 = log2(cb1_018z);
        float _487 = _486 + -13.287712097167969f;
        float _488 = _487 * 1.4929734468460083f;
        float _489 = _488 + 18.0f;
        float _490 = exp2(_489);
        float _491 = _490 * 0.18000000715255737f;
        float _492 = abs(_491);
        float _493 = log2(_492);
        float _494 = _493 * 1.5f;
        float _495 = exp2(_494);
        float _496 = _495 * _485;
        float _497 = _496 / cb1_018z;
        float _498 = _497 + -0.07636754959821701f;
        float _499 = _493 * 1.2750000953674316f;
        float _500 = exp2(_499);
        float _501 = _500 * 0.07636754959821701f;
        float _502 = cb1_018y * 0.011232397519052029f;
        float _503 = _502 * _495;
        float _504 = _503 / cb1_018z;
        float _505 = _501 - _504;
        float _506 = _500 + -0.11232396960258484f;
        float _507 = _506 * _485;
        float _508 = _507 / cb1_018z;
        float _509 = _508 * cb1_018z;
        float _510 = abs(_475);
        float _511 = abs(_478);
        float _512 = abs(_480);
        float _513 = log2(_510);
        float _514 = log2(_511);
        float _515 = log2(_512);
        float _516 = _513 * 1.5f;
        float _517 = _514 * 1.5f;
        float _518 = _515 * 1.5f;
        float _519 = exp2(_516);
        float _520 = exp2(_517);
        float _521 = exp2(_518);
        float _522 = _519 * _509;
        float _523 = _520 * _509;
        float _524 = _521 * _509;
        float _525 = _513 * 1.2750000953674316f;
        float _526 = _514 * 1.2750000953674316f;
        float _527 = _515 * 1.2750000953674316f;
        float _528 = exp2(_525);
        float _529 = exp2(_526);
        float _530 = exp2(_527);
        float _531 = _528 * _498;
        float _532 = _529 * _498;
        float _533 = _530 * _498;
        float _534 = _531 + _505;
        float _535 = _532 + _505;
        float _536 = _533 + _505;
        float _537 = _522 / _534;
        float _538 = _523 / _535;
        float _539 = _524 / _536;
        float _540 = _537 * 9.999999747378752e-05f;
        float _541 = _538 * 9.999999747378752e-05f;
        float _542 = _539 * 9.999999747378752e-05f;
        float _543 = 5000.0f / cb1_018y;
        float _544 = _540 * _543;
        float _545 = _541 * _543;
        float _546 = _542 * _543;
        _573 = _544;
        _574 = _545;
        _575 = _546;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_475, _478, _480));
      _573 = tonemapped.x, _574 = tonemapped.y, _575 = tonemapped.z;
    }
      } else {
        float _548 = _475 + 0.020616600289940834f;
        float _549 = _478 + 0.020616600289940834f;
        float _550 = _480 + 0.020616600289940834f;
        float _551 = _548 * _475;
        float _552 = _549 * _478;
        float _553 = _550 * _480;
        float _554 = _551 + -7.456949970219284e-05f;
        float _555 = _552 + -7.456949970219284e-05f;
        float _556 = _553 + -7.456949970219284e-05f;
        float _557 = _475 * 0.9837960004806519f;
        float _558 = _478 * 0.9837960004806519f;
        float _559 = _480 * 0.9837960004806519f;
        float _560 = _557 + 0.4336790144443512f;
        float _561 = _558 + 0.4336790144443512f;
        float _562 = _559 + 0.4336790144443512f;
        float _563 = _560 * _475;
        float _564 = _561 * _478;
        float _565 = _562 * _480;
        float _566 = _563 + 0.24617899954319f;
        float _567 = _564 + 0.24617899954319f;
        float _568 = _565 + 0.24617899954319f;
        float _569 = _554 / _566;
        float _570 = _555 / _567;
        float _571 = _556 / _568;
        _573 = _569;
        _574 = _570;
        _575 = _571;
      }
      float _576 = _573 * 1.6047500371932983f;
      float _577 = mad(-0.5310800075531006f, _574, _576);
      float _578 = mad(-0.07366999983787537f, _575, _577);
      float _579 = _573 * -0.10208000242710114f;
      float _580 = mad(1.1081299781799316f, _574, _579);
      float _581 = mad(-0.006049999967217445f, _575, _580);
      float _582 = _573 * -0.0032599999103695154f;
      float _583 = mad(-0.07275000214576721f, _574, _582);
      float _584 = mad(1.0760200023651123f, _575, _583);
      if (_408) {
        // float _586 = max(_578, 0.0f);
        // float _587 = max(_581, 0.0f);
        // float _588 = max(_584, 0.0f);
        // bool _589 = !(_586 >= 0.0030399328097701073f);
        // if (!_589) {
        //   float _591 = abs(_586);
        //   float _592 = log2(_591);
        //   float _593 = _592 * 0.4166666567325592f;
        //   float _594 = exp2(_593);
        //   float _595 = _594 * 1.0549999475479126f;
        //   float _596 = _595 + -0.054999999701976776f;
        //   _600 = _596;
        // } else {
        //   float _598 = _586 * 12.923210144042969f;
        //   _600 = _598;
        // }
        // bool _601 = !(_587 >= 0.0030399328097701073f);
        // if (!_601) {
        //   float _603 = abs(_587);
        //   float _604 = log2(_603);
        //   float _605 = _604 * 0.4166666567325592f;
        //   float _606 = exp2(_605);
        //   float _607 = _606 * 1.0549999475479126f;
        //   float _608 = _607 + -0.054999999701976776f;
        //   _612 = _608;
        // } else {
        //   float _610 = _587 * 12.923210144042969f;
        //   _612 = _610;
        // }
        // bool _613 = !(_588 >= 0.0030399328097701073f);
        // if (!_613) {
        //   float _615 = abs(_588);
        //   float _616 = log2(_615);
        //   float _617 = _616 * 0.4166666567325592f;
        //   float _618 = exp2(_617);
        //   float _619 = _618 * 1.0549999475479126f;
        //   float _620 = _619 + -0.054999999701976776f;
        //   _693 = _600;
        //   _694 = _612;
        //   _695 = _620;
        // } else {
        //   float _622 = _588 * 12.923210144042969f;
        //   _693 = _600;
        //   _694 = _612;
        //   _695 = _622;
        // }
        _693 = renodx::color::srgb::EncodeSafe(_578);
        _694 = renodx::color::srgb::EncodeSafe(_581);
        _695 = renodx::color::srgb::EncodeSafe(_584);

      } else {
        float _624 = saturate(_578);
        float _625 = saturate(_581);
        float _626 = saturate(_584);
        bool _627 = ((uint)(cb1_018w) == -2);
        if (!_627) {
          bool _629 = !(_624 >= 0.0030399328097701073f);
          if (!_629) {
            float _631 = abs(_624);
            float _632 = log2(_631);
            float _633 = _632 * 0.4166666567325592f;
            float _634 = exp2(_633);
            float _635 = _634 * 1.0549999475479126f;
            float _636 = _635 + -0.054999999701976776f;
            _640 = _636;
          } else {
            float _638 = _624 * 12.923210144042969f;
            _640 = _638;
          }
          bool _641 = !(_625 >= 0.0030399328097701073f);
          if (!_641) {
            float _643 = abs(_625);
            float _644 = log2(_643);
            float _645 = _644 * 0.4166666567325592f;
            float _646 = exp2(_645);
            float _647 = _646 * 1.0549999475479126f;
            float _648 = _647 + -0.054999999701976776f;
            _652 = _648;
          } else {
            float _650 = _625 * 12.923210144042969f;
            _652 = _650;
          }
          bool _653 = !(_626 >= 0.0030399328097701073f);
          if (!_653) {
            float _655 = abs(_626);
            float _656 = log2(_655);
            float _657 = _656 * 0.4166666567325592f;
            float _658 = exp2(_657);
            float _659 = _658 * 1.0549999475479126f;
            float _660 = _659 + -0.054999999701976776f;
            _664 = _640;
            _665 = _652;
            _666 = _660;
          } else {
            float _662 = _626 * 12.923210144042969f;
            _664 = _640;
            _665 = _652;
            _666 = _662;
          }
        } else {
          _664 = _624;
          _665 = _625;
          _666 = _626;
        }
        float _671 = abs(_664);
        float _672 = abs(_665);
        float _673 = abs(_666);
        float _674 = log2(_671);
        float _675 = log2(_672);
        float _676 = log2(_673);
        float _677 = _674 * cb2_000z;
        float _678 = _675 * cb2_000z;
        float _679 = _676 * cb2_000z;
        float _680 = exp2(_677);
        float _681 = exp2(_678);
        float _682 = exp2(_679);
        float _683 = _680 * cb2_000y;
        float _684 = _681 * cb2_000y;
        float _685 = _682 * cb2_000y;
        float _686 = _683 + cb2_000x;
        float _687 = _684 + cb2_000x;
        float _688 = _685 + cb2_000x;
        float _689 = saturate(_686);
        float _690 = saturate(_687);
        float _691 = saturate(_688);
        _693 = _689;
        _694 = _690;
        _695 = _691;
      }
      float _699 = cb2_023x * TEXCOORD0_centroid.x;
      float _700 = cb2_023y * TEXCOORD0_centroid.y;
      float _703 = _699 + cb2_023z;
      float _704 = _700 + cb2_023w;
      float4 _707 = t9.SampleLevel(s0_space2, float2(_703, _704), 0.0f);
      float _709 = _707.x + -0.5f;
      float _710 = _709 * cb2_022x;
      float _711 = _710 + 0.5f;
      float _712 = _711 * 2.0f;
      float _713 = _712 * _693;
      float _714 = _712 * _694;
      float _715 = _712 * _695;
      float _719 = float((uint)(cb2_019z));
      float _720 = float((uint)(cb2_019w));
      float _721 = _719 + SV_Position.x;
      float _722 = _720 + SV_Position.y;
      uint _723 = uint(_721);
      uint _724 = uint(_722);
      uint _727 = cb2_019x + -1u;
      uint _728 = cb2_019y + -1u;
      int _729 = _723 & _727;
      int _730 = _724 & _728;
      float4 _731 = t3.Load(int3(_729, _730, 0));
      float _735 = _731.x * 2.0f;
      float _736 = _731.y * 2.0f;
      float _737 = _731.z * 2.0f;
      float _738 = _735 + -1.0f;
      float _739 = _736 + -1.0f;
      float _740 = _737 + -1.0f;
      float _741 = _738 * cb2_025w;
      float _742 = _739 * cb2_025w;
      float _743 = _740 * cb2_025w;
      float _744 = _741 + _713;
      float _745 = _742 + _714;
      float _746 = _743 + _715;
      float _747 = dot(float3(_744, _745, _746), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _744;
      SV_Target.y = _745;
      SV_Target.z = _746;
      SV_Target.w = _747;
      SV_Target_1.x = _747;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
