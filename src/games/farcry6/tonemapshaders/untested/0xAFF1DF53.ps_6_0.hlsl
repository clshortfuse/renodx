#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _28 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _32 = _28.x * 6.283199787139893f;
  float _33 = cos(_32);
  float _34 = sin(_32);
  float _35 = _33 * _28.z;
  float _36 = _34 * _28.z;
  float _37 = _35 + TEXCOORD0_centroid.x;
  float _38 = _36 + TEXCOORD0_centroid.y;
  float _39 = _37 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _35;
  float _44 = _38 * 10.0f;
  float _45 = 10.0f - _44;
  float _46 = min(_44, _45);
  float _47 = saturate(_46);
  float _48 = _47 * _36;
  float _49 = _43 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t8.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _53 = _51.w * _43;
  float _54 = _51.w * _48;
  float _55 = 1.0f - _28.y;
  float _56 = saturate(_55);
  float _57 = _53 * _56;
  float _58 = _54 * _56;
  float _62 = cb2_015x * TEXCOORD0_centroid.x;
  float _63 = cb2_015y * TEXCOORD0_centroid.y;
  float _66 = _62 + cb2_015z;
  float _67 = _63 + cb2_015w;
  float4 _68 = t9.SampleLevel(s0_space2, float2(_66, _67), 0.0f);
  float _72 = saturate(_68.x);
  float _73 = saturate(_68.z);
  float _76 = cb2_026x * _73;
  float _77 = _72 * 6.283199787139893f;
  float _78 = cos(_77);
  float _79 = sin(_77);
  float _80 = _76 * _78;
  float _81 = _79 * _76;
  float _82 = 1.0f - _68.y;
  float _83 = saturate(_82);
  float _84 = _80 * _83;
  float _85 = _81 * _83;
  float _86 = _57 + TEXCOORD0_centroid.x;
  float _87 = _86 + _84;
  float _88 = _58 + TEXCOORD0_centroid.y;
  float _89 = _88 + _85;
  float4 _90 = t8.SampleLevel(s2_space2, float2(_87, _89), 0.0f);
  bool _92 = (_90.y > 0.0f);
  float _93 = select(_92, TEXCOORD0_centroid.x, _87);
  float _94 = select(_92, TEXCOORD0_centroid.y, _89);
  float4 _95 = t1.SampleLevel(s4_space2, float2(_93, _94), 0.0f);
  float _99 = max(_95.x, 0.0f);
  float _100 = max(_95.y, 0.0f);
  float _101 = max(_95.z, 0.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float _104 = min(_101, 65000.0f);
  float4 _105 = t4.SampleLevel(s2_space2, float2(_93, _94), 0.0f);
  float _110 = max(_105.x, 0.0f);
  float _111 = max(_105.y, 0.0f);
  float _112 = max(_105.z, 0.0f);
  float _113 = max(_105.w, 0.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _117 = min(_113, 5000.0f);
  float _120 = _26.x * cb0_028z;
  float _121 = _120 + cb0_028x;
  float _122 = cb2_027w / _121;
  float _123 = 1.0f - _122;
  float _124 = abs(_123);
  float _126 = cb2_027y * _124;
  float _128 = _126 - cb2_027z;
  float _129 = saturate(_128);
  float _130 = max(_129, _117);
  float _131 = saturate(_130);
  float _135 = cb2_006x * _93;
  float _136 = cb2_006y * _94;
  float _139 = _135 + cb2_006z;
  float _140 = _136 + cb2_006w;
  float _144 = cb2_007x * _93;
  float _145 = cb2_007y * _94;
  float _148 = _144 + cb2_007z;
  float _149 = _145 + cb2_007w;
  float _153 = cb2_008x * _93;
  float _154 = cb2_008y * _94;
  float _157 = _153 + cb2_008z;
  float _158 = _154 + cb2_008w;
  float4 _159 = t1.SampleLevel(s2_space2, float2(_139, _140), 0.0f);
  float _161 = max(_159.x, 0.0f);
  float _162 = min(_161, 65000.0f);
  float4 _163 = t1.SampleLevel(s2_space2, float2(_148, _149), 0.0f);
  float _165 = max(_163.y, 0.0f);
  float _166 = min(_165, 65000.0f);
  float4 _167 = t1.SampleLevel(s2_space2, float2(_157, _158), 0.0f);
  float _169 = max(_167.z, 0.0f);
  float _170 = min(_169, 65000.0f);
  float4 _171 = t4.SampleLevel(s2_space2, float2(_139, _140), 0.0f);
  float _173 = max(_171.x, 0.0f);
  float _174 = min(_173, 5000.0f);
  float4 _175 = t4.SampleLevel(s2_space2, float2(_148, _149), 0.0f);
  float _177 = max(_175.y, 0.0f);
  float _178 = min(_177, 5000.0f);
  float4 _179 = t4.SampleLevel(s2_space2, float2(_157, _158), 0.0f);
  float _181 = max(_179.z, 0.0f);
  float _182 = min(_181, 5000.0f);
  float4 _183 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _189 = cb2_005x * _183.x;
  float _190 = cb2_005x * _183.y;
  float _191 = cb2_005x * _183.z;
  float _192 = _162 - _102;
  float _193 = _166 - _103;
  float _194 = _170 - _104;
  float _195 = _189 * _192;
  float _196 = _190 * _193;
  float _197 = _191 * _194;
  float _198 = _195 + _102;
  float _199 = _196 + _103;
  float _200 = _197 + _104;
  float _201 = _174 - _114;
  float _202 = _178 - _115;
  float _203 = _182 - _116;
  float _204 = _189 * _201;
  float _205 = _190 * _202;
  float _206 = _191 * _203;
  float _207 = _204 + _114;
  float _208 = _205 + _115;
  float _209 = _206 + _116;
  float4 _210 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _214 = _207 - _198;
  float _215 = _208 - _199;
  float _216 = _209 - _200;
  float _217 = _214 * _131;
  float _218 = _215 * _131;
  float _219 = _216 * _131;
  float _220 = _217 + _198;
  float _221 = _218 + _199;
  float _222 = _219 + _200;
  float _223 = dot(float3(_220, _221, _222), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _227 = t0[0].SExposureData_020;
  float _229 = t0[0].SExposureData_004;
  float _231 = cb2_018x * 0.5f;
  float _232 = _231 * cb2_018y;
  float _233 = _229.x - _232;
  float _234 = cb2_018y * cb2_018x;
  float _235 = 1.0f / _234;
  float _236 = _233 * _235;
  float _237 = _223 / _227.x;
  float _238 = _237 * 5464.01611328125f;
  float _239 = _238 + 9.99999993922529e-09f;
  float _240 = log2(_239);
  float _241 = _240 - _233;
  float _242 = _241 * _235;
  float _243 = saturate(_242);
  float2 _244 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _243), 0.0f);
  float _247 = max(_244.y, 1.0000000116860974e-07f);
  float _248 = _244.x / _247;
  float _249 = _248 + _236;
  float _250 = _249 / _235;
  float _251 = _250 - _229.x;
  float _252 = -0.0f - _251;
  float _254 = _252 - cb2_027x;
  float _255 = max(0.0f, _254);
  float _257 = cb2_026z * _255;
  float _258 = _251 - cb2_027x;
  float _259 = max(0.0f, _258);
  float _261 = cb2_026w * _259;
  bool _262 = (_251 < 0.0f);
  float _263 = select(_262, _257, _261);
  float _264 = exp2(_263);
  float _265 = _264 * _220;
  float _266 = _264 * _221;
  float _267 = _264 * _222;
  float _272 = cb2_024y * _210.x;
  float _273 = cb2_024z * _210.y;
  float _274 = cb2_024w * _210.z;
  float _275 = _272 + _265;
  float _276 = _273 + _266;
  float _277 = _274 + _267;
  float _282 = _275 * cb2_025x;
  float _283 = _276 * cb2_025y;
  float _284 = _277 * cb2_025z;
  float _285 = dot(float3(_282, _283, _284), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _286 = t0[0].SExposureData_012;
  float _288 = _285 * 5464.01611328125f;
  float _289 = _288 * _286.x;
  float _290 = _289 + 9.99999993922529e-09f;
  float _291 = log2(_290);
  float _292 = _291 + 16.929765701293945f;
  float _293 = _292 * 0.05734497308731079f;
  float _294 = saturate(_293);
  float _295 = _294 * _294;
  float _296 = _294 * 2.0f;
  float _297 = 3.0f - _296;
  float _298 = _295 * _297;
  float _299 = _283 * 0.8450999855995178f;
  float _300 = _284 * 0.14589999616146088f;
  float _301 = _299 + _300;
  float _302 = _301 * 2.4890189170837402f;
  float _303 = _301 * 0.3754962384700775f;
  float _304 = _301 * 2.811495304107666f;
  float _305 = _301 * 5.519708156585693f;
  float _306 = _285 - _302;
  float _307 = _298 * _306;
  float _308 = _307 + _302;
  float _309 = _298 * 0.5f;
  float _310 = _309 + 0.5f;
  float _311 = _310 * _306;
  float _312 = _311 + _302;
  float _313 = _282 - _303;
  float _314 = _283 - _304;
  float _315 = _284 - _305;
  float _316 = _310 * _313;
  float _317 = _310 * _314;
  float _318 = _310 * _315;
  float _319 = _316 + _303;
  float _320 = _317 + _304;
  float _321 = _318 + _305;
  float _322 = 1.0f / _312;
  float _323 = _308 * _322;
  float _324 = _323 * _319;
  float _325 = _323 * _320;
  float _326 = _323 * _321;
  float _330 = cb2_020x * TEXCOORD0_centroid.x;
  float _331 = cb2_020y * TEXCOORD0_centroid.y;
  float _334 = _330 + cb2_020z;
  float _335 = _331 + cb2_020w;
  float _338 = dot(float2(_334, _335), float2(_334, _335));
  float _339 = 1.0f - _338;
  float _340 = saturate(_339);
  float _341 = log2(_340);
  float _342 = _341 * cb2_021w;
  float _343 = exp2(_342);
  float _347 = _324 - cb2_021x;
  float _348 = _325 - cb2_021y;
  float _349 = _326 - cb2_021z;
  float _350 = _347 * _343;
  float _351 = _348 * _343;
  float _352 = _349 * _343;
  float _353 = _350 + cb2_021x;
  float _354 = _351 + cb2_021y;
  float _355 = _352 + cb2_021z;
  float _356 = t0[0].SExposureData_000;
  float _358 = max(_227.x, 0.0010000000474974513f);
  float _359 = 1.0f / _358;
  float _360 = _359 * _356.x;
  bool _363 = ((uint)(cb2_069y) == 0);
  float _369;
  float _370;
  float _371;
  float _425;
  float _426;
  float _427;
  float _458;
  float _459;
  float _460;
  float _610;
  float _647;
  float _648;
  float _649;
  float _678;
  float _679;
  float _680;
  float _761;
  float _762;
  float _763;
  float _769;
  float _770;
  float _771;
  float _785;
  float _786;
  float _787;
  float _812;
  float _824;
  float _852;
  float _864;
  float _876;
  float _877;
  float _878;
  float _905;
  float _906;
  float _907;
  if (!_363) {
    float _365 = _360 * _353;
    float _366 = _360 * _354;
    float _367 = _360 * _355;
    _369 = _365;
    _370 = _366;
    _371 = _367;
  } else {
    _369 = _353;
    _370 = _354;
    _371 = _355;
  }
  float _372 = _369 * 0.6130970120429993f;
  float _373 = mad(0.33952298760414124f, _370, _372);
  float _374 = mad(0.04737899824976921f, _371, _373);
  float _375 = _369 * 0.07019399851560593f;
  float _376 = mad(0.9163540005683899f, _370, _375);
  float _377 = mad(0.013451999984681606f, _371, _376);
  float _378 = _369 * 0.02061600051820278f;
  float _379 = mad(0.10956999659538269f, _370, _378);
  float _380 = mad(0.8698149919509888f, _371, _379);
  float _381 = log2(_374);
  float _382 = log2(_377);
  float _383 = log2(_380);
  float _384 = _381 * 0.04211956635117531f;
  float _385 = _382 * 0.04211956635117531f;
  float _386 = _383 * 0.04211956635117531f;
  float _387 = _384 + 0.6252607107162476f;
  float _388 = _385 + 0.6252607107162476f;
  float _389 = _386 + 0.6252607107162476f;
  float4 _390 = t6.SampleLevel(s2_space2, float3(_387, _388, _389), 0.0f);
  bool _396 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_396 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _400 = cb2_017x * _390.x;
    float _401 = cb2_017x * _390.y;
    float _402 = cb2_017x * _390.z;
    float _404 = _400 + cb2_017y;
    float _405 = _401 + cb2_017y;
    float _406 = _402 + cb2_017y;
    float _407 = exp2(_404);
    float _408 = exp2(_405);
    float _409 = exp2(_406);
    float _410 = _407 + 1.0f;
    float _411 = _408 + 1.0f;
    float _412 = _409 + 1.0f;
    float _413 = 1.0f / _410;
    float _414 = 1.0f / _411;
    float _415 = 1.0f / _412;
    float _417 = cb2_017z * _413;
    float _418 = cb2_017z * _414;
    float _419 = cb2_017z * _415;
    float _421 = _417 + cb2_017w;
    float _422 = _418 + cb2_017w;
    float _423 = _419 + cb2_017w;
    _425 = _421;
    _426 = _422;
    _427 = _423;
  } else {
    _425 = _390.x;
    _426 = _390.y;
    _427 = _390.z;
  }
  float _428 = _425 * 23.0f;
  float _429 = _428 + -14.473931312561035f;
  float _430 = exp2(_429);
  float _431 = _426 * 23.0f;
  float _432 = _431 + -14.473931312561035f;
  float _433 = exp2(_432);
  float _434 = _427 * 23.0f;
  float _435 = _434 + -14.473931312561035f;
  float _436 = exp2(_435);
  float _443 = cb2_016x - _430;
  float _444 = cb2_016y - _433;
  float _445 = cb2_016z - _436;
  float _446 = _443 * cb2_016w;
  float _447 = _444 * cb2_016w;
  float _448 = _445 * cb2_016w;
  float _449 = _446 + _430;
  float _450 = _447 + _433;
  float _451 = _448 + _436;
  if (_396 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _454 = cb2_024x * _449;
    float _455 = cb2_024x * _450;
    float _456 = cb2_024x * _451;
    _458 = _454;
    _459 = _455;
    _460 = _456;
  } else {
    _458 = _449;
    _459 = _450;
    _460 = _451;
  }
  float _463 = _458 * 0.9708889722824097f;
  float _464 = mad(0.026962999254465103f, _459, _463);
  float _465 = mad(0.002148000057786703f, _460, _464);
  float _466 = _458 * 0.01088900025933981f;
  float _467 = mad(0.9869629740715027f, _459, _466);
  float _468 = mad(0.002148000057786703f, _460, _467);
  float _469 = mad(0.026962999254465103f, _459, _466);
  float _470 = mad(0.9621480107307434f, _460, _469);
  float _471 = max(_465, 0.0f);
  float _472 = max(_468, 0.0f);
  float _473 = max(_470, 0.0f);
  float _474 = min(_471, cb2_095y);
  float _475 = min(_472, cb2_095y);
  float _476 = min(_473, cb2_095y);
  bool _479 = ((uint)(cb2_095x) == 0);
  bool _482 = ((uint)(cb2_094w) == 0);
  bool _484 = ((uint)(cb2_094z) == 0);
  bool _486 = ((uint)(cb2_094y) != 0);
  bool _488 = ((uint)(cb2_094x) == 0);
  bool _490 = ((uint)(cb2_069z) != 0);
  float _537 = asfloat((uint)(cb2_075y));
  float _538 = asfloat((uint)(cb2_075z));
  float _539 = asfloat((uint)(cb2_075w));
  float _540 = asfloat((uint)(cb2_074z));
  float _541 = asfloat((uint)(cb2_074w));
  float _542 = asfloat((uint)(cb2_075x));
  float _543 = asfloat((uint)(cb2_073w));
  float _544 = asfloat((uint)(cb2_074x));
  float _545 = asfloat((uint)(cb2_074y));
  float _546 = asfloat((uint)(cb2_077x));
  float _547 = asfloat((uint)(cb2_077y));
  float _548 = asfloat((uint)(cb2_079x));
  float _549 = asfloat((uint)(cb2_079y));
  float _550 = asfloat((uint)(cb2_079z));
  float _551 = asfloat((uint)(cb2_078y));
  float _552 = asfloat((uint)(cb2_078z));
  float _553 = asfloat((uint)(cb2_078w));
  float _554 = asfloat((uint)(cb2_077z));
  float _555 = asfloat((uint)(cb2_077w));
  float _556 = asfloat((uint)(cb2_078x));
  float _557 = asfloat((uint)(cb2_072y));
  float _558 = asfloat((uint)(cb2_072z));
  float _559 = asfloat((uint)(cb2_072w));
  float _560 = asfloat((uint)(cb2_071x));
  float _561 = asfloat((uint)(cb2_071y));
  float _562 = asfloat((uint)(cb2_076x));
  float _563 = asfloat((uint)(cb2_070w));
  float _564 = asfloat((uint)(cb2_070x));
  float _565 = asfloat((uint)(cb2_070y));
  float _566 = asfloat((uint)(cb2_070z));
  float _567 = asfloat((uint)(cb2_073x));
  float _568 = asfloat((uint)(cb2_073y));
  float _569 = asfloat((uint)(cb2_073z));
  float _570 = asfloat((uint)(cb2_071z));
  float _571 = asfloat((uint)(cb2_071w));
  float _572 = asfloat((uint)(cb2_072x));
  float _573 = max(_475, _476);
  float _574 = max(_474, _573);
  float _575 = 1.0f / _574;
  float _576 = _575 * _474;
  float _577 = _575 * _475;
  float _578 = _575 * _476;
  float _579 = abs(_576);
  float _580 = log2(_579);
  float _581 = _580 * _564;
  float _582 = exp2(_581);
  float _583 = abs(_577);
  float _584 = log2(_583);
  float _585 = _584 * _565;
  float _586 = exp2(_585);
  float _587 = abs(_578);
  float _588 = log2(_587);
  float _589 = _588 * _566;
  float _590 = exp2(_589);
  if (_486) {
    float _593 = asfloat((uint)(cb2_076w));
    float _595 = asfloat((uint)(cb2_076z));
    float _597 = asfloat((uint)(cb2_076y));
    float _598 = _595 * _475;
    float _599 = _597 * _474;
    float _600 = _593 * _476;
    float _601 = _599 + _600;
    float _602 = _601 + _598;
    _610 = _602;
  } else {
    float _604 = _571 * _475;
    float _605 = _570 * _474;
    float _606 = _572 * _476;
    float _607 = _604 + _605;
    float _608 = _607 + _606;
    _610 = _608;
  }
  float _611 = abs(_610);
  float _612 = log2(_611);
  float _613 = _612 * _563;
  float _614 = exp2(_613);
  float _615 = log2(_614);
  float _616 = _615 * _562;
  float _617 = exp2(_616);
  float _618 = select(_490, _617, _614);
  float _619 = _618 * _560;
  float _620 = _619 + _561;
  float _621 = 1.0f / _620;
  float _622 = _621 * _614;
  if (_486) {
    if (!_488) {
      float _625 = _582 * _554;
      float _626 = _586 * _555;
      float _627 = _590 * _556;
      float _628 = _626 + _625;
      float _629 = _628 + _627;
      float _630 = _586 * _552;
      float _631 = _582 * _551;
      float _632 = _590 * _553;
      float _633 = _630 + _631;
      float _634 = _633 + _632;
      float _635 = _590 * _550;
      float _636 = _586 * _549;
      float _637 = _582 * _548;
      float _638 = _636 + _637;
      float _639 = _638 + _635;
      float _640 = max(_634, _639);
      float _641 = max(_629, _640);
      float _642 = 1.0f / _641;
      float _643 = _642 * _629;
      float _644 = _642 * _634;
      float _645 = _642 * _639;
      _647 = _643;
      _648 = _644;
      _649 = _645;
    } else {
      _647 = _582;
      _648 = _586;
      _649 = _590;
    }
    float _650 = _647 * _547;
    float _651 = exp2(_650);
    float _652 = _651 * _546;
    float _653 = saturate(_652);
    float _654 = _647 * _546;
    float _655 = _647 - _654;
    float _656 = saturate(_655);
    float _657 = max(_546, _656);
    float _658 = min(_657, _653);
    float _659 = _648 * _547;
    float _660 = exp2(_659);
    float _661 = _660 * _546;
    float _662 = saturate(_661);
    float _663 = _648 * _546;
    float _664 = _648 - _663;
    float _665 = saturate(_664);
    float _666 = max(_546, _665);
    float _667 = min(_666, _662);
    float _668 = _649 * _547;
    float _669 = exp2(_668);
    float _670 = _669 * _546;
    float _671 = saturate(_670);
    float _672 = _649 * _546;
    float _673 = _649 - _672;
    float _674 = saturate(_673);
    float _675 = max(_546, _674);
    float _676 = min(_675, _671);
    _678 = _658;
    _679 = _667;
    _680 = _676;
  } else {
    _678 = _582;
    _679 = _586;
    _680 = _590;
  }
  float _681 = _678 * _570;
  float _682 = _679 * _571;
  float _683 = _682 + _681;
  float _684 = _680 * _572;
  float _685 = _683 + _684;
  float _686 = 1.0f / _685;
  float _687 = _686 * _622;
  float _688 = saturate(_687);
  float _689 = _688 * _678;
  float _690 = saturate(_689);
  float _691 = _688 * _679;
  float _692 = saturate(_691);
  float _693 = _688 * _680;
  float _694 = saturate(_693);
  float _695 = _690 * _557;
  float _696 = _557 - _695;
  float _697 = _692 * _558;
  float _698 = _558 - _697;
  float _699 = _694 * _559;
  float _700 = _559 - _699;
  float _701 = _694 * _572;
  float _702 = _690 * _570;
  float _703 = _692 * _571;
  float _704 = _622 - _702;
  float _705 = _704 - _703;
  float _706 = _705 - _701;
  float _707 = saturate(_706);
  float _708 = _698 * _571;
  float _709 = _696 * _570;
  float _710 = _700 * _572;
  float _711 = _708 + _709;
  float _712 = _711 + _710;
  float _713 = 1.0f / _712;
  float _714 = _713 * _707;
  float _715 = _714 * _696;
  float _716 = _715 + _690;
  float _717 = saturate(_716);
  float _718 = _714 * _698;
  float _719 = _718 + _692;
  float _720 = saturate(_719);
  float _721 = _714 * _700;
  float _722 = _721 + _694;
  float _723 = saturate(_722);
  float _724 = _723 * _572;
  float _725 = _717 * _570;
  float _726 = _720 * _571;
  float _727 = _622 - _725;
  float _728 = _727 - _726;
  float _729 = _728 - _724;
  float _730 = saturate(_729);
  float _731 = _730 * _567;
  float _732 = _731 + _717;
  float _733 = saturate(_732);
  float _734 = _730 * _568;
  float _735 = _734 + _720;
  float _736 = saturate(_735);
  float _737 = _730 * _569;
  float _738 = _737 + _723;
  float _739 = saturate(_738);
  if (!_484) {
    float _741 = _733 * _543;
    float _742 = _736 * _544;
    float _743 = _739 * _545;
    float _744 = _742 + _741;
    float _745 = _744 + _743;
    float _746 = _736 * _541;
    float _747 = _733 * _540;
    float _748 = _739 * _542;
    float _749 = _746 + _747;
    float _750 = _749 + _748;
    float _751 = _739 * _539;
    float _752 = _736 * _538;
    float _753 = _733 * _537;
    float _754 = _752 + _753;
    float _755 = _754 + _751;
    if (!_482) {
      float _757 = saturate(_745);
      float _758 = saturate(_750);
      float _759 = saturate(_755);
      _761 = _759;
      _762 = _758;
      _763 = _757;
    } else {
      _761 = _755;
      _762 = _750;
      _763 = _745;
    }
  } else {
    _761 = _739;
    _762 = _736;
    _763 = _733;
  }
  if (!_479) {
    float _765 = _763 * _543;
    float _766 = _762 * _543;
    float _767 = _761 * _543;
    _769 = _767;
    _770 = _766;
    _771 = _765;
  } else {
    _769 = _761;
    _770 = _762;
    _771 = _763;
  }
  if (_396) {
    float _775 = cb1_018z * 9.999999747378752e-05f;
    float _776 = _775 * _771;
    float _777 = _775 * _770;
    float _778 = _775 * _769;
    float _780 = 5000.0f / cb1_018y;
    float _781 = _776 * _780;
    float _782 = _777 * _780;
    float _783 = _778 * _780;
    _785 = _781;
    _786 = _782;
    _787 = _783;
  } else {
    _785 = _771;
    _786 = _770;
    _787 = _769;
  }
  float _788 = _785 * 1.6047500371932983f;
  float _789 = mad(-0.5310800075531006f, _786, _788);
  float _790 = mad(-0.07366999983787537f, _787, _789);
  float _791 = _785 * -0.10208000242710114f;
  float _792 = mad(1.1081299781799316f, _786, _791);
  float _793 = mad(-0.006049999967217445f, _787, _792);
  float _794 = _785 * -0.0032599999103695154f;
  float _795 = mad(-0.07275000214576721f, _786, _794);
  float _796 = mad(1.0760200023651123f, _787, _795);
  if (_396) {
    // float _798 = max(_790, 0.0f);
    // float _799 = max(_793, 0.0f);
    // float _800 = max(_796, 0.0f);
    // bool _801 = !(_798 >= 0.0030399328097701073f);
    // if (!_801) {
    //   float _803 = abs(_798);
    //   float _804 = log2(_803);
    //   float _805 = _804 * 0.4166666567325592f;
    //   float _806 = exp2(_805);
    //   float _807 = _806 * 1.0549999475479126f;
    //   float _808 = _807 + -0.054999999701976776f;
    //   _812 = _808;
    // } else {
    //   float _810 = _798 * 12.923210144042969f;
    //   _812 = _810;
    // }
    // bool _813 = !(_799 >= 0.0030399328097701073f);
    // if (!_813) {
    //   float _815 = abs(_799);
    //   float _816 = log2(_815);
    //   float _817 = _816 * 0.4166666567325592f;
    //   float _818 = exp2(_817);
    //   float _819 = _818 * 1.0549999475479126f;
    //   float _820 = _819 + -0.054999999701976776f;
    //   _824 = _820;
    // } else {
    //   float _822 = _799 * 12.923210144042969f;
    //   _824 = _822;
    // }
    // bool _825 = !(_800 >= 0.0030399328097701073f);
    // if (!_825) {
    //   float _827 = abs(_800);
    //   float _828 = log2(_827);
    //   float _829 = _828 * 0.4166666567325592f;
    //   float _830 = exp2(_829);
    //   float _831 = _830 * 1.0549999475479126f;
    //   float _832 = _831 + -0.054999999701976776f;
    //   _905 = _812;
    //   _906 = _824;
    //   _907 = _832;
    // } else {
    //   float _834 = _800 * 12.923210144042969f;
    //   _905 = _812;
    //   _906 = _824;
    //   _907 = _834;
    // }
    _905 = renodx::color::srgb::EncodeSafe(_790);
    _906 = renodx::color::srgb::EncodeSafe(_793);
    _907 = renodx::color::srgb::EncodeSafe(_796);

  } else {
    float _836 = saturate(_790);
    float _837 = saturate(_793);
    float _838 = saturate(_796);
    bool _839 = ((uint)(cb1_018w) == -2);
    if (!_839) {
      bool _841 = !(_836 >= 0.0030399328097701073f);
      if (!_841) {
        float _843 = abs(_836);
        float _844 = log2(_843);
        float _845 = _844 * 0.4166666567325592f;
        float _846 = exp2(_845);
        float _847 = _846 * 1.0549999475479126f;
        float _848 = _847 + -0.054999999701976776f;
        _852 = _848;
      } else {
        float _850 = _836 * 12.923210144042969f;
        _852 = _850;
      }
      bool _853 = !(_837 >= 0.0030399328097701073f);
      if (!_853) {
        float _855 = abs(_837);
        float _856 = log2(_855);
        float _857 = _856 * 0.4166666567325592f;
        float _858 = exp2(_857);
        float _859 = _858 * 1.0549999475479126f;
        float _860 = _859 + -0.054999999701976776f;
        _864 = _860;
      } else {
        float _862 = _837 * 12.923210144042969f;
        _864 = _862;
      }
      bool _865 = !(_838 >= 0.0030399328097701073f);
      if (!_865) {
        float _867 = abs(_838);
        float _868 = log2(_867);
        float _869 = _868 * 0.4166666567325592f;
        float _870 = exp2(_869);
        float _871 = _870 * 1.0549999475479126f;
        float _872 = _871 + -0.054999999701976776f;
        _876 = _852;
        _877 = _864;
        _878 = _872;
      } else {
        float _874 = _838 * 12.923210144042969f;
        _876 = _852;
        _877 = _864;
        _878 = _874;
      }
    } else {
      _876 = _836;
      _877 = _837;
      _878 = _838;
    }
    float _883 = abs(_876);
    float _884 = abs(_877);
    float _885 = abs(_878);
    float _886 = log2(_883);
    float _887 = log2(_884);
    float _888 = log2(_885);
    float _889 = _886 * cb2_000z;
    float _890 = _887 * cb2_000z;
    float _891 = _888 * cb2_000z;
    float _892 = exp2(_889);
    float _893 = exp2(_890);
    float _894 = exp2(_891);
    float _895 = _892 * cb2_000y;
    float _896 = _893 * cb2_000y;
    float _897 = _894 * cb2_000y;
    float _898 = _895 + cb2_000x;
    float _899 = _896 + cb2_000x;
    float _900 = _897 + cb2_000x;
    float _901 = saturate(_898);
    float _902 = saturate(_899);
    float _903 = saturate(_900);
    _905 = _901;
    _906 = _902;
    _907 = _903;
  }
  float _911 = cb2_023x * TEXCOORD0_centroid.x;
  float _912 = cb2_023y * TEXCOORD0_centroid.y;
  float _915 = _911 + cb2_023z;
  float _916 = _912 + cb2_023w;
  float4 _919 = t11.SampleLevel(s0_space2, float2(_915, _916), 0.0f);
  float _921 = _919.x + -0.5f;
  float _922 = _921 * cb2_022x;
  float _923 = _922 + 0.5f;
  float _924 = _923 * 2.0f;
  float _925 = _924 * _905;
  float _926 = _924 * _906;
  float _927 = _924 * _907;
  float _931 = float((uint)(cb2_019z));
  float _932 = float((uint)(cb2_019w));
  float _933 = _931 + SV_Position.x;
  float _934 = _932 + SV_Position.y;
  uint _935 = uint(_933);
  uint _936 = uint(_934);
  uint _939 = cb2_019x + -1u;
  uint _940 = cb2_019y + -1u;
  int _941 = _935 & _939;
  int _942 = _936 & _940;
  float4 _943 = t3.Load(int3(_941, _942, 0));
  float _947 = _943.x * 2.0f;
  float _948 = _943.y * 2.0f;
  float _949 = _943.z * 2.0f;
  float _950 = _947 + -1.0f;
  float _951 = _948 + -1.0f;
  float _952 = _949 + -1.0f;
  float _953 = _950 * cb2_025w;
  float _954 = _951 * cb2_025w;
  float _955 = _952 * cb2_025w;
  float _956 = _953 + _925;
  float _957 = _954 + _926;
  float _958 = _955 + _927;
  float _959 = dot(float3(_956, _957, _958), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _956;
  SV_Target.y = _957;
  SV_Target.z = _958;
  SV_Target.w = _959;
  SV_Target_1.x = _959;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
