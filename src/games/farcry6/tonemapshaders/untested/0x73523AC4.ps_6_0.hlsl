#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _28 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _32 = _28.x * 6.283199787139893f;
  float _33 = cos(_32);
  float _34 = sin(_32);
  float _35 = _33 * _28.z;
  float _36 = _34 * _28.z;
  float _37 = _35 + TEXCOORD0_centroid.x;
  float _38 = _36 + TEXCOORD0_centroid.y;
  float _39 = _37 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _35;
  float _44 = _38 * 10.0f;
  float _45 = 10.0f - _44;
  float _46 = min(_44, _45);
  float _47 = saturate(_46);
  float _48 = _47 * _36;
  float _49 = _43 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t8.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _53 = _51.w * _43;
  float _54 = _51.w * _48;
  float _55 = 1.0f - _28.y;
  float _56 = saturate(_55);
  float _57 = _53 * _56;
  float _58 = _54 * _56;
  float _62 = cb2_015x * TEXCOORD0_centroid.x;
  float _63 = cb2_015y * TEXCOORD0_centroid.y;
  float _66 = _62 + cb2_015z;
  float _67 = _63 + cb2_015w;
  float4 _68 = t9.SampleLevel(s0_space2, float2(_66, _67), 0.0f);
  float _72 = saturate(_68.x);
  float _73 = saturate(_68.z);
  float _76 = cb2_026x * _73;
  float _77 = _72 * 6.283199787139893f;
  float _78 = cos(_77);
  float _79 = sin(_77);
  float _80 = _76 * _78;
  float _81 = _79 * _76;
  float _82 = 1.0f - _68.y;
  float _83 = saturate(_82);
  float _84 = _80 * _83;
  float _85 = _81 * _83;
  float _86 = _57 + TEXCOORD0_centroid.x;
  float _87 = _86 + _84;
  float _88 = _58 + TEXCOORD0_centroid.y;
  float _89 = _88 + _85;
  float4 _90 = t8.SampleLevel(s2_space2, float2(_87, _89), 0.0f);
  bool _92 = (_90.y > 0.0f);
  float _93 = select(_92, TEXCOORD0_centroid.x, _87);
  float _94 = select(_92, TEXCOORD0_centroid.y, _89);
  float4 _95 = t1.SampleLevel(s4_space2, float2(_93, _94), 0.0f);
  float _99 = max(_95.x, 0.0f);
  float _100 = max(_95.y, 0.0f);
  float _101 = max(_95.z, 0.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float _104 = min(_101, 65000.0f);
  float4 _105 = t4.SampleLevel(s2_space2, float2(_93, _94), 0.0f);
  float _110 = max(_105.x, 0.0f);
  float _111 = max(_105.y, 0.0f);
  float _112 = max(_105.z, 0.0f);
  float _113 = max(_105.w, 0.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _117 = min(_113, 5000.0f);
  float _120 = _26.x * cb0_028z;
  float _121 = _120 + cb0_028x;
  float _122 = cb2_027w / _121;
  float _123 = 1.0f - _122;
  float _124 = abs(_123);
  float _126 = cb2_027y * _124;
  float _128 = _126 - cb2_027z;
  float _129 = saturate(_128);
  float _130 = max(_129, _117);
  float _131 = saturate(_130);
  float _135 = cb2_013x * _93;
  float _136 = cb2_013y * _94;
  float _139 = _135 + cb2_013z;
  float _140 = _136 + cb2_013w;
  float _143 = dot(float2(_139, _140), float2(_139, _140));
  float _144 = abs(_143);
  float _145 = log2(_144);
  float _146 = _145 * cb2_014x;
  float _147 = exp2(_146);
  float _148 = saturate(_147);
  float _152 = cb2_011x * _93;
  float _153 = cb2_011y * _94;
  float _156 = _152 + cb2_011z;
  float _157 = _153 + cb2_011w;
  float _158 = _156 * _148;
  float _159 = _157 * _148;
  float _160 = _158 + _93;
  float _161 = _159 + _94;
  float _165 = cb2_012x * _93;
  float _166 = cb2_012y * _94;
  float _169 = _165 + cb2_012z;
  float _170 = _166 + cb2_012w;
  float _171 = _169 * _148;
  float _172 = _170 * _148;
  float _173 = _171 + _93;
  float _174 = _172 + _94;
  float4 _175 = t1.SampleLevel(s2_space2, float2(_160, _161), 0.0f);
  float _179 = max(_175.x, 0.0f);
  float _180 = max(_175.y, 0.0f);
  float _181 = max(_175.z, 0.0f);
  float _182 = min(_179, 65000.0f);
  float _183 = min(_180, 65000.0f);
  float _184 = min(_181, 65000.0f);
  float4 _185 = t1.SampleLevel(s2_space2, float2(_173, _174), 0.0f);
  float _189 = max(_185.x, 0.0f);
  float _190 = max(_185.y, 0.0f);
  float _191 = max(_185.z, 0.0f);
  float _192 = min(_189, 65000.0f);
  float _193 = min(_190, 65000.0f);
  float _194 = min(_191, 65000.0f);
  float4 _195 = t4.SampleLevel(s2_space2, float2(_160, _161), 0.0f);
  float _199 = max(_195.x, 0.0f);
  float _200 = max(_195.y, 0.0f);
  float _201 = max(_195.z, 0.0f);
  float _202 = min(_199, 5000.0f);
  float _203 = min(_200, 5000.0f);
  float _204 = min(_201, 5000.0f);
  float4 _205 = t4.SampleLevel(s2_space2, float2(_173, _174), 0.0f);
  float _209 = max(_205.x, 0.0f);
  float _210 = max(_205.y, 0.0f);
  float _211 = max(_205.z, 0.0f);
  float _212 = min(_209, 5000.0f);
  float _213 = min(_210, 5000.0f);
  float _214 = min(_211, 5000.0f);
  float _219 = 1.0f - cb2_009x;
  float _220 = 1.0f - cb2_009y;
  float _221 = 1.0f - cb2_009z;
  float _226 = _219 - cb2_010x;
  float _227 = _220 - cb2_010y;
  float _228 = _221 - cb2_010z;
  float _229 = saturate(_226);
  float _230 = saturate(_227);
  float _231 = saturate(_228);
  float _232 = _229 * _102;
  float _233 = _230 * _103;
  float _234 = _231 * _104;
  float _235 = cb2_009x * _182;
  float _236 = cb2_009y * _183;
  float _237 = cb2_009z * _184;
  float _238 = _235 + _232;
  float _239 = _236 + _233;
  float _240 = _237 + _234;
  float _241 = cb2_010x * _192;
  float _242 = cb2_010y * _193;
  float _243 = cb2_010z * _194;
  float _244 = _238 + _241;
  float _245 = _239 + _242;
  float _246 = _240 + _243;
  float _247 = _229 * _114;
  float _248 = _230 * _115;
  float _249 = _231 * _116;
  float _250 = cb2_009x * _202;
  float _251 = cb2_009y * _203;
  float _252 = cb2_009z * _204;
  float _253 = cb2_010x * _212;
  float _254 = cb2_010y * _213;
  float _255 = cb2_010z * _214;
  float4 _256 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _260 = _247 - _244;
  float _261 = _260 + _250;
  float _262 = _261 + _253;
  float _263 = _248 - _245;
  float _264 = _263 + _251;
  float _265 = _264 + _254;
  float _266 = _249 - _246;
  float _267 = _266 + _252;
  float _268 = _267 + _255;
  float _269 = _262 * _131;
  float _270 = _265 * _131;
  float _271 = _268 * _131;
  float _272 = _269 + _244;
  float _273 = _270 + _245;
  float _274 = _271 + _246;
  float _275 = dot(float3(_272, _273, _274), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _279 = t0[0].SExposureData_020;
  float _281 = t0[0].SExposureData_004;
  float _283 = cb2_018x * 0.5f;
  float _284 = _283 * cb2_018y;
  float _285 = _281.x - _284;
  float _286 = cb2_018y * cb2_018x;
  float _287 = 1.0f / _286;
  float _288 = _285 * _287;
  float _289 = _275 / _279.x;
  float _290 = _289 * 5464.01611328125f;
  float _291 = _290 + 9.99999993922529e-09f;
  float _292 = log2(_291);
  float _293 = _292 - _285;
  float _294 = _293 * _287;
  float _295 = saturate(_294);
  float2 _296 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _295), 0.0f);
  float _299 = max(_296.y, 1.0000000116860974e-07f);
  float _300 = _296.x / _299;
  float _301 = _300 + _288;
  float _302 = _301 / _287;
  float _303 = _302 - _281.x;
  float _304 = -0.0f - _303;
  float _306 = _304 - cb2_027x;
  float _307 = max(0.0f, _306);
  float _309 = cb2_026z * _307;
  float _310 = _303 - cb2_027x;
  float _311 = max(0.0f, _310);
  float _313 = cb2_026w * _311;
  bool _314 = (_303 < 0.0f);
  float _315 = select(_314, _309, _313);
  float _316 = exp2(_315);
  float _317 = _316 * _272;
  float _318 = _316 * _273;
  float _319 = _316 * _274;
  float _324 = cb2_024y * _256.x;
  float _325 = cb2_024z * _256.y;
  float _326 = cb2_024w * _256.z;
  float _327 = _324 + _317;
  float _328 = _325 + _318;
  float _329 = _326 + _319;
  float _334 = _327 * cb2_025x;
  float _335 = _328 * cb2_025y;
  float _336 = _329 * cb2_025z;
  float _337 = dot(float3(_334, _335, _336), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _338 = t0[0].SExposureData_012;
  float _340 = _337 * 5464.01611328125f;
  float _341 = _340 * _338.x;
  float _342 = _341 + 9.99999993922529e-09f;
  float _343 = log2(_342);
  float _344 = _343 + 16.929765701293945f;
  float _345 = _344 * 0.05734497308731079f;
  float _346 = saturate(_345);
  float _347 = _346 * _346;
  float _348 = _346 * 2.0f;
  float _349 = 3.0f - _348;
  float _350 = _347 * _349;
  float _351 = _335 * 0.8450999855995178f;
  float _352 = _336 * 0.14589999616146088f;
  float _353 = _351 + _352;
  float _354 = _353 * 2.4890189170837402f;
  float _355 = _353 * 0.3754962384700775f;
  float _356 = _353 * 2.811495304107666f;
  float _357 = _353 * 5.519708156585693f;
  float _358 = _337 - _354;
  float _359 = _350 * _358;
  float _360 = _359 + _354;
  float _361 = _350 * 0.5f;
  float _362 = _361 + 0.5f;
  float _363 = _362 * _358;
  float _364 = _363 + _354;
  float _365 = _334 - _355;
  float _366 = _335 - _356;
  float _367 = _336 - _357;
  float _368 = _362 * _365;
  float _369 = _362 * _366;
  float _370 = _362 * _367;
  float _371 = _368 + _355;
  float _372 = _369 + _356;
  float _373 = _370 + _357;
  float _374 = 1.0f / _364;
  float _375 = _360 * _374;
  float _376 = _375 * _371;
  float _377 = _375 * _372;
  float _378 = _375 * _373;
  float _382 = cb2_020x * TEXCOORD0_centroid.x;
  float _383 = cb2_020y * TEXCOORD0_centroid.y;
  float _386 = _382 + cb2_020z;
  float _387 = _383 + cb2_020w;
  float _390 = dot(float2(_386, _387), float2(_386, _387));
  float _391 = 1.0f - _390;
  float _392 = saturate(_391);
  float _393 = log2(_392);
  float _394 = _393 * cb2_021w;
  float _395 = exp2(_394);
  float _399 = _376 - cb2_021x;
  float _400 = _377 - cb2_021y;
  float _401 = _378 - cb2_021z;
  float _402 = _399 * _395;
  float _403 = _400 * _395;
  float _404 = _401 * _395;
  float _405 = _402 + cb2_021x;
  float _406 = _403 + cb2_021y;
  float _407 = _404 + cb2_021z;
  float _408 = t0[0].SExposureData_000;
  float _410 = max(_279.x, 0.0010000000474974513f);
  float _411 = 1.0f / _410;
  float _412 = _411 * _408.x;
  bool _415 = ((uint)(cb2_069y) == 0);
  float _421;
  float _422;
  float _423;
  float _477;
  float _478;
  float _479;
  float _570;
  float _571;
  float _572;
  float _617;
  float _618;
  float _619;
  float _620;
  float _669;
  float _670;
  float _671;
  float _672;
  float _697;
  float _698;
  float _699;
  float _800;
  float _801;
  float _802;
  float _827;
  float _839;
  float _867;
  float _879;
  float _891;
  float _892;
  float _893;
  float _920;
  float _921;
  float _922;
  if (!_415) {
    float _417 = _412 * _405;
    float _418 = _412 * _406;
    float _419 = _412 * _407;
    _421 = _417;
    _422 = _418;
    _423 = _419;
  } else {
    _421 = _405;
    _422 = _406;
    _423 = _407;
  }
  float _424 = _421 * 0.6130970120429993f;
  float _425 = mad(0.33952298760414124f, _422, _424);
  float _426 = mad(0.04737899824976921f, _423, _425);
  float _427 = _421 * 0.07019399851560593f;
  float _428 = mad(0.9163540005683899f, _422, _427);
  float _429 = mad(0.013451999984681606f, _423, _428);
  float _430 = _421 * 0.02061600051820278f;
  float _431 = mad(0.10956999659538269f, _422, _430);
  float _432 = mad(0.8698149919509888f, _423, _431);
  float _433 = log2(_426);
  float _434 = log2(_429);
  float _435 = log2(_432);
  float _436 = _433 * 0.04211956635117531f;
  float _437 = _434 * 0.04211956635117531f;
  float _438 = _435 * 0.04211956635117531f;
  float _439 = _436 + 0.6252607107162476f;
  float _440 = _437 + 0.6252607107162476f;
  float _441 = _438 + 0.6252607107162476f;
  float4 _442 = t6.SampleLevel(s2_space2, float3(_439, _440, _441), 0.0f);
  bool _448 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_448 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _452 = cb2_017x * _442.x;
    float _453 = cb2_017x * _442.y;
    float _454 = cb2_017x * _442.z;
    float _456 = _452 + cb2_017y;
    float _457 = _453 + cb2_017y;
    float _458 = _454 + cb2_017y;
    float _459 = exp2(_456);
    float _460 = exp2(_457);
    float _461 = exp2(_458);
    float _462 = _459 + 1.0f;
    float _463 = _460 + 1.0f;
    float _464 = _461 + 1.0f;
    float _465 = 1.0f / _462;
    float _466 = 1.0f / _463;
    float _467 = 1.0f / _464;
    float _469 = cb2_017z * _465;
    float _470 = cb2_017z * _466;
    float _471 = cb2_017z * _467;
    float _473 = _469 + cb2_017w;
    float _474 = _470 + cb2_017w;
    float _475 = _471 + cb2_017w;
    _477 = _473;
    _478 = _474;
    _479 = _475;
  } else {
    _477 = _442.x;
    _478 = _442.y;
    _479 = _442.z;
  }
  float _480 = _477 * 23.0f;
  float _481 = _480 + -14.473931312561035f;
  float _482 = exp2(_481);
  float _483 = _478 * 23.0f;
  float _484 = _483 + -14.473931312561035f;
  float _485 = exp2(_484);
  float _486 = _479 * 23.0f;
  float _487 = _486 + -14.473931312561035f;
  float _488 = exp2(_487);
  float _489 = dot(float3(_482, _485, _488), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _494 = dot(float3(_482, _485, _488), float3(_482, _485, _488));
  float _495 = rsqrt(_494);
  float _496 = _495 * _482;
  float _497 = _495 * _485;
  float _498 = _495 * _488;
  float _499 = cb2_001x - _496;
  float _500 = cb2_001y - _497;
  float _501 = cb2_001z - _498;
  float _502 = dot(float3(_499, _500, _501), float3(_499, _500, _501));
  float _505 = cb2_002z * _502;
  float _507 = _505 + cb2_002w;
  float _508 = saturate(_507);
  float _510 = cb2_002x * _508;
  float _511 = _489 - _482;
  float _512 = _489 - _485;
  float _513 = _489 - _488;
  float _514 = _510 * _511;
  float _515 = _510 * _512;
  float _516 = _510 * _513;
  float _517 = _514 + _482;
  float _518 = _515 + _485;
  float _519 = _516 + _488;
  float _521 = cb2_002y * _508;
  float _522 = 0.10000000149011612f - _517;
  float _523 = 0.10000000149011612f - _518;
  float _524 = 0.10000000149011612f - _519;
  float _525 = _522 * _521;
  float _526 = _523 * _521;
  float _527 = _524 * _521;
  float _528 = _525 + _517;
  float _529 = _526 + _518;
  float _530 = _527 + _519;
  float _531 = saturate(_528);
  float _532 = saturate(_529);
  float _533 = saturate(_530);
  float _538 = cb2_004x * TEXCOORD0_centroid.x;
  float _539 = cb2_004y * TEXCOORD0_centroid.y;
  float _542 = _538 + cb2_004z;
  float _543 = _539 + cb2_004w;
  float4 _549 = t7.Sample(s2_space2, float2(_542, _543));
  float _554 = _549.x * cb2_003x;
  float _555 = _549.y * cb2_003y;
  float _556 = _549.z * cb2_003z;
  float _557 = _549.w * cb2_003w;
  float _560 = _557 + cb2_026y;
  float _561 = saturate(_560);
  bool _564 = ((uint)(cb2_069y) == 0);
  if (!_564) {
    float _566 = _554 * _412;
    float _567 = _555 * _412;
    float _568 = _556 * _412;
    _570 = _566;
    _571 = _567;
    _572 = _568;
  } else {
    _570 = _554;
    _571 = _555;
    _572 = _556;
  }
  bool _575 = ((uint)(cb2_028x) == 2);
  bool _576 = ((uint)(cb2_028x) == 3);
  int _577 = (uint)(cb2_028x) & -2;
  bool _578 = (_577 == 2);
  bool _579 = ((uint)(cb2_028x) == 6);
  bool _580 = _578 || _579;
  if (_580) {
    float _582 = _570 * _561;
    float _583 = _571 * _561;
    float _584 = _572 * _561;
    float _585 = _561 * _561;
    _617 = _582;
    _618 = _583;
    _619 = _584;
    _620 = _585;
  } else {
    bool _587 = ((uint)(cb2_028x) == 4);
    if (_587) {
      float _589 = _570 + -1.0f;
      float _590 = _571 + -1.0f;
      float _591 = _572 + -1.0f;
      float _592 = _561 + -1.0f;
      float _593 = _589 * _561;
      float _594 = _590 * _561;
      float _595 = _591 * _561;
      float _596 = _592 * _561;
      float _597 = _593 + 1.0f;
      float _598 = _594 + 1.0f;
      float _599 = _595 + 1.0f;
      float _600 = _596 + 1.0f;
      _617 = _597;
      _618 = _598;
      _619 = _599;
      _620 = _600;
    } else {
      bool _602 = ((uint)(cb2_028x) == 5);
      if (_602) {
        float _604 = _570 + -0.5f;
        float _605 = _571 + -0.5f;
        float _606 = _572 + -0.5f;
        float _607 = _561 + -0.5f;
        float _608 = _604 * _561;
        float _609 = _605 * _561;
        float _610 = _606 * _561;
        float _611 = _607 * _561;
        float _612 = _608 + 0.5f;
        float _613 = _609 + 0.5f;
        float _614 = _610 + 0.5f;
        float _615 = _611 + 0.5f;
        _617 = _612;
        _618 = _613;
        _619 = _614;
        _620 = _615;
      } else {
        _617 = _570;
        _618 = _571;
        _619 = _572;
        _620 = _561;
      }
    }
  }
  if (_575) {
    float _622 = _617 + _531;
    float _623 = _618 + _532;
    float _624 = _619 + _533;
    _669 = _622;
    _670 = _623;
    _671 = _624;
    _672 = cb2_025w;
  } else {
    if (_576) {
      float _627 = 1.0f - _617;
      float _628 = 1.0f - _618;
      float _629 = 1.0f - _619;
      float _630 = _627 * _531;
      float _631 = _628 * _532;
      float _632 = _629 * _533;
      float _633 = _630 + _617;
      float _634 = _631 + _618;
      float _635 = _632 + _619;
      _669 = _633;
      _670 = _634;
      _671 = _635;
      _672 = cb2_025w;
    } else {
      bool _637 = ((uint)(cb2_028x) == 4);
      if (_637) {
        float _639 = _617 * _531;
        float _640 = _618 * _532;
        float _641 = _619 * _533;
        _669 = _639;
        _670 = _640;
        _671 = _641;
        _672 = cb2_025w;
      } else {
        bool _643 = ((uint)(cb2_028x) == 5);
        if (_643) {
          float _645 = _531 * 2.0f;
          float _646 = _645 * _617;
          float _647 = _532 * 2.0f;
          float _648 = _647 * _618;
          float _649 = _533 * 2.0f;
          float _650 = _649 * _619;
          _669 = _646;
          _670 = _648;
          _671 = _650;
          _672 = cb2_025w;
        } else {
          if (_579) {
            float _653 = _531 - _617;
            float _654 = _532 - _618;
            float _655 = _533 - _619;
            _669 = _653;
            _670 = _654;
            _671 = _655;
            _672 = cb2_025w;
          } else {
            float _657 = _617 - _531;
            float _658 = _618 - _532;
            float _659 = _619 - _533;
            float _660 = _620 * _657;
            float _661 = _620 * _658;
            float _662 = _620 * _659;
            float _663 = _660 + _531;
            float _664 = _661 + _532;
            float _665 = _662 + _533;
            float _666 = 1.0f - _620;
            float _667 = _666 * cb2_025w;
            _669 = _663;
            _670 = _664;
            _671 = _665;
            _672 = _667;
          }
        }
      }
    }
  }
  float _678 = cb2_016x - _669;
  float _679 = cb2_016y - _670;
  float _680 = cb2_016z - _671;
  float _681 = _678 * cb2_016w;
  float _682 = _679 * cb2_016w;
  float _683 = _680 * cb2_016w;
  float _684 = _681 + _669;
  float _685 = _682 + _670;
  float _686 = _683 + _671;
  bool _689 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_689 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _693 = cb2_024x * _684;
    float _694 = cb2_024x * _685;
    float _695 = cb2_024x * _686;
    _697 = _693;
    _698 = _694;
    _699 = _695;
  } else {
    _697 = _684;
    _698 = _685;
    _699 = _686;
  }
  float _700 = _697 * 0.9708889722824097f;
  float _701 = mad(0.026962999254465103f, _698, _700);
  float _702 = mad(0.002148000057786703f, _699, _701);
  float _703 = _697 * 0.01088900025933981f;
  float _704 = mad(0.9869629740715027f, _698, _703);
  float _705 = mad(0.002148000057786703f, _699, _704);
  float _706 = mad(0.026962999254465103f, _698, _703);
  float _707 = mad(0.9621480107307434f, _699, _706);
  if (_689) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _712 = cb1_018y * 0.10000000149011612f;
        float _713 = log2(cb1_018z);
        float _714 = _713 + -13.287712097167969f;
        float _715 = _714 * 1.4929734468460083f;
        float _716 = _715 + 18.0f;
        float _717 = exp2(_716);
        float _718 = _717 * 0.18000000715255737f;
        float _719 = abs(_718);
        float _720 = log2(_719);
        float _721 = _720 * 1.5f;
        float _722 = exp2(_721);
        float _723 = _722 * _712;
        float _724 = _723 / cb1_018z;
        float _725 = _724 + -0.07636754959821701f;
        float _726 = _720 * 1.2750000953674316f;
        float _727 = exp2(_726);
        float _728 = _727 * 0.07636754959821701f;
        float _729 = cb1_018y * 0.011232397519052029f;
        float _730 = _729 * _722;
        float _731 = _730 / cb1_018z;
        float _732 = _728 - _731;
        float _733 = _727 + -0.11232396960258484f;
        float _734 = _733 * _712;
        float _735 = _734 / cb1_018z;
        float _736 = _735 * cb1_018z;
        float _737 = abs(_702);
        float _738 = abs(_705);
        float _739 = abs(_707);
        float _740 = log2(_737);
        float _741 = log2(_738);
        float _742 = log2(_739);
        float _743 = _740 * 1.5f;
        float _744 = _741 * 1.5f;
        float _745 = _742 * 1.5f;
        float _746 = exp2(_743);
        float _747 = exp2(_744);
        float _748 = exp2(_745);
        float _749 = _746 * _736;
        float _750 = _747 * _736;
        float _751 = _748 * _736;
        float _752 = _740 * 1.2750000953674316f;
        float _753 = _741 * 1.2750000953674316f;
        float _754 = _742 * 1.2750000953674316f;
        float _755 = exp2(_752);
        float _756 = exp2(_753);
        float _757 = exp2(_754);
        float _758 = _755 * _725;
        float _759 = _756 * _725;
        float _760 = _757 * _725;
        float _761 = _758 + _732;
        float _762 = _759 + _732;
        float _763 = _760 + _732;
        float _764 = _749 / _761;
        float _765 = _750 / _762;
        float _766 = _751 / _763;
        float _767 = _764 * 9.999999747378752e-05f;
        float _768 = _765 * 9.999999747378752e-05f;
        float _769 = _766 * 9.999999747378752e-05f;
        float _770 = 5000.0f / cb1_018y;
        float _771 = _767 * _770;
        float _772 = _768 * _770;
        float _773 = _769 * _770;
        _800 = _771;
        _801 = _772;
        _802 = _773;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_702, _705, _707));
      _800 = tonemapped.x, _801 = tonemapped.y, _802 = tonemapped.z;
    }
      } else {
        float _775 = _702 + 0.020616600289940834f;
        float _776 = _705 + 0.020616600289940834f;
        float _777 = _707 + 0.020616600289940834f;
        float _778 = _775 * _702;
        float _779 = _776 * _705;
        float _780 = _777 * _707;
        float _781 = _778 + -7.456949970219284e-05f;
        float _782 = _779 + -7.456949970219284e-05f;
        float _783 = _780 + -7.456949970219284e-05f;
        float _784 = _702 * 0.9837960004806519f;
        float _785 = _705 * 0.9837960004806519f;
        float _786 = _707 * 0.9837960004806519f;
        float _787 = _784 + 0.4336790144443512f;
        float _788 = _785 + 0.4336790144443512f;
        float _789 = _786 + 0.4336790144443512f;
        float _790 = _787 * _702;
        float _791 = _788 * _705;
        float _792 = _789 * _707;
        float _793 = _790 + 0.24617899954319f;
        float _794 = _791 + 0.24617899954319f;
        float _795 = _792 + 0.24617899954319f;
        float _796 = _781 / _793;
        float _797 = _782 / _794;
        float _798 = _783 / _795;
        _800 = _796;
        _801 = _797;
        _802 = _798;
      }
      float _803 = _800 * 1.6047500371932983f;
      float _804 = mad(-0.5310800075531006f, _801, _803);
      float _805 = mad(-0.07366999983787537f, _802, _804);
      float _806 = _800 * -0.10208000242710114f;
      float _807 = mad(1.1081299781799316f, _801, _806);
      float _808 = mad(-0.006049999967217445f, _802, _807);
      float _809 = _800 * -0.0032599999103695154f;
      float _810 = mad(-0.07275000214576721f, _801, _809);
      float _811 = mad(1.0760200023651123f, _802, _810);
      if (_689) {
        // float _813 = max(_805, 0.0f);
        // float _814 = max(_808, 0.0f);
        // float _815 = max(_811, 0.0f);
        // bool _816 = !(_813 >= 0.0030399328097701073f);
        // if (!_816) {
        //   float _818 = abs(_813);
        //   float _819 = log2(_818);
        //   float _820 = _819 * 0.4166666567325592f;
        //   float _821 = exp2(_820);
        //   float _822 = _821 * 1.0549999475479126f;
        //   float _823 = _822 + -0.054999999701976776f;
        //   _827 = _823;
        // } else {
        //   float _825 = _813 * 12.923210144042969f;
        //   _827 = _825;
        // }
        // bool _828 = !(_814 >= 0.0030399328097701073f);
        // if (!_828) {
        //   float _830 = abs(_814);
        //   float _831 = log2(_830);
        //   float _832 = _831 * 0.4166666567325592f;
        //   float _833 = exp2(_832);
        //   float _834 = _833 * 1.0549999475479126f;
        //   float _835 = _834 + -0.054999999701976776f;
        //   _839 = _835;
        // } else {
        //   float _837 = _814 * 12.923210144042969f;
        //   _839 = _837;
        // }
        // bool _840 = !(_815 >= 0.0030399328097701073f);
        // if (!_840) {
        //   float _842 = abs(_815);
        //   float _843 = log2(_842);
        //   float _844 = _843 * 0.4166666567325592f;
        //   float _845 = exp2(_844);
        //   float _846 = _845 * 1.0549999475479126f;
        //   float _847 = _846 + -0.054999999701976776f;
        //   _920 = _827;
        //   _921 = _839;
        //   _922 = _847;
        // } else {
        //   float _849 = _815 * 12.923210144042969f;
        //   _920 = _827;
        //   _921 = _839;
        //   _922 = _849;
        // }
        _920 = renodx::color::srgb::EncodeSafe(_805);
        _921 = renodx::color::srgb::EncodeSafe(_808);
        _922 = renodx::color::srgb::EncodeSafe(_811);

      } else {
        float _851 = saturate(_805);
        float _852 = saturate(_808);
        float _853 = saturate(_811);
        bool _854 = ((uint)(cb1_018w) == -2);
        if (!_854) {
          bool _856 = !(_851 >= 0.0030399328097701073f);
          if (!_856) {
            float _858 = abs(_851);
            float _859 = log2(_858);
            float _860 = _859 * 0.4166666567325592f;
            float _861 = exp2(_860);
            float _862 = _861 * 1.0549999475479126f;
            float _863 = _862 + -0.054999999701976776f;
            _867 = _863;
          } else {
            float _865 = _851 * 12.923210144042969f;
            _867 = _865;
          }
          bool _868 = !(_852 >= 0.0030399328097701073f);
          if (!_868) {
            float _870 = abs(_852);
            float _871 = log2(_870);
            float _872 = _871 * 0.4166666567325592f;
            float _873 = exp2(_872);
            float _874 = _873 * 1.0549999475479126f;
            float _875 = _874 + -0.054999999701976776f;
            _879 = _875;
          } else {
            float _877 = _852 * 12.923210144042969f;
            _879 = _877;
          }
          bool _880 = !(_853 >= 0.0030399328097701073f);
          if (!_880) {
            float _882 = abs(_853);
            float _883 = log2(_882);
            float _884 = _883 * 0.4166666567325592f;
            float _885 = exp2(_884);
            float _886 = _885 * 1.0549999475479126f;
            float _887 = _886 + -0.054999999701976776f;
            _891 = _867;
            _892 = _879;
            _893 = _887;
          } else {
            float _889 = _853 * 12.923210144042969f;
            _891 = _867;
            _892 = _879;
            _893 = _889;
          }
        } else {
          _891 = _851;
          _892 = _852;
          _893 = _853;
        }
        float _898 = abs(_891);
        float _899 = abs(_892);
        float _900 = abs(_893);
        float _901 = log2(_898);
        float _902 = log2(_899);
        float _903 = log2(_900);
        float _904 = _901 * cb2_000z;
        float _905 = _902 * cb2_000z;
        float _906 = _903 * cb2_000z;
        float _907 = exp2(_904);
        float _908 = exp2(_905);
        float _909 = exp2(_906);
        float _910 = _907 * cb2_000y;
        float _911 = _908 * cb2_000y;
        float _912 = _909 * cb2_000y;
        float _913 = _910 + cb2_000x;
        float _914 = _911 + cb2_000x;
        float _915 = _912 + cb2_000x;
        float _916 = saturate(_913);
        float _917 = saturate(_914);
        float _918 = saturate(_915);
        _920 = _916;
        _921 = _917;
        _922 = _918;
      }
      float _926 = cb2_023x * TEXCOORD0_centroid.x;
      float _927 = cb2_023y * TEXCOORD0_centroid.y;
      float _930 = _926 + cb2_023z;
      float _931 = _927 + cb2_023w;
      float4 _934 = t11.SampleLevel(s0_space2, float2(_930, _931), 0.0f);
      float _936 = _934.x + -0.5f;
      float _937 = _936 * cb2_022x;
      float _938 = _937 + 0.5f;
      float _939 = _938 * 2.0f;
      float _940 = _939 * _920;
      float _941 = _939 * _921;
      float _942 = _939 * _922;
      float _946 = float((uint)(cb2_019z));
      float _947 = float((uint)(cb2_019w));
      float _948 = _946 + SV_Position.x;
      float _949 = _947 + SV_Position.y;
      uint _950 = uint(_948);
      uint _951 = uint(_949);
      uint _954 = cb2_019x + -1u;
      uint _955 = cb2_019y + -1u;
      int _956 = _950 & _954;
      int _957 = _951 & _955;
      float4 _958 = t3.Load(int3(_956, _957, 0));
      float _962 = _958.x * 2.0f;
      float _963 = _958.y * 2.0f;
      float _964 = _958.z * 2.0f;
      float _965 = _962 + -1.0f;
      float _966 = _963 + -1.0f;
      float _967 = _964 + -1.0f;
      float _968 = _965 * _672;
      float _969 = _966 * _672;
      float _970 = _967 * _672;
      float _971 = _968 + _940;
      float _972 = _969 + _941;
      float _973 = _970 + _942;
      float _974 = dot(float3(_971, _972, _973), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _971;
      SV_Target.y = _972;
      SV_Target.z = _973;
      SV_Target.w = _974;
      SV_Target_1.x = _974;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
