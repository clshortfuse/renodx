#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t7.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _61 = cb2_015x * TEXCOORD0_centroid.x;
  float _62 = cb2_015y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_015z;
  float _66 = _62 + cb2_015w;
  float4 _67 = t8.SampleLevel(s0_space2, float2(_65, _66), 0.0f);
  float _71 = saturate(_67.x);
  float _72 = saturate(_67.z);
  float _75 = cb2_026x * _72;
  float _76 = _71 * 6.283199787139893f;
  float _77 = cos(_76);
  float _78 = sin(_76);
  float _79 = _75 * _77;
  float _80 = _78 * _75;
  float _81 = 1.0f - _67.y;
  float _82 = saturate(_81);
  float _83 = _79 * _82;
  float _84 = _80 * _82;
  float _85 = _56 + TEXCOORD0_centroid.x;
  float _86 = _85 + _83;
  float _87 = _57 + TEXCOORD0_centroid.y;
  float _88 = _87 + _84;
  float4 _89 = t7.SampleLevel(s2_space2, float2(_86, _88), 0.0f);
  bool _91 = (_89.y > 0.0f);
  float _92 = select(_91, TEXCOORD0_centroid.x, _86);
  float _93 = select(_91, TEXCOORD0_centroid.y, _88);
  float4 _94 = t1.SampleLevel(s4_space2, float2(_92, _93), 0.0f);
  float _98 = max(_94.x, 0.0f);
  float _99 = max(_94.y, 0.0f);
  float _100 = max(_94.z, 0.0f);
  float _101 = min(_98, 65000.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float4 _104 = t4.SampleLevel(s2_space2, float2(_92, _93), 0.0f);
  float _109 = max(_104.x, 0.0f);
  float _110 = max(_104.y, 0.0f);
  float _111 = max(_104.z, 0.0f);
  float _112 = max(_104.w, 0.0f);
  float _113 = min(_109, 5000.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _119 = _25.x * cb0_028z;
  float _120 = _119 + cb0_028x;
  float _121 = cb2_027w / _120;
  float _122 = 1.0f - _121;
  float _123 = abs(_122);
  float _125 = cb2_027y * _123;
  float _127 = _125 - cb2_027z;
  float _128 = saturate(_127);
  float _129 = max(_128, _116);
  float _130 = saturate(_129);
  float4 _131 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _135 = _113 - _101;
  float _136 = _114 - _102;
  float _137 = _115 - _103;
  float _138 = _130 * _135;
  float _139 = _130 * _136;
  float _140 = _130 * _137;
  float _141 = _138 + _101;
  float _142 = _139 + _102;
  float _143 = _140 + _103;
  float _144 = dot(float3(_141, _142, _143), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _148 = t0[0].SExposureData_020;
  float _150 = t0[0].SExposureData_004;
  float _152 = cb2_018x * 0.5f;
  float _153 = _152 * cb2_018y;
  float _154 = _150.x - _153;
  float _155 = cb2_018y * cb2_018x;
  float _156 = 1.0f / _155;
  float _157 = _154 * _156;
  float _158 = _144 / _148.x;
  float _159 = _158 * 5464.01611328125f;
  float _160 = _159 + 9.99999993922529e-09f;
  float _161 = log2(_160);
  float _162 = _161 - _154;
  float _163 = _162 * _156;
  float _164 = saturate(_163);
  float2 _165 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _164), 0.0f);
  float _168 = max(_165.y, 1.0000000116860974e-07f);
  float _169 = _165.x / _168;
  float _170 = _169 + _157;
  float _171 = _170 / _156;
  float _172 = _171 - _150.x;
  float _173 = -0.0f - _172;
  float _175 = _173 - cb2_027x;
  float _176 = max(0.0f, _175);
  float _178 = cb2_026z * _176;
  float _179 = _172 - cb2_027x;
  float _180 = max(0.0f, _179);
  float _182 = cb2_026w * _180;
  bool _183 = (_172 < 0.0f);
  float _184 = select(_183, _178, _182);
  float _185 = exp2(_184);
  float _186 = _185 * _141;
  float _187 = _185 * _142;
  float _188 = _185 * _143;
  float _193 = cb2_024y * _131.x;
  float _194 = cb2_024z * _131.y;
  float _195 = cb2_024w * _131.z;
  float _196 = _193 + _186;
  float _197 = _194 + _187;
  float _198 = _195 + _188;
  float _203 = _196 * cb2_025x;
  float _204 = _197 * cb2_025y;
  float _205 = _198 * cb2_025z;
  float _206 = dot(float3(_203, _204, _205), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _207 = t0[0].SExposureData_012;
  float _209 = _206 * 5464.01611328125f;
  float _210 = _209 * _207.x;
  float _211 = _210 + 9.99999993922529e-09f;
  float _212 = log2(_211);
  float _213 = _212 + 16.929765701293945f;
  float _214 = _213 * 0.05734497308731079f;
  float _215 = saturate(_214);
  float _216 = _215 * _215;
  float _217 = _215 * 2.0f;
  float _218 = 3.0f - _217;
  float _219 = _216 * _218;
  float _220 = _204 * 0.8450999855995178f;
  float _221 = _205 * 0.14589999616146088f;
  float _222 = _220 + _221;
  float _223 = _222 * 2.4890189170837402f;
  float _224 = _222 * 0.3754962384700775f;
  float _225 = _222 * 2.811495304107666f;
  float _226 = _222 * 5.519708156585693f;
  float _227 = _206 - _223;
  float _228 = _219 * _227;
  float _229 = _228 + _223;
  float _230 = _219 * 0.5f;
  float _231 = _230 + 0.5f;
  float _232 = _231 * _227;
  float _233 = _232 + _223;
  float _234 = _203 - _224;
  float _235 = _204 - _225;
  float _236 = _205 - _226;
  float _237 = _231 * _234;
  float _238 = _231 * _235;
  float _239 = _231 * _236;
  float _240 = _237 + _224;
  float _241 = _238 + _225;
  float _242 = _239 + _226;
  float _243 = 1.0f / _233;
  float _244 = _229 * _243;
  float _245 = _244 * _240;
  float _246 = _244 * _241;
  float _247 = _244 * _242;
  float _251 = cb2_020x * TEXCOORD0_centroid.x;
  float _252 = cb2_020y * TEXCOORD0_centroid.y;
  float _255 = _251 + cb2_020z;
  float _256 = _252 + cb2_020w;
  float _259 = dot(float2(_255, _256), float2(_255, _256));
  float _260 = 1.0f - _259;
  float _261 = saturate(_260);
  float _262 = log2(_261);
  float _263 = _262 * cb2_021w;
  float _264 = exp2(_263);
  float _268 = _245 - cb2_021x;
  float _269 = _246 - cb2_021y;
  float _270 = _247 - cb2_021z;
  float _271 = _268 * _264;
  float _272 = _269 * _264;
  float _273 = _270 * _264;
  float _274 = _271 + cb2_021x;
  float _275 = _272 + cb2_021y;
  float _276 = _273 + cb2_021z;
  float _277 = t0[0].SExposureData_000;
  float _279 = max(_148.x, 0.0010000000474974513f);
  float _280 = 1.0f / _279;
  float _281 = _280 * _277.x;
  bool _284 = ((uint)(cb2_069y) == 0);
  float _290;
  float _291;
  float _292;
  float _346;
  float _347;
  float _348;
  float _424;
  float _425;
  float _426;
  float _527;
  float _528;
  float _529;
  float _554;
  float _566;
  float _594;
  float _606;
  float _618;
  float _619;
  float _620;
  float _647;
  float _648;
  float _649;
  if (!_284) {
    float _286 = _281 * _274;
    float _287 = _281 * _275;
    float _288 = _281 * _276;
    _290 = _286;
    _291 = _287;
    _292 = _288;
  } else {
    _290 = _274;
    _291 = _275;
    _292 = _276;
  }
  float _293 = _290 * 0.6130970120429993f;
  float _294 = mad(0.33952298760414124f, _291, _293);
  float _295 = mad(0.04737899824976921f, _292, _294);
  float _296 = _290 * 0.07019399851560593f;
  float _297 = mad(0.9163540005683899f, _291, _296);
  float _298 = mad(0.013451999984681606f, _292, _297);
  float _299 = _290 * 0.02061600051820278f;
  float _300 = mad(0.10956999659538269f, _291, _299);
  float _301 = mad(0.8698149919509888f, _292, _300);
  float _302 = log2(_295);
  float _303 = log2(_298);
  float _304 = log2(_301);
  float _305 = _302 * 0.04211956635117531f;
  float _306 = _303 * 0.04211956635117531f;
  float _307 = _304 * 0.04211956635117531f;
  float _308 = _305 + 0.6252607107162476f;
  float _309 = _306 + 0.6252607107162476f;
  float _310 = _307 + 0.6252607107162476f;
  float4 _311 = t6.SampleLevel(s2_space2, float3(_308, _309, _310), 0.0f);
  bool _317 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_317 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _321 = cb2_017x * _311.x;
    float _322 = cb2_017x * _311.y;
    float _323 = cb2_017x * _311.z;
    float _325 = _321 + cb2_017y;
    float _326 = _322 + cb2_017y;
    float _327 = _323 + cb2_017y;
    float _328 = exp2(_325);
    float _329 = exp2(_326);
    float _330 = exp2(_327);
    float _331 = _328 + 1.0f;
    float _332 = _329 + 1.0f;
    float _333 = _330 + 1.0f;
    float _334 = 1.0f / _331;
    float _335 = 1.0f / _332;
    float _336 = 1.0f / _333;
    float _338 = cb2_017z * _334;
    float _339 = cb2_017z * _335;
    float _340 = cb2_017z * _336;
    float _342 = _338 + cb2_017w;
    float _343 = _339 + cb2_017w;
    float _344 = _340 + cb2_017w;
    _346 = _342;
    _347 = _343;
    _348 = _344;
  } else {
    _346 = _311.x;
    _347 = _311.y;
    _348 = _311.z;
  }
  float _349 = _346 * 23.0f;
  float _350 = _349 + -14.473931312561035f;
  float _351 = exp2(_350);
  float _352 = _347 * 23.0f;
  float _353 = _352 + -14.473931312561035f;
  float _354 = exp2(_353);
  float _355 = _348 * 23.0f;
  float _356 = _355 + -14.473931312561035f;
  float _357 = exp2(_356);
  float _358 = dot(float3(_351, _354, _357), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _363 = dot(float3(_351, _354, _357), float3(_351, _354, _357));
  float _364 = rsqrt(_363);
  float _365 = _364 * _351;
  float _366 = _364 * _354;
  float _367 = _364 * _357;
  float _368 = cb2_001x - _365;
  float _369 = cb2_001y - _366;
  float _370 = cb2_001z - _367;
  float _371 = dot(float3(_368, _369, _370), float3(_368, _369, _370));
  float _374 = cb2_002z * _371;
  float _376 = _374 + cb2_002w;
  float _377 = saturate(_376);
  float _379 = cb2_002x * _377;
  float _380 = _358 - _351;
  float _381 = _358 - _354;
  float _382 = _358 - _357;
  float _383 = _379 * _380;
  float _384 = _379 * _381;
  float _385 = _379 * _382;
  float _386 = _383 + _351;
  float _387 = _384 + _354;
  float _388 = _385 + _357;
  float _390 = cb2_002y * _377;
  float _391 = 0.10000000149011612f - _386;
  float _392 = 0.10000000149011612f - _387;
  float _393 = 0.10000000149011612f - _388;
  float _394 = _391 * _390;
  float _395 = _392 * _390;
  float _396 = _393 * _390;
  float _397 = _394 + _386;
  float _398 = _395 + _387;
  float _399 = _396 + _388;
  float _400 = saturate(_397);
  float _401 = saturate(_398);
  float _402 = saturate(_399);
  float _409 = cb2_016x - _400;
  float _410 = cb2_016y - _401;
  float _411 = cb2_016z - _402;
  float _412 = _409 * cb2_016w;
  float _413 = _410 * cb2_016w;
  float _414 = _411 * cb2_016w;
  float _415 = _412 + _400;
  float _416 = _413 + _401;
  float _417 = _414 + _402;
  if (_317 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _420 = cb2_024x * _415;
    float _421 = cb2_024x * _416;
    float _422 = cb2_024x * _417;
    _424 = _420;
    _425 = _421;
    _426 = _422;
  } else {
    _424 = _415;
    _425 = _416;
    _426 = _417;
  }
  float _427 = _424 * 0.9708889722824097f;
  float _428 = mad(0.026962999254465103f, _425, _427);
  float _429 = mad(0.002148000057786703f, _426, _428);
  float _430 = _424 * 0.01088900025933981f;
  float _431 = mad(0.9869629740715027f, _425, _430);
  float _432 = mad(0.002148000057786703f, _426, _431);
  float _433 = mad(0.026962999254465103f, _425, _430);
  float _434 = mad(0.9621480107307434f, _426, _433);
  if (_317) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _439 = cb1_018y * 0.10000000149011612f;
        float _440 = log2(cb1_018z);
        float _441 = _440 + -13.287712097167969f;
        float _442 = _441 * 1.4929734468460083f;
        float _443 = _442 + 18.0f;
        float _444 = exp2(_443);
        float _445 = _444 * 0.18000000715255737f;
        float _446 = abs(_445);
        float _447 = log2(_446);
        float _448 = _447 * 1.5f;
        float _449 = exp2(_448);
        float _450 = _449 * _439;
        float _451 = _450 / cb1_018z;
        float _452 = _451 + -0.07636754959821701f;
        float _453 = _447 * 1.2750000953674316f;
        float _454 = exp2(_453);
        float _455 = _454 * 0.07636754959821701f;
        float _456 = cb1_018y * 0.011232397519052029f;
        float _457 = _456 * _449;
        float _458 = _457 / cb1_018z;
        float _459 = _455 - _458;
        float _460 = _454 + -0.11232396960258484f;
        float _461 = _460 * _439;
        float _462 = _461 / cb1_018z;
        float _463 = _462 * cb1_018z;
        float _464 = abs(_429);
        float _465 = abs(_432);
        float _466 = abs(_434);
        float _467 = log2(_464);
        float _468 = log2(_465);
        float _469 = log2(_466);
        float _470 = _467 * 1.5f;
        float _471 = _468 * 1.5f;
        float _472 = _469 * 1.5f;
        float _473 = exp2(_470);
        float _474 = exp2(_471);
        float _475 = exp2(_472);
        float _476 = _473 * _463;
        float _477 = _474 * _463;
        float _478 = _475 * _463;
        float _479 = _467 * 1.2750000953674316f;
        float _480 = _468 * 1.2750000953674316f;
        float _481 = _469 * 1.2750000953674316f;
        float _482 = exp2(_479);
        float _483 = exp2(_480);
        float _484 = exp2(_481);
        float _485 = _482 * _452;
        float _486 = _483 * _452;
        float _487 = _484 * _452;
        float _488 = _485 + _459;
        float _489 = _486 + _459;
        float _490 = _487 + _459;
        float _491 = _476 / _488;
        float _492 = _477 / _489;
        float _493 = _478 / _490;
        float _494 = _491 * 9.999999747378752e-05f;
        float _495 = _492 * 9.999999747378752e-05f;
        float _496 = _493 * 9.999999747378752e-05f;
        float _497 = 5000.0f / cb1_018y;
        float _498 = _494 * _497;
        float _499 = _495 * _497;
        float _500 = _496 * _497;
        _527 = _498;
        _528 = _499;
        _529 = _500;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_429, _432, _434));
      _527 = tonemapped.x, _528 = tonemapped.y, _529 = tonemapped.z;
    }
      } else {
        float _502 = _429 + 0.020616600289940834f;
        float _503 = _432 + 0.020616600289940834f;
        float _504 = _434 + 0.020616600289940834f;
        float _505 = _502 * _429;
        float _506 = _503 * _432;
        float _507 = _504 * _434;
        float _508 = _505 + -7.456949970219284e-05f;
        float _509 = _506 + -7.456949970219284e-05f;
        float _510 = _507 + -7.456949970219284e-05f;
        float _511 = _429 * 0.9837960004806519f;
        float _512 = _432 * 0.9837960004806519f;
        float _513 = _434 * 0.9837960004806519f;
        float _514 = _511 + 0.4336790144443512f;
        float _515 = _512 + 0.4336790144443512f;
        float _516 = _513 + 0.4336790144443512f;
        float _517 = _514 * _429;
        float _518 = _515 * _432;
        float _519 = _516 * _434;
        float _520 = _517 + 0.24617899954319f;
        float _521 = _518 + 0.24617899954319f;
        float _522 = _519 + 0.24617899954319f;
        float _523 = _508 / _520;
        float _524 = _509 / _521;
        float _525 = _510 / _522;
        _527 = _523;
        _528 = _524;
        _529 = _525;
      }
      float _530 = _527 * 1.6047500371932983f;
      float _531 = mad(-0.5310800075531006f, _528, _530);
      float _532 = mad(-0.07366999983787537f, _529, _531);
      float _533 = _527 * -0.10208000242710114f;
      float _534 = mad(1.1081299781799316f, _528, _533);
      float _535 = mad(-0.006049999967217445f, _529, _534);
      float _536 = _527 * -0.0032599999103695154f;
      float _537 = mad(-0.07275000214576721f, _528, _536);
      float _538 = mad(1.0760200023651123f, _529, _537);
      if (_317) {
        // float _540 = max(_532, 0.0f);
        // float _541 = max(_535, 0.0f);
        // float _542 = max(_538, 0.0f);
        // bool _543 = !(_540 >= 0.0030399328097701073f);
        // if (!_543) {
        //   float _545 = abs(_540);
        //   float _546 = log2(_545);
        //   float _547 = _546 * 0.4166666567325592f;
        //   float _548 = exp2(_547);
        //   float _549 = _548 * 1.0549999475479126f;
        //   float _550 = _549 + -0.054999999701976776f;
        //   _554 = _550;
        // } else {
        //   float _552 = _540 * 12.923210144042969f;
        //   _554 = _552;
        // }
        // bool _555 = !(_541 >= 0.0030399328097701073f);
        // if (!_555) {
        //   float _557 = abs(_541);
        //   float _558 = log2(_557);
        //   float _559 = _558 * 0.4166666567325592f;
        //   float _560 = exp2(_559);
        //   float _561 = _560 * 1.0549999475479126f;
        //   float _562 = _561 + -0.054999999701976776f;
        //   _566 = _562;
        // } else {
        //   float _564 = _541 * 12.923210144042969f;
        //   _566 = _564;
        // }
        // bool _567 = !(_542 >= 0.0030399328097701073f);
        // if (!_567) {
        //   float _569 = abs(_542);
        //   float _570 = log2(_569);
        //   float _571 = _570 * 0.4166666567325592f;
        //   float _572 = exp2(_571);
        //   float _573 = _572 * 1.0549999475479126f;
        //   float _574 = _573 + -0.054999999701976776f;
        //   _647 = _554;
        //   _648 = _566;
        //   _649 = _574;
        // } else {
        //   float _576 = _542 * 12.923210144042969f;
        //   _647 = _554;
        //   _648 = _566;
        //   _649 = _576;
        // }
        _647 = renodx::color::srgb::EncodeSafe(_532);
        _648 = renodx::color::srgb::EncodeSafe(_535);
        _649 = renodx::color::srgb::EncodeSafe(_538);

      } else {
        float _578 = saturate(_532);
        float _579 = saturate(_535);
        float _580 = saturate(_538);
        bool _581 = ((uint)(cb1_018w) == -2);
        if (!_581) {
          bool _583 = !(_578 >= 0.0030399328097701073f);
          if (!_583) {
            float _585 = abs(_578);
            float _586 = log2(_585);
            float _587 = _586 * 0.4166666567325592f;
            float _588 = exp2(_587);
            float _589 = _588 * 1.0549999475479126f;
            float _590 = _589 + -0.054999999701976776f;
            _594 = _590;
          } else {
            float _592 = _578 * 12.923210144042969f;
            _594 = _592;
          }
          bool _595 = !(_579 >= 0.0030399328097701073f);
          if (!_595) {
            float _597 = abs(_579);
            float _598 = log2(_597);
            float _599 = _598 * 0.4166666567325592f;
            float _600 = exp2(_599);
            float _601 = _600 * 1.0549999475479126f;
            float _602 = _601 + -0.054999999701976776f;
            _606 = _602;
          } else {
            float _604 = _579 * 12.923210144042969f;
            _606 = _604;
          }
          bool _607 = !(_580 >= 0.0030399328097701073f);
          if (!_607) {
            float _609 = abs(_580);
            float _610 = log2(_609);
            float _611 = _610 * 0.4166666567325592f;
            float _612 = exp2(_611);
            float _613 = _612 * 1.0549999475479126f;
            float _614 = _613 + -0.054999999701976776f;
            _618 = _594;
            _619 = _606;
            _620 = _614;
          } else {
            float _616 = _580 * 12.923210144042969f;
            _618 = _594;
            _619 = _606;
            _620 = _616;
          }
        } else {
          _618 = _578;
          _619 = _579;
          _620 = _580;
        }
        float _625 = abs(_618);
        float _626 = abs(_619);
        float _627 = abs(_620);
        float _628 = log2(_625);
        float _629 = log2(_626);
        float _630 = log2(_627);
        float _631 = _628 * cb2_000z;
        float _632 = _629 * cb2_000z;
        float _633 = _630 * cb2_000z;
        float _634 = exp2(_631);
        float _635 = exp2(_632);
        float _636 = exp2(_633);
        float _637 = _634 * cb2_000y;
        float _638 = _635 * cb2_000y;
        float _639 = _636 * cb2_000y;
        float _640 = _637 + cb2_000x;
        float _641 = _638 + cb2_000x;
        float _642 = _639 + cb2_000x;
        float _643 = saturate(_640);
        float _644 = saturate(_641);
        float _645 = saturate(_642);
        _647 = _643;
        _648 = _644;
        _649 = _645;
      }
      float _653 = cb2_023x * TEXCOORD0_centroid.x;
      float _654 = cb2_023y * TEXCOORD0_centroid.y;
      float _657 = _653 + cb2_023z;
      float _658 = _654 + cb2_023w;
      float4 _661 = t10.SampleLevel(s0_space2, float2(_657, _658), 0.0f);
      float _663 = _661.x + -0.5f;
      float _664 = _663 * cb2_022x;
      float _665 = _664 + 0.5f;
      float _666 = _665 * 2.0f;
      float _667 = _666 * _647;
      float _668 = _666 * _648;
      float _669 = _666 * _649;
      float _673 = float((uint)(cb2_019z));
      float _674 = float((uint)(cb2_019w));
      float _675 = _673 + SV_Position.x;
      float _676 = _674 + SV_Position.y;
      uint _677 = uint(_675);
      uint _678 = uint(_676);
      uint _681 = cb2_019x + -1u;
      uint _682 = cb2_019y + -1u;
      int _683 = _677 & _681;
      int _684 = _678 & _682;
      float4 _685 = t3.Load(int3(_683, _684, 0));
      float _689 = _685.x * 2.0f;
      float _690 = _685.y * 2.0f;
      float _691 = _685.z * 2.0f;
      float _692 = _689 + -1.0f;
      float _693 = _690 + -1.0f;
      float _694 = _691 + -1.0f;
      float _695 = _692 * cb2_025w;
      float _696 = _693 * cb2_025w;
      float _697 = _694 * cb2_025w;
      float _698 = _695 + _667;
      float _699 = _696 + _668;
      float _700 = _697 + _669;
      float _701 = dot(float3(_698, _699, _700), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _698;
      SV_Target.y = _699;
      SV_Target.z = _700;
      SV_Target.w = _701;
      SV_Target_1.x = _701;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
