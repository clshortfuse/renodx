#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture3D<float2> t6 : register(t6);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _18 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _20 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _24 = max(_20.x, 0.0f);
  float _25 = max(_20.y, 0.0f);
  float _26 = max(_20.z, 0.0f);
  float _27 = min(_24, 65000.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float4 _30 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _35 = max(_30.x, 0.0f);
  float _36 = max(_30.y, 0.0f);
  float _37 = max(_30.z, 0.0f);
  float _38 = max(_30.w, 0.0f);
  float _39 = min(_35, 5000.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _45 = _18.x * cb0_028z;
  float _46 = _45 + cb0_028x;
  float _47 = cb2_027w / _46;
  float _48 = 1.0f - _47;
  float _49 = abs(_48);
  float _51 = cb2_027y * _49;
  float _53 = _51 - cb2_027z;
  float _54 = saturate(_53);
  float _55 = max(_54, _42);
  float _56 = saturate(_55);
  float _60 = cb2_013x * TEXCOORD0_centroid.x;
  float _61 = cb2_013y * TEXCOORD0_centroid.y;
  float _64 = _60 + cb2_013z;
  float _65 = _61 + cb2_013w;
  float _68 = dot(float2(_64, _65), float2(_64, _65));
  float _69 = abs(_68);
  float _70 = log2(_69);
  float _71 = _70 * cb2_014x;
  float _72 = exp2(_71);
  float _73 = saturate(_72);
  float _77 = cb2_011x * TEXCOORD0_centroid.x;
  float _78 = cb2_011y * TEXCOORD0_centroid.y;
  float _81 = _77 + cb2_011z;
  float _82 = _78 + cb2_011w;
  float _83 = _81 * _73;
  float _84 = _82 * _73;
  float _85 = _83 + TEXCOORD0_centroid.x;
  float _86 = _84 + TEXCOORD0_centroid.y;
  float _90 = cb2_012x * TEXCOORD0_centroid.x;
  float _91 = cb2_012y * TEXCOORD0_centroid.y;
  float _94 = _90 + cb2_012z;
  float _95 = _91 + cb2_012w;
  float _96 = _94 * _73;
  float _97 = _95 * _73;
  float _98 = _96 + TEXCOORD0_centroid.x;
  float _99 = _97 + TEXCOORD0_centroid.y;
  float4 _100 = t1.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _104 = max(_100.x, 0.0f);
  float _105 = max(_100.y, 0.0f);
  float _106 = max(_100.z, 0.0f);
  float _107 = min(_104, 65000.0f);
  float _108 = min(_105, 65000.0f);
  float _109 = min(_106, 65000.0f);
  float4 _110 = t1.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _114 = max(_110.x, 0.0f);
  float _115 = max(_110.y, 0.0f);
  float _116 = max(_110.z, 0.0f);
  float _117 = min(_114, 65000.0f);
  float _118 = min(_115, 65000.0f);
  float _119 = min(_116, 65000.0f);
  float4 _120 = t3.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _124 = max(_120.x, 0.0f);
  float _125 = max(_120.y, 0.0f);
  float _126 = max(_120.z, 0.0f);
  float _127 = min(_124, 5000.0f);
  float _128 = min(_125, 5000.0f);
  float _129 = min(_126, 5000.0f);
  float4 _130 = t3.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _134 = max(_130.x, 0.0f);
  float _135 = max(_130.y, 0.0f);
  float _136 = max(_130.z, 0.0f);
  float _137 = min(_134, 5000.0f);
  float _138 = min(_135, 5000.0f);
  float _139 = min(_136, 5000.0f);
  float _144 = 1.0f - cb2_009x;
  float _145 = 1.0f - cb2_009y;
  float _146 = 1.0f - cb2_009z;
  float _151 = _144 - cb2_010x;
  float _152 = _145 - cb2_010y;
  float _153 = _146 - cb2_010z;
  float _154 = saturate(_151);
  float _155 = saturate(_152);
  float _156 = saturate(_153);
  float _157 = _154 * _27;
  float _158 = _155 * _28;
  float _159 = _156 * _29;
  float _160 = cb2_009x * _107;
  float _161 = cb2_009y * _108;
  float _162 = cb2_009z * _109;
  float _163 = _160 + _157;
  float _164 = _161 + _158;
  float _165 = _162 + _159;
  float _166 = cb2_010x * _117;
  float _167 = cb2_010y * _118;
  float _168 = cb2_010z * _119;
  float _169 = _163 + _166;
  float _170 = _164 + _167;
  float _171 = _165 + _168;
  float _172 = _154 * _39;
  float _173 = _155 * _40;
  float _174 = _156 * _41;
  float _175 = cb2_009x * _127;
  float _176 = cb2_009y * _128;
  float _177 = cb2_009z * _129;
  float _178 = cb2_010x * _137;
  float _179 = cb2_010y * _138;
  float _180 = cb2_010z * _139;
  float4 _181 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _185 = _172 - _169;
  float _186 = _185 + _175;
  float _187 = _186 + _178;
  float _188 = _173 - _170;
  float _189 = _188 + _176;
  float _190 = _189 + _179;
  float _191 = _174 - _171;
  float _192 = _191 + _177;
  float _193 = _192 + _180;
  float _194 = _187 * _56;
  float _195 = _190 * _56;
  float _196 = _193 * _56;
  float _197 = _194 + _169;
  float _198 = _195 + _170;
  float _199 = _196 + _171;
  float _200 = dot(float3(_197, _198, _199), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _204 = t0[0].SExposureData_020;
  float _206 = t0[0].SExposureData_004;
  float _208 = cb2_018x * 0.5f;
  float _209 = _208 * cb2_018y;
  float _210 = _206.x - _209;
  float _211 = cb2_018y * cb2_018x;
  float _212 = 1.0f / _211;
  float _213 = _210 * _212;
  float _214 = _200 / _204.x;
  float _215 = _214 * 5464.01611328125f;
  float _216 = _215 + 9.99999993922529e-09f;
  float _217 = log2(_216);
  float _218 = _217 - _210;
  float _219 = _218 * _212;
  float _220 = saturate(_219);
  float2 _221 = t6.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _220), 0.0f);
  float _224 = max(_221.y, 1.0000000116860974e-07f);
  float _225 = _221.x / _224;
  float _226 = _225 + _213;
  float _227 = _226 / _212;
  float _228 = _227 - _206.x;
  float _229 = -0.0f - _228;
  float _231 = _229 - cb2_027x;
  float _232 = max(0.0f, _231);
  float _235 = cb2_026z * _232;
  float _236 = _228 - cb2_027x;
  float _237 = max(0.0f, _236);
  float _239 = cb2_026w * _237;
  bool _240 = (_228 < 0.0f);
  float _241 = select(_240, _235, _239);
  float _242 = exp2(_241);
  float _243 = _242 * _197;
  float _244 = _242 * _198;
  float _245 = _242 * _199;
  float _250 = cb2_024y * _181.x;
  float _251 = cb2_024z * _181.y;
  float _252 = cb2_024w * _181.z;
  float _253 = _250 + _243;
  float _254 = _251 + _244;
  float _255 = _252 + _245;
  float _260 = _253 * cb2_025x;
  float _261 = _254 * cb2_025y;
  float _262 = _255 * cb2_025z;
  float _263 = dot(float3(_260, _261, _262), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _264 = t0[0].SExposureData_012;
  float _266 = _263 * 5464.01611328125f;
  float _267 = _266 * _264.x;
  float _268 = _267 + 9.99999993922529e-09f;
  float _269 = log2(_268);
  float _270 = _269 + 16.929765701293945f;
  float _271 = _270 * 0.05734497308731079f;
  float _272 = saturate(_271);
  float _273 = _272 * _272;
  float _274 = _272 * 2.0f;
  float _275 = 3.0f - _274;
  float _276 = _273 * _275;
  float _277 = _261 * 0.8450999855995178f;
  float _278 = _262 * 0.14589999616146088f;
  float _279 = _277 + _278;
  float _280 = _279 * 2.4890189170837402f;
  float _281 = _279 * 0.3754962384700775f;
  float _282 = _279 * 2.811495304107666f;
  float _283 = _279 * 5.519708156585693f;
  float _284 = _263 - _280;
  float _285 = _276 * _284;
  float _286 = _285 + _280;
  float _287 = _276 * 0.5f;
  float _288 = _287 + 0.5f;
  float _289 = _288 * _284;
  float _290 = _289 + _280;
  float _291 = _260 - _281;
  float _292 = _261 - _282;
  float _293 = _262 - _283;
  float _294 = _288 * _291;
  float _295 = _288 * _292;
  float _296 = _288 * _293;
  float _297 = _294 + _281;
  float _298 = _295 + _282;
  float _299 = _296 + _283;
  float _300 = 1.0f / _290;
  float _301 = _286 * _300;
  float _302 = _301 * _297;
  float _303 = _301 * _298;
  float _304 = _301 * _299;
  float _308 = cb2_020x * TEXCOORD0_centroid.x;
  float _309 = cb2_020y * TEXCOORD0_centroid.y;
  float _312 = _308 + cb2_020z;
  float _313 = _309 + cb2_020w;
  float _316 = dot(float2(_312, _313), float2(_312, _313));
  float _317 = 1.0f - _316;
  float _318 = saturate(_317);
  float _319 = log2(_318);
  float _320 = _319 * cb2_021w;
  float _321 = exp2(_320);
  float _325 = _302 - cb2_021x;
  float _326 = _303 - cb2_021y;
  float _327 = _304 - cb2_021z;
  float _328 = _325 * _321;
  float _329 = _326 * _321;
  float _330 = _327 * _321;
  float _331 = _328 + cb2_021x;
  float _332 = _329 + cb2_021y;
  float _333 = _330 + cb2_021z;
  float _334 = t0[0].SExposureData_000;
  float _336 = max(_204.x, 0.0010000000474974513f);
  float _337 = 1.0f / _336;
  float _338 = _337 * _334.x;
  bool _341 = ((uint)(cb2_069y) == 0);
  float _347;
  float _348;
  float _349;
  float _403;
  float _404;
  float _405;
  float _435;
  float _436;
  float _437;
  float _587;
  float _624;
  float _625;
  float _626;
  float _655;
  float _656;
  float _657;
  float _738;
  float _739;
  float _740;
  float _746;
  float _747;
  float _748;
  float _762;
  float _763;
  float _764;
  float _789;
  float _801;
  float _829;
  float _841;
  float _853;
  float _854;
  float _855;
  float _882;
  float _883;
  float _884;
  if (!_341) {
    float _343 = _338 * _331;
    float _344 = _338 * _332;
    float _345 = _338 * _333;
    _347 = _343;
    _348 = _344;
    _349 = _345;
  } else {
    _347 = _331;
    _348 = _332;
    _349 = _333;
  }
  float _350 = _347 * 0.6130970120429993f;
  float _351 = mad(0.33952298760414124f, _348, _350);
  float _352 = mad(0.04737899824976921f, _349, _351);
  float _353 = _347 * 0.07019399851560593f;
  float _354 = mad(0.9163540005683899f, _348, _353);
  float _355 = mad(0.013451999984681606f, _349, _354);
  float _356 = _347 * 0.02061600051820278f;
  float _357 = mad(0.10956999659538269f, _348, _356);
  float _358 = mad(0.8698149919509888f, _349, _357);
  float _359 = log2(_352);
  float _360 = log2(_355);
  float _361 = log2(_358);
  float _362 = _359 * 0.04211956635117531f;
  float _363 = _360 * 0.04211956635117531f;
  float _364 = _361 * 0.04211956635117531f;
  float _365 = _362 + 0.6252607107162476f;
  float _366 = _363 + 0.6252607107162476f;
  float _367 = _364 + 0.6252607107162476f;
  float4 _368 = t5.SampleLevel(s2_space2, float3(_365, _366, _367), 0.0f);
  bool _374 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _378 = cb2_017x * _368.x;
    float _379 = cb2_017x * _368.y;
    float _380 = cb2_017x * _368.z;
    float _382 = _378 + cb2_017y;
    float _383 = _379 + cb2_017y;
    float _384 = _380 + cb2_017y;
    float _385 = exp2(_382);
    float _386 = exp2(_383);
    float _387 = exp2(_384);
    float _388 = _385 + 1.0f;
    float _389 = _386 + 1.0f;
    float _390 = _387 + 1.0f;
    float _391 = 1.0f / _388;
    float _392 = 1.0f / _389;
    float _393 = 1.0f / _390;
    float _395 = cb2_017z * _391;
    float _396 = cb2_017z * _392;
    float _397 = cb2_017z * _393;
    float _399 = _395 + cb2_017w;
    float _400 = _396 + cb2_017w;
    float _401 = _397 + cb2_017w;
    _403 = _399;
    _404 = _400;
    _405 = _401;
  } else {
    _403 = _368.x;
    _404 = _368.y;
    _405 = _368.z;
  }
  float _406 = _403 * 23.0f;
  float _407 = _406 + -14.473931312561035f;
  float _408 = exp2(_407);
  float _409 = _404 * 23.0f;
  float _410 = _409 + -14.473931312561035f;
  float _411 = exp2(_410);
  float _412 = _405 * 23.0f;
  float _413 = _412 + -14.473931312561035f;
  float _414 = exp2(_413);
  float _420 = cb2_016x - _408;
  float _421 = cb2_016y - _411;
  float _422 = cb2_016z - _414;
  float _423 = _420 * cb2_016w;
  float _424 = _421 * cb2_016w;
  float _425 = _422 * cb2_016w;
  float _426 = _423 + _408;
  float _427 = _424 + _411;
  float _428 = _425 + _414;
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _431 = cb2_024x * _426;
    float _432 = cb2_024x * _427;
    float _433 = cb2_024x * _428;
    _435 = _431;
    _436 = _432;
    _437 = _433;
  } else {
    _435 = _426;
    _436 = _427;
    _437 = _428;
  }
  float _440 = _435 * 0.9708889722824097f;
  float _441 = mad(0.026962999254465103f, _436, _440);
  float _442 = mad(0.002148000057786703f, _437, _441);
  float _443 = _435 * 0.01088900025933981f;
  float _444 = mad(0.9869629740715027f, _436, _443);
  float _445 = mad(0.002148000057786703f, _437, _444);
  float _446 = mad(0.026962999254465103f, _436, _443);
  float _447 = mad(0.9621480107307434f, _437, _446);
  float _448 = max(_442, 0.0f);
  float _449 = max(_445, 0.0f);
  float _450 = max(_447, 0.0f);
  float _451 = min(_448, cb2_095y);
  float _452 = min(_449, cb2_095y);
  float _453 = min(_450, cb2_095y);
  bool _456 = ((uint)(cb2_095x) == 0);
  bool _459 = ((uint)(cb2_094w) == 0);
  bool _461 = ((uint)(cb2_094z) == 0);
  bool _463 = ((uint)(cb2_094y) != 0);
  bool _465 = ((uint)(cb2_094x) == 0);
  bool _467 = ((uint)(cb2_069z) != 0);
  float _514 = asfloat((uint)(cb2_075y));
  float _515 = asfloat((uint)(cb2_075z));
  float _516 = asfloat((uint)(cb2_075w));
  float _517 = asfloat((uint)(cb2_074z));
  float _518 = asfloat((uint)(cb2_074w));
  float _519 = asfloat((uint)(cb2_075x));
  float _520 = asfloat((uint)(cb2_073w));
  float _521 = asfloat((uint)(cb2_074x));
  float _522 = asfloat((uint)(cb2_074y));
  float _523 = asfloat((uint)(cb2_077x));
  float _524 = asfloat((uint)(cb2_077y));
  float _525 = asfloat((uint)(cb2_079x));
  float _526 = asfloat((uint)(cb2_079y));
  float _527 = asfloat((uint)(cb2_079z));
  float _528 = asfloat((uint)(cb2_078y));
  float _529 = asfloat((uint)(cb2_078z));
  float _530 = asfloat((uint)(cb2_078w));
  float _531 = asfloat((uint)(cb2_077z));
  float _532 = asfloat((uint)(cb2_077w));
  float _533 = asfloat((uint)(cb2_078x));
  float _534 = asfloat((uint)(cb2_072y));
  float _535 = asfloat((uint)(cb2_072z));
  float _536 = asfloat((uint)(cb2_072w));
  float _537 = asfloat((uint)(cb2_071x));
  float _538 = asfloat((uint)(cb2_071y));
  float _539 = asfloat((uint)(cb2_076x));
  float _540 = asfloat((uint)(cb2_070w));
  float _541 = asfloat((uint)(cb2_070x));
  float _542 = asfloat((uint)(cb2_070y));
  float _543 = asfloat((uint)(cb2_070z));
  float _544 = asfloat((uint)(cb2_073x));
  float _545 = asfloat((uint)(cb2_073y));
  float _546 = asfloat((uint)(cb2_073z));
  float _547 = asfloat((uint)(cb2_071z));
  float _548 = asfloat((uint)(cb2_071w));
  float _549 = asfloat((uint)(cb2_072x));
  float _550 = max(_452, _453);
  float _551 = max(_451, _550);
  float _552 = 1.0f / _551;
  float _553 = _552 * _451;
  float _554 = _552 * _452;
  float _555 = _552 * _453;
  float _556 = abs(_553);
  float _557 = log2(_556);
  float _558 = _557 * _541;
  float _559 = exp2(_558);
  float _560 = abs(_554);
  float _561 = log2(_560);
  float _562 = _561 * _542;
  float _563 = exp2(_562);
  float _564 = abs(_555);
  float _565 = log2(_564);
  float _566 = _565 * _543;
  float _567 = exp2(_566);
  if (_463) {
    float _570 = asfloat((uint)(cb2_076w));
    float _572 = asfloat((uint)(cb2_076z));
    float _574 = asfloat((uint)(cb2_076y));
    float _575 = _572 * _452;
    float _576 = _574 * _451;
    float _577 = _570 * _453;
    float _578 = _576 + _577;
    float _579 = _578 + _575;
    _587 = _579;
  } else {
    float _581 = _548 * _452;
    float _582 = _547 * _451;
    float _583 = _549 * _453;
    float _584 = _581 + _582;
    float _585 = _584 + _583;
    _587 = _585;
  }
  float _588 = abs(_587);
  float _589 = log2(_588);
  float _590 = _589 * _540;
  float _591 = exp2(_590);
  float _592 = log2(_591);
  float _593 = _592 * _539;
  float _594 = exp2(_593);
  float _595 = select(_467, _594, _591);
  float _596 = _595 * _537;
  float _597 = _596 + _538;
  float _598 = 1.0f / _597;
  float _599 = _598 * _591;
  if (_463) {
    if (!_465) {
      float _602 = _559 * _531;
      float _603 = _563 * _532;
      float _604 = _567 * _533;
      float _605 = _603 + _602;
      float _606 = _605 + _604;
      float _607 = _563 * _529;
      float _608 = _559 * _528;
      float _609 = _567 * _530;
      float _610 = _607 + _608;
      float _611 = _610 + _609;
      float _612 = _567 * _527;
      float _613 = _563 * _526;
      float _614 = _559 * _525;
      float _615 = _613 + _614;
      float _616 = _615 + _612;
      float _617 = max(_611, _616);
      float _618 = max(_606, _617);
      float _619 = 1.0f / _618;
      float _620 = _619 * _606;
      float _621 = _619 * _611;
      float _622 = _619 * _616;
      _624 = _620;
      _625 = _621;
      _626 = _622;
    } else {
      _624 = _559;
      _625 = _563;
      _626 = _567;
    }
    float _627 = _624 * _524;
    float _628 = exp2(_627);
    float _629 = _628 * _523;
    float _630 = saturate(_629);
    float _631 = _624 * _523;
    float _632 = _624 - _631;
    float _633 = saturate(_632);
    float _634 = max(_523, _633);
    float _635 = min(_634, _630);
    float _636 = _625 * _524;
    float _637 = exp2(_636);
    float _638 = _637 * _523;
    float _639 = saturate(_638);
    float _640 = _625 * _523;
    float _641 = _625 - _640;
    float _642 = saturate(_641);
    float _643 = max(_523, _642);
    float _644 = min(_643, _639);
    float _645 = _626 * _524;
    float _646 = exp2(_645);
    float _647 = _646 * _523;
    float _648 = saturate(_647);
    float _649 = _626 * _523;
    float _650 = _626 - _649;
    float _651 = saturate(_650);
    float _652 = max(_523, _651);
    float _653 = min(_652, _648);
    _655 = _635;
    _656 = _644;
    _657 = _653;
  } else {
    _655 = _559;
    _656 = _563;
    _657 = _567;
  }
  float _658 = _655 * _547;
  float _659 = _656 * _548;
  float _660 = _659 + _658;
  float _661 = _657 * _549;
  float _662 = _660 + _661;
  float _663 = 1.0f / _662;
  float _664 = _663 * _599;
  float _665 = saturate(_664);
  float _666 = _665 * _655;
  float _667 = saturate(_666);
  float _668 = _665 * _656;
  float _669 = saturate(_668);
  float _670 = _665 * _657;
  float _671 = saturate(_670);
  float _672 = _667 * _534;
  float _673 = _534 - _672;
  float _674 = _669 * _535;
  float _675 = _535 - _674;
  float _676 = _671 * _536;
  float _677 = _536 - _676;
  float _678 = _671 * _549;
  float _679 = _667 * _547;
  float _680 = _669 * _548;
  float _681 = _599 - _679;
  float _682 = _681 - _680;
  float _683 = _682 - _678;
  float _684 = saturate(_683);
  float _685 = _675 * _548;
  float _686 = _673 * _547;
  float _687 = _677 * _549;
  float _688 = _685 + _686;
  float _689 = _688 + _687;
  float _690 = 1.0f / _689;
  float _691 = _690 * _684;
  float _692 = _691 * _673;
  float _693 = _692 + _667;
  float _694 = saturate(_693);
  float _695 = _691 * _675;
  float _696 = _695 + _669;
  float _697 = saturate(_696);
  float _698 = _691 * _677;
  float _699 = _698 + _671;
  float _700 = saturate(_699);
  float _701 = _700 * _549;
  float _702 = _694 * _547;
  float _703 = _697 * _548;
  float _704 = _599 - _702;
  float _705 = _704 - _703;
  float _706 = _705 - _701;
  float _707 = saturate(_706);
  float _708 = _707 * _544;
  float _709 = _708 + _694;
  float _710 = saturate(_709);
  float _711 = _707 * _545;
  float _712 = _711 + _697;
  float _713 = saturate(_712);
  float _714 = _707 * _546;
  float _715 = _714 + _700;
  float _716 = saturate(_715);
  if (!_461) {
    float _718 = _710 * _520;
    float _719 = _713 * _521;
    float _720 = _716 * _522;
    float _721 = _719 + _718;
    float _722 = _721 + _720;
    float _723 = _713 * _518;
    float _724 = _710 * _517;
    float _725 = _716 * _519;
    float _726 = _723 + _724;
    float _727 = _726 + _725;
    float _728 = _716 * _516;
    float _729 = _713 * _515;
    float _730 = _710 * _514;
    float _731 = _729 + _730;
    float _732 = _731 + _728;
    if (!_459) {
      float _734 = saturate(_722);
      float _735 = saturate(_727);
      float _736 = saturate(_732);
      _738 = _736;
      _739 = _735;
      _740 = _734;
    } else {
      _738 = _732;
      _739 = _727;
      _740 = _722;
    }
  } else {
    _738 = _716;
    _739 = _713;
    _740 = _710;
  }
  if (!_456) {
    float _742 = _740 * _520;
    float _743 = _739 * _520;
    float _744 = _738 * _520;
    _746 = _744;
    _747 = _743;
    _748 = _742;
  } else {
    _746 = _738;
    _747 = _739;
    _748 = _740;
  }
  if (_374) {
    float _752 = cb1_018z * 9.999999747378752e-05f;
    float _753 = _752 * _748;
    float _754 = _752 * _747;
    float _755 = _752 * _746;
    float _757 = 5000.0f / cb1_018y;
    float _758 = _753 * _757;
    float _759 = _754 * _757;
    float _760 = _755 * _757;
    _762 = _758;
    _763 = _759;
    _764 = _760;
  } else {
    _762 = _748;
    _763 = _747;
    _764 = _746;
  }
  float _765 = _762 * 1.6047500371932983f;
  float _766 = mad(-0.5310800075531006f, _763, _765);
  float _767 = mad(-0.07366999983787537f, _764, _766);
  float _768 = _762 * -0.10208000242710114f;
  float _769 = mad(1.1081299781799316f, _763, _768);
  float _770 = mad(-0.006049999967217445f, _764, _769);
  float _771 = _762 * -0.0032599999103695154f;
  float _772 = mad(-0.07275000214576721f, _763, _771);
  float _773 = mad(1.0760200023651123f, _764, _772);
  if (_374) {
    // float _775 = max(_767, 0.0f);
    // float _776 = max(_770, 0.0f);
    // float _777 = max(_773, 0.0f);
    // bool _778 = !(_775 >= 0.0030399328097701073f);
    // if (!_778) {
    //   float _780 = abs(_775);
    //   float _781 = log2(_780);
    //   float _782 = _781 * 0.4166666567325592f;
    //   float _783 = exp2(_782);
    //   float _784 = _783 * 1.0549999475479126f;
    //   float _785 = _784 + -0.054999999701976776f;
    //   _789 = _785;
    // } else {
    //   float _787 = _775 * 12.923210144042969f;
    //   _789 = _787;
    // }
    // bool _790 = !(_776 >= 0.0030399328097701073f);
    // if (!_790) {
    //   float _792 = abs(_776);
    //   float _793 = log2(_792);
    //   float _794 = _793 * 0.4166666567325592f;
    //   float _795 = exp2(_794);
    //   float _796 = _795 * 1.0549999475479126f;
    //   float _797 = _796 + -0.054999999701976776f;
    //   _801 = _797;
    // } else {
    //   float _799 = _776 * 12.923210144042969f;
    //   _801 = _799;
    // }
    // bool _802 = !(_777 >= 0.0030399328097701073f);
    // if (!_802) {
    //   float _804 = abs(_777);
    //   float _805 = log2(_804);
    //   float _806 = _805 * 0.4166666567325592f;
    //   float _807 = exp2(_806);
    //   float _808 = _807 * 1.0549999475479126f;
    //   float _809 = _808 + -0.054999999701976776f;
    //   _882 = _789;
    //   _883 = _801;
    //   _884 = _809;
    // } else {
    //   float _811 = _777 * 12.923210144042969f;
    //   _882 = _789;
    //   _883 = _801;
    //   _884 = _811;
    // }
    _882 = renodx::color::srgb::EncodeSafe(_767);
    _883 = renodx::color::srgb::EncodeSafe(_770);
    _884 = renodx::color::srgb::EncodeSafe(_773);

  } else {
    float _813 = saturate(_767);
    float _814 = saturate(_770);
    float _815 = saturate(_773);
    bool _816 = ((uint)(cb1_018w) == -2);
    if (!_816) {
      bool _818 = !(_813 >= 0.0030399328097701073f);
      if (!_818) {
        float _820 = abs(_813);
        float _821 = log2(_820);
        float _822 = _821 * 0.4166666567325592f;
        float _823 = exp2(_822);
        float _824 = _823 * 1.0549999475479126f;
        float _825 = _824 + -0.054999999701976776f;
        _829 = _825;
      } else {
        float _827 = _813 * 12.923210144042969f;
        _829 = _827;
      }
      bool _830 = !(_814 >= 0.0030399328097701073f);
      if (!_830) {
        float _832 = abs(_814);
        float _833 = log2(_832);
        float _834 = _833 * 0.4166666567325592f;
        float _835 = exp2(_834);
        float _836 = _835 * 1.0549999475479126f;
        float _837 = _836 + -0.054999999701976776f;
        _841 = _837;
      } else {
        float _839 = _814 * 12.923210144042969f;
        _841 = _839;
      }
      bool _842 = !(_815 >= 0.0030399328097701073f);
      if (!_842) {
        float _844 = abs(_815);
        float _845 = log2(_844);
        float _846 = _845 * 0.4166666567325592f;
        float _847 = exp2(_846);
        float _848 = _847 * 1.0549999475479126f;
        float _849 = _848 + -0.054999999701976776f;
        _853 = _829;
        _854 = _841;
        _855 = _849;
      } else {
        float _851 = _815 * 12.923210144042969f;
        _853 = _829;
        _854 = _841;
        _855 = _851;
      }
    } else {
      _853 = _813;
      _854 = _814;
      _855 = _815;
    }
    float _860 = abs(_853);
    float _861 = abs(_854);
    float _862 = abs(_855);
    float _863 = log2(_860);
    float _864 = log2(_861);
    float _865 = log2(_862);
    float _866 = _863 * cb2_000z;
    float _867 = _864 * cb2_000z;
    float _868 = _865 * cb2_000z;
    float _869 = exp2(_866);
    float _870 = exp2(_867);
    float _871 = exp2(_868);
    float _872 = _869 * cb2_000y;
    float _873 = _870 * cb2_000y;
    float _874 = _871 * cb2_000y;
    float _875 = _872 + cb2_000x;
    float _876 = _873 + cb2_000x;
    float _877 = _874 + cb2_000x;
    float _878 = saturate(_875);
    float _879 = saturate(_876);
    float _880 = saturate(_877);
    _882 = _878;
    _883 = _879;
    _884 = _880;
  }
  float _885 = dot(float3(_882, _883, _884), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _882;
  SV_Target.y = _883;
  SV_Target.z = _884;
  SV_Target.w = _885;
  SV_Target_1.x = _885;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
