#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = max(_26.x, 0.0f);
  float _31 = max(_26.y, 0.0f);
  float _32 = max(_26.z, 0.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float _35 = min(_32, 65000.0f);
  float4 _36 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _41 = max(_36.x, 0.0f);
  float _42 = max(_36.y, 0.0f);
  float _43 = max(_36.z, 0.0f);
  float _44 = max(_36.w, 0.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _48 = min(_44, 5000.0f);
  float _51 = _24.x * cb0_028z;
  float _52 = _51 + cb0_028x;
  float _53 = cb2_027w / _52;
  float _54 = 1.0f - _53;
  float _55 = abs(_54);
  float _57 = cb2_027y * _55;
  float _59 = _57 - cb2_027z;
  float _60 = saturate(_59);
  float _61 = max(_60, _48);
  float _62 = saturate(_61);
  float _66 = cb2_013x * TEXCOORD0_centroid.x;
  float _67 = cb2_013y * TEXCOORD0_centroid.y;
  float _70 = _66 + cb2_013z;
  float _71 = _67 + cb2_013w;
  float _74 = dot(float2(_70, _71), float2(_70, _71));
  float _75 = abs(_74);
  float _76 = log2(_75);
  float _77 = _76 * cb2_014x;
  float _78 = exp2(_77);
  float _79 = saturate(_78);
  float _83 = cb2_011x * TEXCOORD0_centroid.x;
  float _84 = cb2_011y * TEXCOORD0_centroid.y;
  float _87 = _83 + cb2_011z;
  float _88 = _84 + cb2_011w;
  float _89 = _87 * _79;
  float _90 = _88 * _79;
  float _91 = _89 + TEXCOORD0_centroid.x;
  float _92 = _90 + TEXCOORD0_centroid.y;
  float _96 = cb2_012x * TEXCOORD0_centroid.x;
  float _97 = cb2_012y * TEXCOORD0_centroid.y;
  float _100 = _96 + cb2_012z;
  float _101 = _97 + cb2_012w;
  float _102 = _100 * _79;
  float _103 = _101 * _79;
  float _104 = _102 + TEXCOORD0_centroid.x;
  float _105 = _103 + TEXCOORD0_centroid.y;
  float4 _106 = t1.SampleLevel(s2_space2, float2(_91, _92), 0.0f);
  float _110 = max(_106.x, 0.0f);
  float _111 = max(_106.y, 0.0f);
  float _112 = max(_106.z, 0.0f);
  float _113 = min(_110, 65000.0f);
  float _114 = min(_111, 65000.0f);
  float _115 = min(_112, 65000.0f);
  float4 _116 = t1.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _120 = max(_116.x, 0.0f);
  float _121 = max(_116.y, 0.0f);
  float _122 = max(_116.z, 0.0f);
  float _123 = min(_120, 65000.0f);
  float _124 = min(_121, 65000.0f);
  float _125 = min(_122, 65000.0f);
  float4 _126 = t4.SampleLevel(s2_space2, float2(_91, _92), 0.0f);
  float _130 = max(_126.x, 0.0f);
  float _131 = max(_126.y, 0.0f);
  float _132 = max(_126.z, 0.0f);
  float _133 = min(_130, 5000.0f);
  float _134 = min(_131, 5000.0f);
  float _135 = min(_132, 5000.0f);
  float4 _136 = t4.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _140 = max(_136.x, 0.0f);
  float _141 = max(_136.y, 0.0f);
  float _142 = max(_136.z, 0.0f);
  float _143 = min(_140, 5000.0f);
  float _144 = min(_141, 5000.0f);
  float _145 = min(_142, 5000.0f);
  float _150 = 1.0f - cb2_009x;
  float _151 = 1.0f - cb2_009y;
  float _152 = 1.0f - cb2_009z;
  float _157 = _150 - cb2_010x;
  float _158 = _151 - cb2_010y;
  float _159 = _152 - cb2_010z;
  float _160 = saturate(_157);
  float _161 = saturate(_158);
  float _162 = saturate(_159);
  float _163 = _160 * _33;
  float _164 = _161 * _34;
  float _165 = _162 * _35;
  float _166 = cb2_009x * _113;
  float _167 = cb2_009y * _114;
  float _168 = cb2_009z * _115;
  float _169 = _166 + _163;
  float _170 = _167 + _164;
  float _171 = _168 + _165;
  float _172 = cb2_010x * _123;
  float _173 = cb2_010y * _124;
  float _174 = cb2_010z * _125;
  float _175 = _169 + _172;
  float _176 = _170 + _173;
  float _177 = _171 + _174;
  float _178 = _160 * _45;
  float _179 = _161 * _46;
  float _180 = _162 * _47;
  float _181 = cb2_009x * _133;
  float _182 = cb2_009y * _134;
  float _183 = cb2_009z * _135;
  float _184 = cb2_010x * _143;
  float _185 = cb2_010y * _144;
  float _186 = cb2_010z * _145;
  float4 _187 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _191 = _178 - _175;
  float _192 = _191 + _181;
  float _193 = _192 + _184;
  float _194 = _179 - _176;
  float _195 = _194 + _182;
  float _196 = _195 + _185;
  float _197 = _180 - _177;
  float _198 = _197 + _183;
  float _199 = _198 + _186;
  float _200 = _193 * _62;
  float _201 = _196 * _62;
  float _202 = _199 * _62;
  float _203 = _200 + _175;
  float _204 = _201 + _176;
  float _205 = _202 + _177;
  float _206 = dot(float3(_203, _204, _205), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _210 = t0[0].SExposureData_020;
  float _212 = t0[0].SExposureData_004;
  float _214 = cb2_018x * 0.5f;
  float _215 = _214 * cb2_018y;
  float _216 = _212.x - _215;
  float _217 = cb2_018y * cb2_018x;
  float _218 = 1.0f / _217;
  float _219 = _216 * _218;
  float _220 = _206 / _210.x;
  float _221 = _220 * 5464.01611328125f;
  float _222 = _221 + 9.99999993922529e-09f;
  float _223 = log2(_222);
  float _224 = _223 - _216;
  float _225 = _224 * _218;
  float _226 = saturate(_225);
  float2 _227 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _226), 0.0f);
  float _230 = max(_227.y, 1.0000000116860974e-07f);
  float _231 = _227.x / _230;
  float _232 = _231 + _219;
  float _233 = _232 / _218;
  float _234 = _233 - _212.x;
  float _235 = -0.0f - _234;
  float _237 = _235 - cb2_027x;
  float _238 = max(0.0f, _237);
  float _241 = cb2_026z * _238;
  float _242 = _234 - cb2_027x;
  float _243 = max(0.0f, _242);
  float _245 = cb2_026w * _243;
  bool _246 = (_234 < 0.0f);
  float _247 = select(_246, _241, _245);
  float _248 = exp2(_247);
  float _249 = _248 * _203;
  float _250 = _248 * _204;
  float _251 = _248 * _205;
  float _256 = cb2_024y * _187.x;
  float _257 = cb2_024z * _187.y;
  float _258 = cb2_024w * _187.z;
  float _259 = _256 + _249;
  float _260 = _257 + _250;
  float _261 = _258 + _251;
  float _266 = _259 * cb2_025x;
  float _267 = _260 * cb2_025y;
  float _268 = _261 * cb2_025z;
  float _269 = dot(float3(_266, _267, _268), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _270 = t0[0].SExposureData_012;
  float _272 = _269 * 5464.01611328125f;
  float _273 = _272 * _270.x;
  float _274 = _273 + 9.99999993922529e-09f;
  float _275 = log2(_274);
  float _276 = _275 + 16.929765701293945f;
  float _277 = _276 * 0.05734497308731079f;
  float _278 = saturate(_277);
  float _279 = _278 * _278;
  float _280 = _278 * 2.0f;
  float _281 = 3.0f - _280;
  float _282 = _279 * _281;
  float _283 = _267 * 0.8450999855995178f;
  float _284 = _268 * 0.14589999616146088f;
  float _285 = _283 + _284;
  float _286 = _285 * 2.4890189170837402f;
  float _287 = _285 * 0.3754962384700775f;
  float _288 = _285 * 2.811495304107666f;
  float _289 = _285 * 5.519708156585693f;
  float _290 = _269 - _286;
  float _291 = _282 * _290;
  float _292 = _291 + _286;
  float _293 = _282 * 0.5f;
  float _294 = _293 + 0.5f;
  float _295 = _294 * _290;
  float _296 = _295 + _286;
  float _297 = _266 - _287;
  float _298 = _267 - _288;
  float _299 = _268 - _289;
  float _300 = _294 * _297;
  float _301 = _294 * _298;
  float _302 = _294 * _299;
  float _303 = _300 + _287;
  float _304 = _301 + _288;
  float _305 = _302 + _289;
  float _306 = 1.0f / _296;
  float _307 = _292 * _306;
  float _308 = _307 * _303;
  float _309 = _307 * _304;
  float _310 = _307 * _305;
  float _314 = cb2_020x * TEXCOORD0_centroid.x;
  float _315 = cb2_020y * TEXCOORD0_centroid.y;
  float _318 = _314 + cb2_020z;
  float _319 = _315 + cb2_020w;
  float _322 = dot(float2(_318, _319), float2(_318, _319));
  float _323 = 1.0f - _322;
  float _324 = saturate(_323);
  float _325 = log2(_324);
  float _326 = _325 * cb2_021w;
  float _327 = exp2(_326);
  float _331 = _308 - cb2_021x;
  float _332 = _309 - cb2_021y;
  float _333 = _310 - cb2_021z;
  float _334 = _331 * _327;
  float _335 = _332 * _327;
  float _336 = _333 * _327;
  float _337 = _334 + cb2_021x;
  float _338 = _335 + cb2_021y;
  float _339 = _336 + cb2_021z;
  float _340 = t0[0].SExposureData_000;
  float _342 = max(_210.x, 0.0010000000474974513f);
  float _343 = 1.0f / _342;
  float _344 = _343 * _340.x;
  bool _347 = ((uint)(cb2_069y) == 0);
  float _353;
  float _354;
  float _355;
  float _409;
  float _410;
  float _411;
  float _502;
  float _503;
  float _504;
  float _549;
  float _550;
  float _551;
  float _552;
  float _601;
  float _602;
  float _603;
  float _604;
  float _629;
  float _630;
  float _631;
  float _732;
  float _733;
  float _734;
  float _759;
  float _771;
  float _799;
  float _811;
  float _823;
  float _824;
  float _825;
  float _852;
  float _853;
  float _854;
  if (!_347) {
    float _349 = _344 * _337;
    float _350 = _344 * _338;
    float _351 = _344 * _339;
    _353 = _349;
    _354 = _350;
    _355 = _351;
  } else {
    _353 = _337;
    _354 = _338;
    _355 = _339;
  }
  float _356 = _353 * 0.6130970120429993f;
  float _357 = mad(0.33952298760414124f, _354, _356);
  float _358 = mad(0.04737899824976921f, _355, _357);
  float _359 = _353 * 0.07019399851560593f;
  float _360 = mad(0.9163540005683899f, _354, _359);
  float _361 = mad(0.013451999984681606f, _355, _360);
  float _362 = _353 * 0.02061600051820278f;
  float _363 = mad(0.10956999659538269f, _354, _362);
  float _364 = mad(0.8698149919509888f, _355, _363);
  float _365 = log2(_358);
  float _366 = log2(_361);
  float _367 = log2(_364);
  float _368 = _365 * 0.04211956635117531f;
  float _369 = _366 * 0.04211956635117531f;
  float _370 = _367 * 0.04211956635117531f;
  float _371 = _368 + 0.6252607107162476f;
  float _372 = _369 + 0.6252607107162476f;
  float _373 = _370 + 0.6252607107162476f;
  float4 _374 = t6.SampleLevel(s2_space2, float3(_371, _372, _373), 0.0f);
  bool _380 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_380 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _384 = cb2_017x * _374.x;
    float _385 = cb2_017x * _374.y;
    float _386 = cb2_017x * _374.z;
    float _388 = _384 + cb2_017y;
    float _389 = _385 + cb2_017y;
    float _390 = _386 + cb2_017y;
    float _391 = exp2(_388);
    float _392 = exp2(_389);
    float _393 = exp2(_390);
    float _394 = _391 + 1.0f;
    float _395 = _392 + 1.0f;
    float _396 = _393 + 1.0f;
    float _397 = 1.0f / _394;
    float _398 = 1.0f / _395;
    float _399 = 1.0f / _396;
    float _401 = cb2_017z * _397;
    float _402 = cb2_017z * _398;
    float _403 = cb2_017z * _399;
    float _405 = _401 + cb2_017w;
    float _406 = _402 + cb2_017w;
    float _407 = _403 + cb2_017w;
    _409 = _405;
    _410 = _406;
    _411 = _407;
  } else {
    _409 = _374.x;
    _410 = _374.y;
    _411 = _374.z;
  }
  float _412 = _409 * 23.0f;
  float _413 = _412 + -14.473931312561035f;
  float _414 = exp2(_413);
  float _415 = _410 * 23.0f;
  float _416 = _415 + -14.473931312561035f;
  float _417 = exp2(_416);
  float _418 = _411 * 23.0f;
  float _419 = _418 + -14.473931312561035f;
  float _420 = exp2(_419);
  float _421 = dot(float3(_414, _417, _420), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _426 = dot(float3(_414, _417, _420), float3(_414, _417, _420));
  float _427 = rsqrt(_426);
  float _428 = _427 * _414;
  float _429 = _427 * _417;
  float _430 = _427 * _420;
  float _431 = cb2_001x - _428;
  float _432 = cb2_001y - _429;
  float _433 = cb2_001z - _430;
  float _434 = dot(float3(_431, _432, _433), float3(_431, _432, _433));
  float _437 = cb2_002z * _434;
  float _439 = _437 + cb2_002w;
  float _440 = saturate(_439);
  float _442 = cb2_002x * _440;
  float _443 = _421 - _414;
  float _444 = _421 - _417;
  float _445 = _421 - _420;
  float _446 = _442 * _443;
  float _447 = _442 * _444;
  float _448 = _442 * _445;
  float _449 = _446 + _414;
  float _450 = _447 + _417;
  float _451 = _448 + _420;
  float _453 = cb2_002y * _440;
  float _454 = 0.10000000149011612f - _449;
  float _455 = 0.10000000149011612f - _450;
  float _456 = 0.10000000149011612f - _451;
  float _457 = _454 * _453;
  float _458 = _455 * _453;
  float _459 = _456 * _453;
  float _460 = _457 + _449;
  float _461 = _458 + _450;
  float _462 = _459 + _451;
  float _463 = saturate(_460);
  float _464 = saturate(_461);
  float _465 = saturate(_462);
  float _470 = cb2_004x * TEXCOORD0_centroid.x;
  float _471 = cb2_004y * TEXCOORD0_centroid.y;
  float _474 = _470 + cb2_004z;
  float _475 = _471 + cb2_004w;
  float4 _481 = t7.Sample(s2_space2, float2(_474, _475));
  float _486 = _481.x * cb2_003x;
  float _487 = _481.y * cb2_003y;
  float _488 = _481.z * cb2_003z;
  float _489 = _481.w * cb2_003w;
  float _492 = _489 + cb2_026y;
  float _493 = saturate(_492);
  bool _496 = ((uint)(cb2_069y) == 0);
  if (!_496) {
    float _498 = _486 * _344;
    float _499 = _487 * _344;
    float _500 = _488 * _344;
    _502 = _498;
    _503 = _499;
    _504 = _500;
  } else {
    _502 = _486;
    _503 = _487;
    _504 = _488;
  }
  bool _507 = ((uint)(cb2_028x) == 2);
  bool _508 = ((uint)(cb2_028x) == 3);
  int _509 = (uint)(cb2_028x) & -2;
  bool _510 = (_509 == 2);
  bool _511 = ((uint)(cb2_028x) == 6);
  bool _512 = _510 || _511;
  if (_512) {
    float _514 = _502 * _493;
    float _515 = _503 * _493;
    float _516 = _504 * _493;
    float _517 = _493 * _493;
    _549 = _514;
    _550 = _515;
    _551 = _516;
    _552 = _517;
  } else {
    bool _519 = ((uint)(cb2_028x) == 4);
    if (_519) {
      float _521 = _502 + -1.0f;
      float _522 = _503 + -1.0f;
      float _523 = _504 + -1.0f;
      float _524 = _493 + -1.0f;
      float _525 = _521 * _493;
      float _526 = _522 * _493;
      float _527 = _523 * _493;
      float _528 = _524 * _493;
      float _529 = _525 + 1.0f;
      float _530 = _526 + 1.0f;
      float _531 = _527 + 1.0f;
      float _532 = _528 + 1.0f;
      _549 = _529;
      _550 = _530;
      _551 = _531;
      _552 = _532;
    } else {
      bool _534 = ((uint)(cb2_028x) == 5);
      if (_534) {
        float _536 = _502 + -0.5f;
        float _537 = _503 + -0.5f;
        float _538 = _504 + -0.5f;
        float _539 = _493 + -0.5f;
        float _540 = _536 * _493;
        float _541 = _537 * _493;
        float _542 = _538 * _493;
        float _543 = _539 * _493;
        float _544 = _540 + 0.5f;
        float _545 = _541 + 0.5f;
        float _546 = _542 + 0.5f;
        float _547 = _543 + 0.5f;
        _549 = _544;
        _550 = _545;
        _551 = _546;
        _552 = _547;
      } else {
        _549 = _502;
        _550 = _503;
        _551 = _504;
        _552 = _493;
      }
    }
  }
  if (_507) {
    float _554 = _549 + _463;
    float _555 = _550 + _464;
    float _556 = _551 + _465;
    _601 = _554;
    _602 = _555;
    _603 = _556;
    _604 = cb2_025w;
  } else {
    if (_508) {
      float _559 = 1.0f - _549;
      float _560 = 1.0f - _550;
      float _561 = 1.0f - _551;
      float _562 = _559 * _463;
      float _563 = _560 * _464;
      float _564 = _561 * _465;
      float _565 = _562 + _549;
      float _566 = _563 + _550;
      float _567 = _564 + _551;
      _601 = _565;
      _602 = _566;
      _603 = _567;
      _604 = cb2_025w;
    } else {
      bool _569 = ((uint)(cb2_028x) == 4);
      if (_569) {
        float _571 = _549 * _463;
        float _572 = _550 * _464;
        float _573 = _551 * _465;
        _601 = _571;
        _602 = _572;
        _603 = _573;
        _604 = cb2_025w;
      } else {
        bool _575 = ((uint)(cb2_028x) == 5);
        if (_575) {
          float _577 = _463 * 2.0f;
          float _578 = _577 * _549;
          float _579 = _464 * 2.0f;
          float _580 = _579 * _550;
          float _581 = _465 * 2.0f;
          float _582 = _581 * _551;
          _601 = _578;
          _602 = _580;
          _603 = _582;
          _604 = cb2_025w;
        } else {
          if (_511) {
            float _585 = _463 - _549;
            float _586 = _464 - _550;
            float _587 = _465 - _551;
            _601 = _585;
            _602 = _586;
            _603 = _587;
            _604 = cb2_025w;
          } else {
            float _589 = _549 - _463;
            float _590 = _550 - _464;
            float _591 = _551 - _465;
            float _592 = _552 * _589;
            float _593 = _552 * _590;
            float _594 = _552 * _591;
            float _595 = _592 + _463;
            float _596 = _593 + _464;
            float _597 = _594 + _465;
            float _598 = 1.0f - _552;
            float _599 = _598 * cb2_025w;
            _601 = _595;
            _602 = _596;
            _603 = _597;
            _604 = _599;
          }
        }
      }
    }
  }
  float _610 = cb2_016x - _601;
  float _611 = cb2_016y - _602;
  float _612 = cb2_016z - _603;
  float _613 = _610 * cb2_016w;
  float _614 = _611 * cb2_016w;
  float _615 = _612 * cb2_016w;
  float _616 = _613 + _601;
  float _617 = _614 + _602;
  float _618 = _615 + _603;
  bool _621 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_621 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _625 = cb2_024x * _616;
    float _626 = cb2_024x * _617;
    float _627 = cb2_024x * _618;
    _629 = _625;
    _630 = _626;
    _631 = _627;
  } else {
    _629 = _616;
    _630 = _617;
    _631 = _618;
  }
  float _632 = _629 * 0.9708889722824097f;
  float _633 = mad(0.026962999254465103f, _630, _632);
  float _634 = mad(0.002148000057786703f, _631, _633);
  float _635 = _629 * 0.01088900025933981f;
  float _636 = mad(0.9869629740715027f, _630, _635);
  float _637 = mad(0.002148000057786703f, _631, _636);
  float _638 = mad(0.026962999254465103f, _630, _635);
  float _639 = mad(0.9621480107307434f, _631, _638);
  if (_621) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _644 = cb1_018y * 0.10000000149011612f;
        float _645 = log2(cb1_018z);
        float _646 = _645 + -13.287712097167969f;
        float _647 = _646 * 1.4929734468460083f;
        float _648 = _647 + 18.0f;
        float _649 = exp2(_648);
        float _650 = _649 * 0.18000000715255737f;
        float _651 = abs(_650);
        float _652 = log2(_651);
        float _653 = _652 * 1.5f;
        float _654 = exp2(_653);
        float _655 = _654 * _644;
        float _656 = _655 / cb1_018z;
        float _657 = _656 + -0.07636754959821701f;
        float _658 = _652 * 1.2750000953674316f;
        float _659 = exp2(_658);
        float _660 = _659 * 0.07636754959821701f;
        float _661 = cb1_018y * 0.011232397519052029f;
        float _662 = _661 * _654;
        float _663 = _662 / cb1_018z;
        float _664 = _660 - _663;
        float _665 = _659 + -0.11232396960258484f;
        float _666 = _665 * _644;
        float _667 = _666 / cb1_018z;
        float _668 = _667 * cb1_018z;
        float _669 = abs(_634);
        float _670 = abs(_637);
        float _671 = abs(_639);
        float _672 = log2(_669);
        float _673 = log2(_670);
        float _674 = log2(_671);
        float _675 = _672 * 1.5f;
        float _676 = _673 * 1.5f;
        float _677 = _674 * 1.5f;
        float _678 = exp2(_675);
        float _679 = exp2(_676);
        float _680 = exp2(_677);
        float _681 = _678 * _668;
        float _682 = _679 * _668;
        float _683 = _680 * _668;
        float _684 = _672 * 1.2750000953674316f;
        float _685 = _673 * 1.2750000953674316f;
        float _686 = _674 * 1.2750000953674316f;
        float _687 = exp2(_684);
        float _688 = exp2(_685);
        float _689 = exp2(_686);
        float _690 = _687 * _657;
        float _691 = _688 * _657;
        float _692 = _689 * _657;
        float _693 = _690 + _664;
        float _694 = _691 + _664;
        float _695 = _692 + _664;
        float _696 = _681 / _693;
        float _697 = _682 / _694;
        float _698 = _683 / _695;
        float _699 = _696 * 9.999999747378752e-05f;
        float _700 = _697 * 9.999999747378752e-05f;
        float _701 = _698 * 9.999999747378752e-05f;
        float _702 = 5000.0f / cb1_018y;
        float _703 = _699 * _702;
        float _704 = _700 * _702;
        float _705 = _701 * _702;
        _732 = _703;
        _733 = _704;
        _734 = _705;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_634, _637, _639));
      _732 = tonemapped.x, _733 = tonemapped.y, _734 = tonemapped.z;
    }
      } else {
        float _707 = _634 + 0.020616600289940834f;
        float _708 = _637 + 0.020616600289940834f;
        float _709 = _639 + 0.020616600289940834f;
        float _710 = _707 * _634;
        float _711 = _708 * _637;
        float _712 = _709 * _639;
        float _713 = _710 + -7.456949970219284e-05f;
        float _714 = _711 + -7.456949970219284e-05f;
        float _715 = _712 + -7.456949970219284e-05f;
        float _716 = _634 * 0.9837960004806519f;
        float _717 = _637 * 0.9837960004806519f;
        float _718 = _639 * 0.9837960004806519f;
        float _719 = _716 + 0.4336790144443512f;
        float _720 = _717 + 0.4336790144443512f;
        float _721 = _718 + 0.4336790144443512f;
        float _722 = _719 * _634;
        float _723 = _720 * _637;
        float _724 = _721 * _639;
        float _725 = _722 + 0.24617899954319f;
        float _726 = _723 + 0.24617899954319f;
        float _727 = _724 + 0.24617899954319f;
        float _728 = _713 / _725;
        float _729 = _714 / _726;
        float _730 = _715 / _727;
        _732 = _728;
        _733 = _729;
        _734 = _730;
      }
      float _735 = _732 * 1.6047500371932983f;
      float _736 = mad(-0.5310800075531006f, _733, _735);
      float _737 = mad(-0.07366999983787537f, _734, _736);
      float _738 = _732 * -0.10208000242710114f;
      float _739 = mad(1.1081299781799316f, _733, _738);
      float _740 = mad(-0.006049999967217445f, _734, _739);
      float _741 = _732 * -0.0032599999103695154f;
      float _742 = mad(-0.07275000214576721f, _733, _741);
      float _743 = mad(1.0760200023651123f, _734, _742);
      if (_621) {
        // float _745 = max(_737, 0.0f);
        // float _746 = max(_740, 0.0f);
        // float _747 = max(_743, 0.0f);
        // bool _748 = !(_745 >= 0.0030399328097701073f);
        // if (!_748) {
        //   float _750 = abs(_745);
        //   float _751 = log2(_750);
        //   float _752 = _751 * 0.4166666567325592f;
        //   float _753 = exp2(_752);
        //   float _754 = _753 * 1.0549999475479126f;
        //   float _755 = _754 + -0.054999999701976776f;
        //   _759 = _755;
        // } else {
        //   float _757 = _745 * 12.923210144042969f;
        //   _759 = _757;
        // }
        // bool _760 = !(_746 >= 0.0030399328097701073f);
        // if (!_760) {
        //   float _762 = abs(_746);
        //   float _763 = log2(_762);
        //   float _764 = _763 * 0.4166666567325592f;
        //   float _765 = exp2(_764);
        //   float _766 = _765 * 1.0549999475479126f;
        //   float _767 = _766 + -0.054999999701976776f;
        //   _771 = _767;
        // } else {
        //   float _769 = _746 * 12.923210144042969f;
        //   _771 = _769;
        // }
        // bool _772 = !(_747 >= 0.0030399328097701073f);
        // if (!_772) {
        //   float _774 = abs(_747);
        //   float _775 = log2(_774);
        //   float _776 = _775 * 0.4166666567325592f;
        //   float _777 = exp2(_776);
        //   float _778 = _777 * 1.0549999475479126f;
        //   float _779 = _778 + -0.054999999701976776f;
        //   _852 = _759;
        //   _853 = _771;
        //   _854 = _779;
        // } else {
        //   float _781 = _747 * 12.923210144042969f;
        //   _852 = _759;
        //   _853 = _771;
        //   _854 = _781;
        // }
        _852 = renodx::color::srgb::EncodeSafe(_737);
        _853 = renodx::color::srgb::EncodeSafe(_740);
        _854 = renodx::color::srgb::EncodeSafe(_743);

      } else {
        float _783 = saturate(_737);
        float _784 = saturate(_740);
        float _785 = saturate(_743);
        bool _786 = ((uint)(cb1_018w) == -2);
        if (!_786) {
          bool _788 = !(_783 >= 0.0030399328097701073f);
          if (!_788) {
            float _790 = abs(_783);
            float _791 = log2(_790);
            float _792 = _791 * 0.4166666567325592f;
            float _793 = exp2(_792);
            float _794 = _793 * 1.0549999475479126f;
            float _795 = _794 + -0.054999999701976776f;
            _799 = _795;
          } else {
            float _797 = _783 * 12.923210144042969f;
            _799 = _797;
          }
          bool _800 = !(_784 >= 0.0030399328097701073f);
          if (!_800) {
            float _802 = abs(_784);
            float _803 = log2(_802);
            float _804 = _803 * 0.4166666567325592f;
            float _805 = exp2(_804);
            float _806 = _805 * 1.0549999475479126f;
            float _807 = _806 + -0.054999999701976776f;
            _811 = _807;
          } else {
            float _809 = _784 * 12.923210144042969f;
            _811 = _809;
          }
          bool _812 = !(_785 >= 0.0030399328097701073f);
          if (!_812) {
            float _814 = abs(_785);
            float _815 = log2(_814);
            float _816 = _815 * 0.4166666567325592f;
            float _817 = exp2(_816);
            float _818 = _817 * 1.0549999475479126f;
            float _819 = _818 + -0.054999999701976776f;
            _823 = _799;
            _824 = _811;
            _825 = _819;
          } else {
            float _821 = _785 * 12.923210144042969f;
            _823 = _799;
            _824 = _811;
            _825 = _821;
          }
        } else {
          _823 = _783;
          _824 = _784;
          _825 = _785;
        }
        float _830 = abs(_823);
        float _831 = abs(_824);
        float _832 = abs(_825);
        float _833 = log2(_830);
        float _834 = log2(_831);
        float _835 = log2(_832);
        float _836 = _833 * cb2_000z;
        float _837 = _834 * cb2_000z;
        float _838 = _835 * cb2_000z;
        float _839 = exp2(_836);
        float _840 = exp2(_837);
        float _841 = exp2(_838);
        float _842 = _839 * cb2_000y;
        float _843 = _840 * cb2_000y;
        float _844 = _841 * cb2_000y;
        float _845 = _842 + cb2_000x;
        float _846 = _843 + cb2_000x;
        float _847 = _844 + cb2_000x;
        float _848 = saturate(_845);
        float _849 = saturate(_846);
        float _850 = saturate(_847);
        _852 = _848;
        _853 = _849;
        _854 = _850;
      }
      float _858 = cb2_023x * TEXCOORD0_centroid.x;
      float _859 = cb2_023y * TEXCOORD0_centroid.y;
      float _862 = _858 + cb2_023z;
      float _863 = _859 + cb2_023w;
      float4 _866 = t9.SampleLevel(s0_space2, float2(_862, _863), 0.0f);
      float _868 = _866.x + -0.5f;
      float _869 = _868 * cb2_022x;
      float _870 = _869 + 0.5f;
      float _871 = _870 * 2.0f;
      float _872 = _871 * _852;
      float _873 = _871 * _853;
      float _874 = _871 * _854;
      float _878 = float((uint)(cb2_019z));
      float _879 = float((uint)(cb2_019w));
      float _880 = _878 + SV_Position.x;
      float _881 = _879 + SV_Position.y;
      uint _882 = uint(_880);
      uint _883 = uint(_881);
      uint _886 = cb2_019x + -1u;
      uint _887 = cb2_019y + -1u;
      int _888 = _882 & _886;
      int _889 = _883 & _887;
      float4 _890 = t3.Load(int3(_888, _889, 0));
      float _894 = _890.x * 2.0f;
      float _895 = _890.y * 2.0f;
      float _896 = _890.z * 2.0f;
      float _897 = _894 + -1.0f;
      float _898 = _895 + -1.0f;
      float _899 = _896 + -1.0f;
      float _900 = _897 * _604;
      float _901 = _898 * _604;
      float _902 = _899 * _604;
      float _903 = _900 + _872;
      float _904 = _901 + _873;
      float _905 = _902 + _874;
      float _906 = dot(float3(_903, _904, _905), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _903;
      SV_Target.y = _904;
      SV_Target.z = _905;
      SV_Target.w = _906;
      SV_Target_1.x = _906;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
