#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _28 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _32 = _28.x * 6.283199787139893f;
  float _33 = cos(_32);
  float _34 = sin(_32);
  float _35 = _33 * _28.z;
  float _36 = _34 * _28.z;
  float _37 = _35 + TEXCOORD0_centroid.x;
  float _38 = _36 + TEXCOORD0_centroid.y;
  float _39 = _37 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _35;
  float _44 = _38 * 10.0f;
  float _45 = 10.0f - _44;
  float _46 = min(_44, _45);
  float _47 = saturate(_46);
  float _48 = _47 * _36;
  float _49 = _43 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t8.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _53 = _51.w * _43;
  float _54 = _51.w * _48;
  float _55 = 1.0f - _28.y;
  float _56 = saturate(_55);
  float _57 = _53 * _56;
  float _58 = _54 * _56;
  float _62 = cb2_015x * TEXCOORD0_centroid.x;
  float _63 = cb2_015y * TEXCOORD0_centroid.y;
  float _66 = _62 + cb2_015z;
  float _67 = _63 + cb2_015w;
  float4 _68 = t9.SampleLevel(s0_space2, float2(_66, _67), 0.0f);
  float _72 = saturate(_68.x);
  float _73 = saturate(_68.z);
  float _76 = cb2_026x * _73;
  float _77 = _72 * 6.283199787139893f;
  float _78 = cos(_77);
  float _79 = sin(_77);
  float _80 = _76 * _78;
  float _81 = _79 * _76;
  float _82 = 1.0f - _68.y;
  float _83 = saturate(_82);
  float _84 = _80 * _83;
  float _85 = _81 * _83;
  float _86 = _57 + TEXCOORD0_centroid.x;
  float _87 = _86 + _84;
  float _88 = _58 + TEXCOORD0_centroid.y;
  float _89 = _88 + _85;
  float4 _90 = t8.SampleLevel(s2_space2, float2(_87, _89), 0.0f);
  bool _92 = (_90.y > 0.0f);
  float _93 = select(_92, TEXCOORD0_centroid.x, _87);
  float _94 = select(_92, TEXCOORD0_centroid.y, _89);
  float4 _95 = t1.SampleLevel(s4_space2, float2(_93, _94), 0.0f);
  float _99 = max(_95.x, 0.0f);
  float _100 = max(_95.y, 0.0f);
  float _101 = max(_95.z, 0.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float _104 = min(_101, 65000.0f);
  float4 _105 = t4.SampleLevel(s2_space2, float2(_93, _94), 0.0f);
  float _110 = max(_105.x, 0.0f);
  float _111 = max(_105.y, 0.0f);
  float _112 = max(_105.z, 0.0f);
  float _113 = max(_105.w, 0.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _117 = min(_113, 5000.0f);
  float _120 = _26.x * cb0_028z;
  float _121 = _120 + cb0_028x;
  float _122 = cb2_027w / _121;
  float _123 = 1.0f - _122;
  float _124 = abs(_123);
  float _126 = cb2_027y * _124;
  float _128 = _126 - cb2_027z;
  float _129 = saturate(_128);
  float _130 = max(_129, _117);
  float _131 = saturate(_130);
  float4 _132 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _136 = _114 - _102;
  float _137 = _115 - _103;
  float _138 = _116 - _104;
  float _139 = _131 * _136;
  float _140 = _131 * _137;
  float _141 = _131 * _138;
  float _142 = _139 + _102;
  float _143 = _140 + _103;
  float _144 = _141 + _104;
  float _145 = dot(float3(_142, _143, _144), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _149 = t0[0].SExposureData_020;
  float _151 = t0[0].SExposureData_004;
  float _153 = cb2_018x * 0.5f;
  float _154 = _153 * cb2_018y;
  float _155 = _151.x - _154;
  float _156 = cb2_018y * cb2_018x;
  float _157 = 1.0f / _156;
  float _158 = _155 * _157;
  float _159 = _145 / _149.x;
  float _160 = _159 * 5464.01611328125f;
  float _161 = _160 + 9.99999993922529e-09f;
  float _162 = log2(_161);
  float _163 = _162 - _155;
  float _164 = _163 * _157;
  float _165 = saturate(_164);
  float2 _166 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _165), 0.0f);
  float _169 = max(_166.y, 1.0000000116860974e-07f);
  float _170 = _166.x / _169;
  float _171 = _170 + _158;
  float _172 = _171 / _157;
  float _173 = _172 - _151.x;
  float _174 = -0.0f - _173;
  float _176 = _174 - cb2_027x;
  float _177 = max(0.0f, _176);
  float _179 = cb2_026z * _177;
  float _180 = _173 - cb2_027x;
  float _181 = max(0.0f, _180);
  float _183 = cb2_026w * _181;
  bool _184 = (_173 < 0.0f);
  float _185 = select(_184, _179, _183);
  float _186 = exp2(_185);
  float _187 = _186 * _142;
  float _188 = _186 * _143;
  float _189 = _186 * _144;
  float _194 = cb2_024y * _132.x;
  float _195 = cb2_024z * _132.y;
  float _196 = cb2_024w * _132.z;
  float _197 = _194 + _187;
  float _198 = _195 + _188;
  float _199 = _196 + _189;
  float _204 = _197 * cb2_025x;
  float _205 = _198 * cb2_025y;
  float _206 = _199 * cb2_025z;
  float _207 = dot(float3(_204, _205, _206), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _208 = t0[0].SExposureData_012;
  float _210 = _207 * 5464.01611328125f;
  float _211 = _210 * _208.x;
  float _212 = _211 + 9.99999993922529e-09f;
  float _213 = log2(_212);
  float _214 = _213 + 16.929765701293945f;
  float _215 = _214 * 0.05734497308731079f;
  float _216 = saturate(_215);
  float _217 = _216 * _216;
  float _218 = _216 * 2.0f;
  float _219 = 3.0f - _218;
  float _220 = _217 * _219;
  float _221 = _205 * 0.8450999855995178f;
  float _222 = _206 * 0.14589999616146088f;
  float _223 = _221 + _222;
  float _224 = _223 * 2.4890189170837402f;
  float _225 = _223 * 0.3754962384700775f;
  float _226 = _223 * 2.811495304107666f;
  float _227 = _223 * 5.519708156585693f;
  float _228 = _207 - _224;
  float _229 = _220 * _228;
  float _230 = _229 + _224;
  float _231 = _220 * 0.5f;
  float _232 = _231 + 0.5f;
  float _233 = _232 * _228;
  float _234 = _233 + _224;
  float _235 = _204 - _225;
  float _236 = _205 - _226;
  float _237 = _206 - _227;
  float _238 = _232 * _235;
  float _239 = _232 * _236;
  float _240 = _232 * _237;
  float _241 = _238 + _225;
  float _242 = _239 + _226;
  float _243 = _240 + _227;
  float _244 = 1.0f / _234;
  float _245 = _230 * _244;
  float _246 = _245 * _241;
  float _247 = _245 * _242;
  float _248 = _245 * _243;
  float _252 = cb2_020x * TEXCOORD0_centroid.x;
  float _253 = cb2_020y * TEXCOORD0_centroid.y;
  float _256 = _252 + cb2_020z;
  float _257 = _253 + cb2_020w;
  float _260 = dot(float2(_256, _257), float2(_256, _257));
  float _261 = 1.0f - _260;
  float _262 = saturate(_261);
  float _263 = log2(_262);
  float _264 = _263 * cb2_021w;
  float _265 = exp2(_264);
  float _269 = _246 - cb2_021x;
  float _270 = _247 - cb2_021y;
  float _271 = _248 - cb2_021z;
  float _272 = _269 * _265;
  float _273 = _270 * _265;
  float _274 = _271 * _265;
  float _275 = _272 + cb2_021x;
  float _276 = _273 + cb2_021y;
  float _277 = _274 + cb2_021z;
  float _278 = t0[0].SExposureData_000;
  float _280 = max(_149.x, 0.0010000000474974513f);
  float _281 = 1.0f / _280;
  float _282 = _281 * _278.x;
  bool _285 = ((uint)(cb2_069y) == 0);
  float _291;
  float _292;
  float _293;
  float _347;
  float _348;
  float _349;
  float _440;
  float _441;
  float _442;
  float _487;
  float _488;
  float _489;
  float _490;
  float _539;
  float _540;
  float _541;
  float _542;
  float _567;
  float _568;
  float _569;
  float _719;
  float _756;
  float _757;
  float _758;
  float _787;
  float _788;
  float _789;
  float _870;
  float _871;
  float _872;
  float _878;
  float _879;
  float _880;
  float _894;
  float _895;
  float _896;
  float _921;
  float _933;
  float _961;
  float _973;
  float _985;
  float _986;
  float _987;
  float _1014;
  float _1015;
  float _1016;
  if (!_285) {
    float _287 = _282 * _275;
    float _288 = _282 * _276;
    float _289 = _282 * _277;
    _291 = _287;
    _292 = _288;
    _293 = _289;
  } else {
    _291 = _275;
    _292 = _276;
    _293 = _277;
  }
  float _294 = _291 * 0.6130970120429993f;
  float _295 = mad(0.33952298760414124f, _292, _294);
  float _296 = mad(0.04737899824976921f, _293, _295);
  float _297 = _291 * 0.07019399851560593f;
  float _298 = mad(0.9163540005683899f, _292, _297);
  float _299 = mad(0.013451999984681606f, _293, _298);
  float _300 = _291 * 0.02061600051820278f;
  float _301 = mad(0.10956999659538269f, _292, _300);
  float _302 = mad(0.8698149919509888f, _293, _301);
  float _303 = log2(_296);
  float _304 = log2(_299);
  float _305 = log2(_302);
  float _306 = _303 * 0.04211956635117531f;
  float _307 = _304 * 0.04211956635117531f;
  float _308 = _305 * 0.04211956635117531f;
  float _309 = _306 + 0.6252607107162476f;
  float _310 = _307 + 0.6252607107162476f;
  float _311 = _308 + 0.6252607107162476f;
  float4 _312 = t6.SampleLevel(s2_space2, float3(_309, _310, _311), 0.0f);
  bool _318 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_318 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _322 = cb2_017x * _312.x;
    float _323 = cb2_017x * _312.y;
    float _324 = cb2_017x * _312.z;
    float _326 = _322 + cb2_017y;
    float _327 = _323 + cb2_017y;
    float _328 = _324 + cb2_017y;
    float _329 = exp2(_326);
    float _330 = exp2(_327);
    float _331 = exp2(_328);
    float _332 = _329 + 1.0f;
    float _333 = _330 + 1.0f;
    float _334 = _331 + 1.0f;
    float _335 = 1.0f / _332;
    float _336 = 1.0f / _333;
    float _337 = 1.0f / _334;
    float _339 = cb2_017z * _335;
    float _340 = cb2_017z * _336;
    float _341 = cb2_017z * _337;
    float _343 = _339 + cb2_017w;
    float _344 = _340 + cb2_017w;
    float _345 = _341 + cb2_017w;
    _347 = _343;
    _348 = _344;
    _349 = _345;
  } else {
    _347 = _312.x;
    _348 = _312.y;
    _349 = _312.z;
  }
  float _350 = _347 * 23.0f;
  float _351 = _350 + -14.473931312561035f;
  float _352 = exp2(_351);
  float _353 = _348 * 23.0f;
  float _354 = _353 + -14.473931312561035f;
  float _355 = exp2(_354);
  float _356 = _349 * 23.0f;
  float _357 = _356 + -14.473931312561035f;
  float _358 = exp2(_357);
  float _359 = dot(float3(_352, _355, _358), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _364 = dot(float3(_352, _355, _358), float3(_352, _355, _358));
  float _365 = rsqrt(_364);
  float _366 = _365 * _352;
  float _367 = _365 * _355;
  float _368 = _365 * _358;
  float _369 = cb2_001x - _366;
  float _370 = cb2_001y - _367;
  float _371 = cb2_001z - _368;
  float _372 = dot(float3(_369, _370, _371), float3(_369, _370, _371));
  float _375 = cb2_002z * _372;
  float _377 = _375 + cb2_002w;
  float _378 = saturate(_377);
  float _380 = cb2_002x * _378;
  float _381 = _359 - _352;
  float _382 = _359 - _355;
  float _383 = _359 - _358;
  float _384 = _380 * _381;
  float _385 = _380 * _382;
  float _386 = _380 * _383;
  float _387 = _384 + _352;
  float _388 = _385 + _355;
  float _389 = _386 + _358;
  float _391 = cb2_002y * _378;
  float _392 = 0.10000000149011612f - _387;
  float _393 = 0.10000000149011612f - _388;
  float _394 = 0.10000000149011612f - _389;
  float _395 = _392 * _391;
  float _396 = _393 * _391;
  float _397 = _394 * _391;
  float _398 = _395 + _387;
  float _399 = _396 + _388;
  float _400 = _397 + _389;
  float _401 = saturate(_398);
  float _402 = saturate(_399);
  float _403 = saturate(_400);
  float _408 = cb2_004x * TEXCOORD0_centroid.x;
  float _409 = cb2_004y * TEXCOORD0_centroid.y;
  float _412 = _408 + cb2_004z;
  float _413 = _409 + cb2_004w;
  float4 _419 = t7.Sample(s2_space2, float2(_412, _413));
  float _424 = _419.x * cb2_003x;
  float _425 = _419.y * cb2_003y;
  float _426 = _419.z * cb2_003z;
  float _427 = _419.w * cb2_003w;
  float _430 = _427 + cb2_026y;
  float _431 = saturate(_430);
  bool _434 = ((uint)(cb2_069y) == 0);
  if (!_434) {
    float _436 = _424 * _282;
    float _437 = _425 * _282;
    float _438 = _426 * _282;
    _440 = _436;
    _441 = _437;
    _442 = _438;
  } else {
    _440 = _424;
    _441 = _425;
    _442 = _426;
  }
  bool _445 = ((uint)(cb2_028x) == 2);
  bool _446 = ((uint)(cb2_028x) == 3);
  int _447 = (uint)(cb2_028x) & -2;
  bool _448 = (_447 == 2);
  bool _449 = ((uint)(cb2_028x) == 6);
  bool _450 = _448 || _449;
  if (_450) {
    float _452 = _440 * _431;
    float _453 = _441 * _431;
    float _454 = _442 * _431;
    float _455 = _431 * _431;
    _487 = _452;
    _488 = _453;
    _489 = _454;
    _490 = _455;
  } else {
    bool _457 = ((uint)(cb2_028x) == 4);
    if (_457) {
      float _459 = _440 + -1.0f;
      float _460 = _441 + -1.0f;
      float _461 = _442 + -1.0f;
      float _462 = _431 + -1.0f;
      float _463 = _459 * _431;
      float _464 = _460 * _431;
      float _465 = _461 * _431;
      float _466 = _462 * _431;
      float _467 = _463 + 1.0f;
      float _468 = _464 + 1.0f;
      float _469 = _465 + 1.0f;
      float _470 = _466 + 1.0f;
      _487 = _467;
      _488 = _468;
      _489 = _469;
      _490 = _470;
    } else {
      bool _472 = ((uint)(cb2_028x) == 5);
      if (_472) {
        float _474 = _440 + -0.5f;
        float _475 = _441 + -0.5f;
        float _476 = _442 + -0.5f;
        float _477 = _431 + -0.5f;
        float _478 = _474 * _431;
        float _479 = _475 * _431;
        float _480 = _476 * _431;
        float _481 = _477 * _431;
        float _482 = _478 + 0.5f;
        float _483 = _479 + 0.5f;
        float _484 = _480 + 0.5f;
        float _485 = _481 + 0.5f;
        _487 = _482;
        _488 = _483;
        _489 = _484;
        _490 = _485;
      } else {
        _487 = _440;
        _488 = _441;
        _489 = _442;
        _490 = _431;
      }
    }
  }
  if (_445) {
    float _492 = _487 + _401;
    float _493 = _488 + _402;
    float _494 = _489 + _403;
    _539 = _492;
    _540 = _493;
    _541 = _494;
    _542 = cb2_025w;
  } else {
    if (_446) {
      float _497 = 1.0f - _487;
      float _498 = 1.0f - _488;
      float _499 = 1.0f - _489;
      float _500 = _497 * _401;
      float _501 = _498 * _402;
      float _502 = _499 * _403;
      float _503 = _500 + _487;
      float _504 = _501 + _488;
      float _505 = _502 + _489;
      _539 = _503;
      _540 = _504;
      _541 = _505;
      _542 = cb2_025w;
    } else {
      bool _507 = ((uint)(cb2_028x) == 4);
      if (_507) {
        float _509 = _487 * _401;
        float _510 = _488 * _402;
        float _511 = _489 * _403;
        _539 = _509;
        _540 = _510;
        _541 = _511;
        _542 = cb2_025w;
      } else {
        bool _513 = ((uint)(cb2_028x) == 5);
        if (_513) {
          float _515 = _401 * 2.0f;
          float _516 = _515 * _487;
          float _517 = _402 * 2.0f;
          float _518 = _517 * _488;
          float _519 = _403 * 2.0f;
          float _520 = _519 * _489;
          _539 = _516;
          _540 = _518;
          _541 = _520;
          _542 = cb2_025w;
        } else {
          if (_449) {
            float _523 = _401 - _487;
            float _524 = _402 - _488;
            float _525 = _403 - _489;
            _539 = _523;
            _540 = _524;
            _541 = _525;
            _542 = cb2_025w;
          } else {
            float _527 = _487 - _401;
            float _528 = _488 - _402;
            float _529 = _489 - _403;
            float _530 = _490 * _527;
            float _531 = _490 * _528;
            float _532 = _490 * _529;
            float _533 = _530 + _401;
            float _534 = _531 + _402;
            float _535 = _532 + _403;
            float _536 = 1.0f - _490;
            float _537 = _536 * cb2_025w;
            _539 = _533;
            _540 = _534;
            _541 = _535;
            _542 = _537;
          }
        }
      }
    }
  }
  float _548 = cb2_016x - _539;
  float _549 = cb2_016y - _540;
  float _550 = cb2_016z - _541;
  float _551 = _548 * cb2_016w;
  float _552 = _549 * cb2_016w;
  float _553 = _550 * cb2_016w;
  float _554 = _551 + _539;
  float _555 = _552 + _540;
  float _556 = _553 + _541;
  bool _559 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_559 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _563 = cb2_024x * _554;
    float _564 = cb2_024x * _555;
    float _565 = cb2_024x * _556;
    _567 = _563;
    _568 = _564;
    _569 = _565;
  } else {
    _567 = _554;
    _568 = _555;
    _569 = _556;
  }
  float _572 = _567 * 0.9708889722824097f;
  float _573 = mad(0.026962999254465103f, _568, _572);
  float _574 = mad(0.002148000057786703f, _569, _573);
  float _575 = _567 * 0.01088900025933981f;
  float _576 = mad(0.9869629740715027f, _568, _575);
  float _577 = mad(0.002148000057786703f, _569, _576);
  float _578 = mad(0.026962999254465103f, _568, _575);
  float _579 = mad(0.9621480107307434f, _569, _578);
  float _580 = max(_574, 0.0f);
  float _581 = max(_577, 0.0f);
  float _582 = max(_579, 0.0f);
  float _583 = min(_580, cb2_095y);
  float _584 = min(_581, cb2_095y);
  float _585 = min(_582, cb2_095y);
  bool _588 = ((uint)(cb2_095x) == 0);
  bool _591 = ((uint)(cb2_094w) == 0);
  bool _593 = ((uint)(cb2_094z) == 0);
  bool _595 = ((uint)(cb2_094y) != 0);
  bool _597 = ((uint)(cb2_094x) == 0);
  bool _599 = ((uint)(cb2_069z) != 0);
  float _646 = asfloat((uint)(cb2_075y));
  float _647 = asfloat((uint)(cb2_075z));
  float _648 = asfloat((uint)(cb2_075w));
  float _649 = asfloat((uint)(cb2_074z));
  float _650 = asfloat((uint)(cb2_074w));
  float _651 = asfloat((uint)(cb2_075x));
  float _652 = asfloat((uint)(cb2_073w));
  float _653 = asfloat((uint)(cb2_074x));
  float _654 = asfloat((uint)(cb2_074y));
  float _655 = asfloat((uint)(cb2_077x));
  float _656 = asfloat((uint)(cb2_077y));
  float _657 = asfloat((uint)(cb2_079x));
  float _658 = asfloat((uint)(cb2_079y));
  float _659 = asfloat((uint)(cb2_079z));
  float _660 = asfloat((uint)(cb2_078y));
  float _661 = asfloat((uint)(cb2_078z));
  float _662 = asfloat((uint)(cb2_078w));
  float _663 = asfloat((uint)(cb2_077z));
  float _664 = asfloat((uint)(cb2_077w));
  float _665 = asfloat((uint)(cb2_078x));
  float _666 = asfloat((uint)(cb2_072y));
  float _667 = asfloat((uint)(cb2_072z));
  float _668 = asfloat((uint)(cb2_072w));
  float _669 = asfloat((uint)(cb2_071x));
  float _670 = asfloat((uint)(cb2_071y));
  float _671 = asfloat((uint)(cb2_076x));
  float _672 = asfloat((uint)(cb2_070w));
  float _673 = asfloat((uint)(cb2_070x));
  float _674 = asfloat((uint)(cb2_070y));
  float _675 = asfloat((uint)(cb2_070z));
  float _676 = asfloat((uint)(cb2_073x));
  float _677 = asfloat((uint)(cb2_073y));
  float _678 = asfloat((uint)(cb2_073z));
  float _679 = asfloat((uint)(cb2_071z));
  float _680 = asfloat((uint)(cb2_071w));
  float _681 = asfloat((uint)(cb2_072x));
  float _682 = max(_584, _585);
  float _683 = max(_583, _682);
  float _684 = 1.0f / _683;
  float _685 = _684 * _583;
  float _686 = _684 * _584;
  float _687 = _684 * _585;
  float _688 = abs(_685);
  float _689 = log2(_688);
  float _690 = _689 * _673;
  float _691 = exp2(_690);
  float _692 = abs(_686);
  float _693 = log2(_692);
  float _694 = _693 * _674;
  float _695 = exp2(_694);
  float _696 = abs(_687);
  float _697 = log2(_696);
  float _698 = _697 * _675;
  float _699 = exp2(_698);
  if (_595) {
    float _702 = asfloat((uint)(cb2_076w));
    float _704 = asfloat((uint)(cb2_076z));
    float _706 = asfloat((uint)(cb2_076y));
    float _707 = _704 * _584;
    float _708 = _706 * _583;
    float _709 = _702 * _585;
    float _710 = _708 + _709;
    float _711 = _710 + _707;
    _719 = _711;
  } else {
    float _713 = _680 * _584;
    float _714 = _679 * _583;
    float _715 = _681 * _585;
    float _716 = _713 + _714;
    float _717 = _716 + _715;
    _719 = _717;
  }
  float _720 = abs(_719);
  float _721 = log2(_720);
  float _722 = _721 * _672;
  float _723 = exp2(_722);
  float _724 = log2(_723);
  float _725 = _724 * _671;
  float _726 = exp2(_725);
  float _727 = select(_599, _726, _723);
  float _728 = _727 * _669;
  float _729 = _728 + _670;
  float _730 = 1.0f / _729;
  float _731 = _730 * _723;
  if (_595) {
    if (!_597) {
      float _734 = _691 * _663;
      float _735 = _695 * _664;
      float _736 = _699 * _665;
      float _737 = _735 + _734;
      float _738 = _737 + _736;
      float _739 = _695 * _661;
      float _740 = _691 * _660;
      float _741 = _699 * _662;
      float _742 = _739 + _740;
      float _743 = _742 + _741;
      float _744 = _699 * _659;
      float _745 = _695 * _658;
      float _746 = _691 * _657;
      float _747 = _745 + _746;
      float _748 = _747 + _744;
      float _749 = max(_743, _748);
      float _750 = max(_738, _749);
      float _751 = 1.0f / _750;
      float _752 = _751 * _738;
      float _753 = _751 * _743;
      float _754 = _751 * _748;
      _756 = _752;
      _757 = _753;
      _758 = _754;
    } else {
      _756 = _691;
      _757 = _695;
      _758 = _699;
    }
    float _759 = _756 * _656;
    float _760 = exp2(_759);
    float _761 = _760 * _655;
    float _762 = saturate(_761);
    float _763 = _756 * _655;
    float _764 = _756 - _763;
    float _765 = saturate(_764);
    float _766 = max(_655, _765);
    float _767 = min(_766, _762);
    float _768 = _757 * _656;
    float _769 = exp2(_768);
    float _770 = _769 * _655;
    float _771 = saturate(_770);
    float _772 = _757 * _655;
    float _773 = _757 - _772;
    float _774 = saturate(_773);
    float _775 = max(_655, _774);
    float _776 = min(_775, _771);
    float _777 = _758 * _656;
    float _778 = exp2(_777);
    float _779 = _778 * _655;
    float _780 = saturate(_779);
    float _781 = _758 * _655;
    float _782 = _758 - _781;
    float _783 = saturate(_782);
    float _784 = max(_655, _783);
    float _785 = min(_784, _780);
    _787 = _767;
    _788 = _776;
    _789 = _785;
  } else {
    _787 = _691;
    _788 = _695;
    _789 = _699;
  }
  float _790 = _787 * _679;
  float _791 = _788 * _680;
  float _792 = _791 + _790;
  float _793 = _789 * _681;
  float _794 = _792 + _793;
  float _795 = 1.0f / _794;
  float _796 = _795 * _731;
  float _797 = saturate(_796);
  float _798 = _797 * _787;
  float _799 = saturate(_798);
  float _800 = _797 * _788;
  float _801 = saturate(_800);
  float _802 = _797 * _789;
  float _803 = saturate(_802);
  float _804 = _799 * _666;
  float _805 = _666 - _804;
  float _806 = _801 * _667;
  float _807 = _667 - _806;
  float _808 = _803 * _668;
  float _809 = _668 - _808;
  float _810 = _803 * _681;
  float _811 = _799 * _679;
  float _812 = _801 * _680;
  float _813 = _731 - _811;
  float _814 = _813 - _812;
  float _815 = _814 - _810;
  float _816 = saturate(_815);
  float _817 = _807 * _680;
  float _818 = _805 * _679;
  float _819 = _809 * _681;
  float _820 = _817 + _818;
  float _821 = _820 + _819;
  float _822 = 1.0f / _821;
  float _823 = _822 * _816;
  float _824 = _823 * _805;
  float _825 = _824 + _799;
  float _826 = saturate(_825);
  float _827 = _823 * _807;
  float _828 = _827 + _801;
  float _829 = saturate(_828);
  float _830 = _823 * _809;
  float _831 = _830 + _803;
  float _832 = saturate(_831);
  float _833 = _832 * _681;
  float _834 = _826 * _679;
  float _835 = _829 * _680;
  float _836 = _731 - _834;
  float _837 = _836 - _835;
  float _838 = _837 - _833;
  float _839 = saturate(_838);
  float _840 = _839 * _676;
  float _841 = _840 + _826;
  float _842 = saturate(_841);
  float _843 = _839 * _677;
  float _844 = _843 + _829;
  float _845 = saturate(_844);
  float _846 = _839 * _678;
  float _847 = _846 + _832;
  float _848 = saturate(_847);
  if (!_593) {
    float _850 = _842 * _652;
    float _851 = _845 * _653;
    float _852 = _848 * _654;
    float _853 = _851 + _850;
    float _854 = _853 + _852;
    float _855 = _845 * _650;
    float _856 = _842 * _649;
    float _857 = _848 * _651;
    float _858 = _855 + _856;
    float _859 = _858 + _857;
    float _860 = _848 * _648;
    float _861 = _845 * _647;
    float _862 = _842 * _646;
    float _863 = _861 + _862;
    float _864 = _863 + _860;
    if (!_591) {
      float _866 = saturate(_854);
      float _867 = saturate(_859);
      float _868 = saturate(_864);
      _870 = _868;
      _871 = _867;
      _872 = _866;
    } else {
      _870 = _864;
      _871 = _859;
      _872 = _854;
    }
  } else {
    _870 = _848;
    _871 = _845;
    _872 = _842;
  }
  if (!_588) {
    float _874 = _872 * _652;
    float _875 = _871 * _652;
    float _876 = _870 * _652;
    _878 = _876;
    _879 = _875;
    _880 = _874;
  } else {
    _878 = _870;
    _879 = _871;
    _880 = _872;
  }
  if (_559) {
    float _884 = cb1_018z * 9.999999747378752e-05f;
    float _885 = _884 * _880;
    float _886 = _884 * _879;
    float _887 = _884 * _878;
    float _889 = 5000.0f / cb1_018y;
    float _890 = _885 * _889;
    float _891 = _886 * _889;
    float _892 = _887 * _889;
    _894 = _890;
    _895 = _891;
    _896 = _892;
  } else {
    _894 = _880;
    _895 = _879;
    _896 = _878;
  }
  float _897 = _894 * 1.6047500371932983f;
  float _898 = mad(-0.5310800075531006f, _895, _897);
  float _899 = mad(-0.07366999983787537f, _896, _898);
  float _900 = _894 * -0.10208000242710114f;
  float _901 = mad(1.1081299781799316f, _895, _900);
  float _902 = mad(-0.006049999967217445f, _896, _901);
  float _903 = _894 * -0.0032599999103695154f;
  float _904 = mad(-0.07275000214576721f, _895, _903);
  float _905 = mad(1.0760200023651123f, _896, _904);
  if (_559) {
    // float _907 = max(_899, 0.0f);
    // float _908 = max(_902, 0.0f);
    // float _909 = max(_905, 0.0f);
    // bool _910 = !(_907 >= 0.0030399328097701073f);
    // if (!_910) {
    //   float _912 = abs(_907);
    //   float _913 = log2(_912);
    //   float _914 = _913 * 0.4166666567325592f;
    //   float _915 = exp2(_914);
    //   float _916 = _915 * 1.0549999475479126f;
    //   float _917 = _916 + -0.054999999701976776f;
    //   _921 = _917;
    // } else {
    //   float _919 = _907 * 12.923210144042969f;
    //   _921 = _919;
    // }
    // bool _922 = !(_908 >= 0.0030399328097701073f);
    // if (!_922) {
    //   float _924 = abs(_908);
    //   float _925 = log2(_924);
    //   float _926 = _925 * 0.4166666567325592f;
    //   float _927 = exp2(_926);
    //   float _928 = _927 * 1.0549999475479126f;
    //   float _929 = _928 + -0.054999999701976776f;
    //   _933 = _929;
    // } else {
    //   float _931 = _908 * 12.923210144042969f;
    //   _933 = _931;
    // }
    // bool _934 = !(_909 >= 0.0030399328097701073f);
    // if (!_934) {
    //   float _936 = abs(_909);
    //   float _937 = log2(_936);
    //   float _938 = _937 * 0.4166666567325592f;
    //   float _939 = exp2(_938);
    //   float _940 = _939 * 1.0549999475479126f;
    //   float _941 = _940 + -0.054999999701976776f;
    //   _1014 = _921;
    //   _1015 = _933;
    //   _1016 = _941;
    // } else {
    //   float _943 = _909 * 12.923210144042969f;
    //   _1014 = _921;
    //   _1015 = _933;
    //   _1016 = _943;
    // }
    _1014 = renodx::color::srgb::EncodeSafe(_899);
    _1015 = renodx::color::srgb::EncodeSafe(_902);
    _1016 = renodx::color::srgb::EncodeSafe(_905);

  } else {
    float _945 = saturate(_899);
    float _946 = saturate(_902);
    float _947 = saturate(_905);
    bool _948 = ((uint)(cb1_018w) == -2);
    if (!_948) {
      bool _950 = !(_945 >= 0.0030399328097701073f);
      if (!_950) {
        float _952 = abs(_945);
        float _953 = log2(_952);
        float _954 = _953 * 0.4166666567325592f;
        float _955 = exp2(_954);
        float _956 = _955 * 1.0549999475479126f;
        float _957 = _956 + -0.054999999701976776f;
        _961 = _957;
      } else {
        float _959 = _945 * 12.923210144042969f;
        _961 = _959;
      }
      bool _962 = !(_946 >= 0.0030399328097701073f);
      if (!_962) {
        float _964 = abs(_946);
        float _965 = log2(_964);
        float _966 = _965 * 0.4166666567325592f;
        float _967 = exp2(_966);
        float _968 = _967 * 1.0549999475479126f;
        float _969 = _968 + -0.054999999701976776f;
        _973 = _969;
      } else {
        float _971 = _946 * 12.923210144042969f;
        _973 = _971;
      }
      bool _974 = !(_947 >= 0.0030399328097701073f);
      if (!_974) {
        float _976 = abs(_947);
        float _977 = log2(_976);
        float _978 = _977 * 0.4166666567325592f;
        float _979 = exp2(_978);
        float _980 = _979 * 1.0549999475479126f;
        float _981 = _980 + -0.054999999701976776f;
        _985 = _961;
        _986 = _973;
        _987 = _981;
      } else {
        float _983 = _947 * 12.923210144042969f;
        _985 = _961;
        _986 = _973;
        _987 = _983;
      }
    } else {
      _985 = _945;
      _986 = _946;
      _987 = _947;
    }
    float _992 = abs(_985);
    float _993 = abs(_986);
    float _994 = abs(_987);
    float _995 = log2(_992);
    float _996 = log2(_993);
    float _997 = log2(_994);
    float _998 = _995 * cb2_000z;
    float _999 = _996 * cb2_000z;
    float _1000 = _997 * cb2_000z;
    float _1001 = exp2(_998);
    float _1002 = exp2(_999);
    float _1003 = exp2(_1000);
    float _1004 = _1001 * cb2_000y;
    float _1005 = _1002 * cb2_000y;
    float _1006 = _1003 * cb2_000y;
    float _1007 = _1004 + cb2_000x;
    float _1008 = _1005 + cb2_000x;
    float _1009 = _1006 + cb2_000x;
    float _1010 = saturate(_1007);
    float _1011 = saturate(_1008);
    float _1012 = saturate(_1009);
    _1014 = _1010;
    _1015 = _1011;
    _1016 = _1012;
  }
  float _1020 = cb2_023x * TEXCOORD0_centroid.x;
  float _1021 = cb2_023y * TEXCOORD0_centroid.y;
  float _1024 = _1020 + cb2_023z;
  float _1025 = _1021 + cb2_023w;
  float4 _1028 = t11.SampleLevel(s0_space2, float2(_1024, _1025), 0.0f);
  float _1030 = _1028.x + -0.5f;
  float _1031 = _1030 * cb2_022x;
  float _1032 = _1031 + 0.5f;
  float _1033 = _1032 * 2.0f;
  float _1034 = _1033 * _1014;
  float _1035 = _1033 * _1015;
  float _1036 = _1033 * _1016;
  float _1040 = float((uint)(cb2_019z));
  float _1041 = float((uint)(cb2_019w));
  float _1042 = _1040 + SV_Position.x;
  float _1043 = _1041 + SV_Position.y;
  uint _1044 = uint(_1042);
  uint _1045 = uint(_1043);
  uint _1048 = cb2_019x + -1u;
  uint _1049 = cb2_019y + -1u;
  int _1050 = _1044 & _1048;
  int _1051 = _1045 & _1049;
  float4 _1052 = t3.Load(int3(_1050, _1051, 0));
  float _1056 = _1052.x * 2.0f;
  float _1057 = _1052.y * 2.0f;
  float _1058 = _1052.z * 2.0f;
  float _1059 = _1056 + -1.0f;
  float _1060 = _1057 + -1.0f;
  float _1061 = _1058 + -1.0f;
  float _1062 = _1059 * _542;
  float _1063 = _1060 * _542;
  float _1064 = _1061 * _542;
  float _1065 = _1062 + _1034;
  float _1066 = _1063 + _1035;
  float _1067 = _1064 + _1036;
  float _1068 = dot(float3(_1065, _1066, _1067), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1065;
  SV_Target.y = _1066;
  SV_Target.z = _1067;
  SV_Target.w = _1068;
  SV_Target_1.x = _1068;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
