#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = _26.x * 6.283199787139893f;
  float _31 = cos(_30);
  float _32 = sin(_30);
  float _33 = _31 * _26.z;
  float _34 = _32 * _26.z;
  float _35 = _33 + TEXCOORD0_centroid.x;
  float _36 = _34 + TEXCOORD0_centroid.y;
  float _37 = _35 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _33;
  float _42 = _36 * 10.0f;
  float _43 = 10.0f - _42;
  float _44 = min(_42, _43);
  float _45 = saturate(_44);
  float _46 = _45 * _34;
  float _47 = _41 + TEXCOORD0_centroid.x;
  float _48 = _46 + TEXCOORD0_centroid.y;
  float4 _49 = t7.SampleLevel(s2_space2, float2(_47, _48), 0.0f);
  float _51 = _49.w * _41;
  float _52 = _49.w * _46;
  float _53 = 1.0f - _26.y;
  float _54 = saturate(_53);
  float _55 = _51 * _54;
  float _56 = _52 * _54;
  float _57 = _55 + TEXCOORD0_centroid.x;
  float _58 = _56 + TEXCOORD0_centroid.y;
  float4 _59 = t7.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  bool _61 = (_59.y > 0.0f);
  float _62 = select(_61, TEXCOORD0_centroid.x, _57);
  float _63 = select(_61, TEXCOORD0_centroid.y, _58);
  float4 _64 = t1.SampleLevel(s4_space2, float2(_62, _63), 0.0f);
  float _68 = max(_64.x, 0.0f);
  float _69 = max(_64.y, 0.0f);
  float _70 = max(_64.z, 0.0f);
  float _71 = min(_68, 65000.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float4 _74 = t4.SampleLevel(s2_space2, float2(_62, _63), 0.0f);
  float _79 = max(_74.x, 0.0f);
  float _80 = max(_74.y, 0.0f);
  float _81 = max(_74.z, 0.0f);
  float _82 = max(_74.w, 0.0f);
  float _83 = min(_79, 5000.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _89 = _24.x * cb0_028z;
  float _90 = _89 + cb0_028x;
  float _91 = cb2_027w / _90;
  float _92 = 1.0f - _91;
  float _93 = abs(_92);
  float _95 = cb2_027y * _93;
  float _97 = _95 - cb2_027z;
  float _98 = saturate(_97);
  float _99 = max(_98, _86);
  float _100 = saturate(_99);
  float4 _101 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _105 = _83 - _71;
  float _106 = _84 - _72;
  float _107 = _85 - _73;
  float _108 = _100 * _105;
  float _109 = _100 * _106;
  float _110 = _100 * _107;
  float _111 = _108 + _71;
  float _112 = _109 + _72;
  float _113 = _110 + _73;
  float _114 = dot(float3(_111, _112, _113), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _118 = t0[0].SExposureData_020;
  float _120 = t0[0].SExposureData_004;
  float _122 = cb2_018x * 0.5f;
  float _123 = _122 * cb2_018y;
  float _124 = _120.x - _123;
  float _125 = cb2_018y * cb2_018x;
  float _126 = 1.0f / _125;
  float _127 = _124 * _126;
  float _128 = _114 / _118.x;
  float _129 = _128 * 5464.01611328125f;
  float _130 = _129 + 9.99999993922529e-09f;
  float _131 = log2(_130);
  float _132 = _131 - _124;
  float _133 = _132 * _126;
  float _134 = saturate(_133);
  float2 _135 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _134), 0.0f);
  float _138 = max(_135.y, 1.0000000116860974e-07f);
  float _139 = _135.x / _138;
  float _140 = _139 + _127;
  float _141 = _140 / _126;
  float _142 = _141 - _120.x;
  float _143 = -0.0f - _142;
  float _145 = _143 - cb2_027x;
  float _146 = max(0.0f, _145);
  float _149 = cb2_026z * _146;
  float _150 = _142 - cb2_027x;
  float _151 = max(0.0f, _150);
  float _153 = cb2_026w * _151;
  bool _154 = (_142 < 0.0f);
  float _155 = select(_154, _149, _153);
  float _156 = exp2(_155);
  float _157 = _156 * _111;
  float _158 = _156 * _112;
  float _159 = _156 * _113;
  float _164 = cb2_024y * _101.x;
  float _165 = cb2_024z * _101.y;
  float _166 = cb2_024w * _101.z;
  float _167 = _164 + _157;
  float _168 = _165 + _158;
  float _169 = _166 + _159;
  float _174 = _167 * cb2_025x;
  float _175 = _168 * cb2_025y;
  float _176 = _169 * cb2_025z;
  float _177 = dot(float3(_174, _175, _176), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _178 = t0[0].SExposureData_012;
  float _180 = _177 * 5464.01611328125f;
  float _181 = _180 * _178.x;
  float _182 = _181 + 9.99999993922529e-09f;
  float _183 = log2(_182);
  float _184 = _183 + 16.929765701293945f;
  float _185 = _184 * 0.05734497308731079f;
  float _186 = saturate(_185);
  float _187 = _186 * _186;
  float _188 = _186 * 2.0f;
  float _189 = 3.0f - _188;
  float _190 = _187 * _189;
  float _191 = _175 * 0.8450999855995178f;
  float _192 = _176 * 0.14589999616146088f;
  float _193 = _191 + _192;
  float _194 = _193 * 2.4890189170837402f;
  float _195 = _193 * 0.3754962384700775f;
  float _196 = _193 * 2.811495304107666f;
  float _197 = _193 * 5.519708156585693f;
  float _198 = _177 - _194;
  float _199 = _190 * _198;
  float _200 = _199 + _194;
  float _201 = _190 * 0.5f;
  float _202 = _201 + 0.5f;
  float _203 = _202 * _198;
  float _204 = _203 + _194;
  float _205 = _174 - _195;
  float _206 = _175 - _196;
  float _207 = _176 - _197;
  float _208 = _202 * _205;
  float _209 = _202 * _206;
  float _210 = _202 * _207;
  float _211 = _208 + _195;
  float _212 = _209 + _196;
  float _213 = _210 + _197;
  float _214 = 1.0f / _204;
  float _215 = _200 * _214;
  float _216 = _215 * _211;
  float _217 = _215 * _212;
  float _218 = _215 * _213;
  float _222 = cb2_020x * TEXCOORD0_centroid.x;
  float _223 = cb2_020y * TEXCOORD0_centroid.y;
  float _226 = _222 + cb2_020z;
  float _227 = _223 + cb2_020w;
  float _230 = dot(float2(_226, _227), float2(_226, _227));
  float _231 = 1.0f - _230;
  float _232 = saturate(_231);
  float _233 = log2(_232);
  float _234 = _233 * cb2_021w;
  float _235 = exp2(_234);
  float _239 = _216 - cb2_021x;
  float _240 = _217 - cb2_021y;
  float _241 = _218 - cb2_021z;
  float _242 = _239 * _235;
  float _243 = _240 * _235;
  float _244 = _241 * _235;
  float _245 = _242 + cb2_021x;
  float _246 = _243 + cb2_021y;
  float _247 = _244 + cb2_021z;
  float _248 = t0[0].SExposureData_000;
  float _250 = max(_118.x, 0.0010000000474974513f);
  float _251 = 1.0f / _250;
  float _252 = _251 * _248.x;
  bool _255 = ((uint)(cb2_069y) == 0);
  float _261;
  float _262;
  float _263;
  float _317;
  float _318;
  float _319;
  float _395;
  float _396;
  float _397;
  float _498;
  float _499;
  float _500;
  float _525;
  float _537;
  float _565;
  float _577;
  float _589;
  float _590;
  float _591;
  float _618;
  float _619;
  float _620;
  if (!_255) {
    float _257 = _252 * _245;
    float _258 = _252 * _246;
    float _259 = _252 * _247;
    _261 = _257;
    _262 = _258;
    _263 = _259;
  } else {
    _261 = _245;
    _262 = _246;
    _263 = _247;
  }
  float _264 = _261 * 0.6130970120429993f;
  float _265 = mad(0.33952298760414124f, _262, _264);
  float _266 = mad(0.04737899824976921f, _263, _265);
  float _267 = _261 * 0.07019399851560593f;
  float _268 = mad(0.9163540005683899f, _262, _267);
  float _269 = mad(0.013451999984681606f, _263, _268);
  float _270 = _261 * 0.02061600051820278f;
  float _271 = mad(0.10956999659538269f, _262, _270);
  float _272 = mad(0.8698149919509888f, _263, _271);
  float _273 = log2(_266);
  float _274 = log2(_269);
  float _275 = log2(_272);
  float _276 = _273 * 0.04211956635117531f;
  float _277 = _274 * 0.04211956635117531f;
  float _278 = _275 * 0.04211956635117531f;
  float _279 = _276 + 0.6252607107162476f;
  float _280 = _277 + 0.6252607107162476f;
  float _281 = _278 + 0.6252607107162476f;
  float4 _282 = t6.SampleLevel(s2_space2, float3(_279, _280, _281), 0.0f);
  bool _288 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_288 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _292 = cb2_017x * _282.x;
    float _293 = cb2_017x * _282.y;
    float _294 = cb2_017x * _282.z;
    float _296 = _292 + cb2_017y;
    float _297 = _293 + cb2_017y;
    float _298 = _294 + cb2_017y;
    float _299 = exp2(_296);
    float _300 = exp2(_297);
    float _301 = exp2(_298);
    float _302 = _299 + 1.0f;
    float _303 = _300 + 1.0f;
    float _304 = _301 + 1.0f;
    float _305 = 1.0f / _302;
    float _306 = 1.0f / _303;
    float _307 = 1.0f / _304;
    float _309 = cb2_017z * _305;
    float _310 = cb2_017z * _306;
    float _311 = cb2_017z * _307;
    float _313 = _309 + cb2_017w;
    float _314 = _310 + cb2_017w;
    float _315 = _311 + cb2_017w;
    _317 = _313;
    _318 = _314;
    _319 = _315;
  } else {
    _317 = _282.x;
    _318 = _282.y;
    _319 = _282.z;
  }
  float _320 = _317 * 23.0f;
  float _321 = _320 + -14.473931312561035f;
  float _322 = exp2(_321);
  float _323 = _318 * 23.0f;
  float _324 = _323 + -14.473931312561035f;
  float _325 = exp2(_324);
  float _326 = _319 * 23.0f;
  float _327 = _326 + -14.473931312561035f;
  float _328 = exp2(_327);
  float _329 = dot(float3(_322, _325, _328), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _334 = dot(float3(_322, _325, _328), float3(_322, _325, _328));
  float _335 = rsqrt(_334);
  float _336 = _335 * _322;
  float _337 = _335 * _325;
  float _338 = _335 * _328;
  float _339 = cb2_001x - _336;
  float _340 = cb2_001y - _337;
  float _341 = cb2_001z - _338;
  float _342 = dot(float3(_339, _340, _341), float3(_339, _340, _341));
  float _345 = cb2_002z * _342;
  float _347 = _345 + cb2_002w;
  float _348 = saturate(_347);
  float _350 = cb2_002x * _348;
  float _351 = _329 - _322;
  float _352 = _329 - _325;
  float _353 = _329 - _328;
  float _354 = _350 * _351;
  float _355 = _350 * _352;
  float _356 = _350 * _353;
  float _357 = _354 + _322;
  float _358 = _355 + _325;
  float _359 = _356 + _328;
  float _361 = cb2_002y * _348;
  float _362 = 0.10000000149011612f - _357;
  float _363 = 0.10000000149011612f - _358;
  float _364 = 0.10000000149011612f - _359;
  float _365 = _362 * _361;
  float _366 = _363 * _361;
  float _367 = _364 * _361;
  float _368 = _365 + _357;
  float _369 = _366 + _358;
  float _370 = _367 + _359;
  float _371 = saturate(_368);
  float _372 = saturate(_369);
  float _373 = saturate(_370);
  float _380 = cb2_016x - _371;
  float _381 = cb2_016y - _372;
  float _382 = cb2_016z - _373;
  float _383 = _380 * cb2_016w;
  float _384 = _381 * cb2_016w;
  float _385 = _382 * cb2_016w;
  float _386 = _383 + _371;
  float _387 = _384 + _372;
  float _388 = _385 + _373;
  if (_288 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _391 = cb2_024x * _386;
    float _392 = cb2_024x * _387;
    float _393 = cb2_024x * _388;
    _395 = _391;
    _396 = _392;
    _397 = _393;
  } else {
    _395 = _386;
    _396 = _387;
    _397 = _388;
  }
  float _398 = _395 * 0.9708889722824097f;
  float _399 = mad(0.026962999254465103f, _396, _398);
  float _400 = mad(0.002148000057786703f, _397, _399);
  float _401 = _395 * 0.01088900025933981f;
  float _402 = mad(0.9869629740715027f, _396, _401);
  float _403 = mad(0.002148000057786703f, _397, _402);
  float _404 = mad(0.026962999254465103f, _396, _401);
  float _405 = mad(0.9621480107307434f, _397, _404);
  if (_288) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _410 = cb1_018y * 0.10000000149011612f;
        float _411 = log2(cb1_018z);
        float _412 = _411 + -13.287712097167969f;
        float _413 = _412 * 1.4929734468460083f;
        float _414 = _413 + 18.0f;
        float _415 = exp2(_414);
        float _416 = _415 * 0.18000000715255737f;
        float _417 = abs(_416);
        float _418 = log2(_417);
        float _419 = _418 * 1.5f;
        float _420 = exp2(_419);
        float _421 = _420 * _410;
        float _422 = _421 / cb1_018z;
        float _423 = _422 + -0.07636754959821701f;
        float _424 = _418 * 1.2750000953674316f;
        float _425 = exp2(_424);
        float _426 = _425 * 0.07636754959821701f;
        float _427 = cb1_018y * 0.011232397519052029f;
        float _428 = _427 * _420;
        float _429 = _428 / cb1_018z;
        float _430 = _426 - _429;
        float _431 = _425 + -0.11232396960258484f;
        float _432 = _431 * _410;
        float _433 = _432 / cb1_018z;
        float _434 = _433 * cb1_018z;
        float _435 = abs(_400);
        float _436 = abs(_403);
        float _437 = abs(_405);
        float _438 = log2(_435);
        float _439 = log2(_436);
        float _440 = log2(_437);
        float _441 = _438 * 1.5f;
        float _442 = _439 * 1.5f;
        float _443 = _440 * 1.5f;
        float _444 = exp2(_441);
        float _445 = exp2(_442);
        float _446 = exp2(_443);
        float _447 = _444 * _434;
        float _448 = _445 * _434;
        float _449 = _446 * _434;
        float _450 = _438 * 1.2750000953674316f;
        float _451 = _439 * 1.2750000953674316f;
        float _452 = _440 * 1.2750000953674316f;
        float _453 = exp2(_450);
        float _454 = exp2(_451);
        float _455 = exp2(_452);
        float _456 = _453 * _423;
        float _457 = _454 * _423;
        float _458 = _455 * _423;
        float _459 = _456 + _430;
        float _460 = _457 + _430;
        float _461 = _458 + _430;
        float _462 = _447 / _459;
        float _463 = _448 / _460;
        float _464 = _449 / _461;
        float _465 = _462 * 9.999999747378752e-05f;
        float _466 = _463 * 9.999999747378752e-05f;
        float _467 = _464 * 9.999999747378752e-05f;
        float _468 = 5000.0f / cb1_018y;
        float _469 = _465 * _468;
        float _470 = _466 * _468;
        float _471 = _467 * _468;
        _498 = _469;
        _499 = _470;
        _500 = _471;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_400, _403, _405));
      _498 = tonemapped.x, _499 = tonemapped.y, _500 = tonemapped.z;
    }
      } else {
        float _473 = _400 + 0.020616600289940834f;
        float _474 = _403 + 0.020616600289940834f;
        float _475 = _405 + 0.020616600289940834f;
        float _476 = _473 * _400;
        float _477 = _474 * _403;
        float _478 = _475 * _405;
        float _479 = _476 + -7.456949970219284e-05f;
        float _480 = _477 + -7.456949970219284e-05f;
        float _481 = _478 + -7.456949970219284e-05f;
        float _482 = _400 * 0.9837960004806519f;
        float _483 = _403 * 0.9837960004806519f;
        float _484 = _405 * 0.9837960004806519f;
        float _485 = _482 + 0.4336790144443512f;
        float _486 = _483 + 0.4336790144443512f;
        float _487 = _484 + 0.4336790144443512f;
        float _488 = _485 * _400;
        float _489 = _486 * _403;
        float _490 = _487 * _405;
        float _491 = _488 + 0.24617899954319f;
        float _492 = _489 + 0.24617899954319f;
        float _493 = _490 + 0.24617899954319f;
        float _494 = _479 / _491;
        float _495 = _480 / _492;
        float _496 = _481 / _493;
        _498 = _494;
        _499 = _495;
        _500 = _496;
      }
      float _501 = _498 * 1.6047500371932983f;
      float _502 = mad(-0.5310800075531006f, _499, _501);
      float _503 = mad(-0.07366999983787537f, _500, _502);
      float _504 = _498 * -0.10208000242710114f;
      float _505 = mad(1.1081299781799316f, _499, _504);
      float _506 = mad(-0.006049999967217445f, _500, _505);
      float _507 = _498 * -0.0032599999103695154f;
      float _508 = mad(-0.07275000214576721f, _499, _507);
      float _509 = mad(1.0760200023651123f, _500, _508);
      if (_288) {
        // float _511 = max(_503, 0.0f);
        // float _512 = max(_506, 0.0f);
        // float _513 = max(_509, 0.0f);
        // bool _514 = !(_511 >= 0.0030399328097701073f);
        // if (!_514) {
        //   float _516 = abs(_511);
        //   float _517 = log2(_516);
        //   float _518 = _517 * 0.4166666567325592f;
        //   float _519 = exp2(_518);
        //   float _520 = _519 * 1.0549999475479126f;
        //   float _521 = _520 + -0.054999999701976776f;
        //   _525 = _521;
        // } else {
        //   float _523 = _511 * 12.923210144042969f;
        //   _525 = _523;
        // }
        // bool _526 = !(_512 >= 0.0030399328097701073f);
        // if (!_526) {
        //   float _528 = abs(_512);
        //   float _529 = log2(_528);
        //   float _530 = _529 * 0.4166666567325592f;
        //   float _531 = exp2(_530);
        //   float _532 = _531 * 1.0549999475479126f;
        //   float _533 = _532 + -0.054999999701976776f;
        //   _537 = _533;
        // } else {
        //   float _535 = _512 * 12.923210144042969f;
        //   _537 = _535;
        // }
        // bool _538 = !(_513 >= 0.0030399328097701073f);
        // if (!_538) {
        //   float _540 = abs(_513);
        //   float _541 = log2(_540);
        //   float _542 = _541 * 0.4166666567325592f;
        //   float _543 = exp2(_542);
        //   float _544 = _543 * 1.0549999475479126f;
        //   float _545 = _544 + -0.054999999701976776f;
        //   _618 = _525;
        //   _619 = _537;
        //   _620 = _545;
        // } else {
        //   float _547 = _513 * 12.923210144042969f;
        //   _618 = _525;
        //   _619 = _537;
        //   _620 = _547;
        // }
        _618 = renodx::color::srgb::EncodeSafe(_503);
        _619 = renodx::color::srgb::EncodeSafe(_506);
        _620 = renodx::color::srgb::EncodeSafe(_509);

      } else {
        float _549 = saturate(_503);
        float _550 = saturate(_506);
        float _551 = saturate(_509);
        bool _552 = ((uint)(cb1_018w) == -2);
        if (!_552) {
          bool _554 = !(_549 >= 0.0030399328097701073f);
          if (!_554) {
            float _556 = abs(_549);
            float _557 = log2(_556);
            float _558 = _557 * 0.4166666567325592f;
            float _559 = exp2(_558);
            float _560 = _559 * 1.0549999475479126f;
            float _561 = _560 + -0.054999999701976776f;
            _565 = _561;
          } else {
            float _563 = _549 * 12.923210144042969f;
            _565 = _563;
          }
          bool _566 = !(_550 >= 0.0030399328097701073f);
          if (!_566) {
            float _568 = abs(_550);
            float _569 = log2(_568);
            float _570 = _569 * 0.4166666567325592f;
            float _571 = exp2(_570);
            float _572 = _571 * 1.0549999475479126f;
            float _573 = _572 + -0.054999999701976776f;
            _577 = _573;
          } else {
            float _575 = _550 * 12.923210144042969f;
            _577 = _575;
          }
          bool _578 = !(_551 >= 0.0030399328097701073f);
          if (!_578) {
            float _580 = abs(_551);
            float _581 = log2(_580);
            float _582 = _581 * 0.4166666567325592f;
            float _583 = exp2(_582);
            float _584 = _583 * 1.0549999475479126f;
            float _585 = _584 + -0.054999999701976776f;
            _589 = _565;
            _590 = _577;
            _591 = _585;
          } else {
            float _587 = _551 * 12.923210144042969f;
            _589 = _565;
            _590 = _577;
            _591 = _587;
          }
        } else {
          _589 = _549;
          _590 = _550;
          _591 = _551;
        }
        float _596 = abs(_589);
        float _597 = abs(_590);
        float _598 = abs(_591);
        float _599 = log2(_596);
        float _600 = log2(_597);
        float _601 = log2(_598);
        float _602 = _599 * cb2_000z;
        float _603 = _600 * cb2_000z;
        float _604 = _601 * cb2_000z;
        float _605 = exp2(_602);
        float _606 = exp2(_603);
        float _607 = exp2(_604);
        float _608 = _605 * cb2_000y;
        float _609 = _606 * cb2_000y;
        float _610 = _607 * cb2_000y;
        float _611 = _608 + cb2_000x;
        float _612 = _609 + cb2_000x;
        float _613 = _610 + cb2_000x;
        float _614 = saturate(_611);
        float _615 = saturate(_612);
        float _616 = saturate(_613);
        _618 = _614;
        _619 = _615;
        _620 = _616;
      }
      float _624 = cb2_023x * TEXCOORD0_centroid.x;
      float _625 = cb2_023y * TEXCOORD0_centroid.y;
      float _628 = _624 + cb2_023z;
      float _629 = _625 + cb2_023w;
      float4 _632 = t9.SampleLevel(s0_space2, float2(_628, _629), 0.0f);
      float _634 = _632.x + -0.5f;
      float _635 = _634 * cb2_022x;
      float _636 = _635 + 0.5f;
      float _637 = _636 * 2.0f;
      float _638 = _637 * _618;
      float _639 = _637 * _619;
      float _640 = _637 * _620;
      float _644 = float((uint)(cb2_019z));
      float _645 = float((uint)(cb2_019w));
      float _646 = _644 + SV_Position.x;
      float _647 = _645 + SV_Position.y;
      uint _648 = uint(_646);
      uint _649 = uint(_647);
      uint _652 = cb2_019x + -1u;
      uint _653 = cb2_019y + -1u;
      int _654 = _648 & _652;
      int _655 = _649 & _653;
      float4 _656 = t3.Load(int3(_654, _655, 0));
      float _660 = _656.x * 2.0f;
      float _661 = _656.y * 2.0f;
      float _662 = _656.z * 2.0f;
      float _663 = _660 + -1.0f;
      float _664 = _661 + -1.0f;
      float _665 = _662 + -1.0f;
      float _666 = _663 * cb2_025w;
      float _667 = _664 * cb2_025w;
      float _668 = _665 * cb2_025w;
      float _669 = _666 + _638;
      float _670 = _667 + _639;
      float _671 = _668 + _640;
      float _672 = dot(float3(_669, _670, _671), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _669;
      SV_Target.y = _670;
      SV_Target.z = _671;
      SV_Target.w = _672;
      SV_Target_1.x = _672;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
