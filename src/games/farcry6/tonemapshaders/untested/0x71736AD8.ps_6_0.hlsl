#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _28 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _32 = _28.x * 6.283199787139893f;
  float _33 = cos(_32);
  float _34 = sin(_32);
  float _35 = _33 * _28.z;
  float _36 = _34 * _28.z;
  float _37 = _35 + TEXCOORD0_centroid.x;
  float _38 = _36 + TEXCOORD0_centroid.y;
  float _39 = _37 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _35;
  float _44 = _38 * 10.0f;
  float _45 = 10.0f - _44;
  float _46 = min(_44, _45);
  float _47 = saturate(_46);
  float _48 = _47 * _36;
  float _49 = _43 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t8.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _53 = _51.w * _43;
  float _54 = _51.w * _48;
  float _55 = 1.0f - _28.y;
  float _56 = saturate(_55);
  float _57 = _53 * _56;
  float _58 = _54 * _56;
  float _62 = cb2_015x * TEXCOORD0_centroid.x;
  float _63 = cb2_015y * TEXCOORD0_centroid.y;
  float _66 = _62 + cb2_015z;
  float _67 = _63 + cb2_015w;
  float4 _68 = t9.SampleLevel(s0_space2, float2(_66, _67), 0.0f);
  float _72 = saturate(_68.x);
  float _73 = saturate(_68.z);
  float _76 = cb2_026x * _73;
  float _77 = _72 * 6.283199787139893f;
  float _78 = cos(_77);
  float _79 = sin(_77);
  float _80 = _76 * _78;
  float _81 = _79 * _76;
  float _82 = 1.0f - _68.y;
  float _83 = saturate(_82);
  float _84 = _80 * _83;
  float _85 = _81 * _83;
  float _86 = _57 + TEXCOORD0_centroid.x;
  float _87 = _86 + _84;
  float _88 = _58 + TEXCOORD0_centroid.y;
  float _89 = _88 + _85;
  float4 _90 = t8.SampleLevel(s2_space2, float2(_87, _89), 0.0f);
  bool _92 = (_90.y > 0.0f);
  float _93 = select(_92, TEXCOORD0_centroid.x, _87);
  float _94 = select(_92, TEXCOORD0_centroid.y, _89);
  float4 _95 = t1.SampleLevel(s4_space2, float2(_93, _94), 0.0f);
  float _99 = max(_95.x, 0.0f);
  float _100 = max(_95.y, 0.0f);
  float _101 = max(_95.z, 0.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float _104 = min(_101, 65000.0f);
  float4 _105 = t4.SampleLevel(s2_space2, float2(_93, _94), 0.0f);
  float _110 = max(_105.x, 0.0f);
  float _111 = max(_105.y, 0.0f);
  float _112 = max(_105.z, 0.0f);
  float _113 = max(_105.w, 0.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _117 = min(_113, 5000.0f);
  float _120 = _26.x * cb0_028z;
  float _121 = _120 + cb0_028x;
  float _122 = cb2_027w / _121;
  float _123 = 1.0f - _122;
  float _124 = abs(_123);
  float _126 = cb2_027y * _124;
  float _128 = _126 - cb2_027z;
  float _129 = saturate(_128);
  float _130 = max(_129, _117);
  float _131 = saturate(_130);
  float _135 = cb2_013x * _93;
  float _136 = cb2_013y * _94;
  float _139 = _135 + cb2_013z;
  float _140 = _136 + cb2_013w;
  float _143 = dot(float2(_139, _140), float2(_139, _140));
  float _144 = abs(_143);
  float _145 = log2(_144);
  float _146 = _145 * cb2_014x;
  float _147 = exp2(_146);
  float _148 = saturate(_147);
  float _152 = cb2_011x * _93;
  float _153 = cb2_011y * _94;
  float _156 = _152 + cb2_011z;
  float _157 = _153 + cb2_011w;
  float _158 = _156 * _148;
  float _159 = _157 * _148;
  float _160 = _158 + _93;
  float _161 = _159 + _94;
  float _165 = cb2_012x * _93;
  float _166 = cb2_012y * _94;
  float _169 = _165 + cb2_012z;
  float _170 = _166 + cb2_012w;
  float _171 = _169 * _148;
  float _172 = _170 * _148;
  float _173 = _171 + _93;
  float _174 = _172 + _94;
  float4 _175 = t1.SampleLevel(s2_space2, float2(_160, _161), 0.0f);
  float _179 = max(_175.x, 0.0f);
  float _180 = max(_175.y, 0.0f);
  float _181 = max(_175.z, 0.0f);
  float _182 = min(_179, 65000.0f);
  float _183 = min(_180, 65000.0f);
  float _184 = min(_181, 65000.0f);
  float4 _185 = t1.SampleLevel(s2_space2, float2(_173, _174), 0.0f);
  float _189 = max(_185.x, 0.0f);
  float _190 = max(_185.y, 0.0f);
  float _191 = max(_185.z, 0.0f);
  float _192 = min(_189, 65000.0f);
  float _193 = min(_190, 65000.0f);
  float _194 = min(_191, 65000.0f);
  float4 _195 = t4.SampleLevel(s2_space2, float2(_160, _161), 0.0f);
  float _199 = max(_195.x, 0.0f);
  float _200 = max(_195.y, 0.0f);
  float _201 = max(_195.z, 0.0f);
  float _202 = min(_199, 5000.0f);
  float _203 = min(_200, 5000.0f);
  float _204 = min(_201, 5000.0f);
  float4 _205 = t4.SampleLevel(s2_space2, float2(_173, _174), 0.0f);
  float _209 = max(_205.x, 0.0f);
  float _210 = max(_205.y, 0.0f);
  float _211 = max(_205.z, 0.0f);
  float _212 = min(_209, 5000.0f);
  float _213 = min(_210, 5000.0f);
  float _214 = min(_211, 5000.0f);
  float _219 = 1.0f - cb2_009x;
  float _220 = 1.0f - cb2_009y;
  float _221 = 1.0f - cb2_009z;
  float _226 = _219 - cb2_010x;
  float _227 = _220 - cb2_010y;
  float _228 = _221 - cb2_010z;
  float _229 = saturate(_226);
  float _230 = saturate(_227);
  float _231 = saturate(_228);
  float _232 = _229 * _102;
  float _233 = _230 * _103;
  float _234 = _231 * _104;
  float _235 = cb2_009x * _182;
  float _236 = cb2_009y * _183;
  float _237 = cb2_009z * _184;
  float _238 = _235 + _232;
  float _239 = _236 + _233;
  float _240 = _237 + _234;
  float _241 = cb2_010x * _192;
  float _242 = cb2_010y * _193;
  float _243 = cb2_010z * _194;
  float _244 = _238 + _241;
  float _245 = _239 + _242;
  float _246 = _240 + _243;
  float _247 = _229 * _114;
  float _248 = _230 * _115;
  float _249 = _231 * _116;
  float _250 = cb2_009x * _202;
  float _251 = cb2_009y * _203;
  float _252 = cb2_009z * _204;
  float _253 = cb2_010x * _212;
  float _254 = cb2_010y * _213;
  float _255 = cb2_010z * _214;
  float4 _256 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _260 = _247 - _244;
  float _261 = _260 + _250;
  float _262 = _261 + _253;
  float _263 = _248 - _245;
  float _264 = _263 + _251;
  float _265 = _264 + _254;
  float _266 = _249 - _246;
  float _267 = _266 + _252;
  float _268 = _267 + _255;
  float _269 = _262 * _131;
  float _270 = _265 * _131;
  float _271 = _268 * _131;
  float _272 = _269 + _244;
  float _273 = _270 + _245;
  float _274 = _271 + _246;
  float _275 = dot(float3(_272, _273, _274), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _279 = t0[0].SExposureData_020;
  float _281 = t0[0].SExposureData_004;
  float _283 = cb2_018x * 0.5f;
  float _284 = _283 * cb2_018y;
  float _285 = _281.x - _284;
  float _286 = cb2_018y * cb2_018x;
  float _287 = 1.0f / _286;
  float _288 = _285 * _287;
  float _289 = _275 / _279.x;
  float _290 = _289 * 5464.01611328125f;
  float _291 = _290 + 9.99999993922529e-09f;
  float _292 = log2(_291);
  float _293 = _292 - _285;
  float _294 = _293 * _287;
  float _295 = saturate(_294);
  float2 _296 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _295), 0.0f);
  float _299 = max(_296.y, 1.0000000116860974e-07f);
  float _300 = _296.x / _299;
  float _301 = _300 + _288;
  float _302 = _301 / _287;
  float _303 = _302 - _281.x;
  float _304 = -0.0f - _303;
  float _306 = _304 - cb2_027x;
  float _307 = max(0.0f, _306);
  float _309 = cb2_026z * _307;
  float _310 = _303 - cb2_027x;
  float _311 = max(0.0f, _310);
  float _313 = cb2_026w * _311;
  bool _314 = (_303 < 0.0f);
  float _315 = select(_314, _309, _313);
  float _316 = exp2(_315);
  float _317 = _316 * _272;
  float _318 = _316 * _273;
  float _319 = _316 * _274;
  float _324 = cb2_024y * _256.x;
  float _325 = cb2_024z * _256.y;
  float _326 = cb2_024w * _256.z;
  float _327 = _324 + _317;
  float _328 = _325 + _318;
  float _329 = _326 + _319;
  float _334 = _327 * cb2_025x;
  float _335 = _328 * cb2_025y;
  float _336 = _329 * cb2_025z;
  float _337 = dot(float3(_334, _335, _336), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _338 = t0[0].SExposureData_012;
  float _340 = _337 * 5464.01611328125f;
  float _341 = _340 * _338.x;
  float _342 = _341 + 9.99999993922529e-09f;
  float _343 = log2(_342);
  float _344 = _343 + 16.929765701293945f;
  float _345 = _344 * 0.05734497308731079f;
  float _346 = saturate(_345);
  float _347 = _346 * _346;
  float _348 = _346 * 2.0f;
  float _349 = 3.0f - _348;
  float _350 = _347 * _349;
  float _351 = _335 * 0.8450999855995178f;
  float _352 = _336 * 0.14589999616146088f;
  float _353 = _351 + _352;
  float _354 = _353 * 2.4890189170837402f;
  float _355 = _353 * 0.3754962384700775f;
  float _356 = _353 * 2.811495304107666f;
  float _357 = _353 * 5.519708156585693f;
  float _358 = _337 - _354;
  float _359 = _350 * _358;
  float _360 = _359 + _354;
  float _361 = _350 * 0.5f;
  float _362 = _361 + 0.5f;
  float _363 = _362 * _358;
  float _364 = _363 + _354;
  float _365 = _334 - _355;
  float _366 = _335 - _356;
  float _367 = _336 - _357;
  float _368 = _362 * _365;
  float _369 = _362 * _366;
  float _370 = _362 * _367;
  float _371 = _368 + _355;
  float _372 = _369 + _356;
  float _373 = _370 + _357;
  float _374 = 1.0f / _364;
  float _375 = _360 * _374;
  float _376 = _375 * _371;
  float _377 = _375 * _372;
  float _378 = _375 * _373;
  float _382 = cb2_020x * TEXCOORD0_centroid.x;
  float _383 = cb2_020y * TEXCOORD0_centroid.y;
  float _386 = _382 + cb2_020z;
  float _387 = _383 + cb2_020w;
  float _390 = dot(float2(_386, _387), float2(_386, _387));
  float _391 = 1.0f - _390;
  float _392 = saturate(_391);
  float _393 = log2(_392);
  float _394 = _393 * cb2_021w;
  float _395 = exp2(_394);
  float _399 = _376 - cb2_021x;
  float _400 = _377 - cb2_021y;
  float _401 = _378 - cb2_021z;
  float _402 = _399 * _395;
  float _403 = _400 * _395;
  float _404 = _401 * _395;
  float _405 = _402 + cb2_021x;
  float _406 = _403 + cb2_021y;
  float _407 = _404 + cb2_021z;
  float _408 = t0[0].SExposureData_000;
  float _410 = max(_279.x, 0.0010000000474974513f);
  float _411 = 1.0f / _410;
  float _412 = _411 * _408.x;
  bool _415 = ((uint)(cb2_069y) == 0);
  float _421;
  float _422;
  float _423;
  float _477;
  float _478;
  float _479;
  float _525;
  float _526;
  float _527;
  float _572;
  float _573;
  float _574;
  float _575;
  float _624;
  float _625;
  float _626;
  float _627;
  float _652;
  float _653;
  float _654;
  float _804;
  float _841;
  float _842;
  float _843;
  float _872;
  float _873;
  float _874;
  float _955;
  float _956;
  float _957;
  float _963;
  float _964;
  float _965;
  float _979;
  float _980;
  float _981;
  float _1006;
  float _1018;
  float _1046;
  float _1058;
  float _1070;
  float _1071;
  float _1072;
  float _1099;
  float _1100;
  float _1101;
  if (!_415) {
    float _417 = _412 * _405;
    float _418 = _412 * _406;
    float _419 = _412 * _407;
    _421 = _417;
    _422 = _418;
    _423 = _419;
  } else {
    _421 = _405;
    _422 = _406;
    _423 = _407;
  }
  float _424 = _421 * 0.6130970120429993f;
  float _425 = mad(0.33952298760414124f, _422, _424);
  float _426 = mad(0.04737899824976921f, _423, _425);
  float _427 = _421 * 0.07019399851560593f;
  float _428 = mad(0.9163540005683899f, _422, _427);
  float _429 = mad(0.013451999984681606f, _423, _428);
  float _430 = _421 * 0.02061600051820278f;
  float _431 = mad(0.10956999659538269f, _422, _430);
  float _432 = mad(0.8698149919509888f, _423, _431);
  float _433 = log2(_426);
  float _434 = log2(_429);
  float _435 = log2(_432);
  float _436 = _433 * 0.04211956635117531f;
  float _437 = _434 * 0.04211956635117531f;
  float _438 = _435 * 0.04211956635117531f;
  float _439 = _436 + 0.6252607107162476f;
  float _440 = _437 + 0.6252607107162476f;
  float _441 = _438 + 0.6252607107162476f;
  float4 _442 = t6.SampleLevel(s2_space2, float3(_439, _440, _441), 0.0f);
  bool _448 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_448 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _452 = cb2_017x * _442.x;
    float _453 = cb2_017x * _442.y;
    float _454 = cb2_017x * _442.z;
    float _456 = _452 + cb2_017y;
    float _457 = _453 + cb2_017y;
    float _458 = _454 + cb2_017y;
    float _459 = exp2(_456);
    float _460 = exp2(_457);
    float _461 = exp2(_458);
    float _462 = _459 + 1.0f;
    float _463 = _460 + 1.0f;
    float _464 = _461 + 1.0f;
    float _465 = 1.0f / _462;
    float _466 = 1.0f / _463;
    float _467 = 1.0f / _464;
    float _469 = cb2_017z * _465;
    float _470 = cb2_017z * _466;
    float _471 = cb2_017z * _467;
    float _473 = _469 + cb2_017w;
    float _474 = _470 + cb2_017w;
    float _475 = _471 + cb2_017w;
    _477 = _473;
    _478 = _474;
    _479 = _475;
  } else {
    _477 = _442.x;
    _478 = _442.y;
    _479 = _442.z;
  }
  float _480 = _477 * 23.0f;
  float _481 = _480 + -14.473931312561035f;
  float _482 = exp2(_481);
  float _483 = _478 * 23.0f;
  float _484 = _483 + -14.473931312561035f;
  float _485 = exp2(_484);
  float _486 = _479 * 23.0f;
  float _487 = _486 + -14.473931312561035f;
  float _488 = exp2(_487);
  float _493 = cb2_004x * TEXCOORD0_centroid.x;
  float _494 = cb2_004y * TEXCOORD0_centroid.y;
  float _497 = _493 + cb2_004z;
  float _498 = _494 + cb2_004w;
  float4 _504 = t7.Sample(s2_space2, float2(_497, _498));
  float _509 = _504.x * cb2_003x;
  float _510 = _504.y * cb2_003y;
  float _511 = _504.z * cb2_003z;
  float _512 = _504.w * cb2_003w;
  float _515 = _512 + cb2_026y;
  float _516 = saturate(_515);
  bool _519 = ((uint)(cb2_069y) == 0);
  if (!_519) {
    float _521 = _509 * _412;
    float _522 = _510 * _412;
    float _523 = _511 * _412;
    _525 = _521;
    _526 = _522;
    _527 = _523;
  } else {
    _525 = _509;
    _526 = _510;
    _527 = _511;
  }
  bool _530 = ((uint)(cb2_028x) == 2);
  bool _531 = ((uint)(cb2_028x) == 3);
  int _532 = (uint)(cb2_028x) & -2;
  bool _533 = (_532 == 2);
  bool _534 = ((uint)(cb2_028x) == 6);
  bool _535 = _533 || _534;
  if (_535) {
    float _537 = _525 * _516;
    float _538 = _526 * _516;
    float _539 = _527 * _516;
    float _540 = _516 * _516;
    _572 = _537;
    _573 = _538;
    _574 = _539;
    _575 = _540;
  } else {
    bool _542 = ((uint)(cb2_028x) == 4);
    if (_542) {
      float _544 = _525 + -1.0f;
      float _545 = _526 + -1.0f;
      float _546 = _527 + -1.0f;
      float _547 = _516 + -1.0f;
      float _548 = _544 * _516;
      float _549 = _545 * _516;
      float _550 = _546 * _516;
      float _551 = _547 * _516;
      float _552 = _548 + 1.0f;
      float _553 = _549 + 1.0f;
      float _554 = _550 + 1.0f;
      float _555 = _551 + 1.0f;
      _572 = _552;
      _573 = _553;
      _574 = _554;
      _575 = _555;
    } else {
      bool _557 = ((uint)(cb2_028x) == 5);
      if (_557) {
        float _559 = _525 + -0.5f;
        float _560 = _526 + -0.5f;
        float _561 = _527 + -0.5f;
        float _562 = _516 + -0.5f;
        float _563 = _559 * _516;
        float _564 = _560 * _516;
        float _565 = _561 * _516;
        float _566 = _562 * _516;
        float _567 = _563 + 0.5f;
        float _568 = _564 + 0.5f;
        float _569 = _565 + 0.5f;
        float _570 = _566 + 0.5f;
        _572 = _567;
        _573 = _568;
        _574 = _569;
        _575 = _570;
      } else {
        _572 = _525;
        _573 = _526;
        _574 = _527;
        _575 = _516;
      }
    }
  }
  if (_530) {
    float _577 = _572 + _482;
    float _578 = _573 + _485;
    float _579 = _574 + _488;
    _624 = _577;
    _625 = _578;
    _626 = _579;
    _627 = cb2_025w;
  } else {
    if (_531) {
      float _582 = 1.0f - _572;
      float _583 = 1.0f - _573;
      float _584 = 1.0f - _574;
      float _585 = _582 * _482;
      float _586 = _583 * _485;
      float _587 = _584 * _488;
      float _588 = _585 + _572;
      float _589 = _586 + _573;
      float _590 = _587 + _574;
      _624 = _588;
      _625 = _589;
      _626 = _590;
      _627 = cb2_025w;
    } else {
      bool _592 = ((uint)(cb2_028x) == 4);
      if (_592) {
        float _594 = _572 * _482;
        float _595 = _573 * _485;
        float _596 = _574 * _488;
        _624 = _594;
        _625 = _595;
        _626 = _596;
        _627 = cb2_025w;
      } else {
        bool _598 = ((uint)(cb2_028x) == 5);
        if (_598) {
          float _600 = _482 * 2.0f;
          float _601 = _600 * _572;
          float _602 = _485 * 2.0f;
          float _603 = _602 * _573;
          float _604 = _488 * 2.0f;
          float _605 = _604 * _574;
          _624 = _601;
          _625 = _603;
          _626 = _605;
          _627 = cb2_025w;
        } else {
          if (_534) {
            float _608 = _482 - _572;
            float _609 = _485 - _573;
            float _610 = _488 - _574;
            _624 = _608;
            _625 = _609;
            _626 = _610;
            _627 = cb2_025w;
          } else {
            float _612 = _572 - _482;
            float _613 = _573 - _485;
            float _614 = _574 - _488;
            float _615 = _575 * _612;
            float _616 = _575 * _613;
            float _617 = _575 * _614;
            float _618 = _615 + _482;
            float _619 = _616 + _485;
            float _620 = _617 + _488;
            float _621 = 1.0f - _575;
            float _622 = _621 * cb2_025w;
            _624 = _618;
            _625 = _619;
            _626 = _620;
            _627 = _622;
          }
        }
      }
    }
  }
  float _633 = cb2_016x - _624;
  float _634 = cb2_016y - _625;
  float _635 = cb2_016z - _626;
  float _636 = _633 * cb2_016w;
  float _637 = _634 * cb2_016w;
  float _638 = _635 * cb2_016w;
  float _639 = _636 + _624;
  float _640 = _637 + _625;
  float _641 = _638 + _626;
  bool _644 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_644 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _648 = cb2_024x * _639;
    float _649 = cb2_024x * _640;
    float _650 = cb2_024x * _641;
    _652 = _648;
    _653 = _649;
    _654 = _650;
  } else {
    _652 = _639;
    _653 = _640;
    _654 = _641;
  }
  float _657 = _652 * 0.9708889722824097f;
  float _658 = mad(0.026962999254465103f, _653, _657);
  float _659 = mad(0.002148000057786703f, _654, _658);
  float _660 = _652 * 0.01088900025933981f;
  float _661 = mad(0.9869629740715027f, _653, _660);
  float _662 = mad(0.002148000057786703f, _654, _661);
  float _663 = mad(0.026962999254465103f, _653, _660);
  float _664 = mad(0.9621480107307434f, _654, _663);
  float _665 = max(_659, 0.0f);
  float _666 = max(_662, 0.0f);
  float _667 = max(_664, 0.0f);
  float _668 = min(_665, cb2_095y);
  float _669 = min(_666, cb2_095y);
  float _670 = min(_667, cb2_095y);
  bool _673 = ((uint)(cb2_095x) == 0);
  bool _676 = ((uint)(cb2_094w) == 0);
  bool _678 = ((uint)(cb2_094z) == 0);
  bool _680 = ((uint)(cb2_094y) != 0);
  bool _682 = ((uint)(cb2_094x) == 0);
  bool _684 = ((uint)(cb2_069z) != 0);
  float _731 = asfloat((uint)(cb2_075y));
  float _732 = asfloat((uint)(cb2_075z));
  float _733 = asfloat((uint)(cb2_075w));
  float _734 = asfloat((uint)(cb2_074z));
  float _735 = asfloat((uint)(cb2_074w));
  float _736 = asfloat((uint)(cb2_075x));
  float _737 = asfloat((uint)(cb2_073w));
  float _738 = asfloat((uint)(cb2_074x));
  float _739 = asfloat((uint)(cb2_074y));
  float _740 = asfloat((uint)(cb2_077x));
  float _741 = asfloat((uint)(cb2_077y));
  float _742 = asfloat((uint)(cb2_079x));
  float _743 = asfloat((uint)(cb2_079y));
  float _744 = asfloat((uint)(cb2_079z));
  float _745 = asfloat((uint)(cb2_078y));
  float _746 = asfloat((uint)(cb2_078z));
  float _747 = asfloat((uint)(cb2_078w));
  float _748 = asfloat((uint)(cb2_077z));
  float _749 = asfloat((uint)(cb2_077w));
  float _750 = asfloat((uint)(cb2_078x));
  float _751 = asfloat((uint)(cb2_072y));
  float _752 = asfloat((uint)(cb2_072z));
  float _753 = asfloat((uint)(cb2_072w));
  float _754 = asfloat((uint)(cb2_071x));
  float _755 = asfloat((uint)(cb2_071y));
  float _756 = asfloat((uint)(cb2_076x));
  float _757 = asfloat((uint)(cb2_070w));
  float _758 = asfloat((uint)(cb2_070x));
  float _759 = asfloat((uint)(cb2_070y));
  float _760 = asfloat((uint)(cb2_070z));
  float _761 = asfloat((uint)(cb2_073x));
  float _762 = asfloat((uint)(cb2_073y));
  float _763 = asfloat((uint)(cb2_073z));
  float _764 = asfloat((uint)(cb2_071z));
  float _765 = asfloat((uint)(cb2_071w));
  float _766 = asfloat((uint)(cb2_072x));
  float _767 = max(_669, _670);
  float _768 = max(_668, _767);
  float _769 = 1.0f / _768;
  float _770 = _769 * _668;
  float _771 = _769 * _669;
  float _772 = _769 * _670;
  float _773 = abs(_770);
  float _774 = log2(_773);
  float _775 = _774 * _758;
  float _776 = exp2(_775);
  float _777 = abs(_771);
  float _778 = log2(_777);
  float _779 = _778 * _759;
  float _780 = exp2(_779);
  float _781 = abs(_772);
  float _782 = log2(_781);
  float _783 = _782 * _760;
  float _784 = exp2(_783);
  if (_680) {
    float _787 = asfloat((uint)(cb2_076w));
    float _789 = asfloat((uint)(cb2_076z));
    float _791 = asfloat((uint)(cb2_076y));
    float _792 = _789 * _669;
    float _793 = _791 * _668;
    float _794 = _787 * _670;
    float _795 = _793 + _794;
    float _796 = _795 + _792;
    _804 = _796;
  } else {
    float _798 = _765 * _669;
    float _799 = _764 * _668;
    float _800 = _766 * _670;
    float _801 = _798 + _799;
    float _802 = _801 + _800;
    _804 = _802;
  }
  float _805 = abs(_804);
  float _806 = log2(_805);
  float _807 = _806 * _757;
  float _808 = exp2(_807);
  float _809 = log2(_808);
  float _810 = _809 * _756;
  float _811 = exp2(_810);
  float _812 = select(_684, _811, _808);
  float _813 = _812 * _754;
  float _814 = _813 + _755;
  float _815 = 1.0f / _814;
  float _816 = _815 * _808;
  if (_680) {
    if (!_682) {
      float _819 = _776 * _748;
      float _820 = _780 * _749;
      float _821 = _784 * _750;
      float _822 = _820 + _819;
      float _823 = _822 + _821;
      float _824 = _780 * _746;
      float _825 = _776 * _745;
      float _826 = _784 * _747;
      float _827 = _824 + _825;
      float _828 = _827 + _826;
      float _829 = _784 * _744;
      float _830 = _780 * _743;
      float _831 = _776 * _742;
      float _832 = _830 + _831;
      float _833 = _832 + _829;
      float _834 = max(_828, _833);
      float _835 = max(_823, _834);
      float _836 = 1.0f / _835;
      float _837 = _836 * _823;
      float _838 = _836 * _828;
      float _839 = _836 * _833;
      _841 = _837;
      _842 = _838;
      _843 = _839;
    } else {
      _841 = _776;
      _842 = _780;
      _843 = _784;
    }
    float _844 = _841 * _741;
    float _845 = exp2(_844);
    float _846 = _845 * _740;
    float _847 = saturate(_846);
    float _848 = _841 * _740;
    float _849 = _841 - _848;
    float _850 = saturate(_849);
    float _851 = max(_740, _850);
    float _852 = min(_851, _847);
    float _853 = _842 * _741;
    float _854 = exp2(_853);
    float _855 = _854 * _740;
    float _856 = saturate(_855);
    float _857 = _842 * _740;
    float _858 = _842 - _857;
    float _859 = saturate(_858);
    float _860 = max(_740, _859);
    float _861 = min(_860, _856);
    float _862 = _843 * _741;
    float _863 = exp2(_862);
    float _864 = _863 * _740;
    float _865 = saturate(_864);
    float _866 = _843 * _740;
    float _867 = _843 - _866;
    float _868 = saturate(_867);
    float _869 = max(_740, _868);
    float _870 = min(_869, _865);
    _872 = _852;
    _873 = _861;
    _874 = _870;
  } else {
    _872 = _776;
    _873 = _780;
    _874 = _784;
  }
  float _875 = _872 * _764;
  float _876 = _873 * _765;
  float _877 = _876 + _875;
  float _878 = _874 * _766;
  float _879 = _877 + _878;
  float _880 = 1.0f / _879;
  float _881 = _880 * _816;
  float _882 = saturate(_881);
  float _883 = _882 * _872;
  float _884 = saturate(_883);
  float _885 = _882 * _873;
  float _886 = saturate(_885);
  float _887 = _882 * _874;
  float _888 = saturate(_887);
  float _889 = _884 * _751;
  float _890 = _751 - _889;
  float _891 = _886 * _752;
  float _892 = _752 - _891;
  float _893 = _888 * _753;
  float _894 = _753 - _893;
  float _895 = _888 * _766;
  float _896 = _884 * _764;
  float _897 = _886 * _765;
  float _898 = _816 - _896;
  float _899 = _898 - _897;
  float _900 = _899 - _895;
  float _901 = saturate(_900);
  float _902 = _892 * _765;
  float _903 = _890 * _764;
  float _904 = _894 * _766;
  float _905 = _902 + _903;
  float _906 = _905 + _904;
  float _907 = 1.0f / _906;
  float _908 = _907 * _901;
  float _909 = _908 * _890;
  float _910 = _909 + _884;
  float _911 = saturate(_910);
  float _912 = _908 * _892;
  float _913 = _912 + _886;
  float _914 = saturate(_913);
  float _915 = _908 * _894;
  float _916 = _915 + _888;
  float _917 = saturate(_916);
  float _918 = _917 * _766;
  float _919 = _911 * _764;
  float _920 = _914 * _765;
  float _921 = _816 - _919;
  float _922 = _921 - _920;
  float _923 = _922 - _918;
  float _924 = saturate(_923);
  float _925 = _924 * _761;
  float _926 = _925 + _911;
  float _927 = saturate(_926);
  float _928 = _924 * _762;
  float _929 = _928 + _914;
  float _930 = saturate(_929);
  float _931 = _924 * _763;
  float _932 = _931 + _917;
  float _933 = saturate(_932);
  if (!_678) {
    float _935 = _927 * _737;
    float _936 = _930 * _738;
    float _937 = _933 * _739;
    float _938 = _936 + _935;
    float _939 = _938 + _937;
    float _940 = _930 * _735;
    float _941 = _927 * _734;
    float _942 = _933 * _736;
    float _943 = _940 + _941;
    float _944 = _943 + _942;
    float _945 = _933 * _733;
    float _946 = _930 * _732;
    float _947 = _927 * _731;
    float _948 = _946 + _947;
    float _949 = _948 + _945;
    if (!_676) {
      float _951 = saturate(_939);
      float _952 = saturate(_944);
      float _953 = saturate(_949);
      _955 = _953;
      _956 = _952;
      _957 = _951;
    } else {
      _955 = _949;
      _956 = _944;
      _957 = _939;
    }
  } else {
    _955 = _933;
    _956 = _930;
    _957 = _927;
  }
  if (!_673) {
    float _959 = _957 * _737;
    float _960 = _956 * _737;
    float _961 = _955 * _737;
    _963 = _961;
    _964 = _960;
    _965 = _959;
  } else {
    _963 = _955;
    _964 = _956;
    _965 = _957;
  }
  if (_644) {
    float _969 = cb1_018z * 9.999999747378752e-05f;
    float _970 = _969 * _965;
    float _971 = _969 * _964;
    float _972 = _969 * _963;
    float _974 = 5000.0f / cb1_018y;
    float _975 = _970 * _974;
    float _976 = _971 * _974;
    float _977 = _972 * _974;
    _979 = _975;
    _980 = _976;
    _981 = _977;
  } else {
    _979 = _965;
    _980 = _964;
    _981 = _963;
  }
  float _982 = _979 * 1.6047500371932983f;
  float _983 = mad(-0.5310800075531006f, _980, _982);
  float _984 = mad(-0.07366999983787537f, _981, _983);
  float _985 = _979 * -0.10208000242710114f;
  float _986 = mad(1.1081299781799316f, _980, _985);
  float _987 = mad(-0.006049999967217445f, _981, _986);
  float _988 = _979 * -0.0032599999103695154f;
  float _989 = mad(-0.07275000214576721f, _980, _988);
  float _990 = mad(1.0760200023651123f, _981, _989);
  if (_644) {
    // float _992 = max(_984, 0.0f);
    // float _993 = max(_987, 0.0f);
    // float _994 = max(_990, 0.0f);
    // bool _995 = !(_992 >= 0.0030399328097701073f);
    // if (!_995) {
    //   float _997 = abs(_992);
    //   float _998 = log2(_997);
    //   float _999 = _998 * 0.4166666567325592f;
    //   float _1000 = exp2(_999);
    //   float _1001 = _1000 * 1.0549999475479126f;
    //   float _1002 = _1001 + -0.054999999701976776f;
    //   _1006 = _1002;
    // } else {
    //   float _1004 = _992 * 12.923210144042969f;
    //   _1006 = _1004;
    // }
    // bool _1007 = !(_993 >= 0.0030399328097701073f);
    // if (!_1007) {
    //   float _1009 = abs(_993);
    //   float _1010 = log2(_1009);
    //   float _1011 = _1010 * 0.4166666567325592f;
    //   float _1012 = exp2(_1011);
    //   float _1013 = _1012 * 1.0549999475479126f;
    //   float _1014 = _1013 + -0.054999999701976776f;
    //   _1018 = _1014;
    // } else {
    //   float _1016 = _993 * 12.923210144042969f;
    //   _1018 = _1016;
    // }
    // bool _1019 = !(_994 >= 0.0030399328097701073f);
    // if (!_1019) {
    //   float _1021 = abs(_994);
    //   float _1022 = log2(_1021);
    //   float _1023 = _1022 * 0.4166666567325592f;
    //   float _1024 = exp2(_1023);
    //   float _1025 = _1024 * 1.0549999475479126f;
    //   float _1026 = _1025 + -0.054999999701976776f;
    //   _1099 = _1006;
    //   _1100 = _1018;
    //   _1101 = _1026;
    // } else {
    //   float _1028 = _994 * 12.923210144042969f;
    //   _1099 = _1006;
    //   _1100 = _1018;
    //   _1101 = _1028;
    // }
    _1099 = renodx::color::srgb::EncodeSafe(_984);
    _1100 = renodx::color::srgb::EncodeSafe(_987);
    _1101 = renodx::color::srgb::EncodeSafe(_990);

  } else {
    float _1030 = saturate(_984);
    float _1031 = saturate(_987);
    float _1032 = saturate(_990);
    bool _1033 = ((uint)(cb1_018w) == -2);
    if (!_1033) {
      bool _1035 = !(_1030 >= 0.0030399328097701073f);
      if (!_1035) {
        float _1037 = abs(_1030);
        float _1038 = log2(_1037);
        float _1039 = _1038 * 0.4166666567325592f;
        float _1040 = exp2(_1039);
        float _1041 = _1040 * 1.0549999475479126f;
        float _1042 = _1041 + -0.054999999701976776f;
        _1046 = _1042;
      } else {
        float _1044 = _1030 * 12.923210144042969f;
        _1046 = _1044;
      }
      bool _1047 = !(_1031 >= 0.0030399328097701073f);
      if (!_1047) {
        float _1049 = abs(_1031);
        float _1050 = log2(_1049);
        float _1051 = _1050 * 0.4166666567325592f;
        float _1052 = exp2(_1051);
        float _1053 = _1052 * 1.0549999475479126f;
        float _1054 = _1053 + -0.054999999701976776f;
        _1058 = _1054;
      } else {
        float _1056 = _1031 * 12.923210144042969f;
        _1058 = _1056;
      }
      bool _1059 = !(_1032 >= 0.0030399328097701073f);
      if (!_1059) {
        float _1061 = abs(_1032);
        float _1062 = log2(_1061);
        float _1063 = _1062 * 0.4166666567325592f;
        float _1064 = exp2(_1063);
        float _1065 = _1064 * 1.0549999475479126f;
        float _1066 = _1065 + -0.054999999701976776f;
        _1070 = _1046;
        _1071 = _1058;
        _1072 = _1066;
      } else {
        float _1068 = _1032 * 12.923210144042969f;
        _1070 = _1046;
        _1071 = _1058;
        _1072 = _1068;
      }
    } else {
      _1070 = _1030;
      _1071 = _1031;
      _1072 = _1032;
    }
    float _1077 = abs(_1070);
    float _1078 = abs(_1071);
    float _1079 = abs(_1072);
    float _1080 = log2(_1077);
    float _1081 = log2(_1078);
    float _1082 = log2(_1079);
    float _1083 = _1080 * cb2_000z;
    float _1084 = _1081 * cb2_000z;
    float _1085 = _1082 * cb2_000z;
    float _1086 = exp2(_1083);
    float _1087 = exp2(_1084);
    float _1088 = exp2(_1085);
    float _1089 = _1086 * cb2_000y;
    float _1090 = _1087 * cb2_000y;
    float _1091 = _1088 * cb2_000y;
    float _1092 = _1089 + cb2_000x;
    float _1093 = _1090 + cb2_000x;
    float _1094 = _1091 + cb2_000x;
    float _1095 = saturate(_1092);
    float _1096 = saturate(_1093);
    float _1097 = saturate(_1094);
    _1099 = _1095;
    _1100 = _1096;
    _1101 = _1097;
  }
  float _1105 = cb2_023x * TEXCOORD0_centroid.x;
  float _1106 = cb2_023y * TEXCOORD0_centroid.y;
  float _1109 = _1105 + cb2_023z;
  float _1110 = _1106 + cb2_023w;
  float4 _1113 = t11.SampleLevel(s0_space2, float2(_1109, _1110), 0.0f);
  float _1115 = _1113.x + -0.5f;
  float _1116 = _1115 * cb2_022x;
  float _1117 = _1116 + 0.5f;
  float _1118 = _1117 * 2.0f;
  float _1119 = _1118 * _1099;
  float _1120 = _1118 * _1100;
  float _1121 = _1118 * _1101;
  float _1125 = float((uint)(cb2_019z));
  float _1126 = float((uint)(cb2_019w));
  float _1127 = _1125 + SV_Position.x;
  float _1128 = _1126 + SV_Position.y;
  uint _1129 = uint(_1127);
  uint _1130 = uint(_1128);
  uint _1133 = cb2_019x + -1u;
  uint _1134 = cb2_019y + -1u;
  int _1135 = _1129 & _1133;
  int _1136 = _1130 & _1134;
  float4 _1137 = t3.Load(int3(_1135, _1136, 0));
  float _1141 = _1137.x * 2.0f;
  float _1142 = _1137.y * 2.0f;
  float _1143 = _1137.z * 2.0f;
  float _1144 = _1141 + -1.0f;
  float _1145 = _1142 + -1.0f;
  float _1146 = _1143 + -1.0f;
  float _1147 = _1144 * _627;
  float _1148 = _1145 * _627;
  float _1149 = _1146 * _627;
  float _1150 = _1147 + _1119;
  float _1151 = _1148 + _1120;
  float _1152 = _1149 + _1121;
  float _1153 = dot(float3(_1150, _1151, _1152), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1150;
  SV_Target.y = _1151;
  SV_Target.z = _1152;
  SV_Target.w = _1153;
  SV_Target_1.x = _1153;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
