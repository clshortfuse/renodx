#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = _26.x * 6.283199787139893f;
  float _31 = cos(_30);
  float _32 = sin(_30);
  float _33 = _31 * _26.z;
  float _34 = _32 * _26.z;
  float _35 = _33 + TEXCOORD0_centroid.x;
  float _36 = _34 + TEXCOORD0_centroid.y;
  float _37 = _35 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _33;
  float _42 = _36 * 10.0f;
  float _43 = 10.0f - _42;
  float _44 = min(_42, _43);
  float _45 = saturate(_44);
  float _46 = _45 * _34;
  float _47 = _41 + TEXCOORD0_centroid.x;
  float _48 = _46 + TEXCOORD0_centroid.y;
  float4 _49 = t7.SampleLevel(s2_space2, float2(_47, _48), 0.0f);
  float _51 = _49.w * _41;
  float _52 = _49.w * _46;
  float _53 = 1.0f - _26.y;
  float _54 = saturate(_53);
  float _55 = _51 * _54;
  float _56 = _52 * _54;
  float _57 = _55 + TEXCOORD0_centroid.x;
  float _58 = _56 + TEXCOORD0_centroid.y;
  float4 _59 = t7.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  bool _61 = (_59.y > 0.0f);
  float _62 = select(_61, TEXCOORD0_centroid.x, _57);
  float _63 = select(_61, TEXCOORD0_centroid.y, _58);
  float4 _64 = t1.SampleLevel(s4_space2, float2(_62, _63), 0.0f);
  float _68 = max(_64.x, 0.0f);
  float _69 = max(_64.y, 0.0f);
  float _70 = max(_64.z, 0.0f);
  float _71 = min(_68, 65000.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float4 _74 = t4.SampleLevel(s2_space2, float2(_62, _63), 0.0f);
  float _79 = max(_74.x, 0.0f);
  float _80 = max(_74.y, 0.0f);
  float _81 = max(_74.z, 0.0f);
  float _82 = max(_74.w, 0.0f);
  float _83 = min(_79, 5000.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _89 = _24.x * cb0_028z;
  float _90 = _89 + cb0_028x;
  float _91 = cb2_027w / _90;
  float _92 = 1.0f - _91;
  float _93 = abs(_92);
  float _95 = cb2_027y * _93;
  float _97 = _95 - cb2_027z;
  float _98 = saturate(_97);
  float _99 = max(_98, _86);
  float _100 = saturate(_99);
  float _104 = cb2_013x * _62;
  float _105 = cb2_013y * _63;
  float _108 = _104 + cb2_013z;
  float _109 = _105 + cb2_013w;
  float _112 = dot(float2(_108, _109), float2(_108, _109));
  float _113 = abs(_112);
  float _114 = log2(_113);
  float _115 = _114 * cb2_014x;
  float _116 = exp2(_115);
  float _117 = saturate(_116);
  float _121 = cb2_011x * _62;
  float _122 = cb2_011y * _63;
  float _125 = _121 + cb2_011z;
  float _126 = _122 + cb2_011w;
  float _127 = _125 * _117;
  float _128 = _126 * _117;
  float _129 = _127 + _62;
  float _130 = _128 + _63;
  float _134 = cb2_012x * _62;
  float _135 = cb2_012y * _63;
  float _138 = _134 + cb2_012z;
  float _139 = _135 + cb2_012w;
  float _140 = _138 * _117;
  float _141 = _139 * _117;
  float _142 = _140 + _62;
  float _143 = _141 + _63;
  float4 _144 = t1.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _148 = max(_144.x, 0.0f);
  float _149 = max(_144.y, 0.0f);
  float _150 = max(_144.z, 0.0f);
  float _151 = min(_148, 65000.0f);
  float _152 = min(_149, 65000.0f);
  float _153 = min(_150, 65000.0f);
  float4 _154 = t1.SampleLevel(s2_space2, float2(_142, _143), 0.0f);
  float _158 = max(_154.x, 0.0f);
  float _159 = max(_154.y, 0.0f);
  float _160 = max(_154.z, 0.0f);
  float _161 = min(_158, 65000.0f);
  float _162 = min(_159, 65000.0f);
  float _163 = min(_160, 65000.0f);
  float4 _164 = t4.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _168 = max(_164.x, 0.0f);
  float _169 = max(_164.y, 0.0f);
  float _170 = max(_164.z, 0.0f);
  float _171 = min(_168, 5000.0f);
  float _172 = min(_169, 5000.0f);
  float _173 = min(_170, 5000.0f);
  float4 _174 = t4.SampleLevel(s2_space2, float2(_142, _143), 0.0f);
  float _178 = max(_174.x, 0.0f);
  float _179 = max(_174.y, 0.0f);
  float _180 = max(_174.z, 0.0f);
  float _181 = min(_178, 5000.0f);
  float _182 = min(_179, 5000.0f);
  float _183 = min(_180, 5000.0f);
  float _188 = 1.0f - cb2_009x;
  float _189 = 1.0f - cb2_009y;
  float _190 = 1.0f - cb2_009z;
  float _195 = _188 - cb2_010x;
  float _196 = _189 - cb2_010y;
  float _197 = _190 - cb2_010z;
  float _198 = saturate(_195);
  float _199 = saturate(_196);
  float _200 = saturate(_197);
  float _201 = _198 * _71;
  float _202 = _199 * _72;
  float _203 = _200 * _73;
  float _204 = cb2_009x * _151;
  float _205 = cb2_009y * _152;
  float _206 = cb2_009z * _153;
  float _207 = _204 + _201;
  float _208 = _205 + _202;
  float _209 = _206 + _203;
  float _210 = cb2_010x * _161;
  float _211 = cb2_010y * _162;
  float _212 = cb2_010z * _163;
  float _213 = _207 + _210;
  float _214 = _208 + _211;
  float _215 = _209 + _212;
  float _216 = _198 * _83;
  float _217 = _199 * _84;
  float _218 = _200 * _85;
  float _219 = cb2_009x * _171;
  float _220 = cb2_009y * _172;
  float _221 = cb2_009z * _173;
  float _222 = cb2_010x * _181;
  float _223 = cb2_010y * _182;
  float _224 = cb2_010z * _183;
  float4 _225 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _229 = _216 - _213;
  float _230 = _229 + _219;
  float _231 = _230 + _222;
  float _232 = _217 - _214;
  float _233 = _232 + _220;
  float _234 = _233 + _223;
  float _235 = _218 - _215;
  float _236 = _235 + _221;
  float _237 = _236 + _224;
  float _238 = _231 * _100;
  float _239 = _234 * _100;
  float _240 = _237 * _100;
  float _241 = _238 + _213;
  float _242 = _239 + _214;
  float _243 = _240 + _215;
  float _244 = dot(float3(_241, _242, _243), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _248 = t0[0].SExposureData_020;
  float _250 = t0[0].SExposureData_004;
  float _252 = cb2_018x * 0.5f;
  float _253 = _252 * cb2_018y;
  float _254 = _250.x - _253;
  float _255 = cb2_018y * cb2_018x;
  float _256 = 1.0f / _255;
  float _257 = _254 * _256;
  float _258 = _244 / _248.x;
  float _259 = _258 * 5464.01611328125f;
  float _260 = _259 + 9.99999993922529e-09f;
  float _261 = log2(_260);
  float _262 = _261 - _254;
  float _263 = _262 * _256;
  float _264 = saturate(_263);
  float2 _265 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _264), 0.0f);
  float _268 = max(_265.y, 1.0000000116860974e-07f);
  float _269 = _265.x / _268;
  float _270 = _269 + _257;
  float _271 = _270 / _256;
  float _272 = _271 - _250.x;
  float _273 = -0.0f - _272;
  float _275 = _273 - cb2_027x;
  float _276 = max(0.0f, _275);
  float _279 = cb2_026z * _276;
  float _280 = _272 - cb2_027x;
  float _281 = max(0.0f, _280);
  float _283 = cb2_026w * _281;
  bool _284 = (_272 < 0.0f);
  float _285 = select(_284, _279, _283);
  float _286 = exp2(_285);
  float _287 = _286 * _241;
  float _288 = _286 * _242;
  float _289 = _286 * _243;
  float _294 = cb2_024y * _225.x;
  float _295 = cb2_024z * _225.y;
  float _296 = cb2_024w * _225.z;
  float _297 = _294 + _287;
  float _298 = _295 + _288;
  float _299 = _296 + _289;
  float _304 = _297 * cb2_025x;
  float _305 = _298 * cb2_025y;
  float _306 = _299 * cb2_025z;
  float _307 = dot(float3(_304, _305, _306), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _308 = t0[0].SExposureData_012;
  float _310 = _307 * 5464.01611328125f;
  float _311 = _310 * _308.x;
  float _312 = _311 + 9.99999993922529e-09f;
  float _313 = log2(_312);
  float _314 = _313 + 16.929765701293945f;
  float _315 = _314 * 0.05734497308731079f;
  float _316 = saturate(_315);
  float _317 = _316 * _316;
  float _318 = _316 * 2.0f;
  float _319 = 3.0f - _318;
  float _320 = _317 * _319;
  float _321 = _305 * 0.8450999855995178f;
  float _322 = _306 * 0.14589999616146088f;
  float _323 = _321 + _322;
  float _324 = _323 * 2.4890189170837402f;
  float _325 = _323 * 0.3754962384700775f;
  float _326 = _323 * 2.811495304107666f;
  float _327 = _323 * 5.519708156585693f;
  float _328 = _307 - _324;
  float _329 = _320 * _328;
  float _330 = _329 + _324;
  float _331 = _320 * 0.5f;
  float _332 = _331 + 0.5f;
  float _333 = _332 * _328;
  float _334 = _333 + _324;
  float _335 = _304 - _325;
  float _336 = _305 - _326;
  float _337 = _306 - _327;
  float _338 = _332 * _335;
  float _339 = _332 * _336;
  float _340 = _332 * _337;
  float _341 = _338 + _325;
  float _342 = _339 + _326;
  float _343 = _340 + _327;
  float _344 = 1.0f / _334;
  float _345 = _330 * _344;
  float _346 = _345 * _341;
  float _347 = _345 * _342;
  float _348 = _345 * _343;
  float _352 = cb2_020x * TEXCOORD0_centroid.x;
  float _353 = cb2_020y * TEXCOORD0_centroid.y;
  float _356 = _352 + cb2_020z;
  float _357 = _353 + cb2_020w;
  float _360 = dot(float2(_356, _357), float2(_356, _357));
  float _361 = 1.0f - _360;
  float _362 = saturate(_361);
  float _363 = log2(_362);
  float _364 = _363 * cb2_021w;
  float _365 = exp2(_364);
  float _369 = _346 - cb2_021x;
  float _370 = _347 - cb2_021y;
  float _371 = _348 - cb2_021z;
  float _372 = _369 * _365;
  float _373 = _370 * _365;
  float _374 = _371 * _365;
  float _375 = _372 + cb2_021x;
  float _376 = _373 + cb2_021y;
  float _377 = _374 + cb2_021z;
  float _378 = t0[0].SExposureData_000;
  float _380 = max(_248.x, 0.0010000000474974513f);
  float _381 = 1.0f / _380;
  float _382 = _381 * _378.x;
  bool _385 = ((uint)(cb2_069y) == 0);
  float _391;
  float _392;
  float _393;
  float _447;
  float _448;
  float _449;
  float _480;
  float _481;
  float _482;
  float _583;
  float _584;
  float _585;
  float _610;
  float _622;
  float _650;
  float _662;
  float _674;
  float _675;
  float _676;
  float _703;
  float _704;
  float _705;
  if (!_385) {
    float _387 = _382 * _375;
    float _388 = _382 * _376;
    float _389 = _382 * _377;
    _391 = _387;
    _392 = _388;
    _393 = _389;
  } else {
    _391 = _375;
    _392 = _376;
    _393 = _377;
  }
  float _394 = _391 * 0.6130970120429993f;
  float _395 = mad(0.33952298760414124f, _392, _394);
  float _396 = mad(0.04737899824976921f, _393, _395);
  float _397 = _391 * 0.07019399851560593f;
  float _398 = mad(0.9163540005683899f, _392, _397);
  float _399 = mad(0.013451999984681606f, _393, _398);
  float _400 = _391 * 0.02061600051820278f;
  float _401 = mad(0.10956999659538269f, _392, _400);
  float _402 = mad(0.8698149919509888f, _393, _401);
  float _403 = log2(_396);
  float _404 = log2(_399);
  float _405 = log2(_402);
  float _406 = _403 * 0.04211956635117531f;
  float _407 = _404 * 0.04211956635117531f;
  float _408 = _405 * 0.04211956635117531f;
  float _409 = _406 + 0.6252607107162476f;
  float _410 = _407 + 0.6252607107162476f;
  float _411 = _408 + 0.6252607107162476f;
  float4 _412 = t6.SampleLevel(s2_space2, float3(_409, _410, _411), 0.0f);
  bool _418 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_418 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _422 = cb2_017x * _412.x;
    float _423 = cb2_017x * _412.y;
    float _424 = cb2_017x * _412.z;
    float _426 = _422 + cb2_017y;
    float _427 = _423 + cb2_017y;
    float _428 = _424 + cb2_017y;
    float _429 = exp2(_426);
    float _430 = exp2(_427);
    float _431 = exp2(_428);
    float _432 = _429 + 1.0f;
    float _433 = _430 + 1.0f;
    float _434 = _431 + 1.0f;
    float _435 = 1.0f / _432;
    float _436 = 1.0f / _433;
    float _437 = 1.0f / _434;
    float _439 = cb2_017z * _435;
    float _440 = cb2_017z * _436;
    float _441 = cb2_017z * _437;
    float _443 = _439 + cb2_017w;
    float _444 = _440 + cb2_017w;
    float _445 = _441 + cb2_017w;
    _447 = _443;
    _448 = _444;
    _449 = _445;
  } else {
    _447 = _412.x;
    _448 = _412.y;
    _449 = _412.z;
  }
  float _450 = _447 * 23.0f;
  float _451 = _450 + -14.473931312561035f;
  float _452 = exp2(_451);
  float _453 = _448 * 23.0f;
  float _454 = _453 + -14.473931312561035f;
  float _455 = exp2(_454);
  float _456 = _449 * 23.0f;
  float _457 = _456 + -14.473931312561035f;
  float _458 = exp2(_457);
  float _465 = cb2_016x - _452;
  float _466 = cb2_016y - _455;
  float _467 = cb2_016z - _458;
  float _468 = _465 * cb2_016w;
  float _469 = _466 * cb2_016w;
  float _470 = _467 * cb2_016w;
  float _471 = _468 + _452;
  float _472 = _469 + _455;
  float _473 = _470 + _458;
  if (_418 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _476 = cb2_024x * _471;
    float _477 = cb2_024x * _472;
    float _478 = cb2_024x * _473;
    _480 = _476;
    _481 = _477;
    _482 = _478;
  } else {
    _480 = _471;
    _481 = _472;
    _482 = _473;
  }
  float _483 = _480 * 0.9708889722824097f;
  float _484 = mad(0.026962999254465103f, _481, _483);
  float _485 = mad(0.002148000057786703f, _482, _484);
  float _486 = _480 * 0.01088900025933981f;
  float _487 = mad(0.9869629740715027f, _481, _486);
  float _488 = mad(0.002148000057786703f, _482, _487);
  float _489 = mad(0.026962999254465103f, _481, _486);
  float _490 = mad(0.9621480107307434f, _482, _489);
  if (_418) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _495 = cb1_018y * 0.10000000149011612f;
        float _496 = log2(cb1_018z);
        float _497 = _496 + -13.287712097167969f;
        float _498 = _497 * 1.4929734468460083f;
        float _499 = _498 + 18.0f;
        float _500 = exp2(_499);
        float _501 = _500 * 0.18000000715255737f;
        float _502 = abs(_501);
        float _503 = log2(_502);
        float _504 = _503 * 1.5f;
        float _505 = exp2(_504);
        float _506 = _505 * _495;
        float _507 = _506 / cb1_018z;
        float _508 = _507 + -0.07636754959821701f;
        float _509 = _503 * 1.2750000953674316f;
        float _510 = exp2(_509);
        float _511 = _510 * 0.07636754959821701f;
        float _512 = cb1_018y * 0.011232397519052029f;
        float _513 = _512 * _505;
        float _514 = _513 / cb1_018z;
        float _515 = _511 - _514;
        float _516 = _510 + -0.11232396960258484f;
        float _517 = _516 * _495;
        float _518 = _517 / cb1_018z;
        float _519 = _518 * cb1_018z;
        float _520 = abs(_485);
        float _521 = abs(_488);
        float _522 = abs(_490);
        float _523 = log2(_520);
        float _524 = log2(_521);
        float _525 = log2(_522);
        float _526 = _523 * 1.5f;
        float _527 = _524 * 1.5f;
        float _528 = _525 * 1.5f;
        float _529 = exp2(_526);
        float _530 = exp2(_527);
        float _531 = exp2(_528);
        float _532 = _529 * _519;
        float _533 = _530 * _519;
        float _534 = _531 * _519;
        float _535 = _523 * 1.2750000953674316f;
        float _536 = _524 * 1.2750000953674316f;
        float _537 = _525 * 1.2750000953674316f;
        float _538 = exp2(_535);
        float _539 = exp2(_536);
        float _540 = exp2(_537);
        float _541 = _538 * _508;
        float _542 = _539 * _508;
        float _543 = _540 * _508;
        float _544 = _541 + _515;
        float _545 = _542 + _515;
        float _546 = _543 + _515;
        float _547 = _532 / _544;
        float _548 = _533 / _545;
        float _549 = _534 / _546;
        float _550 = _547 * 9.999999747378752e-05f;
        float _551 = _548 * 9.999999747378752e-05f;
        float _552 = _549 * 9.999999747378752e-05f;
        float _553 = 5000.0f / cb1_018y;
        float _554 = _550 * _553;
        float _555 = _551 * _553;
        float _556 = _552 * _553;
        _583 = _554;
        _584 = _555;
        _585 = _556;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_485, _488, _490));
      _583 = tonemapped.x, _584 = tonemapped.y, _585 = tonemapped.z;
    }
      } else {
        float _558 = _485 + 0.020616600289940834f;
        float _559 = _488 + 0.020616600289940834f;
        float _560 = _490 + 0.020616600289940834f;
        float _561 = _558 * _485;
        float _562 = _559 * _488;
        float _563 = _560 * _490;
        float _564 = _561 + -7.456949970219284e-05f;
        float _565 = _562 + -7.456949970219284e-05f;
        float _566 = _563 + -7.456949970219284e-05f;
        float _567 = _485 * 0.9837960004806519f;
        float _568 = _488 * 0.9837960004806519f;
        float _569 = _490 * 0.9837960004806519f;
        float _570 = _567 + 0.4336790144443512f;
        float _571 = _568 + 0.4336790144443512f;
        float _572 = _569 + 0.4336790144443512f;
        float _573 = _570 * _485;
        float _574 = _571 * _488;
        float _575 = _572 * _490;
        float _576 = _573 + 0.24617899954319f;
        float _577 = _574 + 0.24617899954319f;
        float _578 = _575 + 0.24617899954319f;
        float _579 = _564 / _576;
        float _580 = _565 / _577;
        float _581 = _566 / _578;
        _583 = _579;
        _584 = _580;
        _585 = _581;
      }
      float _586 = _583 * 1.6047500371932983f;
      float _587 = mad(-0.5310800075531006f, _584, _586);
      float _588 = mad(-0.07366999983787537f, _585, _587);
      float _589 = _583 * -0.10208000242710114f;
      float _590 = mad(1.1081299781799316f, _584, _589);
      float _591 = mad(-0.006049999967217445f, _585, _590);
      float _592 = _583 * -0.0032599999103695154f;
      float _593 = mad(-0.07275000214576721f, _584, _592);
      float _594 = mad(1.0760200023651123f, _585, _593);
      if (_418) {
        // float _596 = max(_588, 0.0f);
        // float _597 = max(_591, 0.0f);
        // float _598 = max(_594, 0.0f);
        // bool _599 = !(_596 >= 0.0030399328097701073f);
        // if (!_599) {
        //   float _601 = abs(_596);
        //   float _602 = log2(_601);
        //   float _603 = _602 * 0.4166666567325592f;
        //   float _604 = exp2(_603);
        //   float _605 = _604 * 1.0549999475479126f;
        //   float _606 = _605 + -0.054999999701976776f;
        //   _610 = _606;
        // } else {
        //   float _608 = _596 * 12.923210144042969f;
        //   _610 = _608;
        // }
        // bool _611 = !(_597 >= 0.0030399328097701073f);
        // if (!_611) {
        //   float _613 = abs(_597);
        //   float _614 = log2(_613);
        //   float _615 = _614 * 0.4166666567325592f;
        //   float _616 = exp2(_615);
        //   float _617 = _616 * 1.0549999475479126f;
        //   float _618 = _617 + -0.054999999701976776f;
        //   _622 = _618;
        // } else {
        //   float _620 = _597 * 12.923210144042969f;
        //   _622 = _620;
        // }
        // bool _623 = !(_598 >= 0.0030399328097701073f);
        // if (!_623) {
        //   float _625 = abs(_598);
        //   float _626 = log2(_625);
        //   float _627 = _626 * 0.4166666567325592f;
        //   float _628 = exp2(_627);
        //   float _629 = _628 * 1.0549999475479126f;
        //   float _630 = _629 + -0.054999999701976776f;
        //   _703 = _610;
        //   _704 = _622;
        //   _705 = _630;
        // } else {
        //   float _632 = _598 * 12.923210144042969f;
        //   _703 = _610;
        //   _704 = _622;
        //   _705 = _632;
        // }
        _703 = renodx::color::srgb::EncodeSafe(_588);
        _704 = renodx::color::srgb::EncodeSafe(_591);
        _705 = renodx::color::srgb::EncodeSafe(_594);

      } else {
        float _634 = saturate(_588);
        float _635 = saturate(_591);
        float _636 = saturate(_594);
        bool _637 = ((uint)(cb1_018w) == -2);
        if (!_637) {
          bool _639 = !(_634 >= 0.0030399328097701073f);
          if (!_639) {
            float _641 = abs(_634);
            float _642 = log2(_641);
            float _643 = _642 * 0.4166666567325592f;
            float _644 = exp2(_643);
            float _645 = _644 * 1.0549999475479126f;
            float _646 = _645 + -0.054999999701976776f;
            _650 = _646;
          } else {
            float _648 = _634 * 12.923210144042969f;
            _650 = _648;
          }
          bool _651 = !(_635 >= 0.0030399328097701073f);
          if (!_651) {
            float _653 = abs(_635);
            float _654 = log2(_653);
            float _655 = _654 * 0.4166666567325592f;
            float _656 = exp2(_655);
            float _657 = _656 * 1.0549999475479126f;
            float _658 = _657 + -0.054999999701976776f;
            _662 = _658;
          } else {
            float _660 = _635 * 12.923210144042969f;
            _662 = _660;
          }
          bool _663 = !(_636 >= 0.0030399328097701073f);
          if (!_663) {
            float _665 = abs(_636);
            float _666 = log2(_665);
            float _667 = _666 * 0.4166666567325592f;
            float _668 = exp2(_667);
            float _669 = _668 * 1.0549999475479126f;
            float _670 = _669 + -0.054999999701976776f;
            _674 = _650;
            _675 = _662;
            _676 = _670;
          } else {
            float _672 = _636 * 12.923210144042969f;
            _674 = _650;
            _675 = _662;
            _676 = _672;
          }
        } else {
          _674 = _634;
          _675 = _635;
          _676 = _636;
        }
        float _681 = abs(_674);
        float _682 = abs(_675);
        float _683 = abs(_676);
        float _684 = log2(_681);
        float _685 = log2(_682);
        float _686 = log2(_683);
        float _687 = _684 * cb2_000z;
        float _688 = _685 * cb2_000z;
        float _689 = _686 * cb2_000z;
        float _690 = exp2(_687);
        float _691 = exp2(_688);
        float _692 = exp2(_689);
        float _693 = _690 * cb2_000y;
        float _694 = _691 * cb2_000y;
        float _695 = _692 * cb2_000y;
        float _696 = _693 + cb2_000x;
        float _697 = _694 + cb2_000x;
        float _698 = _695 + cb2_000x;
        float _699 = saturate(_696);
        float _700 = saturate(_697);
        float _701 = saturate(_698);
        _703 = _699;
        _704 = _700;
        _705 = _701;
      }
      float _709 = cb2_023x * TEXCOORD0_centroid.x;
      float _710 = cb2_023y * TEXCOORD0_centroid.y;
      float _713 = _709 + cb2_023z;
      float _714 = _710 + cb2_023w;
      float4 _717 = t9.SampleLevel(s0_space2, float2(_713, _714), 0.0f);
      float _719 = _717.x + -0.5f;
      float _720 = _719 * cb2_022x;
      float _721 = _720 + 0.5f;
      float _722 = _721 * 2.0f;
      float _723 = _722 * _703;
      float _724 = _722 * _704;
      float _725 = _722 * _705;
      float _729 = float((uint)(cb2_019z));
      float _730 = float((uint)(cb2_019w));
      float _731 = _729 + SV_Position.x;
      float _732 = _730 + SV_Position.y;
      uint _733 = uint(_731);
      uint _734 = uint(_732);
      uint _737 = cb2_019x + -1u;
      uint _738 = cb2_019y + -1u;
      int _739 = _733 & _737;
      int _740 = _734 & _738;
      float4 _741 = t3.Load(int3(_739, _740, 0));
      float _745 = _741.x * 2.0f;
      float _746 = _741.y * 2.0f;
      float _747 = _741.z * 2.0f;
      float _748 = _745 + -1.0f;
      float _749 = _746 + -1.0f;
      float _750 = _747 + -1.0f;
      float _751 = _748 * cb2_025w;
      float _752 = _749 * cb2_025w;
      float _753 = _750 * cb2_025w;
      float _754 = _751 + _723;
      float _755 = _752 + _724;
      float _756 = _753 + _725;
      float _757 = dot(float3(_754, _755, _756), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _754;
      SV_Target.y = _755;
      SV_Target.z = _756;
      SV_Target.w = _757;
      SV_Target_1.x = _757;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
