#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t7.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _61 = cb2_015x * TEXCOORD0_centroid.x;
  float _62 = cb2_015y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_015z;
  float _66 = _62 + cb2_015w;
  float4 _67 = t8.SampleLevel(s0_space2, float2(_65, _66), 0.0f);
  float _71 = saturate(_67.x);
  float _72 = saturate(_67.z);
  float _75 = cb2_026x * _72;
  float _76 = _71 * 6.283199787139893f;
  float _77 = cos(_76);
  float _78 = sin(_76);
  float _79 = _75 * _77;
  float _80 = _78 * _75;
  float _81 = 1.0f - _67.y;
  float _82 = saturate(_81);
  float _83 = _79 * _82;
  float _84 = _80 * _82;
  float _85 = _56 + TEXCOORD0_centroid.x;
  float _86 = _85 + _83;
  float _87 = _57 + TEXCOORD0_centroid.y;
  float _88 = _87 + _84;
  float4 _89 = t7.SampleLevel(s2_space2, float2(_86, _88), 0.0f);
  bool _91 = (_89.y > 0.0f);
  float _92 = select(_91, TEXCOORD0_centroid.x, _86);
  float _93 = select(_91, TEXCOORD0_centroid.y, _88);
  float4 _94 = t1.SampleLevel(s4_space2, float2(_92, _93), 0.0f);
  float _98 = max(_94.x, 0.0f);
  float _99 = max(_94.y, 0.0f);
  float _100 = max(_94.z, 0.0f);
  float _101 = min(_98, 65000.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float4 _104 = t4.SampleLevel(s2_space2, float2(_92, _93), 0.0f);
  float _109 = max(_104.x, 0.0f);
  float _110 = max(_104.y, 0.0f);
  float _111 = max(_104.z, 0.0f);
  float _112 = max(_104.w, 0.0f);
  float _113 = min(_109, 5000.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _119 = _25.x * cb0_028z;
  float _120 = _119 + cb0_028x;
  float _121 = cb2_027w / _120;
  float _122 = 1.0f - _121;
  float _123 = abs(_122);
  float _125 = cb2_027y * _123;
  float _127 = _125 - cb2_027z;
  float _128 = saturate(_127);
  float _129 = max(_128, _116);
  float _130 = saturate(_129);
  float _134 = cb2_013x * _92;
  float _135 = cb2_013y * _93;
  float _138 = _134 + cb2_013z;
  float _139 = _135 + cb2_013w;
  float _142 = dot(float2(_138, _139), float2(_138, _139));
  float _143 = abs(_142);
  float _144 = log2(_143);
  float _145 = _144 * cb2_014x;
  float _146 = exp2(_145);
  float _147 = saturate(_146);
  float _151 = cb2_011x * _92;
  float _152 = cb2_011y * _93;
  float _155 = _151 + cb2_011z;
  float _156 = _152 + cb2_011w;
  float _157 = _155 * _147;
  float _158 = _156 * _147;
  float _159 = _157 + _92;
  float _160 = _158 + _93;
  float _164 = cb2_012x * _92;
  float _165 = cb2_012y * _93;
  float _168 = _164 + cb2_012z;
  float _169 = _165 + cb2_012w;
  float _170 = _168 * _147;
  float _171 = _169 * _147;
  float _172 = _170 + _92;
  float _173 = _171 + _93;
  float4 _174 = t1.SampleLevel(s2_space2, float2(_159, _160), 0.0f);
  float _178 = max(_174.x, 0.0f);
  float _179 = max(_174.y, 0.0f);
  float _180 = max(_174.z, 0.0f);
  float _181 = min(_178, 65000.0f);
  float _182 = min(_179, 65000.0f);
  float _183 = min(_180, 65000.0f);
  float4 _184 = t1.SampleLevel(s2_space2, float2(_172, _173), 0.0f);
  float _188 = max(_184.x, 0.0f);
  float _189 = max(_184.y, 0.0f);
  float _190 = max(_184.z, 0.0f);
  float _191 = min(_188, 65000.0f);
  float _192 = min(_189, 65000.0f);
  float _193 = min(_190, 65000.0f);
  float4 _194 = t4.SampleLevel(s2_space2, float2(_159, _160), 0.0f);
  float _198 = max(_194.x, 0.0f);
  float _199 = max(_194.y, 0.0f);
  float _200 = max(_194.z, 0.0f);
  float _201 = min(_198, 5000.0f);
  float _202 = min(_199, 5000.0f);
  float _203 = min(_200, 5000.0f);
  float4 _204 = t4.SampleLevel(s2_space2, float2(_172, _173), 0.0f);
  float _208 = max(_204.x, 0.0f);
  float _209 = max(_204.y, 0.0f);
  float _210 = max(_204.z, 0.0f);
  float _211 = min(_208, 5000.0f);
  float _212 = min(_209, 5000.0f);
  float _213 = min(_210, 5000.0f);
  float _218 = 1.0f - cb2_009x;
  float _219 = 1.0f - cb2_009y;
  float _220 = 1.0f - cb2_009z;
  float _225 = _218 - cb2_010x;
  float _226 = _219 - cb2_010y;
  float _227 = _220 - cb2_010z;
  float _228 = saturate(_225);
  float _229 = saturate(_226);
  float _230 = saturate(_227);
  float _231 = _228 * _101;
  float _232 = _229 * _102;
  float _233 = _230 * _103;
  float _234 = cb2_009x * _181;
  float _235 = cb2_009y * _182;
  float _236 = cb2_009z * _183;
  float _237 = _234 + _231;
  float _238 = _235 + _232;
  float _239 = _236 + _233;
  float _240 = cb2_010x * _191;
  float _241 = cb2_010y * _192;
  float _242 = cb2_010z * _193;
  float _243 = _237 + _240;
  float _244 = _238 + _241;
  float _245 = _239 + _242;
  float _246 = _228 * _113;
  float _247 = _229 * _114;
  float _248 = _230 * _115;
  float _249 = cb2_009x * _201;
  float _250 = cb2_009y * _202;
  float _251 = cb2_009z * _203;
  float _252 = cb2_010x * _211;
  float _253 = cb2_010y * _212;
  float _254 = cb2_010z * _213;
  float4 _255 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _259 = _246 - _243;
  float _260 = _259 + _249;
  float _261 = _260 + _252;
  float _262 = _247 - _244;
  float _263 = _262 + _250;
  float _264 = _263 + _253;
  float _265 = _248 - _245;
  float _266 = _265 + _251;
  float _267 = _266 + _254;
  float _268 = _261 * _130;
  float _269 = _264 * _130;
  float _270 = _267 * _130;
  float _271 = _268 + _243;
  float _272 = _269 + _244;
  float _273 = _270 + _245;
  float _274 = dot(float3(_271, _272, _273), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _278 = t0[0].SExposureData_020;
  float _280 = t0[0].SExposureData_004;
  float _282 = cb2_018x * 0.5f;
  float _283 = _282 * cb2_018y;
  float _284 = _280.x - _283;
  float _285 = cb2_018y * cb2_018x;
  float _286 = 1.0f / _285;
  float _287 = _284 * _286;
  float _288 = _274 / _278.x;
  float _289 = _288 * 5464.01611328125f;
  float _290 = _289 + 9.99999993922529e-09f;
  float _291 = log2(_290);
  float _292 = _291 - _284;
  float _293 = _292 * _286;
  float _294 = saturate(_293);
  float2 _295 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _294), 0.0f);
  float _298 = max(_295.y, 1.0000000116860974e-07f);
  float _299 = _295.x / _298;
  float _300 = _299 + _287;
  float _301 = _300 / _286;
  float _302 = _301 - _280.x;
  float _303 = -0.0f - _302;
  float _305 = _303 - cb2_027x;
  float _306 = max(0.0f, _305);
  float _308 = cb2_026z * _306;
  float _309 = _302 - cb2_027x;
  float _310 = max(0.0f, _309);
  float _312 = cb2_026w * _310;
  bool _313 = (_302 < 0.0f);
  float _314 = select(_313, _308, _312);
  float _315 = exp2(_314);
  float _316 = _315 * _271;
  float _317 = _315 * _272;
  float _318 = _315 * _273;
  float _323 = cb2_024y * _255.x;
  float _324 = cb2_024z * _255.y;
  float _325 = cb2_024w * _255.z;
  float _326 = _323 + _316;
  float _327 = _324 + _317;
  float _328 = _325 + _318;
  float _333 = _326 * cb2_025x;
  float _334 = _327 * cb2_025y;
  float _335 = _328 * cb2_025z;
  float _336 = dot(float3(_333, _334, _335), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _337 = t0[0].SExposureData_012;
  float _339 = _336 * 5464.01611328125f;
  float _340 = _339 * _337.x;
  float _341 = _340 + 9.99999993922529e-09f;
  float _342 = log2(_341);
  float _343 = _342 + 16.929765701293945f;
  float _344 = _343 * 0.05734497308731079f;
  float _345 = saturate(_344);
  float _346 = _345 * _345;
  float _347 = _345 * 2.0f;
  float _348 = 3.0f - _347;
  float _349 = _346 * _348;
  float _350 = _334 * 0.8450999855995178f;
  float _351 = _335 * 0.14589999616146088f;
  float _352 = _350 + _351;
  float _353 = _352 * 2.4890189170837402f;
  float _354 = _352 * 0.3754962384700775f;
  float _355 = _352 * 2.811495304107666f;
  float _356 = _352 * 5.519708156585693f;
  float _357 = _336 - _353;
  float _358 = _349 * _357;
  float _359 = _358 + _353;
  float _360 = _349 * 0.5f;
  float _361 = _360 + 0.5f;
  float _362 = _361 * _357;
  float _363 = _362 + _353;
  float _364 = _333 - _354;
  float _365 = _334 - _355;
  float _366 = _335 - _356;
  float _367 = _361 * _364;
  float _368 = _361 * _365;
  float _369 = _361 * _366;
  float _370 = _367 + _354;
  float _371 = _368 + _355;
  float _372 = _369 + _356;
  float _373 = 1.0f / _363;
  float _374 = _359 * _373;
  float _375 = _374 * _370;
  float _376 = _374 * _371;
  float _377 = _374 * _372;
  float _381 = cb2_020x * TEXCOORD0_centroid.x;
  float _382 = cb2_020y * TEXCOORD0_centroid.y;
  float _385 = _381 + cb2_020z;
  float _386 = _382 + cb2_020w;
  float _389 = dot(float2(_385, _386), float2(_385, _386));
  float _390 = 1.0f - _389;
  float _391 = saturate(_390);
  float _392 = log2(_391);
  float _393 = _392 * cb2_021w;
  float _394 = exp2(_393);
  float _398 = _375 - cb2_021x;
  float _399 = _376 - cb2_021y;
  float _400 = _377 - cb2_021z;
  float _401 = _398 * _394;
  float _402 = _399 * _394;
  float _403 = _400 * _394;
  float _404 = _401 + cb2_021x;
  float _405 = _402 + cb2_021y;
  float _406 = _403 + cb2_021z;
  float _407 = t0[0].SExposureData_000;
  float _409 = max(_278.x, 0.0010000000474974513f);
  float _410 = 1.0f / _409;
  float _411 = _410 * _407.x;
  bool _414 = ((uint)(cb2_069y) == 0);
  float _420;
  float _421;
  float _422;
  float _476;
  float _477;
  float _478;
  float _509;
  float _510;
  float _511;
  float _612;
  float _613;
  float _614;
  float _639;
  float _651;
  float _679;
  float _691;
  float _703;
  float _704;
  float _705;
  float _732;
  float _733;
  float _734;
  if (!_414) {
    float _416 = _411 * _404;
    float _417 = _411 * _405;
    float _418 = _411 * _406;
    _420 = _416;
    _421 = _417;
    _422 = _418;
  } else {
    _420 = _404;
    _421 = _405;
    _422 = _406;
  }
  float _423 = _420 * 0.6130970120429993f;
  float _424 = mad(0.33952298760414124f, _421, _423);
  float _425 = mad(0.04737899824976921f, _422, _424);
  float _426 = _420 * 0.07019399851560593f;
  float _427 = mad(0.9163540005683899f, _421, _426);
  float _428 = mad(0.013451999984681606f, _422, _427);
  float _429 = _420 * 0.02061600051820278f;
  float _430 = mad(0.10956999659538269f, _421, _429);
  float _431 = mad(0.8698149919509888f, _422, _430);
  float _432 = log2(_425);
  float _433 = log2(_428);
  float _434 = log2(_431);
  float _435 = _432 * 0.04211956635117531f;
  float _436 = _433 * 0.04211956635117531f;
  float _437 = _434 * 0.04211956635117531f;
  float _438 = _435 + 0.6252607107162476f;
  float _439 = _436 + 0.6252607107162476f;
  float _440 = _437 + 0.6252607107162476f;
  float4 _441 = t6.SampleLevel(s2_space2, float3(_438, _439, _440), 0.0f);
  bool _447 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_447 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _451 = cb2_017x * _441.x;
    float _452 = cb2_017x * _441.y;
    float _453 = cb2_017x * _441.z;
    float _455 = _451 + cb2_017y;
    float _456 = _452 + cb2_017y;
    float _457 = _453 + cb2_017y;
    float _458 = exp2(_455);
    float _459 = exp2(_456);
    float _460 = exp2(_457);
    float _461 = _458 + 1.0f;
    float _462 = _459 + 1.0f;
    float _463 = _460 + 1.0f;
    float _464 = 1.0f / _461;
    float _465 = 1.0f / _462;
    float _466 = 1.0f / _463;
    float _468 = cb2_017z * _464;
    float _469 = cb2_017z * _465;
    float _470 = cb2_017z * _466;
    float _472 = _468 + cb2_017w;
    float _473 = _469 + cb2_017w;
    float _474 = _470 + cb2_017w;
    _476 = _472;
    _477 = _473;
    _478 = _474;
  } else {
    _476 = _441.x;
    _477 = _441.y;
    _478 = _441.z;
  }
  float _479 = _476 * 23.0f;
  float _480 = _479 + -14.473931312561035f;
  float _481 = exp2(_480);
  float _482 = _477 * 23.0f;
  float _483 = _482 + -14.473931312561035f;
  float _484 = exp2(_483);
  float _485 = _478 * 23.0f;
  float _486 = _485 + -14.473931312561035f;
  float _487 = exp2(_486);
  float _494 = cb2_016x - _481;
  float _495 = cb2_016y - _484;
  float _496 = cb2_016z - _487;
  float _497 = _494 * cb2_016w;
  float _498 = _495 * cb2_016w;
  float _499 = _496 * cb2_016w;
  float _500 = _497 + _481;
  float _501 = _498 + _484;
  float _502 = _499 + _487;
  if (_447 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _505 = cb2_024x * _500;
    float _506 = cb2_024x * _501;
    float _507 = cb2_024x * _502;
    _509 = _505;
    _510 = _506;
    _511 = _507;
  } else {
    _509 = _500;
    _510 = _501;
    _511 = _502;
  }
  float _512 = _509 * 0.9708889722824097f;
  float _513 = mad(0.026962999254465103f, _510, _512);
  float _514 = mad(0.002148000057786703f, _511, _513);
  float _515 = _509 * 0.01088900025933981f;
  float _516 = mad(0.9869629740715027f, _510, _515);
  float _517 = mad(0.002148000057786703f, _511, _516);
  float _518 = mad(0.026962999254465103f, _510, _515);
  float _519 = mad(0.9621480107307434f, _511, _518);
  if (_447) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _524 = cb1_018y * 0.10000000149011612f;
        float _525 = log2(cb1_018z);
        float _526 = _525 + -13.287712097167969f;
        float _527 = _526 * 1.4929734468460083f;
        float _528 = _527 + 18.0f;
        float _529 = exp2(_528);
        float _530 = _529 * 0.18000000715255737f;
        float _531 = abs(_530);
        float _532 = log2(_531);
        float _533 = _532 * 1.5f;
        float _534 = exp2(_533);
        float _535 = _534 * _524;
        float _536 = _535 / cb1_018z;
        float _537 = _536 + -0.07636754959821701f;
        float _538 = _532 * 1.2750000953674316f;
        float _539 = exp2(_538);
        float _540 = _539 * 0.07636754959821701f;
        float _541 = cb1_018y * 0.011232397519052029f;
        float _542 = _541 * _534;
        float _543 = _542 / cb1_018z;
        float _544 = _540 - _543;
        float _545 = _539 + -0.11232396960258484f;
        float _546 = _545 * _524;
        float _547 = _546 / cb1_018z;
        float _548 = _547 * cb1_018z;
        float _549 = abs(_514);
        float _550 = abs(_517);
        float _551 = abs(_519);
        float _552 = log2(_549);
        float _553 = log2(_550);
        float _554 = log2(_551);
        float _555 = _552 * 1.5f;
        float _556 = _553 * 1.5f;
        float _557 = _554 * 1.5f;
        float _558 = exp2(_555);
        float _559 = exp2(_556);
        float _560 = exp2(_557);
        float _561 = _558 * _548;
        float _562 = _559 * _548;
        float _563 = _560 * _548;
        float _564 = _552 * 1.2750000953674316f;
        float _565 = _553 * 1.2750000953674316f;
        float _566 = _554 * 1.2750000953674316f;
        float _567 = exp2(_564);
        float _568 = exp2(_565);
        float _569 = exp2(_566);
        float _570 = _567 * _537;
        float _571 = _568 * _537;
        float _572 = _569 * _537;
        float _573 = _570 + _544;
        float _574 = _571 + _544;
        float _575 = _572 + _544;
        float _576 = _561 / _573;
        float _577 = _562 / _574;
        float _578 = _563 / _575;
        float _579 = _576 * 9.999999747378752e-05f;
        float _580 = _577 * 9.999999747378752e-05f;
        float _581 = _578 * 9.999999747378752e-05f;
        float _582 = 5000.0f / cb1_018y;
        float _583 = _579 * _582;
        float _584 = _580 * _582;
        float _585 = _581 * _582;
        _612 = _583;
        _613 = _584;
        _614 = _585;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_514, _517, _519));
      _612 = tonemapped.x, _613 = tonemapped.y, _614 = tonemapped.z;
    }
      } else {
        float _587 = _514 + 0.020616600289940834f;
        float _588 = _517 + 0.020616600289940834f;
        float _589 = _519 + 0.020616600289940834f;
        float _590 = _587 * _514;
        float _591 = _588 * _517;
        float _592 = _589 * _519;
        float _593 = _590 + -7.456949970219284e-05f;
        float _594 = _591 + -7.456949970219284e-05f;
        float _595 = _592 + -7.456949970219284e-05f;
        float _596 = _514 * 0.9837960004806519f;
        float _597 = _517 * 0.9837960004806519f;
        float _598 = _519 * 0.9837960004806519f;
        float _599 = _596 + 0.4336790144443512f;
        float _600 = _597 + 0.4336790144443512f;
        float _601 = _598 + 0.4336790144443512f;
        float _602 = _599 * _514;
        float _603 = _600 * _517;
        float _604 = _601 * _519;
        float _605 = _602 + 0.24617899954319f;
        float _606 = _603 + 0.24617899954319f;
        float _607 = _604 + 0.24617899954319f;
        float _608 = _593 / _605;
        float _609 = _594 / _606;
        float _610 = _595 / _607;
        _612 = _608;
        _613 = _609;
        _614 = _610;
      }
      float _615 = _612 * 1.6047500371932983f;
      float _616 = mad(-0.5310800075531006f, _613, _615);
      float _617 = mad(-0.07366999983787537f, _614, _616);
      float _618 = _612 * -0.10208000242710114f;
      float _619 = mad(1.1081299781799316f, _613, _618);
      float _620 = mad(-0.006049999967217445f, _614, _619);
      float _621 = _612 * -0.0032599999103695154f;
      float _622 = mad(-0.07275000214576721f, _613, _621);
      float _623 = mad(1.0760200023651123f, _614, _622);
      if (_447) {
        // float _625 = max(_617, 0.0f);
        // float _626 = max(_620, 0.0f);
        // float _627 = max(_623, 0.0f);
        // bool _628 = !(_625 >= 0.0030399328097701073f);
        // if (!_628) {
        //   float _630 = abs(_625);
        //   float _631 = log2(_630);
        //   float _632 = _631 * 0.4166666567325592f;
        //   float _633 = exp2(_632);
        //   float _634 = _633 * 1.0549999475479126f;
        //   float _635 = _634 + -0.054999999701976776f;
        //   _639 = _635;
        // } else {
        //   float _637 = _625 * 12.923210144042969f;
        //   _639 = _637;
        // }
        // bool _640 = !(_626 >= 0.0030399328097701073f);
        // if (!_640) {
        //   float _642 = abs(_626);
        //   float _643 = log2(_642);
        //   float _644 = _643 * 0.4166666567325592f;
        //   float _645 = exp2(_644);
        //   float _646 = _645 * 1.0549999475479126f;
        //   float _647 = _646 + -0.054999999701976776f;
        //   _651 = _647;
        // } else {
        //   float _649 = _626 * 12.923210144042969f;
        //   _651 = _649;
        // }
        // bool _652 = !(_627 >= 0.0030399328097701073f);
        // if (!_652) {
        //   float _654 = abs(_627);
        //   float _655 = log2(_654);
        //   float _656 = _655 * 0.4166666567325592f;
        //   float _657 = exp2(_656);
        //   float _658 = _657 * 1.0549999475479126f;
        //   float _659 = _658 + -0.054999999701976776f;
        //   _732 = _639;
        //   _733 = _651;
        //   _734 = _659;
        // } else {
        //   float _661 = _627 * 12.923210144042969f;
        //   _732 = _639;
        //   _733 = _651;
        //   _734 = _661;
        // }
        _732 = renodx::color::srgb::EncodeSafe(_617);
        _733 = renodx::color::srgb::EncodeSafe(_620);
        _734 = renodx::color::srgb::EncodeSafe(_623);

      } else {
        float _663 = saturate(_617);
        float _664 = saturate(_620);
        float _665 = saturate(_623);
        bool _666 = ((uint)(cb1_018w) == -2);
        if (!_666) {
          bool _668 = !(_663 >= 0.0030399328097701073f);
          if (!_668) {
            float _670 = abs(_663);
            float _671 = log2(_670);
            float _672 = _671 * 0.4166666567325592f;
            float _673 = exp2(_672);
            float _674 = _673 * 1.0549999475479126f;
            float _675 = _674 + -0.054999999701976776f;
            _679 = _675;
          } else {
            float _677 = _663 * 12.923210144042969f;
            _679 = _677;
          }
          bool _680 = !(_664 >= 0.0030399328097701073f);
          if (!_680) {
            float _682 = abs(_664);
            float _683 = log2(_682);
            float _684 = _683 * 0.4166666567325592f;
            float _685 = exp2(_684);
            float _686 = _685 * 1.0549999475479126f;
            float _687 = _686 + -0.054999999701976776f;
            _691 = _687;
          } else {
            float _689 = _664 * 12.923210144042969f;
            _691 = _689;
          }
          bool _692 = !(_665 >= 0.0030399328097701073f);
          if (!_692) {
            float _694 = abs(_665);
            float _695 = log2(_694);
            float _696 = _695 * 0.4166666567325592f;
            float _697 = exp2(_696);
            float _698 = _697 * 1.0549999475479126f;
            float _699 = _698 + -0.054999999701976776f;
            _703 = _679;
            _704 = _691;
            _705 = _699;
          } else {
            float _701 = _665 * 12.923210144042969f;
            _703 = _679;
            _704 = _691;
            _705 = _701;
          }
        } else {
          _703 = _663;
          _704 = _664;
          _705 = _665;
        }
        float _710 = abs(_703);
        float _711 = abs(_704);
        float _712 = abs(_705);
        float _713 = log2(_710);
        float _714 = log2(_711);
        float _715 = log2(_712);
        float _716 = _713 * cb2_000z;
        float _717 = _714 * cb2_000z;
        float _718 = _715 * cb2_000z;
        float _719 = exp2(_716);
        float _720 = exp2(_717);
        float _721 = exp2(_718);
        float _722 = _719 * cb2_000y;
        float _723 = _720 * cb2_000y;
        float _724 = _721 * cb2_000y;
        float _725 = _722 + cb2_000x;
        float _726 = _723 + cb2_000x;
        float _727 = _724 + cb2_000x;
        float _728 = saturate(_725);
        float _729 = saturate(_726);
        float _730 = saturate(_727);
        _732 = _728;
        _733 = _729;
        _734 = _730;
      }
      float _738 = cb2_023x * TEXCOORD0_centroid.x;
      float _739 = cb2_023y * TEXCOORD0_centroid.y;
      float _742 = _738 + cb2_023z;
      float _743 = _739 + cb2_023w;
      float4 _746 = t10.SampleLevel(s0_space2, float2(_742, _743), 0.0f);
      float _748 = _746.x + -0.5f;
      float _749 = _748 * cb2_022x;
      float _750 = _749 + 0.5f;
      float _751 = _750 * 2.0f;
      float _752 = _751 * _732;
      float _753 = _751 * _733;
      float _754 = _751 * _734;
      float _758 = float((uint)(cb2_019z));
      float _759 = float((uint)(cb2_019w));
      float _760 = _758 + SV_Position.x;
      float _761 = _759 + SV_Position.y;
      uint _762 = uint(_760);
      uint _763 = uint(_761);
      uint _766 = cb2_019x + -1u;
      uint _767 = cb2_019y + -1u;
      int _768 = _762 & _766;
      int _769 = _763 & _767;
      float4 _770 = t3.Load(int3(_768, _769, 0));
      float _774 = _770.x * 2.0f;
      float _775 = _770.y * 2.0f;
      float _776 = _770.z * 2.0f;
      float _777 = _774 + -1.0f;
      float _778 = _775 + -1.0f;
      float _779 = _776 + -1.0f;
      float _780 = _777 * cb2_025w;
      float _781 = _778 * cb2_025w;
      float _782 = _779 * cb2_025w;
      float _783 = _780 + _752;
      float _784 = _781 + _753;
      float _785 = _782 + _754;
      float _786 = dot(float3(_783, _784, _785), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _783;
      SV_Target.y = _784;
      SV_Target.z = _785;
      SV_Target.w = _786;
      SV_Target_1.x = _786;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
