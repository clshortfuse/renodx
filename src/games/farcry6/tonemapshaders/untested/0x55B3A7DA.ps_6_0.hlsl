#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture3D<float2> t6 : register(t6);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _18 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _20 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _24 = max(_20.x, 0.0f);
  float _25 = max(_20.y, 0.0f);
  float _26 = max(_20.z, 0.0f);
  float _27 = min(_24, 65000.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float4 _30 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _35 = max(_30.x, 0.0f);
  float _36 = max(_30.y, 0.0f);
  float _37 = max(_30.z, 0.0f);
  float _38 = max(_30.w, 0.0f);
  float _39 = min(_35, 5000.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _45 = _18.x * cb0_028z;
  float _46 = _45 + cb0_028x;
  float _47 = cb2_027w / _46;
  float _48 = 1.0f - _47;
  float _49 = abs(_48);
  float _51 = cb2_027y * _49;
  float _53 = _51 - cb2_027z;
  float _54 = saturate(_53);
  float _55 = max(_54, _42);
  float _56 = saturate(_55);
  float _60 = cb2_013x * TEXCOORD0_centroid.x;
  float _61 = cb2_013y * TEXCOORD0_centroid.y;
  float _64 = _60 + cb2_013z;
  float _65 = _61 + cb2_013w;
  float _68 = dot(float2(_64, _65), float2(_64, _65));
  float _69 = abs(_68);
  float _70 = log2(_69);
  float _71 = _70 * cb2_014x;
  float _72 = exp2(_71);
  float _73 = saturate(_72);
  float _77 = cb2_011x * TEXCOORD0_centroid.x;
  float _78 = cb2_011y * TEXCOORD0_centroid.y;
  float _81 = _77 + cb2_011z;
  float _82 = _78 + cb2_011w;
  float _83 = _81 * _73;
  float _84 = _82 * _73;
  float _85 = _83 + TEXCOORD0_centroid.x;
  float _86 = _84 + TEXCOORD0_centroid.y;
  float _90 = cb2_012x * TEXCOORD0_centroid.x;
  float _91 = cb2_012y * TEXCOORD0_centroid.y;
  float _94 = _90 + cb2_012z;
  float _95 = _91 + cb2_012w;
  float _96 = _94 * _73;
  float _97 = _95 * _73;
  float _98 = _96 + TEXCOORD0_centroid.x;
  float _99 = _97 + TEXCOORD0_centroid.y;
  float4 _100 = t1.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _104 = max(_100.x, 0.0f);
  float _105 = max(_100.y, 0.0f);
  float _106 = max(_100.z, 0.0f);
  float _107 = min(_104, 65000.0f);
  float _108 = min(_105, 65000.0f);
  float _109 = min(_106, 65000.0f);
  float4 _110 = t1.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _114 = max(_110.x, 0.0f);
  float _115 = max(_110.y, 0.0f);
  float _116 = max(_110.z, 0.0f);
  float _117 = min(_114, 65000.0f);
  float _118 = min(_115, 65000.0f);
  float _119 = min(_116, 65000.0f);
  float4 _120 = t3.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _124 = max(_120.x, 0.0f);
  float _125 = max(_120.y, 0.0f);
  float _126 = max(_120.z, 0.0f);
  float _127 = min(_124, 5000.0f);
  float _128 = min(_125, 5000.0f);
  float _129 = min(_126, 5000.0f);
  float4 _130 = t3.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _134 = max(_130.x, 0.0f);
  float _135 = max(_130.y, 0.0f);
  float _136 = max(_130.z, 0.0f);
  float _137 = min(_134, 5000.0f);
  float _138 = min(_135, 5000.0f);
  float _139 = min(_136, 5000.0f);
  float _144 = 1.0f - cb2_009x;
  float _145 = 1.0f - cb2_009y;
  float _146 = 1.0f - cb2_009z;
  float _151 = _144 - cb2_010x;
  float _152 = _145 - cb2_010y;
  float _153 = _146 - cb2_010z;
  float _154 = saturate(_151);
  float _155 = saturate(_152);
  float _156 = saturate(_153);
  float _157 = _154 * _27;
  float _158 = _155 * _28;
  float _159 = _156 * _29;
  float _160 = cb2_009x * _107;
  float _161 = cb2_009y * _108;
  float _162 = cb2_009z * _109;
  float _163 = _160 + _157;
  float _164 = _161 + _158;
  float _165 = _162 + _159;
  float _166 = cb2_010x * _117;
  float _167 = cb2_010y * _118;
  float _168 = cb2_010z * _119;
  float _169 = _163 + _166;
  float _170 = _164 + _167;
  float _171 = _165 + _168;
  float _172 = _154 * _39;
  float _173 = _155 * _40;
  float _174 = _156 * _41;
  float _175 = cb2_009x * _127;
  float _176 = cb2_009y * _128;
  float _177 = cb2_009z * _129;
  float _178 = cb2_010x * _137;
  float _179 = cb2_010y * _138;
  float _180 = cb2_010z * _139;
  float4 _181 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _185 = _172 - _169;
  float _186 = _185 + _175;
  float _187 = _186 + _178;
  float _188 = _173 - _170;
  float _189 = _188 + _176;
  float _190 = _189 + _179;
  float _191 = _174 - _171;
  float _192 = _191 + _177;
  float _193 = _192 + _180;
  float _194 = _187 * _56;
  float _195 = _190 * _56;
  float _196 = _193 * _56;
  float _197 = _194 + _169;
  float _198 = _195 + _170;
  float _199 = _196 + _171;
  float _200 = dot(float3(_197, _198, _199), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _204 = t0[0].SExposureData_020;
  float _206 = t0[0].SExposureData_004;
  float _208 = cb2_018x * 0.5f;
  float _209 = _208 * cb2_018y;
  float _210 = _206.x - _209;
  float _211 = cb2_018y * cb2_018x;
  float _212 = 1.0f / _211;
  float _213 = _210 * _212;
  float _214 = _200 / _204.x;
  float _215 = _214 * 5464.01611328125f;
  float _216 = _215 + 9.99999993922529e-09f;
  float _217 = log2(_216);
  float _218 = _217 - _210;
  float _219 = _218 * _212;
  float _220 = saturate(_219);
  float2 _221 = t6.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _220), 0.0f);
  float _224 = max(_221.y, 1.0000000116860974e-07f);
  float _225 = _221.x / _224;
  float _226 = _225 + _213;
  float _227 = _226 / _212;
  float _228 = _227 - _206.x;
  float _229 = -0.0f - _228;
  float _231 = _229 - cb2_027x;
  float _232 = max(0.0f, _231);
  float _235 = cb2_026z * _232;
  float _236 = _228 - cb2_027x;
  float _237 = max(0.0f, _236);
  float _239 = cb2_026w * _237;
  bool _240 = (_228 < 0.0f);
  float _241 = select(_240, _235, _239);
  float _242 = exp2(_241);
  float _243 = _242 * _197;
  float _244 = _242 * _198;
  float _245 = _242 * _199;
  float _250 = cb2_024y * _181.x;
  float _251 = cb2_024z * _181.y;
  float _252 = cb2_024w * _181.z;
  float _253 = _250 + _243;
  float _254 = _251 + _244;
  float _255 = _252 + _245;
  float _260 = _253 * cb2_025x;
  float _261 = _254 * cb2_025y;
  float _262 = _255 * cb2_025z;
  float _263 = dot(float3(_260, _261, _262), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _264 = t0[0].SExposureData_012;
  float _266 = _263 * 5464.01611328125f;
  float _267 = _266 * _264.x;
  float _268 = _267 + 9.99999993922529e-09f;
  float _269 = log2(_268);
  float _270 = _269 + 16.929765701293945f;
  float _271 = _270 * 0.05734497308731079f;
  float _272 = saturate(_271);
  float _273 = _272 * _272;
  float _274 = _272 * 2.0f;
  float _275 = 3.0f - _274;
  float _276 = _273 * _275;
  float _277 = _261 * 0.8450999855995178f;
  float _278 = _262 * 0.14589999616146088f;
  float _279 = _277 + _278;
  float _280 = _279 * 2.4890189170837402f;
  float _281 = _279 * 0.3754962384700775f;
  float _282 = _279 * 2.811495304107666f;
  float _283 = _279 * 5.519708156585693f;
  float _284 = _263 - _280;
  float _285 = _276 * _284;
  float _286 = _285 + _280;
  float _287 = _276 * 0.5f;
  float _288 = _287 + 0.5f;
  float _289 = _288 * _284;
  float _290 = _289 + _280;
  float _291 = _260 - _281;
  float _292 = _261 - _282;
  float _293 = _262 - _283;
  float _294 = _288 * _291;
  float _295 = _288 * _292;
  float _296 = _288 * _293;
  float _297 = _294 + _281;
  float _298 = _295 + _282;
  float _299 = _296 + _283;
  float _300 = 1.0f / _290;
  float _301 = _286 * _300;
  float _302 = _301 * _297;
  float _303 = _301 * _298;
  float _304 = _301 * _299;
  float _308 = cb2_020x * TEXCOORD0_centroid.x;
  float _309 = cb2_020y * TEXCOORD0_centroid.y;
  float _312 = _308 + cb2_020z;
  float _313 = _309 + cb2_020w;
  float _316 = dot(float2(_312, _313), float2(_312, _313));
  float _317 = 1.0f - _316;
  float _318 = saturate(_317);
  float _319 = log2(_318);
  float _320 = _319 * cb2_021w;
  float _321 = exp2(_320);
  float _325 = _302 - cb2_021x;
  float _326 = _303 - cb2_021y;
  float _327 = _304 - cb2_021z;
  float _328 = _325 * _321;
  float _329 = _326 * _321;
  float _330 = _327 * _321;
  float _331 = _328 + cb2_021x;
  float _332 = _329 + cb2_021y;
  float _333 = _330 + cb2_021z;
  float _334 = t0[0].SExposureData_000;
  float _336 = max(_204.x, 0.0010000000474974513f);
  float _337 = 1.0f / _336;
  float _338 = _337 * _334.x;
  bool _341 = ((uint)(cb2_069y) == 0);
  float _347;
  float _348;
  float _349;
  float _403;
  float _404;
  float _405;
  float _480;
  float _481;
  float _482;
  float _632;
  float _669;
  float _670;
  float _671;
  float _700;
  float _701;
  float _702;
  float _783;
  float _784;
  float _785;
  float _791;
  float _792;
  float _793;
  float _807;
  float _808;
  float _809;
  float _834;
  float _846;
  float _874;
  float _886;
  float _898;
  float _899;
  float _900;
  float _927;
  float _928;
  float _929;
  if (!_341) {
    float _343 = _338 * _331;
    float _344 = _338 * _332;
    float _345 = _338 * _333;
    _347 = _343;
    _348 = _344;
    _349 = _345;
  } else {
    _347 = _331;
    _348 = _332;
    _349 = _333;
  }
  float _350 = _347 * 0.6130970120429993f;
  float _351 = mad(0.33952298760414124f, _348, _350);
  float _352 = mad(0.04737899824976921f, _349, _351);
  float _353 = _347 * 0.07019399851560593f;
  float _354 = mad(0.9163540005683899f, _348, _353);
  float _355 = mad(0.013451999984681606f, _349, _354);
  float _356 = _347 * 0.02061600051820278f;
  float _357 = mad(0.10956999659538269f, _348, _356);
  float _358 = mad(0.8698149919509888f, _349, _357);
  float _359 = log2(_352);
  float _360 = log2(_355);
  float _361 = log2(_358);
  float _362 = _359 * 0.04211956635117531f;
  float _363 = _360 * 0.04211956635117531f;
  float _364 = _361 * 0.04211956635117531f;
  float _365 = _362 + 0.6252607107162476f;
  float _366 = _363 + 0.6252607107162476f;
  float _367 = _364 + 0.6252607107162476f;
  float4 _368 = t5.SampleLevel(s2_space2, float3(_365, _366, _367), 0.0f);
  bool _374 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _378 = cb2_017x * _368.x;
    float _379 = cb2_017x * _368.y;
    float _380 = cb2_017x * _368.z;
    float _382 = _378 + cb2_017y;
    float _383 = _379 + cb2_017y;
    float _384 = _380 + cb2_017y;
    float _385 = exp2(_382);
    float _386 = exp2(_383);
    float _387 = exp2(_384);
    float _388 = _385 + 1.0f;
    float _389 = _386 + 1.0f;
    float _390 = _387 + 1.0f;
    float _391 = 1.0f / _388;
    float _392 = 1.0f / _389;
    float _393 = 1.0f / _390;
    float _395 = cb2_017z * _391;
    float _396 = cb2_017z * _392;
    float _397 = cb2_017z * _393;
    float _399 = _395 + cb2_017w;
    float _400 = _396 + cb2_017w;
    float _401 = _397 + cb2_017w;
    _403 = _399;
    _404 = _400;
    _405 = _401;
  } else {
    _403 = _368.x;
    _404 = _368.y;
    _405 = _368.z;
  }
  float _406 = _403 * 23.0f;
  float _407 = _406 + -14.473931312561035f;
  float _408 = exp2(_407);
  float _409 = _404 * 23.0f;
  float _410 = _409 + -14.473931312561035f;
  float _411 = exp2(_410);
  float _412 = _405 * 23.0f;
  float _413 = _412 + -14.473931312561035f;
  float _414 = exp2(_413);
  float _415 = dot(float3(_408, _411, _414), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _420 = dot(float3(_408, _411, _414), float3(_408, _411, _414));
  float _421 = rsqrt(_420);
  float _422 = _421 * _408;
  float _423 = _421 * _411;
  float _424 = _421 * _414;
  float _425 = cb2_001x - _422;
  float _426 = cb2_001y - _423;
  float _427 = cb2_001z - _424;
  float _428 = dot(float3(_425, _426, _427), float3(_425, _426, _427));
  float _431 = cb2_002z * _428;
  float _433 = _431 + cb2_002w;
  float _434 = saturate(_433);
  float _436 = cb2_002x * _434;
  float _437 = _415 - _408;
  float _438 = _415 - _411;
  float _439 = _415 - _414;
  float _440 = _436 * _437;
  float _441 = _436 * _438;
  float _442 = _436 * _439;
  float _443 = _440 + _408;
  float _444 = _441 + _411;
  float _445 = _442 + _414;
  float _447 = cb2_002y * _434;
  float _448 = 0.10000000149011612f - _443;
  float _449 = 0.10000000149011612f - _444;
  float _450 = 0.10000000149011612f - _445;
  float _451 = _448 * _447;
  float _452 = _449 * _447;
  float _453 = _450 * _447;
  float _454 = _451 + _443;
  float _455 = _452 + _444;
  float _456 = _453 + _445;
  float _457 = saturate(_454);
  float _458 = saturate(_455);
  float _459 = saturate(_456);
  float _465 = cb2_016x - _457;
  float _466 = cb2_016y - _458;
  float _467 = cb2_016z - _459;
  float _468 = _465 * cb2_016w;
  float _469 = _466 * cb2_016w;
  float _470 = _467 * cb2_016w;
  float _471 = _468 + _457;
  float _472 = _469 + _458;
  float _473 = _470 + _459;
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _476 = cb2_024x * _471;
    float _477 = cb2_024x * _472;
    float _478 = cb2_024x * _473;
    _480 = _476;
    _481 = _477;
    _482 = _478;
  } else {
    _480 = _471;
    _481 = _472;
    _482 = _473;
  }
  float _485 = _480 * 0.9708889722824097f;
  float _486 = mad(0.026962999254465103f, _481, _485);
  float _487 = mad(0.002148000057786703f, _482, _486);
  float _488 = _480 * 0.01088900025933981f;
  float _489 = mad(0.9869629740715027f, _481, _488);
  float _490 = mad(0.002148000057786703f, _482, _489);
  float _491 = mad(0.026962999254465103f, _481, _488);
  float _492 = mad(0.9621480107307434f, _482, _491);
  float _493 = max(_487, 0.0f);
  float _494 = max(_490, 0.0f);
  float _495 = max(_492, 0.0f);
  float _496 = min(_493, cb2_095y);
  float _497 = min(_494, cb2_095y);
  float _498 = min(_495, cb2_095y);
  bool _501 = ((uint)(cb2_095x) == 0);
  bool _504 = ((uint)(cb2_094w) == 0);
  bool _506 = ((uint)(cb2_094z) == 0);
  bool _508 = ((uint)(cb2_094y) != 0);
  bool _510 = ((uint)(cb2_094x) == 0);
  bool _512 = ((uint)(cb2_069z) != 0);
  float _559 = asfloat((uint)(cb2_075y));
  float _560 = asfloat((uint)(cb2_075z));
  float _561 = asfloat((uint)(cb2_075w));
  float _562 = asfloat((uint)(cb2_074z));
  float _563 = asfloat((uint)(cb2_074w));
  float _564 = asfloat((uint)(cb2_075x));
  float _565 = asfloat((uint)(cb2_073w));
  float _566 = asfloat((uint)(cb2_074x));
  float _567 = asfloat((uint)(cb2_074y));
  float _568 = asfloat((uint)(cb2_077x));
  float _569 = asfloat((uint)(cb2_077y));
  float _570 = asfloat((uint)(cb2_079x));
  float _571 = asfloat((uint)(cb2_079y));
  float _572 = asfloat((uint)(cb2_079z));
  float _573 = asfloat((uint)(cb2_078y));
  float _574 = asfloat((uint)(cb2_078z));
  float _575 = asfloat((uint)(cb2_078w));
  float _576 = asfloat((uint)(cb2_077z));
  float _577 = asfloat((uint)(cb2_077w));
  float _578 = asfloat((uint)(cb2_078x));
  float _579 = asfloat((uint)(cb2_072y));
  float _580 = asfloat((uint)(cb2_072z));
  float _581 = asfloat((uint)(cb2_072w));
  float _582 = asfloat((uint)(cb2_071x));
  float _583 = asfloat((uint)(cb2_071y));
  float _584 = asfloat((uint)(cb2_076x));
  float _585 = asfloat((uint)(cb2_070w));
  float _586 = asfloat((uint)(cb2_070x));
  float _587 = asfloat((uint)(cb2_070y));
  float _588 = asfloat((uint)(cb2_070z));
  float _589 = asfloat((uint)(cb2_073x));
  float _590 = asfloat((uint)(cb2_073y));
  float _591 = asfloat((uint)(cb2_073z));
  float _592 = asfloat((uint)(cb2_071z));
  float _593 = asfloat((uint)(cb2_071w));
  float _594 = asfloat((uint)(cb2_072x));
  float _595 = max(_497, _498);
  float _596 = max(_496, _595);
  float _597 = 1.0f / _596;
  float _598 = _597 * _496;
  float _599 = _597 * _497;
  float _600 = _597 * _498;
  float _601 = abs(_598);
  float _602 = log2(_601);
  float _603 = _602 * _586;
  float _604 = exp2(_603);
  float _605 = abs(_599);
  float _606 = log2(_605);
  float _607 = _606 * _587;
  float _608 = exp2(_607);
  float _609 = abs(_600);
  float _610 = log2(_609);
  float _611 = _610 * _588;
  float _612 = exp2(_611);
  if (_508) {
    float _615 = asfloat((uint)(cb2_076w));
    float _617 = asfloat((uint)(cb2_076z));
    float _619 = asfloat((uint)(cb2_076y));
    float _620 = _617 * _497;
    float _621 = _619 * _496;
    float _622 = _615 * _498;
    float _623 = _621 + _622;
    float _624 = _623 + _620;
    _632 = _624;
  } else {
    float _626 = _593 * _497;
    float _627 = _592 * _496;
    float _628 = _594 * _498;
    float _629 = _626 + _627;
    float _630 = _629 + _628;
    _632 = _630;
  }
  float _633 = abs(_632);
  float _634 = log2(_633);
  float _635 = _634 * _585;
  float _636 = exp2(_635);
  float _637 = log2(_636);
  float _638 = _637 * _584;
  float _639 = exp2(_638);
  float _640 = select(_512, _639, _636);
  float _641 = _640 * _582;
  float _642 = _641 + _583;
  float _643 = 1.0f / _642;
  float _644 = _643 * _636;
  if (_508) {
    if (!_510) {
      float _647 = _604 * _576;
      float _648 = _608 * _577;
      float _649 = _612 * _578;
      float _650 = _648 + _647;
      float _651 = _650 + _649;
      float _652 = _608 * _574;
      float _653 = _604 * _573;
      float _654 = _612 * _575;
      float _655 = _652 + _653;
      float _656 = _655 + _654;
      float _657 = _612 * _572;
      float _658 = _608 * _571;
      float _659 = _604 * _570;
      float _660 = _658 + _659;
      float _661 = _660 + _657;
      float _662 = max(_656, _661);
      float _663 = max(_651, _662);
      float _664 = 1.0f / _663;
      float _665 = _664 * _651;
      float _666 = _664 * _656;
      float _667 = _664 * _661;
      _669 = _665;
      _670 = _666;
      _671 = _667;
    } else {
      _669 = _604;
      _670 = _608;
      _671 = _612;
    }
    float _672 = _669 * _569;
    float _673 = exp2(_672);
    float _674 = _673 * _568;
    float _675 = saturate(_674);
    float _676 = _669 * _568;
    float _677 = _669 - _676;
    float _678 = saturate(_677);
    float _679 = max(_568, _678);
    float _680 = min(_679, _675);
    float _681 = _670 * _569;
    float _682 = exp2(_681);
    float _683 = _682 * _568;
    float _684 = saturate(_683);
    float _685 = _670 * _568;
    float _686 = _670 - _685;
    float _687 = saturate(_686);
    float _688 = max(_568, _687);
    float _689 = min(_688, _684);
    float _690 = _671 * _569;
    float _691 = exp2(_690);
    float _692 = _691 * _568;
    float _693 = saturate(_692);
    float _694 = _671 * _568;
    float _695 = _671 - _694;
    float _696 = saturate(_695);
    float _697 = max(_568, _696);
    float _698 = min(_697, _693);
    _700 = _680;
    _701 = _689;
    _702 = _698;
  } else {
    _700 = _604;
    _701 = _608;
    _702 = _612;
  }
  float _703 = _700 * _592;
  float _704 = _701 * _593;
  float _705 = _704 + _703;
  float _706 = _702 * _594;
  float _707 = _705 + _706;
  float _708 = 1.0f / _707;
  float _709 = _708 * _644;
  float _710 = saturate(_709);
  float _711 = _710 * _700;
  float _712 = saturate(_711);
  float _713 = _710 * _701;
  float _714 = saturate(_713);
  float _715 = _710 * _702;
  float _716 = saturate(_715);
  float _717 = _712 * _579;
  float _718 = _579 - _717;
  float _719 = _714 * _580;
  float _720 = _580 - _719;
  float _721 = _716 * _581;
  float _722 = _581 - _721;
  float _723 = _716 * _594;
  float _724 = _712 * _592;
  float _725 = _714 * _593;
  float _726 = _644 - _724;
  float _727 = _726 - _725;
  float _728 = _727 - _723;
  float _729 = saturate(_728);
  float _730 = _720 * _593;
  float _731 = _718 * _592;
  float _732 = _722 * _594;
  float _733 = _730 + _731;
  float _734 = _733 + _732;
  float _735 = 1.0f / _734;
  float _736 = _735 * _729;
  float _737 = _736 * _718;
  float _738 = _737 + _712;
  float _739 = saturate(_738);
  float _740 = _736 * _720;
  float _741 = _740 + _714;
  float _742 = saturate(_741);
  float _743 = _736 * _722;
  float _744 = _743 + _716;
  float _745 = saturate(_744);
  float _746 = _745 * _594;
  float _747 = _739 * _592;
  float _748 = _742 * _593;
  float _749 = _644 - _747;
  float _750 = _749 - _748;
  float _751 = _750 - _746;
  float _752 = saturate(_751);
  float _753 = _752 * _589;
  float _754 = _753 + _739;
  float _755 = saturate(_754);
  float _756 = _752 * _590;
  float _757 = _756 + _742;
  float _758 = saturate(_757);
  float _759 = _752 * _591;
  float _760 = _759 + _745;
  float _761 = saturate(_760);
  if (!_506) {
    float _763 = _755 * _565;
    float _764 = _758 * _566;
    float _765 = _761 * _567;
    float _766 = _764 + _763;
    float _767 = _766 + _765;
    float _768 = _758 * _563;
    float _769 = _755 * _562;
    float _770 = _761 * _564;
    float _771 = _768 + _769;
    float _772 = _771 + _770;
    float _773 = _761 * _561;
    float _774 = _758 * _560;
    float _775 = _755 * _559;
    float _776 = _774 + _775;
    float _777 = _776 + _773;
    if (!_504) {
      float _779 = saturate(_767);
      float _780 = saturate(_772);
      float _781 = saturate(_777);
      _783 = _781;
      _784 = _780;
      _785 = _779;
    } else {
      _783 = _777;
      _784 = _772;
      _785 = _767;
    }
  } else {
    _783 = _761;
    _784 = _758;
    _785 = _755;
  }
  if (!_501) {
    float _787 = _785 * _565;
    float _788 = _784 * _565;
    float _789 = _783 * _565;
    _791 = _789;
    _792 = _788;
    _793 = _787;
  } else {
    _791 = _783;
    _792 = _784;
    _793 = _785;
  }
  if (_374) {
    float _797 = cb1_018z * 9.999999747378752e-05f;
    float _798 = _797 * _793;
    float _799 = _797 * _792;
    float _800 = _797 * _791;
    float _802 = 5000.0f / cb1_018y;
    float _803 = _798 * _802;
    float _804 = _799 * _802;
    float _805 = _800 * _802;
    _807 = _803;
    _808 = _804;
    _809 = _805;
  } else {
    _807 = _793;
    _808 = _792;
    _809 = _791;
  }
  float _810 = _807 * 1.6047500371932983f;
  float _811 = mad(-0.5310800075531006f, _808, _810);
  float _812 = mad(-0.07366999983787537f, _809, _811);
  float _813 = _807 * -0.10208000242710114f;
  float _814 = mad(1.1081299781799316f, _808, _813);
  float _815 = mad(-0.006049999967217445f, _809, _814);
  float _816 = _807 * -0.0032599999103695154f;
  float _817 = mad(-0.07275000214576721f, _808, _816);
  float _818 = mad(1.0760200023651123f, _809, _817);
  if (_374) {
    // float _820 = max(_812, 0.0f);
    // float _821 = max(_815, 0.0f);
    // float _822 = max(_818, 0.0f);
    // bool _823 = !(_820 >= 0.0030399328097701073f);
    // if (!_823) {
    //   float _825 = abs(_820);
    //   float _826 = log2(_825);
    //   float _827 = _826 * 0.4166666567325592f;
    //   float _828 = exp2(_827);
    //   float _829 = _828 * 1.0549999475479126f;
    //   float _830 = _829 + -0.054999999701976776f;
    //   _834 = _830;
    // } else {
    //   float _832 = _820 * 12.923210144042969f;
    //   _834 = _832;
    // }
    // bool _835 = !(_821 >= 0.0030399328097701073f);
    // if (!_835) {
    //   float _837 = abs(_821);
    //   float _838 = log2(_837);
    //   float _839 = _838 * 0.4166666567325592f;
    //   float _840 = exp2(_839);
    //   float _841 = _840 * 1.0549999475479126f;
    //   float _842 = _841 + -0.054999999701976776f;
    //   _846 = _842;
    // } else {
    //   float _844 = _821 * 12.923210144042969f;
    //   _846 = _844;
    // }
    // bool _847 = !(_822 >= 0.0030399328097701073f);
    // if (!_847) {
    //   float _849 = abs(_822);
    //   float _850 = log2(_849);
    //   float _851 = _850 * 0.4166666567325592f;
    //   float _852 = exp2(_851);
    //   float _853 = _852 * 1.0549999475479126f;
    //   float _854 = _853 + -0.054999999701976776f;
    //   _927 = _834;
    //   _928 = _846;
    //   _929 = _854;
    // } else {
    //   float _856 = _822 * 12.923210144042969f;
    //   _927 = _834;
    //   _928 = _846;
    //   _929 = _856;
    // }
    _927 = renodx::color::srgb::EncodeSafe(_812);
    _928 = renodx::color::srgb::EncodeSafe(_815);
    _929 = renodx::color::srgb::EncodeSafe(_818);

  } else {
    float _858 = saturate(_812);
    float _859 = saturate(_815);
    float _860 = saturate(_818);
    bool _861 = ((uint)(cb1_018w) == -2);
    if (!_861) {
      bool _863 = !(_858 >= 0.0030399328097701073f);
      if (!_863) {
        float _865 = abs(_858);
        float _866 = log2(_865);
        float _867 = _866 * 0.4166666567325592f;
        float _868 = exp2(_867);
        float _869 = _868 * 1.0549999475479126f;
        float _870 = _869 + -0.054999999701976776f;
        _874 = _870;
      } else {
        float _872 = _858 * 12.923210144042969f;
        _874 = _872;
      }
      bool _875 = !(_859 >= 0.0030399328097701073f);
      if (!_875) {
        float _877 = abs(_859);
        float _878 = log2(_877);
        float _879 = _878 * 0.4166666567325592f;
        float _880 = exp2(_879);
        float _881 = _880 * 1.0549999475479126f;
        float _882 = _881 + -0.054999999701976776f;
        _886 = _882;
      } else {
        float _884 = _859 * 12.923210144042969f;
        _886 = _884;
      }
      bool _887 = !(_860 >= 0.0030399328097701073f);
      if (!_887) {
        float _889 = abs(_860);
        float _890 = log2(_889);
        float _891 = _890 * 0.4166666567325592f;
        float _892 = exp2(_891);
        float _893 = _892 * 1.0549999475479126f;
        float _894 = _893 + -0.054999999701976776f;
        _898 = _874;
        _899 = _886;
        _900 = _894;
      } else {
        float _896 = _860 * 12.923210144042969f;
        _898 = _874;
        _899 = _886;
        _900 = _896;
      }
    } else {
      _898 = _858;
      _899 = _859;
      _900 = _860;
    }
    float _905 = abs(_898);
    float _906 = abs(_899);
    float _907 = abs(_900);
    float _908 = log2(_905);
    float _909 = log2(_906);
    float _910 = log2(_907);
    float _911 = _908 * cb2_000z;
    float _912 = _909 * cb2_000z;
    float _913 = _910 * cb2_000z;
    float _914 = exp2(_911);
    float _915 = exp2(_912);
    float _916 = exp2(_913);
    float _917 = _914 * cb2_000y;
    float _918 = _915 * cb2_000y;
    float _919 = _916 * cb2_000y;
    float _920 = _917 + cb2_000x;
    float _921 = _918 + cb2_000x;
    float _922 = _919 + cb2_000x;
    float _923 = saturate(_920);
    float _924 = saturate(_921);
    float _925 = saturate(_922);
    _927 = _923;
    _928 = _924;
    _929 = _925;
  }
  float _930 = dot(float3(_927, _928, _929), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _927;
  SV_Target.y = _928;
  SV_Target.z = _929;
  SV_Target.w = _930;
  SV_Target_1.x = _930;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
