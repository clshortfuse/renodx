#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = _26.x * 6.283199787139893f;
  float _31 = cos(_30);
  float _32 = sin(_30);
  float _33 = _31 * _26.z;
  float _34 = _32 * _26.z;
  float _35 = _33 + TEXCOORD0_centroid.x;
  float _36 = _34 + TEXCOORD0_centroid.y;
  float _37 = _35 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _33;
  float _42 = _36 * 10.0f;
  float _43 = 10.0f - _42;
  float _44 = min(_42, _43);
  float _45 = saturate(_44);
  float _46 = _45 * _34;
  float _47 = _41 + TEXCOORD0_centroid.x;
  float _48 = _46 + TEXCOORD0_centroid.y;
  float4 _49 = t7.SampleLevel(s2_space2, float2(_47, _48), 0.0f);
  float _51 = _49.w * _41;
  float _52 = _49.w * _46;
  float _53 = 1.0f - _26.y;
  float _54 = saturate(_53);
  float _55 = _51 * _54;
  float _56 = _52 * _54;
  float _57 = _55 + TEXCOORD0_centroid.x;
  float _58 = _56 + TEXCOORD0_centroid.y;
  float4 _59 = t7.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  bool _61 = (_59.y > 0.0f);
  float _62 = select(_61, TEXCOORD0_centroid.x, _57);
  float _63 = select(_61, TEXCOORD0_centroid.y, _58);
  float4 _64 = t1.SampleLevel(s4_space2, float2(_62, _63), 0.0f);
  float _68 = max(_64.x, 0.0f);
  float _69 = max(_64.y, 0.0f);
  float _70 = max(_64.z, 0.0f);
  float _71 = min(_68, 65000.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float4 _74 = t4.SampleLevel(s2_space2, float2(_62, _63), 0.0f);
  float _79 = max(_74.x, 0.0f);
  float _80 = max(_74.y, 0.0f);
  float _81 = max(_74.z, 0.0f);
  float _82 = max(_74.w, 0.0f);
  float _83 = min(_79, 5000.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _89 = _24.x * cb0_028z;
  float _90 = _89 + cb0_028x;
  float _91 = cb2_027w / _90;
  float _92 = 1.0f - _91;
  float _93 = abs(_92);
  float _95 = cb2_027y * _93;
  float _97 = _95 - cb2_027z;
  float _98 = saturate(_97);
  float _99 = max(_98, _86);
  float _100 = saturate(_99);
  float _104 = cb2_013x * _62;
  float _105 = cb2_013y * _63;
  float _108 = _104 + cb2_013z;
  float _109 = _105 + cb2_013w;
  float _112 = dot(float2(_108, _109), float2(_108, _109));
  float _113 = abs(_112);
  float _114 = log2(_113);
  float _115 = _114 * cb2_014x;
  float _116 = exp2(_115);
  float _117 = saturate(_116);
  float _121 = cb2_011x * _62;
  float _122 = cb2_011y * _63;
  float _125 = _121 + cb2_011z;
  float _126 = _122 + cb2_011w;
  float _127 = _125 * _117;
  float _128 = _126 * _117;
  float _129 = _127 + _62;
  float _130 = _128 + _63;
  float _134 = cb2_012x * _62;
  float _135 = cb2_012y * _63;
  float _138 = _134 + cb2_012z;
  float _139 = _135 + cb2_012w;
  float _140 = _138 * _117;
  float _141 = _139 * _117;
  float _142 = _140 + _62;
  float _143 = _141 + _63;
  float4 _144 = t1.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _148 = max(_144.x, 0.0f);
  float _149 = max(_144.y, 0.0f);
  float _150 = max(_144.z, 0.0f);
  float _151 = min(_148, 65000.0f);
  float _152 = min(_149, 65000.0f);
  float _153 = min(_150, 65000.0f);
  float4 _154 = t1.SampleLevel(s2_space2, float2(_142, _143), 0.0f);
  float _158 = max(_154.x, 0.0f);
  float _159 = max(_154.y, 0.0f);
  float _160 = max(_154.z, 0.0f);
  float _161 = min(_158, 65000.0f);
  float _162 = min(_159, 65000.0f);
  float _163 = min(_160, 65000.0f);
  float4 _164 = t4.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _168 = max(_164.x, 0.0f);
  float _169 = max(_164.y, 0.0f);
  float _170 = max(_164.z, 0.0f);
  float _171 = min(_168, 5000.0f);
  float _172 = min(_169, 5000.0f);
  float _173 = min(_170, 5000.0f);
  float4 _174 = t4.SampleLevel(s2_space2, float2(_142, _143), 0.0f);
  float _178 = max(_174.x, 0.0f);
  float _179 = max(_174.y, 0.0f);
  float _180 = max(_174.z, 0.0f);
  float _181 = min(_178, 5000.0f);
  float _182 = min(_179, 5000.0f);
  float _183 = min(_180, 5000.0f);
  float _188 = 1.0f - cb2_009x;
  float _189 = 1.0f - cb2_009y;
  float _190 = 1.0f - cb2_009z;
  float _195 = _188 - cb2_010x;
  float _196 = _189 - cb2_010y;
  float _197 = _190 - cb2_010z;
  float _198 = saturate(_195);
  float _199 = saturate(_196);
  float _200 = saturate(_197);
  float _201 = _198 * _71;
  float _202 = _199 * _72;
  float _203 = _200 * _73;
  float _204 = cb2_009x * _151;
  float _205 = cb2_009y * _152;
  float _206 = cb2_009z * _153;
  float _207 = _204 + _201;
  float _208 = _205 + _202;
  float _209 = _206 + _203;
  float _210 = cb2_010x * _161;
  float _211 = cb2_010y * _162;
  float _212 = cb2_010z * _163;
  float _213 = _207 + _210;
  float _214 = _208 + _211;
  float _215 = _209 + _212;
  float _216 = _198 * _83;
  float _217 = _199 * _84;
  float _218 = _200 * _85;
  float _219 = cb2_009x * _171;
  float _220 = cb2_009y * _172;
  float _221 = cb2_009z * _173;
  float _222 = cb2_010x * _181;
  float _223 = cb2_010y * _182;
  float _224 = cb2_010z * _183;
  float4 _225 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _229 = _216 - _213;
  float _230 = _229 + _219;
  float _231 = _230 + _222;
  float _232 = _217 - _214;
  float _233 = _232 + _220;
  float _234 = _233 + _223;
  float _235 = _218 - _215;
  float _236 = _235 + _221;
  float _237 = _236 + _224;
  float _238 = _231 * _100;
  float _239 = _234 * _100;
  float _240 = _237 * _100;
  float _241 = _238 + _213;
  float _242 = _239 + _214;
  float _243 = _240 + _215;
  float _244 = dot(float3(_241, _242, _243), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _248 = t0[0].SExposureData_020;
  float _250 = t0[0].SExposureData_004;
  float _252 = cb2_018x * 0.5f;
  float _253 = _252 * cb2_018y;
  float _254 = _250.x - _253;
  float _255 = cb2_018y * cb2_018x;
  float _256 = 1.0f / _255;
  float _257 = _254 * _256;
  float _258 = _244 / _248.x;
  float _259 = _258 * 5464.01611328125f;
  float _260 = _259 + 9.99999993922529e-09f;
  float _261 = log2(_260);
  float _262 = _261 - _254;
  float _263 = _262 * _256;
  float _264 = saturate(_263);
  float2 _265 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _264), 0.0f);
  float _268 = max(_265.y, 1.0000000116860974e-07f);
  float _269 = _265.x / _268;
  float _270 = _269 + _257;
  float _271 = _270 / _256;
  float _272 = _271 - _250.x;
  float _273 = -0.0f - _272;
  float _275 = _273 - cb2_027x;
  float _276 = max(0.0f, _275);
  float _279 = cb2_026z * _276;
  float _280 = _272 - cb2_027x;
  float _281 = max(0.0f, _280);
  float _283 = cb2_026w * _281;
  bool _284 = (_272 < 0.0f);
  float _285 = select(_284, _279, _283);
  float _286 = exp2(_285);
  float _287 = _286 * _241;
  float _288 = _286 * _242;
  float _289 = _286 * _243;
  float _294 = cb2_024y * _225.x;
  float _295 = cb2_024z * _225.y;
  float _296 = cb2_024w * _225.z;
  float _297 = _294 + _287;
  float _298 = _295 + _288;
  float _299 = _296 + _289;
  float _304 = _297 * cb2_025x;
  float _305 = _298 * cb2_025y;
  float _306 = _299 * cb2_025z;
  float _307 = dot(float3(_304, _305, _306), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _308 = t0[0].SExposureData_012;
  float _310 = _307 * 5464.01611328125f;
  float _311 = _310 * _308.x;
  float _312 = _311 + 9.99999993922529e-09f;
  float _313 = log2(_312);
  float _314 = _313 + 16.929765701293945f;
  float _315 = _314 * 0.05734497308731079f;
  float _316 = saturate(_315);
  float _317 = _316 * _316;
  float _318 = _316 * 2.0f;
  float _319 = 3.0f - _318;
  float _320 = _317 * _319;
  float _321 = _305 * 0.8450999855995178f;
  float _322 = _306 * 0.14589999616146088f;
  float _323 = _321 + _322;
  float _324 = _323 * 2.4890189170837402f;
  float _325 = _323 * 0.3754962384700775f;
  float _326 = _323 * 2.811495304107666f;
  float _327 = _323 * 5.519708156585693f;
  float _328 = _307 - _324;
  float _329 = _320 * _328;
  float _330 = _329 + _324;
  float _331 = _320 * 0.5f;
  float _332 = _331 + 0.5f;
  float _333 = _332 * _328;
  float _334 = _333 + _324;
  float _335 = _304 - _325;
  float _336 = _305 - _326;
  float _337 = _306 - _327;
  float _338 = _332 * _335;
  float _339 = _332 * _336;
  float _340 = _332 * _337;
  float _341 = _338 + _325;
  float _342 = _339 + _326;
  float _343 = _340 + _327;
  float _344 = 1.0f / _334;
  float _345 = _330 * _344;
  float _346 = _345 * _341;
  float _347 = _345 * _342;
  float _348 = _345 * _343;
  float _352 = cb2_020x * TEXCOORD0_centroid.x;
  float _353 = cb2_020y * TEXCOORD0_centroid.y;
  float _356 = _352 + cb2_020z;
  float _357 = _353 + cb2_020w;
  float _360 = dot(float2(_356, _357), float2(_356, _357));
  float _361 = 1.0f - _360;
  float _362 = saturate(_361);
  float _363 = log2(_362);
  float _364 = _363 * cb2_021w;
  float _365 = exp2(_364);
  float _369 = _346 - cb2_021x;
  float _370 = _347 - cb2_021y;
  float _371 = _348 - cb2_021z;
  float _372 = _369 * _365;
  float _373 = _370 * _365;
  float _374 = _371 * _365;
  float _375 = _372 + cb2_021x;
  float _376 = _373 + cb2_021y;
  float _377 = _374 + cb2_021z;
  float _378 = t0[0].SExposureData_000;
  float _380 = max(_248.x, 0.0010000000474974513f);
  float _381 = 1.0f / _380;
  float _382 = _381 * _378.x;
  bool _385 = ((uint)(cb2_069y) == 0);
  float _391;
  float _392;
  float _393;
  float _447;
  float _448;
  float _449;
  float _525;
  float _526;
  float _527;
  float _677;
  float _714;
  float _715;
  float _716;
  float _745;
  float _746;
  float _747;
  float _828;
  float _829;
  float _830;
  float _836;
  float _837;
  float _838;
  float _852;
  float _853;
  float _854;
  float _879;
  float _891;
  float _919;
  float _931;
  float _943;
  float _944;
  float _945;
  float _972;
  float _973;
  float _974;
  if (!_385) {
    float _387 = _382 * _375;
    float _388 = _382 * _376;
    float _389 = _382 * _377;
    _391 = _387;
    _392 = _388;
    _393 = _389;
  } else {
    _391 = _375;
    _392 = _376;
    _393 = _377;
  }
  float _394 = _391 * 0.6130970120429993f;
  float _395 = mad(0.33952298760414124f, _392, _394);
  float _396 = mad(0.04737899824976921f, _393, _395);
  float _397 = _391 * 0.07019399851560593f;
  float _398 = mad(0.9163540005683899f, _392, _397);
  float _399 = mad(0.013451999984681606f, _393, _398);
  float _400 = _391 * 0.02061600051820278f;
  float _401 = mad(0.10956999659538269f, _392, _400);
  float _402 = mad(0.8698149919509888f, _393, _401);
  float _403 = log2(_396);
  float _404 = log2(_399);
  float _405 = log2(_402);
  float _406 = _403 * 0.04211956635117531f;
  float _407 = _404 * 0.04211956635117531f;
  float _408 = _405 * 0.04211956635117531f;
  float _409 = _406 + 0.6252607107162476f;
  float _410 = _407 + 0.6252607107162476f;
  float _411 = _408 + 0.6252607107162476f;
  float4 _412 = t6.SampleLevel(s2_space2, float3(_409, _410, _411), 0.0f);
  bool _418 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_418 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _422 = cb2_017x * _412.x;
    float _423 = cb2_017x * _412.y;
    float _424 = cb2_017x * _412.z;
    float _426 = _422 + cb2_017y;
    float _427 = _423 + cb2_017y;
    float _428 = _424 + cb2_017y;
    float _429 = exp2(_426);
    float _430 = exp2(_427);
    float _431 = exp2(_428);
    float _432 = _429 + 1.0f;
    float _433 = _430 + 1.0f;
    float _434 = _431 + 1.0f;
    float _435 = 1.0f / _432;
    float _436 = 1.0f / _433;
    float _437 = 1.0f / _434;
    float _439 = cb2_017z * _435;
    float _440 = cb2_017z * _436;
    float _441 = cb2_017z * _437;
    float _443 = _439 + cb2_017w;
    float _444 = _440 + cb2_017w;
    float _445 = _441 + cb2_017w;
    _447 = _443;
    _448 = _444;
    _449 = _445;
  } else {
    _447 = _412.x;
    _448 = _412.y;
    _449 = _412.z;
  }
  float _450 = _447 * 23.0f;
  float _451 = _450 + -14.473931312561035f;
  float _452 = exp2(_451);
  float _453 = _448 * 23.0f;
  float _454 = _453 + -14.473931312561035f;
  float _455 = exp2(_454);
  float _456 = _449 * 23.0f;
  float _457 = _456 + -14.473931312561035f;
  float _458 = exp2(_457);
  float _459 = dot(float3(_452, _455, _458), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _464 = dot(float3(_452, _455, _458), float3(_452, _455, _458));
  float _465 = rsqrt(_464);
  float _466 = _465 * _452;
  float _467 = _465 * _455;
  float _468 = _465 * _458;
  float _469 = cb2_001x - _466;
  float _470 = cb2_001y - _467;
  float _471 = cb2_001z - _468;
  float _472 = dot(float3(_469, _470, _471), float3(_469, _470, _471));
  float _475 = cb2_002z * _472;
  float _477 = _475 + cb2_002w;
  float _478 = saturate(_477);
  float _480 = cb2_002x * _478;
  float _481 = _459 - _452;
  float _482 = _459 - _455;
  float _483 = _459 - _458;
  float _484 = _480 * _481;
  float _485 = _480 * _482;
  float _486 = _480 * _483;
  float _487 = _484 + _452;
  float _488 = _485 + _455;
  float _489 = _486 + _458;
  float _491 = cb2_002y * _478;
  float _492 = 0.10000000149011612f - _487;
  float _493 = 0.10000000149011612f - _488;
  float _494 = 0.10000000149011612f - _489;
  float _495 = _492 * _491;
  float _496 = _493 * _491;
  float _497 = _494 * _491;
  float _498 = _495 + _487;
  float _499 = _496 + _488;
  float _500 = _497 + _489;
  float _501 = saturate(_498);
  float _502 = saturate(_499);
  float _503 = saturate(_500);
  float _510 = cb2_016x - _501;
  float _511 = cb2_016y - _502;
  float _512 = cb2_016z - _503;
  float _513 = _510 * cb2_016w;
  float _514 = _511 * cb2_016w;
  float _515 = _512 * cb2_016w;
  float _516 = _513 + _501;
  float _517 = _514 + _502;
  float _518 = _515 + _503;
  if (_418 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _521 = cb2_024x * _516;
    float _522 = cb2_024x * _517;
    float _523 = cb2_024x * _518;
    _525 = _521;
    _526 = _522;
    _527 = _523;
  } else {
    _525 = _516;
    _526 = _517;
    _527 = _518;
  }
  float _530 = _525 * 0.9708889722824097f;
  float _531 = mad(0.026962999254465103f, _526, _530);
  float _532 = mad(0.002148000057786703f, _527, _531);
  float _533 = _525 * 0.01088900025933981f;
  float _534 = mad(0.9869629740715027f, _526, _533);
  float _535 = mad(0.002148000057786703f, _527, _534);
  float _536 = mad(0.026962999254465103f, _526, _533);
  float _537 = mad(0.9621480107307434f, _527, _536);
  float _538 = max(_532, 0.0f);
  float _539 = max(_535, 0.0f);
  float _540 = max(_537, 0.0f);
  float _541 = min(_538, cb2_095y);
  float _542 = min(_539, cb2_095y);
  float _543 = min(_540, cb2_095y);
  bool _546 = ((uint)(cb2_095x) == 0);
  bool _549 = ((uint)(cb2_094w) == 0);
  bool _551 = ((uint)(cb2_094z) == 0);
  bool _553 = ((uint)(cb2_094y) != 0);
  bool _555 = ((uint)(cb2_094x) == 0);
  bool _557 = ((uint)(cb2_069z) != 0);
  float _604 = asfloat((uint)(cb2_075y));
  float _605 = asfloat((uint)(cb2_075z));
  float _606 = asfloat((uint)(cb2_075w));
  float _607 = asfloat((uint)(cb2_074z));
  float _608 = asfloat((uint)(cb2_074w));
  float _609 = asfloat((uint)(cb2_075x));
  float _610 = asfloat((uint)(cb2_073w));
  float _611 = asfloat((uint)(cb2_074x));
  float _612 = asfloat((uint)(cb2_074y));
  float _613 = asfloat((uint)(cb2_077x));
  float _614 = asfloat((uint)(cb2_077y));
  float _615 = asfloat((uint)(cb2_079x));
  float _616 = asfloat((uint)(cb2_079y));
  float _617 = asfloat((uint)(cb2_079z));
  float _618 = asfloat((uint)(cb2_078y));
  float _619 = asfloat((uint)(cb2_078z));
  float _620 = asfloat((uint)(cb2_078w));
  float _621 = asfloat((uint)(cb2_077z));
  float _622 = asfloat((uint)(cb2_077w));
  float _623 = asfloat((uint)(cb2_078x));
  float _624 = asfloat((uint)(cb2_072y));
  float _625 = asfloat((uint)(cb2_072z));
  float _626 = asfloat((uint)(cb2_072w));
  float _627 = asfloat((uint)(cb2_071x));
  float _628 = asfloat((uint)(cb2_071y));
  float _629 = asfloat((uint)(cb2_076x));
  float _630 = asfloat((uint)(cb2_070w));
  float _631 = asfloat((uint)(cb2_070x));
  float _632 = asfloat((uint)(cb2_070y));
  float _633 = asfloat((uint)(cb2_070z));
  float _634 = asfloat((uint)(cb2_073x));
  float _635 = asfloat((uint)(cb2_073y));
  float _636 = asfloat((uint)(cb2_073z));
  float _637 = asfloat((uint)(cb2_071z));
  float _638 = asfloat((uint)(cb2_071w));
  float _639 = asfloat((uint)(cb2_072x));
  float _640 = max(_542, _543);
  float _641 = max(_541, _640);
  float _642 = 1.0f / _641;
  float _643 = _642 * _541;
  float _644 = _642 * _542;
  float _645 = _642 * _543;
  float _646 = abs(_643);
  float _647 = log2(_646);
  float _648 = _647 * _631;
  float _649 = exp2(_648);
  float _650 = abs(_644);
  float _651 = log2(_650);
  float _652 = _651 * _632;
  float _653 = exp2(_652);
  float _654 = abs(_645);
  float _655 = log2(_654);
  float _656 = _655 * _633;
  float _657 = exp2(_656);
  if (_553) {
    float _660 = asfloat((uint)(cb2_076w));
    float _662 = asfloat((uint)(cb2_076z));
    float _664 = asfloat((uint)(cb2_076y));
    float _665 = _662 * _542;
    float _666 = _664 * _541;
    float _667 = _660 * _543;
    float _668 = _666 + _667;
    float _669 = _668 + _665;
    _677 = _669;
  } else {
    float _671 = _638 * _542;
    float _672 = _637 * _541;
    float _673 = _639 * _543;
    float _674 = _671 + _672;
    float _675 = _674 + _673;
    _677 = _675;
  }
  float _678 = abs(_677);
  float _679 = log2(_678);
  float _680 = _679 * _630;
  float _681 = exp2(_680);
  float _682 = log2(_681);
  float _683 = _682 * _629;
  float _684 = exp2(_683);
  float _685 = select(_557, _684, _681);
  float _686 = _685 * _627;
  float _687 = _686 + _628;
  float _688 = 1.0f / _687;
  float _689 = _688 * _681;
  if (_553) {
    if (!_555) {
      float _692 = _649 * _621;
      float _693 = _653 * _622;
      float _694 = _657 * _623;
      float _695 = _693 + _692;
      float _696 = _695 + _694;
      float _697 = _653 * _619;
      float _698 = _649 * _618;
      float _699 = _657 * _620;
      float _700 = _697 + _698;
      float _701 = _700 + _699;
      float _702 = _657 * _617;
      float _703 = _653 * _616;
      float _704 = _649 * _615;
      float _705 = _703 + _704;
      float _706 = _705 + _702;
      float _707 = max(_701, _706);
      float _708 = max(_696, _707);
      float _709 = 1.0f / _708;
      float _710 = _709 * _696;
      float _711 = _709 * _701;
      float _712 = _709 * _706;
      _714 = _710;
      _715 = _711;
      _716 = _712;
    } else {
      _714 = _649;
      _715 = _653;
      _716 = _657;
    }
    float _717 = _714 * _614;
    float _718 = exp2(_717);
    float _719 = _718 * _613;
    float _720 = saturate(_719);
    float _721 = _714 * _613;
    float _722 = _714 - _721;
    float _723 = saturate(_722);
    float _724 = max(_613, _723);
    float _725 = min(_724, _720);
    float _726 = _715 * _614;
    float _727 = exp2(_726);
    float _728 = _727 * _613;
    float _729 = saturate(_728);
    float _730 = _715 * _613;
    float _731 = _715 - _730;
    float _732 = saturate(_731);
    float _733 = max(_613, _732);
    float _734 = min(_733, _729);
    float _735 = _716 * _614;
    float _736 = exp2(_735);
    float _737 = _736 * _613;
    float _738 = saturate(_737);
    float _739 = _716 * _613;
    float _740 = _716 - _739;
    float _741 = saturate(_740);
    float _742 = max(_613, _741);
    float _743 = min(_742, _738);
    _745 = _725;
    _746 = _734;
    _747 = _743;
  } else {
    _745 = _649;
    _746 = _653;
    _747 = _657;
  }
  float _748 = _745 * _637;
  float _749 = _746 * _638;
  float _750 = _749 + _748;
  float _751 = _747 * _639;
  float _752 = _750 + _751;
  float _753 = 1.0f / _752;
  float _754 = _753 * _689;
  float _755 = saturate(_754);
  float _756 = _755 * _745;
  float _757 = saturate(_756);
  float _758 = _755 * _746;
  float _759 = saturate(_758);
  float _760 = _755 * _747;
  float _761 = saturate(_760);
  float _762 = _757 * _624;
  float _763 = _624 - _762;
  float _764 = _759 * _625;
  float _765 = _625 - _764;
  float _766 = _761 * _626;
  float _767 = _626 - _766;
  float _768 = _761 * _639;
  float _769 = _757 * _637;
  float _770 = _759 * _638;
  float _771 = _689 - _769;
  float _772 = _771 - _770;
  float _773 = _772 - _768;
  float _774 = saturate(_773);
  float _775 = _765 * _638;
  float _776 = _763 * _637;
  float _777 = _767 * _639;
  float _778 = _775 + _776;
  float _779 = _778 + _777;
  float _780 = 1.0f / _779;
  float _781 = _780 * _774;
  float _782 = _781 * _763;
  float _783 = _782 + _757;
  float _784 = saturate(_783);
  float _785 = _781 * _765;
  float _786 = _785 + _759;
  float _787 = saturate(_786);
  float _788 = _781 * _767;
  float _789 = _788 + _761;
  float _790 = saturate(_789);
  float _791 = _790 * _639;
  float _792 = _784 * _637;
  float _793 = _787 * _638;
  float _794 = _689 - _792;
  float _795 = _794 - _793;
  float _796 = _795 - _791;
  float _797 = saturate(_796);
  float _798 = _797 * _634;
  float _799 = _798 + _784;
  float _800 = saturate(_799);
  float _801 = _797 * _635;
  float _802 = _801 + _787;
  float _803 = saturate(_802);
  float _804 = _797 * _636;
  float _805 = _804 + _790;
  float _806 = saturate(_805);
  if (!_551) {
    float _808 = _800 * _610;
    float _809 = _803 * _611;
    float _810 = _806 * _612;
    float _811 = _809 + _808;
    float _812 = _811 + _810;
    float _813 = _803 * _608;
    float _814 = _800 * _607;
    float _815 = _806 * _609;
    float _816 = _813 + _814;
    float _817 = _816 + _815;
    float _818 = _806 * _606;
    float _819 = _803 * _605;
    float _820 = _800 * _604;
    float _821 = _819 + _820;
    float _822 = _821 + _818;
    if (!_549) {
      float _824 = saturate(_812);
      float _825 = saturate(_817);
      float _826 = saturate(_822);
      _828 = _826;
      _829 = _825;
      _830 = _824;
    } else {
      _828 = _822;
      _829 = _817;
      _830 = _812;
    }
  } else {
    _828 = _806;
    _829 = _803;
    _830 = _800;
  }
  if (!_546) {
    float _832 = _830 * _610;
    float _833 = _829 * _610;
    float _834 = _828 * _610;
    _836 = _834;
    _837 = _833;
    _838 = _832;
  } else {
    _836 = _828;
    _837 = _829;
    _838 = _830;
  }
  if (_418) {
    float _842 = cb1_018z * 9.999999747378752e-05f;
    float _843 = _842 * _838;
    float _844 = _842 * _837;
    float _845 = _842 * _836;
    float _847 = 5000.0f / cb1_018y;
    float _848 = _843 * _847;
    float _849 = _844 * _847;
    float _850 = _845 * _847;
    _852 = _848;
    _853 = _849;
    _854 = _850;
  } else {
    _852 = _838;
    _853 = _837;
    _854 = _836;
  }
  float _855 = _852 * 1.6047500371932983f;
  float _856 = mad(-0.5310800075531006f, _853, _855);
  float _857 = mad(-0.07366999983787537f, _854, _856);
  float _858 = _852 * -0.10208000242710114f;
  float _859 = mad(1.1081299781799316f, _853, _858);
  float _860 = mad(-0.006049999967217445f, _854, _859);
  float _861 = _852 * -0.0032599999103695154f;
  float _862 = mad(-0.07275000214576721f, _853, _861);
  float _863 = mad(1.0760200023651123f, _854, _862);
  if (_418) {
    // float _865 = max(_857, 0.0f);
    // float _866 = max(_860, 0.0f);
    // float _867 = max(_863, 0.0f);
    // bool _868 = !(_865 >= 0.0030399328097701073f);
    // if (!_868) {
    //   float _870 = abs(_865);
    //   float _871 = log2(_870);
    //   float _872 = _871 * 0.4166666567325592f;
    //   float _873 = exp2(_872);
    //   float _874 = _873 * 1.0549999475479126f;
    //   float _875 = _874 + -0.054999999701976776f;
    //   _879 = _875;
    // } else {
    //   float _877 = _865 * 12.923210144042969f;
    //   _879 = _877;
    // }
    // bool _880 = !(_866 >= 0.0030399328097701073f);
    // if (!_880) {
    //   float _882 = abs(_866);
    //   float _883 = log2(_882);
    //   float _884 = _883 * 0.4166666567325592f;
    //   float _885 = exp2(_884);
    //   float _886 = _885 * 1.0549999475479126f;
    //   float _887 = _886 + -0.054999999701976776f;
    //   _891 = _887;
    // } else {
    //   float _889 = _866 * 12.923210144042969f;
    //   _891 = _889;
    // }
    // bool _892 = !(_867 >= 0.0030399328097701073f);
    // if (!_892) {
    //   float _894 = abs(_867);
    //   float _895 = log2(_894);
    //   float _896 = _895 * 0.4166666567325592f;
    //   float _897 = exp2(_896);
    //   float _898 = _897 * 1.0549999475479126f;
    //   float _899 = _898 + -0.054999999701976776f;
    //   _972 = _879;
    //   _973 = _891;
    //   _974 = _899;
    // } else {
    //   float _901 = _867 * 12.923210144042969f;
    //   _972 = _879;
    //   _973 = _891;
    //   _974 = _901;
    // }
    _972 = renodx::color::srgb::EncodeSafe(_857);
    _973 = renodx::color::srgb::EncodeSafe(_860);
    _974 = renodx::color::srgb::EncodeSafe(_863);

  } else {
    float _903 = saturate(_857);
    float _904 = saturate(_860);
    float _905 = saturate(_863);
    bool _906 = ((uint)(cb1_018w) == -2);
    if (!_906) {
      bool _908 = !(_903 >= 0.0030399328097701073f);
      if (!_908) {
        float _910 = abs(_903);
        float _911 = log2(_910);
        float _912 = _911 * 0.4166666567325592f;
        float _913 = exp2(_912);
        float _914 = _913 * 1.0549999475479126f;
        float _915 = _914 + -0.054999999701976776f;
        _919 = _915;
      } else {
        float _917 = _903 * 12.923210144042969f;
        _919 = _917;
      }
      bool _920 = !(_904 >= 0.0030399328097701073f);
      if (!_920) {
        float _922 = abs(_904);
        float _923 = log2(_922);
        float _924 = _923 * 0.4166666567325592f;
        float _925 = exp2(_924);
        float _926 = _925 * 1.0549999475479126f;
        float _927 = _926 + -0.054999999701976776f;
        _931 = _927;
      } else {
        float _929 = _904 * 12.923210144042969f;
        _931 = _929;
      }
      bool _932 = !(_905 >= 0.0030399328097701073f);
      if (!_932) {
        float _934 = abs(_905);
        float _935 = log2(_934);
        float _936 = _935 * 0.4166666567325592f;
        float _937 = exp2(_936);
        float _938 = _937 * 1.0549999475479126f;
        float _939 = _938 + -0.054999999701976776f;
        _943 = _919;
        _944 = _931;
        _945 = _939;
      } else {
        float _941 = _905 * 12.923210144042969f;
        _943 = _919;
        _944 = _931;
        _945 = _941;
      }
    } else {
      _943 = _903;
      _944 = _904;
      _945 = _905;
    }
    float _950 = abs(_943);
    float _951 = abs(_944);
    float _952 = abs(_945);
    float _953 = log2(_950);
    float _954 = log2(_951);
    float _955 = log2(_952);
    float _956 = _953 * cb2_000z;
    float _957 = _954 * cb2_000z;
    float _958 = _955 * cb2_000z;
    float _959 = exp2(_956);
    float _960 = exp2(_957);
    float _961 = exp2(_958);
    float _962 = _959 * cb2_000y;
    float _963 = _960 * cb2_000y;
    float _964 = _961 * cb2_000y;
    float _965 = _962 + cb2_000x;
    float _966 = _963 + cb2_000x;
    float _967 = _964 + cb2_000x;
    float _968 = saturate(_965);
    float _969 = saturate(_966);
    float _970 = saturate(_967);
    _972 = _968;
    _973 = _969;
    _974 = _970;
  }
  float _978 = cb2_023x * TEXCOORD0_centroid.x;
  float _979 = cb2_023y * TEXCOORD0_centroid.y;
  float _982 = _978 + cb2_023z;
  float _983 = _979 + cb2_023w;
  float4 _986 = t9.SampleLevel(s0_space2, float2(_982, _983), 0.0f);
  float _988 = _986.x + -0.5f;
  float _989 = _988 * cb2_022x;
  float _990 = _989 + 0.5f;
  float _991 = _990 * 2.0f;
  float _992 = _991 * _972;
  float _993 = _991 * _973;
  float _994 = _991 * _974;
  float _998 = float((uint)(cb2_019z));
  float _999 = float((uint)(cb2_019w));
  float _1000 = _998 + SV_Position.x;
  float _1001 = _999 + SV_Position.y;
  uint _1002 = uint(_1000);
  uint _1003 = uint(_1001);
  uint _1006 = cb2_019x + -1u;
  uint _1007 = cb2_019y + -1u;
  int _1008 = _1002 & _1006;
  int _1009 = _1003 & _1007;
  float4 _1010 = t3.Load(int3(_1008, _1009, 0));
  float _1014 = _1010.x * 2.0f;
  float _1015 = _1010.y * 2.0f;
  float _1016 = _1010.z * 2.0f;
  float _1017 = _1014 + -1.0f;
  float _1018 = _1015 + -1.0f;
  float _1019 = _1016 + -1.0f;
  float _1020 = _1017 * cb2_025w;
  float _1021 = _1018 * cb2_025w;
  float _1022 = _1019 * cb2_025w;
  float _1023 = _1020 + _992;
  float _1024 = _1021 + _993;
  float _1025 = _1022 + _994;
  float _1026 = dot(float3(_1023, _1024, _1025), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1023;
  SV_Target.y = _1024;
  SV_Target.z = _1025;
  SV_Target.w = _1026;
  SV_Target_1.x = _1026;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
