#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _28 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _32 = _28.x * 6.283199787139893f;
  float _33 = cos(_32);
  float _34 = sin(_32);
  float _35 = _33 * _28.z;
  float _36 = _34 * _28.z;
  float _37 = _35 + TEXCOORD0_centroid.x;
  float _38 = _36 + TEXCOORD0_centroid.y;
  float _39 = _37 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _35;
  float _44 = _38 * 10.0f;
  float _45 = 10.0f - _44;
  float _46 = min(_44, _45);
  float _47 = saturate(_46);
  float _48 = _47 * _36;
  float _49 = _43 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t8.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _53 = _51.w * _43;
  float _54 = _51.w * _48;
  float _55 = 1.0f - _28.y;
  float _56 = saturate(_55);
  float _57 = _53 * _56;
  float _58 = _54 * _56;
  float _62 = cb2_015x * TEXCOORD0_centroid.x;
  float _63 = cb2_015y * TEXCOORD0_centroid.y;
  float _66 = _62 + cb2_015z;
  float _67 = _63 + cb2_015w;
  float4 _68 = t9.SampleLevel(s0_space2, float2(_66, _67), 0.0f);
  float _72 = saturate(_68.x);
  float _73 = saturate(_68.z);
  float _76 = cb2_026x * _73;
  float _77 = _72 * 6.283199787139893f;
  float _78 = cos(_77);
  float _79 = sin(_77);
  float _80 = _76 * _78;
  float _81 = _79 * _76;
  float _82 = 1.0f - _68.y;
  float _83 = saturate(_82);
  float _84 = _80 * _83;
  float _85 = _81 * _83;
  float _86 = _57 + TEXCOORD0_centroid.x;
  float _87 = _86 + _84;
  float _88 = _58 + TEXCOORD0_centroid.y;
  float _89 = _88 + _85;
  float4 _90 = t8.SampleLevel(s2_space2, float2(_87, _89), 0.0f);
  bool _92 = (_90.y > 0.0f);
  float _93 = select(_92, TEXCOORD0_centroid.x, _87);
  float _94 = select(_92, TEXCOORD0_centroid.y, _89);
  float4 _95 = t1.SampleLevel(s4_space2, float2(_93, _94), 0.0f);
  float _99 = max(_95.x, 0.0f);
  float _100 = max(_95.y, 0.0f);
  float _101 = max(_95.z, 0.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float _104 = min(_101, 65000.0f);
  float4 _105 = t4.SampleLevel(s2_space2, float2(_93, _94), 0.0f);
  float _110 = max(_105.x, 0.0f);
  float _111 = max(_105.y, 0.0f);
  float _112 = max(_105.z, 0.0f);
  float _113 = max(_105.w, 0.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _117 = min(_113, 5000.0f);
  float _120 = _26.x * cb0_028z;
  float _121 = _120 + cb0_028x;
  float _122 = cb2_027w / _121;
  float _123 = 1.0f - _122;
  float _124 = abs(_123);
  float _126 = cb2_027y * _124;
  float _128 = _126 - cb2_027z;
  float _129 = saturate(_128);
  float _130 = max(_129, _117);
  float _131 = saturate(_130);
  float _135 = cb2_013x * _93;
  float _136 = cb2_013y * _94;
  float _139 = _135 + cb2_013z;
  float _140 = _136 + cb2_013w;
  float _143 = dot(float2(_139, _140), float2(_139, _140));
  float _144 = abs(_143);
  float _145 = log2(_144);
  float _146 = _145 * cb2_014x;
  float _147 = exp2(_146);
  float _148 = saturate(_147);
  float _152 = cb2_011x * _93;
  float _153 = cb2_011y * _94;
  float _156 = _152 + cb2_011z;
  float _157 = _153 + cb2_011w;
  float _158 = _156 * _148;
  float _159 = _157 * _148;
  float _160 = _158 + _93;
  float _161 = _159 + _94;
  float _165 = cb2_012x * _93;
  float _166 = cb2_012y * _94;
  float _169 = _165 + cb2_012z;
  float _170 = _166 + cb2_012w;
  float _171 = _169 * _148;
  float _172 = _170 * _148;
  float _173 = _171 + _93;
  float _174 = _172 + _94;
  float4 _175 = t1.SampleLevel(s2_space2, float2(_160, _161), 0.0f);
  float _179 = max(_175.x, 0.0f);
  float _180 = max(_175.y, 0.0f);
  float _181 = max(_175.z, 0.0f);
  float _182 = min(_179, 65000.0f);
  float _183 = min(_180, 65000.0f);
  float _184 = min(_181, 65000.0f);
  float4 _185 = t1.SampleLevel(s2_space2, float2(_173, _174), 0.0f);
  float _189 = max(_185.x, 0.0f);
  float _190 = max(_185.y, 0.0f);
  float _191 = max(_185.z, 0.0f);
  float _192 = min(_189, 65000.0f);
  float _193 = min(_190, 65000.0f);
  float _194 = min(_191, 65000.0f);
  float4 _195 = t4.SampleLevel(s2_space2, float2(_160, _161), 0.0f);
  float _199 = max(_195.x, 0.0f);
  float _200 = max(_195.y, 0.0f);
  float _201 = max(_195.z, 0.0f);
  float _202 = min(_199, 5000.0f);
  float _203 = min(_200, 5000.0f);
  float _204 = min(_201, 5000.0f);
  float4 _205 = t4.SampleLevel(s2_space2, float2(_173, _174), 0.0f);
  float _209 = max(_205.x, 0.0f);
  float _210 = max(_205.y, 0.0f);
  float _211 = max(_205.z, 0.0f);
  float _212 = min(_209, 5000.0f);
  float _213 = min(_210, 5000.0f);
  float _214 = min(_211, 5000.0f);
  float _219 = 1.0f - cb2_009x;
  float _220 = 1.0f - cb2_009y;
  float _221 = 1.0f - cb2_009z;
  float _226 = _219 - cb2_010x;
  float _227 = _220 - cb2_010y;
  float _228 = _221 - cb2_010z;
  float _229 = saturate(_226);
  float _230 = saturate(_227);
  float _231 = saturate(_228);
  float _232 = _229 * _102;
  float _233 = _230 * _103;
  float _234 = _231 * _104;
  float _235 = cb2_009x * _182;
  float _236 = cb2_009y * _183;
  float _237 = cb2_009z * _184;
  float _238 = _235 + _232;
  float _239 = _236 + _233;
  float _240 = _237 + _234;
  float _241 = cb2_010x * _192;
  float _242 = cb2_010y * _193;
  float _243 = cb2_010z * _194;
  float _244 = _238 + _241;
  float _245 = _239 + _242;
  float _246 = _240 + _243;
  float _247 = _229 * _114;
  float _248 = _230 * _115;
  float _249 = _231 * _116;
  float _250 = cb2_009x * _202;
  float _251 = cb2_009y * _203;
  float _252 = cb2_009z * _204;
  float _253 = cb2_010x * _212;
  float _254 = cb2_010y * _213;
  float _255 = cb2_010z * _214;
  float4 _256 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _260 = _247 - _244;
  float _261 = _260 + _250;
  float _262 = _261 + _253;
  float _263 = _248 - _245;
  float _264 = _263 + _251;
  float _265 = _264 + _254;
  float _266 = _249 - _246;
  float _267 = _266 + _252;
  float _268 = _267 + _255;
  float _269 = _262 * _131;
  float _270 = _265 * _131;
  float _271 = _268 * _131;
  float _272 = _269 + _244;
  float _273 = _270 + _245;
  float _274 = _271 + _246;
  float _275 = dot(float3(_272, _273, _274), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _279 = t0[0].SExposureData_020;
  float _281 = t0[0].SExposureData_004;
  float _283 = cb2_018x * 0.5f;
  float _284 = _283 * cb2_018y;
  float _285 = _281.x - _284;
  float _286 = cb2_018y * cb2_018x;
  float _287 = 1.0f / _286;
  float _288 = _285 * _287;
  float _289 = _275 / _279.x;
  float _290 = _289 * 5464.01611328125f;
  float _291 = _290 + 9.99999993922529e-09f;
  float _292 = log2(_291);
  float _293 = _292 - _285;
  float _294 = _293 * _287;
  float _295 = saturate(_294);
  float2 _296 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _295), 0.0f);
  float _299 = max(_296.y, 1.0000000116860974e-07f);
  float _300 = _296.x / _299;
  float _301 = _300 + _288;
  float _302 = _301 / _287;
  float _303 = _302 - _281.x;
  float _304 = -0.0f - _303;
  float _306 = _304 - cb2_027x;
  float _307 = max(0.0f, _306);
  float _309 = cb2_026z * _307;
  float _310 = _303 - cb2_027x;
  float _311 = max(0.0f, _310);
  float _313 = cb2_026w * _311;
  bool _314 = (_303 < 0.0f);
  float _315 = select(_314, _309, _313);
  float _316 = exp2(_315);
  float _317 = _316 * _272;
  float _318 = _316 * _273;
  float _319 = _316 * _274;
  float _324 = cb2_024y * _256.x;
  float _325 = cb2_024z * _256.y;
  float _326 = cb2_024w * _256.z;
  float _327 = _324 + _317;
  float _328 = _325 + _318;
  float _329 = _326 + _319;
  float _334 = _327 * cb2_025x;
  float _335 = _328 * cb2_025y;
  float _336 = _329 * cb2_025z;
  float _337 = dot(float3(_334, _335, _336), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _338 = t0[0].SExposureData_012;
  float _340 = _337 * 5464.01611328125f;
  float _341 = _340 * _338.x;
  float _342 = _341 + 9.99999993922529e-09f;
  float _343 = log2(_342);
  float _344 = _343 + 16.929765701293945f;
  float _345 = _344 * 0.05734497308731079f;
  float _346 = saturate(_345);
  float _347 = _346 * _346;
  float _348 = _346 * 2.0f;
  float _349 = 3.0f - _348;
  float _350 = _347 * _349;
  float _351 = _335 * 0.8450999855995178f;
  float _352 = _336 * 0.14589999616146088f;
  float _353 = _351 + _352;
  float _354 = _353 * 2.4890189170837402f;
  float _355 = _353 * 0.3754962384700775f;
  float _356 = _353 * 2.811495304107666f;
  float _357 = _353 * 5.519708156585693f;
  float _358 = _337 - _354;
  float _359 = _350 * _358;
  float _360 = _359 + _354;
  float _361 = _350 * 0.5f;
  float _362 = _361 + 0.5f;
  float _363 = _362 * _358;
  float _364 = _363 + _354;
  float _365 = _334 - _355;
  float _366 = _335 - _356;
  float _367 = _336 - _357;
  float _368 = _362 * _365;
  float _369 = _362 * _366;
  float _370 = _362 * _367;
  float _371 = _368 + _355;
  float _372 = _369 + _356;
  float _373 = _370 + _357;
  float _374 = 1.0f / _364;
  float _375 = _360 * _374;
  float _376 = _375 * _371;
  float _377 = _375 * _372;
  float _378 = _375 * _373;
  float _382 = cb2_020x * TEXCOORD0_centroid.x;
  float _383 = cb2_020y * TEXCOORD0_centroid.y;
  float _386 = _382 + cb2_020z;
  float _387 = _383 + cb2_020w;
  float _390 = dot(float2(_386, _387), float2(_386, _387));
  float _391 = 1.0f - _390;
  float _392 = saturate(_391);
  float _393 = log2(_392);
  float _394 = _393 * cb2_021w;
  float _395 = exp2(_394);
  float _399 = _376 - cb2_021x;
  float _400 = _377 - cb2_021y;
  float _401 = _378 - cb2_021z;
  float _402 = _399 * _395;
  float _403 = _400 * _395;
  float _404 = _401 * _395;
  float _405 = _402 + cb2_021x;
  float _406 = _403 + cb2_021y;
  float _407 = _404 + cb2_021z;
  float _408 = t0[0].SExposureData_000;
  float _410 = max(_279.x, 0.0010000000474974513f);
  float _411 = 1.0f / _410;
  float _412 = _411 * _408.x;
  bool _415 = ((uint)(cb2_069y) == 0);
  float _421;
  float _422;
  float _423;
  float _477;
  float _478;
  float _479;
  float _570;
  float _571;
  float _572;
  float _617;
  float _618;
  float _619;
  float _620;
  float _669;
  float _670;
  float _671;
  float _672;
  float _697;
  float _698;
  float _699;
  float _849;
  float _886;
  float _887;
  float _888;
  float _917;
  float _918;
  float _919;
  float _1000;
  float _1001;
  float _1002;
  float _1008;
  float _1009;
  float _1010;
  float _1024;
  float _1025;
  float _1026;
  float _1051;
  float _1063;
  float _1091;
  float _1103;
  float _1115;
  float _1116;
  float _1117;
  float _1144;
  float _1145;
  float _1146;
  if (!_415) {
    float _417 = _412 * _405;
    float _418 = _412 * _406;
    float _419 = _412 * _407;
    _421 = _417;
    _422 = _418;
    _423 = _419;
  } else {
    _421 = _405;
    _422 = _406;
    _423 = _407;
  }
  float _424 = _421 * 0.6130970120429993f;
  float _425 = mad(0.33952298760414124f, _422, _424);
  float _426 = mad(0.04737899824976921f, _423, _425);
  float _427 = _421 * 0.07019399851560593f;
  float _428 = mad(0.9163540005683899f, _422, _427);
  float _429 = mad(0.013451999984681606f, _423, _428);
  float _430 = _421 * 0.02061600051820278f;
  float _431 = mad(0.10956999659538269f, _422, _430);
  float _432 = mad(0.8698149919509888f, _423, _431);
  float _433 = log2(_426);
  float _434 = log2(_429);
  float _435 = log2(_432);
  float _436 = _433 * 0.04211956635117531f;
  float _437 = _434 * 0.04211956635117531f;
  float _438 = _435 * 0.04211956635117531f;
  float _439 = _436 + 0.6252607107162476f;
  float _440 = _437 + 0.6252607107162476f;
  float _441 = _438 + 0.6252607107162476f;
  float4 _442 = t6.SampleLevel(s2_space2, float3(_439, _440, _441), 0.0f);
  bool _448 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_448 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _452 = cb2_017x * _442.x;
    float _453 = cb2_017x * _442.y;
    float _454 = cb2_017x * _442.z;
    float _456 = _452 + cb2_017y;
    float _457 = _453 + cb2_017y;
    float _458 = _454 + cb2_017y;
    float _459 = exp2(_456);
    float _460 = exp2(_457);
    float _461 = exp2(_458);
    float _462 = _459 + 1.0f;
    float _463 = _460 + 1.0f;
    float _464 = _461 + 1.0f;
    float _465 = 1.0f / _462;
    float _466 = 1.0f / _463;
    float _467 = 1.0f / _464;
    float _469 = cb2_017z * _465;
    float _470 = cb2_017z * _466;
    float _471 = cb2_017z * _467;
    float _473 = _469 + cb2_017w;
    float _474 = _470 + cb2_017w;
    float _475 = _471 + cb2_017w;
    _477 = _473;
    _478 = _474;
    _479 = _475;
  } else {
    _477 = _442.x;
    _478 = _442.y;
    _479 = _442.z;
  }
  float _480 = _477 * 23.0f;
  float _481 = _480 + -14.473931312561035f;
  float _482 = exp2(_481);
  float _483 = _478 * 23.0f;
  float _484 = _483 + -14.473931312561035f;
  float _485 = exp2(_484);
  float _486 = _479 * 23.0f;
  float _487 = _486 + -14.473931312561035f;
  float _488 = exp2(_487);
  float _489 = dot(float3(_482, _485, _488), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _494 = dot(float3(_482, _485, _488), float3(_482, _485, _488));
  float _495 = rsqrt(_494);
  float _496 = _495 * _482;
  float _497 = _495 * _485;
  float _498 = _495 * _488;
  float _499 = cb2_001x - _496;
  float _500 = cb2_001y - _497;
  float _501 = cb2_001z - _498;
  float _502 = dot(float3(_499, _500, _501), float3(_499, _500, _501));
  float _505 = cb2_002z * _502;
  float _507 = _505 + cb2_002w;
  float _508 = saturate(_507);
  float _510 = cb2_002x * _508;
  float _511 = _489 - _482;
  float _512 = _489 - _485;
  float _513 = _489 - _488;
  float _514 = _510 * _511;
  float _515 = _510 * _512;
  float _516 = _510 * _513;
  float _517 = _514 + _482;
  float _518 = _515 + _485;
  float _519 = _516 + _488;
  float _521 = cb2_002y * _508;
  float _522 = 0.10000000149011612f - _517;
  float _523 = 0.10000000149011612f - _518;
  float _524 = 0.10000000149011612f - _519;
  float _525 = _522 * _521;
  float _526 = _523 * _521;
  float _527 = _524 * _521;
  float _528 = _525 + _517;
  float _529 = _526 + _518;
  float _530 = _527 + _519;
  float _531 = saturate(_528);
  float _532 = saturate(_529);
  float _533 = saturate(_530);
  float _538 = cb2_004x * TEXCOORD0_centroid.x;
  float _539 = cb2_004y * TEXCOORD0_centroid.y;
  float _542 = _538 + cb2_004z;
  float _543 = _539 + cb2_004w;
  float4 _549 = t7.Sample(s2_space2, float2(_542, _543));
  float _554 = _549.x * cb2_003x;
  float _555 = _549.y * cb2_003y;
  float _556 = _549.z * cb2_003z;
  float _557 = _549.w * cb2_003w;
  float _560 = _557 + cb2_026y;
  float _561 = saturate(_560);
  bool _564 = ((uint)(cb2_069y) == 0);
  if (!_564) {
    float _566 = _554 * _412;
    float _567 = _555 * _412;
    float _568 = _556 * _412;
    _570 = _566;
    _571 = _567;
    _572 = _568;
  } else {
    _570 = _554;
    _571 = _555;
    _572 = _556;
  }
  bool _575 = ((uint)(cb2_028x) == 2);
  bool _576 = ((uint)(cb2_028x) == 3);
  int _577 = (uint)(cb2_028x) & -2;
  bool _578 = (_577 == 2);
  bool _579 = ((uint)(cb2_028x) == 6);
  bool _580 = _578 || _579;
  if (_580) {
    float _582 = _570 * _561;
    float _583 = _571 * _561;
    float _584 = _572 * _561;
    float _585 = _561 * _561;
    _617 = _582;
    _618 = _583;
    _619 = _584;
    _620 = _585;
  } else {
    bool _587 = ((uint)(cb2_028x) == 4);
    if (_587) {
      float _589 = _570 + -1.0f;
      float _590 = _571 + -1.0f;
      float _591 = _572 + -1.0f;
      float _592 = _561 + -1.0f;
      float _593 = _589 * _561;
      float _594 = _590 * _561;
      float _595 = _591 * _561;
      float _596 = _592 * _561;
      float _597 = _593 + 1.0f;
      float _598 = _594 + 1.0f;
      float _599 = _595 + 1.0f;
      float _600 = _596 + 1.0f;
      _617 = _597;
      _618 = _598;
      _619 = _599;
      _620 = _600;
    } else {
      bool _602 = ((uint)(cb2_028x) == 5);
      if (_602) {
        float _604 = _570 + -0.5f;
        float _605 = _571 + -0.5f;
        float _606 = _572 + -0.5f;
        float _607 = _561 + -0.5f;
        float _608 = _604 * _561;
        float _609 = _605 * _561;
        float _610 = _606 * _561;
        float _611 = _607 * _561;
        float _612 = _608 + 0.5f;
        float _613 = _609 + 0.5f;
        float _614 = _610 + 0.5f;
        float _615 = _611 + 0.5f;
        _617 = _612;
        _618 = _613;
        _619 = _614;
        _620 = _615;
      } else {
        _617 = _570;
        _618 = _571;
        _619 = _572;
        _620 = _561;
      }
    }
  }
  if (_575) {
    float _622 = _617 + _531;
    float _623 = _618 + _532;
    float _624 = _619 + _533;
    _669 = _622;
    _670 = _623;
    _671 = _624;
    _672 = cb2_025w;
  } else {
    if (_576) {
      float _627 = 1.0f - _617;
      float _628 = 1.0f - _618;
      float _629 = 1.0f - _619;
      float _630 = _627 * _531;
      float _631 = _628 * _532;
      float _632 = _629 * _533;
      float _633 = _630 + _617;
      float _634 = _631 + _618;
      float _635 = _632 + _619;
      _669 = _633;
      _670 = _634;
      _671 = _635;
      _672 = cb2_025w;
    } else {
      bool _637 = ((uint)(cb2_028x) == 4);
      if (_637) {
        float _639 = _617 * _531;
        float _640 = _618 * _532;
        float _641 = _619 * _533;
        _669 = _639;
        _670 = _640;
        _671 = _641;
        _672 = cb2_025w;
      } else {
        bool _643 = ((uint)(cb2_028x) == 5);
        if (_643) {
          float _645 = _531 * 2.0f;
          float _646 = _645 * _617;
          float _647 = _532 * 2.0f;
          float _648 = _647 * _618;
          float _649 = _533 * 2.0f;
          float _650 = _649 * _619;
          _669 = _646;
          _670 = _648;
          _671 = _650;
          _672 = cb2_025w;
        } else {
          if (_579) {
            float _653 = _531 - _617;
            float _654 = _532 - _618;
            float _655 = _533 - _619;
            _669 = _653;
            _670 = _654;
            _671 = _655;
            _672 = cb2_025w;
          } else {
            float _657 = _617 - _531;
            float _658 = _618 - _532;
            float _659 = _619 - _533;
            float _660 = _620 * _657;
            float _661 = _620 * _658;
            float _662 = _620 * _659;
            float _663 = _660 + _531;
            float _664 = _661 + _532;
            float _665 = _662 + _533;
            float _666 = 1.0f - _620;
            float _667 = _666 * cb2_025w;
            _669 = _663;
            _670 = _664;
            _671 = _665;
            _672 = _667;
          }
        }
      }
    }
  }
  float _678 = cb2_016x - _669;
  float _679 = cb2_016y - _670;
  float _680 = cb2_016z - _671;
  float _681 = _678 * cb2_016w;
  float _682 = _679 * cb2_016w;
  float _683 = _680 * cb2_016w;
  float _684 = _681 + _669;
  float _685 = _682 + _670;
  float _686 = _683 + _671;
  bool _689 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_689 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _693 = cb2_024x * _684;
    float _694 = cb2_024x * _685;
    float _695 = cb2_024x * _686;
    _697 = _693;
    _698 = _694;
    _699 = _695;
  } else {
    _697 = _684;
    _698 = _685;
    _699 = _686;
  }
  float _702 = _697 * 0.9708889722824097f;
  float _703 = mad(0.026962999254465103f, _698, _702);
  float _704 = mad(0.002148000057786703f, _699, _703);
  float _705 = _697 * 0.01088900025933981f;
  float _706 = mad(0.9869629740715027f, _698, _705);
  float _707 = mad(0.002148000057786703f, _699, _706);
  float _708 = mad(0.026962999254465103f, _698, _705);
  float _709 = mad(0.9621480107307434f, _699, _708);
  float _710 = max(_704, 0.0f);
  float _711 = max(_707, 0.0f);
  float _712 = max(_709, 0.0f);
  float _713 = min(_710, cb2_095y);
  float _714 = min(_711, cb2_095y);
  float _715 = min(_712, cb2_095y);
  bool _718 = ((uint)(cb2_095x) == 0);
  bool _721 = ((uint)(cb2_094w) == 0);
  bool _723 = ((uint)(cb2_094z) == 0);
  bool _725 = ((uint)(cb2_094y) != 0);
  bool _727 = ((uint)(cb2_094x) == 0);
  bool _729 = ((uint)(cb2_069z) != 0);
  float _776 = asfloat((uint)(cb2_075y));
  float _777 = asfloat((uint)(cb2_075z));
  float _778 = asfloat((uint)(cb2_075w));
  float _779 = asfloat((uint)(cb2_074z));
  float _780 = asfloat((uint)(cb2_074w));
  float _781 = asfloat((uint)(cb2_075x));
  float _782 = asfloat((uint)(cb2_073w));
  float _783 = asfloat((uint)(cb2_074x));
  float _784 = asfloat((uint)(cb2_074y));
  float _785 = asfloat((uint)(cb2_077x));
  float _786 = asfloat((uint)(cb2_077y));
  float _787 = asfloat((uint)(cb2_079x));
  float _788 = asfloat((uint)(cb2_079y));
  float _789 = asfloat((uint)(cb2_079z));
  float _790 = asfloat((uint)(cb2_078y));
  float _791 = asfloat((uint)(cb2_078z));
  float _792 = asfloat((uint)(cb2_078w));
  float _793 = asfloat((uint)(cb2_077z));
  float _794 = asfloat((uint)(cb2_077w));
  float _795 = asfloat((uint)(cb2_078x));
  float _796 = asfloat((uint)(cb2_072y));
  float _797 = asfloat((uint)(cb2_072z));
  float _798 = asfloat((uint)(cb2_072w));
  float _799 = asfloat((uint)(cb2_071x));
  float _800 = asfloat((uint)(cb2_071y));
  float _801 = asfloat((uint)(cb2_076x));
  float _802 = asfloat((uint)(cb2_070w));
  float _803 = asfloat((uint)(cb2_070x));
  float _804 = asfloat((uint)(cb2_070y));
  float _805 = asfloat((uint)(cb2_070z));
  float _806 = asfloat((uint)(cb2_073x));
  float _807 = asfloat((uint)(cb2_073y));
  float _808 = asfloat((uint)(cb2_073z));
  float _809 = asfloat((uint)(cb2_071z));
  float _810 = asfloat((uint)(cb2_071w));
  float _811 = asfloat((uint)(cb2_072x));
  float _812 = max(_714, _715);
  float _813 = max(_713, _812);
  float _814 = 1.0f / _813;
  float _815 = _814 * _713;
  float _816 = _814 * _714;
  float _817 = _814 * _715;
  float _818 = abs(_815);
  float _819 = log2(_818);
  float _820 = _819 * _803;
  float _821 = exp2(_820);
  float _822 = abs(_816);
  float _823 = log2(_822);
  float _824 = _823 * _804;
  float _825 = exp2(_824);
  float _826 = abs(_817);
  float _827 = log2(_826);
  float _828 = _827 * _805;
  float _829 = exp2(_828);
  if (_725) {
    float _832 = asfloat((uint)(cb2_076w));
    float _834 = asfloat((uint)(cb2_076z));
    float _836 = asfloat((uint)(cb2_076y));
    float _837 = _834 * _714;
    float _838 = _836 * _713;
    float _839 = _832 * _715;
    float _840 = _838 + _839;
    float _841 = _840 + _837;
    _849 = _841;
  } else {
    float _843 = _810 * _714;
    float _844 = _809 * _713;
    float _845 = _811 * _715;
    float _846 = _843 + _844;
    float _847 = _846 + _845;
    _849 = _847;
  }
  float _850 = abs(_849);
  float _851 = log2(_850);
  float _852 = _851 * _802;
  float _853 = exp2(_852);
  float _854 = log2(_853);
  float _855 = _854 * _801;
  float _856 = exp2(_855);
  float _857 = select(_729, _856, _853);
  float _858 = _857 * _799;
  float _859 = _858 + _800;
  float _860 = 1.0f / _859;
  float _861 = _860 * _853;
  if (_725) {
    if (!_727) {
      float _864 = _821 * _793;
      float _865 = _825 * _794;
      float _866 = _829 * _795;
      float _867 = _865 + _864;
      float _868 = _867 + _866;
      float _869 = _825 * _791;
      float _870 = _821 * _790;
      float _871 = _829 * _792;
      float _872 = _869 + _870;
      float _873 = _872 + _871;
      float _874 = _829 * _789;
      float _875 = _825 * _788;
      float _876 = _821 * _787;
      float _877 = _875 + _876;
      float _878 = _877 + _874;
      float _879 = max(_873, _878);
      float _880 = max(_868, _879);
      float _881 = 1.0f / _880;
      float _882 = _881 * _868;
      float _883 = _881 * _873;
      float _884 = _881 * _878;
      _886 = _882;
      _887 = _883;
      _888 = _884;
    } else {
      _886 = _821;
      _887 = _825;
      _888 = _829;
    }
    float _889 = _886 * _786;
    float _890 = exp2(_889);
    float _891 = _890 * _785;
    float _892 = saturate(_891);
    float _893 = _886 * _785;
    float _894 = _886 - _893;
    float _895 = saturate(_894);
    float _896 = max(_785, _895);
    float _897 = min(_896, _892);
    float _898 = _887 * _786;
    float _899 = exp2(_898);
    float _900 = _899 * _785;
    float _901 = saturate(_900);
    float _902 = _887 * _785;
    float _903 = _887 - _902;
    float _904 = saturate(_903);
    float _905 = max(_785, _904);
    float _906 = min(_905, _901);
    float _907 = _888 * _786;
    float _908 = exp2(_907);
    float _909 = _908 * _785;
    float _910 = saturate(_909);
    float _911 = _888 * _785;
    float _912 = _888 - _911;
    float _913 = saturate(_912);
    float _914 = max(_785, _913);
    float _915 = min(_914, _910);
    _917 = _897;
    _918 = _906;
    _919 = _915;
  } else {
    _917 = _821;
    _918 = _825;
    _919 = _829;
  }
  float _920 = _917 * _809;
  float _921 = _918 * _810;
  float _922 = _921 + _920;
  float _923 = _919 * _811;
  float _924 = _922 + _923;
  float _925 = 1.0f / _924;
  float _926 = _925 * _861;
  float _927 = saturate(_926);
  float _928 = _927 * _917;
  float _929 = saturate(_928);
  float _930 = _927 * _918;
  float _931 = saturate(_930);
  float _932 = _927 * _919;
  float _933 = saturate(_932);
  float _934 = _929 * _796;
  float _935 = _796 - _934;
  float _936 = _931 * _797;
  float _937 = _797 - _936;
  float _938 = _933 * _798;
  float _939 = _798 - _938;
  float _940 = _933 * _811;
  float _941 = _929 * _809;
  float _942 = _931 * _810;
  float _943 = _861 - _941;
  float _944 = _943 - _942;
  float _945 = _944 - _940;
  float _946 = saturate(_945);
  float _947 = _937 * _810;
  float _948 = _935 * _809;
  float _949 = _939 * _811;
  float _950 = _947 + _948;
  float _951 = _950 + _949;
  float _952 = 1.0f / _951;
  float _953 = _952 * _946;
  float _954 = _953 * _935;
  float _955 = _954 + _929;
  float _956 = saturate(_955);
  float _957 = _953 * _937;
  float _958 = _957 + _931;
  float _959 = saturate(_958);
  float _960 = _953 * _939;
  float _961 = _960 + _933;
  float _962 = saturate(_961);
  float _963 = _962 * _811;
  float _964 = _956 * _809;
  float _965 = _959 * _810;
  float _966 = _861 - _964;
  float _967 = _966 - _965;
  float _968 = _967 - _963;
  float _969 = saturate(_968);
  float _970 = _969 * _806;
  float _971 = _970 + _956;
  float _972 = saturate(_971);
  float _973 = _969 * _807;
  float _974 = _973 + _959;
  float _975 = saturate(_974);
  float _976 = _969 * _808;
  float _977 = _976 + _962;
  float _978 = saturate(_977);
  if (!_723) {
    float _980 = _972 * _782;
    float _981 = _975 * _783;
    float _982 = _978 * _784;
    float _983 = _981 + _980;
    float _984 = _983 + _982;
    float _985 = _975 * _780;
    float _986 = _972 * _779;
    float _987 = _978 * _781;
    float _988 = _985 + _986;
    float _989 = _988 + _987;
    float _990 = _978 * _778;
    float _991 = _975 * _777;
    float _992 = _972 * _776;
    float _993 = _991 + _992;
    float _994 = _993 + _990;
    if (!_721) {
      float _996 = saturate(_984);
      float _997 = saturate(_989);
      float _998 = saturate(_994);
      _1000 = _998;
      _1001 = _997;
      _1002 = _996;
    } else {
      _1000 = _994;
      _1001 = _989;
      _1002 = _984;
    }
  } else {
    _1000 = _978;
    _1001 = _975;
    _1002 = _972;
  }
  if (!_718) {
    float _1004 = _1002 * _782;
    float _1005 = _1001 * _782;
    float _1006 = _1000 * _782;
    _1008 = _1006;
    _1009 = _1005;
    _1010 = _1004;
  } else {
    _1008 = _1000;
    _1009 = _1001;
    _1010 = _1002;
  }
  if (_689) {
    float _1014 = cb1_018z * 9.999999747378752e-05f;
    float _1015 = _1014 * _1010;
    float _1016 = _1014 * _1009;
    float _1017 = _1014 * _1008;
    float _1019 = 5000.0f / cb1_018y;
    float _1020 = _1015 * _1019;
    float _1021 = _1016 * _1019;
    float _1022 = _1017 * _1019;
    _1024 = _1020;
    _1025 = _1021;
    _1026 = _1022;
  } else {
    _1024 = _1010;
    _1025 = _1009;
    _1026 = _1008;
  }
  float _1027 = _1024 * 1.6047500371932983f;
  float _1028 = mad(-0.5310800075531006f, _1025, _1027);
  float _1029 = mad(-0.07366999983787537f, _1026, _1028);
  float _1030 = _1024 * -0.10208000242710114f;
  float _1031 = mad(1.1081299781799316f, _1025, _1030);
  float _1032 = mad(-0.006049999967217445f, _1026, _1031);
  float _1033 = _1024 * -0.0032599999103695154f;
  float _1034 = mad(-0.07275000214576721f, _1025, _1033);
  float _1035 = mad(1.0760200023651123f, _1026, _1034);
  if (_689) {
    // float _1037 = max(_1029, 0.0f);
    // float _1038 = max(_1032, 0.0f);
    // float _1039 = max(_1035, 0.0f);
    // bool _1040 = !(_1037 >= 0.0030399328097701073f);
    // if (!_1040) {
    //   float _1042 = abs(_1037);
    //   float _1043 = log2(_1042);
    //   float _1044 = _1043 * 0.4166666567325592f;
    //   float _1045 = exp2(_1044);
    //   float _1046 = _1045 * 1.0549999475479126f;
    //   float _1047 = _1046 + -0.054999999701976776f;
    //   _1051 = _1047;
    // } else {
    //   float _1049 = _1037 * 12.923210144042969f;
    //   _1051 = _1049;
    // }
    // bool _1052 = !(_1038 >= 0.0030399328097701073f);
    // if (!_1052) {
    //   float _1054 = abs(_1038);
    //   float _1055 = log2(_1054);
    //   float _1056 = _1055 * 0.4166666567325592f;
    //   float _1057 = exp2(_1056);
    //   float _1058 = _1057 * 1.0549999475479126f;
    //   float _1059 = _1058 + -0.054999999701976776f;
    //   _1063 = _1059;
    // } else {
    //   float _1061 = _1038 * 12.923210144042969f;
    //   _1063 = _1061;
    // }
    // bool _1064 = !(_1039 >= 0.0030399328097701073f);
    // if (!_1064) {
    //   float _1066 = abs(_1039);
    //   float _1067 = log2(_1066);
    //   float _1068 = _1067 * 0.4166666567325592f;
    //   float _1069 = exp2(_1068);
    //   float _1070 = _1069 * 1.0549999475479126f;
    //   float _1071 = _1070 + -0.054999999701976776f;
    //   _1144 = _1051;
    //   _1145 = _1063;
    //   _1146 = _1071;
    // } else {
    //   float _1073 = _1039 * 12.923210144042969f;
    //   _1144 = _1051;
    //   _1145 = _1063;
    //   _1146 = _1073;
    // }
    _1144 = renodx::color::srgb::EncodeSafe(_1029);
    _1145 = renodx::color::srgb::EncodeSafe(_1032);
    _1146 = renodx::color::srgb::EncodeSafe(_1035);

  } else {
    float _1075 = saturate(_1029);
    float _1076 = saturate(_1032);
    float _1077 = saturate(_1035);
    bool _1078 = ((uint)(cb1_018w) == -2);
    if (!_1078) {
      bool _1080 = !(_1075 >= 0.0030399328097701073f);
      if (!_1080) {
        float _1082 = abs(_1075);
        float _1083 = log2(_1082);
        float _1084 = _1083 * 0.4166666567325592f;
        float _1085 = exp2(_1084);
        float _1086 = _1085 * 1.0549999475479126f;
        float _1087 = _1086 + -0.054999999701976776f;
        _1091 = _1087;
      } else {
        float _1089 = _1075 * 12.923210144042969f;
        _1091 = _1089;
      }
      bool _1092 = !(_1076 >= 0.0030399328097701073f);
      if (!_1092) {
        float _1094 = abs(_1076);
        float _1095 = log2(_1094);
        float _1096 = _1095 * 0.4166666567325592f;
        float _1097 = exp2(_1096);
        float _1098 = _1097 * 1.0549999475479126f;
        float _1099 = _1098 + -0.054999999701976776f;
        _1103 = _1099;
      } else {
        float _1101 = _1076 * 12.923210144042969f;
        _1103 = _1101;
      }
      bool _1104 = !(_1077 >= 0.0030399328097701073f);
      if (!_1104) {
        float _1106 = abs(_1077);
        float _1107 = log2(_1106);
        float _1108 = _1107 * 0.4166666567325592f;
        float _1109 = exp2(_1108);
        float _1110 = _1109 * 1.0549999475479126f;
        float _1111 = _1110 + -0.054999999701976776f;
        _1115 = _1091;
        _1116 = _1103;
        _1117 = _1111;
      } else {
        float _1113 = _1077 * 12.923210144042969f;
        _1115 = _1091;
        _1116 = _1103;
        _1117 = _1113;
      }
    } else {
      _1115 = _1075;
      _1116 = _1076;
      _1117 = _1077;
    }
    float _1122 = abs(_1115);
    float _1123 = abs(_1116);
    float _1124 = abs(_1117);
    float _1125 = log2(_1122);
    float _1126 = log2(_1123);
    float _1127 = log2(_1124);
    float _1128 = _1125 * cb2_000z;
    float _1129 = _1126 * cb2_000z;
    float _1130 = _1127 * cb2_000z;
    float _1131 = exp2(_1128);
    float _1132 = exp2(_1129);
    float _1133 = exp2(_1130);
    float _1134 = _1131 * cb2_000y;
    float _1135 = _1132 * cb2_000y;
    float _1136 = _1133 * cb2_000y;
    float _1137 = _1134 + cb2_000x;
    float _1138 = _1135 + cb2_000x;
    float _1139 = _1136 + cb2_000x;
    float _1140 = saturate(_1137);
    float _1141 = saturate(_1138);
    float _1142 = saturate(_1139);
    _1144 = _1140;
    _1145 = _1141;
    _1146 = _1142;
  }
  float _1150 = cb2_023x * TEXCOORD0_centroid.x;
  float _1151 = cb2_023y * TEXCOORD0_centroid.y;
  float _1154 = _1150 + cb2_023z;
  float _1155 = _1151 + cb2_023w;
  float4 _1158 = t11.SampleLevel(s0_space2, float2(_1154, _1155), 0.0f);
  float _1160 = _1158.x + -0.5f;
  float _1161 = _1160 * cb2_022x;
  float _1162 = _1161 + 0.5f;
  float _1163 = _1162 * 2.0f;
  float _1164 = _1163 * _1144;
  float _1165 = _1163 * _1145;
  float _1166 = _1163 * _1146;
  float _1170 = float((uint)(cb2_019z));
  float _1171 = float((uint)(cb2_019w));
  float _1172 = _1170 + SV_Position.x;
  float _1173 = _1171 + SV_Position.y;
  uint _1174 = uint(_1172);
  uint _1175 = uint(_1173);
  uint _1178 = cb2_019x + -1u;
  uint _1179 = cb2_019y + -1u;
  int _1180 = _1174 & _1178;
  int _1181 = _1175 & _1179;
  float4 _1182 = t3.Load(int3(_1180, _1181, 0));
  float _1186 = _1182.x * 2.0f;
  float _1187 = _1182.y * 2.0f;
  float _1188 = _1182.z * 2.0f;
  float _1189 = _1186 + -1.0f;
  float _1190 = _1187 + -1.0f;
  float _1191 = _1188 + -1.0f;
  float _1192 = _1189 * _672;
  float _1193 = _1190 * _672;
  float _1194 = _1191 * _672;
  float _1195 = _1192 + _1164;
  float _1196 = _1193 + _1165;
  float _1197 = _1194 + _1166;
  float _1198 = dot(float3(_1195, _1196, _1197), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1195;
  SV_Target.y = _1196;
  SV_Target.z = _1197;
  SV_Target.w = _1198;
  SV_Target_1.x = _1198;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
