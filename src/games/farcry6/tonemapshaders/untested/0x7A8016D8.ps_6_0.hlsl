#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = max(_26.x, 0.0f);
  float _31 = max(_26.y, 0.0f);
  float _32 = max(_26.z, 0.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float _35 = min(_32, 65000.0f);
  float4 _36 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _41 = max(_36.x, 0.0f);
  float _42 = max(_36.y, 0.0f);
  float _43 = max(_36.z, 0.0f);
  float _44 = max(_36.w, 0.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _48 = min(_44, 5000.0f);
  float _51 = _24.x * cb0_028z;
  float _52 = _51 + cb0_028x;
  float _53 = cb2_027w / _52;
  float _54 = 1.0f - _53;
  float _55 = abs(_54);
  float _57 = cb2_027y * _55;
  float _59 = _57 - cb2_027z;
  float _60 = saturate(_59);
  float _61 = max(_60, _48);
  float _62 = saturate(_61);
  float _66 = cb2_006x * TEXCOORD0_centroid.x;
  float _67 = cb2_006y * TEXCOORD0_centroid.y;
  float _70 = _66 + cb2_006z;
  float _71 = _67 + cb2_006w;
  float _75 = cb2_007x * TEXCOORD0_centroid.x;
  float _76 = cb2_007y * TEXCOORD0_centroid.y;
  float _79 = _75 + cb2_007z;
  float _80 = _76 + cb2_007w;
  float _84 = cb2_008x * TEXCOORD0_centroid.x;
  float _85 = cb2_008y * TEXCOORD0_centroid.y;
  float _88 = _84 + cb2_008z;
  float _89 = _85 + cb2_008w;
  float4 _90 = t1.SampleLevel(s2_space2, float2(_70, _71), 0.0f);
  float _92 = max(_90.x, 0.0f);
  float _93 = min(_92, 65000.0f);
  float4 _94 = t1.SampleLevel(s2_space2, float2(_79, _80), 0.0f);
  float _96 = max(_94.y, 0.0f);
  float _97 = min(_96, 65000.0f);
  float4 _98 = t1.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _100 = max(_98.z, 0.0f);
  float _101 = min(_100, 65000.0f);
  float4 _102 = t4.SampleLevel(s2_space2, float2(_70, _71), 0.0f);
  float _104 = max(_102.x, 0.0f);
  float _105 = min(_104, 5000.0f);
  float4 _106 = t4.SampleLevel(s2_space2, float2(_79, _80), 0.0f);
  float _108 = max(_106.y, 0.0f);
  float _109 = min(_108, 5000.0f);
  float4 _110 = t4.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _112 = max(_110.z, 0.0f);
  float _113 = min(_112, 5000.0f);
  float4 _114 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _120 = cb2_005x * _114.x;
  float _121 = cb2_005x * _114.y;
  float _122 = cb2_005x * _114.z;
  float _123 = _93 - _33;
  float _124 = _97 - _34;
  float _125 = _101 - _35;
  float _126 = _120 * _123;
  float _127 = _121 * _124;
  float _128 = _122 * _125;
  float _129 = _126 + _33;
  float _130 = _127 + _34;
  float _131 = _128 + _35;
  float _132 = _105 - _45;
  float _133 = _109 - _46;
  float _134 = _113 - _47;
  float _135 = _120 * _132;
  float _136 = _121 * _133;
  float _137 = _122 * _134;
  float _138 = _135 + _45;
  float _139 = _136 + _46;
  float _140 = _137 + _47;
  float4 _141 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _145 = _138 - _129;
  float _146 = _139 - _130;
  float _147 = _140 - _131;
  float _148 = _145 * _62;
  float _149 = _146 * _62;
  float _150 = _147 * _62;
  float _151 = _148 + _129;
  float _152 = _149 + _130;
  float _153 = _150 + _131;
  float _154 = dot(float3(_151, _152, _153), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _158 = t0[0].SExposureData_020;
  float _160 = t0[0].SExposureData_004;
  float _162 = cb2_018x * 0.5f;
  float _163 = _162 * cb2_018y;
  float _164 = _160.x - _163;
  float _165 = cb2_018y * cb2_018x;
  float _166 = 1.0f / _165;
  float _167 = _164 * _166;
  float _168 = _154 / _158.x;
  float _169 = _168 * 5464.01611328125f;
  float _170 = _169 + 9.99999993922529e-09f;
  float _171 = log2(_170);
  float _172 = _171 - _164;
  float _173 = _172 * _166;
  float _174 = saturate(_173);
  float2 _175 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _174), 0.0f);
  float _178 = max(_175.y, 1.0000000116860974e-07f);
  float _179 = _175.x / _178;
  float _180 = _179 + _167;
  float _181 = _180 / _166;
  float _182 = _181 - _160.x;
  float _183 = -0.0f - _182;
  float _185 = _183 - cb2_027x;
  float _186 = max(0.0f, _185);
  float _189 = cb2_026z * _186;
  float _190 = _182 - cb2_027x;
  float _191 = max(0.0f, _190);
  float _193 = cb2_026w * _191;
  bool _194 = (_182 < 0.0f);
  float _195 = select(_194, _189, _193);
  float _196 = exp2(_195);
  float _197 = _196 * _151;
  float _198 = _196 * _152;
  float _199 = _196 * _153;
  float _204 = cb2_024y * _141.x;
  float _205 = cb2_024z * _141.y;
  float _206 = cb2_024w * _141.z;
  float _207 = _204 + _197;
  float _208 = _205 + _198;
  float _209 = _206 + _199;
  float _214 = _207 * cb2_025x;
  float _215 = _208 * cb2_025y;
  float _216 = _209 * cb2_025z;
  float _217 = dot(float3(_214, _215, _216), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _218 = t0[0].SExposureData_012;
  float _220 = _217 * 5464.01611328125f;
  float _221 = _220 * _218.x;
  float _222 = _221 + 9.99999993922529e-09f;
  float _223 = log2(_222);
  float _224 = _223 + 16.929765701293945f;
  float _225 = _224 * 0.05734497308731079f;
  float _226 = saturate(_225);
  float _227 = _226 * _226;
  float _228 = _226 * 2.0f;
  float _229 = 3.0f - _228;
  float _230 = _227 * _229;
  float _231 = _215 * 0.8450999855995178f;
  float _232 = _216 * 0.14589999616146088f;
  float _233 = _231 + _232;
  float _234 = _233 * 2.4890189170837402f;
  float _235 = _233 * 0.3754962384700775f;
  float _236 = _233 * 2.811495304107666f;
  float _237 = _233 * 5.519708156585693f;
  float _238 = _217 - _234;
  float _239 = _230 * _238;
  float _240 = _239 + _234;
  float _241 = _230 * 0.5f;
  float _242 = _241 + 0.5f;
  float _243 = _242 * _238;
  float _244 = _243 + _234;
  float _245 = _214 - _235;
  float _246 = _215 - _236;
  float _247 = _216 - _237;
  float _248 = _242 * _245;
  float _249 = _242 * _246;
  float _250 = _242 * _247;
  float _251 = _248 + _235;
  float _252 = _249 + _236;
  float _253 = _250 + _237;
  float _254 = 1.0f / _244;
  float _255 = _240 * _254;
  float _256 = _255 * _251;
  float _257 = _255 * _252;
  float _258 = _255 * _253;
  float _262 = cb2_020x * TEXCOORD0_centroid.x;
  float _263 = cb2_020y * TEXCOORD0_centroid.y;
  float _266 = _262 + cb2_020z;
  float _267 = _263 + cb2_020w;
  float _270 = dot(float2(_266, _267), float2(_266, _267));
  float _271 = 1.0f - _270;
  float _272 = saturate(_271);
  float _273 = log2(_272);
  float _274 = _273 * cb2_021w;
  float _275 = exp2(_274);
  float _279 = _256 - cb2_021x;
  float _280 = _257 - cb2_021y;
  float _281 = _258 - cb2_021z;
  float _282 = _279 * _275;
  float _283 = _280 * _275;
  float _284 = _281 * _275;
  float _285 = _282 + cb2_021x;
  float _286 = _283 + cb2_021y;
  float _287 = _284 + cb2_021z;
  float _288 = t0[0].SExposureData_000;
  float _290 = max(_158.x, 0.0010000000474974513f);
  float _291 = 1.0f / _290;
  float _292 = _291 * _288.x;
  bool _295 = ((uint)(cb2_069y) == 0);
  float _301;
  float _302;
  float _303;
  float _357;
  float _358;
  float _359;
  float _390;
  float _391;
  float _392;
  float _493;
  float _494;
  float _495;
  float _520;
  float _532;
  float _560;
  float _572;
  float _584;
  float _585;
  float _586;
  float _613;
  float _614;
  float _615;
  if (!_295) {
    float _297 = _292 * _285;
    float _298 = _292 * _286;
    float _299 = _292 * _287;
    _301 = _297;
    _302 = _298;
    _303 = _299;
  } else {
    _301 = _285;
    _302 = _286;
    _303 = _287;
  }
  float _304 = _301 * 0.6130970120429993f;
  float _305 = mad(0.33952298760414124f, _302, _304);
  float _306 = mad(0.04737899824976921f, _303, _305);
  float _307 = _301 * 0.07019399851560593f;
  float _308 = mad(0.9163540005683899f, _302, _307);
  float _309 = mad(0.013451999984681606f, _303, _308);
  float _310 = _301 * 0.02061600051820278f;
  float _311 = mad(0.10956999659538269f, _302, _310);
  float _312 = mad(0.8698149919509888f, _303, _311);
  float _313 = log2(_306);
  float _314 = log2(_309);
  float _315 = log2(_312);
  float _316 = _313 * 0.04211956635117531f;
  float _317 = _314 * 0.04211956635117531f;
  float _318 = _315 * 0.04211956635117531f;
  float _319 = _316 + 0.6252607107162476f;
  float _320 = _317 + 0.6252607107162476f;
  float _321 = _318 + 0.6252607107162476f;
  float4 _322 = t6.SampleLevel(s2_space2, float3(_319, _320, _321), 0.0f);
  bool _328 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_328 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _332 = cb2_017x * _322.x;
    float _333 = cb2_017x * _322.y;
    float _334 = cb2_017x * _322.z;
    float _336 = _332 + cb2_017y;
    float _337 = _333 + cb2_017y;
    float _338 = _334 + cb2_017y;
    float _339 = exp2(_336);
    float _340 = exp2(_337);
    float _341 = exp2(_338);
    float _342 = _339 + 1.0f;
    float _343 = _340 + 1.0f;
    float _344 = _341 + 1.0f;
    float _345 = 1.0f / _342;
    float _346 = 1.0f / _343;
    float _347 = 1.0f / _344;
    float _349 = cb2_017z * _345;
    float _350 = cb2_017z * _346;
    float _351 = cb2_017z * _347;
    float _353 = _349 + cb2_017w;
    float _354 = _350 + cb2_017w;
    float _355 = _351 + cb2_017w;
    _357 = _353;
    _358 = _354;
    _359 = _355;
  } else {
    _357 = _322.x;
    _358 = _322.y;
    _359 = _322.z;
  }
  float _360 = _357 * 23.0f;
  float _361 = _360 + -14.473931312561035f;
  float _362 = exp2(_361);
  float _363 = _358 * 23.0f;
  float _364 = _363 + -14.473931312561035f;
  float _365 = exp2(_364);
  float _366 = _359 * 23.0f;
  float _367 = _366 + -14.473931312561035f;
  float _368 = exp2(_367);
  float _375 = cb2_016x - _362;
  float _376 = cb2_016y - _365;
  float _377 = cb2_016z - _368;
  float _378 = _375 * cb2_016w;
  float _379 = _376 * cb2_016w;
  float _380 = _377 * cb2_016w;
  float _381 = _378 + _362;
  float _382 = _379 + _365;
  float _383 = _380 + _368;
  if (_328 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _386 = cb2_024x * _381;
    float _387 = cb2_024x * _382;
    float _388 = cb2_024x * _383;
    _390 = _386;
    _391 = _387;
    _392 = _388;
  } else {
    _390 = _381;
    _391 = _382;
    _392 = _383;
  }
  float _393 = _390 * 0.9708889722824097f;
  float _394 = mad(0.026962999254465103f, _391, _393);
  float _395 = mad(0.002148000057786703f, _392, _394);
  float _396 = _390 * 0.01088900025933981f;
  float _397 = mad(0.9869629740715027f, _391, _396);
  float _398 = mad(0.002148000057786703f, _392, _397);
  float _399 = mad(0.026962999254465103f, _391, _396);
  float _400 = mad(0.9621480107307434f, _392, _399);
  if (_328) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _405 = cb1_018y * 0.10000000149011612f;
        float _406 = log2(cb1_018z);
        float _407 = _406 + -13.287712097167969f;
        float _408 = _407 * 1.4929734468460083f;
        float _409 = _408 + 18.0f;
        float _410 = exp2(_409);
        float _411 = _410 * 0.18000000715255737f;
        float _412 = abs(_411);
        float _413 = log2(_412);
        float _414 = _413 * 1.5f;
        float _415 = exp2(_414);
        float _416 = _415 * _405;
        float _417 = _416 / cb1_018z;
        float _418 = _417 + -0.07636754959821701f;
        float _419 = _413 * 1.2750000953674316f;
        float _420 = exp2(_419);
        float _421 = _420 * 0.07636754959821701f;
        float _422 = cb1_018y * 0.011232397519052029f;
        float _423 = _422 * _415;
        float _424 = _423 / cb1_018z;
        float _425 = _421 - _424;
        float _426 = _420 + -0.11232396960258484f;
        float _427 = _426 * _405;
        float _428 = _427 / cb1_018z;
        float _429 = _428 * cb1_018z;
        float _430 = abs(_395);
        float _431 = abs(_398);
        float _432 = abs(_400);
        float _433 = log2(_430);
        float _434 = log2(_431);
        float _435 = log2(_432);
        float _436 = _433 * 1.5f;
        float _437 = _434 * 1.5f;
        float _438 = _435 * 1.5f;
        float _439 = exp2(_436);
        float _440 = exp2(_437);
        float _441 = exp2(_438);
        float _442 = _439 * _429;
        float _443 = _440 * _429;
        float _444 = _441 * _429;
        float _445 = _433 * 1.2750000953674316f;
        float _446 = _434 * 1.2750000953674316f;
        float _447 = _435 * 1.2750000953674316f;
        float _448 = exp2(_445);
        float _449 = exp2(_446);
        float _450 = exp2(_447);
        float _451 = _448 * _418;
        float _452 = _449 * _418;
        float _453 = _450 * _418;
        float _454 = _451 + _425;
        float _455 = _452 + _425;
        float _456 = _453 + _425;
        float _457 = _442 / _454;
        float _458 = _443 / _455;
        float _459 = _444 / _456;
        float _460 = _457 * 9.999999747378752e-05f;
        float _461 = _458 * 9.999999747378752e-05f;
        float _462 = _459 * 9.999999747378752e-05f;
        float _463 = 5000.0f / cb1_018y;
        float _464 = _460 * _463;
        float _465 = _461 * _463;
        float _466 = _462 * _463;
        _493 = _464;
        _494 = _465;
        _495 = _466;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_395, _398, _400));
      _493 = tonemapped.x, _494 = tonemapped.y, _495 = tonemapped.z;
    }
      } else {
        float _468 = _395 + 0.020616600289940834f;
        float _469 = _398 + 0.020616600289940834f;
        float _470 = _400 + 0.020616600289940834f;
        float _471 = _468 * _395;
        float _472 = _469 * _398;
        float _473 = _470 * _400;
        float _474 = _471 + -7.456949970219284e-05f;
        float _475 = _472 + -7.456949970219284e-05f;
        float _476 = _473 + -7.456949970219284e-05f;
        float _477 = _395 * 0.9837960004806519f;
        float _478 = _398 * 0.9837960004806519f;
        float _479 = _400 * 0.9837960004806519f;
        float _480 = _477 + 0.4336790144443512f;
        float _481 = _478 + 0.4336790144443512f;
        float _482 = _479 + 0.4336790144443512f;
        float _483 = _480 * _395;
        float _484 = _481 * _398;
        float _485 = _482 * _400;
        float _486 = _483 + 0.24617899954319f;
        float _487 = _484 + 0.24617899954319f;
        float _488 = _485 + 0.24617899954319f;
        float _489 = _474 / _486;
        float _490 = _475 / _487;
        float _491 = _476 / _488;
        _493 = _489;
        _494 = _490;
        _495 = _491;
      }
      float _496 = _493 * 1.6047500371932983f;
      float _497 = mad(-0.5310800075531006f, _494, _496);
      float _498 = mad(-0.07366999983787537f, _495, _497);
      float _499 = _493 * -0.10208000242710114f;
      float _500 = mad(1.1081299781799316f, _494, _499);
      float _501 = mad(-0.006049999967217445f, _495, _500);
      float _502 = _493 * -0.0032599999103695154f;
      float _503 = mad(-0.07275000214576721f, _494, _502);
      float _504 = mad(1.0760200023651123f, _495, _503);
      if (_328) {
        // float _506 = max(_498, 0.0f);
        // float _507 = max(_501, 0.0f);
        // float _508 = max(_504, 0.0f);
        // bool _509 = !(_506 >= 0.0030399328097701073f);
        // if (!_509) {
        //   float _511 = abs(_506);
        //   float _512 = log2(_511);
        //   float _513 = _512 * 0.4166666567325592f;
        //   float _514 = exp2(_513);
        //   float _515 = _514 * 1.0549999475479126f;
        //   float _516 = _515 + -0.054999999701976776f;
        //   _520 = _516;
        // } else {
        //   float _518 = _506 * 12.923210144042969f;
        //   _520 = _518;
        // }
        // bool _521 = !(_507 >= 0.0030399328097701073f);
        // if (!_521) {
        //   float _523 = abs(_507);
        //   float _524 = log2(_523);
        //   float _525 = _524 * 0.4166666567325592f;
        //   float _526 = exp2(_525);
        //   float _527 = _526 * 1.0549999475479126f;
        //   float _528 = _527 + -0.054999999701976776f;
        //   _532 = _528;
        // } else {
        //   float _530 = _507 * 12.923210144042969f;
        //   _532 = _530;
        // }
        // bool _533 = !(_508 >= 0.0030399328097701073f);
        // if (!_533) {
        //   float _535 = abs(_508);
        //   float _536 = log2(_535);
        //   float _537 = _536 * 0.4166666567325592f;
        //   float _538 = exp2(_537);
        //   float _539 = _538 * 1.0549999475479126f;
        //   float _540 = _539 + -0.054999999701976776f;
        //   _613 = _520;
        //   _614 = _532;
        //   _615 = _540;
        // } else {
        //   float _542 = _508 * 12.923210144042969f;
        //   _613 = _520;
        //   _614 = _532;
        //   _615 = _542;
        // }
        _613 = renodx::color::srgb::EncodeSafe(_498);
        _614 = renodx::color::srgb::EncodeSafe(_501);
        _615 = renodx::color::srgb::EncodeSafe(_504);

      } else {
        float _544 = saturate(_498);
        float _545 = saturate(_501);
        float _546 = saturate(_504);
        bool _547 = ((uint)(cb1_018w) == -2);
        if (!_547) {
          bool _549 = !(_544 >= 0.0030399328097701073f);
          if (!_549) {
            float _551 = abs(_544);
            float _552 = log2(_551);
            float _553 = _552 * 0.4166666567325592f;
            float _554 = exp2(_553);
            float _555 = _554 * 1.0549999475479126f;
            float _556 = _555 + -0.054999999701976776f;
            _560 = _556;
          } else {
            float _558 = _544 * 12.923210144042969f;
            _560 = _558;
          }
          bool _561 = !(_545 >= 0.0030399328097701073f);
          if (!_561) {
            float _563 = abs(_545);
            float _564 = log2(_563);
            float _565 = _564 * 0.4166666567325592f;
            float _566 = exp2(_565);
            float _567 = _566 * 1.0549999475479126f;
            float _568 = _567 + -0.054999999701976776f;
            _572 = _568;
          } else {
            float _570 = _545 * 12.923210144042969f;
            _572 = _570;
          }
          bool _573 = !(_546 >= 0.0030399328097701073f);
          if (!_573) {
            float _575 = abs(_546);
            float _576 = log2(_575);
            float _577 = _576 * 0.4166666567325592f;
            float _578 = exp2(_577);
            float _579 = _578 * 1.0549999475479126f;
            float _580 = _579 + -0.054999999701976776f;
            _584 = _560;
            _585 = _572;
            _586 = _580;
          } else {
            float _582 = _546 * 12.923210144042969f;
            _584 = _560;
            _585 = _572;
            _586 = _582;
          }
        } else {
          _584 = _544;
          _585 = _545;
          _586 = _546;
        }
        float _591 = abs(_584);
        float _592 = abs(_585);
        float _593 = abs(_586);
        float _594 = log2(_591);
        float _595 = log2(_592);
        float _596 = log2(_593);
        float _597 = _594 * cb2_000z;
        float _598 = _595 * cb2_000z;
        float _599 = _596 * cb2_000z;
        float _600 = exp2(_597);
        float _601 = exp2(_598);
        float _602 = exp2(_599);
        float _603 = _600 * cb2_000y;
        float _604 = _601 * cb2_000y;
        float _605 = _602 * cb2_000y;
        float _606 = _603 + cb2_000x;
        float _607 = _604 + cb2_000x;
        float _608 = _605 + cb2_000x;
        float _609 = saturate(_606);
        float _610 = saturate(_607);
        float _611 = saturate(_608);
        _613 = _609;
        _614 = _610;
        _615 = _611;
      }
      float _619 = cb2_023x * TEXCOORD0_centroid.x;
      float _620 = cb2_023y * TEXCOORD0_centroid.y;
      float _623 = _619 + cb2_023z;
      float _624 = _620 + cb2_023w;
      float4 _627 = t9.SampleLevel(s0_space2, float2(_623, _624), 0.0f);
      float _629 = _627.x + -0.5f;
      float _630 = _629 * cb2_022x;
      float _631 = _630 + 0.5f;
      float _632 = _631 * 2.0f;
      float _633 = _632 * _613;
      float _634 = _632 * _614;
      float _635 = _632 * _615;
      float _639 = float((uint)(cb2_019z));
      float _640 = float((uint)(cb2_019w));
      float _641 = _639 + SV_Position.x;
      float _642 = _640 + SV_Position.y;
      uint _643 = uint(_641);
      uint _644 = uint(_642);
      uint _647 = cb2_019x + -1u;
      uint _648 = cb2_019y + -1u;
      int _649 = _643 & _647;
      int _650 = _644 & _648;
      float4 _651 = t3.Load(int3(_649, _650, 0));
      float _655 = _651.x * 2.0f;
      float _656 = _651.y * 2.0f;
      float _657 = _651.z * 2.0f;
      float _658 = _655 + -1.0f;
      float _659 = _656 + -1.0f;
      float _660 = _657 + -1.0f;
      float _661 = _658 * cb2_025w;
      float _662 = _659 * cb2_025w;
      float _663 = _660 * cb2_025w;
      float _664 = _661 + _633;
      float _665 = _662 + _634;
      float _666 = _663 + _635;
      float _667 = dot(float3(_664, _665, _666), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _664;
      SV_Target.y = _665;
      SV_Target.z = _666;
      SV_Target.w = _667;
      SV_Target_1.x = _667;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
