#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _28 = t9.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _32 = _28.x * 6.283199787139893f;
  float _33 = cos(_32);
  float _34 = sin(_32);
  float _35 = _33 * _28.z;
  float _36 = _34 * _28.z;
  float _37 = _35 + TEXCOORD0_centroid.x;
  float _38 = _36 + TEXCOORD0_centroid.y;
  float _39 = _37 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _35;
  float _44 = _38 * 10.0f;
  float _45 = 10.0f - _44;
  float _46 = min(_44, _45);
  float _47 = saturate(_46);
  float _48 = _47 * _36;
  float _49 = _43 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t9.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _53 = _51.w * _43;
  float _54 = _51.w * _48;
  float _55 = 1.0f - _28.y;
  float _56 = saturate(_55);
  float _57 = _53 * _56;
  float _58 = _54 * _56;
  float _59 = _57 + TEXCOORD0_centroid.x;
  float _60 = _58 + TEXCOORD0_centroid.y;
  float4 _61 = t9.SampleLevel(s2_space2, float2(_59, _60), 0.0f);
  bool _63 = (_61.y > 0.0f);
  float _64 = select(_63, TEXCOORD0_centroid.x, _59);
  float _65 = select(_63, TEXCOORD0_centroid.y, _60);
  float4 _66 = t1.SampleLevel(s4_space2, float2(_64, _65), 0.0f);
  float _70 = max(_66.x, 0.0f);
  float _71 = max(_66.y, 0.0f);
  float _72 = max(_66.z, 0.0f);
  float _73 = min(_70, 65000.0f);
  float _74 = min(_71, 65000.0f);
  float _75 = min(_72, 65000.0f);
  float4 _76 = t4.SampleLevel(s2_space2, float2(_64, _65), 0.0f);
  float _81 = max(_76.x, 0.0f);
  float _82 = max(_76.y, 0.0f);
  float _83 = max(_76.z, 0.0f);
  float _84 = max(_76.w, 0.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _87 = min(_83, 5000.0f);
  float _88 = min(_84, 5000.0f);
  float _91 = _26.x * cb0_028z;
  float _92 = _91 + cb0_028x;
  float _93 = cb2_027w / _92;
  float _94 = 1.0f - _93;
  float _95 = abs(_94);
  float _97 = cb2_027y * _95;
  float _99 = _97 - cb2_027z;
  float _100 = saturate(_99);
  float _101 = max(_100, _88);
  float _102 = saturate(_101);
  float _106 = cb2_006x * _64;
  float _107 = cb2_006y * _65;
  float _110 = _106 + cb2_006z;
  float _111 = _107 + cb2_006w;
  float _115 = cb2_007x * _64;
  float _116 = cb2_007y * _65;
  float _119 = _115 + cb2_007z;
  float _120 = _116 + cb2_007w;
  float _124 = cb2_008x * _64;
  float _125 = cb2_008y * _65;
  float _128 = _124 + cb2_008z;
  float _129 = _125 + cb2_008w;
  float4 _130 = t1.SampleLevel(s2_space2, float2(_110, _111), 0.0f);
  float _132 = max(_130.x, 0.0f);
  float _133 = min(_132, 65000.0f);
  float4 _134 = t1.SampleLevel(s2_space2, float2(_119, _120), 0.0f);
  float _136 = max(_134.y, 0.0f);
  float _137 = min(_136, 65000.0f);
  float4 _138 = t1.SampleLevel(s2_space2, float2(_128, _129), 0.0f);
  float _140 = max(_138.z, 0.0f);
  float _141 = min(_140, 65000.0f);
  float4 _142 = t4.SampleLevel(s2_space2, float2(_110, _111), 0.0f);
  float _144 = max(_142.x, 0.0f);
  float _145 = min(_144, 5000.0f);
  float4 _146 = t4.SampleLevel(s2_space2, float2(_119, _120), 0.0f);
  float _148 = max(_146.y, 0.0f);
  float _149 = min(_148, 5000.0f);
  float4 _150 = t4.SampleLevel(s2_space2, float2(_128, _129), 0.0f);
  float _152 = max(_150.z, 0.0f);
  float _153 = min(_152, 5000.0f);
  float4 _154 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _160 = cb2_005x * _154.x;
  float _161 = cb2_005x * _154.y;
  float _162 = cb2_005x * _154.z;
  float _163 = _133 - _73;
  float _164 = _137 - _74;
  float _165 = _141 - _75;
  float _166 = _160 * _163;
  float _167 = _161 * _164;
  float _168 = _162 * _165;
  float _169 = _166 + _73;
  float _170 = _167 + _74;
  float _171 = _168 + _75;
  float _172 = _145 - _85;
  float _173 = _149 - _86;
  float _174 = _153 - _87;
  float _175 = _160 * _172;
  float _176 = _161 * _173;
  float _177 = _162 * _174;
  float _178 = _175 + _85;
  float _179 = _176 + _86;
  float _180 = _177 + _87;
  float4 _181 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _185 = _178 - _169;
  float _186 = _179 - _170;
  float _187 = _180 - _171;
  float _188 = _185 * _102;
  float _189 = _186 * _102;
  float _190 = _187 * _102;
  float _191 = _188 + _169;
  float _192 = _189 + _170;
  float _193 = _190 + _171;
  float _194 = dot(float3(_191, _192, _193), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _198 = t0[0].SExposureData_020;
  float _200 = t0[0].SExposureData_004;
  float _202 = cb2_018x * 0.5f;
  float _203 = _202 * cb2_018y;
  float _204 = _200.x - _203;
  float _205 = cb2_018y * cb2_018x;
  float _206 = 1.0f / _205;
  float _207 = _204 * _206;
  float _208 = _194 / _198.x;
  float _209 = _208 * 5464.01611328125f;
  float _210 = _209 + 9.99999993922529e-09f;
  float _211 = log2(_210);
  float _212 = _211 - _204;
  float _213 = _212 * _206;
  float _214 = saturate(_213);
  float2 _215 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _214), 0.0f);
  float _218 = max(_215.y, 1.0000000116860974e-07f);
  float _219 = _215.x / _218;
  float _220 = _219 + _207;
  float _221 = _220 / _206;
  float _222 = _221 - _200.x;
  float _223 = -0.0f - _222;
  float _225 = _223 - cb2_027x;
  float _226 = max(0.0f, _225);
  float _229 = cb2_026z * _226;
  float _230 = _222 - cb2_027x;
  float _231 = max(0.0f, _230);
  float _233 = cb2_026w * _231;
  bool _234 = (_222 < 0.0f);
  float _235 = select(_234, _229, _233);
  float _236 = exp2(_235);
  float _237 = _236 * _191;
  float _238 = _236 * _192;
  float _239 = _236 * _193;
  float _244 = cb2_024y * _181.x;
  float _245 = cb2_024z * _181.y;
  float _246 = cb2_024w * _181.z;
  float _247 = _244 + _237;
  float _248 = _245 + _238;
  float _249 = _246 + _239;
  float _254 = _247 * cb2_025x;
  float _255 = _248 * cb2_025y;
  float _256 = _249 * cb2_025z;
  float _257 = dot(float3(_254, _255, _256), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _258 = t0[0].SExposureData_012;
  float _260 = _257 * 5464.01611328125f;
  float _261 = _260 * _258.x;
  float _262 = _261 + 9.99999993922529e-09f;
  float _263 = log2(_262);
  float _264 = _263 + 16.929765701293945f;
  float _265 = _264 * 0.05734497308731079f;
  float _266 = saturate(_265);
  float _267 = _266 * _266;
  float _268 = _266 * 2.0f;
  float _269 = 3.0f - _268;
  float _270 = _267 * _269;
  float _271 = _255 * 0.8450999855995178f;
  float _272 = _256 * 0.14589999616146088f;
  float _273 = _271 + _272;
  float _274 = _273 * 2.4890189170837402f;
  float _275 = _273 * 0.3754962384700775f;
  float _276 = _273 * 2.811495304107666f;
  float _277 = _273 * 5.519708156585693f;
  float _278 = _257 - _274;
  float _279 = _270 * _278;
  float _280 = _279 + _274;
  float _281 = _270 * 0.5f;
  float _282 = _281 + 0.5f;
  float _283 = _282 * _278;
  float _284 = _283 + _274;
  float _285 = _254 - _275;
  float _286 = _255 - _276;
  float _287 = _256 - _277;
  float _288 = _282 * _285;
  float _289 = _282 * _286;
  float _290 = _282 * _287;
  float _291 = _288 + _275;
  float _292 = _289 + _276;
  float _293 = _290 + _277;
  float _294 = 1.0f / _284;
  float _295 = _280 * _294;
  float _296 = _295 * _291;
  float _297 = _295 * _292;
  float _298 = _295 * _293;
  float _302 = cb2_020x * TEXCOORD0_centroid.x;
  float _303 = cb2_020y * TEXCOORD0_centroid.y;
  float _306 = _302 + cb2_020z;
  float _307 = _303 + cb2_020w;
  float _310 = dot(float2(_306, _307), float2(_306, _307));
  float _311 = 1.0f - _310;
  float _312 = saturate(_311);
  float _313 = log2(_312);
  float _314 = _313 * cb2_021w;
  float _315 = exp2(_314);
  float _319 = _296 - cb2_021x;
  float _320 = _297 - cb2_021y;
  float _321 = _298 - cb2_021z;
  float _322 = _319 * _315;
  float _323 = _320 * _315;
  float _324 = _321 * _315;
  float _325 = _322 + cb2_021x;
  float _326 = _323 + cb2_021y;
  float _327 = _324 + cb2_021z;
  float _328 = t0[0].SExposureData_000;
  float _330 = max(_198.x, 0.0010000000474974513f);
  float _331 = 1.0f / _330;
  float _332 = _331 * _328.x;
  bool _335 = ((uint)(cb2_069y) == 0);
  float _341;
  float _342;
  float _343;
  float _397;
  float _398;
  float _399;
  float _445;
  float _446;
  float _447;
  float _492;
  float _493;
  float _494;
  float _495;
  float _544;
  float _545;
  float _546;
  float _547;
  float _572;
  float _573;
  float _574;
  float _724;
  float _761;
  float _762;
  float _763;
  float _792;
  float _793;
  float _794;
  float _875;
  float _876;
  float _877;
  float _883;
  float _884;
  float _885;
  float _899;
  float _900;
  float _901;
  float _926;
  float _938;
  float _966;
  float _978;
  float _990;
  float _991;
  float _992;
  float _1019;
  float _1020;
  float _1021;
  if (!_335) {
    float _337 = _332 * _325;
    float _338 = _332 * _326;
    float _339 = _332 * _327;
    _341 = _337;
    _342 = _338;
    _343 = _339;
  } else {
    _341 = _325;
    _342 = _326;
    _343 = _327;
  }
  float _344 = _341 * 0.6130970120429993f;
  float _345 = mad(0.33952298760414124f, _342, _344);
  float _346 = mad(0.04737899824976921f, _343, _345);
  float _347 = _341 * 0.07019399851560593f;
  float _348 = mad(0.9163540005683899f, _342, _347);
  float _349 = mad(0.013451999984681606f, _343, _348);
  float _350 = _341 * 0.02061600051820278f;
  float _351 = mad(0.10956999659538269f, _342, _350);
  float _352 = mad(0.8698149919509888f, _343, _351);
  float _353 = log2(_346);
  float _354 = log2(_349);
  float _355 = log2(_352);
  float _356 = _353 * 0.04211956635117531f;
  float _357 = _354 * 0.04211956635117531f;
  float _358 = _355 * 0.04211956635117531f;
  float _359 = _356 + 0.6252607107162476f;
  float _360 = _357 + 0.6252607107162476f;
  float _361 = _358 + 0.6252607107162476f;
  float4 _362 = t6.SampleLevel(s2_space2, float3(_359, _360, _361), 0.0f);
  bool _368 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_368 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _372 = cb2_017x * _362.x;
    float _373 = cb2_017x * _362.y;
    float _374 = cb2_017x * _362.z;
    float _376 = _372 + cb2_017y;
    float _377 = _373 + cb2_017y;
    float _378 = _374 + cb2_017y;
    float _379 = exp2(_376);
    float _380 = exp2(_377);
    float _381 = exp2(_378);
    float _382 = _379 + 1.0f;
    float _383 = _380 + 1.0f;
    float _384 = _381 + 1.0f;
    float _385 = 1.0f / _382;
    float _386 = 1.0f / _383;
    float _387 = 1.0f / _384;
    float _389 = cb2_017z * _385;
    float _390 = cb2_017z * _386;
    float _391 = cb2_017z * _387;
    float _393 = _389 + cb2_017w;
    float _394 = _390 + cb2_017w;
    float _395 = _391 + cb2_017w;
    _397 = _393;
    _398 = _394;
    _399 = _395;
  } else {
    _397 = _362.x;
    _398 = _362.y;
    _399 = _362.z;
  }
  float _400 = _397 * 23.0f;
  float _401 = _400 + -14.473931312561035f;
  float _402 = exp2(_401);
  float _403 = _398 * 23.0f;
  float _404 = _403 + -14.473931312561035f;
  float _405 = exp2(_404);
  float _406 = _399 * 23.0f;
  float _407 = _406 + -14.473931312561035f;
  float _408 = exp2(_407);
  float _413 = cb2_004x * TEXCOORD0_centroid.x;
  float _414 = cb2_004y * TEXCOORD0_centroid.y;
  float _417 = _413 + cb2_004z;
  float _418 = _414 + cb2_004w;
  float4 _424 = t8.Sample(s2_space2, float2(_417, _418));
  float _429 = _424.x * cb2_003x;
  float _430 = _424.y * cb2_003y;
  float _431 = _424.z * cb2_003z;
  float _432 = _424.w * cb2_003w;
  float _435 = _432 + cb2_026y;
  float _436 = saturate(_435);
  bool _439 = ((uint)(cb2_069y) == 0);
  if (!_439) {
    float _441 = _429 * _332;
    float _442 = _430 * _332;
    float _443 = _431 * _332;
    _445 = _441;
    _446 = _442;
    _447 = _443;
  } else {
    _445 = _429;
    _446 = _430;
    _447 = _431;
  }
  bool _450 = ((uint)(cb2_028x) == 2);
  bool _451 = ((uint)(cb2_028x) == 3);
  int _452 = (uint)(cb2_028x) & -2;
  bool _453 = (_452 == 2);
  bool _454 = ((uint)(cb2_028x) == 6);
  bool _455 = _453 || _454;
  if (_455) {
    float _457 = _445 * _436;
    float _458 = _446 * _436;
    float _459 = _447 * _436;
    float _460 = _436 * _436;
    _492 = _457;
    _493 = _458;
    _494 = _459;
    _495 = _460;
  } else {
    bool _462 = ((uint)(cb2_028x) == 4);
    if (_462) {
      float _464 = _445 + -1.0f;
      float _465 = _446 + -1.0f;
      float _466 = _447 + -1.0f;
      float _467 = _436 + -1.0f;
      float _468 = _464 * _436;
      float _469 = _465 * _436;
      float _470 = _466 * _436;
      float _471 = _467 * _436;
      float _472 = _468 + 1.0f;
      float _473 = _469 + 1.0f;
      float _474 = _470 + 1.0f;
      float _475 = _471 + 1.0f;
      _492 = _472;
      _493 = _473;
      _494 = _474;
      _495 = _475;
    } else {
      bool _477 = ((uint)(cb2_028x) == 5);
      if (_477) {
        float _479 = _445 + -0.5f;
        float _480 = _446 + -0.5f;
        float _481 = _447 + -0.5f;
        float _482 = _436 + -0.5f;
        float _483 = _479 * _436;
        float _484 = _480 * _436;
        float _485 = _481 * _436;
        float _486 = _482 * _436;
        float _487 = _483 + 0.5f;
        float _488 = _484 + 0.5f;
        float _489 = _485 + 0.5f;
        float _490 = _486 + 0.5f;
        _492 = _487;
        _493 = _488;
        _494 = _489;
        _495 = _490;
      } else {
        _492 = _445;
        _493 = _446;
        _494 = _447;
        _495 = _436;
      }
    }
  }
  if (_450) {
    float _497 = _492 + _402;
    float _498 = _493 + _405;
    float _499 = _494 + _408;
    _544 = _497;
    _545 = _498;
    _546 = _499;
    _547 = cb2_025w;
  } else {
    if (_451) {
      float _502 = 1.0f - _492;
      float _503 = 1.0f - _493;
      float _504 = 1.0f - _494;
      float _505 = _502 * _402;
      float _506 = _503 * _405;
      float _507 = _504 * _408;
      float _508 = _505 + _492;
      float _509 = _506 + _493;
      float _510 = _507 + _494;
      _544 = _508;
      _545 = _509;
      _546 = _510;
      _547 = cb2_025w;
    } else {
      bool _512 = ((uint)(cb2_028x) == 4);
      if (_512) {
        float _514 = _492 * _402;
        float _515 = _493 * _405;
        float _516 = _494 * _408;
        _544 = _514;
        _545 = _515;
        _546 = _516;
        _547 = cb2_025w;
      } else {
        bool _518 = ((uint)(cb2_028x) == 5);
        if (_518) {
          float _520 = _402 * 2.0f;
          float _521 = _520 * _492;
          float _522 = _405 * 2.0f;
          float _523 = _522 * _493;
          float _524 = _408 * 2.0f;
          float _525 = _524 * _494;
          _544 = _521;
          _545 = _523;
          _546 = _525;
          _547 = cb2_025w;
        } else {
          if (_454) {
            float _528 = _402 - _492;
            float _529 = _405 - _493;
            float _530 = _408 - _494;
            _544 = _528;
            _545 = _529;
            _546 = _530;
            _547 = cb2_025w;
          } else {
            float _532 = _492 - _402;
            float _533 = _493 - _405;
            float _534 = _494 - _408;
            float _535 = _495 * _532;
            float _536 = _495 * _533;
            float _537 = _495 * _534;
            float _538 = _535 + _402;
            float _539 = _536 + _405;
            float _540 = _537 + _408;
            float _541 = 1.0f - _495;
            float _542 = _541 * cb2_025w;
            _544 = _538;
            _545 = _539;
            _546 = _540;
            _547 = _542;
          }
        }
      }
    }
  }
  float _553 = cb2_016x - _544;
  float _554 = cb2_016y - _545;
  float _555 = cb2_016z - _546;
  float _556 = _553 * cb2_016w;
  float _557 = _554 * cb2_016w;
  float _558 = _555 * cb2_016w;
  float _559 = _556 + _544;
  float _560 = _557 + _545;
  float _561 = _558 + _546;
  bool _564 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_564 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _568 = cb2_024x * _559;
    float _569 = cb2_024x * _560;
    float _570 = cb2_024x * _561;
    _572 = _568;
    _573 = _569;
    _574 = _570;
  } else {
    _572 = _559;
    _573 = _560;
    _574 = _561;
  }
  float _577 = _572 * 0.9708889722824097f;
  float _578 = mad(0.026962999254465103f, _573, _577);
  float _579 = mad(0.002148000057786703f, _574, _578);
  float _580 = _572 * 0.01088900025933981f;
  float _581 = mad(0.9869629740715027f, _573, _580);
  float _582 = mad(0.002148000057786703f, _574, _581);
  float _583 = mad(0.026962999254465103f, _573, _580);
  float _584 = mad(0.9621480107307434f, _574, _583);
  float _585 = max(_579, 0.0f);
  float _586 = max(_582, 0.0f);
  float _587 = max(_584, 0.0f);
  float _588 = min(_585, cb2_095y);
  float _589 = min(_586, cb2_095y);
  float _590 = min(_587, cb2_095y);
  bool _593 = ((uint)(cb2_095x) == 0);
  bool _596 = ((uint)(cb2_094w) == 0);
  bool _598 = ((uint)(cb2_094z) == 0);
  bool _600 = ((uint)(cb2_094y) != 0);
  bool _602 = ((uint)(cb2_094x) == 0);
  bool _604 = ((uint)(cb2_069z) != 0);
  float _651 = asfloat((uint)(cb2_075y));
  float _652 = asfloat((uint)(cb2_075z));
  float _653 = asfloat((uint)(cb2_075w));
  float _654 = asfloat((uint)(cb2_074z));
  float _655 = asfloat((uint)(cb2_074w));
  float _656 = asfloat((uint)(cb2_075x));
  float _657 = asfloat((uint)(cb2_073w));
  float _658 = asfloat((uint)(cb2_074x));
  float _659 = asfloat((uint)(cb2_074y));
  float _660 = asfloat((uint)(cb2_077x));
  float _661 = asfloat((uint)(cb2_077y));
  float _662 = asfloat((uint)(cb2_079x));
  float _663 = asfloat((uint)(cb2_079y));
  float _664 = asfloat((uint)(cb2_079z));
  float _665 = asfloat((uint)(cb2_078y));
  float _666 = asfloat((uint)(cb2_078z));
  float _667 = asfloat((uint)(cb2_078w));
  float _668 = asfloat((uint)(cb2_077z));
  float _669 = asfloat((uint)(cb2_077w));
  float _670 = asfloat((uint)(cb2_078x));
  float _671 = asfloat((uint)(cb2_072y));
  float _672 = asfloat((uint)(cb2_072z));
  float _673 = asfloat((uint)(cb2_072w));
  float _674 = asfloat((uint)(cb2_071x));
  float _675 = asfloat((uint)(cb2_071y));
  float _676 = asfloat((uint)(cb2_076x));
  float _677 = asfloat((uint)(cb2_070w));
  float _678 = asfloat((uint)(cb2_070x));
  float _679 = asfloat((uint)(cb2_070y));
  float _680 = asfloat((uint)(cb2_070z));
  float _681 = asfloat((uint)(cb2_073x));
  float _682 = asfloat((uint)(cb2_073y));
  float _683 = asfloat((uint)(cb2_073z));
  float _684 = asfloat((uint)(cb2_071z));
  float _685 = asfloat((uint)(cb2_071w));
  float _686 = asfloat((uint)(cb2_072x));
  float _687 = max(_589, _590);
  float _688 = max(_588, _687);
  float _689 = 1.0f / _688;
  float _690 = _689 * _588;
  float _691 = _689 * _589;
  float _692 = _689 * _590;
  float _693 = abs(_690);
  float _694 = log2(_693);
  float _695 = _694 * _678;
  float _696 = exp2(_695);
  float _697 = abs(_691);
  float _698 = log2(_697);
  float _699 = _698 * _679;
  float _700 = exp2(_699);
  float _701 = abs(_692);
  float _702 = log2(_701);
  float _703 = _702 * _680;
  float _704 = exp2(_703);
  if (_600) {
    float _707 = asfloat((uint)(cb2_076w));
    float _709 = asfloat((uint)(cb2_076z));
    float _711 = asfloat((uint)(cb2_076y));
    float _712 = _709 * _589;
    float _713 = _711 * _588;
    float _714 = _707 * _590;
    float _715 = _713 + _714;
    float _716 = _715 + _712;
    _724 = _716;
  } else {
    float _718 = _685 * _589;
    float _719 = _684 * _588;
    float _720 = _686 * _590;
    float _721 = _718 + _719;
    float _722 = _721 + _720;
    _724 = _722;
  }
  float _725 = abs(_724);
  float _726 = log2(_725);
  float _727 = _726 * _677;
  float _728 = exp2(_727);
  float _729 = log2(_728);
  float _730 = _729 * _676;
  float _731 = exp2(_730);
  float _732 = select(_604, _731, _728);
  float _733 = _732 * _674;
  float _734 = _733 + _675;
  float _735 = 1.0f / _734;
  float _736 = _735 * _728;
  if (_600) {
    if (!_602) {
      float _739 = _696 * _668;
      float _740 = _700 * _669;
      float _741 = _704 * _670;
      float _742 = _740 + _739;
      float _743 = _742 + _741;
      float _744 = _700 * _666;
      float _745 = _696 * _665;
      float _746 = _704 * _667;
      float _747 = _744 + _745;
      float _748 = _747 + _746;
      float _749 = _704 * _664;
      float _750 = _700 * _663;
      float _751 = _696 * _662;
      float _752 = _750 + _751;
      float _753 = _752 + _749;
      float _754 = max(_748, _753);
      float _755 = max(_743, _754);
      float _756 = 1.0f / _755;
      float _757 = _756 * _743;
      float _758 = _756 * _748;
      float _759 = _756 * _753;
      _761 = _757;
      _762 = _758;
      _763 = _759;
    } else {
      _761 = _696;
      _762 = _700;
      _763 = _704;
    }
    float _764 = _761 * _661;
    float _765 = exp2(_764);
    float _766 = _765 * _660;
    float _767 = saturate(_766);
    float _768 = _761 * _660;
    float _769 = _761 - _768;
    float _770 = saturate(_769);
    float _771 = max(_660, _770);
    float _772 = min(_771, _767);
    float _773 = _762 * _661;
    float _774 = exp2(_773);
    float _775 = _774 * _660;
    float _776 = saturate(_775);
    float _777 = _762 * _660;
    float _778 = _762 - _777;
    float _779 = saturate(_778);
    float _780 = max(_660, _779);
    float _781 = min(_780, _776);
    float _782 = _763 * _661;
    float _783 = exp2(_782);
    float _784 = _783 * _660;
    float _785 = saturate(_784);
    float _786 = _763 * _660;
    float _787 = _763 - _786;
    float _788 = saturate(_787);
    float _789 = max(_660, _788);
    float _790 = min(_789, _785);
    _792 = _772;
    _793 = _781;
    _794 = _790;
  } else {
    _792 = _696;
    _793 = _700;
    _794 = _704;
  }
  float _795 = _792 * _684;
  float _796 = _793 * _685;
  float _797 = _796 + _795;
  float _798 = _794 * _686;
  float _799 = _797 + _798;
  float _800 = 1.0f / _799;
  float _801 = _800 * _736;
  float _802 = saturate(_801);
  float _803 = _802 * _792;
  float _804 = saturate(_803);
  float _805 = _802 * _793;
  float _806 = saturate(_805);
  float _807 = _802 * _794;
  float _808 = saturate(_807);
  float _809 = _804 * _671;
  float _810 = _671 - _809;
  float _811 = _806 * _672;
  float _812 = _672 - _811;
  float _813 = _808 * _673;
  float _814 = _673 - _813;
  float _815 = _808 * _686;
  float _816 = _804 * _684;
  float _817 = _806 * _685;
  float _818 = _736 - _816;
  float _819 = _818 - _817;
  float _820 = _819 - _815;
  float _821 = saturate(_820);
  float _822 = _812 * _685;
  float _823 = _810 * _684;
  float _824 = _814 * _686;
  float _825 = _822 + _823;
  float _826 = _825 + _824;
  float _827 = 1.0f / _826;
  float _828 = _827 * _821;
  float _829 = _828 * _810;
  float _830 = _829 + _804;
  float _831 = saturate(_830);
  float _832 = _828 * _812;
  float _833 = _832 + _806;
  float _834 = saturate(_833);
  float _835 = _828 * _814;
  float _836 = _835 + _808;
  float _837 = saturate(_836);
  float _838 = _837 * _686;
  float _839 = _831 * _684;
  float _840 = _834 * _685;
  float _841 = _736 - _839;
  float _842 = _841 - _840;
  float _843 = _842 - _838;
  float _844 = saturate(_843);
  float _845 = _844 * _681;
  float _846 = _845 + _831;
  float _847 = saturate(_846);
  float _848 = _844 * _682;
  float _849 = _848 + _834;
  float _850 = saturate(_849);
  float _851 = _844 * _683;
  float _852 = _851 + _837;
  float _853 = saturate(_852);
  if (!_598) {
    float _855 = _847 * _657;
    float _856 = _850 * _658;
    float _857 = _853 * _659;
    float _858 = _856 + _855;
    float _859 = _858 + _857;
    float _860 = _850 * _655;
    float _861 = _847 * _654;
    float _862 = _853 * _656;
    float _863 = _860 + _861;
    float _864 = _863 + _862;
    float _865 = _853 * _653;
    float _866 = _850 * _652;
    float _867 = _847 * _651;
    float _868 = _866 + _867;
    float _869 = _868 + _865;
    if (!_596) {
      float _871 = saturate(_859);
      float _872 = saturate(_864);
      float _873 = saturate(_869);
      _875 = _873;
      _876 = _872;
      _877 = _871;
    } else {
      _875 = _869;
      _876 = _864;
      _877 = _859;
    }
  } else {
    _875 = _853;
    _876 = _850;
    _877 = _847;
  }
  if (!_593) {
    float _879 = _877 * _657;
    float _880 = _876 * _657;
    float _881 = _875 * _657;
    _883 = _881;
    _884 = _880;
    _885 = _879;
  } else {
    _883 = _875;
    _884 = _876;
    _885 = _877;
  }
  if (_564) {
    float _889 = cb1_018z * 9.999999747378752e-05f;
    float _890 = _889 * _885;
    float _891 = _889 * _884;
    float _892 = _889 * _883;
    float _894 = 5000.0f / cb1_018y;
    float _895 = _890 * _894;
    float _896 = _891 * _894;
    float _897 = _892 * _894;
    _899 = _895;
    _900 = _896;
    _901 = _897;
  } else {
    _899 = _885;
    _900 = _884;
    _901 = _883;
  }
  float _902 = _899 * 1.6047500371932983f;
  float _903 = mad(-0.5310800075531006f, _900, _902);
  float _904 = mad(-0.07366999983787537f, _901, _903);
  float _905 = _899 * -0.10208000242710114f;
  float _906 = mad(1.1081299781799316f, _900, _905);
  float _907 = mad(-0.006049999967217445f, _901, _906);
  float _908 = _899 * -0.0032599999103695154f;
  float _909 = mad(-0.07275000214576721f, _900, _908);
  float _910 = mad(1.0760200023651123f, _901, _909);
  if (_564) {
    // float _912 = max(_904, 0.0f);
    // float _913 = max(_907, 0.0f);
    // float _914 = max(_910, 0.0f);
    // bool _915 = !(_912 >= 0.0030399328097701073f);
    // if (!_915) {
    //   float _917 = abs(_912);
    //   float _918 = log2(_917);
    //   float _919 = _918 * 0.4166666567325592f;
    //   float _920 = exp2(_919);
    //   float _921 = _920 * 1.0549999475479126f;
    //   float _922 = _921 + -0.054999999701976776f;
    //   _926 = _922;
    // } else {
    //   float _924 = _912 * 12.923210144042969f;
    //   _926 = _924;
    // }
    // bool _927 = !(_913 >= 0.0030399328097701073f);
    // if (!_927) {
    //   float _929 = abs(_913);
    //   float _930 = log2(_929);
    //   float _931 = _930 * 0.4166666567325592f;
    //   float _932 = exp2(_931);
    //   float _933 = _932 * 1.0549999475479126f;
    //   float _934 = _933 + -0.054999999701976776f;
    //   _938 = _934;
    // } else {
    //   float _936 = _913 * 12.923210144042969f;
    //   _938 = _936;
    // }
    // bool _939 = !(_914 >= 0.0030399328097701073f);
    // if (!_939) {
    //   float _941 = abs(_914);
    //   float _942 = log2(_941);
    //   float _943 = _942 * 0.4166666567325592f;
    //   float _944 = exp2(_943);
    //   float _945 = _944 * 1.0549999475479126f;
    //   float _946 = _945 + -0.054999999701976776f;
    //   _1019 = _926;
    //   _1020 = _938;
    //   _1021 = _946;
    // } else {
    //   float _948 = _914 * 12.923210144042969f;
    //   _1019 = _926;
    //   _1020 = _938;
    //   _1021 = _948;
    // }
    _1019 = renodx::color::srgb::EncodeSafe(_904);
    _1020 = renodx::color::srgb::EncodeSafe(_907);
    _1021 = renodx::color::srgb::EncodeSafe(_910);

  } else {
    float _950 = saturate(_904);
    float _951 = saturate(_907);
    float _952 = saturate(_910);
    bool _953 = ((uint)(cb1_018w) == -2);
    if (!_953) {
      bool _955 = !(_950 >= 0.0030399328097701073f);
      if (!_955) {
        float _957 = abs(_950);
        float _958 = log2(_957);
        float _959 = _958 * 0.4166666567325592f;
        float _960 = exp2(_959);
        float _961 = _960 * 1.0549999475479126f;
        float _962 = _961 + -0.054999999701976776f;
        _966 = _962;
      } else {
        float _964 = _950 * 12.923210144042969f;
        _966 = _964;
      }
      bool _967 = !(_951 >= 0.0030399328097701073f);
      if (!_967) {
        float _969 = abs(_951);
        float _970 = log2(_969);
        float _971 = _970 * 0.4166666567325592f;
        float _972 = exp2(_971);
        float _973 = _972 * 1.0549999475479126f;
        float _974 = _973 + -0.054999999701976776f;
        _978 = _974;
      } else {
        float _976 = _951 * 12.923210144042969f;
        _978 = _976;
      }
      bool _979 = !(_952 >= 0.0030399328097701073f);
      if (!_979) {
        float _981 = abs(_952);
        float _982 = log2(_981);
        float _983 = _982 * 0.4166666567325592f;
        float _984 = exp2(_983);
        float _985 = _984 * 1.0549999475479126f;
        float _986 = _985 + -0.054999999701976776f;
        _990 = _966;
        _991 = _978;
        _992 = _986;
      } else {
        float _988 = _952 * 12.923210144042969f;
        _990 = _966;
        _991 = _978;
        _992 = _988;
      }
    } else {
      _990 = _950;
      _991 = _951;
      _992 = _952;
    }
    float _997 = abs(_990);
    float _998 = abs(_991);
    float _999 = abs(_992);
    float _1000 = log2(_997);
    float _1001 = log2(_998);
    float _1002 = log2(_999);
    float _1003 = _1000 * cb2_000z;
    float _1004 = _1001 * cb2_000z;
    float _1005 = _1002 * cb2_000z;
    float _1006 = exp2(_1003);
    float _1007 = exp2(_1004);
    float _1008 = exp2(_1005);
    float _1009 = _1006 * cb2_000y;
    float _1010 = _1007 * cb2_000y;
    float _1011 = _1008 * cb2_000y;
    float _1012 = _1009 + cb2_000x;
    float _1013 = _1010 + cb2_000x;
    float _1014 = _1011 + cb2_000x;
    float _1015 = saturate(_1012);
    float _1016 = saturate(_1013);
    float _1017 = saturate(_1014);
    _1019 = _1015;
    _1020 = _1016;
    _1021 = _1017;
  }
  float _1025 = cb2_023x * TEXCOORD0_centroid.x;
  float _1026 = cb2_023y * TEXCOORD0_centroid.y;
  float _1029 = _1025 + cb2_023z;
  float _1030 = _1026 + cb2_023w;
  float4 _1033 = t11.SampleLevel(s0_space2, float2(_1029, _1030), 0.0f);
  float _1035 = _1033.x + -0.5f;
  float _1036 = _1035 * cb2_022x;
  float _1037 = _1036 + 0.5f;
  float _1038 = _1037 * 2.0f;
  float _1039 = _1038 * _1019;
  float _1040 = _1038 * _1020;
  float _1041 = _1038 * _1021;
  float _1045 = float((uint)(cb2_019z));
  float _1046 = float((uint)(cb2_019w));
  float _1047 = _1045 + SV_Position.x;
  float _1048 = _1046 + SV_Position.y;
  uint _1049 = uint(_1047);
  uint _1050 = uint(_1048);
  uint _1053 = cb2_019x + -1u;
  uint _1054 = cb2_019y + -1u;
  int _1055 = _1049 & _1053;
  int _1056 = _1050 & _1054;
  float4 _1057 = t3.Load(int3(_1055, _1056, 0));
  float _1061 = _1057.x * 2.0f;
  float _1062 = _1057.y * 2.0f;
  float _1063 = _1057.z * 2.0f;
  float _1064 = _1061 + -1.0f;
  float _1065 = _1062 + -1.0f;
  float _1066 = _1063 + -1.0f;
  float _1067 = _1064 * _547;
  float _1068 = _1065 * _547;
  float _1069 = _1066 * _547;
  float _1070 = _1067 + _1039;
  float _1071 = _1068 + _1040;
  float _1072 = _1069 + _1041;
  float _1073 = dot(float3(_1070, _1071, _1072), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1070;
  SV_Target.y = _1071;
  SV_Target.z = _1072;
  SV_Target.w = _1073;
  SV_Target_1.x = _1073;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
