#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _22 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _24 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _28 = _24.x * 6.283199787139893f;
  float _29 = cos(_28);
  float _30 = sin(_28);
  float _31 = _29 * _24.z;
  float _32 = _30 * _24.z;
  float _33 = _31 + TEXCOORD0_centroid.x;
  float _34 = _32 + TEXCOORD0_centroid.y;
  float _35 = _33 * 10.0f;
  float _36 = 10.0f - _35;
  float _37 = min(_35, _36);
  float _38 = saturate(_37);
  float _39 = _38 * _31;
  float _40 = _34 * 10.0f;
  float _41 = 10.0f - _40;
  float _42 = min(_40, _41);
  float _43 = saturate(_42);
  float _44 = _43 * _32;
  float _45 = _39 + TEXCOORD0_centroid.x;
  float _46 = _44 + TEXCOORD0_centroid.y;
  float4 _47 = t7.SampleLevel(s2_space2, float2(_45, _46), 0.0f);
  float _49 = _47.w * _39;
  float _50 = _47.w * _44;
  float _51 = 1.0f - _24.y;
  float _52 = saturate(_51);
  float _53 = _49 * _52;
  float _54 = _50 * _52;
  float _58 = cb2_015x * TEXCOORD0_centroid.x;
  float _59 = cb2_015y * TEXCOORD0_centroid.y;
  float _62 = _58 + cb2_015z;
  float _63 = _59 + cb2_015w;
  float4 _64 = t8.SampleLevel(s0_space2, float2(_62, _63), 0.0f);
  float _68 = saturate(_64.x);
  float _69 = saturate(_64.z);
  float _72 = cb2_026x * _69;
  float _73 = _68 * 6.283199787139893f;
  float _74 = cos(_73);
  float _75 = sin(_73);
  float _76 = _72 * _74;
  float _77 = _75 * _72;
  float _78 = 1.0f - _64.y;
  float _79 = saturate(_78);
  float _80 = _76 * _79;
  float _81 = _77 * _79;
  float _82 = _53 + TEXCOORD0_centroid.x;
  float _83 = _82 + _80;
  float _84 = _54 + TEXCOORD0_centroid.y;
  float _85 = _84 + _81;
  float4 _86 = t7.SampleLevel(s2_space2, float2(_83, _85), 0.0f);
  bool _88 = (_86.y > 0.0f);
  float _89 = select(_88, TEXCOORD0_centroid.x, _83);
  float _90 = select(_88, TEXCOORD0_centroid.y, _85);
  float4 _91 = t1.SampleLevel(s4_space2, float2(_89, _90), 0.0f);
  float _95 = max(_91.x, 0.0f);
  float _96 = max(_91.y, 0.0f);
  float _97 = max(_91.z, 0.0f);
  float _98 = min(_95, 65000.0f);
  float _99 = min(_96, 65000.0f);
  float _100 = min(_97, 65000.0f);
  float4 _101 = t3.SampleLevel(s2_space2, float2(_89, _90), 0.0f);
  float _106 = max(_101.x, 0.0f);
  float _107 = max(_101.y, 0.0f);
  float _108 = max(_101.z, 0.0f);
  float _109 = max(_101.w, 0.0f);
  float _110 = min(_106, 5000.0f);
  float _111 = min(_107, 5000.0f);
  float _112 = min(_108, 5000.0f);
  float _113 = min(_109, 5000.0f);
  float _116 = _22.x * cb0_028z;
  float _117 = _116 + cb0_028x;
  float _118 = cb2_027w / _117;
  float _119 = 1.0f - _118;
  float _120 = abs(_119);
  float _122 = cb2_027y * _120;
  float _124 = _122 - cb2_027z;
  float _125 = saturate(_124);
  float _126 = max(_125, _113);
  float _127 = saturate(_126);
  float _131 = cb2_006x * _89;
  float _132 = cb2_006y * _90;
  float _135 = _131 + cb2_006z;
  float _136 = _132 + cb2_006w;
  float _140 = cb2_007x * _89;
  float _141 = cb2_007y * _90;
  float _144 = _140 + cb2_007z;
  float _145 = _141 + cb2_007w;
  float _149 = cb2_008x * _89;
  float _150 = cb2_008y * _90;
  float _153 = _149 + cb2_008z;
  float _154 = _150 + cb2_008w;
  float4 _155 = t1.SampleLevel(s2_space2, float2(_135, _136), 0.0f);
  float _157 = max(_155.x, 0.0f);
  float _158 = min(_157, 65000.0f);
  float4 _159 = t1.SampleLevel(s2_space2, float2(_144, _145), 0.0f);
  float _161 = max(_159.y, 0.0f);
  float _162 = min(_161, 65000.0f);
  float4 _163 = t1.SampleLevel(s2_space2, float2(_153, _154), 0.0f);
  float _165 = max(_163.z, 0.0f);
  float _166 = min(_165, 65000.0f);
  float4 _167 = t3.SampleLevel(s2_space2, float2(_135, _136), 0.0f);
  float _169 = max(_167.x, 0.0f);
  float _170 = min(_169, 5000.0f);
  float4 _171 = t3.SampleLevel(s2_space2, float2(_144, _145), 0.0f);
  float _173 = max(_171.y, 0.0f);
  float _174 = min(_173, 5000.0f);
  float4 _175 = t3.SampleLevel(s2_space2, float2(_153, _154), 0.0f);
  float _177 = max(_175.z, 0.0f);
  float _178 = min(_177, 5000.0f);
  float4 _179 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _185 = cb2_005x * _179.x;
  float _186 = cb2_005x * _179.y;
  float _187 = cb2_005x * _179.z;
  float _188 = _158 - _98;
  float _189 = _162 - _99;
  float _190 = _166 - _100;
  float _191 = _185 * _188;
  float _192 = _186 * _189;
  float _193 = _187 * _190;
  float _194 = _191 + _98;
  float _195 = _192 + _99;
  float _196 = _193 + _100;
  float _197 = _170 - _110;
  float _198 = _174 - _111;
  float _199 = _178 - _112;
  float _200 = _185 * _197;
  float _201 = _186 * _198;
  float _202 = _187 * _199;
  float _203 = _200 + _110;
  float _204 = _201 + _111;
  float _205 = _202 + _112;
  float4 _206 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _210 = _203 - _194;
  float _211 = _204 - _195;
  float _212 = _205 - _196;
  float _213 = _210 * _127;
  float _214 = _211 * _127;
  float _215 = _212 * _127;
  float _216 = _213 + _194;
  float _217 = _214 + _195;
  float _218 = _215 + _196;
  float _219 = dot(float3(_216, _217, _218), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _223 = t0[0].SExposureData_020;
  float _225 = t0[0].SExposureData_004;
  float _227 = cb2_018x * 0.5f;
  float _228 = _227 * cb2_018y;
  float _229 = _225.x - _228;
  float _230 = cb2_018y * cb2_018x;
  float _231 = 1.0f / _230;
  float _232 = _229 * _231;
  float _233 = _219 / _223.x;
  float _234 = _233 * 5464.01611328125f;
  float _235 = _234 + 9.99999993922529e-09f;
  float _236 = log2(_235);
  float _237 = _236 - _229;
  float _238 = _237 * _231;
  float _239 = saturate(_238);
  float2 _240 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _239), 0.0f);
  float _243 = max(_240.y, 1.0000000116860974e-07f);
  float _244 = _240.x / _243;
  float _245 = _244 + _232;
  float _246 = _245 / _231;
  float _247 = _246 - _225.x;
  float _248 = -0.0f - _247;
  float _250 = _248 - cb2_027x;
  float _251 = max(0.0f, _250);
  float _253 = cb2_026z * _251;
  float _254 = _247 - cb2_027x;
  float _255 = max(0.0f, _254);
  float _257 = cb2_026w * _255;
  bool _258 = (_247 < 0.0f);
  float _259 = select(_258, _253, _257);
  float _260 = exp2(_259);
  float _261 = _260 * _216;
  float _262 = _260 * _217;
  float _263 = _260 * _218;
  float _268 = cb2_024y * _206.x;
  float _269 = cb2_024z * _206.y;
  float _270 = cb2_024w * _206.z;
  float _271 = _268 + _261;
  float _272 = _269 + _262;
  float _273 = _270 + _263;
  float _278 = _271 * cb2_025x;
  float _279 = _272 * cb2_025y;
  float _280 = _273 * cb2_025z;
  float _281 = dot(float3(_278, _279, _280), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _282 = t0[0].SExposureData_012;
  float _284 = _281 * 5464.01611328125f;
  float _285 = _284 * _282.x;
  float _286 = _285 + 9.99999993922529e-09f;
  float _287 = log2(_286);
  float _288 = _287 + 16.929765701293945f;
  float _289 = _288 * 0.05734497308731079f;
  float _290 = saturate(_289);
  float _291 = _290 * _290;
  float _292 = _290 * 2.0f;
  float _293 = 3.0f - _292;
  float _294 = _291 * _293;
  float _295 = _279 * 0.8450999855995178f;
  float _296 = _280 * 0.14589999616146088f;
  float _297 = _295 + _296;
  float _298 = _297 * 2.4890189170837402f;
  float _299 = _297 * 0.3754962384700775f;
  float _300 = _297 * 2.811495304107666f;
  float _301 = _297 * 5.519708156585693f;
  float _302 = _281 - _298;
  float _303 = _294 * _302;
  float _304 = _303 + _298;
  float _305 = _294 * 0.5f;
  float _306 = _305 + 0.5f;
  float _307 = _306 * _302;
  float _308 = _307 + _298;
  float _309 = _278 - _299;
  float _310 = _279 - _300;
  float _311 = _280 - _301;
  float _312 = _306 * _309;
  float _313 = _306 * _310;
  float _314 = _306 * _311;
  float _315 = _312 + _299;
  float _316 = _313 + _300;
  float _317 = _314 + _301;
  float _318 = 1.0f / _308;
  float _319 = _304 * _318;
  float _320 = _319 * _315;
  float _321 = _319 * _316;
  float _322 = _319 * _317;
  float _326 = cb2_020x * TEXCOORD0_centroid.x;
  float _327 = cb2_020y * TEXCOORD0_centroid.y;
  float _330 = _326 + cb2_020z;
  float _331 = _327 + cb2_020w;
  float _334 = dot(float2(_330, _331), float2(_330, _331));
  float _335 = 1.0f - _334;
  float _336 = saturate(_335);
  float _337 = log2(_336);
  float _338 = _337 * cb2_021w;
  float _339 = exp2(_338);
  float _343 = _320 - cb2_021x;
  float _344 = _321 - cb2_021y;
  float _345 = _322 - cb2_021z;
  float _346 = _343 * _339;
  float _347 = _344 * _339;
  float _348 = _345 * _339;
  float _349 = _346 + cb2_021x;
  float _350 = _347 + cb2_021y;
  float _351 = _348 + cb2_021z;
  float _352 = t0[0].SExposureData_000;
  float _354 = max(_223.x, 0.0010000000474974513f);
  float _355 = 1.0f / _354;
  float _356 = _355 * _352.x;
  bool _359 = ((uint)(cb2_069y) == 0);
  float _365;
  float _366;
  float _367;
  float _421;
  float _422;
  float _423;
  float _453;
  float _454;
  float _455;
  float _605;
  float _642;
  float _643;
  float _644;
  float _673;
  float _674;
  float _675;
  float _756;
  float _757;
  float _758;
  float _764;
  float _765;
  float _766;
  float _780;
  float _781;
  float _782;
  float _807;
  float _819;
  float _847;
  float _859;
  float _871;
  float _872;
  float _873;
  float _900;
  float _901;
  float _902;
  if (!_359) {
    float _361 = _356 * _349;
    float _362 = _356 * _350;
    float _363 = _356 * _351;
    _365 = _361;
    _366 = _362;
    _367 = _363;
  } else {
    _365 = _349;
    _366 = _350;
    _367 = _351;
  }
  float _368 = _365 * 0.6130970120429993f;
  float _369 = mad(0.33952298760414124f, _366, _368);
  float _370 = mad(0.04737899824976921f, _367, _369);
  float _371 = _365 * 0.07019399851560593f;
  float _372 = mad(0.9163540005683899f, _366, _371);
  float _373 = mad(0.013451999984681606f, _367, _372);
  float _374 = _365 * 0.02061600051820278f;
  float _375 = mad(0.10956999659538269f, _366, _374);
  float _376 = mad(0.8698149919509888f, _367, _375);
  float _377 = log2(_370);
  float _378 = log2(_373);
  float _379 = log2(_376);
  float _380 = _377 * 0.04211956635117531f;
  float _381 = _378 * 0.04211956635117531f;
  float _382 = _379 * 0.04211956635117531f;
  float _383 = _380 + 0.6252607107162476f;
  float _384 = _381 + 0.6252607107162476f;
  float _385 = _382 + 0.6252607107162476f;
  float4 _386 = t5.SampleLevel(s2_space2, float3(_383, _384, _385), 0.0f);
  bool _392 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_392 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _396 = cb2_017x * _386.x;
    float _397 = cb2_017x * _386.y;
    float _398 = cb2_017x * _386.z;
    float _400 = _396 + cb2_017y;
    float _401 = _397 + cb2_017y;
    float _402 = _398 + cb2_017y;
    float _403 = exp2(_400);
    float _404 = exp2(_401);
    float _405 = exp2(_402);
    float _406 = _403 + 1.0f;
    float _407 = _404 + 1.0f;
    float _408 = _405 + 1.0f;
    float _409 = 1.0f / _406;
    float _410 = 1.0f / _407;
    float _411 = 1.0f / _408;
    float _413 = cb2_017z * _409;
    float _414 = cb2_017z * _410;
    float _415 = cb2_017z * _411;
    float _417 = _413 + cb2_017w;
    float _418 = _414 + cb2_017w;
    float _419 = _415 + cb2_017w;
    _421 = _417;
    _422 = _418;
    _423 = _419;
  } else {
    _421 = _386.x;
    _422 = _386.y;
    _423 = _386.z;
  }
  float _424 = _421 * 23.0f;
  float _425 = _424 + -14.473931312561035f;
  float _426 = exp2(_425);
  float _427 = _422 * 23.0f;
  float _428 = _427 + -14.473931312561035f;
  float _429 = exp2(_428);
  float _430 = _423 * 23.0f;
  float _431 = _430 + -14.473931312561035f;
  float _432 = exp2(_431);
  float _438 = cb2_016x - _426;
  float _439 = cb2_016y - _429;
  float _440 = cb2_016z - _432;
  float _441 = _438 * cb2_016w;
  float _442 = _439 * cb2_016w;
  float _443 = _440 * cb2_016w;
  float _444 = _441 + _426;
  float _445 = _442 + _429;
  float _446 = _443 + _432;
  if (_392 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _449 = cb2_024x * _444;
    float _450 = cb2_024x * _445;
    float _451 = cb2_024x * _446;
    _453 = _449;
    _454 = _450;
    _455 = _451;
  } else {
    _453 = _444;
    _454 = _445;
    _455 = _446;
  }
  float _458 = _453 * 0.9708889722824097f;
  float _459 = mad(0.026962999254465103f, _454, _458);
  float _460 = mad(0.002148000057786703f, _455, _459);
  float _461 = _453 * 0.01088900025933981f;
  float _462 = mad(0.9869629740715027f, _454, _461);
  float _463 = mad(0.002148000057786703f, _455, _462);
  float _464 = mad(0.026962999254465103f, _454, _461);
  float _465 = mad(0.9621480107307434f, _455, _464);
  float _466 = max(_460, 0.0f);
  float _467 = max(_463, 0.0f);
  float _468 = max(_465, 0.0f);
  float _469 = min(_466, cb2_095y);
  float _470 = min(_467, cb2_095y);
  float _471 = min(_468, cb2_095y);
  bool _474 = ((uint)(cb2_095x) == 0);
  bool _477 = ((uint)(cb2_094w) == 0);
  bool _479 = ((uint)(cb2_094z) == 0);
  bool _481 = ((uint)(cb2_094y) != 0);
  bool _483 = ((uint)(cb2_094x) == 0);
  bool _485 = ((uint)(cb2_069z) != 0);
  float _532 = asfloat((uint)(cb2_075y));
  float _533 = asfloat((uint)(cb2_075z));
  float _534 = asfloat((uint)(cb2_075w));
  float _535 = asfloat((uint)(cb2_074z));
  float _536 = asfloat((uint)(cb2_074w));
  float _537 = asfloat((uint)(cb2_075x));
  float _538 = asfloat((uint)(cb2_073w));
  float _539 = asfloat((uint)(cb2_074x));
  float _540 = asfloat((uint)(cb2_074y));
  float _541 = asfloat((uint)(cb2_077x));
  float _542 = asfloat((uint)(cb2_077y));
  float _543 = asfloat((uint)(cb2_079x));
  float _544 = asfloat((uint)(cb2_079y));
  float _545 = asfloat((uint)(cb2_079z));
  float _546 = asfloat((uint)(cb2_078y));
  float _547 = asfloat((uint)(cb2_078z));
  float _548 = asfloat((uint)(cb2_078w));
  float _549 = asfloat((uint)(cb2_077z));
  float _550 = asfloat((uint)(cb2_077w));
  float _551 = asfloat((uint)(cb2_078x));
  float _552 = asfloat((uint)(cb2_072y));
  float _553 = asfloat((uint)(cb2_072z));
  float _554 = asfloat((uint)(cb2_072w));
  float _555 = asfloat((uint)(cb2_071x));
  float _556 = asfloat((uint)(cb2_071y));
  float _557 = asfloat((uint)(cb2_076x));
  float _558 = asfloat((uint)(cb2_070w));
  float _559 = asfloat((uint)(cb2_070x));
  float _560 = asfloat((uint)(cb2_070y));
  float _561 = asfloat((uint)(cb2_070z));
  float _562 = asfloat((uint)(cb2_073x));
  float _563 = asfloat((uint)(cb2_073y));
  float _564 = asfloat((uint)(cb2_073z));
  float _565 = asfloat((uint)(cb2_071z));
  float _566 = asfloat((uint)(cb2_071w));
  float _567 = asfloat((uint)(cb2_072x));
  float _568 = max(_470, _471);
  float _569 = max(_469, _568);
  float _570 = 1.0f / _569;
  float _571 = _570 * _469;
  float _572 = _570 * _470;
  float _573 = _570 * _471;
  float _574 = abs(_571);
  float _575 = log2(_574);
  float _576 = _575 * _559;
  float _577 = exp2(_576);
  float _578 = abs(_572);
  float _579 = log2(_578);
  float _580 = _579 * _560;
  float _581 = exp2(_580);
  float _582 = abs(_573);
  float _583 = log2(_582);
  float _584 = _583 * _561;
  float _585 = exp2(_584);
  if (_481) {
    float _588 = asfloat((uint)(cb2_076w));
    float _590 = asfloat((uint)(cb2_076z));
    float _592 = asfloat((uint)(cb2_076y));
    float _593 = _590 * _470;
    float _594 = _592 * _469;
    float _595 = _588 * _471;
    float _596 = _594 + _595;
    float _597 = _596 + _593;
    _605 = _597;
  } else {
    float _599 = _566 * _470;
    float _600 = _565 * _469;
    float _601 = _567 * _471;
    float _602 = _599 + _600;
    float _603 = _602 + _601;
    _605 = _603;
  }
  float _606 = abs(_605);
  float _607 = log2(_606);
  float _608 = _607 * _558;
  float _609 = exp2(_608);
  float _610 = log2(_609);
  float _611 = _610 * _557;
  float _612 = exp2(_611);
  float _613 = select(_485, _612, _609);
  float _614 = _613 * _555;
  float _615 = _614 + _556;
  float _616 = 1.0f / _615;
  float _617 = _616 * _609;
  if (_481) {
    if (!_483) {
      float _620 = _577 * _549;
      float _621 = _581 * _550;
      float _622 = _585 * _551;
      float _623 = _621 + _620;
      float _624 = _623 + _622;
      float _625 = _581 * _547;
      float _626 = _577 * _546;
      float _627 = _585 * _548;
      float _628 = _625 + _626;
      float _629 = _628 + _627;
      float _630 = _585 * _545;
      float _631 = _581 * _544;
      float _632 = _577 * _543;
      float _633 = _631 + _632;
      float _634 = _633 + _630;
      float _635 = max(_629, _634);
      float _636 = max(_624, _635);
      float _637 = 1.0f / _636;
      float _638 = _637 * _624;
      float _639 = _637 * _629;
      float _640 = _637 * _634;
      _642 = _638;
      _643 = _639;
      _644 = _640;
    } else {
      _642 = _577;
      _643 = _581;
      _644 = _585;
    }
    float _645 = _642 * _542;
    float _646 = exp2(_645);
    float _647 = _646 * _541;
    float _648 = saturate(_647);
    float _649 = _642 * _541;
    float _650 = _642 - _649;
    float _651 = saturate(_650);
    float _652 = max(_541, _651);
    float _653 = min(_652, _648);
    float _654 = _643 * _542;
    float _655 = exp2(_654);
    float _656 = _655 * _541;
    float _657 = saturate(_656);
    float _658 = _643 * _541;
    float _659 = _643 - _658;
    float _660 = saturate(_659);
    float _661 = max(_541, _660);
    float _662 = min(_661, _657);
    float _663 = _644 * _542;
    float _664 = exp2(_663);
    float _665 = _664 * _541;
    float _666 = saturate(_665);
    float _667 = _644 * _541;
    float _668 = _644 - _667;
    float _669 = saturate(_668);
    float _670 = max(_541, _669);
    float _671 = min(_670, _666);
    _673 = _653;
    _674 = _662;
    _675 = _671;
  } else {
    _673 = _577;
    _674 = _581;
    _675 = _585;
  }
  float _676 = _673 * _565;
  float _677 = _674 * _566;
  float _678 = _677 + _676;
  float _679 = _675 * _567;
  float _680 = _678 + _679;
  float _681 = 1.0f / _680;
  float _682 = _681 * _617;
  float _683 = saturate(_682);
  float _684 = _683 * _673;
  float _685 = saturate(_684);
  float _686 = _683 * _674;
  float _687 = saturate(_686);
  float _688 = _683 * _675;
  float _689 = saturate(_688);
  float _690 = _685 * _552;
  float _691 = _552 - _690;
  float _692 = _687 * _553;
  float _693 = _553 - _692;
  float _694 = _689 * _554;
  float _695 = _554 - _694;
  float _696 = _689 * _567;
  float _697 = _685 * _565;
  float _698 = _687 * _566;
  float _699 = _617 - _697;
  float _700 = _699 - _698;
  float _701 = _700 - _696;
  float _702 = saturate(_701);
  float _703 = _693 * _566;
  float _704 = _691 * _565;
  float _705 = _695 * _567;
  float _706 = _703 + _704;
  float _707 = _706 + _705;
  float _708 = 1.0f / _707;
  float _709 = _708 * _702;
  float _710 = _709 * _691;
  float _711 = _710 + _685;
  float _712 = saturate(_711);
  float _713 = _709 * _693;
  float _714 = _713 + _687;
  float _715 = saturate(_714);
  float _716 = _709 * _695;
  float _717 = _716 + _689;
  float _718 = saturate(_717);
  float _719 = _718 * _567;
  float _720 = _712 * _565;
  float _721 = _715 * _566;
  float _722 = _617 - _720;
  float _723 = _722 - _721;
  float _724 = _723 - _719;
  float _725 = saturate(_724);
  float _726 = _725 * _562;
  float _727 = _726 + _712;
  float _728 = saturate(_727);
  float _729 = _725 * _563;
  float _730 = _729 + _715;
  float _731 = saturate(_730);
  float _732 = _725 * _564;
  float _733 = _732 + _718;
  float _734 = saturate(_733);
  if (!_479) {
    float _736 = _728 * _538;
    float _737 = _731 * _539;
    float _738 = _734 * _540;
    float _739 = _737 + _736;
    float _740 = _739 + _738;
    float _741 = _731 * _536;
    float _742 = _728 * _535;
    float _743 = _734 * _537;
    float _744 = _741 + _742;
    float _745 = _744 + _743;
    float _746 = _734 * _534;
    float _747 = _731 * _533;
    float _748 = _728 * _532;
    float _749 = _747 + _748;
    float _750 = _749 + _746;
    if (!_477) {
      float _752 = saturate(_740);
      float _753 = saturate(_745);
      float _754 = saturate(_750);
      _756 = _754;
      _757 = _753;
      _758 = _752;
    } else {
      _756 = _750;
      _757 = _745;
      _758 = _740;
    }
  } else {
    _756 = _734;
    _757 = _731;
    _758 = _728;
  }
  if (!_474) {
    float _760 = _758 * _538;
    float _761 = _757 * _538;
    float _762 = _756 * _538;
    _764 = _762;
    _765 = _761;
    _766 = _760;
  } else {
    _764 = _756;
    _765 = _757;
    _766 = _758;
  }
  if (_392) {
    float _770 = cb1_018z * 9.999999747378752e-05f;
    float _771 = _770 * _766;
    float _772 = _770 * _765;
    float _773 = _770 * _764;
    float _775 = 5000.0f / cb1_018y;
    float _776 = _771 * _775;
    float _777 = _772 * _775;
    float _778 = _773 * _775;
    _780 = _776;
    _781 = _777;
    _782 = _778;
  } else {
    _780 = _766;
    _781 = _765;
    _782 = _764;
  }
  float _783 = _780 * 1.6047500371932983f;
  float _784 = mad(-0.5310800075531006f, _781, _783);
  float _785 = mad(-0.07366999983787537f, _782, _784);
  float _786 = _780 * -0.10208000242710114f;
  float _787 = mad(1.1081299781799316f, _781, _786);
  float _788 = mad(-0.006049999967217445f, _782, _787);
  float _789 = _780 * -0.0032599999103695154f;
  float _790 = mad(-0.07275000214576721f, _781, _789);
  float _791 = mad(1.0760200023651123f, _782, _790);
  if (_392) {
    // float _793 = max(_785, 0.0f);
    // float _794 = max(_788, 0.0f);
    // float _795 = max(_791, 0.0f);
    // bool _796 = !(_793 >= 0.0030399328097701073f);
    // if (!_796) {
    //   float _798 = abs(_793);
    //   float _799 = log2(_798);
    //   float _800 = _799 * 0.4166666567325592f;
    //   float _801 = exp2(_800);
    //   float _802 = _801 * 1.0549999475479126f;
    //   float _803 = _802 + -0.054999999701976776f;
    //   _807 = _803;
    // } else {
    //   float _805 = _793 * 12.923210144042969f;
    //   _807 = _805;
    // }
    // bool _808 = !(_794 >= 0.0030399328097701073f);
    // if (!_808) {
    //   float _810 = abs(_794);
    //   float _811 = log2(_810);
    //   float _812 = _811 * 0.4166666567325592f;
    //   float _813 = exp2(_812);
    //   float _814 = _813 * 1.0549999475479126f;
    //   float _815 = _814 + -0.054999999701976776f;
    //   _819 = _815;
    // } else {
    //   float _817 = _794 * 12.923210144042969f;
    //   _819 = _817;
    // }
    // bool _820 = !(_795 >= 0.0030399328097701073f);
    // if (!_820) {
    //   float _822 = abs(_795);
    //   float _823 = log2(_822);
    //   float _824 = _823 * 0.4166666567325592f;
    //   float _825 = exp2(_824);
    //   float _826 = _825 * 1.0549999475479126f;
    //   float _827 = _826 + -0.054999999701976776f;
    //   _900 = _807;
    //   _901 = _819;
    //   _902 = _827;
    // } else {
    //   float _829 = _795 * 12.923210144042969f;
    //   _900 = _807;
    //   _901 = _819;
    //   _902 = _829;
    // }
    _900 = renodx::color::srgb::EncodeSafe(_785);
    _901 = renodx::color::srgb::EncodeSafe(_788);
    _902 = renodx::color::srgb::EncodeSafe(_791);

  } else {
    float _831 = saturate(_785);
    float _832 = saturate(_788);
    float _833 = saturate(_791);
    bool _834 = ((uint)(cb1_018w) == -2);
    if (!_834) {
      bool _836 = !(_831 >= 0.0030399328097701073f);
      if (!_836) {
        float _838 = abs(_831);
        float _839 = log2(_838);
        float _840 = _839 * 0.4166666567325592f;
        float _841 = exp2(_840);
        float _842 = _841 * 1.0549999475479126f;
        float _843 = _842 + -0.054999999701976776f;
        _847 = _843;
      } else {
        float _845 = _831 * 12.923210144042969f;
        _847 = _845;
      }
      bool _848 = !(_832 >= 0.0030399328097701073f);
      if (!_848) {
        float _850 = abs(_832);
        float _851 = log2(_850);
        float _852 = _851 * 0.4166666567325592f;
        float _853 = exp2(_852);
        float _854 = _853 * 1.0549999475479126f;
        float _855 = _854 + -0.054999999701976776f;
        _859 = _855;
      } else {
        float _857 = _832 * 12.923210144042969f;
        _859 = _857;
      }
      bool _860 = !(_833 >= 0.0030399328097701073f);
      if (!_860) {
        float _862 = abs(_833);
        float _863 = log2(_862);
        float _864 = _863 * 0.4166666567325592f;
        float _865 = exp2(_864);
        float _866 = _865 * 1.0549999475479126f;
        float _867 = _866 + -0.054999999701976776f;
        _871 = _847;
        _872 = _859;
        _873 = _867;
      } else {
        float _869 = _833 * 12.923210144042969f;
        _871 = _847;
        _872 = _859;
        _873 = _869;
      }
    } else {
      _871 = _831;
      _872 = _832;
      _873 = _833;
    }
    float _878 = abs(_871);
    float _879 = abs(_872);
    float _880 = abs(_873);
    float _881 = log2(_878);
    float _882 = log2(_879);
    float _883 = log2(_880);
    float _884 = _881 * cb2_000z;
    float _885 = _882 * cb2_000z;
    float _886 = _883 * cb2_000z;
    float _887 = exp2(_884);
    float _888 = exp2(_885);
    float _889 = exp2(_886);
    float _890 = _887 * cb2_000y;
    float _891 = _888 * cb2_000y;
    float _892 = _889 * cb2_000y;
    float _893 = _890 + cb2_000x;
    float _894 = _891 + cb2_000x;
    float _895 = _892 + cb2_000x;
    float _896 = saturate(_893);
    float _897 = saturate(_894);
    float _898 = saturate(_895);
    _900 = _896;
    _901 = _897;
    _902 = _898;
  }
  float _903 = dot(float3(_900, _901, _902), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _900;
  SV_Target.y = _901;
  SV_Target.z = _902;
  SV_Target.w = _903;
  SV_Target_1.x = _903;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
