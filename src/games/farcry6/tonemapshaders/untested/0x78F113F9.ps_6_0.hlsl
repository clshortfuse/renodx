#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t7.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _61 = cb2_015x * TEXCOORD0_centroid.x;
  float _62 = cb2_015y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_015z;
  float _66 = _62 + cb2_015w;
  float4 _67 = t8.SampleLevel(s0_space2, float2(_65, _66), 0.0f);
  float _71 = saturate(_67.x);
  float _72 = saturate(_67.z);
  float _75 = cb2_026x * _72;
  float _76 = _71 * 6.283199787139893f;
  float _77 = cos(_76);
  float _78 = sin(_76);
  float _79 = _75 * _77;
  float _80 = _78 * _75;
  float _81 = 1.0f - _67.y;
  float _82 = saturate(_81);
  float _83 = _79 * _82;
  float _84 = _80 * _82;
  float _85 = _56 + TEXCOORD0_centroid.x;
  float _86 = _85 + _83;
  float _87 = _57 + TEXCOORD0_centroid.y;
  float _88 = _87 + _84;
  float4 _89 = t7.SampleLevel(s2_space2, float2(_86, _88), 0.0f);
  bool _91 = (_89.y > 0.0f);
  float _92 = select(_91, TEXCOORD0_centroid.x, _86);
  float _93 = select(_91, TEXCOORD0_centroid.y, _88);
  float4 _94 = t1.SampleLevel(s4_space2, float2(_92, _93), 0.0f);
  float _98 = max(_94.x, 0.0f);
  float _99 = max(_94.y, 0.0f);
  float _100 = max(_94.z, 0.0f);
  float _101 = min(_98, 65000.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float4 _104 = t4.SampleLevel(s2_space2, float2(_92, _93), 0.0f);
  float _109 = max(_104.x, 0.0f);
  float _110 = max(_104.y, 0.0f);
  float _111 = max(_104.z, 0.0f);
  float _112 = max(_104.w, 0.0f);
  float _113 = min(_109, 5000.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _119 = _25.x * cb0_028z;
  float _120 = _119 + cb0_028x;
  float _121 = cb2_027w / _120;
  float _122 = 1.0f - _121;
  float _123 = abs(_122);
  float _125 = cb2_027y * _123;
  float _127 = _125 - cb2_027z;
  float _128 = saturate(_127);
  float _129 = max(_128, _116);
  float _130 = saturate(_129);
  float4 _131 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _135 = _113 - _101;
  float _136 = _114 - _102;
  float _137 = _115 - _103;
  float _138 = _130 * _135;
  float _139 = _130 * _136;
  float _140 = _130 * _137;
  float _141 = _138 + _101;
  float _142 = _139 + _102;
  float _143 = _140 + _103;
  float _144 = dot(float3(_141, _142, _143), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _148 = t0[0].SExposureData_020;
  float _150 = t0[0].SExposureData_004;
  float _152 = cb2_018x * 0.5f;
  float _153 = _152 * cb2_018y;
  float _154 = _150.x - _153;
  float _155 = cb2_018y * cb2_018x;
  float _156 = 1.0f / _155;
  float _157 = _154 * _156;
  float _158 = _144 / _148.x;
  float _159 = _158 * 5464.01611328125f;
  float _160 = _159 + 9.99999993922529e-09f;
  float _161 = log2(_160);
  float _162 = _161 - _154;
  float _163 = _162 * _156;
  float _164 = saturate(_163);
  float2 _165 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _164), 0.0f);
  float _168 = max(_165.y, 1.0000000116860974e-07f);
  float _169 = _165.x / _168;
  float _170 = _169 + _157;
  float _171 = _170 / _156;
  float _172 = _171 - _150.x;
  float _173 = -0.0f - _172;
  float _175 = _173 - cb2_027x;
  float _176 = max(0.0f, _175);
  float _178 = cb2_026z * _176;
  float _179 = _172 - cb2_027x;
  float _180 = max(0.0f, _179);
  float _182 = cb2_026w * _180;
  bool _183 = (_172 < 0.0f);
  float _184 = select(_183, _178, _182);
  float _185 = exp2(_184);
  float _186 = _185 * _141;
  float _187 = _185 * _142;
  float _188 = _185 * _143;
  float _193 = cb2_024y * _131.x;
  float _194 = cb2_024z * _131.y;
  float _195 = cb2_024w * _131.z;
  float _196 = _193 + _186;
  float _197 = _194 + _187;
  float _198 = _195 + _188;
  float _203 = _196 * cb2_025x;
  float _204 = _197 * cb2_025y;
  float _205 = _198 * cb2_025z;
  float _206 = dot(float3(_203, _204, _205), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _207 = t0[0].SExposureData_012;
  float _209 = _206 * 5464.01611328125f;
  float _210 = _209 * _207.x;
  float _211 = _210 + 9.99999993922529e-09f;
  float _212 = log2(_211);
  float _213 = _212 + 16.929765701293945f;
  float _214 = _213 * 0.05734497308731079f;
  float _215 = saturate(_214);
  float _216 = _215 * _215;
  float _217 = _215 * 2.0f;
  float _218 = 3.0f - _217;
  float _219 = _216 * _218;
  float _220 = _204 * 0.8450999855995178f;
  float _221 = _205 * 0.14589999616146088f;
  float _222 = _220 + _221;
  float _223 = _222 * 2.4890189170837402f;
  float _224 = _222 * 0.3754962384700775f;
  float _225 = _222 * 2.811495304107666f;
  float _226 = _222 * 5.519708156585693f;
  float _227 = _206 - _223;
  float _228 = _219 * _227;
  float _229 = _228 + _223;
  float _230 = _219 * 0.5f;
  float _231 = _230 + 0.5f;
  float _232 = _231 * _227;
  float _233 = _232 + _223;
  float _234 = _203 - _224;
  float _235 = _204 - _225;
  float _236 = _205 - _226;
  float _237 = _231 * _234;
  float _238 = _231 * _235;
  float _239 = _231 * _236;
  float _240 = _237 + _224;
  float _241 = _238 + _225;
  float _242 = _239 + _226;
  float _243 = 1.0f / _233;
  float _244 = _229 * _243;
  float _245 = _244 * _240;
  float _246 = _244 * _241;
  float _247 = _244 * _242;
  float _251 = cb2_020x * TEXCOORD0_centroid.x;
  float _252 = cb2_020y * TEXCOORD0_centroid.y;
  float _255 = _251 + cb2_020z;
  float _256 = _252 + cb2_020w;
  float _259 = dot(float2(_255, _256), float2(_255, _256));
  float _260 = 1.0f - _259;
  float _261 = saturate(_260);
  float _262 = log2(_261);
  float _263 = _262 * cb2_021w;
  float _264 = exp2(_263);
  float _268 = _245 - cb2_021x;
  float _269 = _246 - cb2_021y;
  float _270 = _247 - cb2_021z;
  float _271 = _268 * _264;
  float _272 = _269 * _264;
  float _273 = _270 * _264;
  float _274 = _271 + cb2_021x;
  float _275 = _272 + cb2_021y;
  float _276 = _273 + cb2_021z;
  float _277 = t0[0].SExposureData_000;
  float _279 = max(_148.x, 0.0010000000474974513f);
  float _280 = 1.0f / _279;
  float _281 = _280 * _277.x;
  bool _284 = ((uint)(cb2_069y) == 0);
  float _290;
  float _291;
  float _292;
  float _346;
  float _347;
  float _348;
  float _379;
  float _380;
  float _381;
  float _482;
  float _483;
  float _484;
  float _509;
  float _521;
  float _549;
  float _561;
  float _573;
  float _574;
  float _575;
  float _602;
  float _603;
  float _604;
  if (!_284) {
    float _286 = _281 * _274;
    float _287 = _281 * _275;
    float _288 = _281 * _276;
    _290 = _286;
    _291 = _287;
    _292 = _288;
  } else {
    _290 = _274;
    _291 = _275;
    _292 = _276;
  }
  float _293 = _290 * 0.6130970120429993f;
  float _294 = mad(0.33952298760414124f, _291, _293);
  float _295 = mad(0.04737899824976921f, _292, _294);
  float _296 = _290 * 0.07019399851560593f;
  float _297 = mad(0.9163540005683899f, _291, _296);
  float _298 = mad(0.013451999984681606f, _292, _297);
  float _299 = _290 * 0.02061600051820278f;
  float _300 = mad(0.10956999659538269f, _291, _299);
  float _301 = mad(0.8698149919509888f, _292, _300);
  float _302 = log2(_295);
  float _303 = log2(_298);
  float _304 = log2(_301);
  float _305 = _302 * 0.04211956635117531f;
  float _306 = _303 * 0.04211956635117531f;
  float _307 = _304 * 0.04211956635117531f;
  float _308 = _305 + 0.6252607107162476f;
  float _309 = _306 + 0.6252607107162476f;
  float _310 = _307 + 0.6252607107162476f;
  float4 _311 = t6.SampleLevel(s2_space2, float3(_308, _309, _310), 0.0f);
  bool _317 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_317 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _321 = cb2_017x * _311.x;
    float _322 = cb2_017x * _311.y;
    float _323 = cb2_017x * _311.z;
    float _325 = _321 + cb2_017y;
    float _326 = _322 + cb2_017y;
    float _327 = _323 + cb2_017y;
    float _328 = exp2(_325);
    float _329 = exp2(_326);
    float _330 = exp2(_327);
    float _331 = _328 + 1.0f;
    float _332 = _329 + 1.0f;
    float _333 = _330 + 1.0f;
    float _334 = 1.0f / _331;
    float _335 = 1.0f / _332;
    float _336 = 1.0f / _333;
    float _338 = cb2_017z * _334;
    float _339 = cb2_017z * _335;
    float _340 = cb2_017z * _336;
    float _342 = _338 + cb2_017w;
    float _343 = _339 + cb2_017w;
    float _344 = _340 + cb2_017w;
    _346 = _342;
    _347 = _343;
    _348 = _344;
  } else {
    _346 = _311.x;
    _347 = _311.y;
    _348 = _311.z;
  }
  float _349 = _346 * 23.0f;
  float _350 = _349 + -14.473931312561035f;
  float _351 = exp2(_350);
  float _352 = _347 * 23.0f;
  float _353 = _352 + -14.473931312561035f;
  float _354 = exp2(_353);
  float _355 = _348 * 23.0f;
  float _356 = _355 + -14.473931312561035f;
  float _357 = exp2(_356);
  float _364 = cb2_016x - _351;
  float _365 = cb2_016y - _354;
  float _366 = cb2_016z - _357;
  float _367 = _364 * cb2_016w;
  float _368 = _365 * cb2_016w;
  float _369 = _366 * cb2_016w;
  float _370 = _367 + _351;
  float _371 = _368 + _354;
  float _372 = _369 + _357;
  if (_317 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _375 = cb2_024x * _370;
    float _376 = cb2_024x * _371;
    float _377 = cb2_024x * _372;
    _379 = _375;
    _380 = _376;
    _381 = _377;
  } else {
    _379 = _370;
    _380 = _371;
    _381 = _372;
  }
  float _382 = _379 * 0.9708889722824097f;
  float _383 = mad(0.026962999254465103f, _380, _382);
  float _384 = mad(0.002148000057786703f, _381, _383);
  float _385 = _379 * 0.01088900025933981f;
  float _386 = mad(0.9869629740715027f, _380, _385);
  float _387 = mad(0.002148000057786703f, _381, _386);
  float _388 = mad(0.026962999254465103f, _380, _385);
  float _389 = mad(0.9621480107307434f, _381, _388);
  if (_317) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _394 = cb1_018y * 0.10000000149011612f;
        float _395 = log2(cb1_018z);
        float _396 = _395 + -13.287712097167969f;
        float _397 = _396 * 1.4929734468460083f;
        float _398 = _397 + 18.0f;
        float _399 = exp2(_398);
        float _400 = _399 * 0.18000000715255737f;
        float _401 = abs(_400);
        float _402 = log2(_401);
        float _403 = _402 * 1.5f;
        float _404 = exp2(_403);
        float _405 = _404 * _394;
        float _406 = _405 / cb1_018z;
        float _407 = _406 + -0.07636754959821701f;
        float _408 = _402 * 1.2750000953674316f;
        float _409 = exp2(_408);
        float _410 = _409 * 0.07636754959821701f;
        float _411 = cb1_018y * 0.011232397519052029f;
        float _412 = _411 * _404;
        float _413 = _412 / cb1_018z;
        float _414 = _410 - _413;
        float _415 = _409 + -0.11232396960258484f;
        float _416 = _415 * _394;
        float _417 = _416 / cb1_018z;
        float _418 = _417 * cb1_018z;
        float _419 = abs(_384);
        float _420 = abs(_387);
        float _421 = abs(_389);
        float _422 = log2(_419);
        float _423 = log2(_420);
        float _424 = log2(_421);
        float _425 = _422 * 1.5f;
        float _426 = _423 * 1.5f;
        float _427 = _424 * 1.5f;
        float _428 = exp2(_425);
        float _429 = exp2(_426);
        float _430 = exp2(_427);
        float _431 = _428 * _418;
        float _432 = _429 * _418;
        float _433 = _430 * _418;
        float _434 = _422 * 1.2750000953674316f;
        float _435 = _423 * 1.2750000953674316f;
        float _436 = _424 * 1.2750000953674316f;
        float _437 = exp2(_434);
        float _438 = exp2(_435);
        float _439 = exp2(_436);
        float _440 = _437 * _407;
        float _441 = _438 * _407;
        float _442 = _439 * _407;
        float _443 = _440 + _414;
        float _444 = _441 + _414;
        float _445 = _442 + _414;
        float _446 = _431 / _443;
        float _447 = _432 / _444;
        float _448 = _433 / _445;
        float _449 = _446 * 9.999999747378752e-05f;
        float _450 = _447 * 9.999999747378752e-05f;
        float _451 = _448 * 9.999999747378752e-05f;
        float _452 = 5000.0f / cb1_018y;
        float _453 = _449 * _452;
        float _454 = _450 * _452;
        float _455 = _451 * _452;
        _482 = _453;
        _483 = _454;
        _484 = _455;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_384, _387, _389));
      _482 = tonemapped.x, _483 = tonemapped.y, _484 = tonemapped.z;
    }
      } else {
        float _457 = _384 + 0.020616600289940834f;
        float _458 = _387 + 0.020616600289940834f;
        float _459 = _389 + 0.020616600289940834f;
        float _460 = _457 * _384;
        float _461 = _458 * _387;
        float _462 = _459 * _389;
        float _463 = _460 + -7.456949970219284e-05f;
        float _464 = _461 + -7.456949970219284e-05f;
        float _465 = _462 + -7.456949970219284e-05f;
        float _466 = _384 * 0.9837960004806519f;
        float _467 = _387 * 0.9837960004806519f;
        float _468 = _389 * 0.9837960004806519f;
        float _469 = _466 + 0.4336790144443512f;
        float _470 = _467 + 0.4336790144443512f;
        float _471 = _468 + 0.4336790144443512f;
        float _472 = _469 * _384;
        float _473 = _470 * _387;
        float _474 = _471 * _389;
        float _475 = _472 + 0.24617899954319f;
        float _476 = _473 + 0.24617899954319f;
        float _477 = _474 + 0.24617899954319f;
        float _478 = _463 / _475;
        float _479 = _464 / _476;
        float _480 = _465 / _477;
        _482 = _478;
        _483 = _479;
        _484 = _480;
      }
      float _485 = _482 * 1.6047500371932983f;
      float _486 = mad(-0.5310800075531006f, _483, _485);
      float _487 = mad(-0.07366999983787537f, _484, _486);
      float _488 = _482 * -0.10208000242710114f;
      float _489 = mad(1.1081299781799316f, _483, _488);
      float _490 = mad(-0.006049999967217445f, _484, _489);
      float _491 = _482 * -0.0032599999103695154f;
      float _492 = mad(-0.07275000214576721f, _483, _491);
      float _493 = mad(1.0760200023651123f, _484, _492);
      if (_317) {
        // float _495 = max(_487, 0.0f);
        // float _496 = max(_490, 0.0f);
        // float _497 = max(_493, 0.0f);
        // bool _498 = !(_495 >= 0.0030399328097701073f);
        // if (!_498) {
        //   float _500 = abs(_495);
        //   float _501 = log2(_500);
        //   float _502 = _501 * 0.4166666567325592f;
        //   float _503 = exp2(_502);
        //   float _504 = _503 * 1.0549999475479126f;
        //   float _505 = _504 + -0.054999999701976776f;
        //   _509 = _505;
        // } else {
        //   float _507 = _495 * 12.923210144042969f;
        //   _509 = _507;
        // }
        // bool _510 = !(_496 >= 0.0030399328097701073f);
        // if (!_510) {
        //   float _512 = abs(_496);
        //   float _513 = log2(_512);
        //   float _514 = _513 * 0.4166666567325592f;
        //   float _515 = exp2(_514);
        //   float _516 = _515 * 1.0549999475479126f;
        //   float _517 = _516 + -0.054999999701976776f;
        //   _521 = _517;
        // } else {
        //   float _519 = _496 * 12.923210144042969f;
        //   _521 = _519;
        // }
        // bool _522 = !(_497 >= 0.0030399328097701073f);
        // if (!_522) {
        //   float _524 = abs(_497);
        //   float _525 = log2(_524);
        //   float _526 = _525 * 0.4166666567325592f;
        //   float _527 = exp2(_526);
        //   float _528 = _527 * 1.0549999475479126f;
        //   float _529 = _528 + -0.054999999701976776f;
        //   _602 = _509;
        //   _603 = _521;
        //   _604 = _529;
        // } else {
        //   float _531 = _497 * 12.923210144042969f;
        //   _602 = _509;
        //   _603 = _521;
        //   _604 = _531;
        // }
        _602 = renodx::color::srgb::EncodeSafe(_487);
        _603 = renodx::color::srgb::EncodeSafe(_490);
        _604 = renodx::color::srgb::EncodeSafe(_493);

      } else {
        float _533 = saturate(_487);
        float _534 = saturate(_490);
        float _535 = saturate(_493);
        bool _536 = ((uint)(cb1_018w) == -2);
        if (!_536) {
          bool _538 = !(_533 >= 0.0030399328097701073f);
          if (!_538) {
            float _540 = abs(_533);
            float _541 = log2(_540);
            float _542 = _541 * 0.4166666567325592f;
            float _543 = exp2(_542);
            float _544 = _543 * 1.0549999475479126f;
            float _545 = _544 + -0.054999999701976776f;
            _549 = _545;
          } else {
            float _547 = _533 * 12.923210144042969f;
            _549 = _547;
          }
          bool _550 = !(_534 >= 0.0030399328097701073f);
          if (!_550) {
            float _552 = abs(_534);
            float _553 = log2(_552);
            float _554 = _553 * 0.4166666567325592f;
            float _555 = exp2(_554);
            float _556 = _555 * 1.0549999475479126f;
            float _557 = _556 + -0.054999999701976776f;
            _561 = _557;
          } else {
            float _559 = _534 * 12.923210144042969f;
            _561 = _559;
          }
          bool _562 = !(_535 >= 0.0030399328097701073f);
          if (!_562) {
            float _564 = abs(_535);
            float _565 = log2(_564);
            float _566 = _565 * 0.4166666567325592f;
            float _567 = exp2(_566);
            float _568 = _567 * 1.0549999475479126f;
            float _569 = _568 + -0.054999999701976776f;
            _573 = _549;
            _574 = _561;
            _575 = _569;
          } else {
            float _571 = _535 * 12.923210144042969f;
            _573 = _549;
            _574 = _561;
            _575 = _571;
          }
        } else {
          _573 = _533;
          _574 = _534;
          _575 = _535;
        }
        float _580 = abs(_573);
        float _581 = abs(_574);
        float _582 = abs(_575);
        float _583 = log2(_580);
        float _584 = log2(_581);
        float _585 = log2(_582);
        float _586 = _583 * cb2_000z;
        float _587 = _584 * cb2_000z;
        float _588 = _585 * cb2_000z;
        float _589 = exp2(_586);
        float _590 = exp2(_587);
        float _591 = exp2(_588);
        float _592 = _589 * cb2_000y;
        float _593 = _590 * cb2_000y;
        float _594 = _591 * cb2_000y;
        float _595 = _592 + cb2_000x;
        float _596 = _593 + cb2_000x;
        float _597 = _594 + cb2_000x;
        float _598 = saturate(_595);
        float _599 = saturate(_596);
        float _600 = saturate(_597);
        _602 = _598;
        _603 = _599;
        _604 = _600;
      }
      float _608 = cb2_023x * TEXCOORD0_centroid.x;
      float _609 = cb2_023y * TEXCOORD0_centroid.y;
      float _612 = _608 + cb2_023z;
      float _613 = _609 + cb2_023w;
      float4 _616 = t10.SampleLevel(s0_space2, float2(_612, _613), 0.0f);
      float _618 = _616.x + -0.5f;
      float _619 = _618 * cb2_022x;
      float _620 = _619 + 0.5f;
      float _621 = _620 * 2.0f;
      float _622 = _621 * _602;
      float _623 = _621 * _603;
      float _624 = _621 * _604;
      float _628 = float((uint)(cb2_019z));
      float _629 = float((uint)(cb2_019w));
      float _630 = _628 + SV_Position.x;
      float _631 = _629 + SV_Position.y;
      uint _632 = uint(_630);
      uint _633 = uint(_631);
      uint _636 = cb2_019x + -1u;
      uint _637 = cb2_019y + -1u;
      int _638 = _632 & _636;
      int _639 = _633 & _637;
      float4 _640 = t3.Load(int3(_638, _639, 0));
      float _644 = _640.x * 2.0f;
      float _645 = _640.y * 2.0f;
      float _646 = _640.z * 2.0f;
      float _647 = _644 + -1.0f;
      float _648 = _645 + -1.0f;
      float _649 = _646 + -1.0f;
      float _650 = _647 * cb2_025w;
      float _651 = _648 * cb2_025w;
      float _652 = _649 * cb2_025w;
      float _653 = _650 + _622;
      float _654 = _651 + _623;
      float _655 = _652 + _624;
      float _656 = dot(float3(_653, _654, _655), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _653;
      SV_Target.y = _654;
      SV_Target.z = _655;
      SV_Target.w = _656;
      SV_Target_1.x = _656;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
