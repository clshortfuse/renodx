#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _26 = cb2_015x * TEXCOORD0_centroid.x;
  float _27 = cb2_015y * TEXCOORD0_centroid.y;
  float _30 = _26 + cb2_015z;
  float _31 = _27 + cb2_015w;
  float4 _32 = t7.SampleLevel(s0_space2, float2(_30, _31), 0.0f);
  float _36 = saturate(_32.x);
  float _37 = saturate(_32.z);
  float _40 = cb2_026x * _37;
  float _41 = _36 * 6.283199787139893f;
  float _42 = cos(_41);
  float _43 = sin(_41);
  float _44 = _40 * _42;
  float _45 = _43 * _40;
  float _46 = 1.0f - _32.y;
  float _47 = saturate(_46);
  float _48 = _44 * _47;
  float _49 = _45 * _47;
  float _50 = _48 + TEXCOORD0_centroid.x;
  float _51 = _49 + TEXCOORD0_centroid.y;
  float4 _52 = t1.SampleLevel(s4_space2, float2(_50, _51), 0.0f);
  float _56 = max(_52.x, 0.0f);
  float _57 = max(_52.y, 0.0f);
  float _58 = max(_52.z, 0.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float _61 = min(_58, 65000.0f);
  float4 _62 = t3.SampleLevel(s2_space2, float2(_50, _51), 0.0f);
  float _67 = max(_62.x, 0.0f);
  float _68 = max(_62.y, 0.0f);
  float _69 = max(_62.z, 0.0f);
  float _70 = max(_62.w, 0.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _74 = min(_70, 5000.0f);
  float _77 = _21.x * cb0_028z;
  float _78 = _77 + cb0_028x;
  float _79 = cb2_027w / _78;
  float _80 = 1.0f - _79;
  float _81 = abs(_80);
  float _83 = cb2_027y * _81;
  float _85 = _83 - cb2_027z;
  float _86 = saturate(_85);
  float _87 = max(_86, _74);
  float _88 = saturate(_87);
  float _92 = cb2_006x * _50;
  float _93 = cb2_006y * _51;
  float _96 = _92 + cb2_006z;
  float _97 = _93 + cb2_006w;
  float _101 = cb2_007x * _50;
  float _102 = cb2_007y * _51;
  float _105 = _101 + cb2_007z;
  float _106 = _102 + cb2_007w;
  float _110 = cb2_008x * _50;
  float _111 = cb2_008y * _51;
  float _114 = _110 + cb2_008z;
  float _115 = _111 + cb2_008w;
  float4 _116 = t1.SampleLevel(s2_space2, float2(_96, _97), 0.0f);
  float _118 = max(_116.x, 0.0f);
  float _119 = min(_118, 65000.0f);
  float4 _120 = t1.SampleLevel(s2_space2, float2(_105, _106), 0.0f);
  float _122 = max(_120.y, 0.0f);
  float _123 = min(_122, 65000.0f);
  float4 _124 = t1.SampleLevel(s2_space2, float2(_114, _115), 0.0f);
  float _126 = max(_124.z, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t3.SampleLevel(s2_space2, float2(_96, _97), 0.0f);
  float _130 = max(_128.x, 0.0f);
  float _131 = min(_130, 5000.0f);
  float4 _132 = t3.SampleLevel(s2_space2, float2(_105, _106), 0.0f);
  float _134 = max(_132.y, 0.0f);
  float _135 = min(_134, 5000.0f);
  float4 _136 = t3.SampleLevel(s2_space2, float2(_114, _115), 0.0f);
  float _138 = max(_136.z, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _146 = cb2_005x * _140.x;
  float _147 = cb2_005x * _140.y;
  float _148 = cb2_005x * _140.z;
  float _149 = _119 - _59;
  float _150 = _123 - _60;
  float _151 = _127 - _61;
  float _152 = _146 * _149;
  float _153 = _147 * _150;
  float _154 = _148 * _151;
  float _155 = _152 + _59;
  float _156 = _153 + _60;
  float _157 = _154 + _61;
  float _158 = _131 - _71;
  float _159 = _135 - _72;
  float _160 = _139 - _73;
  float _161 = _146 * _158;
  float _162 = _147 * _159;
  float _163 = _148 * _160;
  float _164 = _161 + _71;
  float _165 = _162 + _72;
  float _166 = _163 + _73;
  float4 _167 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _171 = _164 - _155;
  float _172 = _165 - _156;
  float _173 = _166 - _157;
  float _174 = _171 * _88;
  float _175 = _172 * _88;
  float _176 = _173 * _88;
  float _177 = _174 + _155;
  float _178 = _175 + _156;
  float _179 = _176 + _157;
  float _180 = dot(float3(_177, _178, _179), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _184 = t0[0].SExposureData_020;
  float _186 = t0[0].SExposureData_004;
  float _188 = cb2_018x * 0.5f;
  float _189 = _188 * cb2_018y;
  float _190 = _186.x - _189;
  float _191 = cb2_018y * cb2_018x;
  float _192 = 1.0f / _191;
  float _193 = _190 * _192;
  float _194 = _180 / _184.x;
  float _195 = _194 * 5464.01611328125f;
  float _196 = _195 + 9.99999993922529e-09f;
  float _197 = log2(_196);
  float _198 = _197 - _190;
  float _199 = _198 * _192;
  float _200 = saturate(_199);
  float2 _201 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _200), 0.0f);
  float _204 = max(_201.y, 1.0000000116860974e-07f);
  float _205 = _201.x / _204;
  float _206 = _205 + _193;
  float _207 = _206 / _192;
  float _208 = _207 - _186.x;
  float _209 = -0.0f - _208;
  float _211 = _209 - cb2_027x;
  float _212 = max(0.0f, _211);
  float _214 = cb2_026z * _212;
  float _215 = _208 - cb2_027x;
  float _216 = max(0.0f, _215);
  float _218 = cb2_026w * _216;
  bool _219 = (_208 < 0.0f);
  float _220 = select(_219, _214, _218);
  float _221 = exp2(_220);
  float _222 = _221 * _177;
  float _223 = _221 * _178;
  float _224 = _221 * _179;
  float _229 = cb2_024y * _167.x;
  float _230 = cb2_024z * _167.y;
  float _231 = cb2_024w * _167.z;
  float _232 = _229 + _222;
  float _233 = _230 + _223;
  float _234 = _231 + _224;
  float _239 = _232 * cb2_025x;
  float _240 = _233 * cb2_025y;
  float _241 = _234 * cb2_025z;
  float _242 = dot(float3(_239, _240, _241), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _243 = t0[0].SExposureData_012;
  float _245 = _242 * 5464.01611328125f;
  float _246 = _245 * _243.x;
  float _247 = _246 + 9.99999993922529e-09f;
  float _248 = log2(_247);
  float _249 = _248 + 16.929765701293945f;
  float _250 = _249 * 0.05734497308731079f;
  float _251 = saturate(_250);
  float _252 = _251 * _251;
  float _253 = _251 * 2.0f;
  float _254 = 3.0f - _253;
  float _255 = _252 * _254;
  float _256 = _240 * 0.8450999855995178f;
  float _257 = _241 * 0.14589999616146088f;
  float _258 = _256 + _257;
  float _259 = _258 * 2.4890189170837402f;
  float _260 = _258 * 0.3754962384700775f;
  float _261 = _258 * 2.811495304107666f;
  float _262 = _258 * 5.519708156585693f;
  float _263 = _242 - _259;
  float _264 = _255 * _263;
  float _265 = _264 + _259;
  float _266 = _255 * 0.5f;
  float _267 = _266 + 0.5f;
  float _268 = _267 * _263;
  float _269 = _268 + _259;
  float _270 = _239 - _260;
  float _271 = _240 - _261;
  float _272 = _241 - _262;
  float _273 = _267 * _270;
  float _274 = _267 * _271;
  float _275 = _267 * _272;
  float _276 = _273 + _260;
  float _277 = _274 + _261;
  float _278 = _275 + _262;
  float _279 = 1.0f / _269;
  float _280 = _265 * _279;
  float _281 = _280 * _276;
  float _282 = _280 * _277;
  float _283 = _280 * _278;
  float _287 = cb2_020x * TEXCOORD0_centroid.x;
  float _288 = cb2_020y * TEXCOORD0_centroid.y;
  float _291 = _287 + cb2_020z;
  float _292 = _288 + cb2_020w;
  float _295 = dot(float2(_291, _292), float2(_291, _292));
  float _296 = 1.0f - _295;
  float _297 = saturate(_296);
  float _298 = log2(_297);
  float _299 = _298 * cb2_021w;
  float _300 = exp2(_299);
  float _304 = _281 - cb2_021x;
  float _305 = _282 - cb2_021y;
  float _306 = _283 - cb2_021z;
  float _307 = _304 * _300;
  float _308 = _305 * _300;
  float _309 = _306 * _300;
  float _310 = _307 + cb2_021x;
  float _311 = _308 + cb2_021y;
  float _312 = _309 + cb2_021z;
  float _313 = t0[0].SExposureData_000;
  float _315 = max(_184.x, 0.0010000000474974513f);
  float _316 = 1.0f / _315;
  float _317 = _316 * _313.x;
  bool _320 = ((uint)(cb2_069y) == 0);
  float _326;
  float _327;
  float _328;
  float _382;
  float _383;
  float _384;
  float _459;
  float _460;
  float _461;
  float _611;
  float _648;
  float _649;
  float _650;
  float _679;
  float _680;
  float _681;
  float _762;
  float _763;
  float _764;
  float _770;
  float _771;
  float _772;
  float _786;
  float _787;
  float _788;
  float _813;
  float _825;
  float _853;
  float _865;
  float _877;
  float _878;
  float _879;
  float _906;
  float _907;
  float _908;
  if (!_320) {
    float _322 = _317 * _310;
    float _323 = _317 * _311;
    float _324 = _317 * _312;
    _326 = _322;
    _327 = _323;
    _328 = _324;
  } else {
    _326 = _310;
    _327 = _311;
    _328 = _312;
  }
  float _329 = _326 * 0.6130970120429993f;
  float _330 = mad(0.33952298760414124f, _327, _329);
  float _331 = mad(0.04737899824976921f, _328, _330);
  float _332 = _326 * 0.07019399851560593f;
  float _333 = mad(0.9163540005683899f, _327, _332);
  float _334 = mad(0.013451999984681606f, _328, _333);
  float _335 = _326 * 0.02061600051820278f;
  float _336 = mad(0.10956999659538269f, _327, _335);
  float _337 = mad(0.8698149919509888f, _328, _336);
  float _338 = log2(_331);
  float _339 = log2(_334);
  float _340 = log2(_337);
  float _341 = _338 * 0.04211956635117531f;
  float _342 = _339 * 0.04211956635117531f;
  float _343 = _340 * 0.04211956635117531f;
  float _344 = _341 + 0.6252607107162476f;
  float _345 = _342 + 0.6252607107162476f;
  float _346 = _343 + 0.6252607107162476f;
  float4 _347 = t5.SampleLevel(s2_space2, float3(_344, _345, _346), 0.0f);
  bool _353 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_353 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _357 = cb2_017x * _347.x;
    float _358 = cb2_017x * _347.y;
    float _359 = cb2_017x * _347.z;
    float _361 = _357 + cb2_017y;
    float _362 = _358 + cb2_017y;
    float _363 = _359 + cb2_017y;
    float _364 = exp2(_361);
    float _365 = exp2(_362);
    float _366 = exp2(_363);
    float _367 = _364 + 1.0f;
    float _368 = _365 + 1.0f;
    float _369 = _366 + 1.0f;
    float _370 = 1.0f / _367;
    float _371 = 1.0f / _368;
    float _372 = 1.0f / _369;
    float _374 = cb2_017z * _370;
    float _375 = cb2_017z * _371;
    float _376 = cb2_017z * _372;
    float _378 = _374 + cb2_017w;
    float _379 = _375 + cb2_017w;
    float _380 = _376 + cb2_017w;
    _382 = _378;
    _383 = _379;
    _384 = _380;
  } else {
    _382 = _347.x;
    _383 = _347.y;
    _384 = _347.z;
  }
  float _385 = _382 * 23.0f;
  float _386 = _385 + -14.473931312561035f;
  float _387 = exp2(_386);
  float _388 = _383 * 23.0f;
  float _389 = _388 + -14.473931312561035f;
  float _390 = exp2(_389);
  float _391 = _384 * 23.0f;
  float _392 = _391 + -14.473931312561035f;
  float _393 = exp2(_392);
  float _394 = dot(float3(_387, _390, _393), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _399 = dot(float3(_387, _390, _393), float3(_387, _390, _393));
  float _400 = rsqrt(_399);
  float _401 = _400 * _387;
  float _402 = _400 * _390;
  float _403 = _400 * _393;
  float _404 = cb2_001x - _401;
  float _405 = cb2_001y - _402;
  float _406 = cb2_001z - _403;
  float _407 = dot(float3(_404, _405, _406), float3(_404, _405, _406));
  float _410 = cb2_002z * _407;
  float _412 = _410 + cb2_002w;
  float _413 = saturate(_412);
  float _415 = cb2_002x * _413;
  float _416 = _394 - _387;
  float _417 = _394 - _390;
  float _418 = _394 - _393;
  float _419 = _415 * _416;
  float _420 = _415 * _417;
  float _421 = _415 * _418;
  float _422 = _419 + _387;
  float _423 = _420 + _390;
  float _424 = _421 + _393;
  float _426 = cb2_002y * _413;
  float _427 = 0.10000000149011612f - _422;
  float _428 = 0.10000000149011612f - _423;
  float _429 = 0.10000000149011612f - _424;
  float _430 = _427 * _426;
  float _431 = _428 * _426;
  float _432 = _429 * _426;
  float _433 = _430 + _422;
  float _434 = _431 + _423;
  float _435 = _432 + _424;
  float _436 = saturate(_433);
  float _437 = saturate(_434);
  float _438 = saturate(_435);
  float _444 = cb2_016x - _436;
  float _445 = cb2_016y - _437;
  float _446 = cb2_016z - _438;
  float _447 = _444 * cb2_016w;
  float _448 = _445 * cb2_016w;
  float _449 = _446 * cb2_016w;
  float _450 = _447 + _436;
  float _451 = _448 + _437;
  float _452 = _449 + _438;
  if (_353 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _455 = cb2_024x * _450;
    float _456 = cb2_024x * _451;
    float _457 = cb2_024x * _452;
    _459 = _455;
    _460 = _456;
    _461 = _457;
  } else {
    _459 = _450;
    _460 = _451;
    _461 = _452;
  }
  float _464 = _459 * 0.9708889722824097f;
  float _465 = mad(0.026962999254465103f, _460, _464);
  float _466 = mad(0.002148000057786703f, _461, _465);
  float _467 = _459 * 0.01088900025933981f;
  float _468 = mad(0.9869629740715027f, _460, _467);
  float _469 = mad(0.002148000057786703f, _461, _468);
  float _470 = mad(0.026962999254465103f, _460, _467);
  float _471 = mad(0.9621480107307434f, _461, _470);
  float _472 = max(_466, 0.0f);
  float _473 = max(_469, 0.0f);
  float _474 = max(_471, 0.0f);
  float _475 = min(_472, cb2_095y);
  float _476 = min(_473, cb2_095y);
  float _477 = min(_474, cb2_095y);
  bool _480 = ((uint)(cb2_095x) == 0);
  bool _483 = ((uint)(cb2_094w) == 0);
  bool _485 = ((uint)(cb2_094z) == 0);
  bool _487 = ((uint)(cb2_094y) != 0);
  bool _489 = ((uint)(cb2_094x) == 0);
  bool _491 = ((uint)(cb2_069z) != 0);
  float _538 = asfloat((uint)(cb2_075y));
  float _539 = asfloat((uint)(cb2_075z));
  float _540 = asfloat((uint)(cb2_075w));
  float _541 = asfloat((uint)(cb2_074z));
  float _542 = asfloat((uint)(cb2_074w));
  float _543 = asfloat((uint)(cb2_075x));
  float _544 = asfloat((uint)(cb2_073w));
  float _545 = asfloat((uint)(cb2_074x));
  float _546 = asfloat((uint)(cb2_074y));
  float _547 = asfloat((uint)(cb2_077x));
  float _548 = asfloat((uint)(cb2_077y));
  float _549 = asfloat((uint)(cb2_079x));
  float _550 = asfloat((uint)(cb2_079y));
  float _551 = asfloat((uint)(cb2_079z));
  float _552 = asfloat((uint)(cb2_078y));
  float _553 = asfloat((uint)(cb2_078z));
  float _554 = asfloat((uint)(cb2_078w));
  float _555 = asfloat((uint)(cb2_077z));
  float _556 = asfloat((uint)(cb2_077w));
  float _557 = asfloat((uint)(cb2_078x));
  float _558 = asfloat((uint)(cb2_072y));
  float _559 = asfloat((uint)(cb2_072z));
  float _560 = asfloat((uint)(cb2_072w));
  float _561 = asfloat((uint)(cb2_071x));
  float _562 = asfloat((uint)(cb2_071y));
  float _563 = asfloat((uint)(cb2_076x));
  float _564 = asfloat((uint)(cb2_070w));
  float _565 = asfloat((uint)(cb2_070x));
  float _566 = asfloat((uint)(cb2_070y));
  float _567 = asfloat((uint)(cb2_070z));
  float _568 = asfloat((uint)(cb2_073x));
  float _569 = asfloat((uint)(cb2_073y));
  float _570 = asfloat((uint)(cb2_073z));
  float _571 = asfloat((uint)(cb2_071z));
  float _572 = asfloat((uint)(cb2_071w));
  float _573 = asfloat((uint)(cb2_072x));
  float _574 = max(_476, _477);
  float _575 = max(_475, _574);
  float _576 = 1.0f / _575;
  float _577 = _576 * _475;
  float _578 = _576 * _476;
  float _579 = _576 * _477;
  float _580 = abs(_577);
  float _581 = log2(_580);
  float _582 = _581 * _565;
  float _583 = exp2(_582);
  float _584 = abs(_578);
  float _585 = log2(_584);
  float _586 = _585 * _566;
  float _587 = exp2(_586);
  float _588 = abs(_579);
  float _589 = log2(_588);
  float _590 = _589 * _567;
  float _591 = exp2(_590);
  if (_487) {
    float _594 = asfloat((uint)(cb2_076w));
    float _596 = asfloat((uint)(cb2_076z));
    float _598 = asfloat((uint)(cb2_076y));
    float _599 = _596 * _476;
    float _600 = _598 * _475;
    float _601 = _594 * _477;
    float _602 = _600 + _601;
    float _603 = _602 + _599;
    _611 = _603;
  } else {
    float _605 = _572 * _476;
    float _606 = _571 * _475;
    float _607 = _573 * _477;
    float _608 = _605 + _606;
    float _609 = _608 + _607;
    _611 = _609;
  }
  float _612 = abs(_611);
  float _613 = log2(_612);
  float _614 = _613 * _564;
  float _615 = exp2(_614);
  float _616 = log2(_615);
  float _617 = _616 * _563;
  float _618 = exp2(_617);
  float _619 = select(_491, _618, _615);
  float _620 = _619 * _561;
  float _621 = _620 + _562;
  float _622 = 1.0f / _621;
  float _623 = _622 * _615;
  if (_487) {
    if (!_489) {
      float _626 = _583 * _555;
      float _627 = _587 * _556;
      float _628 = _591 * _557;
      float _629 = _627 + _626;
      float _630 = _629 + _628;
      float _631 = _587 * _553;
      float _632 = _583 * _552;
      float _633 = _591 * _554;
      float _634 = _631 + _632;
      float _635 = _634 + _633;
      float _636 = _591 * _551;
      float _637 = _587 * _550;
      float _638 = _583 * _549;
      float _639 = _637 + _638;
      float _640 = _639 + _636;
      float _641 = max(_635, _640);
      float _642 = max(_630, _641);
      float _643 = 1.0f / _642;
      float _644 = _643 * _630;
      float _645 = _643 * _635;
      float _646 = _643 * _640;
      _648 = _644;
      _649 = _645;
      _650 = _646;
    } else {
      _648 = _583;
      _649 = _587;
      _650 = _591;
    }
    float _651 = _648 * _548;
    float _652 = exp2(_651);
    float _653 = _652 * _547;
    float _654 = saturate(_653);
    float _655 = _648 * _547;
    float _656 = _648 - _655;
    float _657 = saturate(_656);
    float _658 = max(_547, _657);
    float _659 = min(_658, _654);
    float _660 = _649 * _548;
    float _661 = exp2(_660);
    float _662 = _661 * _547;
    float _663 = saturate(_662);
    float _664 = _649 * _547;
    float _665 = _649 - _664;
    float _666 = saturate(_665);
    float _667 = max(_547, _666);
    float _668 = min(_667, _663);
    float _669 = _650 * _548;
    float _670 = exp2(_669);
    float _671 = _670 * _547;
    float _672 = saturate(_671);
    float _673 = _650 * _547;
    float _674 = _650 - _673;
    float _675 = saturate(_674);
    float _676 = max(_547, _675);
    float _677 = min(_676, _672);
    _679 = _659;
    _680 = _668;
    _681 = _677;
  } else {
    _679 = _583;
    _680 = _587;
    _681 = _591;
  }
  float _682 = _679 * _571;
  float _683 = _680 * _572;
  float _684 = _683 + _682;
  float _685 = _681 * _573;
  float _686 = _684 + _685;
  float _687 = 1.0f / _686;
  float _688 = _687 * _623;
  float _689 = saturate(_688);
  float _690 = _689 * _679;
  float _691 = saturate(_690);
  float _692 = _689 * _680;
  float _693 = saturate(_692);
  float _694 = _689 * _681;
  float _695 = saturate(_694);
  float _696 = _691 * _558;
  float _697 = _558 - _696;
  float _698 = _693 * _559;
  float _699 = _559 - _698;
  float _700 = _695 * _560;
  float _701 = _560 - _700;
  float _702 = _695 * _573;
  float _703 = _691 * _571;
  float _704 = _693 * _572;
  float _705 = _623 - _703;
  float _706 = _705 - _704;
  float _707 = _706 - _702;
  float _708 = saturate(_707);
  float _709 = _699 * _572;
  float _710 = _697 * _571;
  float _711 = _701 * _573;
  float _712 = _709 + _710;
  float _713 = _712 + _711;
  float _714 = 1.0f / _713;
  float _715 = _714 * _708;
  float _716 = _715 * _697;
  float _717 = _716 + _691;
  float _718 = saturate(_717);
  float _719 = _715 * _699;
  float _720 = _719 + _693;
  float _721 = saturate(_720);
  float _722 = _715 * _701;
  float _723 = _722 + _695;
  float _724 = saturate(_723);
  float _725 = _724 * _573;
  float _726 = _718 * _571;
  float _727 = _721 * _572;
  float _728 = _623 - _726;
  float _729 = _728 - _727;
  float _730 = _729 - _725;
  float _731 = saturate(_730);
  float _732 = _731 * _568;
  float _733 = _732 + _718;
  float _734 = saturate(_733);
  float _735 = _731 * _569;
  float _736 = _735 + _721;
  float _737 = saturate(_736);
  float _738 = _731 * _570;
  float _739 = _738 + _724;
  float _740 = saturate(_739);
  if (!_485) {
    float _742 = _734 * _544;
    float _743 = _737 * _545;
    float _744 = _740 * _546;
    float _745 = _743 + _742;
    float _746 = _745 + _744;
    float _747 = _737 * _542;
    float _748 = _734 * _541;
    float _749 = _740 * _543;
    float _750 = _747 + _748;
    float _751 = _750 + _749;
    float _752 = _740 * _540;
    float _753 = _737 * _539;
    float _754 = _734 * _538;
    float _755 = _753 + _754;
    float _756 = _755 + _752;
    if (!_483) {
      float _758 = saturate(_746);
      float _759 = saturate(_751);
      float _760 = saturate(_756);
      _762 = _760;
      _763 = _759;
      _764 = _758;
    } else {
      _762 = _756;
      _763 = _751;
      _764 = _746;
    }
  } else {
    _762 = _740;
    _763 = _737;
    _764 = _734;
  }
  if (!_480) {
    float _766 = _764 * _544;
    float _767 = _763 * _544;
    float _768 = _762 * _544;
    _770 = _768;
    _771 = _767;
    _772 = _766;
  } else {
    _770 = _762;
    _771 = _763;
    _772 = _764;
  }
  if (_353) {
    float _776 = cb1_018z * 9.999999747378752e-05f;
    float _777 = _776 * _772;
    float _778 = _776 * _771;
    float _779 = _776 * _770;
    float _781 = 5000.0f / cb1_018y;
    float _782 = _777 * _781;
    float _783 = _778 * _781;
    float _784 = _779 * _781;
    _786 = _782;
    _787 = _783;
    _788 = _784;
  } else {
    _786 = _772;
    _787 = _771;
    _788 = _770;
  }
  float _789 = _786 * 1.6047500371932983f;
  float _790 = mad(-0.5310800075531006f, _787, _789);
  float _791 = mad(-0.07366999983787537f, _788, _790);
  float _792 = _786 * -0.10208000242710114f;
  float _793 = mad(1.1081299781799316f, _787, _792);
  float _794 = mad(-0.006049999967217445f, _788, _793);
  float _795 = _786 * -0.0032599999103695154f;
  float _796 = mad(-0.07275000214576721f, _787, _795);
  float _797 = mad(1.0760200023651123f, _788, _796);
  if (_353) {
    // float _799 = max(_791, 0.0f);
    // float _800 = max(_794, 0.0f);
    // float _801 = max(_797, 0.0f);
    // bool _802 = !(_799 >= 0.0030399328097701073f);
    // if (!_802) {
    //   float _804 = abs(_799);
    //   float _805 = log2(_804);
    //   float _806 = _805 * 0.4166666567325592f;
    //   float _807 = exp2(_806);
    //   float _808 = _807 * 1.0549999475479126f;
    //   float _809 = _808 + -0.054999999701976776f;
    //   _813 = _809;
    // } else {
    //   float _811 = _799 * 12.923210144042969f;
    //   _813 = _811;
    // }
    // bool _814 = !(_800 >= 0.0030399328097701073f);
    // if (!_814) {
    //   float _816 = abs(_800);
    //   float _817 = log2(_816);
    //   float _818 = _817 * 0.4166666567325592f;
    //   float _819 = exp2(_818);
    //   float _820 = _819 * 1.0549999475479126f;
    //   float _821 = _820 + -0.054999999701976776f;
    //   _825 = _821;
    // } else {
    //   float _823 = _800 * 12.923210144042969f;
    //   _825 = _823;
    // }
    // bool _826 = !(_801 >= 0.0030399328097701073f);
    // if (!_826) {
    //   float _828 = abs(_801);
    //   float _829 = log2(_828);
    //   float _830 = _829 * 0.4166666567325592f;
    //   float _831 = exp2(_830);
    //   float _832 = _831 * 1.0549999475479126f;
    //   float _833 = _832 + -0.054999999701976776f;
    //   _906 = _813;
    //   _907 = _825;
    //   _908 = _833;
    // } else {
    //   float _835 = _801 * 12.923210144042969f;
    //   _906 = _813;
    //   _907 = _825;
    //   _908 = _835;
    // }
    _906 = renodx::color::srgb::EncodeSafe(_791);
    _907 = renodx::color::srgb::EncodeSafe(_794);
    _908 = renodx::color::srgb::EncodeSafe(_797);

  } else {
    float _837 = saturate(_791);
    float _838 = saturate(_794);
    float _839 = saturate(_797);
    bool _840 = ((uint)(cb1_018w) == -2);
    if (!_840) {
      bool _842 = !(_837 >= 0.0030399328097701073f);
      if (!_842) {
        float _844 = abs(_837);
        float _845 = log2(_844);
        float _846 = _845 * 0.4166666567325592f;
        float _847 = exp2(_846);
        float _848 = _847 * 1.0549999475479126f;
        float _849 = _848 + -0.054999999701976776f;
        _853 = _849;
      } else {
        float _851 = _837 * 12.923210144042969f;
        _853 = _851;
      }
      bool _854 = !(_838 >= 0.0030399328097701073f);
      if (!_854) {
        float _856 = abs(_838);
        float _857 = log2(_856);
        float _858 = _857 * 0.4166666567325592f;
        float _859 = exp2(_858);
        float _860 = _859 * 1.0549999475479126f;
        float _861 = _860 + -0.054999999701976776f;
        _865 = _861;
      } else {
        float _863 = _838 * 12.923210144042969f;
        _865 = _863;
      }
      bool _866 = !(_839 >= 0.0030399328097701073f);
      if (!_866) {
        float _868 = abs(_839);
        float _869 = log2(_868);
        float _870 = _869 * 0.4166666567325592f;
        float _871 = exp2(_870);
        float _872 = _871 * 1.0549999475479126f;
        float _873 = _872 + -0.054999999701976776f;
        _877 = _853;
        _878 = _865;
        _879 = _873;
      } else {
        float _875 = _839 * 12.923210144042969f;
        _877 = _853;
        _878 = _865;
        _879 = _875;
      }
    } else {
      _877 = _837;
      _878 = _838;
      _879 = _839;
    }
    float _884 = abs(_877);
    float _885 = abs(_878);
    float _886 = abs(_879);
    float _887 = log2(_884);
    float _888 = log2(_885);
    float _889 = log2(_886);
    float _890 = _887 * cb2_000z;
    float _891 = _888 * cb2_000z;
    float _892 = _889 * cb2_000z;
    float _893 = exp2(_890);
    float _894 = exp2(_891);
    float _895 = exp2(_892);
    float _896 = _893 * cb2_000y;
    float _897 = _894 * cb2_000y;
    float _898 = _895 * cb2_000y;
    float _899 = _896 + cb2_000x;
    float _900 = _897 + cb2_000x;
    float _901 = _898 + cb2_000x;
    float _902 = saturate(_899);
    float _903 = saturate(_900);
    float _904 = saturate(_901);
    _906 = _902;
    _907 = _903;
    _908 = _904;
  }
  float _909 = dot(float3(_906, _907, _908), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _906;
  SV_Target.y = _907;
  SV_Target.z = _908;
  SV_Target.w = _909;
  SV_Target_1.x = _909;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
