#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

Texture3D<float2> t10 : register(t10);

Texture2D<float4> t11 : register(t11);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _26 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _28 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _32 = _28.x * 6.283199787139893f;
  float _33 = cos(_32);
  float _34 = sin(_32);
  float _35 = _33 * _28.z;
  float _36 = _34 * _28.z;
  float _37 = _35 + TEXCOORD0_centroid.x;
  float _38 = _36 + TEXCOORD0_centroid.y;
  float _39 = _37 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _35;
  float _44 = _38 * 10.0f;
  float _45 = 10.0f - _44;
  float _46 = min(_44, _45);
  float _47 = saturate(_46);
  float _48 = _47 * _36;
  float _49 = _43 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t8.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _53 = _51.w * _43;
  float _54 = _51.w * _48;
  float _55 = 1.0f - _28.y;
  float _56 = saturate(_55);
  float _57 = _53 * _56;
  float _58 = _54 * _56;
  float _62 = cb2_015x * TEXCOORD0_centroid.x;
  float _63 = cb2_015y * TEXCOORD0_centroid.y;
  float _66 = _62 + cb2_015z;
  float _67 = _63 + cb2_015w;
  float4 _68 = t9.SampleLevel(s0_space2, float2(_66, _67), 0.0f);
  float _72 = saturate(_68.x);
  float _73 = saturate(_68.z);
  float _76 = cb2_026x * _73;
  float _77 = _72 * 6.283199787139893f;
  float _78 = cos(_77);
  float _79 = sin(_77);
  float _80 = _76 * _78;
  float _81 = _79 * _76;
  float _82 = 1.0f - _68.y;
  float _83 = saturate(_82);
  float _84 = _80 * _83;
  float _85 = _81 * _83;
  float _86 = _57 + TEXCOORD0_centroid.x;
  float _87 = _86 + _84;
  float _88 = _58 + TEXCOORD0_centroid.y;
  float _89 = _88 + _85;
  float4 _90 = t8.SampleLevel(s2_space2, float2(_87, _89), 0.0f);
  bool _92 = (_90.y > 0.0f);
  float _93 = select(_92, TEXCOORD0_centroid.x, _87);
  float _94 = select(_92, TEXCOORD0_centroid.y, _89);
  float4 _95 = t1.SampleLevel(s4_space2, float2(_93, _94), 0.0f);
  float _99 = max(_95.x, 0.0f);
  float _100 = max(_95.y, 0.0f);
  float _101 = max(_95.z, 0.0f);
  float _102 = min(_99, 65000.0f);
  float _103 = min(_100, 65000.0f);
  float _104 = min(_101, 65000.0f);
  float4 _105 = t4.SampleLevel(s2_space2, float2(_93, _94), 0.0f);
  float _110 = max(_105.x, 0.0f);
  float _111 = max(_105.y, 0.0f);
  float _112 = max(_105.z, 0.0f);
  float _113 = max(_105.w, 0.0f);
  float _114 = min(_110, 5000.0f);
  float _115 = min(_111, 5000.0f);
  float _116 = min(_112, 5000.0f);
  float _117 = min(_113, 5000.0f);
  float _120 = _26.x * cb0_028z;
  float _121 = _120 + cb0_028x;
  float _122 = cb2_027w / _121;
  float _123 = 1.0f - _122;
  float _124 = abs(_123);
  float _126 = cb2_027y * _124;
  float _128 = _126 - cb2_027z;
  float _129 = saturate(_128);
  float _130 = max(_129, _117);
  float _131 = saturate(_130);
  float _135 = cb2_006x * _93;
  float _136 = cb2_006y * _94;
  float _139 = _135 + cb2_006z;
  float _140 = _136 + cb2_006w;
  float _144 = cb2_007x * _93;
  float _145 = cb2_007y * _94;
  float _148 = _144 + cb2_007z;
  float _149 = _145 + cb2_007w;
  float _153 = cb2_008x * _93;
  float _154 = cb2_008y * _94;
  float _157 = _153 + cb2_008z;
  float _158 = _154 + cb2_008w;
  float4 _159 = t1.SampleLevel(s2_space2, float2(_139, _140), 0.0f);
  float _161 = max(_159.x, 0.0f);
  float _162 = min(_161, 65000.0f);
  float4 _163 = t1.SampleLevel(s2_space2, float2(_148, _149), 0.0f);
  float _165 = max(_163.y, 0.0f);
  float _166 = min(_165, 65000.0f);
  float4 _167 = t1.SampleLevel(s2_space2, float2(_157, _158), 0.0f);
  float _169 = max(_167.z, 0.0f);
  float _170 = min(_169, 65000.0f);
  float4 _171 = t4.SampleLevel(s2_space2, float2(_139, _140), 0.0f);
  float _173 = max(_171.x, 0.0f);
  float _174 = min(_173, 5000.0f);
  float4 _175 = t4.SampleLevel(s2_space2, float2(_148, _149), 0.0f);
  float _177 = max(_175.y, 0.0f);
  float _178 = min(_177, 5000.0f);
  float4 _179 = t4.SampleLevel(s2_space2, float2(_157, _158), 0.0f);
  float _181 = max(_179.z, 0.0f);
  float _182 = min(_181, 5000.0f);
  float4 _183 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _189 = cb2_005x * _183.x;
  float _190 = cb2_005x * _183.y;
  float _191 = cb2_005x * _183.z;
  float _192 = _162 - _102;
  float _193 = _166 - _103;
  float _194 = _170 - _104;
  float _195 = _189 * _192;
  float _196 = _190 * _193;
  float _197 = _191 * _194;
  float _198 = _195 + _102;
  float _199 = _196 + _103;
  float _200 = _197 + _104;
  float _201 = _174 - _114;
  float _202 = _178 - _115;
  float _203 = _182 - _116;
  float _204 = _189 * _201;
  float _205 = _190 * _202;
  float _206 = _191 * _203;
  float _207 = _204 + _114;
  float _208 = _205 + _115;
  float _209 = _206 + _116;
  float4 _210 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _214 = _207 - _198;
  float _215 = _208 - _199;
  float _216 = _209 - _200;
  float _217 = _214 * _131;
  float _218 = _215 * _131;
  float _219 = _216 * _131;
  float _220 = _217 + _198;
  float _221 = _218 + _199;
  float _222 = _219 + _200;
  float _223 = dot(float3(_220, _221, _222), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _227 = t0[0].SExposureData_020;
  float _229 = t0[0].SExposureData_004;
  float _231 = cb2_018x * 0.5f;
  float _232 = _231 * cb2_018y;
  float _233 = _229.x - _232;
  float _234 = cb2_018y * cb2_018x;
  float _235 = 1.0f / _234;
  float _236 = _233 * _235;
  float _237 = _223 / _227.x;
  float _238 = _237 * 5464.01611328125f;
  float _239 = _238 + 9.99999993922529e-09f;
  float _240 = log2(_239);
  float _241 = _240 - _233;
  float _242 = _241 * _235;
  float _243 = saturate(_242);
  float2 _244 = t10.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _243), 0.0f);
  float _247 = max(_244.y, 1.0000000116860974e-07f);
  float _248 = _244.x / _247;
  float _249 = _248 + _236;
  float _250 = _249 / _235;
  float _251 = _250 - _229.x;
  float _252 = -0.0f - _251;
  float _254 = _252 - cb2_027x;
  float _255 = max(0.0f, _254);
  float _257 = cb2_026z * _255;
  float _258 = _251 - cb2_027x;
  float _259 = max(0.0f, _258);
  float _261 = cb2_026w * _259;
  bool _262 = (_251 < 0.0f);
  float _263 = select(_262, _257, _261);
  float _264 = exp2(_263);
  float _265 = _264 * _220;
  float _266 = _264 * _221;
  float _267 = _264 * _222;
  float _272 = cb2_024y * _210.x;
  float _273 = cb2_024z * _210.y;
  float _274 = cb2_024w * _210.z;
  float _275 = _272 + _265;
  float _276 = _273 + _266;
  float _277 = _274 + _267;
  float _282 = _275 * cb2_025x;
  float _283 = _276 * cb2_025y;
  float _284 = _277 * cb2_025z;
  float _285 = dot(float3(_282, _283, _284), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _286 = t0[0].SExposureData_012;
  float _288 = _285 * 5464.01611328125f;
  float _289 = _288 * _286.x;
  float _290 = _289 + 9.99999993922529e-09f;
  float _291 = log2(_290);
  float _292 = _291 + 16.929765701293945f;
  float _293 = _292 * 0.05734497308731079f;
  float _294 = saturate(_293);
  float _295 = _294 * _294;
  float _296 = _294 * 2.0f;
  float _297 = 3.0f - _296;
  float _298 = _295 * _297;
  float _299 = _283 * 0.8450999855995178f;
  float _300 = _284 * 0.14589999616146088f;
  float _301 = _299 + _300;
  float _302 = _301 * 2.4890189170837402f;
  float _303 = _301 * 0.3754962384700775f;
  float _304 = _301 * 2.811495304107666f;
  float _305 = _301 * 5.519708156585693f;
  float _306 = _285 - _302;
  float _307 = _298 * _306;
  float _308 = _307 + _302;
  float _309 = _298 * 0.5f;
  float _310 = _309 + 0.5f;
  float _311 = _310 * _306;
  float _312 = _311 + _302;
  float _313 = _282 - _303;
  float _314 = _283 - _304;
  float _315 = _284 - _305;
  float _316 = _310 * _313;
  float _317 = _310 * _314;
  float _318 = _310 * _315;
  float _319 = _316 + _303;
  float _320 = _317 + _304;
  float _321 = _318 + _305;
  float _322 = 1.0f / _312;
  float _323 = _308 * _322;
  float _324 = _323 * _319;
  float _325 = _323 * _320;
  float _326 = _323 * _321;
  float _330 = cb2_020x * TEXCOORD0_centroid.x;
  float _331 = cb2_020y * TEXCOORD0_centroid.y;
  float _334 = _330 + cb2_020z;
  float _335 = _331 + cb2_020w;
  float _338 = dot(float2(_334, _335), float2(_334, _335));
  float _339 = 1.0f - _338;
  float _340 = saturate(_339);
  float _341 = log2(_340);
  float _342 = _341 * cb2_021w;
  float _343 = exp2(_342);
  float _347 = _324 - cb2_021x;
  float _348 = _325 - cb2_021y;
  float _349 = _326 - cb2_021z;
  float _350 = _347 * _343;
  float _351 = _348 * _343;
  float _352 = _349 * _343;
  float _353 = _350 + cb2_021x;
  float _354 = _351 + cb2_021y;
  float _355 = _352 + cb2_021z;
  float _356 = t0[0].SExposureData_000;
  float _358 = max(_227.x, 0.0010000000474974513f);
  float _359 = 1.0f / _358;
  float _360 = _359 * _356.x;
  bool _363 = ((uint)(cb2_069y) == 0);
  float _369;
  float _370;
  float _371;
  float _425;
  float _426;
  float _427;
  float _503;
  float _504;
  float _505;
  float _606;
  float _607;
  float _608;
  float _633;
  float _645;
  float _673;
  float _685;
  float _697;
  float _698;
  float _699;
  float _726;
  float _727;
  float _728;
  if (!_363) {
    float _365 = _360 * _353;
    float _366 = _360 * _354;
    float _367 = _360 * _355;
    _369 = _365;
    _370 = _366;
    _371 = _367;
  } else {
    _369 = _353;
    _370 = _354;
    _371 = _355;
  }
  float _372 = _369 * 0.6130970120429993f;
  float _373 = mad(0.33952298760414124f, _370, _372);
  float _374 = mad(0.04737899824976921f, _371, _373);
  float _375 = _369 * 0.07019399851560593f;
  float _376 = mad(0.9163540005683899f, _370, _375);
  float _377 = mad(0.013451999984681606f, _371, _376);
  float _378 = _369 * 0.02061600051820278f;
  float _379 = mad(0.10956999659538269f, _370, _378);
  float _380 = mad(0.8698149919509888f, _371, _379);
  float _381 = log2(_374);
  float _382 = log2(_377);
  float _383 = log2(_380);
  float _384 = _381 * 0.04211956635117531f;
  float _385 = _382 * 0.04211956635117531f;
  float _386 = _383 * 0.04211956635117531f;
  float _387 = _384 + 0.6252607107162476f;
  float _388 = _385 + 0.6252607107162476f;
  float _389 = _386 + 0.6252607107162476f;
  float4 _390 = t6.SampleLevel(s2_space2, float3(_387, _388, _389), 0.0f);
  bool _396 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_396 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _400 = cb2_017x * _390.x;
    float _401 = cb2_017x * _390.y;
    float _402 = cb2_017x * _390.z;
    float _404 = _400 + cb2_017y;
    float _405 = _401 + cb2_017y;
    float _406 = _402 + cb2_017y;
    float _407 = exp2(_404);
    float _408 = exp2(_405);
    float _409 = exp2(_406);
    float _410 = _407 + 1.0f;
    float _411 = _408 + 1.0f;
    float _412 = _409 + 1.0f;
    float _413 = 1.0f / _410;
    float _414 = 1.0f / _411;
    float _415 = 1.0f / _412;
    float _417 = cb2_017z * _413;
    float _418 = cb2_017z * _414;
    float _419 = cb2_017z * _415;
    float _421 = _417 + cb2_017w;
    float _422 = _418 + cb2_017w;
    float _423 = _419 + cb2_017w;
    _425 = _421;
    _426 = _422;
    _427 = _423;
  } else {
    _425 = _390.x;
    _426 = _390.y;
    _427 = _390.z;
  }
  float _428 = _425 * 23.0f;
  float _429 = _428 + -14.473931312561035f;
  float _430 = exp2(_429);
  float _431 = _426 * 23.0f;
  float _432 = _431 + -14.473931312561035f;
  float _433 = exp2(_432);
  float _434 = _427 * 23.0f;
  float _435 = _434 + -14.473931312561035f;
  float _436 = exp2(_435);
  float _437 = dot(float3(_430, _433, _436), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _442 = dot(float3(_430, _433, _436), float3(_430, _433, _436));
  float _443 = rsqrt(_442);
  float _444 = _443 * _430;
  float _445 = _443 * _433;
  float _446 = _443 * _436;
  float _447 = cb2_001x - _444;
  float _448 = cb2_001y - _445;
  float _449 = cb2_001z - _446;
  float _450 = dot(float3(_447, _448, _449), float3(_447, _448, _449));
  float _453 = cb2_002z * _450;
  float _455 = _453 + cb2_002w;
  float _456 = saturate(_455);
  float _458 = cb2_002x * _456;
  float _459 = _437 - _430;
  float _460 = _437 - _433;
  float _461 = _437 - _436;
  float _462 = _458 * _459;
  float _463 = _458 * _460;
  float _464 = _458 * _461;
  float _465 = _462 + _430;
  float _466 = _463 + _433;
  float _467 = _464 + _436;
  float _469 = cb2_002y * _456;
  float _470 = 0.10000000149011612f - _465;
  float _471 = 0.10000000149011612f - _466;
  float _472 = 0.10000000149011612f - _467;
  float _473 = _470 * _469;
  float _474 = _471 * _469;
  float _475 = _472 * _469;
  float _476 = _473 + _465;
  float _477 = _474 + _466;
  float _478 = _475 + _467;
  float _479 = saturate(_476);
  float _480 = saturate(_477);
  float _481 = saturate(_478);
  float _488 = cb2_016x - _479;
  float _489 = cb2_016y - _480;
  float _490 = cb2_016z - _481;
  float _491 = _488 * cb2_016w;
  float _492 = _489 * cb2_016w;
  float _493 = _490 * cb2_016w;
  float _494 = _491 + _479;
  float _495 = _492 + _480;
  float _496 = _493 + _481;
  if (_396 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _499 = cb2_024x * _494;
    float _500 = cb2_024x * _495;
    float _501 = cb2_024x * _496;
    _503 = _499;
    _504 = _500;
    _505 = _501;
  } else {
    _503 = _494;
    _504 = _495;
    _505 = _496;
  }
  float _506 = _503 * 0.9708889722824097f;
  float _507 = mad(0.026962999254465103f, _504, _506);
  float _508 = mad(0.002148000057786703f, _505, _507);
  float _509 = _503 * 0.01088900025933981f;
  float _510 = mad(0.9869629740715027f, _504, _509);
  float _511 = mad(0.002148000057786703f, _505, _510);
  float _512 = mad(0.026962999254465103f, _504, _509);
  float _513 = mad(0.9621480107307434f, _505, _512);
  if (_396) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _518 = cb1_018y * 0.10000000149011612f;
        float _519 = log2(cb1_018z);
        float _520 = _519 + -13.287712097167969f;
        float _521 = _520 * 1.4929734468460083f;
        float _522 = _521 + 18.0f;
        float _523 = exp2(_522);
        float _524 = _523 * 0.18000000715255737f;
        float _525 = abs(_524);
        float _526 = log2(_525);
        float _527 = _526 * 1.5f;
        float _528 = exp2(_527);
        float _529 = _528 * _518;
        float _530 = _529 / cb1_018z;
        float _531 = _530 + -0.07636754959821701f;
        float _532 = _526 * 1.2750000953674316f;
        float _533 = exp2(_532);
        float _534 = _533 * 0.07636754959821701f;
        float _535 = cb1_018y * 0.011232397519052029f;
        float _536 = _535 * _528;
        float _537 = _536 / cb1_018z;
        float _538 = _534 - _537;
        float _539 = _533 + -0.11232396960258484f;
        float _540 = _539 * _518;
        float _541 = _540 / cb1_018z;
        float _542 = _541 * cb1_018z;
        float _543 = abs(_508);
        float _544 = abs(_511);
        float _545 = abs(_513);
        float _546 = log2(_543);
        float _547 = log2(_544);
        float _548 = log2(_545);
        float _549 = _546 * 1.5f;
        float _550 = _547 * 1.5f;
        float _551 = _548 * 1.5f;
        float _552 = exp2(_549);
        float _553 = exp2(_550);
        float _554 = exp2(_551);
        float _555 = _552 * _542;
        float _556 = _553 * _542;
        float _557 = _554 * _542;
        float _558 = _546 * 1.2750000953674316f;
        float _559 = _547 * 1.2750000953674316f;
        float _560 = _548 * 1.2750000953674316f;
        float _561 = exp2(_558);
        float _562 = exp2(_559);
        float _563 = exp2(_560);
        float _564 = _561 * _531;
        float _565 = _562 * _531;
        float _566 = _563 * _531;
        float _567 = _564 + _538;
        float _568 = _565 + _538;
        float _569 = _566 + _538;
        float _570 = _555 / _567;
        float _571 = _556 / _568;
        float _572 = _557 / _569;
        float _573 = _570 * 9.999999747378752e-05f;
        float _574 = _571 * 9.999999747378752e-05f;
        float _575 = _572 * 9.999999747378752e-05f;
        float _576 = 5000.0f / cb1_018y;
        float _577 = _573 * _576;
        float _578 = _574 * _576;
        float _579 = _575 * _576;
        _606 = _577;
        _607 = _578;
        _608 = _579;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_508, _511, _513));
      _606 = tonemapped.x, _607 = tonemapped.y, _608 = tonemapped.z;
    }
      } else {
        float _581 = _508 + 0.020616600289940834f;
        float _582 = _511 + 0.020616600289940834f;
        float _583 = _513 + 0.020616600289940834f;
        float _584 = _581 * _508;
        float _585 = _582 * _511;
        float _586 = _583 * _513;
        float _587 = _584 + -7.456949970219284e-05f;
        float _588 = _585 + -7.456949970219284e-05f;
        float _589 = _586 + -7.456949970219284e-05f;
        float _590 = _508 * 0.9837960004806519f;
        float _591 = _511 * 0.9837960004806519f;
        float _592 = _513 * 0.9837960004806519f;
        float _593 = _590 + 0.4336790144443512f;
        float _594 = _591 + 0.4336790144443512f;
        float _595 = _592 + 0.4336790144443512f;
        float _596 = _593 * _508;
        float _597 = _594 * _511;
        float _598 = _595 * _513;
        float _599 = _596 + 0.24617899954319f;
        float _600 = _597 + 0.24617899954319f;
        float _601 = _598 + 0.24617899954319f;
        float _602 = _587 / _599;
        float _603 = _588 / _600;
        float _604 = _589 / _601;
        _606 = _602;
        _607 = _603;
        _608 = _604;
      }
      float _609 = _606 * 1.6047500371932983f;
      float _610 = mad(-0.5310800075531006f, _607, _609);
      float _611 = mad(-0.07366999983787537f, _608, _610);
      float _612 = _606 * -0.10208000242710114f;
      float _613 = mad(1.1081299781799316f, _607, _612);
      float _614 = mad(-0.006049999967217445f, _608, _613);
      float _615 = _606 * -0.0032599999103695154f;
      float _616 = mad(-0.07275000214576721f, _607, _615);
      float _617 = mad(1.0760200023651123f, _608, _616);
      if (_396) {
        // float _619 = max(_611, 0.0f);
        // float _620 = max(_614, 0.0f);
        // float _621 = max(_617, 0.0f);
        // bool _622 = !(_619 >= 0.0030399328097701073f);
        // if (!_622) {
        //   float _624 = abs(_619);
        //   float _625 = log2(_624);
        //   float _626 = _625 * 0.4166666567325592f;
        //   float _627 = exp2(_626);
        //   float _628 = _627 * 1.0549999475479126f;
        //   float _629 = _628 + -0.054999999701976776f;
        //   _633 = _629;
        // } else {
        //   float _631 = _619 * 12.923210144042969f;
        //   _633 = _631;
        // }
        // bool _634 = !(_620 >= 0.0030399328097701073f);
        // if (!_634) {
        //   float _636 = abs(_620);
        //   float _637 = log2(_636);
        //   float _638 = _637 * 0.4166666567325592f;
        //   float _639 = exp2(_638);
        //   float _640 = _639 * 1.0549999475479126f;
        //   float _641 = _640 + -0.054999999701976776f;
        //   _645 = _641;
        // } else {
        //   float _643 = _620 * 12.923210144042969f;
        //   _645 = _643;
        // }
        // bool _646 = !(_621 >= 0.0030399328097701073f);
        // if (!_646) {
        //   float _648 = abs(_621);
        //   float _649 = log2(_648);
        //   float _650 = _649 * 0.4166666567325592f;
        //   float _651 = exp2(_650);
        //   float _652 = _651 * 1.0549999475479126f;
        //   float _653 = _652 + -0.054999999701976776f;
        //   _726 = _633;
        //   _727 = _645;
        //   _728 = _653;
        // } else {
        //   float _655 = _621 * 12.923210144042969f;
        //   _726 = _633;
        //   _727 = _645;
        //   _728 = _655;
        // }
        _726 = renodx::color::srgb::EncodeSafe(_611);
        _727 = renodx::color::srgb::EncodeSafe(_614);
        _728 = renodx::color::srgb::EncodeSafe(_617);

      } else {
        float _657 = saturate(_611);
        float _658 = saturate(_614);
        float _659 = saturate(_617);
        bool _660 = ((uint)(cb1_018w) == -2);
        if (!_660) {
          bool _662 = !(_657 >= 0.0030399328097701073f);
          if (!_662) {
            float _664 = abs(_657);
            float _665 = log2(_664);
            float _666 = _665 * 0.4166666567325592f;
            float _667 = exp2(_666);
            float _668 = _667 * 1.0549999475479126f;
            float _669 = _668 + -0.054999999701976776f;
            _673 = _669;
          } else {
            float _671 = _657 * 12.923210144042969f;
            _673 = _671;
          }
          bool _674 = !(_658 >= 0.0030399328097701073f);
          if (!_674) {
            float _676 = abs(_658);
            float _677 = log2(_676);
            float _678 = _677 * 0.4166666567325592f;
            float _679 = exp2(_678);
            float _680 = _679 * 1.0549999475479126f;
            float _681 = _680 + -0.054999999701976776f;
            _685 = _681;
          } else {
            float _683 = _658 * 12.923210144042969f;
            _685 = _683;
          }
          bool _686 = !(_659 >= 0.0030399328097701073f);
          if (!_686) {
            float _688 = abs(_659);
            float _689 = log2(_688);
            float _690 = _689 * 0.4166666567325592f;
            float _691 = exp2(_690);
            float _692 = _691 * 1.0549999475479126f;
            float _693 = _692 + -0.054999999701976776f;
            _697 = _673;
            _698 = _685;
            _699 = _693;
          } else {
            float _695 = _659 * 12.923210144042969f;
            _697 = _673;
            _698 = _685;
            _699 = _695;
          }
        } else {
          _697 = _657;
          _698 = _658;
          _699 = _659;
        }
        float _704 = abs(_697);
        float _705 = abs(_698);
        float _706 = abs(_699);
        float _707 = log2(_704);
        float _708 = log2(_705);
        float _709 = log2(_706);
        float _710 = _707 * cb2_000z;
        float _711 = _708 * cb2_000z;
        float _712 = _709 * cb2_000z;
        float _713 = exp2(_710);
        float _714 = exp2(_711);
        float _715 = exp2(_712);
        float _716 = _713 * cb2_000y;
        float _717 = _714 * cb2_000y;
        float _718 = _715 * cb2_000y;
        float _719 = _716 + cb2_000x;
        float _720 = _717 + cb2_000x;
        float _721 = _718 + cb2_000x;
        float _722 = saturate(_719);
        float _723 = saturate(_720);
        float _724 = saturate(_721);
        _726 = _722;
        _727 = _723;
        _728 = _724;
      }
      float _732 = cb2_023x * TEXCOORD0_centroid.x;
      float _733 = cb2_023y * TEXCOORD0_centroid.y;
      float _736 = _732 + cb2_023z;
      float _737 = _733 + cb2_023w;
      float4 _740 = t11.SampleLevel(s0_space2, float2(_736, _737), 0.0f);
      float _742 = _740.x + -0.5f;
      float _743 = _742 * cb2_022x;
      float _744 = _743 + 0.5f;
      float _745 = _744 * 2.0f;
      float _746 = _745 * _726;
      float _747 = _745 * _727;
      float _748 = _745 * _728;
      float _752 = float((uint)(cb2_019z));
      float _753 = float((uint)(cb2_019w));
      float _754 = _752 + SV_Position.x;
      float _755 = _753 + SV_Position.y;
      uint _756 = uint(_754);
      uint _757 = uint(_755);
      uint _760 = cb2_019x + -1u;
      uint _761 = cb2_019y + -1u;
      int _762 = _756 & _760;
      int _763 = _757 & _761;
      float4 _764 = t3.Load(int3(_762, _763, 0));
      float _768 = _764.x * 2.0f;
      float _769 = _764.y * 2.0f;
      float _770 = _764.z * 2.0f;
      float _771 = _768 + -1.0f;
      float _772 = _769 + -1.0f;
      float _773 = _770 + -1.0f;
      float _774 = _771 * cb2_025w;
      float _775 = _772 * cb2_025w;
      float _776 = _773 * cb2_025w;
      float _777 = _774 + _746;
      float _778 = _775 + _747;
      float _779 = _776 + _748;
      float _780 = dot(float3(_777, _778, _779), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _777;
      SV_Target.y = _778;
      SV_Target.z = _779;
      SV_Target.w = _780;
      SV_Target_1.x = _780;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
