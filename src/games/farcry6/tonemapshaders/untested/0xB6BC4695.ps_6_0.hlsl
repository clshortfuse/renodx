#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _22 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _24 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _28 = _24.x * 6.283199787139893f;
  float _29 = cos(_28);
  float _30 = sin(_28);
  float _31 = _29 * _24.z;
  float _32 = _30 * _24.z;
  float _33 = _31 + TEXCOORD0_centroid.x;
  float _34 = _32 + TEXCOORD0_centroid.y;
  float _35 = _33 * 10.0f;
  float _36 = 10.0f - _35;
  float _37 = min(_35, _36);
  float _38 = saturate(_37);
  float _39 = _38 * _31;
  float _40 = _34 * 10.0f;
  float _41 = 10.0f - _40;
  float _42 = min(_40, _41);
  float _43 = saturate(_42);
  float _44 = _43 * _32;
  float _45 = _39 + TEXCOORD0_centroid.x;
  float _46 = _44 + TEXCOORD0_centroid.y;
  float4 _47 = t7.SampleLevel(s2_space2, float2(_45, _46), 0.0f);
  float _49 = _47.w * _39;
  float _50 = _47.w * _44;
  float _51 = 1.0f - _24.y;
  float _52 = saturate(_51);
  float _53 = _49 * _52;
  float _54 = _50 * _52;
  float _58 = cb2_015x * TEXCOORD0_centroid.x;
  float _59 = cb2_015y * TEXCOORD0_centroid.y;
  float _62 = _58 + cb2_015z;
  float _63 = _59 + cb2_015w;
  float4 _64 = t8.SampleLevel(s0_space2, float2(_62, _63), 0.0f);
  float _68 = saturate(_64.x);
  float _69 = saturate(_64.z);
  float _72 = cb2_026x * _69;
  float _73 = _68 * 6.283199787139893f;
  float _74 = cos(_73);
  float _75 = sin(_73);
  float _76 = _72 * _74;
  float _77 = _75 * _72;
  float _78 = 1.0f - _64.y;
  float _79 = saturate(_78);
  float _80 = _76 * _79;
  float _81 = _77 * _79;
  float _82 = _53 + TEXCOORD0_centroid.x;
  float _83 = _82 + _80;
  float _84 = _54 + TEXCOORD0_centroid.y;
  float _85 = _84 + _81;
  float4 _86 = t7.SampleLevel(s2_space2, float2(_83, _85), 0.0f);
  bool _88 = (_86.y > 0.0f);
  float _89 = select(_88, TEXCOORD0_centroid.x, _83);
  float _90 = select(_88, TEXCOORD0_centroid.y, _85);
  float4 _91 = t1.SampleLevel(s4_space2, float2(_89, _90), 0.0f);
  float _95 = max(_91.x, 0.0f);
  float _96 = max(_91.y, 0.0f);
  float _97 = max(_91.z, 0.0f);
  float _98 = min(_95, 65000.0f);
  float _99 = min(_96, 65000.0f);
  float _100 = min(_97, 65000.0f);
  float4 _101 = t3.SampleLevel(s2_space2, float2(_89, _90), 0.0f);
  float _106 = max(_101.x, 0.0f);
  float _107 = max(_101.y, 0.0f);
  float _108 = max(_101.z, 0.0f);
  float _109 = max(_101.w, 0.0f);
  float _110 = min(_106, 5000.0f);
  float _111 = min(_107, 5000.0f);
  float _112 = min(_108, 5000.0f);
  float _113 = min(_109, 5000.0f);
  float _116 = _22.x * cb0_028z;
  float _117 = _116 + cb0_028x;
  float _118 = cb2_027w / _117;
  float _119 = 1.0f - _118;
  float _120 = abs(_119);
  float _122 = cb2_027y * _120;
  float _124 = _122 - cb2_027z;
  float _125 = saturate(_124);
  float _126 = max(_125, _113);
  float _127 = saturate(_126);
  float _131 = cb2_006x * _89;
  float _132 = cb2_006y * _90;
  float _135 = _131 + cb2_006z;
  float _136 = _132 + cb2_006w;
  float _140 = cb2_007x * _89;
  float _141 = cb2_007y * _90;
  float _144 = _140 + cb2_007z;
  float _145 = _141 + cb2_007w;
  float _149 = cb2_008x * _89;
  float _150 = cb2_008y * _90;
  float _153 = _149 + cb2_008z;
  float _154 = _150 + cb2_008w;
  float4 _155 = t1.SampleLevel(s2_space2, float2(_135, _136), 0.0f);
  float _157 = max(_155.x, 0.0f);
  float _158 = min(_157, 65000.0f);
  float4 _159 = t1.SampleLevel(s2_space2, float2(_144, _145), 0.0f);
  float _161 = max(_159.y, 0.0f);
  float _162 = min(_161, 65000.0f);
  float4 _163 = t1.SampleLevel(s2_space2, float2(_153, _154), 0.0f);
  float _165 = max(_163.z, 0.0f);
  float _166 = min(_165, 65000.0f);
  float4 _167 = t3.SampleLevel(s2_space2, float2(_135, _136), 0.0f);
  float _169 = max(_167.x, 0.0f);
  float _170 = min(_169, 5000.0f);
  float4 _171 = t3.SampleLevel(s2_space2, float2(_144, _145), 0.0f);
  float _173 = max(_171.y, 0.0f);
  float _174 = min(_173, 5000.0f);
  float4 _175 = t3.SampleLevel(s2_space2, float2(_153, _154), 0.0f);
  float _177 = max(_175.z, 0.0f);
  float _178 = min(_177, 5000.0f);
  float4 _179 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _185 = cb2_005x * _179.x;
  float _186 = cb2_005x * _179.y;
  float _187 = cb2_005x * _179.z;
  float _188 = _158 - _98;
  float _189 = _162 - _99;
  float _190 = _166 - _100;
  float _191 = _185 * _188;
  float _192 = _186 * _189;
  float _193 = _187 * _190;
  float _194 = _191 + _98;
  float _195 = _192 + _99;
  float _196 = _193 + _100;
  float _197 = _170 - _110;
  float _198 = _174 - _111;
  float _199 = _178 - _112;
  float _200 = _185 * _197;
  float _201 = _186 * _198;
  float _202 = _187 * _199;
  float _203 = _200 + _110;
  float _204 = _201 + _111;
  float _205 = _202 + _112;
  float4 _206 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _210 = _203 - _194;
  float _211 = _204 - _195;
  float _212 = _205 - _196;
  float _213 = _210 * _127;
  float _214 = _211 * _127;
  float _215 = _212 * _127;
  float _216 = _213 + _194;
  float _217 = _214 + _195;
  float _218 = _215 + _196;
  float _219 = dot(float3(_216, _217, _218), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _223 = t0[0].SExposureData_020;
  float _225 = t0[0].SExposureData_004;
  float _227 = cb2_018x * 0.5f;
  float _228 = _227 * cb2_018y;
  float _229 = _225.x - _228;
  float _230 = cb2_018y * cb2_018x;
  float _231 = 1.0f / _230;
  float _232 = _229 * _231;
  float _233 = _219 / _223.x;
  float _234 = _233 * 5464.01611328125f;
  float _235 = _234 + 9.99999993922529e-09f;
  float _236 = log2(_235);
  float _237 = _236 - _229;
  float _238 = _237 * _231;
  float _239 = saturate(_238);
  float2 _240 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _239), 0.0f);
  float _243 = max(_240.y, 1.0000000116860974e-07f);
  float _244 = _240.x / _243;
  float _245 = _244 + _232;
  float _246 = _245 / _231;
  float _247 = _246 - _225.x;
  float _248 = -0.0f - _247;
  float _250 = _248 - cb2_027x;
  float _251 = max(0.0f, _250);
  float _253 = cb2_026z * _251;
  float _254 = _247 - cb2_027x;
  float _255 = max(0.0f, _254);
  float _257 = cb2_026w * _255;
  bool _258 = (_247 < 0.0f);
  float _259 = select(_258, _253, _257);
  float _260 = exp2(_259);
  float _261 = _260 * _216;
  float _262 = _260 * _217;
  float _263 = _260 * _218;
  float _268 = cb2_024y * _206.x;
  float _269 = cb2_024z * _206.y;
  float _270 = cb2_024w * _206.z;
  float _271 = _268 + _261;
  float _272 = _269 + _262;
  float _273 = _270 + _263;
  float _278 = _271 * cb2_025x;
  float _279 = _272 * cb2_025y;
  float _280 = _273 * cb2_025z;
  float _281 = dot(float3(_278, _279, _280), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _282 = t0[0].SExposureData_012;
  float _284 = _281 * 5464.01611328125f;
  float _285 = _284 * _282.x;
  float _286 = _285 + 9.99999993922529e-09f;
  float _287 = log2(_286);
  float _288 = _287 + 16.929765701293945f;
  float _289 = _288 * 0.05734497308731079f;
  float _290 = saturate(_289);
  float _291 = _290 * _290;
  float _292 = _290 * 2.0f;
  float _293 = 3.0f - _292;
  float _294 = _291 * _293;
  float _295 = _279 * 0.8450999855995178f;
  float _296 = _280 * 0.14589999616146088f;
  float _297 = _295 + _296;
  float _298 = _297 * 2.4890189170837402f;
  float _299 = _297 * 0.3754962384700775f;
  float _300 = _297 * 2.811495304107666f;
  float _301 = _297 * 5.519708156585693f;
  float _302 = _281 - _298;
  float _303 = _294 * _302;
  float _304 = _303 + _298;
  float _305 = _294 * 0.5f;
  float _306 = _305 + 0.5f;
  float _307 = _306 * _302;
  float _308 = _307 + _298;
  float _309 = _278 - _299;
  float _310 = _279 - _300;
  float _311 = _280 - _301;
  float _312 = _306 * _309;
  float _313 = _306 * _310;
  float _314 = _306 * _311;
  float _315 = _312 + _299;
  float _316 = _313 + _300;
  float _317 = _314 + _301;
  float _318 = 1.0f / _308;
  float _319 = _304 * _318;
  float _320 = _319 * _315;
  float _321 = _319 * _316;
  float _322 = _319 * _317;
  float _326 = cb2_020x * TEXCOORD0_centroid.x;
  float _327 = cb2_020y * TEXCOORD0_centroid.y;
  float _330 = _326 + cb2_020z;
  float _331 = _327 + cb2_020w;
  float _334 = dot(float2(_330, _331), float2(_330, _331));
  float _335 = 1.0f - _334;
  float _336 = saturate(_335);
  float _337 = log2(_336);
  float _338 = _337 * cb2_021w;
  float _339 = exp2(_338);
  float _343 = _320 - cb2_021x;
  float _344 = _321 - cb2_021y;
  float _345 = _322 - cb2_021z;
  float _346 = _343 * _339;
  float _347 = _344 * _339;
  float _348 = _345 * _339;
  float _349 = _346 + cb2_021x;
  float _350 = _347 + cb2_021y;
  float _351 = _348 + cb2_021z;
  float _352 = t0[0].SExposureData_000;
  float _354 = max(_223.x, 0.0010000000474974513f);
  float _355 = 1.0f / _354;
  float _356 = _355 * _352.x;
  bool _359 = ((uint)(cb2_069y) == 0);
  float _365;
  float _366;
  float _367;
  float _421;
  float _422;
  float _423;
  float _498;
  float _499;
  float _500;
  float _650;
  float _687;
  float _688;
  float _689;
  float _718;
  float _719;
  float _720;
  float _801;
  float _802;
  float _803;
  float _809;
  float _810;
  float _811;
  float _825;
  float _826;
  float _827;
  float _852;
  float _864;
  float _892;
  float _904;
  float _916;
  float _917;
  float _918;
  float _945;
  float _946;
  float _947;
  if (!_359) {
    float _361 = _356 * _349;
    float _362 = _356 * _350;
    float _363 = _356 * _351;
    _365 = _361;
    _366 = _362;
    _367 = _363;
  } else {
    _365 = _349;
    _366 = _350;
    _367 = _351;
  }
  float _368 = _365 * 0.6130970120429993f;
  float _369 = mad(0.33952298760414124f, _366, _368);
  float _370 = mad(0.04737899824976921f, _367, _369);
  float _371 = _365 * 0.07019399851560593f;
  float _372 = mad(0.9163540005683899f, _366, _371);
  float _373 = mad(0.013451999984681606f, _367, _372);
  float _374 = _365 * 0.02061600051820278f;
  float _375 = mad(0.10956999659538269f, _366, _374);
  float _376 = mad(0.8698149919509888f, _367, _375);
  float _377 = log2(_370);
  float _378 = log2(_373);
  float _379 = log2(_376);
  float _380 = _377 * 0.04211956635117531f;
  float _381 = _378 * 0.04211956635117531f;
  float _382 = _379 * 0.04211956635117531f;
  float _383 = _380 + 0.6252607107162476f;
  float _384 = _381 + 0.6252607107162476f;
  float _385 = _382 + 0.6252607107162476f;
  float4 _386 = t5.SampleLevel(s2_space2, float3(_383, _384, _385), 0.0f);
  bool _392 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_392 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _396 = cb2_017x * _386.x;
    float _397 = cb2_017x * _386.y;
    float _398 = cb2_017x * _386.z;
    float _400 = _396 + cb2_017y;
    float _401 = _397 + cb2_017y;
    float _402 = _398 + cb2_017y;
    float _403 = exp2(_400);
    float _404 = exp2(_401);
    float _405 = exp2(_402);
    float _406 = _403 + 1.0f;
    float _407 = _404 + 1.0f;
    float _408 = _405 + 1.0f;
    float _409 = 1.0f / _406;
    float _410 = 1.0f / _407;
    float _411 = 1.0f / _408;
    float _413 = cb2_017z * _409;
    float _414 = cb2_017z * _410;
    float _415 = cb2_017z * _411;
    float _417 = _413 + cb2_017w;
    float _418 = _414 + cb2_017w;
    float _419 = _415 + cb2_017w;
    _421 = _417;
    _422 = _418;
    _423 = _419;
  } else {
    _421 = _386.x;
    _422 = _386.y;
    _423 = _386.z;
  }
  float _424 = _421 * 23.0f;
  float _425 = _424 + -14.473931312561035f;
  float _426 = exp2(_425);
  float _427 = _422 * 23.0f;
  float _428 = _427 + -14.473931312561035f;
  float _429 = exp2(_428);
  float _430 = _423 * 23.0f;
  float _431 = _430 + -14.473931312561035f;
  float _432 = exp2(_431);
  float _433 = dot(float3(_426, _429, _432), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _438 = dot(float3(_426, _429, _432), float3(_426, _429, _432));
  float _439 = rsqrt(_438);
  float _440 = _439 * _426;
  float _441 = _439 * _429;
  float _442 = _439 * _432;
  float _443 = cb2_001x - _440;
  float _444 = cb2_001y - _441;
  float _445 = cb2_001z - _442;
  float _446 = dot(float3(_443, _444, _445), float3(_443, _444, _445));
  float _449 = cb2_002z * _446;
  float _451 = _449 + cb2_002w;
  float _452 = saturate(_451);
  float _454 = cb2_002x * _452;
  float _455 = _433 - _426;
  float _456 = _433 - _429;
  float _457 = _433 - _432;
  float _458 = _454 * _455;
  float _459 = _454 * _456;
  float _460 = _454 * _457;
  float _461 = _458 + _426;
  float _462 = _459 + _429;
  float _463 = _460 + _432;
  float _465 = cb2_002y * _452;
  float _466 = 0.10000000149011612f - _461;
  float _467 = 0.10000000149011612f - _462;
  float _468 = 0.10000000149011612f - _463;
  float _469 = _466 * _465;
  float _470 = _467 * _465;
  float _471 = _468 * _465;
  float _472 = _469 + _461;
  float _473 = _470 + _462;
  float _474 = _471 + _463;
  float _475 = saturate(_472);
  float _476 = saturate(_473);
  float _477 = saturate(_474);
  float _483 = cb2_016x - _475;
  float _484 = cb2_016y - _476;
  float _485 = cb2_016z - _477;
  float _486 = _483 * cb2_016w;
  float _487 = _484 * cb2_016w;
  float _488 = _485 * cb2_016w;
  float _489 = _486 + _475;
  float _490 = _487 + _476;
  float _491 = _488 + _477;
  if (_392 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _494 = cb2_024x * _489;
    float _495 = cb2_024x * _490;
    float _496 = cb2_024x * _491;
    _498 = _494;
    _499 = _495;
    _500 = _496;
  } else {
    _498 = _489;
    _499 = _490;
    _500 = _491;
  }
  float _503 = _498 * 0.9708889722824097f;
  float _504 = mad(0.026962999254465103f, _499, _503);
  float _505 = mad(0.002148000057786703f, _500, _504);
  float _506 = _498 * 0.01088900025933981f;
  float _507 = mad(0.9869629740715027f, _499, _506);
  float _508 = mad(0.002148000057786703f, _500, _507);
  float _509 = mad(0.026962999254465103f, _499, _506);
  float _510 = mad(0.9621480107307434f, _500, _509);
  float _511 = max(_505, 0.0f);
  float _512 = max(_508, 0.0f);
  float _513 = max(_510, 0.0f);
  float _514 = min(_511, cb2_095y);
  float _515 = min(_512, cb2_095y);
  float _516 = min(_513, cb2_095y);
  bool _519 = ((uint)(cb2_095x) == 0);
  bool _522 = ((uint)(cb2_094w) == 0);
  bool _524 = ((uint)(cb2_094z) == 0);
  bool _526 = ((uint)(cb2_094y) != 0);
  bool _528 = ((uint)(cb2_094x) == 0);
  bool _530 = ((uint)(cb2_069z) != 0);
  float _577 = asfloat((uint)(cb2_075y));
  float _578 = asfloat((uint)(cb2_075z));
  float _579 = asfloat((uint)(cb2_075w));
  float _580 = asfloat((uint)(cb2_074z));
  float _581 = asfloat((uint)(cb2_074w));
  float _582 = asfloat((uint)(cb2_075x));
  float _583 = asfloat((uint)(cb2_073w));
  float _584 = asfloat((uint)(cb2_074x));
  float _585 = asfloat((uint)(cb2_074y));
  float _586 = asfloat((uint)(cb2_077x));
  float _587 = asfloat((uint)(cb2_077y));
  float _588 = asfloat((uint)(cb2_079x));
  float _589 = asfloat((uint)(cb2_079y));
  float _590 = asfloat((uint)(cb2_079z));
  float _591 = asfloat((uint)(cb2_078y));
  float _592 = asfloat((uint)(cb2_078z));
  float _593 = asfloat((uint)(cb2_078w));
  float _594 = asfloat((uint)(cb2_077z));
  float _595 = asfloat((uint)(cb2_077w));
  float _596 = asfloat((uint)(cb2_078x));
  float _597 = asfloat((uint)(cb2_072y));
  float _598 = asfloat((uint)(cb2_072z));
  float _599 = asfloat((uint)(cb2_072w));
  float _600 = asfloat((uint)(cb2_071x));
  float _601 = asfloat((uint)(cb2_071y));
  float _602 = asfloat((uint)(cb2_076x));
  float _603 = asfloat((uint)(cb2_070w));
  float _604 = asfloat((uint)(cb2_070x));
  float _605 = asfloat((uint)(cb2_070y));
  float _606 = asfloat((uint)(cb2_070z));
  float _607 = asfloat((uint)(cb2_073x));
  float _608 = asfloat((uint)(cb2_073y));
  float _609 = asfloat((uint)(cb2_073z));
  float _610 = asfloat((uint)(cb2_071z));
  float _611 = asfloat((uint)(cb2_071w));
  float _612 = asfloat((uint)(cb2_072x));
  float _613 = max(_515, _516);
  float _614 = max(_514, _613);
  float _615 = 1.0f / _614;
  float _616 = _615 * _514;
  float _617 = _615 * _515;
  float _618 = _615 * _516;
  float _619 = abs(_616);
  float _620 = log2(_619);
  float _621 = _620 * _604;
  float _622 = exp2(_621);
  float _623 = abs(_617);
  float _624 = log2(_623);
  float _625 = _624 * _605;
  float _626 = exp2(_625);
  float _627 = abs(_618);
  float _628 = log2(_627);
  float _629 = _628 * _606;
  float _630 = exp2(_629);
  if (_526) {
    float _633 = asfloat((uint)(cb2_076w));
    float _635 = asfloat((uint)(cb2_076z));
    float _637 = asfloat((uint)(cb2_076y));
    float _638 = _635 * _515;
    float _639 = _637 * _514;
    float _640 = _633 * _516;
    float _641 = _639 + _640;
    float _642 = _641 + _638;
    _650 = _642;
  } else {
    float _644 = _611 * _515;
    float _645 = _610 * _514;
    float _646 = _612 * _516;
    float _647 = _644 + _645;
    float _648 = _647 + _646;
    _650 = _648;
  }
  float _651 = abs(_650);
  float _652 = log2(_651);
  float _653 = _652 * _603;
  float _654 = exp2(_653);
  float _655 = log2(_654);
  float _656 = _655 * _602;
  float _657 = exp2(_656);
  float _658 = select(_530, _657, _654);
  float _659 = _658 * _600;
  float _660 = _659 + _601;
  float _661 = 1.0f / _660;
  float _662 = _661 * _654;
  if (_526) {
    if (!_528) {
      float _665 = _622 * _594;
      float _666 = _626 * _595;
      float _667 = _630 * _596;
      float _668 = _666 + _665;
      float _669 = _668 + _667;
      float _670 = _626 * _592;
      float _671 = _622 * _591;
      float _672 = _630 * _593;
      float _673 = _670 + _671;
      float _674 = _673 + _672;
      float _675 = _630 * _590;
      float _676 = _626 * _589;
      float _677 = _622 * _588;
      float _678 = _676 + _677;
      float _679 = _678 + _675;
      float _680 = max(_674, _679);
      float _681 = max(_669, _680);
      float _682 = 1.0f / _681;
      float _683 = _682 * _669;
      float _684 = _682 * _674;
      float _685 = _682 * _679;
      _687 = _683;
      _688 = _684;
      _689 = _685;
    } else {
      _687 = _622;
      _688 = _626;
      _689 = _630;
    }
    float _690 = _687 * _587;
    float _691 = exp2(_690);
    float _692 = _691 * _586;
    float _693 = saturate(_692);
    float _694 = _687 * _586;
    float _695 = _687 - _694;
    float _696 = saturate(_695);
    float _697 = max(_586, _696);
    float _698 = min(_697, _693);
    float _699 = _688 * _587;
    float _700 = exp2(_699);
    float _701 = _700 * _586;
    float _702 = saturate(_701);
    float _703 = _688 * _586;
    float _704 = _688 - _703;
    float _705 = saturate(_704);
    float _706 = max(_586, _705);
    float _707 = min(_706, _702);
    float _708 = _689 * _587;
    float _709 = exp2(_708);
    float _710 = _709 * _586;
    float _711 = saturate(_710);
    float _712 = _689 * _586;
    float _713 = _689 - _712;
    float _714 = saturate(_713);
    float _715 = max(_586, _714);
    float _716 = min(_715, _711);
    _718 = _698;
    _719 = _707;
    _720 = _716;
  } else {
    _718 = _622;
    _719 = _626;
    _720 = _630;
  }
  float _721 = _718 * _610;
  float _722 = _719 * _611;
  float _723 = _722 + _721;
  float _724 = _720 * _612;
  float _725 = _723 + _724;
  float _726 = 1.0f / _725;
  float _727 = _726 * _662;
  float _728 = saturate(_727);
  float _729 = _728 * _718;
  float _730 = saturate(_729);
  float _731 = _728 * _719;
  float _732 = saturate(_731);
  float _733 = _728 * _720;
  float _734 = saturate(_733);
  float _735 = _730 * _597;
  float _736 = _597 - _735;
  float _737 = _732 * _598;
  float _738 = _598 - _737;
  float _739 = _734 * _599;
  float _740 = _599 - _739;
  float _741 = _734 * _612;
  float _742 = _730 * _610;
  float _743 = _732 * _611;
  float _744 = _662 - _742;
  float _745 = _744 - _743;
  float _746 = _745 - _741;
  float _747 = saturate(_746);
  float _748 = _738 * _611;
  float _749 = _736 * _610;
  float _750 = _740 * _612;
  float _751 = _748 + _749;
  float _752 = _751 + _750;
  float _753 = 1.0f / _752;
  float _754 = _753 * _747;
  float _755 = _754 * _736;
  float _756 = _755 + _730;
  float _757 = saturate(_756);
  float _758 = _754 * _738;
  float _759 = _758 + _732;
  float _760 = saturate(_759);
  float _761 = _754 * _740;
  float _762 = _761 + _734;
  float _763 = saturate(_762);
  float _764 = _763 * _612;
  float _765 = _757 * _610;
  float _766 = _760 * _611;
  float _767 = _662 - _765;
  float _768 = _767 - _766;
  float _769 = _768 - _764;
  float _770 = saturate(_769);
  float _771 = _770 * _607;
  float _772 = _771 + _757;
  float _773 = saturate(_772);
  float _774 = _770 * _608;
  float _775 = _774 + _760;
  float _776 = saturate(_775);
  float _777 = _770 * _609;
  float _778 = _777 + _763;
  float _779 = saturate(_778);
  if (!_524) {
    float _781 = _773 * _583;
    float _782 = _776 * _584;
    float _783 = _779 * _585;
    float _784 = _782 + _781;
    float _785 = _784 + _783;
    float _786 = _776 * _581;
    float _787 = _773 * _580;
    float _788 = _779 * _582;
    float _789 = _786 + _787;
    float _790 = _789 + _788;
    float _791 = _779 * _579;
    float _792 = _776 * _578;
    float _793 = _773 * _577;
    float _794 = _792 + _793;
    float _795 = _794 + _791;
    if (!_522) {
      float _797 = saturate(_785);
      float _798 = saturate(_790);
      float _799 = saturate(_795);
      _801 = _799;
      _802 = _798;
      _803 = _797;
    } else {
      _801 = _795;
      _802 = _790;
      _803 = _785;
    }
  } else {
    _801 = _779;
    _802 = _776;
    _803 = _773;
  }
  if (!_519) {
    float _805 = _803 * _583;
    float _806 = _802 * _583;
    float _807 = _801 * _583;
    _809 = _807;
    _810 = _806;
    _811 = _805;
  } else {
    _809 = _801;
    _810 = _802;
    _811 = _803;
  }
  if (_392) {
    float _815 = cb1_018z * 9.999999747378752e-05f;
    float _816 = _815 * _811;
    float _817 = _815 * _810;
    float _818 = _815 * _809;
    float _820 = 5000.0f / cb1_018y;
    float _821 = _816 * _820;
    float _822 = _817 * _820;
    float _823 = _818 * _820;
    _825 = _821;
    _826 = _822;
    _827 = _823;
  } else {
    _825 = _811;
    _826 = _810;
    _827 = _809;
  }
  float _828 = _825 * 1.6047500371932983f;
  float _829 = mad(-0.5310800075531006f, _826, _828);
  float _830 = mad(-0.07366999983787537f, _827, _829);
  float _831 = _825 * -0.10208000242710114f;
  float _832 = mad(1.1081299781799316f, _826, _831);
  float _833 = mad(-0.006049999967217445f, _827, _832);
  float _834 = _825 * -0.0032599999103695154f;
  float _835 = mad(-0.07275000214576721f, _826, _834);
  float _836 = mad(1.0760200023651123f, _827, _835);
  if (_392) {
    // float _838 = max(_830, 0.0f);
    // float _839 = max(_833, 0.0f);
    // float _840 = max(_836, 0.0f);
    // bool _841 = !(_838 >= 0.0030399328097701073f);
    // if (!_841) {
    //   float _843 = abs(_838);
    //   float _844 = log2(_843);
    //   float _845 = _844 * 0.4166666567325592f;
    //   float _846 = exp2(_845);
    //   float _847 = _846 * 1.0549999475479126f;
    //   float _848 = _847 + -0.054999999701976776f;
    //   _852 = _848;
    // } else {
    //   float _850 = _838 * 12.923210144042969f;
    //   _852 = _850;
    // }
    // bool _853 = !(_839 >= 0.0030399328097701073f);
    // if (!_853) {
    //   float _855 = abs(_839);
    //   float _856 = log2(_855);
    //   float _857 = _856 * 0.4166666567325592f;
    //   float _858 = exp2(_857);
    //   float _859 = _858 * 1.0549999475479126f;
    //   float _860 = _859 + -0.054999999701976776f;
    //   _864 = _860;
    // } else {
    //   float _862 = _839 * 12.923210144042969f;
    //   _864 = _862;
    // }
    // bool _865 = !(_840 >= 0.0030399328097701073f);
    // if (!_865) {
    //   float _867 = abs(_840);
    //   float _868 = log2(_867);
    //   float _869 = _868 * 0.4166666567325592f;
    //   float _870 = exp2(_869);
    //   float _871 = _870 * 1.0549999475479126f;
    //   float _872 = _871 + -0.054999999701976776f;
    //   _945 = _852;
    //   _946 = _864;
    //   _947 = _872;
    // } else {
    //   float _874 = _840 * 12.923210144042969f;
    //   _945 = _852;
    //   _946 = _864;
    //   _947 = _874;
    // }
    _945 = renodx::color::srgb::EncodeSafe(_830);
    _946 = renodx::color::srgb::EncodeSafe(_833);
    _947 = renodx::color::srgb::EncodeSafe(_836);

  } else {
    float _876 = saturate(_830);
    float _877 = saturate(_833);
    float _878 = saturate(_836);
    bool _879 = ((uint)(cb1_018w) == -2);
    if (!_879) {
      bool _881 = !(_876 >= 0.0030399328097701073f);
      if (!_881) {
        float _883 = abs(_876);
        float _884 = log2(_883);
        float _885 = _884 * 0.4166666567325592f;
        float _886 = exp2(_885);
        float _887 = _886 * 1.0549999475479126f;
        float _888 = _887 + -0.054999999701976776f;
        _892 = _888;
      } else {
        float _890 = _876 * 12.923210144042969f;
        _892 = _890;
      }
      bool _893 = !(_877 >= 0.0030399328097701073f);
      if (!_893) {
        float _895 = abs(_877);
        float _896 = log2(_895);
        float _897 = _896 * 0.4166666567325592f;
        float _898 = exp2(_897);
        float _899 = _898 * 1.0549999475479126f;
        float _900 = _899 + -0.054999999701976776f;
        _904 = _900;
      } else {
        float _902 = _877 * 12.923210144042969f;
        _904 = _902;
      }
      bool _905 = !(_878 >= 0.0030399328097701073f);
      if (!_905) {
        float _907 = abs(_878);
        float _908 = log2(_907);
        float _909 = _908 * 0.4166666567325592f;
        float _910 = exp2(_909);
        float _911 = _910 * 1.0549999475479126f;
        float _912 = _911 + -0.054999999701976776f;
        _916 = _892;
        _917 = _904;
        _918 = _912;
      } else {
        float _914 = _878 * 12.923210144042969f;
        _916 = _892;
        _917 = _904;
        _918 = _914;
      }
    } else {
      _916 = _876;
      _917 = _877;
      _918 = _878;
    }
    float _923 = abs(_916);
    float _924 = abs(_917);
    float _925 = abs(_918);
    float _926 = log2(_923);
    float _927 = log2(_924);
    float _928 = log2(_925);
    float _929 = _926 * cb2_000z;
    float _930 = _927 * cb2_000z;
    float _931 = _928 * cb2_000z;
    float _932 = exp2(_929);
    float _933 = exp2(_930);
    float _934 = exp2(_931);
    float _935 = _932 * cb2_000y;
    float _936 = _933 * cb2_000y;
    float _937 = _934 * cb2_000y;
    float _938 = _935 + cb2_000x;
    float _939 = _936 + cb2_000x;
    float _940 = _937 + cb2_000x;
    float _941 = saturate(_938);
    float _942 = saturate(_939);
    float _943 = saturate(_940);
    _945 = _941;
    _946 = _942;
    _947 = _943;
  }
  float _948 = dot(float3(_945, _946, _947), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _945;
  SV_Target.y = _946;
  SV_Target.z = _947;
  SV_Target.w = _948;
  SV_Target_1.x = _948;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
