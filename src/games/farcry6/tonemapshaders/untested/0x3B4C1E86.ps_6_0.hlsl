#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _23 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _25 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = max(_25.x, 0.0f);
  float _30 = max(_25.y, 0.0f);
  float _31 = max(_25.z, 0.0f);
  float _32 = min(_29, 65000.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float4 _35 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _40 = max(_35.x, 0.0f);
  float _41 = max(_35.y, 0.0f);
  float _42 = max(_35.z, 0.0f);
  float _43 = max(_35.w, 0.0f);
  float _44 = min(_40, 5000.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _50 = _23.x * cb0_028z;
  float _51 = _50 + cb0_028x;
  float _52 = cb2_027w / _51;
  float _53 = 1.0f - _52;
  float _54 = abs(_53);
  float _56 = cb2_027y * _54;
  float _58 = _56 - cb2_027z;
  float _59 = saturate(_58);
  float _60 = max(_59, _47);
  float _61 = saturate(_60);
  float4 _62 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _66 = _44 - _32;
  float _67 = _45 - _33;
  float _68 = _46 - _34;
  float _69 = _61 * _66;
  float _70 = _61 * _67;
  float _71 = _61 * _68;
  float _72 = _69 + _32;
  float _73 = _70 + _33;
  float _74 = _71 + _34;
  float _75 = dot(float3(_72, _73, _74), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _79 = t0[0].SExposureData_020;
  float _81 = t0[0].SExposureData_004;
  float _83 = cb2_018x * 0.5f;
  float _84 = _83 * cb2_018y;
  float _85 = _81.x - _84;
  float _86 = cb2_018y * cb2_018x;
  float _87 = 1.0f / _86;
  float _88 = _85 * _87;
  float _89 = _75 / _79.x;
  float _90 = _89 * 5464.01611328125f;
  float _91 = _90 + 9.99999993922529e-09f;
  float _92 = log2(_91);
  float _93 = _92 - _85;
  float _94 = _93 * _87;
  float _95 = saturate(_94);
  float2 _96 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _95), 0.0f);
  float _99 = max(_96.y, 1.0000000116860974e-07f);
  float _100 = _96.x / _99;
  float _101 = _100 + _88;
  float _102 = _101 / _87;
  float _103 = _102 - _81.x;
  float _104 = -0.0f - _103;
  float _106 = _104 - cb2_027x;
  float _107 = max(0.0f, _106);
  float _110 = cb2_026z * _107;
  float _111 = _103 - cb2_027x;
  float _112 = max(0.0f, _111);
  float _114 = cb2_026w * _112;
  bool _115 = (_103 < 0.0f);
  float _116 = select(_115, _110, _114);
  float _117 = exp2(_116);
  float _118 = _117 * _72;
  float _119 = _117 * _73;
  float _120 = _117 * _74;
  float _125 = cb2_024y * _62.x;
  float _126 = cb2_024z * _62.y;
  float _127 = cb2_024w * _62.z;
  float _128 = _125 + _118;
  float _129 = _126 + _119;
  float _130 = _127 + _120;
  float _135 = _128 * cb2_025x;
  float _136 = _129 * cb2_025y;
  float _137 = _130 * cb2_025z;
  float _138 = dot(float3(_135, _136, _137), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _139 = t0[0].SExposureData_012;
  float _141 = _138 * 5464.01611328125f;
  float _142 = _141 * _139.x;
  float _143 = _142 + 9.99999993922529e-09f;
  float _144 = log2(_143);
  float _145 = _144 + 16.929765701293945f;
  float _146 = _145 * 0.05734497308731079f;
  float _147 = saturate(_146);
  float _148 = _147 * _147;
  float _149 = _147 * 2.0f;
  float _150 = 3.0f - _149;
  float _151 = _148 * _150;
  float _152 = _136 * 0.8450999855995178f;
  float _153 = _137 * 0.14589999616146088f;
  float _154 = _152 + _153;
  float _155 = _154 * 2.4890189170837402f;
  float _156 = _154 * 0.3754962384700775f;
  float _157 = _154 * 2.811495304107666f;
  float _158 = _154 * 5.519708156585693f;
  float _159 = _138 - _155;
  float _160 = _151 * _159;
  float _161 = _160 + _155;
  float _162 = _151 * 0.5f;
  float _163 = _162 + 0.5f;
  float _164 = _163 * _159;
  float _165 = _164 + _155;
  float _166 = _135 - _156;
  float _167 = _136 - _157;
  float _168 = _137 - _158;
  float _169 = _163 * _166;
  float _170 = _163 * _167;
  float _171 = _163 * _168;
  float _172 = _169 + _156;
  float _173 = _170 + _157;
  float _174 = _171 + _158;
  float _175 = 1.0f / _165;
  float _176 = _161 * _175;
  float _177 = _176 * _172;
  float _178 = _176 * _173;
  float _179 = _176 * _174;
  float _183 = cb2_020x * TEXCOORD0_centroid.x;
  float _184 = cb2_020y * TEXCOORD0_centroid.y;
  float _187 = _183 + cb2_020z;
  float _188 = _184 + cb2_020w;
  float _191 = dot(float2(_187, _188), float2(_187, _188));
  float _192 = 1.0f - _191;
  float _193 = saturate(_192);
  float _194 = log2(_193);
  float _195 = _194 * cb2_021w;
  float _196 = exp2(_195);
  float _200 = _177 - cb2_021x;
  float _201 = _178 - cb2_021y;
  float _202 = _179 - cb2_021z;
  float _203 = _200 * _196;
  float _204 = _201 * _196;
  float _205 = _202 * _196;
  float _206 = _203 + cb2_021x;
  float _207 = _204 + cb2_021y;
  float _208 = _205 + cb2_021z;
  float _209 = t0[0].SExposureData_000;
  float _211 = max(_79.x, 0.0010000000474974513f);
  float _212 = 1.0f / _211;
  float _213 = _212 * _209.x;
  bool _216 = ((uint)(cb2_069y) == 0);
  float _222;
  float _223;
  float _224;
  float _278;
  float _279;
  float _280;
  float _311;
  float _312;
  float _313;
  float _463;
  float _500;
  float _501;
  float _502;
  float _531;
  float _532;
  float _533;
  float _614;
  float _615;
  float _616;
  float _622;
  float _623;
  float _624;
  float _638;
  float _639;
  float _640;
  float _665;
  float _677;
  float _705;
  float _717;
  float _729;
  float _730;
  float _731;
  float _758;
  float _759;
  float _760;
  if (!_216) {
    float _218 = _213 * _206;
    float _219 = _213 * _207;
    float _220 = _213 * _208;
    _222 = _218;
    _223 = _219;
    _224 = _220;
  } else {
    _222 = _206;
    _223 = _207;
    _224 = _208;
  }
  float _225 = _222 * 0.6130970120429993f;
  float _226 = mad(0.33952298760414124f, _223, _225);
  float _227 = mad(0.04737899824976921f, _224, _226);
  float _228 = _222 * 0.07019399851560593f;
  float _229 = mad(0.9163540005683899f, _223, _228);
  float _230 = mad(0.013451999984681606f, _224, _229);
  float _231 = _222 * 0.02061600051820278f;
  float _232 = mad(0.10956999659538269f, _223, _231);
  float _233 = mad(0.8698149919509888f, _224, _232);
  float _234 = log2(_227);
  float _235 = log2(_230);
  float _236 = log2(_233);
  float _237 = _234 * 0.04211956635117531f;
  float _238 = _235 * 0.04211956635117531f;
  float _239 = _236 * 0.04211956635117531f;
  float _240 = _237 + 0.6252607107162476f;
  float _241 = _238 + 0.6252607107162476f;
  float _242 = _239 + 0.6252607107162476f;
  float4 _243 = t6.SampleLevel(s2_space2, float3(_240, _241, _242), 0.0f);
  bool _249 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_249 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _253 = cb2_017x * _243.x;
    float _254 = cb2_017x * _243.y;
    float _255 = cb2_017x * _243.z;
    float _257 = _253 + cb2_017y;
    float _258 = _254 + cb2_017y;
    float _259 = _255 + cb2_017y;
    float _260 = exp2(_257);
    float _261 = exp2(_258);
    float _262 = exp2(_259);
    float _263 = _260 + 1.0f;
    float _264 = _261 + 1.0f;
    float _265 = _262 + 1.0f;
    float _266 = 1.0f / _263;
    float _267 = 1.0f / _264;
    float _268 = 1.0f / _265;
    float _270 = cb2_017z * _266;
    float _271 = cb2_017z * _267;
    float _272 = cb2_017z * _268;
    float _274 = _270 + cb2_017w;
    float _275 = _271 + cb2_017w;
    float _276 = _272 + cb2_017w;
    _278 = _274;
    _279 = _275;
    _280 = _276;
  } else {
    _278 = _243.x;
    _279 = _243.y;
    _280 = _243.z;
  }
  float _281 = _278 * 23.0f;
  float _282 = _281 + -14.473931312561035f;
  float _283 = exp2(_282);
  float _284 = _279 * 23.0f;
  float _285 = _284 + -14.473931312561035f;
  float _286 = exp2(_285);
  float _287 = _280 * 23.0f;
  float _288 = _287 + -14.473931312561035f;
  float _289 = exp2(_288);
  float _296 = cb2_016x - _283;
  float _297 = cb2_016y - _286;
  float _298 = cb2_016z - _289;
  float _299 = _296 * cb2_016w;
  float _300 = _297 * cb2_016w;
  float _301 = _298 * cb2_016w;
  float _302 = _299 + _283;
  float _303 = _300 + _286;
  float _304 = _301 + _289;
  if (_249 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _307 = cb2_024x * _302;
    float _308 = cb2_024x * _303;
    float _309 = cb2_024x * _304;
    _311 = _307;
    _312 = _308;
    _313 = _309;
  } else {
    _311 = _302;
    _312 = _303;
    _313 = _304;
  }
  float _316 = _311 * 0.9708889722824097f;
  float _317 = mad(0.026962999254465103f, _312, _316);
  float _318 = mad(0.002148000057786703f, _313, _317);
  float _319 = _311 * 0.01088900025933981f;
  float _320 = mad(0.9869629740715027f, _312, _319);
  float _321 = mad(0.002148000057786703f, _313, _320);
  float _322 = mad(0.026962999254465103f, _312, _319);
  float _323 = mad(0.9621480107307434f, _313, _322);
  float _324 = max(_318, 0.0f);
  float _325 = max(_321, 0.0f);
  float _326 = max(_323, 0.0f);
  float _327 = min(_324, cb2_095y);
  float _328 = min(_325, cb2_095y);
  float _329 = min(_326, cb2_095y);
  bool _332 = ((uint)(cb2_095x) == 0);
  bool _335 = ((uint)(cb2_094w) == 0);
  bool _337 = ((uint)(cb2_094z) == 0);
  bool _339 = ((uint)(cb2_094y) != 0);
  bool _341 = ((uint)(cb2_094x) == 0);
  bool _343 = ((uint)(cb2_069z) != 0);
  float _390 = asfloat((uint)(cb2_075y));
  float _391 = asfloat((uint)(cb2_075z));
  float _392 = asfloat((uint)(cb2_075w));
  float _393 = asfloat((uint)(cb2_074z));
  float _394 = asfloat((uint)(cb2_074w));
  float _395 = asfloat((uint)(cb2_075x));
  float _396 = asfloat((uint)(cb2_073w));
  float _397 = asfloat((uint)(cb2_074x));
  float _398 = asfloat((uint)(cb2_074y));
  float _399 = asfloat((uint)(cb2_077x));
  float _400 = asfloat((uint)(cb2_077y));
  float _401 = asfloat((uint)(cb2_079x));
  float _402 = asfloat((uint)(cb2_079y));
  float _403 = asfloat((uint)(cb2_079z));
  float _404 = asfloat((uint)(cb2_078y));
  float _405 = asfloat((uint)(cb2_078z));
  float _406 = asfloat((uint)(cb2_078w));
  float _407 = asfloat((uint)(cb2_077z));
  float _408 = asfloat((uint)(cb2_077w));
  float _409 = asfloat((uint)(cb2_078x));
  float _410 = asfloat((uint)(cb2_072y));
  float _411 = asfloat((uint)(cb2_072z));
  float _412 = asfloat((uint)(cb2_072w));
  float _413 = asfloat((uint)(cb2_071x));
  float _414 = asfloat((uint)(cb2_071y));
  float _415 = asfloat((uint)(cb2_076x));
  float _416 = asfloat((uint)(cb2_070w));
  float _417 = asfloat((uint)(cb2_070x));
  float _418 = asfloat((uint)(cb2_070y));
  float _419 = asfloat((uint)(cb2_070z));
  float _420 = asfloat((uint)(cb2_073x));
  float _421 = asfloat((uint)(cb2_073y));
  float _422 = asfloat((uint)(cb2_073z));
  float _423 = asfloat((uint)(cb2_071z));
  float _424 = asfloat((uint)(cb2_071w));
  float _425 = asfloat((uint)(cb2_072x));
  float _426 = max(_328, _329);
  float _427 = max(_327, _426);
  float _428 = 1.0f / _427;
  float _429 = _428 * _327;
  float _430 = _428 * _328;
  float _431 = _428 * _329;
  float _432 = abs(_429);
  float _433 = log2(_432);
  float _434 = _433 * _417;
  float _435 = exp2(_434);
  float _436 = abs(_430);
  float _437 = log2(_436);
  float _438 = _437 * _418;
  float _439 = exp2(_438);
  float _440 = abs(_431);
  float _441 = log2(_440);
  float _442 = _441 * _419;
  float _443 = exp2(_442);
  if (_339) {
    float _446 = asfloat((uint)(cb2_076w));
    float _448 = asfloat((uint)(cb2_076z));
    float _450 = asfloat((uint)(cb2_076y));
    float _451 = _448 * _328;
    float _452 = _450 * _327;
    float _453 = _446 * _329;
    float _454 = _452 + _453;
    float _455 = _454 + _451;
    _463 = _455;
  } else {
    float _457 = _424 * _328;
    float _458 = _423 * _327;
    float _459 = _425 * _329;
    float _460 = _457 + _458;
    float _461 = _460 + _459;
    _463 = _461;
  }
  float _464 = abs(_463);
  float _465 = log2(_464);
  float _466 = _465 * _416;
  float _467 = exp2(_466);
  float _468 = log2(_467);
  float _469 = _468 * _415;
  float _470 = exp2(_469);
  float _471 = select(_343, _470, _467);
  float _472 = _471 * _413;
  float _473 = _472 + _414;
  float _474 = 1.0f / _473;
  float _475 = _474 * _467;
  if (_339) {
    if (!_341) {
      float _478 = _435 * _407;
      float _479 = _439 * _408;
      float _480 = _443 * _409;
      float _481 = _479 + _478;
      float _482 = _481 + _480;
      float _483 = _439 * _405;
      float _484 = _435 * _404;
      float _485 = _443 * _406;
      float _486 = _483 + _484;
      float _487 = _486 + _485;
      float _488 = _443 * _403;
      float _489 = _439 * _402;
      float _490 = _435 * _401;
      float _491 = _489 + _490;
      float _492 = _491 + _488;
      float _493 = max(_487, _492);
      float _494 = max(_482, _493);
      float _495 = 1.0f / _494;
      float _496 = _495 * _482;
      float _497 = _495 * _487;
      float _498 = _495 * _492;
      _500 = _496;
      _501 = _497;
      _502 = _498;
    } else {
      _500 = _435;
      _501 = _439;
      _502 = _443;
    }
    float _503 = _500 * _400;
    float _504 = exp2(_503);
    float _505 = _504 * _399;
    float _506 = saturate(_505);
    float _507 = _500 * _399;
    float _508 = _500 - _507;
    float _509 = saturate(_508);
    float _510 = max(_399, _509);
    float _511 = min(_510, _506);
    float _512 = _501 * _400;
    float _513 = exp2(_512);
    float _514 = _513 * _399;
    float _515 = saturate(_514);
    float _516 = _501 * _399;
    float _517 = _501 - _516;
    float _518 = saturate(_517);
    float _519 = max(_399, _518);
    float _520 = min(_519, _515);
    float _521 = _502 * _400;
    float _522 = exp2(_521);
    float _523 = _522 * _399;
    float _524 = saturate(_523);
    float _525 = _502 * _399;
    float _526 = _502 - _525;
    float _527 = saturate(_526);
    float _528 = max(_399, _527);
    float _529 = min(_528, _524);
    _531 = _511;
    _532 = _520;
    _533 = _529;
  } else {
    _531 = _435;
    _532 = _439;
    _533 = _443;
  }
  float _534 = _531 * _423;
  float _535 = _532 * _424;
  float _536 = _535 + _534;
  float _537 = _533 * _425;
  float _538 = _536 + _537;
  float _539 = 1.0f / _538;
  float _540 = _539 * _475;
  float _541 = saturate(_540);
  float _542 = _541 * _531;
  float _543 = saturate(_542);
  float _544 = _541 * _532;
  float _545 = saturate(_544);
  float _546 = _541 * _533;
  float _547 = saturate(_546);
  float _548 = _543 * _410;
  float _549 = _410 - _548;
  float _550 = _545 * _411;
  float _551 = _411 - _550;
  float _552 = _547 * _412;
  float _553 = _412 - _552;
  float _554 = _547 * _425;
  float _555 = _543 * _423;
  float _556 = _545 * _424;
  float _557 = _475 - _555;
  float _558 = _557 - _556;
  float _559 = _558 - _554;
  float _560 = saturate(_559);
  float _561 = _551 * _424;
  float _562 = _549 * _423;
  float _563 = _553 * _425;
  float _564 = _561 + _562;
  float _565 = _564 + _563;
  float _566 = 1.0f / _565;
  float _567 = _566 * _560;
  float _568 = _567 * _549;
  float _569 = _568 + _543;
  float _570 = saturate(_569);
  float _571 = _567 * _551;
  float _572 = _571 + _545;
  float _573 = saturate(_572);
  float _574 = _567 * _553;
  float _575 = _574 + _547;
  float _576 = saturate(_575);
  float _577 = _576 * _425;
  float _578 = _570 * _423;
  float _579 = _573 * _424;
  float _580 = _475 - _578;
  float _581 = _580 - _579;
  float _582 = _581 - _577;
  float _583 = saturate(_582);
  float _584 = _583 * _420;
  float _585 = _584 + _570;
  float _586 = saturate(_585);
  float _587 = _583 * _421;
  float _588 = _587 + _573;
  float _589 = saturate(_588);
  float _590 = _583 * _422;
  float _591 = _590 + _576;
  float _592 = saturate(_591);
  if (!_337) {
    float _594 = _586 * _396;
    float _595 = _589 * _397;
    float _596 = _592 * _398;
    float _597 = _595 + _594;
    float _598 = _597 + _596;
    float _599 = _589 * _394;
    float _600 = _586 * _393;
    float _601 = _592 * _395;
    float _602 = _599 + _600;
    float _603 = _602 + _601;
    float _604 = _592 * _392;
    float _605 = _589 * _391;
    float _606 = _586 * _390;
    float _607 = _605 + _606;
    float _608 = _607 + _604;
    if (!_335) {
      float _610 = saturate(_598);
      float _611 = saturate(_603);
      float _612 = saturate(_608);
      _614 = _612;
      _615 = _611;
      _616 = _610;
    } else {
      _614 = _608;
      _615 = _603;
      _616 = _598;
    }
  } else {
    _614 = _592;
    _615 = _589;
    _616 = _586;
  }
  if (!_332) {
    float _618 = _616 * _396;
    float _619 = _615 * _396;
    float _620 = _614 * _396;
    _622 = _620;
    _623 = _619;
    _624 = _618;
  } else {
    _622 = _614;
    _623 = _615;
    _624 = _616;
  }
  if (_249) {
    float _628 = cb1_018z * 9.999999747378752e-05f;
    float _629 = _628 * _624;
    float _630 = _628 * _623;
    float _631 = _628 * _622;
    float _633 = 5000.0f / cb1_018y;
    float _634 = _629 * _633;
    float _635 = _630 * _633;
    float _636 = _631 * _633;
    _638 = _634;
    _639 = _635;
    _640 = _636;
  } else {
    _638 = _624;
    _639 = _623;
    _640 = _622;
  }
  float _641 = _638 * 1.6047500371932983f;
  float _642 = mad(-0.5310800075531006f, _639, _641);
  float _643 = mad(-0.07366999983787537f, _640, _642);
  float _644 = _638 * -0.10208000242710114f;
  float _645 = mad(1.1081299781799316f, _639, _644);
  float _646 = mad(-0.006049999967217445f, _640, _645);
  float _647 = _638 * -0.0032599999103695154f;
  float _648 = mad(-0.07275000214576721f, _639, _647);
  float _649 = mad(1.0760200023651123f, _640, _648);
  if (_249) {
    // float _651 = max(_643, 0.0f);
    // float _652 = max(_646, 0.0f);
    // float _653 = max(_649, 0.0f);
    // bool _654 = !(_651 >= 0.0030399328097701073f);
    // if (!_654) {
    //   float _656 = abs(_651);
    //   float _657 = log2(_656);
    //   float _658 = _657 * 0.4166666567325592f;
    //   float _659 = exp2(_658);
    //   float _660 = _659 * 1.0549999475479126f;
    //   float _661 = _660 + -0.054999999701976776f;
    //   _665 = _661;
    // } else {
    //   float _663 = _651 * 12.923210144042969f;
    //   _665 = _663;
    // }
    // bool _666 = !(_652 >= 0.0030399328097701073f);
    // if (!_666) {
    //   float _668 = abs(_652);
    //   float _669 = log2(_668);
    //   float _670 = _669 * 0.4166666567325592f;
    //   float _671 = exp2(_670);
    //   float _672 = _671 * 1.0549999475479126f;
    //   float _673 = _672 + -0.054999999701976776f;
    //   _677 = _673;
    // } else {
    //   float _675 = _652 * 12.923210144042969f;
    //   _677 = _675;
    // }
    // bool _678 = !(_653 >= 0.0030399328097701073f);
    // if (!_678) {
    //   float _680 = abs(_653);
    //   float _681 = log2(_680);
    //   float _682 = _681 * 0.4166666567325592f;
    //   float _683 = exp2(_682);
    //   float _684 = _683 * 1.0549999475479126f;
    //   float _685 = _684 + -0.054999999701976776f;
    //   _758 = _665;
    //   _759 = _677;
    //   _760 = _685;
    // } else {
    //   float _687 = _653 * 12.923210144042969f;
    //   _758 = _665;
    //   _759 = _677;
    //   _760 = _687;
    // }
    _758 = renodx::color::srgb::EncodeSafe(_643);
    _759 = renodx::color::srgb::EncodeSafe(_646);
    _760 = renodx::color::srgb::EncodeSafe(_649);

  } else {
    float _689 = saturate(_643);
    float _690 = saturate(_646);
    float _691 = saturate(_649);
    bool _692 = ((uint)(cb1_018w) == -2);
    if (!_692) {
      bool _694 = !(_689 >= 0.0030399328097701073f);
      if (!_694) {
        float _696 = abs(_689);
        float _697 = log2(_696);
        float _698 = _697 * 0.4166666567325592f;
        float _699 = exp2(_698);
        float _700 = _699 * 1.0549999475479126f;
        float _701 = _700 + -0.054999999701976776f;
        _705 = _701;
      } else {
        float _703 = _689 * 12.923210144042969f;
        _705 = _703;
      }
      bool _706 = !(_690 >= 0.0030399328097701073f);
      if (!_706) {
        float _708 = abs(_690);
        float _709 = log2(_708);
        float _710 = _709 * 0.4166666567325592f;
        float _711 = exp2(_710);
        float _712 = _711 * 1.0549999475479126f;
        float _713 = _712 + -0.054999999701976776f;
        _717 = _713;
      } else {
        float _715 = _690 * 12.923210144042969f;
        _717 = _715;
      }
      bool _718 = !(_691 >= 0.0030399328097701073f);
      if (!_718) {
        float _720 = abs(_691);
        float _721 = log2(_720);
        float _722 = _721 * 0.4166666567325592f;
        float _723 = exp2(_722);
        float _724 = _723 * 1.0549999475479126f;
        float _725 = _724 + -0.054999999701976776f;
        _729 = _705;
        _730 = _717;
        _731 = _725;
      } else {
        float _727 = _691 * 12.923210144042969f;
        _729 = _705;
        _730 = _717;
        _731 = _727;
      }
    } else {
      _729 = _689;
      _730 = _690;
      _731 = _691;
    }
    float _736 = abs(_729);
    float _737 = abs(_730);
    float _738 = abs(_731);
    float _739 = log2(_736);
    float _740 = log2(_737);
    float _741 = log2(_738);
    float _742 = _739 * cb2_000z;
    float _743 = _740 * cb2_000z;
    float _744 = _741 * cb2_000z;
    float _745 = exp2(_742);
    float _746 = exp2(_743);
    float _747 = exp2(_744);
    float _748 = _745 * cb2_000y;
    float _749 = _746 * cb2_000y;
    float _750 = _747 * cb2_000y;
    float _751 = _748 + cb2_000x;
    float _752 = _749 + cb2_000x;
    float _753 = _750 + cb2_000x;
    float _754 = saturate(_751);
    float _755 = saturate(_752);
    float _756 = saturate(_753);
    _758 = _754;
    _759 = _755;
    _760 = _756;
  }
  float _764 = cb2_023x * TEXCOORD0_centroid.x;
  float _765 = cb2_023y * TEXCOORD0_centroid.y;
  float _768 = _764 + cb2_023z;
  float _769 = _765 + cb2_023w;
  float4 _772 = t8.SampleLevel(s0_space2, float2(_768, _769), 0.0f);
  float _774 = _772.x + -0.5f;
  float _775 = _774 * cb2_022x;
  float _776 = _775 + 0.5f;
  float _777 = _776 * 2.0f;
  float _778 = _777 * _758;
  float _779 = _777 * _759;
  float _780 = _777 * _760;
  float _784 = float((uint)(cb2_019z));
  float _785 = float((uint)(cb2_019w));
  float _786 = _784 + SV_Position.x;
  float _787 = _785 + SV_Position.y;
  uint _788 = uint(_786);
  uint _789 = uint(_787);
  uint _792 = cb2_019x + -1u;
  uint _793 = cb2_019y + -1u;
  int _794 = _788 & _792;
  int _795 = _789 & _793;
  float4 _796 = t3.Load(int3(_794, _795, 0));
  float _800 = _796.x * 2.0f;
  float _801 = _796.y * 2.0f;
  float _802 = _796.z * 2.0f;
  float _803 = _800 + -1.0f;
  float _804 = _801 + -1.0f;
  float _805 = _802 + -1.0f;
  float _806 = _803 * cb2_025w;
  float _807 = _804 * cb2_025w;
  float _808 = _805 * cb2_025w;
  float _809 = _806 + _778;
  float _810 = _807 + _779;
  float _811 = _808 + _780;
  float _812 = dot(float3(_809, _810, _811), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _809;
  SV_Target.y = _810;
  SV_Target.z = _811;
  SV_Target.w = _812;
  SV_Target_1.x = _812;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
