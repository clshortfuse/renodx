#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _23 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _25 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = max(_25.x, 0.0f);
  float _30 = max(_25.y, 0.0f);
  float _31 = max(_25.z, 0.0f);
  float _32 = min(_29, 65000.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float4 _35 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _40 = max(_35.x, 0.0f);
  float _41 = max(_35.y, 0.0f);
  float _42 = max(_35.z, 0.0f);
  float _43 = max(_35.w, 0.0f);
  float _44 = min(_40, 5000.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _50 = _23.x * cb0_028z;
  float _51 = _50 + cb0_028x;
  float _52 = cb2_027w / _51;
  float _53 = 1.0f - _52;
  float _54 = abs(_53);
  float _56 = cb2_027y * _54;
  float _58 = _56 - cb2_027z;
  float _59 = saturate(_58);
  float _60 = max(_59, _47);
  float _61 = saturate(_60);
  float4 _62 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _66 = _44 - _32;
  float _67 = _45 - _33;
  float _68 = _46 - _34;
  float _69 = _61 * _66;
  float _70 = _61 * _67;
  float _71 = _61 * _68;
  float _72 = _69 + _32;
  float _73 = _70 + _33;
  float _74 = _71 + _34;
  float _75 = dot(float3(_72, _73, _74), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _79 = t0[0].SExposureData_020;
  float _81 = t0[0].SExposureData_004;
  float _83 = cb2_018x * 0.5f;
  float _84 = _83 * cb2_018y;
  float _85 = _81.x - _84;
  float _86 = cb2_018y * cb2_018x;
  float _87 = 1.0f / _86;
  float _88 = _85 * _87;
  float _89 = _75 / _79.x;
  float _90 = _89 * 5464.01611328125f;
  float _91 = _90 + 9.99999993922529e-09f;
  float _92 = log2(_91);
  float _93 = _92 - _85;
  float _94 = _93 * _87;
  float _95 = saturate(_94);
  float2 _96 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _95), 0.0f);
  float _99 = max(_96.y, 1.0000000116860974e-07f);
  float _100 = _96.x / _99;
  float _101 = _100 + _88;
  float _102 = _101 / _87;
  float _103 = _102 - _81.x;
  float _104 = -0.0f - _103;
  float _106 = _104 - cb2_027x;
  float _107 = max(0.0f, _106);
  float _110 = cb2_026z * _107;
  float _111 = _103 - cb2_027x;
  float _112 = max(0.0f, _111);
  float _114 = cb2_026w * _112;
  bool _115 = (_103 < 0.0f);
  float _116 = select(_115, _110, _114);
  float _117 = exp2(_116);
  float _118 = _117 * _72;
  float _119 = _117 * _73;
  float _120 = _117 * _74;
  float _125 = cb2_024y * _62.x;
  float _126 = cb2_024z * _62.y;
  float _127 = cb2_024w * _62.z;
  float _128 = _125 + _118;
  float _129 = _126 + _119;
  float _130 = _127 + _120;
  float _135 = _128 * cb2_025x;
  float _136 = _129 * cb2_025y;
  float _137 = _130 * cb2_025z;
  float _138 = dot(float3(_135, _136, _137), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _139 = t0[0].SExposureData_012;
  float _141 = _138 * 5464.01611328125f;
  float _142 = _141 * _139.x;
  float _143 = _142 + 9.99999993922529e-09f;
  float _144 = log2(_143);
  float _145 = _144 + 16.929765701293945f;
  float _146 = _145 * 0.05734497308731079f;
  float _147 = saturate(_146);
  float _148 = _147 * _147;
  float _149 = _147 * 2.0f;
  float _150 = 3.0f - _149;
  float _151 = _148 * _150;
  float _152 = _136 * 0.8450999855995178f;
  float _153 = _137 * 0.14589999616146088f;
  float _154 = _152 + _153;
  float _155 = _154 * 2.4890189170837402f;
  float _156 = _154 * 0.3754962384700775f;
  float _157 = _154 * 2.811495304107666f;
  float _158 = _154 * 5.519708156585693f;
  float _159 = _138 - _155;
  float _160 = _151 * _159;
  float _161 = _160 + _155;
  float _162 = _151 * 0.5f;
  float _163 = _162 + 0.5f;
  float _164 = _163 * _159;
  float _165 = _164 + _155;
  float _166 = _135 - _156;
  float _167 = _136 - _157;
  float _168 = _137 - _158;
  float _169 = _163 * _166;
  float _170 = _163 * _167;
  float _171 = _163 * _168;
  float _172 = _169 + _156;
  float _173 = _170 + _157;
  float _174 = _171 + _158;
  float _175 = 1.0f / _165;
  float _176 = _161 * _175;
  float _177 = _176 * _172;
  float _178 = _176 * _173;
  float _179 = _176 * _174;
  float _183 = cb2_020x * TEXCOORD0_centroid.x;
  float _184 = cb2_020y * TEXCOORD0_centroid.y;
  float _187 = _183 + cb2_020z;
  float _188 = _184 + cb2_020w;
  float _191 = dot(float2(_187, _188), float2(_187, _188));
  float _192 = 1.0f - _191;
  float _193 = saturate(_192);
  float _194 = log2(_193);
  float _195 = _194 * cb2_021w;
  float _196 = exp2(_195);
  float _200 = _177 - cb2_021x;
  float _201 = _178 - cb2_021y;
  float _202 = _179 - cb2_021z;
  float _203 = _200 * _196;
  float _204 = _201 * _196;
  float _205 = _202 * _196;
  float _206 = _203 + cb2_021x;
  float _207 = _204 + cb2_021y;
  float _208 = _205 + cb2_021z;
  float _209 = t0[0].SExposureData_000;
  float _211 = max(_79.x, 0.0010000000474974513f);
  float _212 = 1.0f / _211;
  float _213 = _212 * _209.x;
  bool _216 = ((uint)(cb2_069y) == 0);
  float _222;
  float _223;
  float _224;
  float _278;
  float _279;
  float _280;
  float _356;
  float _357;
  float _358;
  float _459;
  float _460;
  float _461;
  float _486;
  float _498;
  float _526;
  float _538;
  float _550;
  float _551;
  float _552;
  float _579;
  float _580;
  float _581;
  if (!_216) {
    float _218 = _213 * _206;
    float _219 = _213 * _207;
    float _220 = _213 * _208;
    _222 = _218;
    _223 = _219;
    _224 = _220;
  } else {
    _222 = _206;
    _223 = _207;
    _224 = _208;
  }
  float _225 = _222 * 0.6130970120429993f;
  float _226 = mad(0.33952298760414124f, _223, _225);
  float _227 = mad(0.04737899824976921f, _224, _226);
  float _228 = _222 * 0.07019399851560593f;
  float _229 = mad(0.9163540005683899f, _223, _228);
  float _230 = mad(0.013451999984681606f, _224, _229);
  float _231 = _222 * 0.02061600051820278f;
  float _232 = mad(0.10956999659538269f, _223, _231);
  float _233 = mad(0.8698149919509888f, _224, _232);
  float _234 = log2(_227);
  float _235 = log2(_230);
  float _236 = log2(_233);
  float _237 = _234 * 0.04211956635117531f;
  float _238 = _235 * 0.04211956635117531f;
  float _239 = _236 * 0.04211956635117531f;
  float _240 = _237 + 0.6252607107162476f;
  float _241 = _238 + 0.6252607107162476f;
  float _242 = _239 + 0.6252607107162476f;
  float4 _243 = t6.SampleLevel(s2_space2, float3(_240, _241, _242), 0.0f);
  bool _249 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_249 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _253 = cb2_017x * _243.x;
    float _254 = cb2_017x * _243.y;
    float _255 = cb2_017x * _243.z;
    float _257 = _253 + cb2_017y;
    float _258 = _254 + cb2_017y;
    float _259 = _255 + cb2_017y;
    float _260 = exp2(_257);
    float _261 = exp2(_258);
    float _262 = exp2(_259);
    float _263 = _260 + 1.0f;
    float _264 = _261 + 1.0f;
    float _265 = _262 + 1.0f;
    float _266 = 1.0f / _263;
    float _267 = 1.0f / _264;
    float _268 = 1.0f / _265;
    float _270 = cb2_017z * _266;
    float _271 = cb2_017z * _267;
    float _272 = cb2_017z * _268;
    float _274 = _270 + cb2_017w;
    float _275 = _271 + cb2_017w;
    float _276 = _272 + cb2_017w;
    _278 = _274;
    _279 = _275;
    _280 = _276;
  } else {
    _278 = _243.x;
    _279 = _243.y;
    _280 = _243.z;
  }
  float _281 = _278 * 23.0f;
  float _282 = _281 + -14.473931312561035f;
  float _283 = exp2(_282);
  float _284 = _279 * 23.0f;
  float _285 = _284 + -14.473931312561035f;
  float _286 = exp2(_285);
  float _287 = _280 * 23.0f;
  float _288 = _287 + -14.473931312561035f;
  float _289 = exp2(_288);
  float _290 = dot(float3(_283, _286, _289), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _295 = dot(float3(_283, _286, _289), float3(_283, _286, _289));
  float _296 = rsqrt(_295);
  float _297 = _296 * _283;
  float _298 = _296 * _286;
  float _299 = _296 * _289;
  float _300 = cb2_001x - _297;
  float _301 = cb2_001y - _298;
  float _302 = cb2_001z - _299;
  float _303 = dot(float3(_300, _301, _302), float3(_300, _301, _302));
  float _306 = cb2_002z * _303;
  float _308 = _306 + cb2_002w;
  float _309 = saturate(_308);
  float _311 = cb2_002x * _309;
  float _312 = _290 - _283;
  float _313 = _290 - _286;
  float _314 = _290 - _289;
  float _315 = _311 * _312;
  float _316 = _311 * _313;
  float _317 = _311 * _314;
  float _318 = _315 + _283;
  float _319 = _316 + _286;
  float _320 = _317 + _289;
  float _322 = cb2_002y * _309;
  float _323 = 0.10000000149011612f - _318;
  float _324 = 0.10000000149011612f - _319;
  float _325 = 0.10000000149011612f - _320;
  float _326 = _323 * _322;
  float _327 = _324 * _322;
  float _328 = _325 * _322;
  float _329 = _326 + _318;
  float _330 = _327 + _319;
  float _331 = _328 + _320;
  float _332 = saturate(_329);
  float _333 = saturate(_330);
  float _334 = saturate(_331);
  float _341 = cb2_016x - _332;
  float _342 = cb2_016y - _333;
  float _343 = cb2_016z - _334;
  float _344 = _341 * cb2_016w;
  float _345 = _342 * cb2_016w;
  float _346 = _343 * cb2_016w;
  float _347 = _344 + _332;
  float _348 = _345 + _333;
  float _349 = _346 + _334;
  if (_249 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _352 = cb2_024x * _347;
    float _353 = cb2_024x * _348;
    float _354 = cb2_024x * _349;
    _356 = _352;
    _357 = _353;
    _358 = _354;
  } else {
    _356 = _347;
    _357 = _348;
    _358 = _349;
  }
  float _359 = _356 * 0.9708889722824097f;
  float _360 = mad(0.026962999254465103f, _357, _359);
  float _361 = mad(0.002148000057786703f, _358, _360);
  float _362 = _356 * 0.01088900025933981f;
  float _363 = mad(0.9869629740715027f, _357, _362);
  float _364 = mad(0.002148000057786703f, _358, _363);
  float _365 = mad(0.026962999254465103f, _357, _362);
  float _366 = mad(0.9621480107307434f, _358, _365);
  if (_249) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _371 = cb1_018y * 0.10000000149011612f;
        float _372 = log2(cb1_018z);
        float _373 = _372 + -13.287712097167969f;
        float _374 = _373 * 1.4929734468460083f;
        float _375 = _374 + 18.0f;
        float _376 = exp2(_375);
        float _377 = _376 * 0.18000000715255737f;
        float _378 = abs(_377);
        float _379 = log2(_378);
        float _380 = _379 * 1.5f;
        float _381 = exp2(_380);
        float _382 = _381 * _371;
        float _383 = _382 / cb1_018z;
        float _384 = _383 + -0.07636754959821701f;
        float _385 = _379 * 1.2750000953674316f;
        float _386 = exp2(_385);
        float _387 = _386 * 0.07636754959821701f;
        float _388 = cb1_018y * 0.011232397519052029f;
        float _389 = _388 * _381;
        float _390 = _389 / cb1_018z;
        float _391 = _387 - _390;
        float _392 = _386 + -0.11232396960258484f;
        float _393 = _392 * _371;
        float _394 = _393 / cb1_018z;
        float _395 = _394 * cb1_018z;
        float _396 = abs(_361);
        float _397 = abs(_364);
        float _398 = abs(_366);
        float _399 = log2(_396);
        float _400 = log2(_397);
        float _401 = log2(_398);
        float _402 = _399 * 1.5f;
        float _403 = _400 * 1.5f;
        float _404 = _401 * 1.5f;
        float _405 = exp2(_402);
        float _406 = exp2(_403);
        float _407 = exp2(_404);
        float _408 = _405 * _395;
        float _409 = _406 * _395;
        float _410 = _407 * _395;
        float _411 = _399 * 1.2750000953674316f;
        float _412 = _400 * 1.2750000953674316f;
        float _413 = _401 * 1.2750000953674316f;
        float _414 = exp2(_411);
        float _415 = exp2(_412);
        float _416 = exp2(_413);
        float _417 = _414 * _384;
        float _418 = _415 * _384;
        float _419 = _416 * _384;
        float _420 = _417 + _391;
        float _421 = _418 + _391;
        float _422 = _419 + _391;
        float _423 = _408 / _420;
        float _424 = _409 / _421;
        float _425 = _410 / _422;
        float _426 = _423 * 9.999999747378752e-05f;
        float _427 = _424 * 9.999999747378752e-05f;
        float _428 = _425 * 9.999999747378752e-05f;
        float _429 = 5000.0f / cb1_018y;
        float _430 = _426 * _429;
        float _431 = _427 * _429;
        float _432 = _428 * _429;
        _459 = _430;
        _460 = _431;
        _461 = _432;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_361, _364, _366));
      _459 = tonemapped.x, _460 = tonemapped.y, _461 = tonemapped.z;
    }
      } else {
        float _434 = _361 + 0.020616600289940834f;
        float _435 = _364 + 0.020616600289940834f;
        float _436 = _366 + 0.020616600289940834f;
        float _437 = _434 * _361;
        float _438 = _435 * _364;
        float _439 = _436 * _366;
        float _440 = _437 + -7.456949970219284e-05f;
        float _441 = _438 + -7.456949970219284e-05f;
        float _442 = _439 + -7.456949970219284e-05f;
        float _443 = _361 * 0.9837960004806519f;
        float _444 = _364 * 0.9837960004806519f;
        float _445 = _366 * 0.9837960004806519f;
        float _446 = _443 + 0.4336790144443512f;
        float _447 = _444 + 0.4336790144443512f;
        float _448 = _445 + 0.4336790144443512f;
        float _449 = _446 * _361;
        float _450 = _447 * _364;
        float _451 = _448 * _366;
        float _452 = _449 + 0.24617899954319f;
        float _453 = _450 + 0.24617899954319f;
        float _454 = _451 + 0.24617899954319f;
        float _455 = _440 / _452;
        float _456 = _441 / _453;
        float _457 = _442 / _454;
        _459 = _455;
        _460 = _456;
        _461 = _457;
      }
      float _462 = _459 * 1.6047500371932983f;
      float _463 = mad(-0.5310800075531006f, _460, _462);
      float _464 = mad(-0.07366999983787537f, _461, _463);
      float _465 = _459 * -0.10208000242710114f;
      float _466 = mad(1.1081299781799316f, _460, _465);
      float _467 = mad(-0.006049999967217445f, _461, _466);
      float _468 = _459 * -0.0032599999103695154f;
      float _469 = mad(-0.07275000214576721f, _460, _468);
      float _470 = mad(1.0760200023651123f, _461, _469);
      if (_249) {
        // float _472 = max(_464, 0.0f);
        // float _473 = max(_467, 0.0f);
        // float _474 = max(_470, 0.0f);
        // bool _475 = !(_472 >= 0.0030399328097701073f);
        // if (!_475) {
        //   float _477 = abs(_472);
        //   float _478 = log2(_477);
        //   float _479 = _478 * 0.4166666567325592f;
        //   float _480 = exp2(_479);
        //   float _481 = _480 * 1.0549999475479126f;
        //   float _482 = _481 + -0.054999999701976776f;
        //   _486 = _482;
        // } else {
        //   float _484 = _472 * 12.923210144042969f;
        //   _486 = _484;
        // }
        // bool _487 = !(_473 >= 0.0030399328097701073f);
        // if (!_487) {
        //   float _489 = abs(_473);
        //   float _490 = log2(_489);
        //   float _491 = _490 * 0.4166666567325592f;
        //   float _492 = exp2(_491);
        //   float _493 = _492 * 1.0549999475479126f;
        //   float _494 = _493 + -0.054999999701976776f;
        //   _498 = _494;
        // } else {
        //   float _496 = _473 * 12.923210144042969f;
        //   _498 = _496;
        // }
        // bool _499 = !(_474 >= 0.0030399328097701073f);
        // if (!_499) {
        //   float _501 = abs(_474);
        //   float _502 = log2(_501);
        //   float _503 = _502 * 0.4166666567325592f;
        //   float _504 = exp2(_503);
        //   float _505 = _504 * 1.0549999475479126f;
        //   float _506 = _505 + -0.054999999701976776f;
        //   _579 = _486;
        //   _580 = _498;
        //   _581 = _506;
        // } else {
        //   float _508 = _474 * 12.923210144042969f;
        //   _579 = _486;
        //   _580 = _498;
        //   _581 = _508;
        // }
        _579 = renodx::color::srgb::EncodeSafe(_464);
        _580 = renodx::color::srgb::EncodeSafe(_467);
        _581 = renodx::color::srgb::EncodeSafe(_470);

      } else {
        float _510 = saturate(_464);
        float _511 = saturate(_467);
        float _512 = saturate(_470);
        bool _513 = ((uint)(cb1_018w) == -2);
        if (!_513) {
          bool _515 = !(_510 >= 0.0030399328097701073f);
          if (!_515) {
            float _517 = abs(_510);
            float _518 = log2(_517);
            float _519 = _518 * 0.4166666567325592f;
            float _520 = exp2(_519);
            float _521 = _520 * 1.0549999475479126f;
            float _522 = _521 + -0.054999999701976776f;
            _526 = _522;
          } else {
            float _524 = _510 * 12.923210144042969f;
            _526 = _524;
          }
          bool _527 = !(_511 >= 0.0030399328097701073f);
          if (!_527) {
            float _529 = abs(_511);
            float _530 = log2(_529);
            float _531 = _530 * 0.4166666567325592f;
            float _532 = exp2(_531);
            float _533 = _532 * 1.0549999475479126f;
            float _534 = _533 + -0.054999999701976776f;
            _538 = _534;
          } else {
            float _536 = _511 * 12.923210144042969f;
            _538 = _536;
          }
          bool _539 = !(_512 >= 0.0030399328097701073f);
          if (!_539) {
            float _541 = abs(_512);
            float _542 = log2(_541);
            float _543 = _542 * 0.4166666567325592f;
            float _544 = exp2(_543);
            float _545 = _544 * 1.0549999475479126f;
            float _546 = _545 + -0.054999999701976776f;
            _550 = _526;
            _551 = _538;
            _552 = _546;
          } else {
            float _548 = _512 * 12.923210144042969f;
            _550 = _526;
            _551 = _538;
            _552 = _548;
          }
        } else {
          _550 = _510;
          _551 = _511;
          _552 = _512;
        }
        float _557 = abs(_550);
        float _558 = abs(_551);
        float _559 = abs(_552);
        float _560 = log2(_557);
        float _561 = log2(_558);
        float _562 = log2(_559);
        float _563 = _560 * cb2_000z;
        float _564 = _561 * cb2_000z;
        float _565 = _562 * cb2_000z;
        float _566 = exp2(_563);
        float _567 = exp2(_564);
        float _568 = exp2(_565);
        float _569 = _566 * cb2_000y;
        float _570 = _567 * cb2_000y;
        float _571 = _568 * cb2_000y;
        float _572 = _569 + cb2_000x;
        float _573 = _570 + cb2_000x;
        float _574 = _571 + cb2_000x;
        float _575 = saturate(_572);
        float _576 = saturate(_573);
        float _577 = saturate(_574);
        _579 = _575;
        _580 = _576;
        _581 = _577;
      }
      float _585 = cb2_023x * TEXCOORD0_centroid.x;
      float _586 = cb2_023y * TEXCOORD0_centroid.y;
      float _589 = _585 + cb2_023z;
      float _590 = _586 + cb2_023w;
      float4 _593 = t8.SampleLevel(s0_space2, float2(_589, _590), 0.0f);
      float _595 = _593.x + -0.5f;
      float _596 = _595 * cb2_022x;
      float _597 = _596 + 0.5f;
      float _598 = _597 * 2.0f;
      float _599 = _598 * _579;
      float _600 = _598 * _580;
      float _601 = _598 * _581;
      float _605 = float((uint)(cb2_019z));
      float _606 = float((uint)(cb2_019w));
      float _607 = _605 + SV_Position.x;
      float _608 = _606 + SV_Position.y;
      uint _609 = uint(_607);
      uint _610 = uint(_608);
      uint _613 = cb2_019x + -1u;
      uint _614 = cb2_019y + -1u;
      int _615 = _609 & _613;
      int _616 = _610 & _614;
      float4 _617 = t3.Load(int3(_615, _616, 0));
      float _621 = _617.x * 2.0f;
      float _622 = _617.y * 2.0f;
      float _623 = _617.z * 2.0f;
      float _624 = _621 + -1.0f;
      float _625 = _622 + -1.0f;
      float _626 = _623 + -1.0f;
      float _627 = _624 * cb2_025w;
      float _628 = _625 * cb2_025w;
      float _629 = _626 * cb2_025w;
      float _630 = _627 + _599;
      float _631 = _628 + _600;
      float _632 = _629 + _601;
      float _633 = dot(float3(_630, _631, _632), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _630;
      SV_Target.y = _631;
      SV_Target.z = _632;
      SV_Target.w = _633;
      SV_Target_1.x = _633;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
