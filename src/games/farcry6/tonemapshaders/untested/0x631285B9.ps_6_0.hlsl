#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = cb2_015x * TEXCOORD0_centroid.x;
  float _26 = cb2_015y * TEXCOORD0_centroid.y;
  float _29 = _25 + cb2_015z;
  float _30 = _26 + cb2_015w;
  float4 _31 = t6.SampleLevel(s0_space2, float2(_29, _30), 0.0f);
  float _35 = saturate(_31.x);
  float _36 = saturate(_31.z);
  float _39 = cb2_026x * _36;
  float _40 = _35 * 6.283199787139893f;
  float _41 = cos(_40);
  float _42 = sin(_40);
  float _43 = _39 * _41;
  float _44 = _42 * _39;
  float _45 = 1.0f - _31.y;
  float _46 = saturate(_45);
  float _47 = _43 * _46;
  float _48 = _44 * _46;
  float _49 = _47 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t1.SampleLevel(s4_space2, float2(_49, _50), 0.0f);
  float _55 = max(_51.x, 0.0f);
  float _56 = max(_51.y, 0.0f);
  float _57 = max(_51.z, 0.0f);
  float _58 = min(_55, 65000.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float4 _61 = t3.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _66 = max(_61.x, 0.0f);
  float _67 = max(_61.y, 0.0f);
  float _68 = max(_61.z, 0.0f);
  float _69 = max(_61.w, 0.0f);
  float _70 = min(_66, 5000.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _76 = _20.x * cb0_028z;
  float _77 = _76 + cb0_028x;
  float _78 = cb2_027w / _77;
  float _79 = 1.0f - _78;
  float _80 = abs(_79);
  float _82 = cb2_027y * _80;
  float _84 = _82 - cb2_027z;
  float _85 = saturate(_84);
  float _86 = max(_85, _73);
  float _87 = saturate(_86);
  float _91 = cb2_013x * _49;
  float _92 = cb2_013y * _50;
  float _95 = _91 + cb2_013z;
  float _96 = _92 + cb2_013w;
  float _99 = dot(float2(_95, _96), float2(_95, _96));
  float _100 = abs(_99);
  float _101 = log2(_100);
  float _102 = _101 * cb2_014x;
  float _103 = exp2(_102);
  float _104 = saturate(_103);
  float _108 = cb2_011x * _49;
  float _109 = cb2_011y * _50;
  float _112 = _108 + cb2_011z;
  float _113 = _109 + cb2_011w;
  float _114 = _112 * _104;
  float _115 = _113 * _104;
  float _116 = _114 + _49;
  float _117 = _115 + _50;
  float _121 = cb2_012x * _49;
  float _122 = cb2_012y * _50;
  float _125 = _121 + cb2_012z;
  float _126 = _122 + cb2_012w;
  float _127 = _125 * _104;
  float _128 = _126 * _104;
  float _129 = _127 + _49;
  float _130 = _128 + _50;
  float4 _131 = t1.SampleLevel(s2_space2, float2(_116, _117), 0.0f);
  float _135 = max(_131.x, 0.0f);
  float _136 = max(_131.y, 0.0f);
  float _137 = max(_131.z, 0.0f);
  float _138 = min(_135, 65000.0f);
  float _139 = min(_136, 65000.0f);
  float _140 = min(_137, 65000.0f);
  float4 _141 = t1.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _145 = max(_141.x, 0.0f);
  float _146 = max(_141.y, 0.0f);
  float _147 = max(_141.z, 0.0f);
  float _148 = min(_145, 65000.0f);
  float _149 = min(_146, 65000.0f);
  float _150 = min(_147, 65000.0f);
  float4 _151 = t3.SampleLevel(s2_space2, float2(_116, _117), 0.0f);
  float _155 = max(_151.x, 0.0f);
  float _156 = max(_151.y, 0.0f);
  float _157 = max(_151.z, 0.0f);
  float _158 = min(_155, 5000.0f);
  float _159 = min(_156, 5000.0f);
  float _160 = min(_157, 5000.0f);
  float4 _161 = t3.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _165 = max(_161.x, 0.0f);
  float _166 = max(_161.y, 0.0f);
  float _167 = max(_161.z, 0.0f);
  float _168 = min(_165, 5000.0f);
  float _169 = min(_166, 5000.0f);
  float _170 = min(_167, 5000.0f);
  float _175 = 1.0f - cb2_009x;
  float _176 = 1.0f - cb2_009y;
  float _177 = 1.0f - cb2_009z;
  float _182 = _175 - cb2_010x;
  float _183 = _176 - cb2_010y;
  float _184 = _177 - cb2_010z;
  float _185 = saturate(_182);
  float _186 = saturate(_183);
  float _187 = saturate(_184);
  float _188 = _185 * _58;
  float _189 = _186 * _59;
  float _190 = _187 * _60;
  float _191 = cb2_009x * _138;
  float _192 = cb2_009y * _139;
  float _193 = cb2_009z * _140;
  float _194 = _191 + _188;
  float _195 = _192 + _189;
  float _196 = _193 + _190;
  float _197 = cb2_010x * _148;
  float _198 = cb2_010y * _149;
  float _199 = cb2_010z * _150;
  float _200 = _194 + _197;
  float _201 = _195 + _198;
  float _202 = _196 + _199;
  float _203 = _185 * _70;
  float _204 = _186 * _71;
  float _205 = _187 * _72;
  float _206 = cb2_009x * _158;
  float _207 = cb2_009y * _159;
  float _208 = cb2_009z * _160;
  float _209 = cb2_010x * _168;
  float _210 = cb2_010y * _169;
  float _211 = cb2_010z * _170;
  float4 _212 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _216 = _203 - _200;
  float _217 = _216 + _206;
  float _218 = _217 + _209;
  float _219 = _204 - _201;
  float _220 = _219 + _207;
  float _221 = _220 + _210;
  float _222 = _205 - _202;
  float _223 = _222 + _208;
  float _224 = _223 + _211;
  float _225 = _218 * _87;
  float _226 = _221 * _87;
  float _227 = _224 * _87;
  float _228 = _225 + _200;
  float _229 = _226 + _201;
  float _230 = _227 + _202;
  float _231 = dot(float3(_228, _229, _230), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _235 = t0[0].SExposureData_020;
  float _237 = t0[0].SExposureData_004;
  float _239 = cb2_018x * 0.5f;
  float _240 = _239 * cb2_018y;
  float _241 = _237.x - _240;
  float _242 = cb2_018y * cb2_018x;
  float _243 = 1.0f / _242;
  float _244 = _241 * _243;
  float _245 = _231 / _235.x;
  float _246 = _245 * 5464.01611328125f;
  float _247 = _246 + 9.99999993922529e-09f;
  float _248 = log2(_247);
  float _249 = _248 - _241;
  float _250 = _249 * _243;
  float _251 = saturate(_250);
  float2 _252 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _251), 0.0f);
  float _255 = max(_252.y, 1.0000000116860974e-07f);
  float _256 = _252.x / _255;
  float _257 = _256 + _244;
  float _258 = _257 / _243;
  float _259 = _258 - _237.x;
  float _260 = -0.0f - _259;
  float _262 = _260 - cb2_027x;
  float _263 = max(0.0f, _262);
  float _265 = cb2_026z * _263;
  float _266 = _259 - cb2_027x;
  float _267 = max(0.0f, _266);
  float _269 = cb2_026w * _267;
  bool _270 = (_259 < 0.0f);
  float _271 = select(_270, _265, _269);
  float _272 = exp2(_271);
  float _273 = _272 * _228;
  float _274 = _272 * _229;
  float _275 = _272 * _230;
  float _280 = cb2_024y * _212.x;
  float _281 = cb2_024z * _212.y;
  float _282 = cb2_024w * _212.z;
  float _283 = _280 + _273;
  float _284 = _281 + _274;
  float _285 = _282 + _275;
  float _290 = _283 * cb2_025x;
  float _291 = _284 * cb2_025y;
  float _292 = _285 * cb2_025z;
  float _293 = dot(float3(_290, _291, _292), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _294 = t0[0].SExposureData_012;
  float _296 = _293 * 5464.01611328125f;
  float _297 = _296 * _294.x;
  float _298 = _297 + 9.99999993922529e-09f;
  float _299 = log2(_298);
  float _300 = _299 + 16.929765701293945f;
  float _301 = _300 * 0.05734497308731079f;
  float _302 = saturate(_301);
  float _303 = _302 * _302;
  float _304 = _302 * 2.0f;
  float _305 = 3.0f - _304;
  float _306 = _303 * _305;
  float _307 = _291 * 0.8450999855995178f;
  float _308 = _292 * 0.14589999616146088f;
  float _309 = _307 + _308;
  float _310 = _309 * 2.4890189170837402f;
  float _311 = _309 * 0.3754962384700775f;
  float _312 = _309 * 2.811495304107666f;
  float _313 = _309 * 5.519708156585693f;
  float _314 = _293 - _310;
  float _315 = _306 * _314;
  float _316 = _315 + _310;
  float _317 = _306 * 0.5f;
  float _318 = _317 + 0.5f;
  float _319 = _318 * _314;
  float _320 = _319 + _310;
  float _321 = _290 - _311;
  float _322 = _291 - _312;
  float _323 = _292 - _313;
  float _324 = _318 * _321;
  float _325 = _318 * _322;
  float _326 = _318 * _323;
  float _327 = _324 + _311;
  float _328 = _325 + _312;
  float _329 = _326 + _313;
  float _330 = 1.0f / _320;
  float _331 = _316 * _330;
  float _332 = _331 * _327;
  float _333 = _331 * _328;
  float _334 = _331 * _329;
  float _338 = cb2_020x * TEXCOORD0_centroid.x;
  float _339 = cb2_020y * TEXCOORD0_centroid.y;
  float _342 = _338 + cb2_020z;
  float _343 = _339 + cb2_020w;
  float _346 = dot(float2(_342, _343), float2(_342, _343));
  float _347 = 1.0f - _346;
  float _348 = saturate(_347);
  float _349 = log2(_348);
  float _350 = _349 * cb2_021w;
  float _351 = exp2(_350);
  float _355 = _332 - cb2_021x;
  float _356 = _333 - cb2_021y;
  float _357 = _334 - cb2_021z;
  float _358 = _355 * _351;
  float _359 = _356 * _351;
  float _360 = _357 * _351;
  float _361 = _358 + cb2_021x;
  float _362 = _359 + cb2_021y;
  float _363 = _360 + cb2_021z;
  float _364 = t0[0].SExposureData_000;
  float _366 = max(_235.x, 0.0010000000474974513f);
  float _367 = 1.0f / _366;
  float _368 = _367 * _364.x;
  bool _371 = ((uint)(cb2_069y) == 0);
  float _377;
  float _378;
  float _379;
  float _433;
  float _434;
  float _435;
  float _510;
  float _511;
  float _512;
  float _662;
  float _699;
  float _700;
  float _701;
  float _730;
  float _731;
  float _732;
  float _813;
  float _814;
  float _815;
  float _821;
  float _822;
  float _823;
  float _837;
  float _838;
  float _839;
  float _864;
  float _876;
  float _904;
  float _916;
  float _928;
  float _929;
  float _930;
  float _957;
  float _958;
  float _959;
  if (!_371) {
    float _373 = _368 * _361;
    float _374 = _368 * _362;
    float _375 = _368 * _363;
    _377 = _373;
    _378 = _374;
    _379 = _375;
  } else {
    _377 = _361;
    _378 = _362;
    _379 = _363;
  }
  float _380 = _377 * 0.6130970120429993f;
  float _381 = mad(0.33952298760414124f, _378, _380);
  float _382 = mad(0.04737899824976921f, _379, _381);
  float _383 = _377 * 0.07019399851560593f;
  float _384 = mad(0.9163540005683899f, _378, _383);
  float _385 = mad(0.013451999984681606f, _379, _384);
  float _386 = _377 * 0.02061600051820278f;
  float _387 = mad(0.10956999659538269f, _378, _386);
  float _388 = mad(0.8698149919509888f, _379, _387);
  float _389 = log2(_382);
  float _390 = log2(_385);
  float _391 = log2(_388);
  float _392 = _389 * 0.04211956635117531f;
  float _393 = _390 * 0.04211956635117531f;
  float _394 = _391 * 0.04211956635117531f;
  float _395 = _392 + 0.6252607107162476f;
  float _396 = _393 + 0.6252607107162476f;
  float _397 = _394 + 0.6252607107162476f;
  float4 _398 = t5.SampleLevel(s2_space2, float3(_395, _396, _397), 0.0f);
  bool _404 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_404 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _408 = cb2_017x * _398.x;
    float _409 = cb2_017x * _398.y;
    float _410 = cb2_017x * _398.z;
    float _412 = _408 + cb2_017y;
    float _413 = _409 + cb2_017y;
    float _414 = _410 + cb2_017y;
    float _415 = exp2(_412);
    float _416 = exp2(_413);
    float _417 = exp2(_414);
    float _418 = _415 + 1.0f;
    float _419 = _416 + 1.0f;
    float _420 = _417 + 1.0f;
    float _421 = 1.0f / _418;
    float _422 = 1.0f / _419;
    float _423 = 1.0f / _420;
    float _425 = cb2_017z * _421;
    float _426 = cb2_017z * _422;
    float _427 = cb2_017z * _423;
    float _429 = _425 + cb2_017w;
    float _430 = _426 + cb2_017w;
    float _431 = _427 + cb2_017w;
    _433 = _429;
    _434 = _430;
    _435 = _431;
  } else {
    _433 = _398.x;
    _434 = _398.y;
    _435 = _398.z;
  }
  float _436 = _433 * 23.0f;
  float _437 = _436 + -14.473931312561035f;
  float _438 = exp2(_437);
  float _439 = _434 * 23.0f;
  float _440 = _439 + -14.473931312561035f;
  float _441 = exp2(_440);
  float _442 = _435 * 23.0f;
  float _443 = _442 + -14.473931312561035f;
  float _444 = exp2(_443);
  float _445 = dot(float3(_438, _441, _444), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _450 = dot(float3(_438, _441, _444), float3(_438, _441, _444));
  float _451 = rsqrt(_450);
  float _452 = _451 * _438;
  float _453 = _451 * _441;
  float _454 = _451 * _444;
  float _455 = cb2_001x - _452;
  float _456 = cb2_001y - _453;
  float _457 = cb2_001z - _454;
  float _458 = dot(float3(_455, _456, _457), float3(_455, _456, _457));
  float _461 = cb2_002z * _458;
  float _463 = _461 + cb2_002w;
  float _464 = saturate(_463);
  float _466 = cb2_002x * _464;
  float _467 = _445 - _438;
  float _468 = _445 - _441;
  float _469 = _445 - _444;
  float _470 = _466 * _467;
  float _471 = _466 * _468;
  float _472 = _466 * _469;
  float _473 = _470 + _438;
  float _474 = _471 + _441;
  float _475 = _472 + _444;
  float _477 = cb2_002y * _464;
  float _478 = 0.10000000149011612f - _473;
  float _479 = 0.10000000149011612f - _474;
  float _480 = 0.10000000149011612f - _475;
  float _481 = _478 * _477;
  float _482 = _479 * _477;
  float _483 = _480 * _477;
  float _484 = _481 + _473;
  float _485 = _482 + _474;
  float _486 = _483 + _475;
  float _487 = saturate(_484);
  float _488 = saturate(_485);
  float _489 = saturate(_486);
  float _495 = cb2_016x - _487;
  float _496 = cb2_016y - _488;
  float _497 = cb2_016z - _489;
  float _498 = _495 * cb2_016w;
  float _499 = _496 * cb2_016w;
  float _500 = _497 * cb2_016w;
  float _501 = _498 + _487;
  float _502 = _499 + _488;
  float _503 = _500 + _489;
  if (_404 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _506 = cb2_024x * _501;
    float _507 = cb2_024x * _502;
    float _508 = cb2_024x * _503;
    _510 = _506;
    _511 = _507;
    _512 = _508;
  } else {
    _510 = _501;
    _511 = _502;
    _512 = _503;
  }
  float _515 = _510 * 0.9708889722824097f;
  float _516 = mad(0.026962999254465103f, _511, _515);
  float _517 = mad(0.002148000057786703f, _512, _516);
  float _518 = _510 * 0.01088900025933981f;
  float _519 = mad(0.9869629740715027f, _511, _518);
  float _520 = mad(0.002148000057786703f, _512, _519);
  float _521 = mad(0.026962999254465103f, _511, _518);
  float _522 = mad(0.9621480107307434f, _512, _521);
  float _523 = max(_517, 0.0f);
  float _524 = max(_520, 0.0f);
  float _525 = max(_522, 0.0f);
  float _526 = min(_523, cb2_095y);
  float _527 = min(_524, cb2_095y);
  float _528 = min(_525, cb2_095y);
  bool _531 = ((uint)(cb2_095x) == 0);
  bool _534 = ((uint)(cb2_094w) == 0);
  bool _536 = ((uint)(cb2_094z) == 0);
  bool _538 = ((uint)(cb2_094y) != 0);
  bool _540 = ((uint)(cb2_094x) == 0);
  bool _542 = ((uint)(cb2_069z) != 0);
  float _589 = asfloat((uint)(cb2_075y));
  float _590 = asfloat((uint)(cb2_075z));
  float _591 = asfloat((uint)(cb2_075w));
  float _592 = asfloat((uint)(cb2_074z));
  float _593 = asfloat((uint)(cb2_074w));
  float _594 = asfloat((uint)(cb2_075x));
  float _595 = asfloat((uint)(cb2_073w));
  float _596 = asfloat((uint)(cb2_074x));
  float _597 = asfloat((uint)(cb2_074y));
  float _598 = asfloat((uint)(cb2_077x));
  float _599 = asfloat((uint)(cb2_077y));
  float _600 = asfloat((uint)(cb2_079x));
  float _601 = asfloat((uint)(cb2_079y));
  float _602 = asfloat((uint)(cb2_079z));
  float _603 = asfloat((uint)(cb2_078y));
  float _604 = asfloat((uint)(cb2_078z));
  float _605 = asfloat((uint)(cb2_078w));
  float _606 = asfloat((uint)(cb2_077z));
  float _607 = asfloat((uint)(cb2_077w));
  float _608 = asfloat((uint)(cb2_078x));
  float _609 = asfloat((uint)(cb2_072y));
  float _610 = asfloat((uint)(cb2_072z));
  float _611 = asfloat((uint)(cb2_072w));
  float _612 = asfloat((uint)(cb2_071x));
  float _613 = asfloat((uint)(cb2_071y));
  float _614 = asfloat((uint)(cb2_076x));
  float _615 = asfloat((uint)(cb2_070w));
  float _616 = asfloat((uint)(cb2_070x));
  float _617 = asfloat((uint)(cb2_070y));
  float _618 = asfloat((uint)(cb2_070z));
  float _619 = asfloat((uint)(cb2_073x));
  float _620 = asfloat((uint)(cb2_073y));
  float _621 = asfloat((uint)(cb2_073z));
  float _622 = asfloat((uint)(cb2_071z));
  float _623 = asfloat((uint)(cb2_071w));
  float _624 = asfloat((uint)(cb2_072x));
  float _625 = max(_527, _528);
  float _626 = max(_526, _625);
  float _627 = 1.0f / _626;
  float _628 = _627 * _526;
  float _629 = _627 * _527;
  float _630 = _627 * _528;
  float _631 = abs(_628);
  float _632 = log2(_631);
  float _633 = _632 * _616;
  float _634 = exp2(_633);
  float _635 = abs(_629);
  float _636 = log2(_635);
  float _637 = _636 * _617;
  float _638 = exp2(_637);
  float _639 = abs(_630);
  float _640 = log2(_639);
  float _641 = _640 * _618;
  float _642 = exp2(_641);
  if (_538) {
    float _645 = asfloat((uint)(cb2_076w));
    float _647 = asfloat((uint)(cb2_076z));
    float _649 = asfloat((uint)(cb2_076y));
    float _650 = _647 * _527;
    float _651 = _649 * _526;
    float _652 = _645 * _528;
    float _653 = _651 + _652;
    float _654 = _653 + _650;
    _662 = _654;
  } else {
    float _656 = _623 * _527;
    float _657 = _622 * _526;
    float _658 = _624 * _528;
    float _659 = _656 + _657;
    float _660 = _659 + _658;
    _662 = _660;
  }
  float _663 = abs(_662);
  float _664 = log2(_663);
  float _665 = _664 * _615;
  float _666 = exp2(_665);
  float _667 = log2(_666);
  float _668 = _667 * _614;
  float _669 = exp2(_668);
  float _670 = select(_542, _669, _666);
  float _671 = _670 * _612;
  float _672 = _671 + _613;
  float _673 = 1.0f / _672;
  float _674 = _673 * _666;
  if (_538) {
    if (!_540) {
      float _677 = _634 * _606;
      float _678 = _638 * _607;
      float _679 = _642 * _608;
      float _680 = _678 + _677;
      float _681 = _680 + _679;
      float _682 = _638 * _604;
      float _683 = _634 * _603;
      float _684 = _642 * _605;
      float _685 = _682 + _683;
      float _686 = _685 + _684;
      float _687 = _642 * _602;
      float _688 = _638 * _601;
      float _689 = _634 * _600;
      float _690 = _688 + _689;
      float _691 = _690 + _687;
      float _692 = max(_686, _691);
      float _693 = max(_681, _692);
      float _694 = 1.0f / _693;
      float _695 = _694 * _681;
      float _696 = _694 * _686;
      float _697 = _694 * _691;
      _699 = _695;
      _700 = _696;
      _701 = _697;
    } else {
      _699 = _634;
      _700 = _638;
      _701 = _642;
    }
    float _702 = _699 * _599;
    float _703 = exp2(_702);
    float _704 = _703 * _598;
    float _705 = saturate(_704);
    float _706 = _699 * _598;
    float _707 = _699 - _706;
    float _708 = saturate(_707);
    float _709 = max(_598, _708);
    float _710 = min(_709, _705);
    float _711 = _700 * _599;
    float _712 = exp2(_711);
    float _713 = _712 * _598;
    float _714 = saturate(_713);
    float _715 = _700 * _598;
    float _716 = _700 - _715;
    float _717 = saturate(_716);
    float _718 = max(_598, _717);
    float _719 = min(_718, _714);
    float _720 = _701 * _599;
    float _721 = exp2(_720);
    float _722 = _721 * _598;
    float _723 = saturate(_722);
    float _724 = _701 * _598;
    float _725 = _701 - _724;
    float _726 = saturate(_725);
    float _727 = max(_598, _726);
    float _728 = min(_727, _723);
    _730 = _710;
    _731 = _719;
    _732 = _728;
  } else {
    _730 = _634;
    _731 = _638;
    _732 = _642;
  }
  float _733 = _730 * _622;
  float _734 = _731 * _623;
  float _735 = _734 + _733;
  float _736 = _732 * _624;
  float _737 = _735 + _736;
  float _738 = 1.0f / _737;
  float _739 = _738 * _674;
  float _740 = saturate(_739);
  float _741 = _740 * _730;
  float _742 = saturate(_741);
  float _743 = _740 * _731;
  float _744 = saturate(_743);
  float _745 = _740 * _732;
  float _746 = saturate(_745);
  float _747 = _742 * _609;
  float _748 = _609 - _747;
  float _749 = _744 * _610;
  float _750 = _610 - _749;
  float _751 = _746 * _611;
  float _752 = _611 - _751;
  float _753 = _746 * _624;
  float _754 = _742 * _622;
  float _755 = _744 * _623;
  float _756 = _674 - _754;
  float _757 = _756 - _755;
  float _758 = _757 - _753;
  float _759 = saturate(_758);
  float _760 = _750 * _623;
  float _761 = _748 * _622;
  float _762 = _752 * _624;
  float _763 = _760 + _761;
  float _764 = _763 + _762;
  float _765 = 1.0f / _764;
  float _766 = _765 * _759;
  float _767 = _766 * _748;
  float _768 = _767 + _742;
  float _769 = saturate(_768);
  float _770 = _766 * _750;
  float _771 = _770 + _744;
  float _772 = saturate(_771);
  float _773 = _766 * _752;
  float _774 = _773 + _746;
  float _775 = saturate(_774);
  float _776 = _775 * _624;
  float _777 = _769 * _622;
  float _778 = _772 * _623;
  float _779 = _674 - _777;
  float _780 = _779 - _778;
  float _781 = _780 - _776;
  float _782 = saturate(_781);
  float _783 = _782 * _619;
  float _784 = _783 + _769;
  float _785 = saturate(_784);
  float _786 = _782 * _620;
  float _787 = _786 + _772;
  float _788 = saturate(_787);
  float _789 = _782 * _621;
  float _790 = _789 + _775;
  float _791 = saturate(_790);
  if (!_536) {
    float _793 = _785 * _595;
    float _794 = _788 * _596;
    float _795 = _791 * _597;
    float _796 = _794 + _793;
    float _797 = _796 + _795;
    float _798 = _788 * _593;
    float _799 = _785 * _592;
    float _800 = _791 * _594;
    float _801 = _798 + _799;
    float _802 = _801 + _800;
    float _803 = _791 * _591;
    float _804 = _788 * _590;
    float _805 = _785 * _589;
    float _806 = _804 + _805;
    float _807 = _806 + _803;
    if (!_534) {
      float _809 = saturate(_797);
      float _810 = saturate(_802);
      float _811 = saturate(_807);
      _813 = _811;
      _814 = _810;
      _815 = _809;
    } else {
      _813 = _807;
      _814 = _802;
      _815 = _797;
    }
  } else {
    _813 = _791;
    _814 = _788;
    _815 = _785;
  }
  if (!_531) {
    float _817 = _815 * _595;
    float _818 = _814 * _595;
    float _819 = _813 * _595;
    _821 = _819;
    _822 = _818;
    _823 = _817;
  } else {
    _821 = _813;
    _822 = _814;
    _823 = _815;
  }
  if (_404) {
    float _827 = cb1_018z * 9.999999747378752e-05f;
    float _828 = _827 * _823;
    float _829 = _827 * _822;
    float _830 = _827 * _821;
    float _832 = 5000.0f / cb1_018y;
    float _833 = _828 * _832;
    float _834 = _829 * _832;
    float _835 = _830 * _832;
    _837 = _833;
    _838 = _834;
    _839 = _835;
  } else {
    _837 = _823;
    _838 = _822;
    _839 = _821;
  }
  float _840 = _837 * 1.6047500371932983f;
  float _841 = mad(-0.5310800075531006f, _838, _840);
  float _842 = mad(-0.07366999983787537f, _839, _841);
  float _843 = _837 * -0.10208000242710114f;
  float _844 = mad(1.1081299781799316f, _838, _843);
  float _845 = mad(-0.006049999967217445f, _839, _844);
  float _846 = _837 * -0.0032599999103695154f;
  float _847 = mad(-0.07275000214576721f, _838, _846);
  float _848 = mad(1.0760200023651123f, _839, _847);
  if (_404) {
    // float _850 = max(_842, 0.0f);
    // float _851 = max(_845, 0.0f);
    // float _852 = max(_848, 0.0f);
    // bool _853 = !(_850 >= 0.0030399328097701073f);
    // if (!_853) {
    //   float _855 = abs(_850);
    //   float _856 = log2(_855);
    //   float _857 = _856 * 0.4166666567325592f;
    //   float _858 = exp2(_857);
    //   float _859 = _858 * 1.0549999475479126f;
    //   float _860 = _859 + -0.054999999701976776f;
    //   _864 = _860;
    // } else {
    //   float _862 = _850 * 12.923210144042969f;
    //   _864 = _862;
    // }
    // bool _865 = !(_851 >= 0.0030399328097701073f);
    // if (!_865) {
    //   float _867 = abs(_851);
    //   float _868 = log2(_867);
    //   float _869 = _868 * 0.4166666567325592f;
    //   float _870 = exp2(_869);
    //   float _871 = _870 * 1.0549999475479126f;
    //   float _872 = _871 + -0.054999999701976776f;
    //   _876 = _872;
    // } else {
    //   float _874 = _851 * 12.923210144042969f;
    //   _876 = _874;
    // }
    // bool _877 = !(_852 >= 0.0030399328097701073f);
    // if (!_877) {
    //   float _879 = abs(_852);
    //   float _880 = log2(_879);
    //   float _881 = _880 * 0.4166666567325592f;
    //   float _882 = exp2(_881);
    //   float _883 = _882 * 1.0549999475479126f;
    //   float _884 = _883 + -0.054999999701976776f;
    //   _957 = _864;
    //   _958 = _876;
    //   _959 = _884;
    // } else {
    //   float _886 = _852 * 12.923210144042969f;
    //   _957 = _864;
    //   _958 = _876;
    //   _959 = _886;
    // }
    _957 = renodx::color::srgb::EncodeSafe(_842);
    _958 = renodx::color::srgb::EncodeSafe(_845);
    _959 = renodx::color::srgb::EncodeSafe(_848);

  } else {
    float _888 = saturate(_842);
    float _889 = saturate(_845);
    float _890 = saturate(_848);
    bool _891 = ((uint)(cb1_018w) == -2);
    if (!_891) {
      bool _893 = !(_888 >= 0.0030399328097701073f);
      if (!_893) {
        float _895 = abs(_888);
        float _896 = log2(_895);
        float _897 = _896 * 0.4166666567325592f;
        float _898 = exp2(_897);
        float _899 = _898 * 1.0549999475479126f;
        float _900 = _899 + -0.054999999701976776f;
        _904 = _900;
      } else {
        float _902 = _888 * 12.923210144042969f;
        _904 = _902;
      }
      bool _905 = !(_889 >= 0.0030399328097701073f);
      if (!_905) {
        float _907 = abs(_889);
        float _908 = log2(_907);
        float _909 = _908 * 0.4166666567325592f;
        float _910 = exp2(_909);
        float _911 = _910 * 1.0549999475479126f;
        float _912 = _911 + -0.054999999701976776f;
        _916 = _912;
      } else {
        float _914 = _889 * 12.923210144042969f;
        _916 = _914;
      }
      bool _917 = !(_890 >= 0.0030399328097701073f);
      if (!_917) {
        float _919 = abs(_890);
        float _920 = log2(_919);
        float _921 = _920 * 0.4166666567325592f;
        float _922 = exp2(_921);
        float _923 = _922 * 1.0549999475479126f;
        float _924 = _923 + -0.054999999701976776f;
        _928 = _904;
        _929 = _916;
        _930 = _924;
      } else {
        float _926 = _890 * 12.923210144042969f;
        _928 = _904;
        _929 = _916;
        _930 = _926;
      }
    } else {
      _928 = _888;
      _929 = _889;
      _930 = _890;
    }
    float _935 = abs(_928);
    float _936 = abs(_929);
    float _937 = abs(_930);
    float _938 = log2(_935);
    float _939 = log2(_936);
    float _940 = log2(_937);
    float _941 = _938 * cb2_000z;
    float _942 = _939 * cb2_000z;
    float _943 = _940 * cb2_000z;
    float _944 = exp2(_941);
    float _945 = exp2(_942);
    float _946 = exp2(_943);
    float _947 = _944 * cb2_000y;
    float _948 = _945 * cb2_000y;
    float _949 = _946 * cb2_000y;
    float _950 = _947 + cb2_000x;
    float _951 = _948 + cb2_000x;
    float _952 = _949 + cb2_000x;
    float _953 = saturate(_950);
    float _954 = saturate(_951);
    float _955 = saturate(_952);
    _957 = _953;
    _958 = _954;
    _959 = _955;
  }
  float _960 = dot(float3(_957, _958, _959), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _957;
  SV_Target.y = _958;
  SV_Target.z = _959;
  SV_Target.w = _960;
  SV_Target_1.x = _960;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
