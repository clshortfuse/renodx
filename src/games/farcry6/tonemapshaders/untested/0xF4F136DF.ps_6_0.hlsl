#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _23 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _27 = _23.x * 6.283199787139893f;
  float _28 = cos(_27);
  float _29 = sin(_27);
  float _30 = _28 * _23.z;
  float _31 = _29 * _23.z;
  float _32 = _30 + TEXCOORD0_centroid.x;
  float _33 = _31 + TEXCOORD0_centroid.y;
  float _34 = _32 * 10.0f;
  float _35 = 10.0f - _34;
  float _36 = min(_34, _35);
  float _37 = saturate(_36);
  float _38 = _37 * _30;
  float _39 = _33 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _31;
  float _44 = _38 + TEXCOORD0_centroid.x;
  float _45 = _43 + TEXCOORD0_centroid.y;
  float4 _46 = t6.SampleLevel(s2_space2, float2(_44, _45), 0.0f);
  float _48 = _46.w * _38;
  float _49 = _46.w * _43;
  float _50 = 1.0f - _23.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _57 = cb2_015x * TEXCOORD0_centroid.x;
  float _58 = cb2_015y * TEXCOORD0_centroid.y;
  float _61 = _57 + cb2_015z;
  float _62 = _58 + cb2_015w;
  float4 _63 = t7.SampleLevel(s0_space2, float2(_61, _62), 0.0f);
  float _67 = saturate(_63.x);
  float _68 = saturate(_63.z);
  float _71 = cb2_026x * _68;
  float _72 = _67 * 6.283199787139893f;
  float _73 = cos(_72);
  float _74 = sin(_72);
  float _75 = _71 * _73;
  float _76 = _74 * _71;
  float _77 = 1.0f - _63.y;
  float _78 = saturate(_77);
  float _79 = _75 * _78;
  float _80 = _76 * _78;
  float _81 = _52 + TEXCOORD0_centroid.x;
  float _82 = _81 + _79;
  float _83 = _53 + TEXCOORD0_centroid.y;
  float _84 = _83 + _80;
  float4 _85 = t6.SampleLevel(s2_space2, float2(_82, _84), 0.0f);
  bool _87 = (_85.y > 0.0f);
  float _88 = select(_87, TEXCOORD0_centroid.x, _82);
  float _89 = select(_87, TEXCOORD0_centroid.y, _84);
  float4 _90 = t1.SampleLevel(s4_space2, float2(_88, _89), 0.0f);
  float _94 = max(_90.x, 0.0f);
  float _95 = max(_90.y, 0.0f);
  float _96 = max(_90.z, 0.0f);
  float _97 = min(_94, 65000.0f);
  float _98 = min(_95, 65000.0f);
  float _99 = min(_96, 65000.0f);
  float4 _100 = t3.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _105 = max(_100.x, 0.0f);
  float _106 = max(_100.y, 0.0f);
  float _107 = max(_100.z, 0.0f);
  float _108 = max(_100.w, 0.0f);
  float _109 = min(_105, 5000.0f);
  float _110 = min(_106, 5000.0f);
  float _111 = min(_107, 5000.0f);
  float _112 = min(_108, 5000.0f);
  float _115 = _21.x * cb0_028z;
  float _116 = _115 + cb0_028x;
  float _117 = cb2_027w / _116;
  float _118 = 1.0f - _117;
  float _119 = abs(_118);
  float _121 = cb2_027y * _119;
  float _123 = _121 - cb2_027z;
  float _124 = saturate(_123);
  float _125 = max(_124, _112);
  float _126 = saturate(_125);
  float _130 = cb2_013x * _88;
  float _131 = cb2_013y * _89;
  float _134 = _130 + cb2_013z;
  float _135 = _131 + cb2_013w;
  float _138 = dot(float2(_134, _135), float2(_134, _135));
  float _139 = abs(_138);
  float _140 = log2(_139);
  float _141 = _140 * cb2_014x;
  float _142 = exp2(_141);
  float _143 = saturate(_142);
  float _147 = cb2_011x * _88;
  float _148 = cb2_011y * _89;
  float _151 = _147 + cb2_011z;
  float _152 = _148 + cb2_011w;
  float _153 = _151 * _143;
  float _154 = _152 * _143;
  float _155 = _153 + _88;
  float _156 = _154 + _89;
  float _160 = cb2_012x * _88;
  float _161 = cb2_012y * _89;
  float _164 = _160 + cb2_012z;
  float _165 = _161 + cb2_012w;
  float _166 = _164 * _143;
  float _167 = _165 * _143;
  float _168 = _166 + _88;
  float _169 = _167 + _89;
  float4 _170 = t1.SampleLevel(s2_space2, float2(_155, _156), 0.0f);
  float _174 = max(_170.x, 0.0f);
  float _175 = max(_170.y, 0.0f);
  float _176 = max(_170.z, 0.0f);
  float _177 = min(_174, 65000.0f);
  float _178 = min(_175, 65000.0f);
  float _179 = min(_176, 65000.0f);
  float4 _180 = t1.SampleLevel(s2_space2, float2(_168, _169), 0.0f);
  float _184 = max(_180.x, 0.0f);
  float _185 = max(_180.y, 0.0f);
  float _186 = max(_180.z, 0.0f);
  float _187 = min(_184, 65000.0f);
  float _188 = min(_185, 65000.0f);
  float _189 = min(_186, 65000.0f);
  float4 _190 = t3.SampleLevel(s2_space2, float2(_155, _156), 0.0f);
  float _194 = max(_190.x, 0.0f);
  float _195 = max(_190.y, 0.0f);
  float _196 = max(_190.z, 0.0f);
  float _197 = min(_194, 5000.0f);
  float _198 = min(_195, 5000.0f);
  float _199 = min(_196, 5000.0f);
  float4 _200 = t3.SampleLevel(s2_space2, float2(_168, _169), 0.0f);
  float _204 = max(_200.x, 0.0f);
  float _205 = max(_200.y, 0.0f);
  float _206 = max(_200.z, 0.0f);
  float _207 = min(_204, 5000.0f);
  float _208 = min(_205, 5000.0f);
  float _209 = min(_206, 5000.0f);
  float _214 = 1.0f - cb2_009x;
  float _215 = 1.0f - cb2_009y;
  float _216 = 1.0f - cb2_009z;
  float _221 = _214 - cb2_010x;
  float _222 = _215 - cb2_010y;
  float _223 = _216 - cb2_010z;
  float _224 = saturate(_221);
  float _225 = saturate(_222);
  float _226 = saturate(_223);
  float _227 = _224 * _97;
  float _228 = _225 * _98;
  float _229 = _226 * _99;
  float _230 = cb2_009x * _177;
  float _231 = cb2_009y * _178;
  float _232 = cb2_009z * _179;
  float _233 = _230 + _227;
  float _234 = _231 + _228;
  float _235 = _232 + _229;
  float _236 = cb2_010x * _187;
  float _237 = cb2_010y * _188;
  float _238 = cb2_010z * _189;
  float _239 = _233 + _236;
  float _240 = _234 + _237;
  float _241 = _235 + _238;
  float _242 = _224 * _109;
  float _243 = _225 * _110;
  float _244 = _226 * _111;
  float _245 = cb2_009x * _197;
  float _246 = cb2_009y * _198;
  float _247 = cb2_009z * _199;
  float _248 = cb2_010x * _207;
  float _249 = cb2_010y * _208;
  float _250 = cb2_010z * _209;
  float4 _251 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _255 = _242 - _239;
  float _256 = _255 + _245;
  float _257 = _256 + _248;
  float _258 = _243 - _240;
  float _259 = _258 + _246;
  float _260 = _259 + _249;
  float _261 = _244 - _241;
  float _262 = _261 + _247;
  float _263 = _262 + _250;
  float _264 = _257 * _126;
  float _265 = _260 * _126;
  float _266 = _263 * _126;
  float _267 = _264 + _239;
  float _268 = _265 + _240;
  float _269 = _266 + _241;
  float _270 = dot(float3(_267, _268, _269), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _274 = t0[0].SExposureData_020;
  float _276 = t0[0].SExposureData_004;
  float _278 = cb2_018x * 0.5f;
  float _279 = _278 * cb2_018y;
  float _280 = _276.x - _279;
  float _281 = cb2_018y * cb2_018x;
  float _282 = 1.0f / _281;
  float _283 = _280 * _282;
  float _284 = _270 / _274.x;
  float _285 = _284 * 5464.01611328125f;
  float _286 = _285 + 9.99999993922529e-09f;
  float _287 = log2(_286);
  float _288 = _287 - _280;
  float _289 = _288 * _282;
  float _290 = saturate(_289);
  float2 _291 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _290), 0.0f);
  float _294 = max(_291.y, 1.0000000116860974e-07f);
  float _295 = _291.x / _294;
  float _296 = _295 + _283;
  float _297 = _296 / _282;
  float _298 = _297 - _276.x;
  float _299 = -0.0f - _298;
  float _301 = _299 - cb2_027x;
  float _302 = max(0.0f, _301);
  float _304 = cb2_026z * _302;
  float _305 = _298 - cb2_027x;
  float _306 = max(0.0f, _305);
  float _308 = cb2_026w * _306;
  bool _309 = (_298 < 0.0f);
  float _310 = select(_309, _304, _308);
  float _311 = exp2(_310);
  float _312 = _311 * _267;
  float _313 = _311 * _268;
  float _314 = _311 * _269;
  float _319 = cb2_024y * _251.x;
  float _320 = cb2_024z * _251.y;
  float _321 = cb2_024w * _251.z;
  float _322 = _319 + _312;
  float _323 = _320 + _313;
  float _324 = _321 + _314;
  float _329 = _322 * cb2_025x;
  float _330 = _323 * cb2_025y;
  float _331 = _324 * cb2_025z;
  float _332 = dot(float3(_329, _330, _331), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _333 = t0[0].SExposureData_012;
  float _335 = _332 * 5464.01611328125f;
  float _336 = _335 * _333.x;
  float _337 = _336 + 9.99999993922529e-09f;
  float _338 = log2(_337);
  float _339 = _338 + 16.929765701293945f;
  float _340 = _339 * 0.05734497308731079f;
  float _341 = saturate(_340);
  float _342 = _341 * _341;
  float _343 = _341 * 2.0f;
  float _344 = 3.0f - _343;
  float _345 = _342 * _344;
  float _346 = _330 * 0.8450999855995178f;
  float _347 = _331 * 0.14589999616146088f;
  float _348 = _346 + _347;
  float _349 = _348 * 2.4890189170837402f;
  float _350 = _348 * 0.3754962384700775f;
  float _351 = _348 * 2.811495304107666f;
  float _352 = _348 * 5.519708156585693f;
  float _353 = _332 - _349;
  float _354 = _345 * _353;
  float _355 = _354 + _349;
  float _356 = _345 * 0.5f;
  float _357 = _356 + 0.5f;
  float _358 = _357 * _353;
  float _359 = _358 + _349;
  float _360 = _329 - _350;
  float _361 = _330 - _351;
  float _362 = _331 - _352;
  float _363 = _357 * _360;
  float _364 = _357 * _361;
  float _365 = _357 * _362;
  float _366 = _363 + _350;
  float _367 = _364 + _351;
  float _368 = _365 + _352;
  float _369 = 1.0f / _359;
  float _370 = _355 * _369;
  float _371 = _370 * _366;
  float _372 = _370 * _367;
  float _373 = _370 * _368;
  float _377 = cb2_020x * TEXCOORD0_centroid.x;
  float _378 = cb2_020y * TEXCOORD0_centroid.y;
  float _381 = _377 + cb2_020z;
  float _382 = _378 + cb2_020w;
  float _385 = dot(float2(_381, _382), float2(_381, _382));
  float _386 = 1.0f - _385;
  float _387 = saturate(_386);
  float _388 = log2(_387);
  float _389 = _388 * cb2_021w;
  float _390 = exp2(_389);
  float _394 = _371 - cb2_021x;
  float _395 = _372 - cb2_021y;
  float _396 = _373 - cb2_021z;
  float _397 = _394 * _390;
  float _398 = _395 * _390;
  float _399 = _396 * _390;
  float _400 = _397 + cb2_021x;
  float _401 = _398 + cb2_021y;
  float _402 = _399 + cb2_021z;
  float _403 = t0[0].SExposureData_000;
  float _405 = max(_274.x, 0.0010000000474974513f);
  float _406 = 1.0f / _405;
  float _407 = _406 * _403.x;
  bool _410 = ((uint)(cb2_069y) == 0);
  float _416;
  float _417;
  float _418;
  float _472;
  float _473;
  float _474;
  float _504;
  float _505;
  float _506;
  float _607;
  float _608;
  float _609;
  float _634;
  float _646;
  float _674;
  float _686;
  float _698;
  float _699;
  float _700;
  float _727;
  float _728;
  float _729;
  if (!_410) {
    float _412 = _407 * _400;
    float _413 = _407 * _401;
    float _414 = _407 * _402;
    _416 = _412;
    _417 = _413;
    _418 = _414;
  } else {
    _416 = _400;
    _417 = _401;
    _418 = _402;
  }
  float _419 = _416 * 0.6130970120429993f;
  float _420 = mad(0.33952298760414124f, _417, _419);
  float _421 = mad(0.04737899824976921f, _418, _420);
  float _422 = _416 * 0.07019399851560593f;
  float _423 = mad(0.9163540005683899f, _417, _422);
  float _424 = mad(0.013451999984681606f, _418, _423);
  float _425 = _416 * 0.02061600051820278f;
  float _426 = mad(0.10956999659538269f, _417, _425);
  float _427 = mad(0.8698149919509888f, _418, _426);
  float _428 = log2(_421);
  float _429 = log2(_424);
  float _430 = log2(_427);
  float _431 = _428 * 0.04211956635117531f;
  float _432 = _429 * 0.04211956635117531f;
  float _433 = _430 * 0.04211956635117531f;
  float _434 = _431 + 0.6252607107162476f;
  float _435 = _432 + 0.6252607107162476f;
  float _436 = _433 + 0.6252607107162476f;
  float4 _437 = t5.SampleLevel(s2_space2, float3(_434, _435, _436), 0.0f);
  bool _443 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_443 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _447 = cb2_017x * _437.x;
    float _448 = cb2_017x * _437.y;
    float _449 = cb2_017x * _437.z;
    float _451 = _447 + cb2_017y;
    float _452 = _448 + cb2_017y;
    float _453 = _449 + cb2_017y;
    float _454 = exp2(_451);
    float _455 = exp2(_452);
    float _456 = exp2(_453);
    float _457 = _454 + 1.0f;
    float _458 = _455 + 1.0f;
    float _459 = _456 + 1.0f;
    float _460 = 1.0f / _457;
    float _461 = 1.0f / _458;
    float _462 = 1.0f / _459;
    float _464 = cb2_017z * _460;
    float _465 = cb2_017z * _461;
    float _466 = cb2_017z * _462;
    float _468 = _464 + cb2_017w;
    float _469 = _465 + cb2_017w;
    float _470 = _466 + cb2_017w;
    _472 = _468;
    _473 = _469;
    _474 = _470;
  } else {
    _472 = _437.x;
    _473 = _437.y;
    _474 = _437.z;
  }
  float _475 = _472 * 23.0f;
  float _476 = _475 + -14.473931312561035f;
  float _477 = exp2(_476);
  float _478 = _473 * 23.0f;
  float _479 = _478 + -14.473931312561035f;
  float _480 = exp2(_479);
  float _481 = _474 * 23.0f;
  float _482 = _481 + -14.473931312561035f;
  float _483 = exp2(_482);
  float _489 = cb2_016x - _477;
  float _490 = cb2_016y - _480;
  float _491 = cb2_016z - _483;
  float _492 = _489 * cb2_016w;
  float _493 = _490 * cb2_016w;
  float _494 = _491 * cb2_016w;
  float _495 = _492 + _477;
  float _496 = _493 + _480;
  float _497 = _494 + _483;
  if (_443 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _500 = cb2_024x * _495;
    float _501 = cb2_024x * _496;
    float _502 = cb2_024x * _497;
    _504 = _500;
    _505 = _501;
    _506 = _502;
  } else {
    _504 = _495;
    _505 = _496;
    _506 = _497;
  }
  float _507 = _504 * 0.9708889722824097f;
  float _508 = mad(0.026962999254465103f, _505, _507);
  float _509 = mad(0.002148000057786703f, _506, _508);
  float _510 = _504 * 0.01088900025933981f;
  float _511 = mad(0.9869629740715027f, _505, _510);
  float _512 = mad(0.002148000057786703f, _506, _511);
  float _513 = mad(0.026962999254465103f, _505, _510);
  float _514 = mad(0.9621480107307434f, _506, _513);
  if (_443) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _519 = cb1_018y * 0.10000000149011612f;
        float _520 = log2(cb1_018z);
        float _521 = _520 + -13.287712097167969f;
        float _522 = _521 * 1.4929734468460083f;
        float _523 = _522 + 18.0f;
        float _524 = exp2(_523);
        float _525 = _524 * 0.18000000715255737f;
        float _526 = abs(_525);
        float _527 = log2(_526);
        float _528 = _527 * 1.5f;
        float _529 = exp2(_528);
        float _530 = _529 * _519;
        float _531 = _530 / cb1_018z;
        float _532 = _531 + -0.07636754959821701f;
        float _533 = _527 * 1.2750000953674316f;
        float _534 = exp2(_533);
        float _535 = _534 * 0.07636754959821701f;
        float _536 = cb1_018y * 0.011232397519052029f;
        float _537 = _536 * _529;
        float _538 = _537 / cb1_018z;
        float _539 = _535 - _538;
        float _540 = _534 + -0.11232396960258484f;
        float _541 = _540 * _519;
        float _542 = _541 / cb1_018z;
        float _543 = _542 * cb1_018z;
        float _544 = abs(_509);
        float _545 = abs(_512);
        float _546 = abs(_514);
        float _547 = log2(_544);
        float _548 = log2(_545);
        float _549 = log2(_546);
        float _550 = _547 * 1.5f;
        float _551 = _548 * 1.5f;
        float _552 = _549 * 1.5f;
        float _553 = exp2(_550);
        float _554 = exp2(_551);
        float _555 = exp2(_552);
        float _556 = _553 * _543;
        float _557 = _554 * _543;
        float _558 = _555 * _543;
        float _559 = _547 * 1.2750000953674316f;
        float _560 = _548 * 1.2750000953674316f;
        float _561 = _549 * 1.2750000953674316f;
        float _562 = exp2(_559);
        float _563 = exp2(_560);
        float _564 = exp2(_561);
        float _565 = _562 * _532;
        float _566 = _563 * _532;
        float _567 = _564 * _532;
        float _568 = _565 + _539;
        float _569 = _566 + _539;
        float _570 = _567 + _539;
        float _571 = _556 / _568;
        float _572 = _557 / _569;
        float _573 = _558 / _570;
        float _574 = _571 * 9.999999747378752e-05f;
        float _575 = _572 * 9.999999747378752e-05f;
        float _576 = _573 * 9.999999747378752e-05f;
        float _577 = 5000.0f / cb1_018y;
        float _578 = _574 * _577;
        float _579 = _575 * _577;
        float _580 = _576 * _577;
        _607 = _578;
        _608 = _579;
        _609 = _580;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_509, _512, _514));
      _607 = tonemapped.x, _608 = tonemapped.y, _609 = tonemapped.z;
    }
      } else {
        float _582 = _509 + 0.020616600289940834f;
        float _583 = _512 + 0.020616600289940834f;
        float _584 = _514 + 0.020616600289940834f;
        float _585 = _582 * _509;
        float _586 = _583 * _512;
        float _587 = _584 * _514;
        float _588 = _585 + -7.456949970219284e-05f;
        float _589 = _586 + -7.456949970219284e-05f;
        float _590 = _587 + -7.456949970219284e-05f;
        float _591 = _509 * 0.9837960004806519f;
        float _592 = _512 * 0.9837960004806519f;
        float _593 = _514 * 0.9837960004806519f;
        float _594 = _591 + 0.4336790144443512f;
        float _595 = _592 + 0.4336790144443512f;
        float _596 = _593 + 0.4336790144443512f;
        float _597 = _594 * _509;
        float _598 = _595 * _512;
        float _599 = _596 * _514;
        float _600 = _597 + 0.24617899954319f;
        float _601 = _598 + 0.24617899954319f;
        float _602 = _599 + 0.24617899954319f;
        float _603 = _588 / _600;
        float _604 = _589 / _601;
        float _605 = _590 / _602;
        _607 = _603;
        _608 = _604;
        _609 = _605;
      }
      float _610 = _607 * 1.6047500371932983f;
      float _611 = mad(-0.5310800075531006f, _608, _610);
      float _612 = mad(-0.07366999983787537f, _609, _611);
      float _613 = _607 * -0.10208000242710114f;
      float _614 = mad(1.1081299781799316f, _608, _613);
      float _615 = mad(-0.006049999967217445f, _609, _614);
      float _616 = _607 * -0.0032599999103695154f;
      float _617 = mad(-0.07275000214576721f, _608, _616);
      float _618 = mad(1.0760200023651123f, _609, _617);
      if (_443) {
        // float _620 = max(_612, 0.0f);
        // float _621 = max(_615, 0.0f);
        // float _622 = max(_618, 0.0f);
        // bool _623 = !(_620 >= 0.0030399328097701073f);
        // if (!_623) {
        //   float _625 = abs(_620);
        //   float _626 = log2(_625);
        //   float _627 = _626 * 0.4166666567325592f;
        //   float _628 = exp2(_627);
        //   float _629 = _628 * 1.0549999475479126f;
        //   float _630 = _629 + -0.054999999701976776f;
        //   _634 = _630;
        // } else {
        //   float _632 = _620 * 12.923210144042969f;
        //   _634 = _632;
        // }
        // bool _635 = !(_621 >= 0.0030399328097701073f);
        // if (!_635) {
        //   float _637 = abs(_621);
        //   float _638 = log2(_637);
        //   float _639 = _638 * 0.4166666567325592f;
        //   float _640 = exp2(_639);
        //   float _641 = _640 * 1.0549999475479126f;
        //   float _642 = _641 + -0.054999999701976776f;
        //   _646 = _642;
        // } else {
        //   float _644 = _621 * 12.923210144042969f;
        //   _646 = _644;
        // }
        // bool _647 = !(_622 >= 0.0030399328097701073f);
        // if (!_647) {
        //   float _649 = abs(_622);
        //   float _650 = log2(_649);
        //   float _651 = _650 * 0.4166666567325592f;
        //   float _652 = exp2(_651);
        //   float _653 = _652 * 1.0549999475479126f;
        //   float _654 = _653 + -0.054999999701976776f;
        //   _727 = _634;
        //   _728 = _646;
        //   _729 = _654;
        // } else {
        //   float _656 = _622 * 12.923210144042969f;
        //   _727 = _634;
        //   _728 = _646;
        //   _729 = _656;
        // }
        _727 = renodx::color::srgb::EncodeSafe(_612);
        _728 = renodx::color::srgb::EncodeSafe(_615);
        _729 = renodx::color::srgb::EncodeSafe(_618);

      } else {
        float _658 = saturate(_612);
        float _659 = saturate(_615);
        float _660 = saturate(_618);
        bool _661 = ((uint)(cb1_018w) == -2);
        if (!_661) {
          bool _663 = !(_658 >= 0.0030399328097701073f);
          if (!_663) {
            float _665 = abs(_658);
            float _666 = log2(_665);
            float _667 = _666 * 0.4166666567325592f;
            float _668 = exp2(_667);
            float _669 = _668 * 1.0549999475479126f;
            float _670 = _669 + -0.054999999701976776f;
            _674 = _670;
          } else {
            float _672 = _658 * 12.923210144042969f;
            _674 = _672;
          }
          bool _675 = !(_659 >= 0.0030399328097701073f);
          if (!_675) {
            float _677 = abs(_659);
            float _678 = log2(_677);
            float _679 = _678 * 0.4166666567325592f;
            float _680 = exp2(_679);
            float _681 = _680 * 1.0549999475479126f;
            float _682 = _681 + -0.054999999701976776f;
            _686 = _682;
          } else {
            float _684 = _659 * 12.923210144042969f;
            _686 = _684;
          }
          bool _687 = !(_660 >= 0.0030399328097701073f);
          if (!_687) {
            float _689 = abs(_660);
            float _690 = log2(_689);
            float _691 = _690 * 0.4166666567325592f;
            float _692 = exp2(_691);
            float _693 = _692 * 1.0549999475479126f;
            float _694 = _693 + -0.054999999701976776f;
            _698 = _674;
            _699 = _686;
            _700 = _694;
          } else {
            float _696 = _660 * 12.923210144042969f;
            _698 = _674;
            _699 = _686;
            _700 = _696;
          }
        } else {
          _698 = _658;
          _699 = _659;
          _700 = _660;
        }
        float _705 = abs(_698);
        float _706 = abs(_699);
        float _707 = abs(_700);
        float _708 = log2(_705);
        float _709 = log2(_706);
        float _710 = log2(_707);
        float _711 = _708 * cb2_000z;
        float _712 = _709 * cb2_000z;
        float _713 = _710 * cb2_000z;
        float _714 = exp2(_711);
        float _715 = exp2(_712);
        float _716 = exp2(_713);
        float _717 = _714 * cb2_000y;
        float _718 = _715 * cb2_000y;
        float _719 = _716 * cb2_000y;
        float _720 = _717 + cb2_000x;
        float _721 = _718 + cb2_000x;
        float _722 = _719 + cb2_000x;
        float _723 = saturate(_720);
        float _724 = saturate(_721);
        float _725 = saturate(_722);
        _727 = _723;
        _728 = _724;
        _729 = _725;
      }
      float _730 = dot(float3(_727, _728, _729), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _727;
      SV_Target.y = _728;
      SV_Target.z = _729;
      SV_Target.w = _730;
      SV_Target_1.x = _730;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
