#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = max(_21.x, 0.0f);
  float _26 = max(_21.y, 0.0f);
  float _27 = max(_21.z, 0.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float _30 = min(_27, 65000.0f);
  float4 _31 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _36 = max(_31.x, 0.0f);
  float _37 = max(_31.y, 0.0f);
  float _38 = max(_31.z, 0.0f);
  float _39 = max(_31.w, 0.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _43 = min(_39, 5000.0f);
  float _46 = _19.x * cb0_028z;
  float _47 = _46 + cb0_028x;
  float _48 = cb2_027w / _47;
  float _49 = 1.0f - _48;
  float _50 = abs(_49);
  float _52 = cb2_027y * _50;
  float _54 = _52 - cb2_027z;
  float _55 = saturate(_54);
  float _56 = max(_55, _43);
  float _57 = saturate(_56);
  float _61 = cb2_006x * TEXCOORD0_centroid.x;
  float _62 = cb2_006y * TEXCOORD0_centroid.y;
  float _65 = _61 + cb2_006z;
  float _66 = _62 + cb2_006w;
  float _70 = cb2_007x * TEXCOORD0_centroid.x;
  float _71 = cb2_007y * TEXCOORD0_centroid.y;
  float _74 = _70 + cb2_007z;
  float _75 = _71 + cb2_007w;
  float _79 = cb2_008x * TEXCOORD0_centroid.x;
  float _80 = cb2_008y * TEXCOORD0_centroid.y;
  float _83 = _79 + cb2_008z;
  float _84 = _80 + cb2_008w;
  float4 _85 = t1.SampleLevel(s2_space2, float2(_65, _66), 0.0f);
  float _87 = max(_85.x, 0.0f);
  float _88 = min(_87, 65000.0f);
  float4 _89 = t1.SampleLevel(s2_space2, float2(_74, _75), 0.0f);
  float _91 = max(_89.y, 0.0f);
  float _92 = min(_91, 65000.0f);
  float4 _93 = t1.SampleLevel(s2_space2, float2(_83, _84), 0.0f);
  float _95 = max(_93.z, 0.0f);
  float _96 = min(_95, 65000.0f);
  float4 _97 = t3.SampleLevel(s2_space2, float2(_65, _66), 0.0f);
  float _99 = max(_97.x, 0.0f);
  float _100 = min(_99, 5000.0f);
  float4 _101 = t3.SampleLevel(s2_space2, float2(_74, _75), 0.0f);
  float _103 = max(_101.y, 0.0f);
  float _104 = min(_103, 5000.0f);
  float4 _105 = t3.SampleLevel(s2_space2, float2(_83, _84), 0.0f);
  float _107 = max(_105.z, 0.0f);
  float _108 = min(_107, 5000.0f);
  float4 _109 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _115 = cb2_005x * _109.x;
  float _116 = cb2_005x * _109.y;
  float _117 = cb2_005x * _109.z;
  float _118 = _88 - _28;
  float _119 = _92 - _29;
  float _120 = _96 - _30;
  float _121 = _115 * _118;
  float _122 = _116 * _119;
  float _123 = _117 * _120;
  float _124 = _121 + _28;
  float _125 = _122 + _29;
  float _126 = _123 + _30;
  float _127 = _100 - _40;
  float _128 = _104 - _41;
  float _129 = _108 - _42;
  float _130 = _115 * _127;
  float _131 = _116 * _128;
  float _132 = _117 * _129;
  float _133 = _130 + _40;
  float _134 = _131 + _41;
  float _135 = _132 + _42;
  float4 _136 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _140 = _133 - _124;
  float _141 = _134 - _125;
  float _142 = _135 - _126;
  float _143 = _140 * _57;
  float _144 = _141 * _57;
  float _145 = _142 * _57;
  float _146 = _143 + _124;
  float _147 = _144 + _125;
  float _148 = _145 + _126;
  float _149 = dot(float3(_146, _147, _148), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _153 = t0[0].SExposureData_020;
  float _155 = t0[0].SExposureData_004;
  float _157 = cb2_018x * 0.5f;
  float _158 = _157 * cb2_018y;
  float _159 = _155.x - _158;
  float _160 = cb2_018y * cb2_018x;
  float _161 = 1.0f / _160;
  float _162 = _159 * _161;
  float _163 = _149 / _153.x;
  float _164 = _163 * 5464.01611328125f;
  float _165 = _164 + 9.99999993922529e-09f;
  float _166 = log2(_165);
  float _167 = _166 - _159;
  float _168 = _167 * _161;
  float _169 = saturate(_168);
  float2 _170 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _169), 0.0f);
  float _173 = max(_170.y, 1.0000000116860974e-07f);
  float _174 = _170.x / _173;
  float _175 = _174 + _162;
  float _176 = _175 / _161;
  float _177 = _176 - _155.x;
  float _178 = -0.0f - _177;
  float _180 = _178 - cb2_027x;
  float _181 = max(0.0f, _180);
  float _184 = cb2_026z * _181;
  float _185 = _177 - cb2_027x;
  float _186 = max(0.0f, _185);
  float _188 = cb2_026w * _186;
  bool _189 = (_177 < 0.0f);
  float _190 = select(_189, _184, _188);
  float _191 = exp2(_190);
  float _192 = _191 * _146;
  float _193 = _191 * _147;
  float _194 = _191 * _148;
  float _199 = cb2_024y * _136.x;
  float _200 = cb2_024z * _136.y;
  float _201 = cb2_024w * _136.z;
  float _202 = _199 + _192;
  float _203 = _200 + _193;
  float _204 = _201 + _194;
  float _209 = _202 * cb2_025x;
  float _210 = _203 * cb2_025y;
  float _211 = _204 * cb2_025z;
  float _212 = dot(float3(_209, _210, _211), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _213 = t0[0].SExposureData_012;
  float _215 = _212 * 5464.01611328125f;
  float _216 = _215 * _213.x;
  float _217 = _216 + 9.99999993922529e-09f;
  float _218 = log2(_217);
  float _219 = _218 + 16.929765701293945f;
  float _220 = _219 * 0.05734497308731079f;
  float _221 = saturate(_220);
  float _222 = _221 * _221;
  float _223 = _221 * 2.0f;
  float _224 = 3.0f - _223;
  float _225 = _222 * _224;
  float _226 = _210 * 0.8450999855995178f;
  float _227 = _211 * 0.14589999616146088f;
  float _228 = _226 + _227;
  float _229 = _228 * 2.4890189170837402f;
  float _230 = _228 * 0.3754962384700775f;
  float _231 = _228 * 2.811495304107666f;
  float _232 = _228 * 5.519708156585693f;
  float _233 = _212 - _229;
  float _234 = _225 * _233;
  float _235 = _234 + _229;
  float _236 = _225 * 0.5f;
  float _237 = _236 + 0.5f;
  float _238 = _237 * _233;
  float _239 = _238 + _229;
  float _240 = _209 - _230;
  float _241 = _210 - _231;
  float _242 = _211 - _232;
  float _243 = _237 * _240;
  float _244 = _237 * _241;
  float _245 = _237 * _242;
  float _246 = _243 + _230;
  float _247 = _244 + _231;
  float _248 = _245 + _232;
  float _249 = 1.0f / _239;
  float _250 = _235 * _249;
  float _251 = _250 * _246;
  float _252 = _250 * _247;
  float _253 = _250 * _248;
  float _257 = cb2_020x * TEXCOORD0_centroid.x;
  float _258 = cb2_020y * TEXCOORD0_centroid.y;
  float _261 = _257 + cb2_020z;
  float _262 = _258 + cb2_020w;
  float _265 = dot(float2(_261, _262), float2(_261, _262));
  float _266 = 1.0f - _265;
  float _267 = saturate(_266);
  float _268 = log2(_267);
  float _269 = _268 * cb2_021w;
  float _270 = exp2(_269);
  float _274 = _251 - cb2_021x;
  float _275 = _252 - cb2_021y;
  float _276 = _253 - cb2_021z;
  float _277 = _274 * _270;
  float _278 = _275 * _270;
  float _279 = _276 * _270;
  float _280 = _277 + cb2_021x;
  float _281 = _278 + cb2_021y;
  float _282 = _279 + cb2_021z;
  float _283 = t0[0].SExposureData_000;
  float _285 = max(_153.x, 0.0010000000474974513f);
  float _286 = 1.0f / _285;
  float _287 = _286 * _283.x;
  bool _290 = ((uint)(cb2_069y) == 0);
  float _296;
  float _297;
  float _298;
  float _352;
  float _353;
  float _354;
  float _384;
  float _385;
  float _386;
  float _536;
  float _573;
  float _574;
  float _575;
  float _604;
  float _605;
  float _606;
  float _687;
  float _688;
  float _689;
  float _695;
  float _696;
  float _697;
  float _711;
  float _712;
  float _713;
  float _738;
  float _750;
  float _778;
  float _790;
  float _802;
  float _803;
  float _804;
  float _831;
  float _832;
  float _833;
  if (!_290) {
    float _292 = _287 * _280;
    float _293 = _287 * _281;
    float _294 = _287 * _282;
    _296 = _292;
    _297 = _293;
    _298 = _294;
  } else {
    _296 = _280;
    _297 = _281;
    _298 = _282;
  }
  float _299 = _296 * 0.6130970120429993f;
  float _300 = mad(0.33952298760414124f, _297, _299);
  float _301 = mad(0.04737899824976921f, _298, _300);
  float _302 = _296 * 0.07019399851560593f;
  float _303 = mad(0.9163540005683899f, _297, _302);
  float _304 = mad(0.013451999984681606f, _298, _303);
  float _305 = _296 * 0.02061600051820278f;
  float _306 = mad(0.10956999659538269f, _297, _305);
  float _307 = mad(0.8698149919509888f, _298, _306);
  float _308 = log2(_301);
  float _309 = log2(_304);
  float _310 = log2(_307);
  float _311 = _308 * 0.04211956635117531f;
  float _312 = _309 * 0.04211956635117531f;
  float _313 = _310 * 0.04211956635117531f;
  float _314 = _311 + 0.6252607107162476f;
  float _315 = _312 + 0.6252607107162476f;
  float _316 = _313 + 0.6252607107162476f;
  float4 _317 = t5.SampleLevel(s2_space2, float3(_314, _315, _316), 0.0f);
  bool _323 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_323 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _327 = cb2_017x * _317.x;
    float _328 = cb2_017x * _317.y;
    float _329 = cb2_017x * _317.z;
    float _331 = _327 + cb2_017y;
    float _332 = _328 + cb2_017y;
    float _333 = _329 + cb2_017y;
    float _334 = exp2(_331);
    float _335 = exp2(_332);
    float _336 = exp2(_333);
    float _337 = _334 + 1.0f;
    float _338 = _335 + 1.0f;
    float _339 = _336 + 1.0f;
    float _340 = 1.0f / _337;
    float _341 = 1.0f / _338;
    float _342 = 1.0f / _339;
    float _344 = cb2_017z * _340;
    float _345 = cb2_017z * _341;
    float _346 = cb2_017z * _342;
    float _348 = _344 + cb2_017w;
    float _349 = _345 + cb2_017w;
    float _350 = _346 + cb2_017w;
    _352 = _348;
    _353 = _349;
    _354 = _350;
  } else {
    _352 = _317.x;
    _353 = _317.y;
    _354 = _317.z;
  }
  float _355 = _352 * 23.0f;
  float _356 = _355 + -14.473931312561035f;
  float _357 = exp2(_356);
  float _358 = _353 * 23.0f;
  float _359 = _358 + -14.473931312561035f;
  float _360 = exp2(_359);
  float _361 = _354 * 23.0f;
  float _362 = _361 + -14.473931312561035f;
  float _363 = exp2(_362);
  float _369 = cb2_016x - _357;
  float _370 = cb2_016y - _360;
  float _371 = cb2_016z - _363;
  float _372 = _369 * cb2_016w;
  float _373 = _370 * cb2_016w;
  float _374 = _371 * cb2_016w;
  float _375 = _372 + _357;
  float _376 = _373 + _360;
  float _377 = _374 + _363;
  if (_323 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _380 = cb2_024x * _375;
    float _381 = cb2_024x * _376;
    float _382 = cb2_024x * _377;
    _384 = _380;
    _385 = _381;
    _386 = _382;
  } else {
    _384 = _375;
    _385 = _376;
    _386 = _377;
  }
  float _389 = _384 * 0.9708889722824097f;
  float _390 = mad(0.026962999254465103f, _385, _389);
  float _391 = mad(0.002148000057786703f, _386, _390);
  float _392 = _384 * 0.01088900025933981f;
  float _393 = mad(0.9869629740715027f, _385, _392);
  float _394 = mad(0.002148000057786703f, _386, _393);
  float _395 = mad(0.026962999254465103f, _385, _392);
  float _396 = mad(0.9621480107307434f, _386, _395);
  float _397 = max(_391, 0.0f);
  float _398 = max(_394, 0.0f);
  float _399 = max(_396, 0.0f);
  float _400 = min(_397, cb2_095y);
  float _401 = min(_398, cb2_095y);
  float _402 = min(_399, cb2_095y);
  bool _405 = ((uint)(cb2_095x) == 0);
  bool _408 = ((uint)(cb2_094w) == 0);
  bool _410 = ((uint)(cb2_094z) == 0);
  bool _412 = ((uint)(cb2_094y) != 0);
  bool _414 = ((uint)(cb2_094x) == 0);
  bool _416 = ((uint)(cb2_069z) != 0);
  float _463 = asfloat((uint)(cb2_075y));
  float _464 = asfloat((uint)(cb2_075z));
  float _465 = asfloat((uint)(cb2_075w));
  float _466 = asfloat((uint)(cb2_074z));
  float _467 = asfloat((uint)(cb2_074w));
  float _468 = asfloat((uint)(cb2_075x));
  float _469 = asfloat((uint)(cb2_073w));
  float _470 = asfloat((uint)(cb2_074x));
  float _471 = asfloat((uint)(cb2_074y));
  float _472 = asfloat((uint)(cb2_077x));
  float _473 = asfloat((uint)(cb2_077y));
  float _474 = asfloat((uint)(cb2_079x));
  float _475 = asfloat((uint)(cb2_079y));
  float _476 = asfloat((uint)(cb2_079z));
  float _477 = asfloat((uint)(cb2_078y));
  float _478 = asfloat((uint)(cb2_078z));
  float _479 = asfloat((uint)(cb2_078w));
  float _480 = asfloat((uint)(cb2_077z));
  float _481 = asfloat((uint)(cb2_077w));
  float _482 = asfloat((uint)(cb2_078x));
  float _483 = asfloat((uint)(cb2_072y));
  float _484 = asfloat((uint)(cb2_072z));
  float _485 = asfloat((uint)(cb2_072w));
  float _486 = asfloat((uint)(cb2_071x));
  float _487 = asfloat((uint)(cb2_071y));
  float _488 = asfloat((uint)(cb2_076x));
  float _489 = asfloat((uint)(cb2_070w));
  float _490 = asfloat((uint)(cb2_070x));
  float _491 = asfloat((uint)(cb2_070y));
  float _492 = asfloat((uint)(cb2_070z));
  float _493 = asfloat((uint)(cb2_073x));
  float _494 = asfloat((uint)(cb2_073y));
  float _495 = asfloat((uint)(cb2_073z));
  float _496 = asfloat((uint)(cb2_071z));
  float _497 = asfloat((uint)(cb2_071w));
  float _498 = asfloat((uint)(cb2_072x));
  float _499 = max(_401, _402);
  float _500 = max(_400, _499);
  float _501 = 1.0f / _500;
  float _502 = _501 * _400;
  float _503 = _501 * _401;
  float _504 = _501 * _402;
  float _505 = abs(_502);
  float _506 = log2(_505);
  float _507 = _506 * _490;
  float _508 = exp2(_507);
  float _509 = abs(_503);
  float _510 = log2(_509);
  float _511 = _510 * _491;
  float _512 = exp2(_511);
  float _513 = abs(_504);
  float _514 = log2(_513);
  float _515 = _514 * _492;
  float _516 = exp2(_515);
  if (_412) {
    float _519 = asfloat((uint)(cb2_076w));
    float _521 = asfloat((uint)(cb2_076z));
    float _523 = asfloat((uint)(cb2_076y));
    float _524 = _521 * _401;
    float _525 = _523 * _400;
    float _526 = _519 * _402;
    float _527 = _525 + _526;
    float _528 = _527 + _524;
    _536 = _528;
  } else {
    float _530 = _497 * _401;
    float _531 = _496 * _400;
    float _532 = _498 * _402;
    float _533 = _530 + _531;
    float _534 = _533 + _532;
    _536 = _534;
  }
  float _537 = abs(_536);
  float _538 = log2(_537);
  float _539 = _538 * _489;
  float _540 = exp2(_539);
  float _541 = log2(_540);
  float _542 = _541 * _488;
  float _543 = exp2(_542);
  float _544 = select(_416, _543, _540);
  float _545 = _544 * _486;
  float _546 = _545 + _487;
  float _547 = 1.0f / _546;
  float _548 = _547 * _540;
  if (_412) {
    if (!_414) {
      float _551 = _508 * _480;
      float _552 = _512 * _481;
      float _553 = _516 * _482;
      float _554 = _552 + _551;
      float _555 = _554 + _553;
      float _556 = _512 * _478;
      float _557 = _508 * _477;
      float _558 = _516 * _479;
      float _559 = _556 + _557;
      float _560 = _559 + _558;
      float _561 = _516 * _476;
      float _562 = _512 * _475;
      float _563 = _508 * _474;
      float _564 = _562 + _563;
      float _565 = _564 + _561;
      float _566 = max(_560, _565);
      float _567 = max(_555, _566);
      float _568 = 1.0f / _567;
      float _569 = _568 * _555;
      float _570 = _568 * _560;
      float _571 = _568 * _565;
      _573 = _569;
      _574 = _570;
      _575 = _571;
    } else {
      _573 = _508;
      _574 = _512;
      _575 = _516;
    }
    float _576 = _573 * _473;
    float _577 = exp2(_576);
    float _578 = _577 * _472;
    float _579 = saturate(_578);
    float _580 = _573 * _472;
    float _581 = _573 - _580;
    float _582 = saturate(_581);
    float _583 = max(_472, _582);
    float _584 = min(_583, _579);
    float _585 = _574 * _473;
    float _586 = exp2(_585);
    float _587 = _586 * _472;
    float _588 = saturate(_587);
    float _589 = _574 * _472;
    float _590 = _574 - _589;
    float _591 = saturate(_590);
    float _592 = max(_472, _591);
    float _593 = min(_592, _588);
    float _594 = _575 * _473;
    float _595 = exp2(_594);
    float _596 = _595 * _472;
    float _597 = saturate(_596);
    float _598 = _575 * _472;
    float _599 = _575 - _598;
    float _600 = saturate(_599);
    float _601 = max(_472, _600);
    float _602 = min(_601, _597);
    _604 = _584;
    _605 = _593;
    _606 = _602;
  } else {
    _604 = _508;
    _605 = _512;
    _606 = _516;
  }
  float _607 = _604 * _496;
  float _608 = _605 * _497;
  float _609 = _608 + _607;
  float _610 = _606 * _498;
  float _611 = _609 + _610;
  float _612 = 1.0f / _611;
  float _613 = _612 * _548;
  float _614 = saturate(_613);
  float _615 = _614 * _604;
  float _616 = saturate(_615);
  float _617 = _614 * _605;
  float _618 = saturate(_617);
  float _619 = _614 * _606;
  float _620 = saturate(_619);
  float _621 = _616 * _483;
  float _622 = _483 - _621;
  float _623 = _618 * _484;
  float _624 = _484 - _623;
  float _625 = _620 * _485;
  float _626 = _485 - _625;
  float _627 = _620 * _498;
  float _628 = _616 * _496;
  float _629 = _618 * _497;
  float _630 = _548 - _628;
  float _631 = _630 - _629;
  float _632 = _631 - _627;
  float _633 = saturate(_632);
  float _634 = _624 * _497;
  float _635 = _622 * _496;
  float _636 = _626 * _498;
  float _637 = _634 + _635;
  float _638 = _637 + _636;
  float _639 = 1.0f / _638;
  float _640 = _639 * _633;
  float _641 = _640 * _622;
  float _642 = _641 + _616;
  float _643 = saturate(_642);
  float _644 = _640 * _624;
  float _645 = _644 + _618;
  float _646 = saturate(_645);
  float _647 = _640 * _626;
  float _648 = _647 + _620;
  float _649 = saturate(_648);
  float _650 = _649 * _498;
  float _651 = _643 * _496;
  float _652 = _646 * _497;
  float _653 = _548 - _651;
  float _654 = _653 - _652;
  float _655 = _654 - _650;
  float _656 = saturate(_655);
  float _657 = _656 * _493;
  float _658 = _657 + _643;
  float _659 = saturate(_658);
  float _660 = _656 * _494;
  float _661 = _660 + _646;
  float _662 = saturate(_661);
  float _663 = _656 * _495;
  float _664 = _663 + _649;
  float _665 = saturate(_664);
  if (!_410) {
    float _667 = _659 * _469;
    float _668 = _662 * _470;
    float _669 = _665 * _471;
    float _670 = _668 + _667;
    float _671 = _670 + _669;
    float _672 = _662 * _467;
    float _673 = _659 * _466;
    float _674 = _665 * _468;
    float _675 = _672 + _673;
    float _676 = _675 + _674;
    float _677 = _665 * _465;
    float _678 = _662 * _464;
    float _679 = _659 * _463;
    float _680 = _678 + _679;
    float _681 = _680 + _677;
    if (!_408) {
      float _683 = saturate(_671);
      float _684 = saturate(_676);
      float _685 = saturate(_681);
      _687 = _685;
      _688 = _684;
      _689 = _683;
    } else {
      _687 = _681;
      _688 = _676;
      _689 = _671;
    }
  } else {
    _687 = _665;
    _688 = _662;
    _689 = _659;
  }
  if (!_405) {
    float _691 = _689 * _469;
    float _692 = _688 * _469;
    float _693 = _687 * _469;
    _695 = _693;
    _696 = _692;
    _697 = _691;
  } else {
    _695 = _687;
    _696 = _688;
    _697 = _689;
  }
  if (_323) {
    float _701 = cb1_018z * 9.999999747378752e-05f;
    float _702 = _701 * _697;
    float _703 = _701 * _696;
    float _704 = _701 * _695;
    float _706 = 5000.0f / cb1_018y;
    float _707 = _702 * _706;
    float _708 = _703 * _706;
    float _709 = _704 * _706;
    _711 = _707;
    _712 = _708;
    _713 = _709;
  } else {
    _711 = _697;
    _712 = _696;
    _713 = _695;
  }
  float _714 = _711 * 1.6047500371932983f;
  float _715 = mad(-0.5310800075531006f, _712, _714);
  float _716 = mad(-0.07366999983787537f, _713, _715);
  float _717 = _711 * -0.10208000242710114f;
  float _718 = mad(1.1081299781799316f, _712, _717);
  float _719 = mad(-0.006049999967217445f, _713, _718);
  float _720 = _711 * -0.0032599999103695154f;
  float _721 = mad(-0.07275000214576721f, _712, _720);
  float _722 = mad(1.0760200023651123f, _713, _721);
  if (_323) {
    // float _724 = max(_716, 0.0f);
    // float _725 = max(_719, 0.0f);
    // float _726 = max(_722, 0.0f);
    // bool _727 = !(_724 >= 0.0030399328097701073f);
    // if (!_727) {
    //   float _729 = abs(_724);
    //   float _730 = log2(_729);
    //   float _731 = _730 * 0.4166666567325592f;
    //   float _732 = exp2(_731);
    //   float _733 = _732 * 1.0549999475479126f;
    //   float _734 = _733 + -0.054999999701976776f;
    //   _738 = _734;
    // } else {
    //   float _736 = _724 * 12.923210144042969f;
    //   _738 = _736;
    // }
    // bool _739 = !(_725 >= 0.0030399328097701073f);
    // if (!_739) {
    //   float _741 = abs(_725);
    //   float _742 = log2(_741);
    //   float _743 = _742 * 0.4166666567325592f;
    //   float _744 = exp2(_743);
    //   float _745 = _744 * 1.0549999475479126f;
    //   float _746 = _745 + -0.054999999701976776f;
    //   _750 = _746;
    // } else {
    //   float _748 = _725 * 12.923210144042969f;
    //   _750 = _748;
    // }
    // bool _751 = !(_726 >= 0.0030399328097701073f);
    // if (!_751) {
    //   float _753 = abs(_726);
    //   float _754 = log2(_753);
    //   float _755 = _754 * 0.4166666567325592f;
    //   float _756 = exp2(_755);
    //   float _757 = _756 * 1.0549999475479126f;
    //   float _758 = _757 + -0.054999999701976776f;
    //   _831 = _738;
    //   _832 = _750;
    //   _833 = _758;
    // } else {
    //   float _760 = _726 * 12.923210144042969f;
    //   _831 = _738;
    //   _832 = _750;
    //   _833 = _760;
    // }
    _831 = renodx::color::srgb::EncodeSafe(_716);
    _832 = renodx::color::srgb::EncodeSafe(_719);
    _833 = renodx::color::srgb::EncodeSafe(_722);

  } else {
    float _762 = saturate(_716);
    float _763 = saturate(_719);
    float _764 = saturate(_722);
    bool _765 = ((uint)(cb1_018w) == -2);
    if (!_765) {
      bool _767 = !(_762 >= 0.0030399328097701073f);
      if (!_767) {
        float _769 = abs(_762);
        float _770 = log2(_769);
        float _771 = _770 * 0.4166666567325592f;
        float _772 = exp2(_771);
        float _773 = _772 * 1.0549999475479126f;
        float _774 = _773 + -0.054999999701976776f;
        _778 = _774;
      } else {
        float _776 = _762 * 12.923210144042969f;
        _778 = _776;
      }
      bool _779 = !(_763 >= 0.0030399328097701073f);
      if (!_779) {
        float _781 = abs(_763);
        float _782 = log2(_781);
        float _783 = _782 * 0.4166666567325592f;
        float _784 = exp2(_783);
        float _785 = _784 * 1.0549999475479126f;
        float _786 = _785 + -0.054999999701976776f;
        _790 = _786;
      } else {
        float _788 = _763 * 12.923210144042969f;
        _790 = _788;
      }
      bool _791 = !(_764 >= 0.0030399328097701073f);
      if (!_791) {
        float _793 = abs(_764);
        float _794 = log2(_793);
        float _795 = _794 * 0.4166666567325592f;
        float _796 = exp2(_795);
        float _797 = _796 * 1.0549999475479126f;
        float _798 = _797 + -0.054999999701976776f;
        _802 = _778;
        _803 = _790;
        _804 = _798;
      } else {
        float _800 = _764 * 12.923210144042969f;
        _802 = _778;
        _803 = _790;
        _804 = _800;
      }
    } else {
      _802 = _762;
      _803 = _763;
      _804 = _764;
    }
    float _809 = abs(_802);
    float _810 = abs(_803);
    float _811 = abs(_804);
    float _812 = log2(_809);
    float _813 = log2(_810);
    float _814 = log2(_811);
    float _815 = _812 * cb2_000z;
    float _816 = _813 * cb2_000z;
    float _817 = _814 * cb2_000z;
    float _818 = exp2(_815);
    float _819 = exp2(_816);
    float _820 = exp2(_817);
    float _821 = _818 * cb2_000y;
    float _822 = _819 * cb2_000y;
    float _823 = _820 * cb2_000y;
    float _824 = _821 + cb2_000x;
    float _825 = _822 + cb2_000x;
    float _826 = _823 + cb2_000x;
    float _827 = saturate(_824);
    float _828 = saturate(_825);
    float _829 = saturate(_826);
    _831 = _827;
    _832 = _828;
    _833 = _829;
  }
  float _834 = dot(float3(_831, _832, _833), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _831;
  SV_Target.y = _832;
  SV_Target.z = _833;
  SV_Target.w = _834;
  SV_Target_1.x = _834;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
