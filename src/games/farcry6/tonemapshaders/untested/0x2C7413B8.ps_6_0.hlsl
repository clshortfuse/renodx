#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _22 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _26 = _22.x * 6.283199787139893f;
  float _27 = cos(_26);
  float _28 = sin(_26);
  float _29 = _27 * _22.z;
  float _30 = _28 * _22.z;
  float _31 = _29 + TEXCOORD0_centroid.x;
  float _32 = _30 + TEXCOORD0_centroid.y;
  float _33 = _31 * 10.0f;
  float _34 = 10.0f - _33;
  float _35 = min(_33, _34);
  float _36 = saturate(_35);
  float _37 = _36 * _29;
  float _38 = _32 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _30;
  float _43 = _37 + TEXCOORD0_centroid.x;
  float _44 = _42 + TEXCOORD0_centroid.y;
  float4 _45 = t7.SampleLevel(s2_space2, float2(_43, _44), 0.0f);
  float _47 = _45.w * _37;
  float _48 = _45.w * _42;
  float _49 = 1.0f - _22.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t7.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  bool _57 = (_55.y > 0.0f);
  float _58 = select(_57, TEXCOORD0_centroid.x, _53);
  float _59 = select(_57, TEXCOORD0_centroid.y, _54);
  float4 _60 = t1.SampleLevel(s4_space2, float2(_58, _59), 0.0f);
  float _64 = max(_60.x, 0.0f);
  float _65 = max(_60.y, 0.0f);
  float _66 = max(_60.z, 0.0f);
  float _67 = min(_64, 65000.0f);
  float _68 = min(_65, 65000.0f);
  float _69 = min(_66, 65000.0f);
  float4 _70 = t3.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  float _75 = max(_70.x, 0.0f);
  float _76 = max(_70.y, 0.0f);
  float _77 = max(_70.z, 0.0f);
  float _78 = max(_70.w, 0.0f);
  float _79 = min(_75, 5000.0f);
  float _80 = min(_76, 5000.0f);
  float _81 = min(_77, 5000.0f);
  float _82 = min(_78, 5000.0f);
  float _85 = _20.x * cb0_028z;
  float _86 = _85 + cb0_028x;
  float _87 = cb2_027w / _86;
  float _88 = 1.0f - _87;
  float _89 = abs(_88);
  float _91 = cb2_027y * _89;
  float _93 = _91 - cb2_027z;
  float _94 = saturate(_93);
  float _95 = max(_94, _82);
  float _96 = saturate(_95);
  float _100 = cb2_006x * _58;
  float _101 = cb2_006y * _59;
  float _104 = _100 + cb2_006z;
  float _105 = _101 + cb2_006w;
  float _109 = cb2_007x * _58;
  float _110 = cb2_007y * _59;
  float _113 = _109 + cb2_007z;
  float _114 = _110 + cb2_007w;
  float _118 = cb2_008x * _58;
  float _119 = cb2_008y * _59;
  float _122 = _118 + cb2_008z;
  float _123 = _119 + cb2_008w;
  float4 _124 = t1.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _126 = max(_124.x, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t1.SampleLevel(s2_space2, float2(_113, _114), 0.0f);
  float _130 = max(_128.y, 0.0f);
  float _131 = min(_130, 65000.0f);
  float4 _132 = t1.SampleLevel(s2_space2, float2(_122, _123), 0.0f);
  float _134 = max(_132.z, 0.0f);
  float _135 = min(_134, 65000.0f);
  float4 _136 = t3.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _138 = max(_136.x, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t3.SampleLevel(s2_space2, float2(_113, _114), 0.0f);
  float _142 = max(_140.y, 0.0f);
  float _143 = min(_142, 5000.0f);
  float4 _144 = t3.SampleLevel(s2_space2, float2(_122, _123), 0.0f);
  float _146 = max(_144.z, 0.0f);
  float _147 = min(_146, 5000.0f);
  float4 _148 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _154 = cb2_005x * _148.x;
  float _155 = cb2_005x * _148.y;
  float _156 = cb2_005x * _148.z;
  float _157 = _127 - _67;
  float _158 = _131 - _68;
  float _159 = _135 - _69;
  float _160 = _154 * _157;
  float _161 = _155 * _158;
  float _162 = _156 * _159;
  float _163 = _160 + _67;
  float _164 = _161 + _68;
  float _165 = _162 + _69;
  float _166 = _139 - _79;
  float _167 = _143 - _80;
  float _168 = _147 - _81;
  float _169 = _154 * _166;
  float _170 = _155 * _167;
  float _171 = _156 * _168;
  float _172 = _169 + _79;
  float _173 = _170 + _80;
  float _174 = _171 + _81;
  float4 _175 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _179 = _172 - _163;
  float _180 = _173 - _164;
  float _181 = _174 - _165;
  float _182 = _179 * _96;
  float _183 = _180 * _96;
  float _184 = _181 * _96;
  float _185 = _182 + _163;
  float _186 = _183 + _164;
  float _187 = _184 + _165;
  float _188 = dot(float3(_185, _186, _187), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _192 = t0[0].SExposureData_020;
  float _194 = t0[0].SExposureData_004;
  float _196 = cb2_018x * 0.5f;
  float _197 = _196 * cb2_018y;
  float _198 = _194.x - _197;
  float _199 = cb2_018y * cb2_018x;
  float _200 = 1.0f / _199;
  float _201 = _198 * _200;
  float _202 = _188 / _192.x;
  float _203 = _202 * 5464.01611328125f;
  float _204 = _203 + 9.99999993922529e-09f;
  float _205 = log2(_204);
  float _206 = _205 - _198;
  float _207 = _206 * _200;
  float _208 = saturate(_207);
  float2 _209 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _208), 0.0f);
  float _212 = max(_209.y, 1.0000000116860974e-07f);
  float _213 = _209.x / _212;
  float _214 = _213 + _201;
  float _215 = _214 / _200;
  float _216 = _215 - _194.x;
  float _217 = -0.0f - _216;
  float _219 = _217 - cb2_027x;
  float _220 = max(0.0f, _219);
  float _223 = cb2_026z * _220;
  float _224 = _216 - cb2_027x;
  float _225 = max(0.0f, _224);
  float _227 = cb2_026w * _225;
  bool _228 = (_216 < 0.0f);
  float _229 = select(_228, _223, _227);
  float _230 = exp2(_229);
  float _231 = _230 * _185;
  float _232 = _230 * _186;
  float _233 = _230 * _187;
  float _238 = cb2_024y * _175.x;
  float _239 = cb2_024z * _175.y;
  float _240 = cb2_024w * _175.z;
  float _241 = _238 + _231;
  float _242 = _239 + _232;
  float _243 = _240 + _233;
  float _248 = _241 * cb2_025x;
  float _249 = _242 * cb2_025y;
  float _250 = _243 * cb2_025z;
  float _251 = dot(float3(_248, _249, _250), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _252 = t0[0].SExposureData_012;
  float _254 = _251 * 5464.01611328125f;
  float _255 = _254 * _252.x;
  float _256 = _255 + 9.99999993922529e-09f;
  float _257 = log2(_256);
  float _258 = _257 + 16.929765701293945f;
  float _259 = _258 * 0.05734497308731079f;
  float _260 = saturate(_259);
  float _261 = _260 * _260;
  float _262 = _260 * 2.0f;
  float _263 = 3.0f - _262;
  float _264 = _261 * _263;
  float _265 = _249 * 0.8450999855995178f;
  float _266 = _250 * 0.14589999616146088f;
  float _267 = _265 + _266;
  float _268 = _267 * 2.4890189170837402f;
  float _269 = _267 * 0.3754962384700775f;
  float _270 = _267 * 2.811495304107666f;
  float _271 = _267 * 5.519708156585693f;
  float _272 = _251 - _268;
  float _273 = _264 * _272;
  float _274 = _273 + _268;
  float _275 = _264 * 0.5f;
  float _276 = _275 + 0.5f;
  float _277 = _276 * _272;
  float _278 = _277 + _268;
  float _279 = _248 - _269;
  float _280 = _249 - _270;
  float _281 = _250 - _271;
  float _282 = _276 * _279;
  float _283 = _276 * _280;
  float _284 = _276 * _281;
  float _285 = _282 + _269;
  float _286 = _283 + _270;
  float _287 = _284 + _271;
  float _288 = 1.0f / _278;
  float _289 = _274 * _288;
  float _290 = _289 * _285;
  float _291 = _289 * _286;
  float _292 = _289 * _287;
  float _296 = cb2_020x * TEXCOORD0_centroid.x;
  float _297 = cb2_020y * TEXCOORD0_centroid.y;
  float _300 = _296 + cb2_020z;
  float _301 = _297 + cb2_020w;
  float _304 = dot(float2(_300, _301), float2(_300, _301));
  float _305 = 1.0f - _304;
  float _306 = saturate(_305);
  float _307 = log2(_306);
  float _308 = _307 * cb2_021w;
  float _309 = exp2(_308);
  float _313 = _290 - cb2_021x;
  float _314 = _291 - cb2_021y;
  float _315 = _292 - cb2_021z;
  float _316 = _313 * _309;
  float _317 = _314 * _309;
  float _318 = _315 * _309;
  float _319 = _316 + cb2_021x;
  float _320 = _317 + cb2_021y;
  float _321 = _318 + cb2_021z;
  float _322 = t0[0].SExposureData_000;
  float _324 = max(_192.x, 0.0010000000474974513f);
  float _325 = 1.0f / _324;
  float _326 = _325 * _322.x;
  bool _329 = ((uint)(cb2_069y) == 0);
  float _335;
  float _336;
  float _337;
  float _391;
  float _392;
  float _393;
  float _423;
  float _424;
  float _425;
  float _575;
  float _612;
  float _613;
  float _614;
  float _643;
  float _644;
  float _645;
  float _726;
  float _727;
  float _728;
  float _734;
  float _735;
  float _736;
  float _750;
  float _751;
  float _752;
  float _777;
  float _789;
  float _817;
  float _829;
  float _841;
  float _842;
  float _843;
  float _870;
  float _871;
  float _872;
  if (!_329) {
    float _331 = _326 * _319;
    float _332 = _326 * _320;
    float _333 = _326 * _321;
    _335 = _331;
    _336 = _332;
    _337 = _333;
  } else {
    _335 = _319;
    _336 = _320;
    _337 = _321;
  }
  float _338 = _335 * 0.6130970120429993f;
  float _339 = mad(0.33952298760414124f, _336, _338);
  float _340 = mad(0.04737899824976921f, _337, _339);
  float _341 = _335 * 0.07019399851560593f;
  float _342 = mad(0.9163540005683899f, _336, _341);
  float _343 = mad(0.013451999984681606f, _337, _342);
  float _344 = _335 * 0.02061600051820278f;
  float _345 = mad(0.10956999659538269f, _336, _344);
  float _346 = mad(0.8698149919509888f, _337, _345);
  float _347 = log2(_340);
  float _348 = log2(_343);
  float _349 = log2(_346);
  float _350 = _347 * 0.04211956635117531f;
  float _351 = _348 * 0.04211956635117531f;
  float _352 = _349 * 0.04211956635117531f;
  float _353 = _350 + 0.6252607107162476f;
  float _354 = _351 + 0.6252607107162476f;
  float _355 = _352 + 0.6252607107162476f;
  float4 _356 = t5.SampleLevel(s2_space2, float3(_353, _354, _355), 0.0f);
  bool _362 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_362 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _366 = cb2_017x * _356.x;
    float _367 = cb2_017x * _356.y;
    float _368 = cb2_017x * _356.z;
    float _370 = _366 + cb2_017y;
    float _371 = _367 + cb2_017y;
    float _372 = _368 + cb2_017y;
    float _373 = exp2(_370);
    float _374 = exp2(_371);
    float _375 = exp2(_372);
    float _376 = _373 + 1.0f;
    float _377 = _374 + 1.0f;
    float _378 = _375 + 1.0f;
    float _379 = 1.0f / _376;
    float _380 = 1.0f / _377;
    float _381 = 1.0f / _378;
    float _383 = cb2_017z * _379;
    float _384 = cb2_017z * _380;
    float _385 = cb2_017z * _381;
    float _387 = _383 + cb2_017w;
    float _388 = _384 + cb2_017w;
    float _389 = _385 + cb2_017w;
    _391 = _387;
    _392 = _388;
    _393 = _389;
  } else {
    _391 = _356.x;
    _392 = _356.y;
    _393 = _356.z;
  }
  float _394 = _391 * 23.0f;
  float _395 = _394 + -14.473931312561035f;
  float _396 = exp2(_395);
  float _397 = _392 * 23.0f;
  float _398 = _397 + -14.473931312561035f;
  float _399 = exp2(_398);
  float _400 = _393 * 23.0f;
  float _401 = _400 + -14.473931312561035f;
  float _402 = exp2(_401);
  float _408 = cb2_016x - _396;
  float _409 = cb2_016y - _399;
  float _410 = cb2_016z - _402;
  float _411 = _408 * cb2_016w;
  float _412 = _409 * cb2_016w;
  float _413 = _410 * cb2_016w;
  float _414 = _411 + _396;
  float _415 = _412 + _399;
  float _416 = _413 + _402;
  if (_362 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _419 = cb2_024x * _414;
    float _420 = cb2_024x * _415;
    float _421 = cb2_024x * _416;
    _423 = _419;
    _424 = _420;
    _425 = _421;
  } else {
    _423 = _414;
    _424 = _415;
    _425 = _416;
  }
  float _428 = _423 * 0.9708889722824097f;
  float _429 = mad(0.026962999254465103f, _424, _428);
  float _430 = mad(0.002148000057786703f, _425, _429);
  float _431 = _423 * 0.01088900025933981f;
  float _432 = mad(0.9869629740715027f, _424, _431);
  float _433 = mad(0.002148000057786703f, _425, _432);
  float _434 = mad(0.026962999254465103f, _424, _431);
  float _435 = mad(0.9621480107307434f, _425, _434);
  float _436 = max(_430, 0.0f);
  float _437 = max(_433, 0.0f);
  float _438 = max(_435, 0.0f);
  float _439 = min(_436, cb2_095y);
  float _440 = min(_437, cb2_095y);
  float _441 = min(_438, cb2_095y);
  bool _444 = ((uint)(cb2_095x) == 0);
  bool _447 = ((uint)(cb2_094w) == 0);
  bool _449 = ((uint)(cb2_094z) == 0);
  bool _451 = ((uint)(cb2_094y) != 0);
  bool _453 = ((uint)(cb2_094x) == 0);
  bool _455 = ((uint)(cb2_069z) != 0);
  float _502 = asfloat((uint)(cb2_075y));
  float _503 = asfloat((uint)(cb2_075z));
  float _504 = asfloat((uint)(cb2_075w));
  float _505 = asfloat((uint)(cb2_074z));
  float _506 = asfloat((uint)(cb2_074w));
  float _507 = asfloat((uint)(cb2_075x));
  float _508 = asfloat((uint)(cb2_073w));
  float _509 = asfloat((uint)(cb2_074x));
  float _510 = asfloat((uint)(cb2_074y));
  float _511 = asfloat((uint)(cb2_077x));
  float _512 = asfloat((uint)(cb2_077y));
  float _513 = asfloat((uint)(cb2_079x));
  float _514 = asfloat((uint)(cb2_079y));
  float _515 = asfloat((uint)(cb2_079z));
  float _516 = asfloat((uint)(cb2_078y));
  float _517 = asfloat((uint)(cb2_078z));
  float _518 = asfloat((uint)(cb2_078w));
  float _519 = asfloat((uint)(cb2_077z));
  float _520 = asfloat((uint)(cb2_077w));
  float _521 = asfloat((uint)(cb2_078x));
  float _522 = asfloat((uint)(cb2_072y));
  float _523 = asfloat((uint)(cb2_072z));
  float _524 = asfloat((uint)(cb2_072w));
  float _525 = asfloat((uint)(cb2_071x));
  float _526 = asfloat((uint)(cb2_071y));
  float _527 = asfloat((uint)(cb2_076x));
  float _528 = asfloat((uint)(cb2_070w));
  float _529 = asfloat((uint)(cb2_070x));
  float _530 = asfloat((uint)(cb2_070y));
  float _531 = asfloat((uint)(cb2_070z));
  float _532 = asfloat((uint)(cb2_073x));
  float _533 = asfloat((uint)(cb2_073y));
  float _534 = asfloat((uint)(cb2_073z));
  float _535 = asfloat((uint)(cb2_071z));
  float _536 = asfloat((uint)(cb2_071w));
  float _537 = asfloat((uint)(cb2_072x));
  float _538 = max(_440, _441);
  float _539 = max(_439, _538);
  float _540 = 1.0f / _539;
  float _541 = _540 * _439;
  float _542 = _540 * _440;
  float _543 = _540 * _441;
  float _544 = abs(_541);
  float _545 = log2(_544);
  float _546 = _545 * _529;
  float _547 = exp2(_546);
  float _548 = abs(_542);
  float _549 = log2(_548);
  float _550 = _549 * _530;
  float _551 = exp2(_550);
  float _552 = abs(_543);
  float _553 = log2(_552);
  float _554 = _553 * _531;
  float _555 = exp2(_554);
  if (_451) {
    float _558 = asfloat((uint)(cb2_076w));
    float _560 = asfloat((uint)(cb2_076z));
    float _562 = asfloat((uint)(cb2_076y));
    float _563 = _560 * _440;
    float _564 = _562 * _439;
    float _565 = _558 * _441;
    float _566 = _564 + _565;
    float _567 = _566 + _563;
    _575 = _567;
  } else {
    float _569 = _536 * _440;
    float _570 = _535 * _439;
    float _571 = _537 * _441;
    float _572 = _569 + _570;
    float _573 = _572 + _571;
    _575 = _573;
  }
  float _576 = abs(_575);
  float _577 = log2(_576);
  float _578 = _577 * _528;
  float _579 = exp2(_578);
  float _580 = log2(_579);
  float _581 = _580 * _527;
  float _582 = exp2(_581);
  float _583 = select(_455, _582, _579);
  float _584 = _583 * _525;
  float _585 = _584 + _526;
  float _586 = 1.0f / _585;
  float _587 = _586 * _579;
  if (_451) {
    if (!_453) {
      float _590 = _547 * _519;
      float _591 = _551 * _520;
      float _592 = _555 * _521;
      float _593 = _591 + _590;
      float _594 = _593 + _592;
      float _595 = _551 * _517;
      float _596 = _547 * _516;
      float _597 = _555 * _518;
      float _598 = _595 + _596;
      float _599 = _598 + _597;
      float _600 = _555 * _515;
      float _601 = _551 * _514;
      float _602 = _547 * _513;
      float _603 = _601 + _602;
      float _604 = _603 + _600;
      float _605 = max(_599, _604);
      float _606 = max(_594, _605);
      float _607 = 1.0f / _606;
      float _608 = _607 * _594;
      float _609 = _607 * _599;
      float _610 = _607 * _604;
      _612 = _608;
      _613 = _609;
      _614 = _610;
    } else {
      _612 = _547;
      _613 = _551;
      _614 = _555;
    }
    float _615 = _612 * _512;
    float _616 = exp2(_615);
    float _617 = _616 * _511;
    float _618 = saturate(_617);
    float _619 = _612 * _511;
    float _620 = _612 - _619;
    float _621 = saturate(_620);
    float _622 = max(_511, _621);
    float _623 = min(_622, _618);
    float _624 = _613 * _512;
    float _625 = exp2(_624);
    float _626 = _625 * _511;
    float _627 = saturate(_626);
    float _628 = _613 * _511;
    float _629 = _613 - _628;
    float _630 = saturate(_629);
    float _631 = max(_511, _630);
    float _632 = min(_631, _627);
    float _633 = _614 * _512;
    float _634 = exp2(_633);
    float _635 = _634 * _511;
    float _636 = saturate(_635);
    float _637 = _614 * _511;
    float _638 = _614 - _637;
    float _639 = saturate(_638);
    float _640 = max(_511, _639);
    float _641 = min(_640, _636);
    _643 = _623;
    _644 = _632;
    _645 = _641;
  } else {
    _643 = _547;
    _644 = _551;
    _645 = _555;
  }
  float _646 = _643 * _535;
  float _647 = _644 * _536;
  float _648 = _647 + _646;
  float _649 = _645 * _537;
  float _650 = _648 + _649;
  float _651 = 1.0f / _650;
  float _652 = _651 * _587;
  float _653 = saturate(_652);
  float _654 = _653 * _643;
  float _655 = saturate(_654);
  float _656 = _653 * _644;
  float _657 = saturate(_656);
  float _658 = _653 * _645;
  float _659 = saturate(_658);
  float _660 = _655 * _522;
  float _661 = _522 - _660;
  float _662 = _657 * _523;
  float _663 = _523 - _662;
  float _664 = _659 * _524;
  float _665 = _524 - _664;
  float _666 = _659 * _537;
  float _667 = _655 * _535;
  float _668 = _657 * _536;
  float _669 = _587 - _667;
  float _670 = _669 - _668;
  float _671 = _670 - _666;
  float _672 = saturate(_671);
  float _673 = _663 * _536;
  float _674 = _661 * _535;
  float _675 = _665 * _537;
  float _676 = _673 + _674;
  float _677 = _676 + _675;
  float _678 = 1.0f / _677;
  float _679 = _678 * _672;
  float _680 = _679 * _661;
  float _681 = _680 + _655;
  float _682 = saturate(_681);
  float _683 = _679 * _663;
  float _684 = _683 + _657;
  float _685 = saturate(_684);
  float _686 = _679 * _665;
  float _687 = _686 + _659;
  float _688 = saturate(_687);
  float _689 = _688 * _537;
  float _690 = _682 * _535;
  float _691 = _685 * _536;
  float _692 = _587 - _690;
  float _693 = _692 - _691;
  float _694 = _693 - _689;
  float _695 = saturate(_694);
  float _696 = _695 * _532;
  float _697 = _696 + _682;
  float _698 = saturate(_697);
  float _699 = _695 * _533;
  float _700 = _699 + _685;
  float _701 = saturate(_700);
  float _702 = _695 * _534;
  float _703 = _702 + _688;
  float _704 = saturate(_703);
  if (!_449) {
    float _706 = _698 * _508;
    float _707 = _701 * _509;
    float _708 = _704 * _510;
    float _709 = _707 + _706;
    float _710 = _709 + _708;
    float _711 = _701 * _506;
    float _712 = _698 * _505;
    float _713 = _704 * _507;
    float _714 = _711 + _712;
    float _715 = _714 + _713;
    float _716 = _704 * _504;
    float _717 = _701 * _503;
    float _718 = _698 * _502;
    float _719 = _717 + _718;
    float _720 = _719 + _716;
    if (!_447) {
      float _722 = saturate(_710);
      float _723 = saturate(_715);
      float _724 = saturate(_720);
      _726 = _724;
      _727 = _723;
      _728 = _722;
    } else {
      _726 = _720;
      _727 = _715;
      _728 = _710;
    }
  } else {
    _726 = _704;
    _727 = _701;
    _728 = _698;
  }
  if (!_444) {
    float _730 = _728 * _508;
    float _731 = _727 * _508;
    float _732 = _726 * _508;
    _734 = _732;
    _735 = _731;
    _736 = _730;
  } else {
    _734 = _726;
    _735 = _727;
    _736 = _728;
  }
  if (_362) {
    float _740 = cb1_018z * 9.999999747378752e-05f;
    float _741 = _740 * _736;
    float _742 = _740 * _735;
    float _743 = _740 * _734;
    float _745 = 5000.0f / cb1_018y;
    float _746 = _741 * _745;
    float _747 = _742 * _745;
    float _748 = _743 * _745;
    _750 = _746;
    _751 = _747;
    _752 = _748;
  } else {
    _750 = _736;
    _751 = _735;
    _752 = _734;
  }
  float _753 = _750 * 1.6047500371932983f;
  float _754 = mad(-0.5310800075531006f, _751, _753);
  float _755 = mad(-0.07366999983787537f, _752, _754);
  float _756 = _750 * -0.10208000242710114f;
  float _757 = mad(1.1081299781799316f, _751, _756);
  float _758 = mad(-0.006049999967217445f, _752, _757);
  float _759 = _750 * -0.0032599999103695154f;
  float _760 = mad(-0.07275000214576721f, _751, _759);
  float _761 = mad(1.0760200023651123f, _752, _760);
  if (_362) {
    // float _763 = max(_755, 0.0f);
    // float _764 = max(_758, 0.0f);
    // float _765 = max(_761, 0.0f);
    // bool _766 = !(_763 >= 0.0030399328097701073f);
    // if (!_766) {
    //   float _768 = abs(_763);
    //   float _769 = log2(_768);
    //   float _770 = _769 * 0.4166666567325592f;
    //   float _771 = exp2(_770);
    //   float _772 = _771 * 1.0549999475479126f;
    //   float _773 = _772 + -0.054999999701976776f;
    //   _777 = _773;
    // } else {
    //   float _775 = _763 * 12.923210144042969f;
    //   _777 = _775;
    // }
    // bool _778 = !(_764 >= 0.0030399328097701073f);
    // if (!_778) {
    //   float _780 = abs(_764);
    //   float _781 = log2(_780);
    //   float _782 = _781 * 0.4166666567325592f;
    //   float _783 = exp2(_782);
    //   float _784 = _783 * 1.0549999475479126f;
    //   float _785 = _784 + -0.054999999701976776f;
    //   _789 = _785;
    // } else {
    //   float _787 = _764 * 12.923210144042969f;
    //   _789 = _787;
    // }
    // bool _790 = !(_765 >= 0.0030399328097701073f);
    // if (!_790) {
    //   float _792 = abs(_765);
    //   float _793 = log2(_792);
    //   float _794 = _793 * 0.4166666567325592f;
    //   float _795 = exp2(_794);
    //   float _796 = _795 * 1.0549999475479126f;
    //   float _797 = _796 + -0.054999999701976776f;
    //   _870 = _777;
    //   _871 = _789;
    //   _872 = _797;
    // } else {
    //   float _799 = _765 * 12.923210144042969f;
    //   _870 = _777;
    //   _871 = _789;
    //   _872 = _799;
    // }
    _870 = renodx::color::srgb::EncodeSafe(_755);
    _871 = renodx::color::srgb::EncodeSafe(_758);
    _872 = renodx::color::srgb::EncodeSafe(_761);

  } else {
    float _801 = saturate(_755);
    float _802 = saturate(_758);
    float _803 = saturate(_761);
    bool _804 = ((uint)(cb1_018w) == -2);
    if (!_804) {
      bool _806 = !(_801 >= 0.0030399328097701073f);
      if (!_806) {
        float _808 = abs(_801);
        float _809 = log2(_808);
        float _810 = _809 * 0.4166666567325592f;
        float _811 = exp2(_810);
        float _812 = _811 * 1.0549999475479126f;
        float _813 = _812 + -0.054999999701976776f;
        _817 = _813;
      } else {
        float _815 = _801 * 12.923210144042969f;
        _817 = _815;
      }
      bool _818 = !(_802 >= 0.0030399328097701073f);
      if (!_818) {
        float _820 = abs(_802);
        float _821 = log2(_820);
        float _822 = _821 * 0.4166666567325592f;
        float _823 = exp2(_822);
        float _824 = _823 * 1.0549999475479126f;
        float _825 = _824 + -0.054999999701976776f;
        _829 = _825;
      } else {
        float _827 = _802 * 12.923210144042969f;
        _829 = _827;
      }
      bool _830 = !(_803 >= 0.0030399328097701073f);
      if (!_830) {
        float _832 = abs(_803);
        float _833 = log2(_832);
        float _834 = _833 * 0.4166666567325592f;
        float _835 = exp2(_834);
        float _836 = _835 * 1.0549999475479126f;
        float _837 = _836 + -0.054999999701976776f;
        _841 = _817;
        _842 = _829;
        _843 = _837;
      } else {
        float _839 = _803 * 12.923210144042969f;
        _841 = _817;
        _842 = _829;
        _843 = _839;
      }
    } else {
      _841 = _801;
      _842 = _802;
      _843 = _803;
    }
    float _848 = abs(_841);
    float _849 = abs(_842);
    float _850 = abs(_843);
    float _851 = log2(_848);
    float _852 = log2(_849);
    float _853 = log2(_850);
    float _854 = _851 * cb2_000z;
    float _855 = _852 * cb2_000z;
    float _856 = _853 * cb2_000z;
    float _857 = exp2(_854);
    float _858 = exp2(_855);
    float _859 = exp2(_856);
    float _860 = _857 * cb2_000y;
    float _861 = _858 * cb2_000y;
    float _862 = _859 * cb2_000y;
    float _863 = _860 + cb2_000x;
    float _864 = _861 + cb2_000x;
    float _865 = _862 + cb2_000x;
    float _866 = saturate(_863);
    float _867 = saturate(_864);
    float _868 = saturate(_865);
    _870 = _866;
    _871 = _867;
    _872 = _868;
  }
  float _873 = dot(float3(_870, _871, _872), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _870;
  SV_Target.y = _871;
  SV_Target.z = _872;
  SV_Target.w = _873;
  SV_Target_1.x = _873;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
