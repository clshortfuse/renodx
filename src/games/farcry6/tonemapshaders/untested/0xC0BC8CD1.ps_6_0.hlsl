#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _19 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _21 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = _21.x * 6.283199787139893f;
  float _26 = cos(_25);
  float _27 = sin(_25);
  float _28 = _26 * _21.z;
  float _29 = _27 * _21.z;
  float _30 = _28 + TEXCOORD0_centroid.x;
  float _31 = _29 + TEXCOORD0_centroid.y;
  float _32 = _30 * 10.0f;
  float _33 = 10.0f - _32;
  float _34 = min(_32, _33);
  float _35 = saturate(_34);
  float _36 = _35 * _28;
  float _37 = _31 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _29;
  float _42 = _36 + TEXCOORD0_centroid.x;
  float _43 = _41 + TEXCOORD0_centroid.y;
  float4 _44 = t6.SampleLevel(s2_space2, float2(_42, _43), 0.0f);
  float _46 = _44.w * _36;
  float _47 = _44.w * _41;
  float _48 = 1.0f - _21.y;
  float _49 = saturate(_48);
  float _50 = _46 * _49;
  float _51 = _47 * _49;
  float _52 = _50 + TEXCOORD0_centroid.x;
  float _53 = _51 + TEXCOORD0_centroid.y;
  float4 _54 = t6.SampleLevel(s2_space2, float2(_52, _53), 0.0f);
  bool _56 = (_54.y > 0.0f);
  float _57 = select(_56, TEXCOORD0_centroid.x, _52);
  float _58 = select(_56, TEXCOORD0_centroid.y, _53);
  float4 _59 = t1.SampleLevel(s4_space2, float2(_57, _58), 0.0f);
  float _63 = max(_59.x, 0.0f);
  float _64 = max(_59.y, 0.0f);
  float _65 = max(_59.z, 0.0f);
  float _66 = min(_63, 65000.0f);
  float _67 = min(_64, 65000.0f);
  float _68 = min(_65, 65000.0f);
  float4 _69 = t3.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  float _74 = max(_69.x, 0.0f);
  float _75 = max(_69.y, 0.0f);
  float _76 = max(_69.z, 0.0f);
  float _77 = max(_69.w, 0.0f);
  float _78 = min(_74, 5000.0f);
  float _79 = min(_75, 5000.0f);
  float _80 = min(_76, 5000.0f);
  float _81 = min(_77, 5000.0f);
  float _84 = _19.x * cb0_028z;
  float _85 = _84 + cb0_028x;
  float _86 = cb2_027w / _85;
  float _87 = 1.0f - _86;
  float _88 = abs(_87);
  float _90 = cb2_027y * _88;
  float _92 = _90 - cb2_027z;
  float _93 = saturate(_92);
  float _94 = max(_93, _81);
  float _95 = saturate(_94);
  float _99 = cb2_013x * _57;
  float _100 = cb2_013y * _58;
  float _103 = _99 + cb2_013z;
  float _104 = _100 + cb2_013w;
  float _107 = dot(float2(_103, _104), float2(_103, _104));
  float _108 = abs(_107);
  float _109 = log2(_108);
  float _110 = _109 * cb2_014x;
  float _111 = exp2(_110);
  float _112 = saturate(_111);
  float _116 = cb2_011x * _57;
  float _117 = cb2_011y * _58;
  float _120 = _116 + cb2_011z;
  float _121 = _117 + cb2_011w;
  float _122 = _120 * _112;
  float _123 = _121 * _112;
  float _124 = _122 + _57;
  float _125 = _123 + _58;
  float _129 = cb2_012x * _57;
  float _130 = cb2_012y * _58;
  float _133 = _129 + cb2_012z;
  float _134 = _130 + cb2_012w;
  float _135 = _133 * _112;
  float _136 = _134 * _112;
  float _137 = _135 + _57;
  float _138 = _136 + _58;
  float4 _139 = t1.SampleLevel(s2_space2, float2(_124, _125), 0.0f);
  float _143 = max(_139.x, 0.0f);
  float _144 = max(_139.y, 0.0f);
  float _145 = max(_139.z, 0.0f);
  float _146 = min(_143, 65000.0f);
  float _147 = min(_144, 65000.0f);
  float _148 = min(_145, 65000.0f);
  float4 _149 = t1.SampleLevel(s2_space2, float2(_137, _138), 0.0f);
  float _153 = max(_149.x, 0.0f);
  float _154 = max(_149.y, 0.0f);
  float _155 = max(_149.z, 0.0f);
  float _156 = min(_153, 65000.0f);
  float _157 = min(_154, 65000.0f);
  float _158 = min(_155, 65000.0f);
  float4 _159 = t3.SampleLevel(s2_space2, float2(_124, _125), 0.0f);
  float _163 = max(_159.x, 0.0f);
  float _164 = max(_159.y, 0.0f);
  float _165 = max(_159.z, 0.0f);
  float _166 = min(_163, 5000.0f);
  float _167 = min(_164, 5000.0f);
  float _168 = min(_165, 5000.0f);
  float4 _169 = t3.SampleLevel(s2_space2, float2(_137, _138), 0.0f);
  float _173 = max(_169.x, 0.0f);
  float _174 = max(_169.y, 0.0f);
  float _175 = max(_169.z, 0.0f);
  float _176 = min(_173, 5000.0f);
  float _177 = min(_174, 5000.0f);
  float _178 = min(_175, 5000.0f);
  float _183 = 1.0f - cb2_009x;
  float _184 = 1.0f - cb2_009y;
  float _185 = 1.0f - cb2_009z;
  float _190 = _183 - cb2_010x;
  float _191 = _184 - cb2_010y;
  float _192 = _185 - cb2_010z;
  float _193 = saturate(_190);
  float _194 = saturate(_191);
  float _195 = saturate(_192);
  float _196 = _193 * _66;
  float _197 = _194 * _67;
  float _198 = _195 * _68;
  float _199 = cb2_009x * _146;
  float _200 = cb2_009y * _147;
  float _201 = cb2_009z * _148;
  float _202 = _199 + _196;
  float _203 = _200 + _197;
  float _204 = _201 + _198;
  float _205 = cb2_010x * _156;
  float _206 = cb2_010y * _157;
  float _207 = cb2_010z * _158;
  float _208 = _202 + _205;
  float _209 = _203 + _206;
  float _210 = _204 + _207;
  float _211 = _193 * _78;
  float _212 = _194 * _79;
  float _213 = _195 * _80;
  float _214 = cb2_009x * _166;
  float _215 = cb2_009y * _167;
  float _216 = cb2_009z * _168;
  float _217 = cb2_010x * _176;
  float _218 = cb2_010y * _177;
  float _219 = cb2_010z * _178;
  float4 _220 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _224 = _211 - _208;
  float _225 = _224 + _214;
  float _226 = _225 + _217;
  float _227 = _212 - _209;
  float _228 = _227 + _215;
  float _229 = _228 + _218;
  float _230 = _213 - _210;
  float _231 = _230 + _216;
  float _232 = _231 + _219;
  float _233 = _226 * _95;
  float _234 = _229 * _95;
  float _235 = _232 * _95;
  float _236 = _233 + _208;
  float _237 = _234 + _209;
  float _238 = _235 + _210;
  float _239 = dot(float3(_236, _237, _238), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _243 = t0[0].SExposureData_020;
  float _245 = t0[0].SExposureData_004;
  float _247 = cb2_018x * 0.5f;
  float _248 = _247 * cb2_018y;
  float _249 = _245.x - _248;
  float _250 = cb2_018y * cb2_018x;
  float _251 = 1.0f / _250;
  float _252 = _249 * _251;
  float _253 = _239 / _243.x;
  float _254 = _253 * 5464.01611328125f;
  float _255 = _254 + 9.99999993922529e-09f;
  float _256 = log2(_255);
  float _257 = _256 - _249;
  float _258 = _257 * _251;
  float _259 = saturate(_258);
  float2 _260 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _259), 0.0f);
  float _263 = max(_260.y, 1.0000000116860974e-07f);
  float _264 = _260.x / _263;
  float _265 = _264 + _252;
  float _266 = _265 / _251;
  float _267 = _266 - _245.x;
  float _268 = -0.0f - _267;
  float _270 = _268 - cb2_027x;
  float _271 = max(0.0f, _270);
  float _274 = cb2_026z * _271;
  float _275 = _267 - cb2_027x;
  float _276 = max(0.0f, _275);
  float _278 = cb2_026w * _276;
  bool _279 = (_267 < 0.0f);
  float _280 = select(_279, _274, _278);
  float _281 = exp2(_280);
  float _282 = _281 * _236;
  float _283 = _281 * _237;
  float _284 = _281 * _238;
  float _289 = cb2_024y * _220.x;
  float _290 = cb2_024z * _220.y;
  float _291 = cb2_024w * _220.z;
  float _292 = _289 + _282;
  float _293 = _290 + _283;
  float _294 = _291 + _284;
  float _299 = _292 * cb2_025x;
  float _300 = _293 * cb2_025y;
  float _301 = _294 * cb2_025z;
  float _302 = dot(float3(_299, _300, _301), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _303 = t0[0].SExposureData_012;
  float _305 = _302 * 5464.01611328125f;
  float _306 = _305 * _303.x;
  float _307 = _306 + 9.99999993922529e-09f;
  float _308 = log2(_307);
  float _309 = _308 + 16.929765701293945f;
  float _310 = _309 * 0.05734497308731079f;
  float _311 = saturate(_310);
  float _312 = _311 * _311;
  float _313 = _311 * 2.0f;
  float _314 = 3.0f - _313;
  float _315 = _312 * _314;
  float _316 = _300 * 0.8450999855995178f;
  float _317 = _301 * 0.14589999616146088f;
  float _318 = _316 + _317;
  float _319 = _318 * 2.4890189170837402f;
  float _320 = _318 * 0.3754962384700775f;
  float _321 = _318 * 2.811495304107666f;
  float _322 = _318 * 5.519708156585693f;
  float _323 = _302 - _319;
  float _324 = _315 * _323;
  float _325 = _324 + _319;
  float _326 = _315 * 0.5f;
  float _327 = _326 + 0.5f;
  float _328 = _327 * _323;
  float _329 = _328 + _319;
  float _330 = _299 - _320;
  float _331 = _300 - _321;
  float _332 = _301 - _322;
  float _333 = _327 * _330;
  float _334 = _327 * _331;
  float _335 = _327 * _332;
  float _336 = _333 + _320;
  float _337 = _334 + _321;
  float _338 = _335 + _322;
  float _339 = 1.0f / _329;
  float _340 = _325 * _339;
  float _341 = _340 * _336;
  float _342 = _340 * _337;
  float _343 = _340 * _338;
  float _347 = cb2_020x * TEXCOORD0_centroid.x;
  float _348 = cb2_020y * TEXCOORD0_centroid.y;
  float _351 = _347 + cb2_020z;
  float _352 = _348 + cb2_020w;
  float _355 = dot(float2(_351, _352), float2(_351, _352));
  float _356 = 1.0f - _355;
  float _357 = saturate(_356);
  float _358 = log2(_357);
  float _359 = _358 * cb2_021w;
  float _360 = exp2(_359);
  float _364 = _341 - cb2_021x;
  float _365 = _342 - cb2_021y;
  float _366 = _343 - cb2_021z;
  float _367 = _364 * _360;
  float _368 = _365 * _360;
  float _369 = _366 * _360;
  float _370 = _367 + cb2_021x;
  float _371 = _368 + cb2_021y;
  float _372 = _369 + cb2_021z;
  float _373 = t0[0].SExposureData_000;
  float _375 = max(_243.x, 0.0010000000474974513f);
  float _376 = 1.0f / _375;
  float _377 = _376 * _373.x;
  bool _380 = ((uint)(cb2_069y) == 0);
  float _386;
  float _387;
  float _388;
  float _442;
  float _443;
  float _444;
  float _519;
  float _520;
  float _521;
  float _671;
  float _708;
  float _709;
  float _710;
  float _739;
  float _740;
  float _741;
  float _822;
  float _823;
  float _824;
  float _830;
  float _831;
  float _832;
  float _846;
  float _847;
  float _848;
  float _873;
  float _885;
  float _913;
  float _925;
  float _937;
  float _938;
  float _939;
  float _966;
  float _967;
  float _968;
  if (!_380) {
    float _382 = _377 * _370;
    float _383 = _377 * _371;
    float _384 = _377 * _372;
    _386 = _382;
    _387 = _383;
    _388 = _384;
  } else {
    _386 = _370;
    _387 = _371;
    _388 = _372;
  }
  float _389 = _386 * 0.6130970120429993f;
  float _390 = mad(0.33952298760414124f, _387, _389);
  float _391 = mad(0.04737899824976921f, _388, _390);
  float _392 = _386 * 0.07019399851560593f;
  float _393 = mad(0.9163540005683899f, _387, _392);
  float _394 = mad(0.013451999984681606f, _388, _393);
  float _395 = _386 * 0.02061600051820278f;
  float _396 = mad(0.10956999659538269f, _387, _395);
  float _397 = mad(0.8698149919509888f, _388, _396);
  float _398 = log2(_391);
  float _399 = log2(_394);
  float _400 = log2(_397);
  float _401 = _398 * 0.04211956635117531f;
  float _402 = _399 * 0.04211956635117531f;
  float _403 = _400 * 0.04211956635117531f;
  float _404 = _401 + 0.6252607107162476f;
  float _405 = _402 + 0.6252607107162476f;
  float _406 = _403 + 0.6252607107162476f;
  float4 _407 = t5.SampleLevel(s2_space2, float3(_404, _405, _406), 0.0f);
  bool _413 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_413 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _417 = cb2_017x * _407.x;
    float _418 = cb2_017x * _407.y;
    float _419 = cb2_017x * _407.z;
    float _421 = _417 + cb2_017y;
    float _422 = _418 + cb2_017y;
    float _423 = _419 + cb2_017y;
    float _424 = exp2(_421);
    float _425 = exp2(_422);
    float _426 = exp2(_423);
    float _427 = _424 + 1.0f;
    float _428 = _425 + 1.0f;
    float _429 = _426 + 1.0f;
    float _430 = 1.0f / _427;
    float _431 = 1.0f / _428;
    float _432 = 1.0f / _429;
    float _434 = cb2_017z * _430;
    float _435 = cb2_017z * _431;
    float _436 = cb2_017z * _432;
    float _438 = _434 + cb2_017w;
    float _439 = _435 + cb2_017w;
    float _440 = _436 + cb2_017w;
    _442 = _438;
    _443 = _439;
    _444 = _440;
  } else {
    _442 = _407.x;
    _443 = _407.y;
    _444 = _407.z;
  }
  float _445 = _442 * 23.0f;
  float _446 = _445 + -14.473931312561035f;
  float _447 = exp2(_446);
  float _448 = _443 * 23.0f;
  float _449 = _448 + -14.473931312561035f;
  float _450 = exp2(_449);
  float _451 = _444 * 23.0f;
  float _452 = _451 + -14.473931312561035f;
  float _453 = exp2(_452);
  float _454 = dot(float3(_447, _450, _453), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _459 = dot(float3(_447, _450, _453), float3(_447, _450, _453));
  float _460 = rsqrt(_459);
  float _461 = _460 * _447;
  float _462 = _460 * _450;
  float _463 = _460 * _453;
  float _464 = cb2_001x - _461;
  float _465 = cb2_001y - _462;
  float _466 = cb2_001z - _463;
  float _467 = dot(float3(_464, _465, _466), float3(_464, _465, _466));
  float _470 = cb2_002z * _467;
  float _472 = _470 + cb2_002w;
  float _473 = saturate(_472);
  float _475 = cb2_002x * _473;
  float _476 = _454 - _447;
  float _477 = _454 - _450;
  float _478 = _454 - _453;
  float _479 = _475 * _476;
  float _480 = _475 * _477;
  float _481 = _475 * _478;
  float _482 = _479 + _447;
  float _483 = _480 + _450;
  float _484 = _481 + _453;
  float _486 = cb2_002y * _473;
  float _487 = 0.10000000149011612f - _482;
  float _488 = 0.10000000149011612f - _483;
  float _489 = 0.10000000149011612f - _484;
  float _490 = _487 * _486;
  float _491 = _488 * _486;
  float _492 = _489 * _486;
  float _493 = _490 + _482;
  float _494 = _491 + _483;
  float _495 = _492 + _484;
  float _496 = saturate(_493);
  float _497 = saturate(_494);
  float _498 = saturate(_495);
  float _504 = cb2_016x - _496;
  float _505 = cb2_016y - _497;
  float _506 = cb2_016z - _498;
  float _507 = _504 * cb2_016w;
  float _508 = _505 * cb2_016w;
  float _509 = _506 * cb2_016w;
  float _510 = _507 + _496;
  float _511 = _508 + _497;
  float _512 = _509 + _498;
  if (_413 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _515 = cb2_024x * _510;
    float _516 = cb2_024x * _511;
    float _517 = cb2_024x * _512;
    _519 = _515;
    _520 = _516;
    _521 = _517;
  } else {
    _519 = _510;
    _520 = _511;
    _521 = _512;
  }
  float _524 = _519 * 0.9708889722824097f;
  float _525 = mad(0.026962999254465103f, _520, _524);
  float _526 = mad(0.002148000057786703f, _521, _525);
  float _527 = _519 * 0.01088900025933981f;
  float _528 = mad(0.9869629740715027f, _520, _527);
  float _529 = mad(0.002148000057786703f, _521, _528);
  float _530 = mad(0.026962999254465103f, _520, _527);
  float _531 = mad(0.9621480107307434f, _521, _530);
  float _532 = max(_526, 0.0f);
  float _533 = max(_529, 0.0f);
  float _534 = max(_531, 0.0f);
  float _535 = min(_532, cb2_095y);
  float _536 = min(_533, cb2_095y);
  float _537 = min(_534, cb2_095y);
  bool _540 = ((uint)(cb2_095x) == 0);
  bool _543 = ((uint)(cb2_094w) == 0);
  bool _545 = ((uint)(cb2_094z) == 0);
  bool _547 = ((uint)(cb2_094y) != 0);
  bool _549 = ((uint)(cb2_094x) == 0);
  bool _551 = ((uint)(cb2_069z) != 0);
  float _598 = asfloat((uint)(cb2_075y));
  float _599 = asfloat((uint)(cb2_075z));
  float _600 = asfloat((uint)(cb2_075w));
  float _601 = asfloat((uint)(cb2_074z));
  float _602 = asfloat((uint)(cb2_074w));
  float _603 = asfloat((uint)(cb2_075x));
  float _604 = asfloat((uint)(cb2_073w));
  float _605 = asfloat((uint)(cb2_074x));
  float _606 = asfloat((uint)(cb2_074y));
  float _607 = asfloat((uint)(cb2_077x));
  float _608 = asfloat((uint)(cb2_077y));
  float _609 = asfloat((uint)(cb2_079x));
  float _610 = asfloat((uint)(cb2_079y));
  float _611 = asfloat((uint)(cb2_079z));
  float _612 = asfloat((uint)(cb2_078y));
  float _613 = asfloat((uint)(cb2_078z));
  float _614 = asfloat((uint)(cb2_078w));
  float _615 = asfloat((uint)(cb2_077z));
  float _616 = asfloat((uint)(cb2_077w));
  float _617 = asfloat((uint)(cb2_078x));
  float _618 = asfloat((uint)(cb2_072y));
  float _619 = asfloat((uint)(cb2_072z));
  float _620 = asfloat((uint)(cb2_072w));
  float _621 = asfloat((uint)(cb2_071x));
  float _622 = asfloat((uint)(cb2_071y));
  float _623 = asfloat((uint)(cb2_076x));
  float _624 = asfloat((uint)(cb2_070w));
  float _625 = asfloat((uint)(cb2_070x));
  float _626 = asfloat((uint)(cb2_070y));
  float _627 = asfloat((uint)(cb2_070z));
  float _628 = asfloat((uint)(cb2_073x));
  float _629 = asfloat((uint)(cb2_073y));
  float _630 = asfloat((uint)(cb2_073z));
  float _631 = asfloat((uint)(cb2_071z));
  float _632 = asfloat((uint)(cb2_071w));
  float _633 = asfloat((uint)(cb2_072x));
  float _634 = max(_536, _537);
  float _635 = max(_535, _634);
  float _636 = 1.0f / _635;
  float _637 = _636 * _535;
  float _638 = _636 * _536;
  float _639 = _636 * _537;
  float _640 = abs(_637);
  float _641 = log2(_640);
  float _642 = _641 * _625;
  float _643 = exp2(_642);
  float _644 = abs(_638);
  float _645 = log2(_644);
  float _646 = _645 * _626;
  float _647 = exp2(_646);
  float _648 = abs(_639);
  float _649 = log2(_648);
  float _650 = _649 * _627;
  float _651 = exp2(_650);
  if (_547) {
    float _654 = asfloat((uint)(cb2_076w));
    float _656 = asfloat((uint)(cb2_076z));
    float _658 = asfloat((uint)(cb2_076y));
    float _659 = _656 * _536;
    float _660 = _658 * _535;
    float _661 = _654 * _537;
    float _662 = _660 + _661;
    float _663 = _662 + _659;
    _671 = _663;
  } else {
    float _665 = _632 * _536;
    float _666 = _631 * _535;
    float _667 = _633 * _537;
    float _668 = _665 + _666;
    float _669 = _668 + _667;
    _671 = _669;
  }
  float _672 = abs(_671);
  float _673 = log2(_672);
  float _674 = _673 * _624;
  float _675 = exp2(_674);
  float _676 = log2(_675);
  float _677 = _676 * _623;
  float _678 = exp2(_677);
  float _679 = select(_551, _678, _675);
  float _680 = _679 * _621;
  float _681 = _680 + _622;
  float _682 = 1.0f / _681;
  float _683 = _682 * _675;
  if (_547) {
    if (!_549) {
      float _686 = _643 * _615;
      float _687 = _647 * _616;
      float _688 = _651 * _617;
      float _689 = _687 + _686;
      float _690 = _689 + _688;
      float _691 = _647 * _613;
      float _692 = _643 * _612;
      float _693 = _651 * _614;
      float _694 = _691 + _692;
      float _695 = _694 + _693;
      float _696 = _651 * _611;
      float _697 = _647 * _610;
      float _698 = _643 * _609;
      float _699 = _697 + _698;
      float _700 = _699 + _696;
      float _701 = max(_695, _700);
      float _702 = max(_690, _701);
      float _703 = 1.0f / _702;
      float _704 = _703 * _690;
      float _705 = _703 * _695;
      float _706 = _703 * _700;
      _708 = _704;
      _709 = _705;
      _710 = _706;
    } else {
      _708 = _643;
      _709 = _647;
      _710 = _651;
    }
    float _711 = _708 * _608;
    float _712 = exp2(_711);
    float _713 = _712 * _607;
    float _714 = saturate(_713);
    float _715 = _708 * _607;
    float _716 = _708 - _715;
    float _717 = saturate(_716);
    float _718 = max(_607, _717);
    float _719 = min(_718, _714);
    float _720 = _709 * _608;
    float _721 = exp2(_720);
    float _722 = _721 * _607;
    float _723 = saturate(_722);
    float _724 = _709 * _607;
    float _725 = _709 - _724;
    float _726 = saturate(_725);
    float _727 = max(_607, _726);
    float _728 = min(_727, _723);
    float _729 = _710 * _608;
    float _730 = exp2(_729);
    float _731 = _730 * _607;
    float _732 = saturate(_731);
    float _733 = _710 * _607;
    float _734 = _710 - _733;
    float _735 = saturate(_734);
    float _736 = max(_607, _735);
    float _737 = min(_736, _732);
    _739 = _719;
    _740 = _728;
    _741 = _737;
  } else {
    _739 = _643;
    _740 = _647;
    _741 = _651;
  }
  float _742 = _739 * _631;
  float _743 = _740 * _632;
  float _744 = _743 + _742;
  float _745 = _741 * _633;
  float _746 = _744 + _745;
  float _747 = 1.0f / _746;
  float _748 = _747 * _683;
  float _749 = saturate(_748);
  float _750 = _749 * _739;
  float _751 = saturate(_750);
  float _752 = _749 * _740;
  float _753 = saturate(_752);
  float _754 = _749 * _741;
  float _755 = saturate(_754);
  float _756 = _751 * _618;
  float _757 = _618 - _756;
  float _758 = _753 * _619;
  float _759 = _619 - _758;
  float _760 = _755 * _620;
  float _761 = _620 - _760;
  float _762 = _755 * _633;
  float _763 = _751 * _631;
  float _764 = _753 * _632;
  float _765 = _683 - _763;
  float _766 = _765 - _764;
  float _767 = _766 - _762;
  float _768 = saturate(_767);
  float _769 = _759 * _632;
  float _770 = _757 * _631;
  float _771 = _761 * _633;
  float _772 = _769 + _770;
  float _773 = _772 + _771;
  float _774 = 1.0f / _773;
  float _775 = _774 * _768;
  float _776 = _775 * _757;
  float _777 = _776 + _751;
  float _778 = saturate(_777);
  float _779 = _775 * _759;
  float _780 = _779 + _753;
  float _781 = saturate(_780);
  float _782 = _775 * _761;
  float _783 = _782 + _755;
  float _784 = saturate(_783);
  float _785 = _784 * _633;
  float _786 = _778 * _631;
  float _787 = _781 * _632;
  float _788 = _683 - _786;
  float _789 = _788 - _787;
  float _790 = _789 - _785;
  float _791 = saturate(_790);
  float _792 = _791 * _628;
  float _793 = _792 + _778;
  float _794 = saturate(_793);
  float _795 = _791 * _629;
  float _796 = _795 + _781;
  float _797 = saturate(_796);
  float _798 = _791 * _630;
  float _799 = _798 + _784;
  float _800 = saturate(_799);
  if (!_545) {
    float _802 = _794 * _604;
    float _803 = _797 * _605;
    float _804 = _800 * _606;
    float _805 = _803 + _802;
    float _806 = _805 + _804;
    float _807 = _797 * _602;
    float _808 = _794 * _601;
    float _809 = _800 * _603;
    float _810 = _807 + _808;
    float _811 = _810 + _809;
    float _812 = _800 * _600;
    float _813 = _797 * _599;
    float _814 = _794 * _598;
    float _815 = _813 + _814;
    float _816 = _815 + _812;
    if (!_543) {
      float _818 = saturate(_806);
      float _819 = saturate(_811);
      float _820 = saturate(_816);
      _822 = _820;
      _823 = _819;
      _824 = _818;
    } else {
      _822 = _816;
      _823 = _811;
      _824 = _806;
    }
  } else {
    _822 = _800;
    _823 = _797;
    _824 = _794;
  }
  if (!_540) {
    float _826 = _824 * _604;
    float _827 = _823 * _604;
    float _828 = _822 * _604;
    _830 = _828;
    _831 = _827;
    _832 = _826;
  } else {
    _830 = _822;
    _831 = _823;
    _832 = _824;
  }
  if (_413) {
    float _836 = cb1_018z * 9.999999747378752e-05f;
    float _837 = _836 * _832;
    float _838 = _836 * _831;
    float _839 = _836 * _830;
    float _841 = 5000.0f / cb1_018y;
    float _842 = _837 * _841;
    float _843 = _838 * _841;
    float _844 = _839 * _841;
    _846 = _842;
    _847 = _843;
    _848 = _844;
  } else {
    _846 = _832;
    _847 = _831;
    _848 = _830;
  }
  float _849 = _846 * 1.6047500371932983f;
  float _850 = mad(-0.5310800075531006f, _847, _849);
  float _851 = mad(-0.07366999983787537f, _848, _850);
  float _852 = _846 * -0.10208000242710114f;
  float _853 = mad(1.1081299781799316f, _847, _852);
  float _854 = mad(-0.006049999967217445f, _848, _853);
  float _855 = _846 * -0.0032599999103695154f;
  float _856 = mad(-0.07275000214576721f, _847, _855);
  float _857 = mad(1.0760200023651123f, _848, _856);
  if (_413) {
    // float _859 = max(_851, 0.0f);
    // float _860 = max(_854, 0.0f);
    // float _861 = max(_857, 0.0f);
    // bool _862 = !(_859 >= 0.0030399328097701073f);
    // if (!_862) {
    //   float _864 = abs(_859);
    //   float _865 = log2(_864);
    //   float _866 = _865 * 0.4166666567325592f;
    //   float _867 = exp2(_866);
    //   float _868 = _867 * 1.0549999475479126f;
    //   float _869 = _868 + -0.054999999701976776f;
    //   _873 = _869;
    // } else {
    //   float _871 = _859 * 12.923210144042969f;
    //   _873 = _871;
    // }
    // bool _874 = !(_860 >= 0.0030399328097701073f);
    // if (!_874) {
    //   float _876 = abs(_860);
    //   float _877 = log2(_876);
    //   float _878 = _877 * 0.4166666567325592f;
    //   float _879 = exp2(_878);
    //   float _880 = _879 * 1.0549999475479126f;
    //   float _881 = _880 + -0.054999999701976776f;
    //   _885 = _881;
    // } else {
    //   float _883 = _860 * 12.923210144042969f;
    //   _885 = _883;
    // }
    // bool _886 = !(_861 >= 0.0030399328097701073f);
    // if (!_886) {
    //   float _888 = abs(_861);
    //   float _889 = log2(_888);
    //   float _890 = _889 * 0.4166666567325592f;
    //   float _891 = exp2(_890);
    //   float _892 = _891 * 1.0549999475479126f;
    //   float _893 = _892 + -0.054999999701976776f;
    //   _966 = _873;
    //   _967 = _885;
    //   _968 = _893;
    // } else {
    //   float _895 = _861 * 12.923210144042969f;
    //   _966 = _873;
    //   _967 = _885;
    //   _968 = _895;
    // }
    _966 = renodx::color::srgb::EncodeSafe(_851);
    _967 = renodx::color::srgb::EncodeSafe(_854);
    _968 = renodx::color::srgb::EncodeSafe(_857);

  } else {
    float _897 = saturate(_851);
    float _898 = saturate(_854);
    float _899 = saturate(_857);
    bool _900 = ((uint)(cb1_018w) == -2);
    if (!_900) {
      bool _902 = !(_897 >= 0.0030399328097701073f);
      if (!_902) {
        float _904 = abs(_897);
        float _905 = log2(_904);
        float _906 = _905 * 0.4166666567325592f;
        float _907 = exp2(_906);
        float _908 = _907 * 1.0549999475479126f;
        float _909 = _908 + -0.054999999701976776f;
        _913 = _909;
      } else {
        float _911 = _897 * 12.923210144042969f;
        _913 = _911;
      }
      bool _914 = !(_898 >= 0.0030399328097701073f);
      if (!_914) {
        float _916 = abs(_898);
        float _917 = log2(_916);
        float _918 = _917 * 0.4166666567325592f;
        float _919 = exp2(_918);
        float _920 = _919 * 1.0549999475479126f;
        float _921 = _920 + -0.054999999701976776f;
        _925 = _921;
      } else {
        float _923 = _898 * 12.923210144042969f;
        _925 = _923;
      }
      bool _926 = !(_899 >= 0.0030399328097701073f);
      if (!_926) {
        float _928 = abs(_899);
        float _929 = log2(_928);
        float _930 = _929 * 0.4166666567325592f;
        float _931 = exp2(_930);
        float _932 = _931 * 1.0549999475479126f;
        float _933 = _932 + -0.054999999701976776f;
        _937 = _913;
        _938 = _925;
        _939 = _933;
      } else {
        float _935 = _899 * 12.923210144042969f;
        _937 = _913;
        _938 = _925;
        _939 = _935;
      }
    } else {
      _937 = _897;
      _938 = _898;
      _939 = _899;
    }
    float _944 = abs(_937);
    float _945 = abs(_938);
    float _946 = abs(_939);
    float _947 = log2(_944);
    float _948 = log2(_945);
    float _949 = log2(_946);
    float _950 = _947 * cb2_000z;
    float _951 = _948 * cb2_000z;
    float _952 = _949 * cb2_000z;
    float _953 = exp2(_950);
    float _954 = exp2(_951);
    float _955 = exp2(_952);
    float _956 = _953 * cb2_000y;
    float _957 = _954 * cb2_000y;
    float _958 = _955 * cb2_000y;
    float _959 = _956 + cb2_000x;
    float _960 = _957 + cb2_000x;
    float _961 = _958 + cb2_000x;
    float _962 = saturate(_959);
    float _963 = saturate(_960);
    float _964 = saturate(_961);
    _966 = _962;
    _967 = _963;
    _968 = _964;
  }
  float _969 = dot(float3(_966, _967, _968), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _966;
  SV_Target.y = _967;
  SV_Target.z = _968;
  SV_Target.w = _969;
  SV_Target_1.x = _969;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
