#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = cb2_015x * TEXCOORD0_centroid.x;
  float _30 = cb2_015y * TEXCOORD0_centroid.y;
  float _33 = _29 + cb2_015z;
  float _34 = _30 + cb2_015w;
  float4 _35 = t7.SampleLevel(s0_space2, float2(_33, _34), 0.0f);
  float _39 = saturate(_35.x);
  float _40 = saturate(_35.z);
  float _43 = cb2_026x * _40;
  float _44 = _39 * 6.283199787139893f;
  float _45 = cos(_44);
  float _46 = sin(_44);
  float _47 = _43 * _45;
  float _48 = _46 * _43;
  float _49 = 1.0f - _35.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t1.SampleLevel(s4_space2, float2(_53, _54), 0.0f);
  float _59 = max(_55.x, 0.0f);
  float _60 = max(_55.y, 0.0f);
  float _61 = max(_55.z, 0.0f);
  float _62 = min(_59, 65000.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float4 _65 = t4.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  float _70 = max(_65.x, 0.0f);
  float _71 = max(_65.y, 0.0f);
  float _72 = max(_65.z, 0.0f);
  float _73 = max(_65.w, 0.0f);
  float _74 = min(_70, 5000.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _80 = _24.x * cb0_028z;
  float _81 = _80 + cb0_028x;
  float _82 = cb2_027w / _81;
  float _83 = 1.0f - _82;
  float _84 = abs(_83);
  float _86 = cb2_027y * _84;
  float _88 = _86 - cb2_027z;
  float _89 = saturate(_88);
  float _90 = max(_89, _77);
  float _91 = saturate(_90);
  float4 _92 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _96 = _74 - _62;
  float _97 = _75 - _63;
  float _98 = _76 - _64;
  float _99 = _91 * _96;
  float _100 = _91 * _97;
  float _101 = _91 * _98;
  float _102 = _99 + _62;
  float _103 = _100 + _63;
  float _104 = _101 + _64;
  float _105 = dot(float3(_102, _103, _104), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _109 = t0[0].SExposureData_020;
  float _111 = t0[0].SExposureData_004;
  float _113 = cb2_018x * 0.5f;
  float _114 = _113 * cb2_018y;
  float _115 = _111.x - _114;
  float _116 = cb2_018y * cb2_018x;
  float _117 = 1.0f / _116;
  float _118 = _115 * _117;
  float _119 = _105 / _109.x;
  float _120 = _119 * 5464.01611328125f;
  float _121 = _120 + 9.99999993922529e-09f;
  float _122 = log2(_121);
  float _123 = _122 - _115;
  float _124 = _123 * _117;
  float _125 = saturate(_124);
  float2 _126 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _125), 0.0f);
  float _129 = max(_126.y, 1.0000000116860974e-07f);
  float _130 = _126.x / _129;
  float _131 = _130 + _118;
  float _132 = _131 / _117;
  float _133 = _132 - _111.x;
  float _134 = -0.0f - _133;
  float _136 = _134 - cb2_027x;
  float _137 = max(0.0f, _136);
  float _139 = cb2_026z * _137;
  float _140 = _133 - cb2_027x;
  float _141 = max(0.0f, _140);
  float _143 = cb2_026w * _141;
  bool _144 = (_133 < 0.0f);
  float _145 = select(_144, _139, _143);
  float _146 = exp2(_145);
  float _147 = _146 * _102;
  float _148 = _146 * _103;
  float _149 = _146 * _104;
  float _154 = cb2_024y * _92.x;
  float _155 = cb2_024z * _92.y;
  float _156 = cb2_024w * _92.z;
  float _157 = _154 + _147;
  float _158 = _155 + _148;
  float _159 = _156 + _149;
  float _164 = _157 * cb2_025x;
  float _165 = _158 * cb2_025y;
  float _166 = _159 * cb2_025z;
  float _167 = dot(float3(_164, _165, _166), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _168 = t0[0].SExposureData_012;
  float _170 = _167 * 5464.01611328125f;
  float _171 = _170 * _168.x;
  float _172 = _171 + 9.99999993922529e-09f;
  float _173 = log2(_172);
  float _174 = _173 + 16.929765701293945f;
  float _175 = _174 * 0.05734497308731079f;
  float _176 = saturate(_175);
  float _177 = _176 * _176;
  float _178 = _176 * 2.0f;
  float _179 = 3.0f - _178;
  float _180 = _177 * _179;
  float _181 = _165 * 0.8450999855995178f;
  float _182 = _166 * 0.14589999616146088f;
  float _183 = _181 + _182;
  float _184 = _183 * 2.4890189170837402f;
  float _185 = _183 * 0.3754962384700775f;
  float _186 = _183 * 2.811495304107666f;
  float _187 = _183 * 5.519708156585693f;
  float _188 = _167 - _184;
  float _189 = _180 * _188;
  float _190 = _189 + _184;
  float _191 = _180 * 0.5f;
  float _192 = _191 + 0.5f;
  float _193 = _192 * _188;
  float _194 = _193 + _184;
  float _195 = _164 - _185;
  float _196 = _165 - _186;
  float _197 = _166 - _187;
  float _198 = _192 * _195;
  float _199 = _192 * _196;
  float _200 = _192 * _197;
  float _201 = _198 + _185;
  float _202 = _199 + _186;
  float _203 = _200 + _187;
  float _204 = 1.0f / _194;
  float _205 = _190 * _204;
  float _206 = _205 * _201;
  float _207 = _205 * _202;
  float _208 = _205 * _203;
  float _212 = cb2_020x * TEXCOORD0_centroid.x;
  float _213 = cb2_020y * TEXCOORD0_centroid.y;
  float _216 = _212 + cb2_020z;
  float _217 = _213 + cb2_020w;
  float _220 = dot(float2(_216, _217), float2(_216, _217));
  float _221 = 1.0f - _220;
  float _222 = saturate(_221);
  float _223 = log2(_222);
  float _224 = _223 * cb2_021w;
  float _225 = exp2(_224);
  float _229 = _206 - cb2_021x;
  float _230 = _207 - cb2_021y;
  float _231 = _208 - cb2_021z;
  float _232 = _229 * _225;
  float _233 = _230 * _225;
  float _234 = _231 * _225;
  float _235 = _232 + cb2_021x;
  float _236 = _233 + cb2_021y;
  float _237 = _234 + cb2_021z;
  float _238 = t0[0].SExposureData_000;
  float _240 = max(_109.x, 0.0010000000474974513f);
  float _241 = 1.0f / _240;
  float _242 = _241 * _238.x;
  bool _245 = ((uint)(cb2_069y) == 0);
  float _251;
  float _252;
  float _253;
  float _307;
  float _308;
  float _309;
  float _385;
  float _386;
  float _387;
  float _537;
  float _574;
  float _575;
  float _576;
  float _605;
  float _606;
  float _607;
  float _688;
  float _689;
  float _690;
  float _696;
  float _697;
  float _698;
  float _712;
  float _713;
  float _714;
  float _739;
  float _751;
  float _779;
  float _791;
  float _803;
  float _804;
  float _805;
  float _832;
  float _833;
  float _834;
  if (!_245) {
    float _247 = _242 * _235;
    float _248 = _242 * _236;
    float _249 = _242 * _237;
    _251 = _247;
    _252 = _248;
    _253 = _249;
  } else {
    _251 = _235;
    _252 = _236;
    _253 = _237;
  }
  float _254 = _251 * 0.6130970120429993f;
  float _255 = mad(0.33952298760414124f, _252, _254);
  float _256 = mad(0.04737899824976921f, _253, _255);
  float _257 = _251 * 0.07019399851560593f;
  float _258 = mad(0.9163540005683899f, _252, _257);
  float _259 = mad(0.013451999984681606f, _253, _258);
  float _260 = _251 * 0.02061600051820278f;
  float _261 = mad(0.10956999659538269f, _252, _260);
  float _262 = mad(0.8698149919509888f, _253, _261);
  float _263 = log2(_256);
  float _264 = log2(_259);
  float _265 = log2(_262);
  float _266 = _263 * 0.04211956635117531f;
  float _267 = _264 * 0.04211956635117531f;
  float _268 = _265 * 0.04211956635117531f;
  float _269 = _266 + 0.6252607107162476f;
  float _270 = _267 + 0.6252607107162476f;
  float _271 = _268 + 0.6252607107162476f;
  float4 _272 = t6.SampleLevel(s2_space2, float3(_269, _270, _271), 0.0f);
  bool _278 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_278 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _282 = cb2_017x * _272.x;
    float _283 = cb2_017x * _272.y;
    float _284 = cb2_017x * _272.z;
    float _286 = _282 + cb2_017y;
    float _287 = _283 + cb2_017y;
    float _288 = _284 + cb2_017y;
    float _289 = exp2(_286);
    float _290 = exp2(_287);
    float _291 = exp2(_288);
    float _292 = _289 + 1.0f;
    float _293 = _290 + 1.0f;
    float _294 = _291 + 1.0f;
    float _295 = 1.0f / _292;
    float _296 = 1.0f / _293;
    float _297 = 1.0f / _294;
    float _299 = cb2_017z * _295;
    float _300 = cb2_017z * _296;
    float _301 = cb2_017z * _297;
    float _303 = _299 + cb2_017w;
    float _304 = _300 + cb2_017w;
    float _305 = _301 + cb2_017w;
    _307 = _303;
    _308 = _304;
    _309 = _305;
  } else {
    _307 = _272.x;
    _308 = _272.y;
    _309 = _272.z;
  }
  float _310 = _307 * 23.0f;
  float _311 = _310 + -14.473931312561035f;
  float _312 = exp2(_311);
  float _313 = _308 * 23.0f;
  float _314 = _313 + -14.473931312561035f;
  float _315 = exp2(_314);
  float _316 = _309 * 23.0f;
  float _317 = _316 + -14.473931312561035f;
  float _318 = exp2(_317);
  float _319 = dot(float3(_312, _315, _318), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _324 = dot(float3(_312, _315, _318), float3(_312, _315, _318));
  float _325 = rsqrt(_324);
  float _326 = _325 * _312;
  float _327 = _325 * _315;
  float _328 = _325 * _318;
  float _329 = cb2_001x - _326;
  float _330 = cb2_001y - _327;
  float _331 = cb2_001z - _328;
  float _332 = dot(float3(_329, _330, _331), float3(_329, _330, _331));
  float _335 = cb2_002z * _332;
  float _337 = _335 + cb2_002w;
  float _338 = saturate(_337);
  float _340 = cb2_002x * _338;
  float _341 = _319 - _312;
  float _342 = _319 - _315;
  float _343 = _319 - _318;
  float _344 = _340 * _341;
  float _345 = _340 * _342;
  float _346 = _340 * _343;
  float _347 = _344 + _312;
  float _348 = _345 + _315;
  float _349 = _346 + _318;
  float _351 = cb2_002y * _338;
  float _352 = 0.10000000149011612f - _347;
  float _353 = 0.10000000149011612f - _348;
  float _354 = 0.10000000149011612f - _349;
  float _355 = _352 * _351;
  float _356 = _353 * _351;
  float _357 = _354 * _351;
  float _358 = _355 + _347;
  float _359 = _356 + _348;
  float _360 = _357 + _349;
  float _361 = saturate(_358);
  float _362 = saturate(_359);
  float _363 = saturate(_360);
  float _370 = cb2_016x - _361;
  float _371 = cb2_016y - _362;
  float _372 = cb2_016z - _363;
  float _373 = _370 * cb2_016w;
  float _374 = _371 * cb2_016w;
  float _375 = _372 * cb2_016w;
  float _376 = _373 + _361;
  float _377 = _374 + _362;
  float _378 = _375 + _363;
  if (_278 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _381 = cb2_024x * _376;
    float _382 = cb2_024x * _377;
    float _383 = cb2_024x * _378;
    _385 = _381;
    _386 = _382;
    _387 = _383;
  } else {
    _385 = _376;
    _386 = _377;
    _387 = _378;
  }
  float _390 = _385 * 0.9708889722824097f;
  float _391 = mad(0.026962999254465103f, _386, _390);
  float _392 = mad(0.002148000057786703f, _387, _391);
  float _393 = _385 * 0.01088900025933981f;
  float _394 = mad(0.9869629740715027f, _386, _393);
  float _395 = mad(0.002148000057786703f, _387, _394);
  float _396 = mad(0.026962999254465103f, _386, _393);
  float _397 = mad(0.9621480107307434f, _387, _396);
  float _398 = max(_392, 0.0f);
  float _399 = max(_395, 0.0f);
  float _400 = max(_397, 0.0f);
  float _401 = min(_398, cb2_095y);
  float _402 = min(_399, cb2_095y);
  float _403 = min(_400, cb2_095y);
  bool _406 = ((uint)(cb2_095x) == 0);
  bool _409 = ((uint)(cb2_094w) == 0);
  bool _411 = ((uint)(cb2_094z) == 0);
  bool _413 = ((uint)(cb2_094y) != 0);
  bool _415 = ((uint)(cb2_094x) == 0);
  bool _417 = ((uint)(cb2_069z) != 0);
  float _464 = asfloat((uint)(cb2_075y));
  float _465 = asfloat((uint)(cb2_075z));
  float _466 = asfloat((uint)(cb2_075w));
  float _467 = asfloat((uint)(cb2_074z));
  float _468 = asfloat((uint)(cb2_074w));
  float _469 = asfloat((uint)(cb2_075x));
  float _470 = asfloat((uint)(cb2_073w));
  float _471 = asfloat((uint)(cb2_074x));
  float _472 = asfloat((uint)(cb2_074y));
  float _473 = asfloat((uint)(cb2_077x));
  float _474 = asfloat((uint)(cb2_077y));
  float _475 = asfloat((uint)(cb2_079x));
  float _476 = asfloat((uint)(cb2_079y));
  float _477 = asfloat((uint)(cb2_079z));
  float _478 = asfloat((uint)(cb2_078y));
  float _479 = asfloat((uint)(cb2_078z));
  float _480 = asfloat((uint)(cb2_078w));
  float _481 = asfloat((uint)(cb2_077z));
  float _482 = asfloat((uint)(cb2_077w));
  float _483 = asfloat((uint)(cb2_078x));
  float _484 = asfloat((uint)(cb2_072y));
  float _485 = asfloat((uint)(cb2_072z));
  float _486 = asfloat((uint)(cb2_072w));
  float _487 = asfloat((uint)(cb2_071x));
  float _488 = asfloat((uint)(cb2_071y));
  float _489 = asfloat((uint)(cb2_076x));
  float _490 = asfloat((uint)(cb2_070w));
  float _491 = asfloat((uint)(cb2_070x));
  float _492 = asfloat((uint)(cb2_070y));
  float _493 = asfloat((uint)(cb2_070z));
  float _494 = asfloat((uint)(cb2_073x));
  float _495 = asfloat((uint)(cb2_073y));
  float _496 = asfloat((uint)(cb2_073z));
  float _497 = asfloat((uint)(cb2_071z));
  float _498 = asfloat((uint)(cb2_071w));
  float _499 = asfloat((uint)(cb2_072x));
  float _500 = max(_402, _403);
  float _501 = max(_401, _500);
  float _502 = 1.0f / _501;
  float _503 = _502 * _401;
  float _504 = _502 * _402;
  float _505 = _502 * _403;
  float _506 = abs(_503);
  float _507 = log2(_506);
  float _508 = _507 * _491;
  float _509 = exp2(_508);
  float _510 = abs(_504);
  float _511 = log2(_510);
  float _512 = _511 * _492;
  float _513 = exp2(_512);
  float _514 = abs(_505);
  float _515 = log2(_514);
  float _516 = _515 * _493;
  float _517 = exp2(_516);
  if (_413) {
    float _520 = asfloat((uint)(cb2_076w));
    float _522 = asfloat((uint)(cb2_076z));
    float _524 = asfloat((uint)(cb2_076y));
    float _525 = _522 * _402;
    float _526 = _524 * _401;
    float _527 = _520 * _403;
    float _528 = _526 + _527;
    float _529 = _528 + _525;
    _537 = _529;
  } else {
    float _531 = _498 * _402;
    float _532 = _497 * _401;
    float _533 = _499 * _403;
    float _534 = _531 + _532;
    float _535 = _534 + _533;
    _537 = _535;
  }
  float _538 = abs(_537);
  float _539 = log2(_538);
  float _540 = _539 * _490;
  float _541 = exp2(_540);
  float _542 = log2(_541);
  float _543 = _542 * _489;
  float _544 = exp2(_543);
  float _545 = select(_417, _544, _541);
  float _546 = _545 * _487;
  float _547 = _546 + _488;
  float _548 = 1.0f / _547;
  float _549 = _548 * _541;
  if (_413) {
    if (!_415) {
      float _552 = _509 * _481;
      float _553 = _513 * _482;
      float _554 = _517 * _483;
      float _555 = _553 + _552;
      float _556 = _555 + _554;
      float _557 = _513 * _479;
      float _558 = _509 * _478;
      float _559 = _517 * _480;
      float _560 = _557 + _558;
      float _561 = _560 + _559;
      float _562 = _517 * _477;
      float _563 = _513 * _476;
      float _564 = _509 * _475;
      float _565 = _563 + _564;
      float _566 = _565 + _562;
      float _567 = max(_561, _566);
      float _568 = max(_556, _567);
      float _569 = 1.0f / _568;
      float _570 = _569 * _556;
      float _571 = _569 * _561;
      float _572 = _569 * _566;
      _574 = _570;
      _575 = _571;
      _576 = _572;
    } else {
      _574 = _509;
      _575 = _513;
      _576 = _517;
    }
    float _577 = _574 * _474;
    float _578 = exp2(_577);
    float _579 = _578 * _473;
    float _580 = saturate(_579);
    float _581 = _574 * _473;
    float _582 = _574 - _581;
    float _583 = saturate(_582);
    float _584 = max(_473, _583);
    float _585 = min(_584, _580);
    float _586 = _575 * _474;
    float _587 = exp2(_586);
    float _588 = _587 * _473;
    float _589 = saturate(_588);
    float _590 = _575 * _473;
    float _591 = _575 - _590;
    float _592 = saturate(_591);
    float _593 = max(_473, _592);
    float _594 = min(_593, _589);
    float _595 = _576 * _474;
    float _596 = exp2(_595);
    float _597 = _596 * _473;
    float _598 = saturate(_597);
    float _599 = _576 * _473;
    float _600 = _576 - _599;
    float _601 = saturate(_600);
    float _602 = max(_473, _601);
    float _603 = min(_602, _598);
    _605 = _585;
    _606 = _594;
    _607 = _603;
  } else {
    _605 = _509;
    _606 = _513;
    _607 = _517;
  }
  float _608 = _605 * _497;
  float _609 = _606 * _498;
  float _610 = _609 + _608;
  float _611 = _607 * _499;
  float _612 = _610 + _611;
  float _613 = 1.0f / _612;
  float _614 = _613 * _549;
  float _615 = saturate(_614);
  float _616 = _615 * _605;
  float _617 = saturate(_616);
  float _618 = _615 * _606;
  float _619 = saturate(_618);
  float _620 = _615 * _607;
  float _621 = saturate(_620);
  float _622 = _617 * _484;
  float _623 = _484 - _622;
  float _624 = _619 * _485;
  float _625 = _485 - _624;
  float _626 = _621 * _486;
  float _627 = _486 - _626;
  float _628 = _621 * _499;
  float _629 = _617 * _497;
  float _630 = _619 * _498;
  float _631 = _549 - _629;
  float _632 = _631 - _630;
  float _633 = _632 - _628;
  float _634 = saturate(_633);
  float _635 = _625 * _498;
  float _636 = _623 * _497;
  float _637 = _627 * _499;
  float _638 = _635 + _636;
  float _639 = _638 + _637;
  float _640 = 1.0f / _639;
  float _641 = _640 * _634;
  float _642 = _641 * _623;
  float _643 = _642 + _617;
  float _644 = saturate(_643);
  float _645 = _641 * _625;
  float _646 = _645 + _619;
  float _647 = saturate(_646);
  float _648 = _641 * _627;
  float _649 = _648 + _621;
  float _650 = saturate(_649);
  float _651 = _650 * _499;
  float _652 = _644 * _497;
  float _653 = _647 * _498;
  float _654 = _549 - _652;
  float _655 = _654 - _653;
  float _656 = _655 - _651;
  float _657 = saturate(_656);
  float _658 = _657 * _494;
  float _659 = _658 + _644;
  float _660 = saturate(_659);
  float _661 = _657 * _495;
  float _662 = _661 + _647;
  float _663 = saturate(_662);
  float _664 = _657 * _496;
  float _665 = _664 + _650;
  float _666 = saturate(_665);
  if (!_411) {
    float _668 = _660 * _470;
    float _669 = _663 * _471;
    float _670 = _666 * _472;
    float _671 = _669 + _668;
    float _672 = _671 + _670;
    float _673 = _663 * _468;
    float _674 = _660 * _467;
    float _675 = _666 * _469;
    float _676 = _673 + _674;
    float _677 = _676 + _675;
    float _678 = _666 * _466;
    float _679 = _663 * _465;
    float _680 = _660 * _464;
    float _681 = _679 + _680;
    float _682 = _681 + _678;
    if (!_409) {
      float _684 = saturate(_672);
      float _685 = saturate(_677);
      float _686 = saturate(_682);
      _688 = _686;
      _689 = _685;
      _690 = _684;
    } else {
      _688 = _682;
      _689 = _677;
      _690 = _672;
    }
  } else {
    _688 = _666;
    _689 = _663;
    _690 = _660;
  }
  if (!_406) {
    float _692 = _690 * _470;
    float _693 = _689 * _470;
    float _694 = _688 * _470;
    _696 = _694;
    _697 = _693;
    _698 = _692;
  } else {
    _696 = _688;
    _697 = _689;
    _698 = _690;
  }
  if (_278) {
    float _702 = cb1_018z * 9.999999747378752e-05f;
    float _703 = _702 * _698;
    float _704 = _702 * _697;
    float _705 = _702 * _696;
    float _707 = 5000.0f / cb1_018y;
    float _708 = _703 * _707;
    float _709 = _704 * _707;
    float _710 = _705 * _707;
    _712 = _708;
    _713 = _709;
    _714 = _710;
  } else {
    _712 = _698;
    _713 = _697;
    _714 = _696;
  }
  float _715 = _712 * 1.6047500371932983f;
  float _716 = mad(-0.5310800075531006f, _713, _715);
  float _717 = mad(-0.07366999983787537f, _714, _716);
  float _718 = _712 * -0.10208000242710114f;
  float _719 = mad(1.1081299781799316f, _713, _718);
  float _720 = mad(-0.006049999967217445f, _714, _719);
  float _721 = _712 * -0.0032599999103695154f;
  float _722 = mad(-0.07275000214576721f, _713, _721);
  float _723 = mad(1.0760200023651123f, _714, _722);
  if (_278) {
    // float _725 = max(_717, 0.0f);
    // float _726 = max(_720, 0.0f);
    // float _727 = max(_723, 0.0f);
    // bool _728 = !(_725 >= 0.0030399328097701073f);
    // if (!_728) {
    //   float _730 = abs(_725);
    //   float _731 = log2(_730);
    //   float _732 = _731 * 0.4166666567325592f;
    //   float _733 = exp2(_732);
    //   float _734 = _733 * 1.0549999475479126f;
    //   float _735 = _734 + -0.054999999701976776f;
    //   _739 = _735;
    // } else {
    //   float _737 = _725 * 12.923210144042969f;
    //   _739 = _737;
    // }
    // bool _740 = !(_726 >= 0.0030399328097701073f);
    // if (!_740) {
    //   float _742 = abs(_726);
    //   float _743 = log2(_742);
    //   float _744 = _743 * 0.4166666567325592f;
    //   float _745 = exp2(_744);
    //   float _746 = _745 * 1.0549999475479126f;
    //   float _747 = _746 + -0.054999999701976776f;
    //   _751 = _747;
    // } else {
    //   float _749 = _726 * 12.923210144042969f;
    //   _751 = _749;
    // }
    // bool _752 = !(_727 >= 0.0030399328097701073f);
    // if (!_752) {
    //   float _754 = abs(_727);
    //   float _755 = log2(_754);
    //   float _756 = _755 * 0.4166666567325592f;
    //   float _757 = exp2(_756);
    //   float _758 = _757 * 1.0549999475479126f;
    //   float _759 = _758 + -0.054999999701976776f;
    //   _832 = _739;
    //   _833 = _751;
    //   _834 = _759;
    // } else {
    //   float _761 = _727 * 12.923210144042969f;
    //   _832 = _739;
    //   _833 = _751;
    //   _834 = _761;
    // }
    _832 = renodx::color::srgb::EncodeSafe(_717);
    _833 = renodx::color::srgb::EncodeSafe(_720);
    _834 = renodx::color::srgb::EncodeSafe(_723);

  } else {
    float _763 = saturate(_717);
    float _764 = saturate(_720);
    float _765 = saturate(_723);
    bool _766 = ((uint)(cb1_018w) == -2);
    if (!_766) {
      bool _768 = !(_763 >= 0.0030399328097701073f);
      if (!_768) {
        float _770 = abs(_763);
        float _771 = log2(_770);
        float _772 = _771 * 0.4166666567325592f;
        float _773 = exp2(_772);
        float _774 = _773 * 1.0549999475479126f;
        float _775 = _774 + -0.054999999701976776f;
        _779 = _775;
      } else {
        float _777 = _763 * 12.923210144042969f;
        _779 = _777;
      }
      bool _780 = !(_764 >= 0.0030399328097701073f);
      if (!_780) {
        float _782 = abs(_764);
        float _783 = log2(_782);
        float _784 = _783 * 0.4166666567325592f;
        float _785 = exp2(_784);
        float _786 = _785 * 1.0549999475479126f;
        float _787 = _786 + -0.054999999701976776f;
        _791 = _787;
      } else {
        float _789 = _764 * 12.923210144042969f;
        _791 = _789;
      }
      bool _792 = !(_765 >= 0.0030399328097701073f);
      if (!_792) {
        float _794 = abs(_765);
        float _795 = log2(_794);
        float _796 = _795 * 0.4166666567325592f;
        float _797 = exp2(_796);
        float _798 = _797 * 1.0549999475479126f;
        float _799 = _798 + -0.054999999701976776f;
        _803 = _779;
        _804 = _791;
        _805 = _799;
      } else {
        float _801 = _765 * 12.923210144042969f;
        _803 = _779;
        _804 = _791;
        _805 = _801;
      }
    } else {
      _803 = _763;
      _804 = _764;
      _805 = _765;
    }
    float _810 = abs(_803);
    float _811 = abs(_804);
    float _812 = abs(_805);
    float _813 = log2(_810);
    float _814 = log2(_811);
    float _815 = log2(_812);
    float _816 = _813 * cb2_000z;
    float _817 = _814 * cb2_000z;
    float _818 = _815 * cb2_000z;
    float _819 = exp2(_816);
    float _820 = exp2(_817);
    float _821 = exp2(_818);
    float _822 = _819 * cb2_000y;
    float _823 = _820 * cb2_000y;
    float _824 = _821 * cb2_000y;
    float _825 = _822 + cb2_000x;
    float _826 = _823 + cb2_000x;
    float _827 = _824 + cb2_000x;
    float _828 = saturate(_825);
    float _829 = saturate(_826);
    float _830 = saturate(_827);
    _832 = _828;
    _833 = _829;
    _834 = _830;
  }
  float _838 = cb2_023x * TEXCOORD0_centroid.x;
  float _839 = cb2_023y * TEXCOORD0_centroid.y;
  float _842 = _838 + cb2_023z;
  float _843 = _839 + cb2_023w;
  float4 _846 = t9.SampleLevel(s0_space2, float2(_842, _843), 0.0f);
  float _848 = _846.x + -0.5f;
  float _849 = _848 * cb2_022x;
  float _850 = _849 + 0.5f;
  float _851 = _850 * 2.0f;
  float _852 = _851 * _832;
  float _853 = _851 * _833;
  float _854 = _851 * _834;
  float _858 = float((uint)(cb2_019z));
  float _859 = float((uint)(cb2_019w));
  float _860 = _858 + SV_Position.x;
  float _861 = _859 + SV_Position.y;
  uint _862 = uint(_860);
  uint _863 = uint(_861);
  uint _866 = cb2_019x + -1u;
  uint _867 = cb2_019y + -1u;
  int _868 = _862 & _866;
  int _869 = _863 & _867;
  float4 _870 = t3.Load(int3(_868, _869, 0));
  float _874 = _870.x * 2.0f;
  float _875 = _870.y * 2.0f;
  float _876 = _870.z * 2.0f;
  float _877 = _874 + -1.0f;
  float _878 = _875 + -1.0f;
  float _879 = _876 + -1.0f;
  float _880 = _877 * cb2_025w;
  float _881 = _878 * cb2_025w;
  float _882 = _879 * cb2_025w;
  float _883 = _880 + _852;
  float _884 = _881 + _853;
  float _885 = _882 + _854;
  float _886 = dot(float3(_883, _884, _885), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _883;
  SV_Target.y = _884;
  SV_Target.z = _885;
  SV_Target.w = _886;
  SV_Target_1.x = _886;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
