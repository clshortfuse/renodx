#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = cb2_015x * TEXCOORD0_centroid.x;
  float _31 = cb2_015y * TEXCOORD0_centroid.y;
  float _34 = _30 + cb2_015z;
  float _35 = _31 + cb2_015w;
  float4 _36 = t8.SampleLevel(s0_space2, float2(_34, _35), 0.0f);
  float _40 = saturate(_36.x);
  float _41 = saturate(_36.z);
  float _44 = cb2_026x * _41;
  float _45 = _40 * 6.283199787139893f;
  float _46 = cos(_45);
  float _47 = sin(_45);
  float _48 = _44 * _46;
  float _49 = _47 * _44;
  float _50 = 1.0f - _36.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _54 = _52 + TEXCOORD0_centroid.x;
  float _55 = _53 + TEXCOORD0_centroid.y;
  float4 _56 = t1.SampleLevel(s4_space2, float2(_54, _55), 0.0f);
  float _60 = max(_56.x, 0.0f);
  float _61 = max(_56.y, 0.0f);
  float _62 = max(_56.z, 0.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float _65 = min(_62, 65000.0f);
  float4 _66 = t4.SampleLevel(s2_space2, float2(_54, _55), 0.0f);
  float _71 = max(_66.x, 0.0f);
  float _72 = max(_66.y, 0.0f);
  float _73 = max(_66.z, 0.0f);
  float _74 = max(_66.w, 0.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _78 = min(_74, 5000.0f);
  float _81 = _25.x * cb0_028z;
  float _82 = _81 + cb0_028x;
  float _83 = cb2_027w / _82;
  float _84 = 1.0f - _83;
  float _85 = abs(_84);
  float _87 = cb2_027y * _85;
  float _89 = _87 - cb2_027z;
  float _90 = saturate(_89);
  float _91 = max(_90, _78);
  float _92 = saturate(_91);
  float _96 = cb2_006x * _54;
  float _97 = cb2_006y * _55;
  float _100 = _96 + cb2_006z;
  float _101 = _97 + cb2_006w;
  float _105 = cb2_007x * _54;
  float _106 = cb2_007y * _55;
  float _109 = _105 + cb2_007z;
  float _110 = _106 + cb2_007w;
  float _114 = cb2_008x * _54;
  float _115 = cb2_008y * _55;
  float _118 = _114 + cb2_008z;
  float _119 = _115 + cb2_008w;
  float4 _120 = t1.SampleLevel(s2_space2, float2(_100, _101), 0.0f);
  float _122 = max(_120.x, 0.0f);
  float _123 = min(_122, 65000.0f);
  float4 _124 = t1.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _126 = max(_124.y, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t1.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _130 = max(_128.z, 0.0f);
  float _131 = min(_130, 65000.0f);
  float4 _132 = t4.SampleLevel(s2_space2, float2(_100, _101), 0.0f);
  float _134 = max(_132.x, 0.0f);
  float _135 = min(_134, 5000.0f);
  float4 _136 = t4.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _138 = max(_136.y, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t4.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _142 = max(_140.z, 0.0f);
  float _143 = min(_142, 5000.0f);
  float4 _144 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _150 = cb2_005x * _144.x;
  float _151 = cb2_005x * _144.y;
  float _152 = cb2_005x * _144.z;
  float _153 = _123 - _63;
  float _154 = _127 - _64;
  float _155 = _131 - _65;
  float _156 = _150 * _153;
  float _157 = _151 * _154;
  float _158 = _152 * _155;
  float _159 = _156 + _63;
  float _160 = _157 + _64;
  float _161 = _158 + _65;
  float _162 = _135 - _75;
  float _163 = _139 - _76;
  float _164 = _143 - _77;
  float _165 = _150 * _162;
  float _166 = _151 * _163;
  float _167 = _152 * _164;
  float _168 = _165 + _75;
  float _169 = _166 + _76;
  float _170 = _167 + _77;
  float4 _171 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _175 = _168 - _159;
  float _176 = _169 - _160;
  float _177 = _170 - _161;
  float _178 = _175 * _92;
  float _179 = _176 * _92;
  float _180 = _177 * _92;
  float _181 = _178 + _159;
  float _182 = _179 + _160;
  float _183 = _180 + _161;
  float _184 = dot(float3(_181, _182, _183), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _188 = t0[0].SExposureData_020;
  float _190 = t0[0].SExposureData_004;
  float _192 = cb2_018x * 0.5f;
  float _193 = _192 * cb2_018y;
  float _194 = _190.x - _193;
  float _195 = cb2_018y * cb2_018x;
  float _196 = 1.0f / _195;
  float _197 = _194 * _196;
  float _198 = _184 / _188.x;
  float _199 = _198 * 5464.01611328125f;
  float _200 = _199 + 9.99999993922529e-09f;
  float _201 = log2(_200);
  float _202 = _201 - _194;
  float _203 = _202 * _196;
  float _204 = saturate(_203);
  float2 _205 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _204), 0.0f);
  float _208 = max(_205.y, 1.0000000116860974e-07f);
  float _209 = _205.x / _208;
  float _210 = _209 + _197;
  float _211 = _210 / _196;
  float _212 = _211 - _190.x;
  float _213 = -0.0f - _212;
  float _215 = _213 - cb2_027x;
  float _216 = max(0.0f, _215);
  float _218 = cb2_026z * _216;
  float _219 = _212 - cb2_027x;
  float _220 = max(0.0f, _219);
  float _222 = cb2_026w * _220;
  bool _223 = (_212 < 0.0f);
  float _224 = select(_223, _218, _222);
  float _225 = exp2(_224);
  float _226 = _225 * _181;
  float _227 = _225 * _182;
  float _228 = _225 * _183;
  float _233 = cb2_024y * _171.x;
  float _234 = cb2_024z * _171.y;
  float _235 = cb2_024w * _171.z;
  float _236 = _233 + _226;
  float _237 = _234 + _227;
  float _238 = _235 + _228;
  float _243 = _236 * cb2_025x;
  float _244 = _237 * cb2_025y;
  float _245 = _238 * cb2_025z;
  float _246 = dot(float3(_243, _244, _245), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _247 = t0[0].SExposureData_012;
  float _249 = _246 * 5464.01611328125f;
  float _250 = _249 * _247.x;
  float _251 = _250 + 9.99999993922529e-09f;
  float _252 = log2(_251);
  float _253 = _252 + 16.929765701293945f;
  float _254 = _253 * 0.05734497308731079f;
  float _255 = saturate(_254);
  float _256 = _255 * _255;
  float _257 = _255 * 2.0f;
  float _258 = 3.0f - _257;
  float _259 = _256 * _258;
  float _260 = _244 * 0.8450999855995178f;
  float _261 = _245 * 0.14589999616146088f;
  float _262 = _260 + _261;
  float _263 = _262 * 2.4890189170837402f;
  float _264 = _262 * 0.3754962384700775f;
  float _265 = _262 * 2.811495304107666f;
  float _266 = _262 * 5.519708156585693f;
  float _267 = _246 - _263;
  float _268 = _259 * _267;
  float _269 = _268 + _263;
  float _270 = _259 * 0.5f;
  float _271 = _270 + 0.5f;
  float _272 = _271 * _267;
  float _273 = _272 + _263;
  float _274 = _243 - _264;
  float _275 = _244 - _265;
  float _276 = _245 - _266;
  float _277 = _271 * _274;
  float _278 = _271 * _275;
  float _279 = _271 * _276;
  float _280 = _277 + _264;
  float _281 = _278 + _265;
  float _282 = _279 + _266;
  float _283 = 1.0f / _273;
  float _284 = _269 * _283;
  float _285 = _284 * _280;
  float _286 = _284 * _281;
  float _287 = _284 * _282;
  float _291 = cb2_020x * TEXCOORD0_centroid.x;
  float _292 = cb2_020y * TEXCOORD0_centroid.y;
  float _295 = _291 + cb2_020z;
  float _296 = _292 + cb2_020w;
  float _299 = dot(float2(_295, _296), float2(_295, _296));
  float _300 = 1.0f - _299;
  float _301 = saturate(_300);
  float _302 = log2(_301);
  float _303 = _302 * cb2_021w;
  float _304 = exp2(_303);
  float _308 = _285 - cb2_021x;
  float _309 = _286 - cb2_021y;
  float _310 = _287 - cb2_021z;
  float _311 = _308 * _304;
  float _312 = _309 * _304;
  float _313 = _310 * _304;
  float _314 = _311 + cb2_021x;
  float _315 = _312 + cb2_021y;
  float _316 = _313 + cb2_021z;
  float _317 = t0[0].SExposureData_000;
  float _319 = max(_188.x, 0.0010000000474974513f);
  float _320 = 1.0f / _319;
  float _321 = _320 * _317.x;
  bool _324 = ((uint)(cb2_069y) == 0);
  float _330;
  float _331;
  float _332;
  float _386;
  float _387;
  float _388;
  float _464;
  float _465;
  float _466;
  float _616;
  float _653;
  float _654;
  float _655;
  float _684;
  float _685;
  float _686;
  float _767;
  float _768;
  float _769;
  float _775;
  float _776;
  float _777;
  float _791;
  float _792;
  float _793;
  float _818;
  float _830;
  float _858;
  float _870;
  float _882;
  float _883;
  float _884;
  float _911;
  float _912;
  float _913;
  if (!_324) {
    float _326 = _321 * _314;
    float _327 = _321 * _315;
    float _328 = _321 * _316;
    _330 = _326;
    _331 = _327;
    _332 = _328;
  } else {
    _330 = _314;
    _331 = _315;
    _332 = _316;
  }
  float _333 = _330 * 0.6130970120429993f;
  float _334 = mad(0.33952298760414124f, _331, _333);
  float _335 = mad(0.04737899824976921f, _332, _334);
  float _336 = _330 * 0.07019399851560593f;
  float _337 = mad(0.9163540005683899f, _331, _336);
  float _338 = mad(0.013451999984681606f, _332, _337);
  float _339 = _330 * 0.02061600051820278f;
  float _340 = mad(0.10956999659538269f, _331, _339);
  float _341 = mad(0.8698149919509888f, _332, _340);
  float _342 = log2(_335);
  float _343 = log2(_338);
  float _344 = log2(_341);
  float _345 = _342 * 0.04211956635117531f;
  float _346 = _343 * 0.04211956635117531f;
  float _347 = _344 * 0.04211956635117531f;
  float _348 = _345 + 0.6252607107162476f;
  float _349 = _346 + 0.6252607107162476f;
  float _350 = _347 + 0.6252607107162476f;
  float4 _351 = t6.SampleLevel(s2_space2, float3(_348, _349, _350), 0.0f);
  bool _357 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_357 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _361 = cb2_017x * _351.x;
    float _362 = cb2_017x * _351.y;
    float _363 = cb2_017x * _351.z;
    float _365 = _361 + cb2_017y;
    float _366 = _362 + cb2_017y;
    float _367 = _363 + cb2_017y;
    float _368 = exp2(_365);
    float _369 = exp2(_366);
    float _370 = exp2(_367);
    float _371 = _368 + 1.0f;
    float _372 = _369 + 1.0f;
    float _373 = _370 + 1.0f;
    float _374 = 1.0f / _371;
    float _375 = 1.0f / _372;
    float _376 = 1.0f / _373;
    float _378 = cb2_017z * _374;
    float _379 = cb2_017z * _375;
    float _380 = cb2_017z * _376;
    float _382 = _378 + cb2_017w;
    float _383 = _379 + cb2_017w;
    float _384 = _380 + cb2_017w;
    _386 = _382;
    _387 = _383;
    _388 = _384;
  } else {
    _386 = _351.x;
    _387 = _351.y;
    _388 = _351.z;
  }
  float _389 = _386 * 23.0f;
  float _390 = _389 + -14.473931312561035f;
  float _391 = exp2(_390);
  float _392 = _387 * 23.0f;
  float _393 = _392 + -14.473931312561035f;
  float _394 = exp2(_393);
  float _395 = _388 * 23.0f;
  float _396 = _395 + -14.473931312561035f;
  float _397 = exp2(_396);
  float _398 = dot(float3(_391, _394, _397), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _403 = dot(float3(_391, _394, _397), float3(_391, _394, _397));
  float _404 = rsqrt(_403);
  float _405 = _404 * _391;
  float _406 = _404 * _394;
  float _407 = _404 * _397;
  float _408 = cb2_001x - _405;
  float _409 = cb2_001y - _406;
  float _410 = cb2_001z - _407;
  float _411 = dot(float3(_408, _409, _410), float3(_408, _409, _410));
  float _414 = cb2_002z * _411;
  float _416 = _414 + cb2_002w;
  float _417 = saturate(_416);
  float _419 = cb2_002x * _417;
  float _420 = _398 - _391;
  float _421 = _398 - _394;
  float _422 = _398 - _397;
  float _423 = _419 * _420;
  float _424 = _419 * _421;
  float _425 = _419 * _422;
  float _426 = _423 + _391;
  float _427 = _424 + _394;
  float _428 = _425 + _397;
  float _430 = cb2_002y * _417;
  float _431 = 0.10000000149011612f - _426;
  float _432 = 0.10000000149011612f - _427;
  float _433 = 0.10000000149011612f - _428;
  float _434 = _431 * _430;
  float _435 = _432 * _430;
  float _436 = _433 * _430;
  float _437 = _434 + _426;
  float _438 = _435 + _427;
  float _439 = _436 + _428;
  float _440 = saturate(_437);
  float _441 = saturate(_438);
  float _442 = saturate(_439);
  float _449 = cb2_016x - _440;
  float _450 = cb2_016y - _441;
  float _451 = cb2_016z - _442;
  float _452 = _449 * cb2_016w;
  float _453 = _450 * cb2_016w;
  float _454 = _451 * cb2_016w;
  float _455 = _452 + _440;
  float _456 = _453 + _441;
  float _457 = _454 + _442;
  if (_357 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _460 = cb2_024x * _455;
    float _461 = cb2_024x * _456;
    float _462 = cb2_024x * _457;
    _464 = _460;
    _465 = _461;
    _466 = _462;
  } else {
    _464 = _455;
    _465 = _456;
    _466 = _457;
  }
  float _469 = _464 * 0.9708889722824097f;
  float _470 = mad(0.026962999254465103f, _465, _469);
  float _471 = mad(0.002148000057786703f, _466, _470);
  float _472 = _464 * 0.01088900025933981f;
  float _473 = mad(0.9869629740715027f, _465, _472);
  float _474 = mad(0.002148000057786703f, _466, _473);
  float _475 = mad(0.026962999254465103f, _465, _472);
  float _476 = mad(0.9621480107307434f, _466, _475);
  float _477 = max(_471, 0.0f);
  float _478 = max(_474, 0.0f);
  float _479 = max(_476, 0.0f);
  float _480 = min(_477, cb2_095y);
  float _481 = min(_478, cb2_095y);
  float _482 = min(_479, cb2_095y);
  bool _485 = ((uint)(cb2_095x) == 0);
  bool _488 = ((uint)(cb2_094w) == 0);
  bool _490 = ((uint)(cb2_094z) == 0);
  bool _492 = ((uint)(cb2_094y) != 0);
  bool _494 = ((uint)(cb2_094x) == 0);
  bool _496 = ((uint)(cb2_069z) != 0);
  float _543 = asfloat((uint)(cb2_075y));
  float _544 = asfloat((uint)(cb2_075z));
  float _545 = asfloat((uint)(cb2_075w));
  float _546 = asfloat((uint)(cb2_074z));
  float _547 = asfloat((uint)(cb2_074w));
  float _548 = asfloat((uint)(cb2_075x));
  float _549 = asfloat((uint)(cb2_073w));
  float _550 = asfloat((uint)(cb2_074x));
  float _551 = asfloat((uint)(cb2_074y));
  float _552 = asfloat((uint)(cb2_077x));
  float _553 = asfloat((uint)(cb2_077y));
  float _554 = asfloat((uint)(cb2_079x));
  float _555 = asfloat((uint)(cb2_079y));
  float _556 = asfloat((uint)(cb2_079z));
  float _557 = asfloat((uint)(cb2_078y));
  float _558 = asfloat((uint)(cb2_078z));
  float _559 = asfloat((uint)(cb2_078w));
  float _560 = asfloat((uint)(cb2_077z));
  float _561 = asfloat((uint)(cb2_077w));
  float _562 = asfloat((uint)(cb2_078x));
  float _563 = asfloat((uint)(cb2_072y));
  float _564 = asfloat((uint)(cb2_072z));
  float _565 = asfloat((uint)(cb2_072w));
  float _566 = asfloat((uint)(cb2_071x));
  float _567 = asfloat((uint)(cb2_071y));
  float _568 = asfloat((uint)(cb2_076x));
  float _569 = asfloat((uint)(cb2_070w));
  float _570 = asfloat((uint)(cb2_070x));
  float _571 = asfloat((uint)(cb2_070y));
  float _572 = asfloat((uint)(cb2_070z));
  float _573 = asfloat((uint)(cb2_073x));
  float _574 = asfloat((uint)(cb2_073y));
  float _575 = asfloat((uint)(cb2_073z));
  float _576 = asfloat((uint)(cb2_071z));
  float _577 = asfloat((uint)(cb2_071w));
  float _578 = asfloat((uint)(cb2_072x));
  float _579 = max(_481, _482);
  float _580 = max(_480, _579);
  float _581 = 1.0f / _580;
  float _582 = _581 * _480;
  float _583 = _581 * _481;
  float _584 = _581 * _482;
  float _585 = abs(_582);
  float _586 = log2(_585);
  float _587 = _586 * _570;
  float _588 = exp2(_587);
  float _589 = abs(_583);
  float _590 = log2(_589);
  float _591 = _590 * _571;
  float _592 = exp2(_591);
  float _593 = abs(_584);
  float _594 = log2(_593);
  float _595 = _594 * _572;
  float _596 = exp2(_595);
  if (_492) {
    float _599 = asfloat((uint)(cb2_076w));
    float _601 = asfloat((uint)(cb2_076z));
    float _603 = asfloat((uint)(cb2_076y));
    float _604 = _601 * _481;
    float _605 = _603 * _480;
    float _606 = _599 * _482;
    float _607 = _605 + _606;
    float _608 = _607 + _604;
    _616 = _608;
  } else {
    float _610 = _577 * _481;
    float _611 = _576 * _480;
    float _612 = _578 * _482;
    float _613 = _610 + _611;
    float _614 = _613 + _612;
    _616 = _614;
  }
  float _617 = abs(_616);
  float _618 = log2(_617);
  float _619 = _618 * _569;
  float _620 = exp2(_619);
  float _621 = log2(_620);
  float _622 = _621 * _568;
  float _623 = exp2(_622);
  float _624 = select(_496, _623, _620);
  float _625 = _624 * _566;
  float _626 = _625 + _567;
  float _627 = 1.0f / _626;
  float _628 = _627 * _620;
  if (_492) {
    if (!_494) {
      float _631 = _588 * _560;
      float _632 = _592 * _561;
      float _633 = _596 * _562;
      float _634 = _632 + _631;
      float _635 = _634 + _633;
      float _636 = _592 * _558;
      float _637 = _588 * _557;
      float _638 = _596 * _559;
      float _639 = _636 + _637;
      float _640 = _639 + _638;
      float _641 = _596 * _556;
      float _642 = _592 * _555;
      float _643 = _588 * _554;
      float _644 = _642 + _643;
      float _645 = _644 + _641;
      float _646 = max(_640, _645);
      float _647 = max(_635, _646);
      float _648 = 1.0f / _647;
      float _649 = _648 * _635;
      float _650 = _648 * _640;
      float _651 = _648 * _645;
      _653 = _649;
      _654 = _650;
      _655 = _651;
    } else {
      _653 = _588;
      _654 = _592;
      _655 = _596;
    }
    float _656 = _653 * _553;
    float _657 = exp2(_656);
    float _658 = _657 * _552;
    float _659 = saturate(_658);
    float _660 = _653 * _552;
    float _661 = _653 - _660;
    float _662 = saturate(_661);
    float _663 = max(_552, _662);
    float _664 = min(_663, _659);
    float _665 = _654 * _553;
    float _666 = exp2(_665);
    float _667 = _666 * _552;
    float _668 = saturate(_667);
    float _669 = _654 * _552;
    float _670 = _654 - _669;
    float _671 = saturate(_670);
    float _672 = max(_552, _671);
    float _673 = min(_672, _668);
    float _674 = _655 * _553;
    float _675 = exp2(_674);
    float _676 = _675 * _552;
    float _677 = saturate(_676);
    float _678 = _655 * _552;
    float _679 = _655 - _678;
    float _680 = saturate(_679);
    float _681 = max(_552, _680);
    float _682 = min(_681, _677);
    _684 = _664;
    _685 = _673;
    _686 = _682;
  } else {
    _684 = _588;
    _685 = _592;
    _686 = _596;
  }
  float _687 = _684 * _576;
  float _688 = _685 * _577;
  float _689 = _688 + _687;
  float _690 = _686 * _578;
  float _691 = _689 + _690;
  float _692 = 1.0f / _691;
  float _693 = _692 * _628;
  float _694 = saturate(_693);
  float _695 = _694 * _684;
  float _696 = saturate(_695);
  float _697 = _694 * _685;
  float _698 = saturate(_697);
  float _699 = _694 * _686;
  float _700 = saturate(_699);
  float _701 = _696 * _563;
  float _702 = _563 - _701;
  float _703 = _698 * _564;
  float _704 = _564 - _703;
  float _705 = _700 * _565;
  float _706 = _565 - _705;
  float _707 = _700 * _578;
  float _708 = _696 * _576;
  float _709 = _698 * _577;
  float _710 = _628 - _708;
  float _711 = _710 - _709;
  float _712 = _711 - _707;
  float _713 = saturate(_712);
  float _714 = _704 * _577;
  float _715 = _702 * _576;
  float _716 = _706 * _578;
  float _717 = _714 + _715;
  float _718 = _717 + _716;
  float _719 = 1.0f / _718;
  float _720 = _719 * _713;
  float _721 = _720 * _702;
  float _722 = _721 + _696;
  float _723 = saturate(_722);
  float _724 = _720 * _704;
  float _725 = _724 + _698;
  float _726 = saturate(_725);
  float _727 = _720 * _706;
  float _728 = _727 + _700;
  float _729 = saturate(_728);
  float _730 = _729 * _578;
  float _731 = _723 * _576;
  float _732 = _726 * _577;
  float _733 = _628 - _731;
  float _734 = _733 - _732;
  float _735 = _734 - _730;
  float _736 = saturate(_735);
  float _737 = _736 * _573;
  float _738 = _737 + _723;
  float _739 = saturate(_738);
  float _740 = _736 * _574;
  float _741 = _740 + _726;
  float _742 = saturate(_741);
  float _743 = _736 * _575;
  float _744 = _743 + _729;
  float _745 = saturate(_744);
  if (!_490) {
    float _747 = _739 * _549;
    float _748 = _742 * _550;
    float _749 = _745 * _551;
    float _750 = _748 + _747;
    float _751 = _750 + _749;
    float _752 = _742 * _547;
    float _753 = _739 * _546;
    float _754 = _745 * _548;
    float _755 = _752 + _753;
    float _756 = _755 + _754;
    float _757 = _745 * _545;
    float _758 = _742 * _544;
    float _759 = _739 * _543;
    float _760 = _758 + _759;
    float _761 = _760 + _757;
    if (!_488) {
      float _763 = saturate(_751);
      float _764 = saturate(_756);
      float _765 = saturate(_761);
      _767 = _765;
      _768 = _764;
      _769 = _763;
    } else {
      _767 = _761;
      _768 = _756;
      _769 = _751;
    }
  } else {
    _767 = _745;
    _768 = _742;
    _769 = _739;
  }
  if (!_485) {
    float _771 = _769 * _549;
    float _772 = _768 * _549;
    float _773 = _767 * _549;
    _775 = _773;
    _776 = _772;
    _777 = _771;
  } else {
    _775 = _767;
    _776 = _768;
    _777 = _769;
  }
  if (_357) {
    float _781 = cb1_018z * 9.999999747378752e-05f;
    float _782 = _781 * _777;
    float _783 = _781 * _776;
    float _784 = _781 * _775;
    float _786 = 5000.0f / cb1_018y;
    float _787 = _782 * _786;
    float _788 = _783 * _786;
    float _789 = _784 * _786;
    _791 = _787;
    _792 = _788;
    _793 = _789;
  } else {
    _791 = _777;
    _792 = _776;
    _793 = _775;
  }
  float _794 = _791 * 1.6047500371932983f;
  float _795 = mad(-0.5310800075531006f, _792, _794);
  float _796 = mad(-0.07366999983787537f, _793, _795);
  float _797 = _791 * -0.10208000242710114f;
  float _798 = mad(1.1081299781799316f, _792, _797);
  float _799 = mad(-0.006049999967217445f, _793, _798);
  float _800 = _791 * -0.0032599999103695154f;
  float _801 = mad(-0.07275000214576721f, _792, _800);
  float _802 = mad(1.0760200023651123f, _793, _801);
  if (_357) {
    // float _804 = max(_796, 0.0f);
    // float _805 = max(_799, 0.0f);
    // float _806 = max(_802, 0.0f);
    // bool _807 = !(_804 >= 0.0030399328097701073f);
    // if (!_807) {
    //   float _809 = abs(_804);
    //   float _810 = log2(_809);
    //   float _811 = _810 * 0.4166666567325592f;
    //   float _812 = exp2(_811);
    //   float _813 = _812 * 1.0549999475479126f;
    //   float _814 = _813 + -0.054999999701976776f;
    //   _818 = _814;
    // } else {
    //   float _816 = _804 * 12.923210144042969f;
    //   _818 = _816;
    // }
    // bool _819 = !(_805 >= 0.0030399328097701073f);
    // if (!_819) {
    //   float _821 = abs(_805);
    //   float _822 = log2(_821);
    //   float _823 = _822 * 0.4166666567325592f;
    //   float _824 = exp2(_823);
    //   float _825 = _824 * 1.0549999475479126f;
    //   float _826 = _825 + -0.054999999701976776f;
    //   _830 = _826;
    // } else {
    //   float _828 = _805 * 12.923210144042969f;
    //   _830 = _828;
    // }
    // bool _831 = !(_806 >= 0.0030399328097701073f);
    // if (!_831) {
    //   float _833 = abs(_806);
    //   float _834 = log2(_833);
    //   float _835 = _834 * 0.4166666567325592f;
    //   float _836 = exp2(_835);
    //   float _837 = _836 * 1.0549999475479126f;
    //   float _838 = _837 + -0.054999999701976776f;
    //   _911 = _818;
    //   _912 = _830;
    //   _913 = _838;
    // } else {
    //   float _840 = _806 * 12.923210144042969f;
    //   _796 = _818;
    //   _799 = _830;
    //   _802 = _840;
    // }
    _796 = renodx::color::srgb::EncodeSafe(_796);
    _799 = renodx::color::srgb::EncodeSafe(_799);
    _802 = renodx::color::srgb::EncodeSafe(_802);
  } else {
    float _842 = saturate(_796);
    float _843 = saturate(_799);
    float _844 = saturate(_802);
    bool _845 = ((uint)(cb1_018w) == -2);
    if (!_845) {
      bool _847 = !(_842 >= 0.0030399328097701073f);
      if (!_847) {
        float _849 = abs(_842);
        float _850 = log2(_849);
        float _851 = _850 * 0.4166666567325592f;
        float _852 = exp2(_851);
        float _853 = _852 * 1.0549999475479126f;
        float _854 = _853 + -0.054999999701976776f;
        _858 = _854;
      } else {
        float _856 = _842 * 12.923210144042969f;
        _858 = _856;
      }
      bool _859 = !(_843 >= 0.0030399328097701073f);
      if (!_859) {
        float _861 = abs(_843);
        float _862 = log2(_861);
        float _863 = _862 * 0.4166666567325592f;
        float _864 = exp2(_863);
        float _865 = _864 * 1.0549999475479126f;
        float _866 = _865 + -0.054999999701976776f;
        _870 = _866;
      } else {
        float _868 = _843 * 12.923210144042969f;
        _870 = _868;
      }
      bool _871 = !(_844 >= 0.0030399328097701073f);
      if (!_871) {
        float _873 = abs(_844);
        float _874 = log2(_873);
        float _875 = _874 * 0.4166666567325592f;
        float _876 = exp2(_875);
        float _877 = _876 * 1.0549999475479126f;
        float _878 = _877 + -0.054999999701976776f;
        _882 = _858;
        _883 = _870;
        _884 = _878;
      } else {
        float _880 = _844 * 12.923210144042969f;
        _882 = _858;
        _883 = _870;
        _884 = _880;
      }
    } else {
      _882 = _842;
      _883 = _843;
      _884 = _844;
    }
    float _889 = abs(_882);
    float _890 = abs(_883);
    float _891 = abs(_884);
    float _892 = log2(_889);
    float _893 = log2(_890);
    float _894 = log2(_891);
    float _895 = _892 * cb2_000z;
    float _896 = _893 * cb2_000z;
    float _897 = _894 * cb2_000z;
    float _898 = exp2(_895);
    float _899 = exp2(_896);
    float _900 = exp2(_897);
    float _901 = _898 * cb2_000y;
    float _902 = _899 * cb2_000y;
    float _903 = _900 * cb2_000y;
    float _904 = _901 + cb2_000x;
    float _905 = _902 + cb2_000x;
    float _906 = _903 + cb2_000x;
    float _907 = saturate(_904);
    float _908 = saturate(_905);
    float _909 = saturate(_906);
    _911 = _907;
    _912 = _908;
    _913 = _909;
  }
  float _917 = cb2_023x * TEXCOORD0_centroid.x;
  float _918 = cb2_023y * TEXCOORD0_centroid.y;
  float _921 = _917 + cb2_023z;
  float _922 = _918 + cb2_023w;
  float4 _925 = t10.SampleLevel(s0_space2, float2(_921, _922), 0.0f);
  float _927 = _925.x + -0.5f;
  float _928 = _927 * cb2_022x;
  float _929 = _928 + 0.5f;
  float _930 = _929 * 2.0f;
  float _931 = _930 * _911;
  float _932 = _930 * _912;
  float _933 = _930 * _913;
  float _937 = float((uint)(cb2_019z));
  float _938 = float((uint)(cb2_019w));
  float _939 = _937 + SV_Position.x;
  float _940 = _938 + SV_Position.y;
  uint _941 = uint(_939);
  uint _942 = uint(_940);
  uint _945 = cb2_019x + -1u;
  uint _946 = cb2_019y + -1u;
  int _947 = _941 & _945;
  int _948 = _942 & _946;
  float4 _949 = t3.Load(int3(_947, _948, 0));
  float _953 = _949.x * 2.0f;
  float _954 = _949.y * 2.0f;
  float _955 = _949.z * 2.0f;
  float _956 = _953 + -1.0f;
  float _957 = _954 + -1.0f;
  float _958 = _955 + -1.0f;
  float _959 = _956 * cb2_025w;
  float _960 = _957 * cb2_025w;
  float _961 = _958 * cb2_025w;
  float _962 = _959 + _931;
  float _963 = _960 + _932;
  float _964 = _961 + _933;
  float _965 = dot(float3(_962, _963, _964), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _962;
  SV_Target.y = _963;
  SV_Target.z = _964;
  SV_Target.w = _965;
  SV_Target_1.x = _965;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
