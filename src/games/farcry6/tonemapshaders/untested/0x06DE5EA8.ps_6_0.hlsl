#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _26 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = _26.x * 6.283199787139893f;
  float _31 = cos(_30);
  float _32 = sin(_30);
  float _33 = _31 * _26.z;
  float _34 = _32 * _26.z;
  float _35 = _33 + TEXCOORD0_centroid.x;
  float _36 = _34 + TEXCOORD0_centroid.y;
  float _37 = _35 * 10.0f;
  float _38 = 10.0f - _37;
  float _39 = min(_37, _38);
  float _40 = saturate(_39);
  float _41 = _40 * _33;
  float _42 = _36 * 10.0f;
  float _43 = 10.0f - _42;
  float _44 = min(_42, _43);
  float _45 = saturate(_44);
  float _46 = _45 * _34;
  float _47 = _41 + TEXCOORD0_centroid.x;
  float _48 = _46 + TEXCOORD0_centroid.y;
  float4 _49 = t7.SampleLevel(s2_space2, float2(_47, _48), 0.0f);
  float _51 = _49.w * _41;
  float _52 = _49.w * _46;
  float _53 = 1.0f - _26.y;
  float _54 = saturate(_53);
  float _55 = _51 * _54;
  float _56 = _52 * _54;
  float _57 = _55 + TEXCOORD0_centroid.x;
  float _58 = _56 + TEXCOORD0_centroid.y;
  float4 _59 = t7.SampleLevel(s2_space2, float2(_57, _58), 0.0f);
  bool _61 = (_59.y > 0.0f);
  float _62 = select(_61, TEXCOORD0_centroid.x, _57);
  float _63 = select(_61, TEXCOORD0_centroid.y, _58);
  float4 _64 = t1.SampleLevel(s4_space2, float2(_62, _63), 0.0f);
  float _68 = max(_64.x, 0.0f);
  float _69 = max(_64.y, 0.0f);
  float _70 = max(_64.z, 0.0f);
  float _71 = min(_68, 65000.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float4 _74 = t4.SampleLevel(s2_space2, float2(_62, _63), 0.0f);
  float _79 = max(_74.x, 0.0f);
  float _80 = max(_74.y, 0.0f);
  float _81 = max(_74.z, 0.0f);
  float _82 = max(_74.w, 0.0f);
  float _83 = min(_79, 5000.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _89 = _24.x * cb0_028z;
  float _90 = _89 + cb0_028x;
  float _91 = cb2_027w / _90;
  float _92 = 1.0f - _91;
  float _93 = abs(_92);
  float _95 = cb2_027y * _93;
  float _97 = _95 - cb2_027z;
  float _98 = saturate(_97);
  float _99 = max(_98, _86);
  float _100 = saturate(_99);
  float4 _101 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _105 = _83 - _71;
  float _106 = _84 - _72;
  float _107 = _85 - _73;
  float _108 = _100 * _105;
  float _109 = _100 * _106;
  float _110 = _100 * _107;
  float _111 = _108 + _71;
  float _112 = _109 + _72;
  float _113 = _110 + _73;
  float _114 = dot(float3(_111, _112, _113), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _118 = t0[0].SExposureData_020;
  float _120 = t0[0].SExposureData_004;
  float _122 = cb2_018x * 0.5f;
  float _123 = _122 * cb2_018y;
  float _124 = _120.x - _123;
  float _125 = cb2_018y * cb2_018x;
  float _126 = 1.0f / _125;
  float _127 = _124 * _126;
  float _128 = _114 / _118.x;
  float _129 = _128 * 5464.01611328125f;
  float _130 = _129 + 9.99999993922529e-09f;
  float _131 = log2(_130);
  float _132 = _131 - _124;
  float _133 = _132 * _126;
  float _134 = saturate(_133);
  float2 _135 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _134), 0.0f);
  float _138 = max(_135.y, 1.0000000116860974e-07f);
  float _139 = _135.x / _138;
  float _140 = _139 + _127;
  float _141 = _140 / _126;
  float _142 = _141 - _120.x;
  float _143 = -0.0f - _142;
  float _145 = _143 - cb2_027x;
  float _146 = max(0.0f, _145);
  float _149 = cb2_026z * _146;
  float _150 = _142 - cb2_027x;
  float _151 = max(0.0f, _150);
  float _153 = cb2_026w * _151;
  bool _154 = (_142 < 0.0f);
  float _155 = select(_154, _149, _153);
  float _156 = exp2(_155);
  float _157 = _156 * _111;
  float _158 = _156 * _112;
  float _159 = _156 * _113;
  float _164 = cb2_024y * _101.x;
  float _165 = cb2_024z * _101.y;
  float _166 = cb2_024w * _101.z;
  float _167 = _164 + _157;
  float _168 = _165 + _158;
  float _169 = _166 + _159;
  float _174 = _167 * cb2_025x;
  float _175 = _168 * cb2_025y;
  float _176 = _169 * cb2_025z;
  float _177 = dot(float3(_174, _175, _176), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _178 = t0[0].SExposureData_012;
  float _180 = _177 * 5464.01611328125f;
  float _181 = _180 * _178.x;
  float _182 = _181 + 9.99999993922529e-09f;
  float _183 = log2(_182);
  float _184 = _183 + 16.929765701293945f;
  float _185 = _184 * 0.05734497308731079f;
  float _186 = saturate(_185);
  float _187 = _186 * _186;
  float _188 = _186 * 2.0f;
  float _189 = 3.0f - _188;
  float _190 = _187 * _189;
  float _191 = _175 * 0.8450999855995178f;
  float _192 = _176 * 0.14589999616146088f;
  float _193 = _191 + _192;
  float _194 = _193 * 2.4890189170837402f;
  float _195 = _193 * 0.3754962384700775f;
  float _196 = _193 * 2.811495304107666f;
  float _197 = _193 * 5.519708156585693f;
  float _198 = _177 - _194;
  float _199 = _190 * _198;
  float _200 = _199 + _194;
  float _201 = _190 * 0.5f;
  float _202 = _201 + 0.5f;
  float _203 = _202 * _198;
  float _204 = _203 + _194;
  float _205 = _174 - _195;
  float _206 = _175 - _196;
  float _207 = _176 - _197;
  float _208 = _202 * _205;
  float _209 = _202 * _206;
  float _210 = _202 * _207;
  float _211 = _208 + _195;
  float _212 = _209 + _196;
  float _213 = _210 + _197;
  float _214 = 1.0f / _204;
  float _215 = _200 * _214;
  float _216 = _215 * _211;
  float _217 = _215 * _212;
  float _218 = _215 * _213;
  float _222 = cb2_020x * TEXCOORD0_centroid.x;
  float _223 = cb2_020y * TEXCOORD0_centroid.y;
  float _226 = _222 + cb2_020z;
  float _227 = _223 + cb2_020w;
  float _230 = dot(float2(_226, _227), float2(_226, _227));
  float _231 = 1.0f - _230;
  float _232 = saturate(_231);
  float _233 = log2(_232);
  float _234 = _233 * cb2_021w;
  float _235 = exp2(_234);
  float _239 = _216 - cb2_021x;
  float _240 = _217 - cb2_021y;
  float _241 = _218 - cb2_021z;
  float _242 = _239 * _235;
  float _243 = _240 * _235;
  float _244 = _241 * _235;
  float _245 = _242 + cb2_021x;
  float _246 = _243 + cb2_021y;
  float _247 = _244 + cb2_021z;
  float _248 = t0[0].SExposureData_000;
  float _250 = max(_118.x, 0.0010000000474974513f);
  float _251 = 1.0f / _250;
  float _252 = _251 * _248.x;
  bool _255 = ((uint)(cb2_069y) == 0);
  float _261;
  float _262;
  float _263;
  float _317;
  float _318;
  float _319;
  float _350;
  float _351;
  float _352;
  float _502;
  float _539;
  float _540;
  float _541;
  float _570;
  float _571;
  float _572;
  float _653;
  float _654;
  float _655;
  float _661;
  float _662;
  float _663;
  float _677;
  float _678;
  float _679;
  float _704;
  float _716;
  float _744;
  float _756;
  float _768;
  float _769;
  float _770;
  float _797;
  float _798;
  float _799;
  if (!_255) {
    float _257 = _252 * _245;
    float _258 = _252 * _246;
    float _259 = _252 * _247;
    _261 = _257;
    _262 = _258;
    _263 = _259;
  } else {
    _261 = _245;
    _262 = _246;
    _263 = _247;
  }
  float _264 = _261 * 0.6130970120429993f;
  float _265 = mad(0.33952298760414124f, _262, _264);
  float _266 = mad(0.04737899824976921f, _263, _265);
  float _267 = _261 * 0.07019399851560593f;
  float _268 = mad(0.9163540005683899f, _262, _267);
  float _269 = mad(0.013451999984681606f, _263, _268);
  float _270 = _261 * 0.02061600051820278f;
  float _271 = mad(0.10956999659538269f, _262, _270);
  float _272 = mad(0.8698149919509888f, _263, _271);
  float _273 = log2(_266);
  float _274 = log2(_269);
  float _275 = log2(_272);
  float _276 = _273 * 0.04211956635117531f;
  float _277 = _274 * 0.04211956635117531f;
  float _278 = _275 * 0.04211956635117531f;
  float _279 = _276 + 0.6252607107162476f;
  float _280 = _277 + 0.6252607107162476f;
  float _281 = _278 + 0.6252607107162476f;
  float4 _282 = t6.SampleLevel(s2_space2, float3(_279, _280, _281), 0.0f);
  bool _288 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_288 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _292 = cb2_017x * _282.x;
    float _293 = cb2_017x * _282.y;
    float _294 = cb2_017x * _282.z;
    float _296 = _292 + cb2_017y;
    float _297 = _293 + cb2_017y;
    float _298 = _294 + cb2_017y;
    float _299 = exp2(_296);
    float _300 = exp2(_297);
    float _301 = exp2(_298);
    float _302 = _299 + 1.0f;
    float _303 = _300 + 1.0f;
    float _304 = _301 + 1.0f;
    float _305 = 1.0f / _302;
    float _306 = 1.0f / _303;
    float _307 = 1.0f / _304;
    float _309 = cb2_017z * _305;
    float _310 = cb2_017z * _306;
    float _311 = cb2_017z * _307;
    float _313 = _309 + cb2_017w;
    float _314 = _310 + cb2_017w;
    float _315 = _311 + cb2_017w;
    _317 = _313;
    _318 = _314;
    _319 = _315;
  } else {
    _317 = _282.x;
    _318 = _282.y;
    _319 = _282.z;
  }
  float _320 = _317 * 23.0f;
  float _321 = _320 + -14.473931312561035f;
  float _322 = exp2(_321);
  float _323 = _318 * 23.0f;
  float _324 = _323 + -14.473931312561035f;
  float _325 = exp2(_324);
  float _326 = _319 * 23.0f;
  float _327 = _326 + -14.473931312561035f;
  float _328 = exp2(_327);
  float _335 = cb2_016x - _322;
  float _336 = cb2_016y - _325;
  float _337 = cb2_016z - _328;
  float _338 = _335 * cb2_016w;
  float _339 = _336 * cb2_016w;
  float _340 = _337 * cb2_016w;
  float _341 = _338 + _322;
  float _342 = _339 + _325;
  float _343 = _340 + _328;
  if (_288 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _346 = cb2_024x * _341;
    float _347 = cb2_024x * _342;
    float _348 = cb2_024x * _343;
    _350 = _346;
    _351 = _347;
    _352 = _348;
  } else {
    _350 = _341;
    _351 = _342;
    _352 = _343;
  }
  float _355 = _350 * 0.9708889722824097f;
  float _356 = mad(0.026962999254465103f, _351, _355);
  float _357 = mad(0.002148000057786703f, _352, _356);
  float _358 = _350 * 0.01088900025933981f;
  float _359 = mad(0.9869629740715027f, _351, _358);
  float _360 = mad(0.002148000057786703f, _352, _359);
  float _361 = mad(0.026962999254465103f, _351, _358);
  float _362 = mad(0.9621480107307434f, _352, _361);
  float _363 = max(_357, 0.0f);
  float _364 = max(_360, 0.0f);
  float _365 = max(_362, 0.0f);
  float _366 = min(_363, cb2_095y);
  float _367 = min(_364, cb2_095y);
  float _368 = min(_365, cb2_095y);
  bool _371 = ((uint)(cb2_095x) == 0);
  bool _374 = ((uint)(cb2_094w) == 0);
  bool _376 = ((uint)(cb2_094z) == 0);
  bool _378 = ((uint)(cb2_094y) != 0);
  bool _380 = ((uint)(cb2_094x) == 0);
  bool _382 = ((uint)(cb2_069z) != 0);
  float _429 = asfloat((uint)(cb2_075y));
  float _430 = asfloat((uint)(cb2_075z));
  float _431 = asfloat((uint)(cb2_075w));
  float _432 = asfloat((uint)(cb2_074z));
  float _433 = asfloat((uint)(cb2_074w));
  float _434 = asfloat((uint)(cb2_075x));
  float _435 = asfloat((uint)(cb2_073w));
  float _436 = asfloat((uint)(cb2_074x));
  float _437 = asfloat((uint)(cb2_074y));
  float _438 = asfloat((uint)(cb2_077x));
  float _439 = asfloat((uint)(cb2_077y));
  float _440 = asfloat((uint)(cb2_079x));
  float _441 = asfloat((uint)(cb2_079y));
  float _442 = asfloat((uint)(cb2_079z));
  float _443 = asfloat((uint)(cb2_078y));
  float _444 = asfloat((uint)(cb2_078z));
  float _445 = asfloat((uint)(cb2_078w));
  float _446 = asfloat((uint)(cb2_077z));
  float _447 = asfloat((uint)(cb2_077w));
  float _448 = asfloat((uint)(cb2_078x));
  float _449 = asfloat((uint)(cb2_072y));
  float _450 = asfloat((uint)(cb2_072z));
  float _451 = asfloat((uint)(cb2_072w));
  float _452 = asfloat((uint)(cb2_071x));
  float _453 = asfloat((uint)(cb2_071y));
  float _454 = asfloat((uint)(cb2_076x));
  float _455 = asfloat((uint)(cb2_070w));
  float _456 = asfloat((uint)(cb2_070x));
  float _457 = asfloat((uint)(cb2_070y));
  float _458 = asfloat((uint)(cb2_070z));
  float _459 = asfloat((uint)(cb2_073x));
  float _460 = asfloat((uint)(cb2_073y));
  float _461 = asfloat((uint)(cb2_073z));
  float _462 = asfloat((uint)(cb2_071z));
  float _463 = asfloat((uint)(cb2_071w));
  float _464 = asfloat((uint)(cb2_072x));
  float _465 = max(_367, _368);
  float _466 = max(_366, _465);
  float _467 = 1.0f / _466;
  float _468 = _467 * _366;
  float _469 = _467 * _367;
  float _470 = _467 * _368;
  float _471 = abs(_468);
  float _472 = log2(_471);
  float _473 = _472 * _456;
  float _474 = exp2(_473);
  float _475 = abs(_469);
  float _476 = log2(_475);
  float _477 = _476 * _457;
  float _478 = exp2(_477);
  float _479 = abs(_470);
  float _480 = log2(_479);
  float _481 = _480 * _458;
  float _482 = exp2(_481);
  if (_378) {
    float _485 = asfloat((uint)(cb2_076w));
    float _487 = asfloat((uint)(cb2_076z));
    float _489 = asfloat((uint)(cb2_076y));
    float _490 = _487 * _367;
    float _491 = _489 * _366;
    float _492 = _485 * _368;
    float _493 = _491 + _492;
    float _494 = _493 + _490;
    _502 = _494;
  } else {
    float _496 = _463 * _367;
    float _497 = _462 * _366;
    float _498 = _464 * _368;
    float _499 = _496 + _497;
    float _500 = _499 + _498;
    _502 = _500;
  }
  float _503 = abs(_502);
  float _504 = log2(_503);
  float _505 = _504 * _455;
  float _506 = exp2(_505);
  float _507 = log2(_506);
  float _508 = _507 * _454;
  float _509 = exp2(_508);
  float _510 = select(_382, _509, _506);
  float _511 = _510 * _452;
  float _512 = _511 + _453;
  float _513 = 1.0f / _512;
  float _514 = _513 * _506;
  if (_378) {
    if (!_380) {
      float _517 = _474 * _446;
      float _518 = _478 * _447;
      float _519 = _482 * _448;
      float _520 = _518 + _517;
      float _521 = _520 + _519;
      float _522 = _478 * _444;
      float _523 = _474 * _443;
      float _524 = _482 * _445;
      float _525 = _522 + _523;
      float _526 = _525 + _524;
      float _527 = _482 * _442;
      float _528 = _478 * _441;
      float _529 = _474 * _440;
      float _530 = _528 + _529;
      float _531 = _530 + _527;
      float _532 = max(_526, _531);
      float _533 = max(_521, _532);
      float _534 = 1.0f / _533;
      float _535 = _534 * _521;
      float _536 = _534 * _526;
      float _537 = _534 * _531;
      _539 = _535;
      _540 = _536;
      _541 = _537;
    } else {
      _539 = _474;
      _540 = _478;
      _541 = _482;
    }
    float _542 = _539 * _439;
    float _543 = exp2(_542);
    float _544 = _543 * _438;
    float _545 = saturate(_544);
    float _546 = _539 * _438;
    float _547 = _539 - _546;
    float _548 = saturate(_547);
    float _549 = max(_438, _548);
    float _550 = min(_549, _545);
    float _551 = _540 * _439;
    float _552 = exp2(_551);
    float _553 = _552 * _438;
    float _554 = saturate(_553);
    float _555 = _540 * _438;
    float _556 = _540 - _555;
    float _557 = saturate(_556);
    float _558 = max(_438, _557);
    float _559 = min(_558, _554);
    float _560 = _541 * _439;
    float _561 = exp2(_560);
    float _562 = _561 * _438;
    float _563 = saturate(_562);
    float _564 = _541 * _438;
    float _565 = _541 - _564;
    float _566 = saturate(_565);
    float _567 = max(_438, _566);
    float _568 = min(_567, _563);
    _570 = _550;
    _571 = _559;
    _572 = _568;
  } else {
    _570 = _474;
    _571 = _478;
    _572 = _482;
  }
  float _573 = _570 * _462;
  float _574 = _571 * _463;
  float _575 = _574 + _573;
  float _576 = _572 * _464;
  float _577 = _575 + _576;
  float _578 = 1.0f / _577;
  float _579 = _578 * _514;
  float _580 = saturate(_579);
  float _581 = _580 * _570;
  float _582 = saturate(_581);
  float _583 = _580 * _571;
  float _584 = saturate(_583);
  float _585 = _580 * _572;
  float _586 = saturate(_585);
  float _587 = _582 * _449;
  float _588 = _449 - _587;
  float _589 = _584 * _450;
  float _590 = _450 - _589;
  float _591 = _586 * _451;
  float _592 = _451 - _591;
  float _593 = _586 * _464;
  float _594 = _582 * _462;
  float _595 = _584 * _463;
  float _596 = _514 - _594;
  float _597 = _596 - _595;
  float _598 = _597 - _593;
  float _599 = saturate(_598);
  float _600 = _590 * _463;
  float _601 = _588 * _462;
  float _602 = _592 * _464;
  float _603 = _600 + _601;
  float _604 = _603 + _602;
  float _605 = 1.0f / _604;
  float _606 = _605 * _599;
  float _607 = _606 * _588;
  float _608 = _607 + _582;
  float _609 = saturate(_608);
  float _610 = _606 * _590;
  float _611 = _610 + _584;
  float _612 = saturate(_611);
  float _613 = _606 * _592;
  float _614 = _613 + _586;
  float _615 = saturate(_614);
  float _616 = _615 * _464;
  float _617 = _609 * _462;
  float _618 = _612 * _463;
  float _619 = _514 - _617;
  float _620 = _619 - _618;
  float _621 = _620 - _616;
  float _622 = saturate(_621);
  float _623 = _622 * _459;
  float _624 = _623 + _609;
  float _625 = saturate(_624);
  float _626 = _622 * _460;
  float _627 = _626 + _612;
  float _628 = saturate(_627);
  float _629 = _622 * _461;
  float _630 = _629 + _615;
  float _631 = saturate(_630);
  if (!_376) {
    float _633 = _625 * _435;
    float _634 = _628 * _436;
    float _635 = _631 * _437;
    float _636 = _634 + _633;
    float _637 = _636 + _635;
    float _638 = _628 * _433;
    float _639 = _625 * _432;
    float _640 = _631 * _434;
    float _641 = _638 + _639;
    float _642 = _641 + _640;
    float _643 = _631 * _431;
    float _644 = _628 * _430;
    float _645 = _625 * _429;
    float _646 = _644 + _645;
    float _647 = _646 + _643;
    if (!_374) {
      float _649 = saturate(_637);
      float _650 = saturate(_642);
      float _651 = saturate(_647);
      _653 = _651;
      _654 = _650;
      _655 = _649;
    } else {
      _653 = _647;
      _654 = _642;
      _655 = _637;
    }
  } else {
    _653 = _631;
    _654 = _628;
    _655 = _625;
  }
  if (!_371) {
    float _657 = _655 * _435;
    float _658 = _654 * _435;
    float _659 = _653 * _435;
    _661 = _659;
    _662 = _658;
    _663 = _657;
  } else {
    _661 = _653;
    _662 = _654;
    _663 = _655;
  }
  if (_288) {
    float _667 = cb1_018z * 9.999999747378752e-05f;
    float _668 = _667 * _663;
    float _669 = _667 * _662;
    float _670 = _667 * _661;
    float _672 = 5000.0f / cb1_018y;
    float _673 = _668 * _672;
    float _674 = _669 * _672;
    float _675 = _670 * _672;
    _677 = _673;
    _678 = _674;
    _679 = _675;
  } else {
    _677 = _663;
    _678 = _662;
    _679 = _661;
  }
  float _680 = _677 * 1.6047500371932983f;
  float _681 = mad(-0.5310800075531006f, _678, _680);
  float _682 = mad(-0.07366999983787537f, _679, _681);
  float _683 = _677 * -0.10208000242710114f;
  float _684 = mad(1.1081299781799316f, _678, _683);
  float _685 = mad(-0.006049999967217445f, _679, _684);
  float _686 = _677 * -0.0032599999103695154f;
  float _687 = mad(-0.07275000214576721f, _678, _686);
  float _688 = mad(1.0760200023651123f, _679, _687);
  if (_288) {
    // float _690 = max(_682, 0.0f);
    // float _691 = max(_685, 0.0f);
    // float _692 = max(_688, 0.0f);
    // bool _693 = !(_690 >= 0.0030399328097701073f);
    // if (!_693) {
    //   float _695 = abs(_690);
    //   float _696 = log2(_695);
    //   float _697 = _696 * 0.4166666567325592f;
    //   float _698 = exp2(_697);
    //   float _699 = _698 * 1.0549999475479126f;
    //   float _700 = _699 + -0.054999999701976776f;
    //   _704 = _700;
    // } else {
    //   float _702 = _690 * 12.923210144042969f;
    //   _704 = _702;
    // }
    // bool _705 = !(_691 >= 0.0030399328097701073f);
    // if (!_705) {
    //   float _707 = abs(_691);
    //   float _708 = log2(_707);
    //   float _709 = _708 * 0.4166666567325592f;
    //   float _710 = exp2(_709);
    //   float _711 = _710 * 1.0549999475479126f;
    //   float _712 = _711 + -0.054999999701976776f;
    //   _716 = _712;
    // } else {
    //   float _714 = _691 * 12.923210144042969f;
    //   _716 = _714;
    // }
    // bool _717 = !(_692 >= 0.0030399328097701073f);
    // if (!_717) {
    //   float _719 = abs(_692);
    //   float _720 = log2(_719);
    //   float _721 = _720 * 0.4166666567325592f;
    //   float _722 = exp2(_721);
    //   float _723 = _722 * 1.0549999475479126f;
    //   float _724 = _723 + -0.054999999701976776f;
    //   _797 = _704;
    //   _798 = _716;
    //   _799 = _724;
    // } else {
    //   float _726 = _692 * 12.923210144042969f;
    //   _797 = _704;
    //   _798 = _716;
    //   _799 = _726;
    // }
    _797 = renodx::color::srgb::EncodeSafe(_682);
    _798 = renodx::color::srgb::EncodeSafe(_685);
    _799 = renodx::color::srgb::EncodeSafe(_688);

  } else {
    float _728 = saturate(_682);
    float _729 = saturate(_685);
    float _730 = saturate(_688);
    bool _731 = ((uint)(cb1_018w) == -2);
    if (!_731) {
      bool _733 = !(_728 >= 0.0030399328097701073f);
      if (!_733) {
        float _735 = abs(_728);
        float _736 = log2(_735);
        float _737 = _736 * 0.4166666567325592f;
        float _738 = exp2(_737);
        float _739 = _738 * 1.0549999475479126f;
        float _740 = _739 + -0.054999999701976776f;
        _744 = _740;
      } else {
        float _742 = _728 * 12.923210144042969f;
        _744 = _742;
      }
      bool _745 = !(_729 >= 0.0030399328097701073f);
      if (!_745) {
        float _747 = abs(_729);
        float _748 = log2(_747);
        float _749 = _748 * 0.4166666567325592f;
        float _750 = exp2(_749);
        float _751 = _750 * 1.0549999475479126f;
        float _752 = _751 + -0.054999999701976776f;
        _756 = _752;
      } else {
        float _754 = _729 * 12.923210144042969f;
        _756 = _754;
      }
      bool _757 = !(_730 >= 0.0030399328097701073f);
      if (!_757) {
        float _759 = abs(_730);
        float _760 = log2(_759);
        float _761 = _760 * 0.4166666567325592f;
        float _762 = exp2(_761);
        float _763 = _762 * 1.0549999475479126f;
        float _764 = _763 + -0.054999999701976776f;
        _768 = _744;
        _769 = _756;
        _770 = _764;
      } else {
        float _766 = _730 * 12.923210144042969f;
        _768 = _744;
        _769 = _756;
        _770 = _766;
      }
    } else {
      _768 = _728;
      _769 = _729;
      _770 = _730;
    }
    float _775 = abs(_768);
    float _776 = abs(_769);
    float _777 = abs(_770);
    float _778 = log2(_775);
    float _779 = log2(_776);
    float _780 = log2(_777);
    float _781 = _778 * cb2_000z;
    float _782 = _779 * cb2_000z;
    float _783 = _780 * cb2_000z;
    float _784 = exp2(_781);
    float _785 = exp2(_782);
    float _786 = exp2(_783);
    float _787 = _784 * cb2_000y;
    float _788 = _785 * cb2_000y;
    float _789 = _786 * cb2_000y;
    float _790 = _787 + cb2_000x;
    float _791 = _788 + cb2_000x;
    float _792 = _789 + cb2_000x;
    float _793 = saturate(_790);
    float _794 = saturate(_791);
    float _795 = saturate(_792);
    _797 = _793;
    _798 = _794;
    _799 = _795;
  }
  float _803 = cb2_023x * TEXCOORD0_centroid.x;
  float _804 = cb2_023y * TEXCOORD0_centroid.y;
  float _807 = _803 + cb2_023z;
  float _808 = _804 + cb2_023w;
  float4 _811 = t9.SampleLevel(s0_space2, float2(_807, _808), 0.0f);
  float _813 = _811.x + -0.5f;
  float _814 = _813 * cb2_022x;
  float _815 = _814 + 0.5f;
  float _816 = _815 * 2.0f;
  float _817 = _816 * _797;
  float _818 = _816 * _798;
  float _819 = _816 * _799;
  float _823 = float((uint)(cb2_019z));
  float _824 = float((uint)(cb2_019w));
  float _825 = _823 + SV_Position.x;
  float _826 = _824 + SV_Position.y;
  uint _827 = uint(_825);
  uint _828 = uint(_826);
  uint _831 = cb2_019x + -1u;
  uint _832 = cb2_019y + -1u;
  int _833 = _827 & _831;
  int _834 = _828 & _832;
  float4 _835 = t3.Load(int3(_833, _834, 0));
  float _839 = _835.x * 2.0f;
  float _840 = _835.y * 2.0f;
  float _841 = _835.z * 2.0f;
  float _842 = _839 + -1.0f;
  float _843 = _840 + -1.0f;
  float _844 = _841 + -1.0f;
  float _845 = _842 * cb2_025w;
  float _846 = _843 * cb2_025w;
  float _847 = _844 * cb2_025w;
  float _848 = _845 + _817;
  float _849 = _846 + _818;
  float _850 = _847 + _819;
  float _851 = dot(float3(_848, _849, _850), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _848;
  SV_Target.y = _849;
  SV_Target.z = _850;
  SV_Target.w = _851;
  SV_Target_1.x = _851;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
