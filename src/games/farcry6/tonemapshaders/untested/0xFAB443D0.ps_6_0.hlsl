#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t8.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _58 = _56 + TEXCOORD0_centroid.x;
  float _59 = _57 + TEXCOORD0_centroid.y;
  float4 _60 = t8.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  bool _62 = (_60.y > 0.0f);
  float _63 = select(_62, TEXCOORD0_centroid.x, _58);
  float _64 = select(_62, TEXCOORD0_centroid.y, _59);
  float4 _65 = t1.SampleLevel(s4_space2, float2(_63, _64), 0.0f);
  float _69 = max(_65.x, 0.0f);
  float _70 = max(_65.y, 0.0f);
  float _71 = max(_65.z, 0.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float _74 = min(_71, 65000.0f);
  float4 _75 = t4.SampleLevel(s2_space2, float2(_63, _64), 0.0f);
  float _80 = max(_75.x, 0.0f);
  float _81 = max(_75.y, 0.0f);
  float _82 = max(_75.z, 0.0f);
  float _83 = max(_75.w, 0.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _87 = min(_83, 5000.0f);
  float _90 = _25.x * cb0_028z;
  float _91 = _90 + cb0_028x;
  float _92 = cb2_027w / _91;
  float _93 = 1.0f - _92;
  float _94 = abs(_93);
  float _96 = cb2_027y * _94;
  float _98 = _96 - cb2_027z;
  float _99 = saturate(_98);
  float _100 = max(_99, _87);
  float _101 = saturate(_100);
  float4 _102 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _106 = _84 - _72;
  float _107 = _85 - _73;
  float _108 = _86 - _74;
  float _109 = _101 * _106;
  float _110 = _101 * _107;
  float _111 = _101 * _108;
  float _112 = _109 + _72;
  float _113 = _110 + _73;
  float _114 = _111 + _74;
  float _115 = dot(float3(_112, _113, _114), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _119 = t0[0].SExposureData_020;
  float _121 = t0[0].SExposureData_004;
  float _123 = cb2_018x * 0.5f;
  float _124 = _123 * cb2_018y;
  float _125 = _121.x - _124;
  float _126 = cb2_018y * cb2_018x;
  float _127 = 1.0f / _126;
  float _128 = _125 * _127;
  float _129 = _115 / _119.x;
  float _130 = _129 * 5464.01611328125f;
  float _131 = _130 + 9.99999993922529e-09f;
  float _132 = log2(_131);
  float _133 = _132 - _125;
  float _134 = _133 * _127;
  float _135 = saturate(_134);
  float2 _136 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _135), 0.0f);
  float _139 = max(_136.y, 1.0000000116860974e-07f);
  float _140 = _136.x / _139;
  float _141 = _140 + _128;
  float _142 = _141 / _127;
  float _143 = _142 - _121.x;
  float _144 = -0.0f - _143;
  float _146 = _144 - cb2_027x;
  float _147 = max(0.0f, _146);
  float _150 = cb2_026z * _147;
  float _151 = _143 - cb2_027x;
  float _152 = max(0.0f, _151);
  float _154 = cb2_026w * _152;
  bool _155 = (_143 < 0.0f);
  float _156 = select(_155, _150, _154);
  float _157 = exp2(_156);
  float _158 = _157 * _112;
  float _159 = _157 * _113;
  float _160 = _157 * _114;
  float _165 = cb2_024y * _102.x;
  float _166 = cb2_024z * _102.y;
  float _167 = cb2_024w * _102.z;
  float _168 = _165 + _158;
  float _169 = _166 + _159;
  float _170 = _167 + _160;
  float _175 = _168 * cb2_025x;
  float _176 = _169 * cb2_025y;
  float _177 = _170 * cb2_025z;
  float _178 = dot(float3(_175, _176, _177), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _179 = t0[0].SExposureData_012;
  float _181 = _178 * 5464.01611328125f;
  float _182 = _181 * _179.x;
  float _183 = _182 + 9.99999993922529e-09f;
  float _184 = log2(_183);
  float _185 = _184 + 16.929765701293945f;
  float _186 = _185 * 0.05734497308731079f;
  float _187 = saturate(_186);
  float _188 = _187 * _187;
  float _189 = _187 * 2.0f;
  float _190 = 3.0f - _189;
  float _191 = _188 * _190;
  float _192 = _176 * 0.8450999855995178f;
  float _193 = _177 * 0.14589999616146088f;
  float _194 = _192 + _193;
  float _195 = _194 * 2.4890189170837402f;
  float _196 = _194 * 0.3754962384700775f;
  float _197 = _194 * 2.811495304107666f;
  float _198 = _194 * 5.519708156585693f;
  float _199 = _178 - _195;
  float _200 = _191 * _199;
  float _201 = _200 + _195;
  float _202 = _191 * 0.5f;
  float _203 = _202 + 0.5f;
  float _204 = _203 * _199;
  float _205 = _204 + _195;
  float _206 = _175 - _196;
  float _207 = _176 - _197;
  float _208 = _177 - _198;
  float _209 = _203 * _206;
  float _210 = _203 * _207;
  float _211 = _203 * _208;
  float _212 = _209 + _196;
  float _213 = _210 + _197;
  float _214 = _211 + _198;
  float _215 = 1.0f / _205;
  float _216 = _201 * _215;
  float _217 = _216 * _212;
  float _218 = _216 * _213;
  float _219 = _216 * _214;
  float _223 = cb2_020x * TEXCOORD0_centroid.x;
  float _224 = cb2_020y * TEXCOORD0_centroid.y;
  float _227 = _223 + cb2_020z;
  float _228 = _224 + cb2_020w;
  float _231 = dot(float2(_227, _228), float2(_227, _228));
  float _232 = 1.0f - _231;
  float _233 = saturate(_232);
  float _234 = log2(_233);
  float _235 = _234 * cb2_021w;
  float _236 = exp2(_235);
  float _240 = _217 - cb2_021x;
  float _241 = _218 - cb2_021y;
  float _242 = _219 - cb2_021z;
  float _243 = _240 * _236;
  float _244 = _241 * _236;
  float _245 = _242 * _236;
  float _246 = _243 + cb2_021x;
  float _247 = _244 + cb2_021y;
  float _248 = _245 + cb2_021z;
  float _249 = t0[0].SExposureData_000;
  float _251 = max(_119.x, 0.0010000000474974513f);
  float _252 = 1.0f / _251;
  float _253 = _252 * _249.x;
  bool _256 = ((uint)(cb2_069y) == 0);
  float _262;
  float _263;
  float _264;
  float _318;
  float _319;
  float _320;
  float _411;
  float _412;
  float _413;
  float _458;
  float _459;
  float _460;
  float _461;
  float _510;
  float _511;
  float _512;
  float _513;
  float _538;
  float _539;
  float _540;
  float _690;
  float _727;
  float _728;
  float _729;
  float _758;
  float _759;
  float _760;
  float _841;
  float _842;
  float _843;
  float _849;
  float _850;
  float _851;
  float _865;
  float _866;
  float _867;
  float _892;
  float _904;
  float _932;
  float _944;
  float _956;
  float _957;
  float _958;
  float _985;
  float _986;
  float _987;
  if (!_256) {
    float _258 = _253 * _246;
    float _259 = _253 * _247;
    float _260 = _253 * _248;
    _262 = _258;
    _263 = _259;
    _264 = _260;
  } else {
    _262 = _246;
    _263 = _247;
    _264 = _248;
  }
  float _265 = _262 * 0.6130970120429993f;
  float _266 = mad(0.33952298760414124f, _263, _265);
  float _267 = mad(0.04737899824976921f, _264, _266);
  float _268 = _262 * 0.07019399851560593f;
  float _269 = mad(0.9163540005683899f, _263, _268);
  float _270 = mad(0.013451999984681606f, _264, _269);
  float _271 = _262 * 0.02061600051820278f;
  float _272 = mad(0.10956999659538269f, _263, _271);
  float _273 = mad(0.8698149919509888f, _264, _272);
  float _274 = log2(_267);
  float _275 = log2(_270);
  float _276 = log2(_273);
  float _277 = _274 * 0.04211956635117531f;
  float _278 = _275 * 0.04211956635117531f;
  float _279 = _276 * 0.04211956635117531f;
  float _280 = _277 + 0.6252607107162476f;
  float _281 = _278 + 0.6252607107162476f;
  float _282 = _279 + 0.6252607107162476f;
  float4 _283 = t6.SampleLevel(s2_space2, float3(_280, _281, _282), 0.0f);
  bool _289 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_289 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _293 = cb2_017x * _283.x;
    float _294 = cb2_017x * _283.y;
    float _295 = cb2_017x * _283.z;
    float _297 = _293 + cb2_017y;
    float _298 = _294 + cb2_017y;
    float _299 = _295 + cb2_017y;
    float _300 = exp2(_297);
    float _301 = exp2(_298);
    float _302 = exp2(_299);
    float _303 = _300 + 1.0f;
    float _304 = _301 + 1.0f;
    float _305 = _302 + 1.0f;
    float _306 = 1.0f / _303;
    float _307 = 1.0f / _304;
    float _308 = 1.0f / _305;
    float _310 = cb2_017z * _306;
    float _311 = cb2_017z * _307;
    float _312 = cb2_017z * _308;
    float _314 = _310 + cb2_017w;
    float _315 = _311 + cb2_017w;
    float _316 = _312 + cb2_017w;
    _318 = _314;
    _319 = _315;
    _320 = _316;
  } else {
    _318 = _283.x;
    _319 = _283.y;
    _320 = _283.z;
  }
  float _321 = _318 * 23.0f;
  float _322 = _321 + -14.473931312561035f;
  float _323 = exp2(_322);
  float _324 = _319 * 23.0f;
  float _325 = _324 + -14.473931312561035f;
  float _326 = exp2(_325);
  float _327 = _320 * 23.0f;
  float _328 = _327 + -14.473931312561035f;
  float _329 = exp2(_328);
  float _330 = dot(float3(_323, _326, _329), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _335 = dot(float3(_323, _326, _329), float3(_323, _326, _329));
  float _336 = rsqrt(_335);
  float _337 = _336 * _323;
  float _338 = _336 * _326;
  float _339 = _336 * _329;
  float _340 = cb2_001x - _337;
  float _341 = cb2_001y - _338;
  float _342 = cb2_001z - _339;
  float _343 = dot(float3(_340, _341, _342), float3(_340, _341, _342));
  float _346 = cb2_002z * _343;
  float _348 = _346 + cb2_002w;
  float _349 = saturate(_348);
  float _351 = cb2_002x * _349;
  float _352 = _330 - _323;
  float _353 = _330 - _326;
  float _354 = _330 - _329;
  float _355 = _351 * _352;
  float _356 = _351 * _353;
  float _357 = _351 * _354;
  float _358 = _355 + _323;
  float _359 = _356 + _326;
  float _360 = _357 + _329;
  float _362 = cb2_002y * _349;
  float _363 = 0.10000000149011612f - _358;
  float _364 = 0.10000000149011612f - _359;
  float _365 = 0.10000000149011612f - _360;
  float _366 = _363 * _362;
  float _367 = _364 * _362;
  float _368 = _365 * _362;
  float _369 = _366 + _358;
  float _370 = _367 + _359;
  float _371 = _368 + _360;
  float _372 = saturate(_369);
  float _373 = saturate(_370);
  float _374 = saturate(_371);
  float _379 = cb2_004x * TEXCOORD0_centroid.x;
  float _380 = cb2_004y * TEXCOORD0_centroid.y;
  float _383 = _379 + cb2_004z;
  float _384 = _380 + cb2_004w;
  float4 _390 = t7.Sample(s2_space2, float2(_383, _384));
  float _395 = _390.x * cb2_003x;
  float _396 = _390.y * cb2_003y;
  float _397 = _390.z * cb2_003z;
  float _398 = _390.w * cb2_003w;
  float _401 = _398 + cb2_026y;
  float _402 = saturate(_401);
  bool _405 = ((uint)(cb2_069y) == 0);
  if (!_405) {
    float _407 = _395 * _253;
    float _408 = _396 * _253;
    float _409 = _397 * _253;
    _411 = _407;
    _412 = _408;
    _413 = _409;
  } else {
    _411 = _395;
    _412 = _396;
    _413 = _397;
  }
  bool _416 = ((uint)(cb2_028x) == 2);
  bool _417 = ((uint)(cb2_028x) == 3);
  int _418 = (uint)(cb2_028x) & -2;
  bool _419 = (_418 == 2);
  bool _420 = ((uint)(cb2_028x) == 6);
  bool _421 = _419 || _420;
  if (_421) {
    float _423 = _411 * _402;
    float _424 = _412 * _402;
    float _425 = _413 * _402;
    float _426 = _402 * _402;
    _458 = _423;
    _459 = _424;
    _460 = _425;
    _461 = _426;
  } else {
    bool _428 = ((uint)(cb2_028x) == 4);
    if (_428) {
      float _430 = _411 + -1.0f;
      float _431 = _412 + -1.0f;
      float _432 = _413 + -1.0f;
      float _433 = _402 + -1.0f;
      float _434 = _430 * _402;
      float _435 = _431 * _402;
      float _436 = _432 * _402;
      float _437 = _433 * _402;
      float _438 = _434 + 1.0f;
      float _439 = _435 + 1.0f;
      float _440 = _436 + 1.0f;
      float _441 = _437 + 1.0f;
      _458 = _438;
      _459 = _439;
      _460 = _440;
      _461 = _441;
    } else {
      bool _443 = ((uint)(cb2_028x) == 5);
      if (_443) {
        float _445 = _411 + -0.5f;
        float _446 = _412 + -0.5f;
        float _447 = _413 + -0.5f;
        float _448 = _402 + -0.5f;
        float _449 = _445 * _402;
        float _450 = _446 * _402;
        float _451 = _447 * _402;
        float _452 = _448 * _402;
        float _453 = _449 + 0.5f;
        float _454 = _450 + 0.5f;
        float _455 = _451 + 0.5f;
        float _456 = _452 + 0.5f;
        _458 = _453;
        _459 = _454;
        _460 = _455;
        _461 = _456;
      } else {
        _458 = _411;
        _459 = _412;
        _460 = _413;
        _461 = _402;
      }
    }
  }
  if (_416) {
    float _463 = _458 + _372;
    float _464 = _459 + _373;
    float _465 = _460 + _374;
    _510 = _463;
    _511 = _464;
    _512 = _465;
    _513 = cb2_025w;
  } else {
    if (_417) {
      float _468 = 1.0f - _458;
      float _469 = 1.0f - _459;
      float _470 = 1.0f - _460;
      float _471 = _468 * _372;
      float _472 = _469 * _373;
      float _473 = _470 * _374;
      float _474 = _471 + _458;
      float _475 = _472 + _459;
      float _476 = _473 + _460;
      _510 = _474;
      _511 = _475;
      _512 = _476;
      _513 = cb2_025w;
    } else {
      bool _478 = ((uint)(cb2_028x) == 4);
      if (_478) {
        float _480 = _458 * _372;
        float _481 = _459 * _373;
        float _482 = _460 * _374;
        _510 = _480;
        _511 = _481;
        _512 = _482;
        _513 = cb2_025w;
      } else {
        bool _484 = ((uint)(cb2_028x) == 5);
        if (_484) {
          float _486 = _372 * 2.0f;
          float _487 = _486 * _458;
          float _488 = _373 * 2.0f;
          float _489 = _488 * _459;
          float _490 = _374 * 2.0f;
          float _491 = _490 * _460;
          _510 = _487;
          _511 = _489;
          _512 = _491;
          _513 = cb2_025w;
        } else {
          if (_420) {
            float _494 = _372 - _458;
            float _495 = _373 - _459;
            float _496 = _374 - _460;
            _510 = _494;
            _511 = _495;
            _512 = _496;
            _513 = cb2_025w;
          } else {
            float _498 = _458 - _372;
            float _499 = _459 - _373;
            float _500 = _460 - _374;
            float _501 = _461 * _498;
            float _502 = _461 * _499;
            float _503 = _461 * _500;
            float _504 = _501 + _372;
            float _505 = _502 + _373;
            float _506 = _503 + _374;
            float _507 = 1.0f - _461;
            float _508 = _507 * cb2_025w;
            _510 = _504;
            _511 = _505;
            _512 = _506;
            _513 = _508;
          }
        }
      }
    }
  }
  float _519 = cb2_016x - _510;
  float _520 = cb2_016y - _511;
  float _521 = cb2_016z - _512;
  float _522 = _519 * cb2_016w;
  float _523 = _520 * cb2_016w;
  float _524 = _521 * cb2_016w;
  float _525 = _522 + _510;
  float _526 = _523 + _511;
  float _527 = _524 + _512;
  bool _530 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_530 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _534 = cb2_024x * _525;
    float _535 = cb2_024x * _526;
    float _536 = cb2_024x * _527;
    _538 = _534;
    _539 = _535;
    _540 = _536;
  } else {
    _538 = _525;
    _539 = _526;
    _540 = _527;
  }
  float _543 = _538 * 0.9708889722824097f;
  float _544 = mad(0.026962999254465103f, _539, _543);
  float _545 = mad(0.002148000057786703f, _540, _544);
  float _546 = _538 * 0.01088900025933981f;
  float _547 = mad(0.9869629740715027f, _539, _546);
  float _548 = mad(0.002148000057786703f, _540, _547);
  float _549 = mad(0.026962999254465103f, _539, _546);
  float _550 = mad(0.9621480107307434f, _540, _549);
  float _551 = max(_545, 0.0f);
  float _552 = max(_548, 0.0f);
  float _553 = max(_550, 0.0f);
  float _554 = min(_551, cb2_095y);
  float _555 = min(_552, cb2_095y);
  float _556 = min(_553, cb2_095y);
  bool _559 = ((uint)(cb2_095x) == 0);
  bool _562 = ((uint)(cb2_094w) == 0);
  bool _564 = ((uint)(cb2_094z) == 0);
  bool _566 = ((uint)(cb2_094y) != 0);
  bool _568 = ((uint)(cb2_094x) == 0);
  bool _570 = ((uint)(cb2_069z) != 0);
  float _617 = asfloat((uint)(cb2_075y));
  float _618 = asfloat((uint)(cb2_075z));
  float _619 = asfloat((uint)(cb2_075w));
  float _620 = asfloat((uint)(cb2_074z));
  float _621 = asfloat((uint)(cb2_074w));
  float _622 = asfloat((uint)(cb2_075x));
  float _623 = asfloat((uint)(cb2_073w));
  float _624 = asfloat((uint)(cb2_074x));
  float _625 = asfloat((uint)(cb2_074y));
  float _626 = asfloat((uint)(cb2_077x));
  float _627 = asfloat((uint)(cb2_077y));
  float _628 = asfloat((uint)(cb2_079x));
  float _629 = asfloat((uint)(cb2_079y));
  float _630 = asfloat((uint)(cb2_079z));
  float _631 = asfloat((uint)(cb2_078y));
  float _632 = asfloat((uint)(cb2_078z));
  float _633 = asfloat((uint)(cb2_078w));
  float _634 = asfloat((uint)(cb2_077z));
  float _635 = asfloat((uint)(cb2_077w));
  float _636 = asfloat((uint)(cb2_078x));
  float _637 = asfloat((uint)(cb2_072y));
  float _638 = asfloat((uint)(cb2_072z));
  float _639 = asfloat((uint)(cb2_072w));
  float _640 = asfloat((uint)(cb2_071x));
  float _641 = asfloat((uint)(cb2_071y));
  float _642 = asfloat((uint)(cb2_076x));
  float _643 = asfloat((uint)(cb2_070w));
  float _644 = asfloat((uint)(cb2_070x));
  float _645 = asfloat((uint)(cb2_070y));
  float _646 = asfloat((uint)(cb2_070z));
  float _647 = asfloat((uint)(cb2_073x));
  float _648 = asfloat((uint)(cb2_073y));
  float _649 = asfloat((uint)(cb2_073z));
  float _650 = asfloat((uint)(cb2_071z));
  float _651 = asfloat((uint)(cb2_071w));
  float _652 = asfloat((uint)(cb2_072x));
  float _653 = max(_555, _556);
  float _654 = max(_554, _653);
  float _655 = 1.0f / _654;
  float _656 = _655 * _554;
  float _657 = _655 * _555;
  float _658 = _655 * _556;
  float _659 = abs(_656);
  float _660 = log2(_659);
  float _661 = _660 * _644;
  float _662 = exp2(_661);
  float _663 = abs(_657);
  float _664 = log2(_663);
  float _665 = _664 * _645;
  float _666 = exp2(_665);
  float _667 = abs(_658);
  float _668 = log2(_667);
  float _669 = _668 * _646;
  float _670 = exp2(_669);
  if (_566) {
    float _673 = asfloat((uint)(cb2_076w));
    float _675 = asfloat((uint)(cb2_076z));
    float _677 = asfloat((uint)(cb2_076y));
    float _678 = _675 * _555;
    float _679 = _677 * _554;
    float _680 = _673 * _556;
    float _681 = _679 + _680;
    float _682 = _681 + _678;
    _690 = _682;
  } else {
    float _684 = _651 * _555;
    float _685 = _650 * _554;
    float _686 = _652 * _556;
    float _687 = _684 + _685;
    float _688 = _687 + _686;
    _690 = _688;
  }
  float _691 = abs(_690);
  float _692 = log2(_691);
  float _693 = _692 * _643;
  float _694 = exp2(_693);
  float _695 = log2(_694);
  float _696 = _695 * _642;
  float _697 = exp2(_696);
  float _698 = select(_570, _697, _694);
  float _699 = _698 * _640;
  float _700 = _699 + _641;
  float _701 = 1.0f / _700;
  float _702 = _701 * _694;
  if (_566) {
    if (!_568) {
      float _705 = _662 * _634;
      float _706 = _666 * _635;
      float _707 = _670 * _636;
      float _708 = _706 + _705;
      float _709 = _708 + _707;
      float _710 = _666 * _632;
      float _711 = _662 * _631;
      float _712 = _670 * _633;
      float _713 = _710 + _711;
      float _714 = _713 + _712;
      float _715 = _670 * _630;
      float _716 = _666 * _629;
      float _717 = _662 * _628;
      float _718 = _716 + _717;
      float _719 = _718 + _715;
      float _720 = max(_714, _719);
      float _721 = max(_709, _720);
      float _722 = 1.0f / _721;
      float _723 = _722 * _709;
      float _724 = _722 * _714;
      float _725 = _722 * _719;
      _727 = _723;
      _728 = _724;
      _729 = _725;
    } else {
      _727 = _662;
      _728 = _666;
      _729 = _670;
    }
    float _730 = _727 * _627;
    float _731 = exp2(_730);
    float _732 = _731 * _626;
    float _733 = saturate(_732);
    float _734 = _727 * _626;
    float _735 = _727 - _734;
    float _736 = saturate(_735);
    float _737 = max(_626, _736);
    float _738 = min(_737, _733);
    float _739 = _728 * _627;
    float _740 = exp2(_739);
    float _741 = _740 * _626;
    float _742 = saturate(_741);
    float _743 = _728 * _626;
    float _744 = _728 - _743;
    float _745 = saturate(_744);
    float _746 = max(_626, _745);
    float _747 = min(_746, _742);
    float _748 = _729 * _627;
    float _749 = exp2(_748);
    float _750 = _749 * _626;
    float _751 = saturate(_750);
    float _752 = _729 * _626;
    float _753 = _729 - _752;
    float _754 = saturate(_753);
    float _755 = max(_626, _754);
    float _756 = min(_755, _751);
    _758 = _738;
    _759 = _747;
    _760 = _756;
  } else {
    _758 = _662;
    _759 = _666;
    _760 = _670;
  }
  float _761 = _758 * _650;
  float _762 = _759 * _651;
  float _763 = _762 + _761;
  float _764 = _760 * _652;
  float _765 = _763 + _764;
  float _766 = 1.0f / _765;
  float _767 = _766 * _702;
  float _768 = saturate(_767);
  float _769 = _768 * _758;
  float _770 = saturate(_769);
  float _771 = _768 * _759;
  float _772 = saturate(_771);
  float _773 = _768 * _760;
  float _774 = saturate(_773);
  float _775 = _770 * _637;
  float _776 = _637 - _775;
  float _777 = _772 * _638;
  float _778 = _638 - _777;
  float _779 = _774 * _639;
  float _780 = _639 - _779;
  float _781 = _774 * _652;
  float _782 = _770 * _650;
  float _783 = _772 * _651;
  float _784 = _702 - _782;
  float _785 = _784 - _783;
  float _786 = _785 - _781;
  float _787 = saturate(_786);
  float _788 = _778 * _651;
  float _789 = _776 * _650;
  float _790 = _780 * _652;
  float _791 = _788 + _789;
  float _792 = _791 + _790;
  float _793 = 1.0f / _792;
  float _794 = _793 * _787;
  float _795 = _794 * _776;
  float _796 = _795 + _770;
  float _797 = saturate(_796);
  float _798 = _794 * _778;
  float _799 = _798 + _772;
  float _800 = saturate(_799);
  float _801 = _794 * _780;
  float _802 = _801 + _774;
  float _803 = saturate(_802);
  float _804 = _803 * _652;
  float _805 = _797 * _650;
  float _806 = _800 * _651;
  float _807 = _702 - _805;
  float _808 = _807 - _806;
  float _809 = _808 - _804;
  float _810 = saturate(_809);
  float _811 = _810 * _647;
  float _812 = _811 + _797;
  float _813 = saturate(_812);
  float _814 = _810 * _648;
  float _815 = _814 + _800;
  float _816 = saturate(_815);
  float _817 = _810 * _649;
  float _818 = _817 + _803;
  float _819 = saturate(_818);
  if (!_564) {
    float _821 = _813 * _623;
    float _822 = _816 * _624;
    float _823 = _819 * _625;
    float _824 = _822 + _821;
    float _825 = _824 + _823;
    float _826 = _816 * _621;
    float _827 = _813 * _620;
    float _828 = _819 * _622;
    float _829 = _826 + _827;
    float _830 = _829 + _828;
    float _831 = _819 * _619;
    float _832 = _816 * _618;
    float _833 = _813 * _617;
    float _834 = _832 + _833;
    float _835 = _834 + _831;
    if (!_562) {
      float _837 = saturate(_825);
      float _838 = saturate(_830);
      float _839 = saturate(_835);
      _841 = _839;
      _842 = _838;
      _843 = _837;
    } else {
      _841 = _835;
      _842 = _830;
      _843 = _825;
    }
  } else {
    _841 = _819;
    _842 = _816;
    _843 = _813;
  }
  if (!_559) {
    float _845 = _843 * _623;
    float _846 = _842 * _623;
    float _847 = _841 * _623;
    _849 = _847;
    _850 = _846;
    _851 = _845;
  } else {
    _849 = _841;
    _850 = _842;
    _851 = _843;
  }
  if (_530) {
    float _855 = cb1_018z * 9.999999747378752e-05f;
    float _856 = _855 * _851;
    float _857 = _855 * _850;
    float _858 = _855 * _849;
    float _860 = 5000.0f / cb1_018y;
    float _861 = _856 * _860;
    float _862 = _857 * _860;
    float _863 = _858 * _860;
    _865 = _861;
    _866 = _862;
    _867 = _863;
  } else {
    _865 = _851;
    _866 = _850;
    _867 = _849;
  }
  float _868 = _865 * 1.6047500371932983f;
  float _869 = mad(-0.5310800075531006f, _866, _868);
  float _870 = mad(-0.07366999983787537f, _867, _869);
  float _871 = _865 * -0.10208000242710114f;
  float _872 = mad(1.1081299781799316f, _866, _871);
  float _873 = mad(-0.006049999967217445f, _867, _872);
  float _874 = _865 * -0.0032599999103695154f;
  float _875 = mad(-0.07275000214576721f, _866, _874);
  float _876 = mad(1.0760200023651123f, _867, _875);
  if (_530) {
    // float _878 = max(_870, 0.0f);
    // float _879 = max(_873, 0.0f);
    // float _880 = max(_876, 0.0f);
    // bool _881 = !(_878 >= 0.0030399328097701073f);
    // if (!_881) {
    //   float _883 = abs(_878);
    //   float _884 = log2(_883);
    //   float _885 = _884 * 0.4166666567325592f;
    //   float _886 = exp2(_885);
    //   float _887 = _886 * 1.0549999475479126f;
    //   float _888 = _887 + -0.054999999701976776f;
    //   _892 = _888;
    // } else {
    //   float _890 = _878 * 12.923210144042969f;
    //   _892 = _890;
    // }
    // bool _893 = !(_879 >= 0.0030399328097701073f);
    // if (!_893) {
    //   float _895 = abs(_879);
    //   float _896 = log2(_895);
    //   float _897 = _896 * 0.4166666567325592f;
    //   float _898 = exp2(_897);
    //   float _899 = _898 * 1.0549999475479126f;
    //   float _900 = _899 + -0.054999999701976776f;
    //   _904 = _900;
    // } else {
    //   float _902 = _879 * 12.923210144042969f;
    //   _904 = _902;
    // }
    // bool _905 = !(_880 >= 0.0030399328097701073f);
    // if (!_905) {
    //   float _907 = abs(_880);
    //   float _908 = log2(_907);
    //   float _909 = _908 * 0.4166666567325592f;
    //   float _910 = exp2(_909);
    //   float _911 = _910 * 1.0549999475479126f;
    //   float _912 = _911 + -0.054999999701976776f;
    //   _985 = _892;
    //   _986 = _904;
    //   _987 = _912;
    // } else {
    //   float _914 = _880 * 12.923210144042969f;
    //   _985 = _892;
    //   _986 = _904;
    //   _987 = _914;
    // }
    _985 = renodx::color::srgb::EncodeSafe(_870);
    _986 = renodx::color::srgb::EncodeSafe(_873);
    _987 = renodx::color::srgb::EncodeSafe(_876);

  } else {
    float _916 = saturate(_870);
    float _917 = saturate(_873);
    float _918 = saturate(_876);
    bool _919 = ((uint)(cb1_018w) == -2);
    if (!_919) {
      bool _921 = !(_916 >= 0.0030399328097701073f);
      if (!_921) {
        float _923 = abs(_916);
        float _924 = log2(_923);
        float _925 = _924 * 0.4166666567325592f;
        float _926 = exp2(_925);
        float _927 = _926 * 1.0549999475479126f;
        float _928 = _927 + -0.054999999701976776f;
        _932 = _928;
      } else {
        float _930 = _916 * 12.923210144042969f;
        _932 = _930;
      }
      bool _933 = !(_917 >= 0.0030399328097701073f);
      if (!_933) {
        float _935 = abs(_917);
        float _936 = log2(_935);
        float _937 = _936 * 0.4166666567325592f;
        float _938 = exp2(_937);
        float _939 = _938 * 1.0549999475479126f;
        float _940 = _939 + -0.054999999701976776f;
        _944 = _940;
      } else {
        float _942 = _917 * 12.923210144042969f;
        _944 = _942;
      }
      bool _945 = !(_918 >= 0.0030399328097701073f);
      if (!_945) {
        float _947 = abs(_918);
        float _948 = log2(_947);
        float _949 = _948 * 0.4166666567325592f;
        float _950 = exp2(_949);
        float _951 = _950 * 1.0549999475479126f;
        float _952 = _951 + -0.054999999701976776f;
        _956 = _932;
        _957 = _944;
        _958 = _952;
      } else {
        float _954 = _918 * 12.923210144042969f;
        _956 = _932;
        _957 = _944;
        _958 = _954;
      }
    } else {
      _956 = _916;
      _957 = _917;
      _958 = _918;
    }
    float _963 = abs(_956);
    float _964 = abs(_957);
    float _965 = abs(_958);
    float _966 = log2(_963);
    float _967 = log2(_964);
    float _968 = log2(_965);
    float _969 = _966 * cb2_000z;
    float _970 = _967 * cb2_000z;
    float _971 = _968 * cb2_000z;
    float _972 = exp2(_969);
    float _973 = exp2(_970);
    float _974 = exp2(_971);
    float _975 = _972 * cb2_000y;
    float _976 = _973 * cb2_000y;
    float _977 = _974 * cb2_000y;
    float _978 = _975 + cb2_000x;
    float _979 = _976 + cb2_000x;
    float _980 = _977 + cb2_000x;
    float _981 = saturate(_978);
    float _982 = saturate(_979);
    float _983 = saturate(_980);
    _985 = _981;
    _986 = _982;
    _987 = _983;
  }
  float _991 = cb2_023x * TEXCOORD0_centroid.x;
  float _992 = cb2_023y * TEXCOORD0_centroid.y;
  float _995 = _991 + cb2_023z;
  float _996 = _992 + cb2_023w;
  float4 _999 = t10.SampleLevel(s0_space2, float2(_995, _996), 0.0f);
  float _1001 = _999.x + -0.5f;
  float _1002 = _1001 * cb2_022x;
  float _1003 = _1002 + 0.5f;
  float _1004 = _1003 * 2.0f;
  float _1005 = _1004 * _985;
  float _1006 = _1004 * _986;
  float _1007 = _1004 * _987;
  float _1011 = float((uint)(cb2_019z));
  float _1012 = float((uint)(cb2_019w));
  float _1013 = _1011 + SV_Position.x;
  float _1014 = _1012 + SV_Position.y;
  uint _1015 = uint(_1013);
  uint _1016 = uint(_1014);
  uint _1019 = cb2_019x + -1u;
  uint _1020 = cb2_019y + -1u;
  int _1021 = _1015 & _1019;
  int _1022 = _1016 & _1020;
  float4 _1023 = t3.Load(int3(_1021, _1022, 0));
  float _1027 = _1023.x * 2.0f;
  float _1028 = _1023.y * 2.0f;
  float _1029 = _1023.z * 2.0f;
  float _1030 = _1027 + -1.0f;
  float _1031 = _1028 + -1.0f;
  float _1032 = _1029 + -1.0f;
  float _1033 = _1030 * _513;
  float _1034 = _1031 * _513;
  float _1035 = _1032 * _513;
  float _1036 = _1033 + _1005;
  float _1037 = _1034 + _1006;
  float _1038 = _1035 + _1007;
  float _1039 = dot(float3(_1036, _1037, _1038), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1036;
  SV_Target.y = _1037;
  SV_Target.z = _1038;
  SV_Target.w = _1039;
  SV_Target_1.x = _1039;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
