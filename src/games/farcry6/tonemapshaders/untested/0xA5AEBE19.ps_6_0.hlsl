#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _23 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _25 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = max(_25.x, 0.0f);
  float _30 = max(_25.y, 0.0f);
  float _31 = max(_25.z, 0.0f);
  float _32 = min(_29, 65000.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float4 _35 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _40 = max(_35.x, 0.0f);
  float _41 = max(_35.y, 0.0f);
  float _42 = max(_35.z, 0.0f);
  float _43 = max(_35.w, 0.0f);
  float _44 = min(_40, 5000.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _50 = _23.x * cb0_028z;
  float _51 = _50 + cb0_028x;
  float _52 = cb2_027w / _51;
  float _53 = 1.0f - _52;
  float _54 = abs(_53);
  float _56 = cb2_027y * _54;
  float _58 = _56 - cb2_027z;
  float _59 = saturate(_58);
  float _60 = max(_59, _47);
  float _61 = saturate(_60);
  float _65 = cb2_013x * TEXCOORD0_centroid.x;
  float _66 = cb2_013y * TEXCOORD0_centroid.y;
  float _69 = _65 + cb2_013z;
  float _70 = _66 + cb2_013w;
  float _73 = dot(float2(_69, _70), float2(_69, _70));
  float _74 = abs(_73);
  float _75 = log2(_74);
  float _76 = _75 * cb2_014x;
  float _77 = exp2(_76);
  float _78 = saturate(_77);
  float _82 = cb2_011x * TEXCOORD0_centroid.x;
  float _83 = cb2_011y * TEXCOORD0_centroid.y;
  float _86 = _82 + cb2_011z;
  float _87 = _83 + cb2_011w;
  float _88 = _86 * _78;
  float _89 = _87 * _78;
  float _90 = _88 + TEXCOORD0_centroid.x;
  float _91 = _89 + TEXCOORD0_centroid.y;
  float _95 = cb2_012x * TEXCOORD0_centroid.x;
  float _96 = cb2_012y * TEXCOORD0_centroid.y;
  float _99 = _95 + cb2_012z;
  float _100 = _96 + cb2_012w;
  float _101 = _99 * _78;
  float _102 = _100 * _78;
  float _103 = _101 + TEXCOORD0_centroid.x;
  float _104 = _102 + TEXCOORD0_centroid.y;
  float4 _105 = t1.SampleLevel(s2_space2, float2(_90, _91), 0.0f);
  float _109 = max(_105.x, 0.0f);
  float _110 = max(_105.y, 0.0f);
  float _111 = max(_105.z, 0.0f);
  float _112 = min(_109, 65000.0f);
  float _113 = min(_110, 65000.0f);
  float _114 = min(_111, 65000.0f);
  float4 _115 = t1.SampleLevel(s2_space2, float2(_103, _104), 0.0f);
  float _119 = max(_115.x, 0.0f);
  float _120 = max(_115.y, 0.0f);
  float _121 = max(_115.z, 0.0f);
  float _122 = min(_119, 65000.0f);
  float _123 = min(_120, 65000.0f);
  float _124 = min(_121, 65000.0f);
  float4 _125 = t4.SampleLevel(s2_space2, float2(_90, _91), 0.0f);
  float _129 = max(_125.x, 0.0f);
  float _130 = max(_125.y, 0.0f);
  float _131 = max(_125.z, 0.0f);
  float _132 = min(_129, 5000.0f);
  float _133 = min(_130, 5000.0f);
  float _134 = min(_131, 5000.0f);
  float4 _135 = t4.SampleLevel(s2_space2, float2(_103, _104), 0.0f);
  float _139 = max(_135.x, 0.0f);
  float _140 = max(_135.y, 0.0f);
  float _141 = max(_135.z, 0.0f);
  float _142 = min(_139, 5000.0f);
  float _143 = min(_140, 5000.0f);
  float _144 = min(_141, 5000.0f);
  float _149 = 1.0f - cb2_009x;
  float _150 = 1.0f - cb2_009y;
  float _151 = 1.0f - cb2_009z;
  float _156 = _149 - cb2_010x;
  float _157 = _150 - cb2_010y;
  float _158 = _151 - cb2_010z;
  float _159 = saturate(_156);
  float _160 = saturate(_157);
  float _161 = saturate(_158);
  float _162 = _159 * _32;
  float _163 = _160 * _33;
  float _164 = _161 * _34;
  float _165 = cb2_009x * _112;
  float _166 = cb2_009y * _113;
  float _167 = cb2_009z * _114;
  float _168 = _165 + _162;
  float _169 = _166 + _163;
  float _170 = _167 + _164;
  float _171 = cb2_010x * _122;
  float _172 = cb2_010y * _123;
  float _173 = cb2_010z * _124;
  float _174 = _168 + _171;
  float _175 = _169 + _172;
  float _176 = _170 + _173;
  float _177 = _159 * _44;
  float _178 = _160 * _45;
  float _179 = _161 * _46;
  float _180 = cb2_009x * _132;
  float _181 = cb2_009y * _133;
  float _182 = cb2_009z * _134;
  float _183 = cb2_010x * _142;
  float _184 = cb2_010y * _143;
  float _185 = cb2_010z * _144;
  float4 _186 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _190 = _177 - _174;
  float _191 = _190 + _180;
  float _192 = _191 + _183;
  float _193 = _178 - _175;
  float _194 = _193 + _181;
  float _195 = _194 + _184;
  float _196 = _179 - _176;
  float _197 = _196 + _182;
  float _198 = _197 + _185;
  float _199 = _192 * _61;
  float _200 = _195 * _61;
  float _201 = _198 * _61;
  float _202 = _199 + _174;
  float _203 = _200 + _175;
  float _204 = _201 + _176;
  float _205 = dot(float3(_202, _203, _204), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _209 = t0[0].SExposureData_020;
  float _211 = t0[0].SExposureData_004;
  float _213 = cb2_018x * 0.5f;
  float _214 = _213 * cb2_018y;
  float _215 = _211.x - _214;
  float _216 = cb2_018y * cb2_018x;
  float _217 = 1.0f / _216;
  float _218 = _215 * _217;
  float _219 = _205 / _209.x;
  float _220 = _219 * 5464.01611328125f;
  float _221 = _220 + 9.99999993922529e-09f;
  float _222 = log2(_221);
  float _223 = _222 - _215;
  float _224 = _223 * _217;
  float _225 = saturate(_224);
  float2 _226 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _225), 0.0f);
  float _229 = max(_226.y, 1.0000000116860974e-07f);
  float _230 = _226.x / _229;
  float _231 = _230 + _218;
  float _232 = _231 / _217;
  float _233 = _232 - _211.x;
  float _234 = -0.0f - _233;
  float _236 = _234 - cb2_027x;
  float _237 = max(0.0f, _236);
  float _240 = cb2_026z * _237;
  float _241 = _233 - cb2_027x;
  float _242 = max(0.0f, _241);
  float _244 = cb2_026w * _242;
  bool _245 = (_233 < 0.0f);
  float _246 = select(_245, _240, _244);
  float _247 = exp2(_246);
  float _248 = _247 * _202;
  float _249 = _247 * _203;
  float _250 = _247 * _204;
  float _255 = cb2_024y * _186.x;
  float _256 = cb2_024z * _186.y;
  float _257 = cb2_024w * _186.z;
  float _258 = _255 + _248;
  float _259 = _256 + _249;
  float _260 = _257 + _250;
  float _265 = _258 * cb2_025x;
  float _266 = _259 * cb2_025y;
  float _267 = _260 * cb2_025z;
  float _268 = dot(float3(_265, _266, _267), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _269 = t0[0].SExposureData_012;
  float _271 = _268 * 5464.01611328125f;
  float _272 = _271 * _269.x;
  float _273 = _272 + 9.99999993922529e-09f;
  float _274 = log2(_273);
  float _275 = _274 + 16.929765701293945f;
  float _276 = _275 * 0.05734497308731079f;
  float _277 = saturate(_276);
  float _278 = _277 * _277;
  float _279 = _277 * 2.0f;
  float _280 = 3.0f - _279;
  float _281 = _278 * _280;
  float _282 = _266 * 0.8450999855995178f;
  float _283 = _267 * 0.14589999616146088f;
  float _284 = _282 + _283;
  float _285 = _284 * 2.4890189170837402f;
  float _286 = _284 * 0.3754962384700775f;
  float _287 = _284 * 2.811495304107666f;
  float _288 = _284 * 5.519708156585693f;
  float _289 = _268 - _285;
  float _290 = _281 * _289;
  float _291 = _290 + _285;
  float _292 = _281 * 0.5f;
  float _293 = _292 + 0.5f;
  float _294 = _293 * _289;
  float _295 = _294 + _285;
  float _296 = _265 - _286;
  float _297 = _266 - _287;
  float _298 = _267 - _288;
  float _299 = _293 * _296;
  float _300 = _293 * _297;
  float _301 = _293 * _298;
  float _302 = _299 + _286;
  float _303 = _300 + _287;
  float _304 = _301 + _288;
  float _305 = 1.0f / _295;
  float _306 = _291 * _305;
  float _307 = _306 * _302;
  float _308 = _306 * _303;
  float _309 = _306 * _304;
  float _313 = cb2_020x * TEXCOORD0_centroid.x;
  float _314 = cb2_020y * TEXCOORD0_centroid.y;
  float _317 = _313 + cb2_020z;
  float _318 = _314 + cb2_020w;
  float _321 = dot(float2(_317, _318), float2(_317, _318));
  float _322 = 1.0f - _321;
  float _323 = saturate(_322);
  float _324 = log2(_323);
  float _325 = _324 * cb2_021w;
  float _326 = exp2(_325);
  float _330 = _307 - cb2_021x;
  float _331 = _308 - cb2_021y;
  float _332 = _309 - cb2_021z;
  float _333 = _330 * _326;
  float _334 = _331 * _326;
  float _335 = _332 * _326;
  float _336 = _333 + cb2_021x;
  float _337 = _334 + cb2_021y;
  float _338 = _335 + cb2_021z;
  float _339 = t0[0].SExposureData_000;
  float _341 = max(_209.x, 0.0010000000474974513f);
  float _342 = 1.0f / _341;
  float _343 = _342 * _339.x;
  bool _346 = ((uint)(cb2_069y) == 0);
  float _352;
  float _353;
  float _354;
  float _408;
  float _409;
  float _410;
  float _441;
  float _442;
  float _443;
  float _593;
  float _630;
  float _631;
  float _632;
  float _661;
  float _662;
  float _663;
  float _744;
  float _745;
  float _746;
  float _752;
  float _753;
  float _754;
  float _768;
  float _769;
  float _770;
  float _795;
  float _807;
  float _835;
  float _847;
  float _859;
  float _860;
  float _861;
  float _888;
  float _889;
  float _890;
  if (!_346) {
    float _348 = _343 * _336;
    float _349 = _343 * _337;
    float _350 = _343 * _338;
    _352 = _348;
    _353 = _349;
    _354 = _350;
  } else {
    _352 = _336;
    _353 = _337;
    _354 = _338;
  }
  float _355 = _352 * 0.6130970120429993f;
  float _356 = mad(0.33952298760414124f, _353, _355);
  float _357 = mad(0.04737899824976921f, _354, _356);
  float _358 = _352 * 0.07019399851560593f;
  float _359 = mad(0.9163540005683899f, _353, _358);
  float _360 = mad(0.013451999984681606f, _354, _359);
  float _361 = _352 * 0.02061600051820278f;
  float _362 = mad(0.10956999659538269f, _353, _361);
  float _363 = mad(0.8698149919509888f, _354, _362);
  float _364 = log2(_357);
  float _365 = log2(_360);
  float _366 = log2(_363);
  float _367 = _364 * 0.04211956635117531f;
  float _368 = _365 * 0.04211956635117531f;
  float _369 = _366 * 0.04211956635117531f;
  float _370 = _367 + 0.6252607107162476f;
  float _371 = _368 + 0.6252607107162476f;
  float _372 = _369 + 0.6252607107162476f;
  float4 _373 = t6.SampleLevel(s2_space2, float3(_370, _371, _372), 0.0f);
  bool _379 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_379 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _383 = cb2_017x * _373.x;
    float _384 = cb2_017x * _373.y;
    float _385 = cb2_017x * _373.z;
    float _387 = _383 + cb2_017y;
    float _388 = _384 + cb2_017y;
    float _389 = _385 + cb2_017y;
    float _390 = exp2(_387);
    float _391 = exp2(_388);
    float _392 = exp2(_389);
    float _393 = _390 + 1.0f;
    float _394 = _391 + 1.0f;
    float _395 = _392 + 1.0f;
    float _396 = 1.0f / _393;
    float _397 = 1.0f / _394;
    float _398 = 1.0f / _395;
    float _400 = cb2_017z * _396;
    float _401 = cb2_017z * _397;
    float _402 = cb2_017z * _398;
    float _404 = _400 + cb2_017w;
    float _405 = _401 + cb2_017w;
    float _406 = _402 + cb2_017w;
    _408 = _404;
    _409 = _405;
    _410 = _406;
  } else {
    _408 = _373.x;
    _409 = _373.y;
    _410 = _373.z;
  }
  float _411 = _408 * 23.0f;
  float _412 = _411 + -14.473931312561035f;
  float _413 = exp2(_412);
  float _414 = _409 * 23.0f;
  float _415 = _414 + -14.473931312561035f;
  float _416 = exp2(_415);
  float _417 = _410 * 23.0f;
  float _418 = _417 + -14.473931312561035f;
  float _419 = exp2(_418);
  float _426 = cb2_016x - _413;
  float _427 = cb2_016y - _416;
  float _428 = cb2_016z - _419;
  float _429 = _426 * cb2_016w;
  float _430 = _427 * cb2_016w;
  float _431 = _428 * cb2_016w;
  float _432 = _429 + _413;
  float _433 = _430 + _416;
  float _434 = _431 + _419;
  if (_379 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _437 = cb2_024x * _432;
    float _438 = cb2_024x * _433;
    float _439 = cb2_024x * _434;
    _441 = _437;
    _442 = _438;
    _443 = _439;
  } else {
    _441 = _432;
    _442 = _433;
    _443 = _434;
  }
  float _446 = _441 * 0.9708889722824097f;
  float _447 = mad(0.026962999254465103f, _442, _446);
  float _448 = mad(0.002148000057786703f, _443, _447);
  float _449 = _441 * 0.01088900025933981f;
  float _450 = mad(0.9869629740715027f, _442, _449);
  float _451 = mad(0.002148000057786703f, _443, _450);
  float _452 = mad(0.026962999254465103f, _442, _449);
  float _453 = mad(0.9621480107307434f, _443, _452);
  float _454 = max(_448, 0.0f);
  float _455 = max(_451, 0.0f);
  float _456 = max(_453, 0.0f);
  float _457 = min(_454, cb2_095y);
  float _458 = min(_455, cb2_095y);
  float _459 = min(_456, cb2_095y);
  bool _462 = ((uint)(cb2_095x) == 0);
  bool _465 = ((uint)(cb2_094w) == 0);
  bool _467 = ((uint)(cb2_094z) == 0);
  bool _469 = ((uint)(cb2_094y) != 0);
  bool _471 = ((uint)(cb2_094x) == 0);
  bool _473 = ((uint)(cb2_069z) != 0);
  float _520 = asfloat((uint)(cb2_075y));
  float _521 = asfloat((uint)(cb2_075z));
  float _522 = asfloat((uint)(cb2_075w));
  float _523 = asfloat((uint)(cb2_074z));
  float _524 = asfloat((uint)(cb2_074w));
  float _525 = asfloat((uint)(cb2_075x));
  float _526 = asfloat((uint)(cb2_073w));
  float _527 = asfloat((uint)(cb2_074x));
  float _528 = asfloat((uint)(cb2_074y));
  float _529 = asfloat((uint)(cb2_077x));
  float _530 = asfloat((uint)(cb2_077y));
  float _531 = asfloat((uint)(cb2_079x));
  float _532 = asfloat((uint)(cb2_079y));
  float _533 = asfloat((uint)(cb2_079z));
  float _534 = asfloat((uint)(cb2_078y));
  float _535 = asfloat((uint)(cb2_078z));
  float _536 = asfloat((uint)(cb2_078w));
  float _537 = asfloat((uint)(cb2_077z));
  float _538 = asfloat((uint)(cb2_077w));
  float _539 = asfloat((uint)(cb2_078x));
  float _540 = asfloat((uint)(cb2_072y));
  float _541 = asfloat((uint)(cb2_072z));
  float _542 = asfloat((uint)(cb2_072w));
  float _543 = asfloat((uint)(cb2_071x));
  float _544 = asfloat((uint)(cb2_071y));
  float _545 = asfloat((uint)(cb2_076x));
  float _546 = asfloat((uint)(cb2_070w));
  float _547 = asfloat((uint)(cb2_070x));
  float _548 = asfloat((uint)(cb2_070y));
  float _549 = asfloat((uint)(cb2_070z));
  float _550 = asfloat((uint)(cb2_073x));
  float _551 = asfloat((uint)(cb2_073y));
  float _552 = asfloat((uint)(cb2_073z));
  float _553 = asfloat((uint)(cb2_071z));
  float _554 = asfloat((uint)(cb2_071w));
  float _555 = asfloat((uint)(cb2_072x));
  float _556 = max(_458, _459);
  float _557 = max(_457, _556);
  float _558 = 1.0f / _557;
  float _559 = _558 * _457;
  float _560 = _558 * _458;
  float _561 = _558 * _459;
  float _562 = abs(_559);
  float _563 = log2(_562);
  float _564 = _563 * _547;
  float _565 = exp2(_564);
  float _566 = abs(_560);
  float _567 = log2(_566);
  float _568 = _567 * _548;
  float _569 = exp2(_568);
  float _570 = abs(_561);
  float _571 = log2(_570);
  float _572 = _571 * _549;
  float _573 = exp2(_572);
  if (_469) {
    float _576 = asfloat((uint)(cb2_076w));
    float _578 = asfloat((uint)(cb2_076z));
    float _580 = asfloat((uint)(cb2_076y));
    float _581 = _578 * _458;
    float _582 = _580 * _457;
    float _583 = _576 * _459;
    float _584 = _582 + _583;
    float _585 = _584 + _581;
    _593 = _585;
  } else {
    float _587 = _554 * _458;
    float _588 = _553 * _457;
    float _589 = _555 * _459;
    float _590 = _587 + _588;
    float _591 = _590 + _589;
    _593 = _591;
  }
  float _594 = abs(_593);
  float _595 = log2(_594);
  float _596 = _595 * _546;
  float _597 = exp2(_596);
  float _598 = log2(_597);
  float _599 = _598 * _545;
  float _600 = exp2(_599);
  float _601 = select(_473, _600, _597);
  float _602 = _601 * _543;
  float _603 = _602 + _544;
  float _604 = 1.0f / _603;
  float _605 = _604 * _597;
  if (_469) {
    if (!_471) {
      float _608 = _565 * _537;
      float _609 = _569 * _538;
      float _610 = _573 * _539;
      float _611 = _609 + _608;
      float _612 = _611 + _610;
      float _613 = _569 * _535;
      float _614 = _565 * _534;
      float _615 = _573 * _536;
      float _616 = _613 + _614;
      float _617 = _616 + _615;
      float _618 = _573 * _533;
      float _619 = _569 * _532;
      float _620 = _565 * _531;
      float _621 = _619 + _620;
      float _622 = _621 + _618;
      float _623 = max(_617, _622);
      float _624 = max(_612, _623);
      float _625 = 1.0f / _624;
      float _626 = _625 * _612;
      float _627 = _625 * _617;
      float _628 = _625 * _622;
      _630 = _626;
      _631 = _627;
      _632 = _628;
    } else {
      _630 = _565;
      _631 = _569;
      _632 = _573;
    }
    float _633 = _630 * _530;
    float _634 = exp2(_633);
    float _635 = _634 * _529;
    float _636 = saturate(_635);
    float _637 = _630 * _529;
    float _638 = _630 - _637;
    float _639 = saturate(_638);
    float _640 = max(_529, _639);
    float _641 = min(_640, _636);
    float _642 = _631 * _530;
    float _643 = exp2(_642);
    float _644 = _643 * _529;
    float _645 = saturate(_644);
    float _646 = _631 * _529;
    float _647 = _631 - _646;
    float _648 = saturate(_647);
    float _649 = max(_529, _648);
    float _650 = min(_649, _645);
    float _651 = _632 * _530;
    float _652 = exp2(_651);
    float _653 = _652 * _529;
    float _654 = saturate(_653);
    float _655 = _632 * _529;
    float _656 = _632 - _655;
    float _657 = saturate(_656);
    float _658 = max(_529, _657);
    float _659 = min(_658, _654);
    _661 = _641;
    _662 = _650;
    _663 = _659;
  } else {
    _661 = _565;
    _662 = _569;
    _663 = _573;
  }
  float _664 = _661 * _553;
  float _665 = _662 * _554;
  float _666 = _665 + _664;
  float _667 = _663 * _555;
  float _668 = _666 + _667;
  float _669 = 1.0f / _668;
  float _670 = _669 * _605;
  float _671 = saturate(_670);
  float _672 = _671 * _661;
  float _673 = saturate(_672);
  float _674 = _671 * _662;
  float _675 = saturate(_674);
  float _676 = _671 * _663;
  float _677 = saturate(_676);
  float _678 = _673 * _540;
  float _679 = _540 - _678;
  float _680 = _675 * _541;
  float _681 = _541 - _680;
  float _682 = _677 * _542;
  float _683 = _542 - _682;
  float _684 = _677 * _555;
  float _685 = _673 * _553;
  float _686 = _675 * _554;
  float _687 = _605 - _685;
  float _688 = _687 - _686;
  float _689 = _688 - _684;
  float _690 = saturate(_689);
  float _691 = _681 * _554;
  float _692 = _679 * _553;
  float _693 = _683 * _555;
  float _694 = _691 + _692;
  float _695 = _694 + _693;
  float _696 = 1.0f / _695;
  float _697 = _696 * _690;
  float _698 = _697 * _679;
  float _699 = _698 + _673;
  float _700 = saturate(_699);
  float _701 = _697 * _681;
  float _702 = _701 + _675;
  float _703 = saturate(_702);
  float _704 = _697 * _683;
  float _705 = _704 + _677;
  float _706 = saturate(_705);
  float _707 = _706 * _555;
  float _708 = _700 * _553;
  float _709 = _703 * _554;
  float _710 = _605 - _708;
  float _711 = _710 - _709;
  float _712 = _711 - _707;
  float _713 = saturate(_712);
  float _714 = _713 * _550;
  float _715 = _714 + _700;
  float _716 = saturate(_715);
  float _717 = _713 * _551;
  float _718 = _717 + _703;
  float _719 = saturate(_718);
  float _720 = _713 * _552;
  float _721 = _720 + _706;
  float _722 = saturate(_721);
  if (!_467) {
    float _724 = _716 * _526;
    float _725 = _719 * _527;
    float _726 = _722 * _528;
    float _727 = _725 + _724;
    float _728 = _727 + _726;
    float _729 = _719 * _524;
    float _730 = _716 * _523;
    float _731 = _722 * _525;
    float _732 = _729 + _730;
    float _733 = _732 + _731;
    float _734 = _722 * _522;
    float _735 = _719 * _521;
    float _736 = _716 * _520;
    float _737 = _735 + _736;
    float _738 = _737 + _734;
    if (!_465) {
      float _740 = saturate(_728);
      float _741 = saturate(_733);
      float _742 = saturate(_738);
      _744 = _742;
      _745 = _741;
      _746 = _740;
    } else {
      _744 = _738;
      _745 = _733;
      _746 = _728;
    }
  } else {
    _744 = _722;
    _745 = _719;
    _746 = _716;
  }
  if (!_462) {
    float _748 = _746 * _526;
    float _749 = _745 * _526;
    float _750 = _744 * _526;
    _752 = _750;
    _753 = _749;
    _754 = _748;
  } else {
    _752 = _744;
    _753 = _745;
    _754 = _746;
  }
  if (_379) {
    float _758 = cb1_018z * 9.999999747378752e-05f;
    float _759 = _758 * _754;
    float _760 = _758 * _753;
    float _761 = _758 * _752;
    float _763 = 5000.0f / cb1_018y;
    float _764 = _759 * _763;
    float _765 = _760 * _763;
    float _766 = _761 * _763;
    _768 = _764;
    _769 = _765;
    _770 = _766;
  } else {
    _768 = _754;
    _769 = _753;
    _770 = _752;
  }
  float _771 = _768 * 1.6047500371932983f;
  float _772 = mad(-0.5310800075531006f, _769, _771);
  float _773 = mad(-0.07366999983787537f, _770, _772);
  float _774 = _768 * -0.10208000242710114f;
  float _775 = mad(1.1081299781799316f, _769, _774);
  float _776 = mad(-0.006049999967217445f, _770, _775);
  float _777 = _768 * -0.0032599999103695154f;
  float _778 = mad(-0.07275000214576721f, _769, _777);
  float _779 = mad(1.0760200023651123f, _770, _778);
  if (_379) {
    // float _781 = max(_773, 0.0f);
    // float _782 = max(_776, 0.0f);
    // float _783 = max(_779, 0.0f);
    // bool _784 = !(_781 >= 0.0030399328097701073f);
    // if (!_784) {
    //   float _786 = abs(_781);
    //   float _787 = log2(_786);
    //   float _788 = _787 * 0.4166666567325592f;
    //   float _789 = exp2(_788);
    //   float _790 = _789 * 1.0549999475479126f;
    //   float _791 = _790 + -0.054999999701976776f;
    //   _795 = _791;
    // } else {
    //   float _793 = _781 * 12.923210144042969f;
    //   _795 = _793;
    // }
    // bool _796 = !(_782 >= 0.0030399328097701073f);
    // if (!_796) {
    //   float _798 = abs(_782);
    //   float _799 = log2(_798);
    //   float _800 = _799 * 0.4166666567325592f;
    //   float _801 = exp2(_800);
    //   float _802 = _801 * 1.0549999475479126f;
    //   float _803 = _802 + -0.054999999701976776f;
    //   _807 = _803;
    // } else {
    //   float _805 = _782 * 12.923210144042969f;
    //   _807 = _805;
    // }
    // bool _808 = !(_783 >= 0.0030399328097701073f);
    // if (!_808) {
    //   float _810 = abs(_783);
    //   float _811 = log2(_810);
    //   float _812 = _811 * 0.4166666567325592f;
    //   float _813 = exp2(_812);
    //   float _814 = _813 * 1.0549999475479126f;
    //   float _815 = _814 + -0.054999999701976776f;
    //   _888 = _795;
    //   _889 = _807;
    //   _890 = _815;
    // } else {
    //   float _817 = _783 * 12.923210144042969f;
    //   _888 = _795;
    //   _889 = _807;
    //   _890 = _817;
    // }
    _888 = renodx::color::srgb::EncodeSafe(_773);
    _889 = renodx::color::srgb::EncodeSafe(_776);
    _890 = renodx::color::srgb::EncodeSafe(_779);

  } else {
    float _819 = saturate(_773);
    float _820 = saturate(_776);
    float _821 = saturate(_779);
    bool _822 = ((uint)(cb1_018w) == -2);
    if (!_822) {
      bool _824 = !(_819 >= 0.0030399328097701073f);
      if (!_824) {
        float _826 = abs(_819);
        float _827 = log2(_826);
        float _828 = _827 * 0.4166666567325592f;
        float _829 = exp2(_828);
        float _830 = _829 * 1.0549999475479126f;
        float _831 = _830 + -0.054999999701976776f;
        _835 = _831;
      } else {
        float _833 = _819 * 12.923210144042969f;
        _835 = _833;
      }
      bool _836 = !(_820 >= 0.0030399328097701073f);
      if (!_836) {
        float _838 = abs(_820);
        float _839 = log2(_838);
        float _840 = _839 * 0.4166666567325592f;
        float _841 = exp2(_840);
        float _842 = _841 * 1.0549999475479126f;
        float _843 = _842 + -0.054999999701976776f;
        _847 = _843;
      } else {
        float _845 = _820 * 12.923210144042969f;
        _847 = _845;
      }
      bool _848 = !(_821 >= 0.0030399328097701073f);
      if (!_848) {
        float _850 = abs(_821);
        float _851 = log2(_850);
        float _852 = _851 * 0.4166666567325592f;
        float _853 = exp2(_852);
        float _854 = _853 * 1.0549999475479126f;
        float _855 = _854 + -0.054999999701976776f;
        _859 = _835;
        _860 = _847;
        _861 = _855;
      } else {
        float _857 = _821 * 12.923210144042969f;
        _859 = _835;
        _860 = _847;
        _861 = _857;
      }
    } else {
      _859 = _819;
      _860 = _820;
      _861 = _821;
    }
    float _866 = abs(_859);
    float _867 = abs(_860);
    float _868 = abs(_861);
    float _869 = log2(_866);
    float _870 = log2(_867);
    float _871 = log2(_868);
    float _872 = _869 * cb2_000z;
    float _873 = _870 * cb2_000z;
    float _874 = _871 * cb2_000z;
    float _875 = exp2(_872);
    float _876 = exp2(_873);
    float _877 = exp2(_874);
    float _878 = _875 * cb2_000y;
    float _879 = _876 * cb2_000y;
    float _880 = _877 * cb2_000y;
    float _881 = _878 + cb2_000x;
    float _882 = _879 + cb2_000x;
    float _883 = _880 + cb2_000x;
    float _884 = saturate(_881);
    float _885 = saturate(_882);
    float _886 = saturate(_883);
    _888 = _884;
    _889 = _885;
    _890 = _886;
  }
  float _894 = cb2_023x * TEXCOORD0_centroid.x;
  float _895 = cb2_023y * TEXCOORD0_centroid.y;
  float _898 = _894 + cb2_023z;
  float _899 = _895 + cb2_023w;
  float4 _902 = t8.SampleLevel(s0_space2, float2(_898, _899), 0.0f);
  float _904 = _902.x + -0.5f;
  float _905 = _904 * cb2_022x;
  float _906 = _905 + 0.5f;
  float _907 = _906 * 2.0f;
  float _908 = _907 * _888;
  float _909 = _907 * _889;
  float _910 = _907 * _890;
  float _914 = float((uint)(cb2_019z));
  float _915 = float((uint)(cb2_019w));
  float _916 = _914 + SV_Position.x;
  float _917 = _915 + SV_Position.y;
  uint _918 = uint(_916);
  uint _919 = uint(_917);
  uint _922 = cb2_019x + -1u;
  uint _923 = cb2_019y + -1u;
  int _924 = _918 & _922;
  int _925 = _919 & _923;
  float4 _926 = t3.Load(int3(_924, _925, 0));
  float _930 = _926.x * 2.0f;
  float _931 = _926.y * 2.0f;
  float _932 = _926.z * 2.0f;
  float _933 = _930 + -1.0f;
  float _934 = _931 + -1.0f;
  float _935 = _932 + -1.0f;
  float _936 = _933 * cb2_025w;
  float _937 = _934 * cb2_025w;
  float _938 = _935 * cb2_025w;
  float _939 = _936 + _908;
  float _940 = _937 + _909;
  float _941 = _938 + _910;
  float _942 = dot(float3(_939, _940, _941), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _939;
  SV_Target.y = _940;
  SV_Target.z = _941;
  SV_Target.w = _942;
  SV_Target_1.x = _942;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
