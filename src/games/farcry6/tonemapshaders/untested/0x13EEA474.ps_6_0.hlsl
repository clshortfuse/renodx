#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_003x : packoffset(c003.x);
  float cb2_003y : packoffset(c003.y);
  float cb2_003z : packoffset(c003.z);
  float cb2_003w : packoffset(c003.w);
  float cb2_004x : packoffset(c004.x);
  float cb2_004y : packoffset(c004.y);
  float cb2_004z : packoffset(c004.z);
  float cb2_004w : packoffset(c004.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026y : packoffset(c026.y);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_028x : packoffset(c028.x);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t8.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _58 = _56 + TEXCOORD0_centroid.x;
  float _59 = _57 + TEXCOORD0_centroid.y;
  float4 _60 = t8.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  bool _62 = (_60.y > 0.0f);
  float _63 = select(_62, TEXCOORD0_centroid.x, _58);
  float _64 = select(_62, TEXCOORD0_centroid.y, _59);
  float4 _65 = t1.SampleLevel(s4_space2, float2(_63, _64), 0.0f);
  float _69 = max(_65.x, 0.0f);
  float _70 = max(_65.y, 0.0f);
  float _71 = max(_65.z, 0.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float _74 = min(_71, 65000.0f);
  float4 _75 = t4.SampleLevel(s2_space2, float2(_63, _64), 0.0f);
  float _80 = max(_75.x, 0.0f);
  float _81 = max(_75.y, 0.0f);
  float _82 = max(_75.z, 0.0f);
  float _83 = max(_75.w, 0.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _87 = min(_83, 5000.0f);
  float _90 = _25.x * cb0_028z;
  float _91 = _90 + cb0_028x;
  float _92 = cb2_027w / _91;
  float _93 = 1.0f - _92;
  float _94 = abs(_93);
  float _96 = cb2_027y * _94;
  float _98 = _96 - cb2_027z;
  float _99 = saturate(_98);
  float _100 = max(_99, _87);
  float _101 = saturate(_100);
  float _105 = cb2_013x * _63;
  float _106 = cb2_013y * _64;
  float _109 = _105 + cb2_013z;
  float _110 = _106 + cb2_013w;
  float _113 = dot(float2(_109, _110), float2(_109, _110));
  float _114 = abs(_113);
  float _115 = log2(_114);
  float _116 = _115 * cb2_014x;
  float _117 = exp2(_116);
  float _118 = saturate(_117);
  float _122 = cb2_011x * _63;
  float _123 = cb2_011y * _64;
  float _126 = _122 + cb2_011z;
  float _127 = _123 + cb2_011w;
  float _128 = _126 * _118;
  float _129 = _127 * _118;
  float _130 = _128 + _63;
  float _131 = _129 + _64;
  float _135 = cb2_012x * _63;
  float _136 = cb2_012y * _64;
  float _139 = _135 + cb2_012z;
  float _140 = _136 + cb2_012w;
  float _141 = _139 * _118;
  float _142 = _140 * _118;
  float _143 = _141 + _63;
  float _144 = _142 + _64;
  float4 _145 = t1.SampleLevel(s2_space2, float2(_130, _131), 0.0f);
  float _149 = max(_145.x, 0.0f);
  float _150 = max(_145.y, 0.0f);
  float _151 = max(_145.z, 0.0f);
  float _152 = min(_149, 65000.0f);
  float _153 = min(_150, 65000.0f);
  float _154 = min(_151, 65000.0f);
  float4 _155 = t1.SampleLevel(s2_space2, float2(_143, _144), 0.0f);
  float _159 = max(_155.x, 0.0f);
  float _160 = max(_155.y, 0.0f);
  float _161 = max(_155.z, 0.0f);
  float _162 = min(_159, 65000.0f);
  float _163 = min(_160, 65000.0f);
  float _164 = min(_161, 65000.0f);
  float4 _165 = t4.SampleLevel(s2_space2, float2(_130, _131), 0.0f);
  float _169 = max(_165.x, 0.0f);
  float _170 = max(_165.y, 0.0f);
  float _171 = max(_165.z, 0.0f);
  float _172 = min(_169, 5000.0f);
  float _173 = min(_170, 5000.0f);
  float _174 = min(_171, 5000.0f);
  float4 _175 = t4.SampleLevel(s2_space2, float2(_143, _144), 0.0f);
  float _179 = max(_175.x, 0.0f);
  float _180 = max(_175.y, 0.0f);
  float _181 = max(_175.z, 0.0f);
  float _182 = min(_179, 5000.0f);
  float _183 = min(_180, 5000.0f);
  float _184 = min(_181, 5000.0f);
  float _189 = 1.0f - cb2_009x;
  float _190 = 1.0f - cb2_009y;
  float _191 = 1.0f - cb2_009z;
  float _196 = _189 - cb2_010x;
  float _197 = _190 - cb2_010y;
  float _198 = _191 - cb2_010z;
  float _199 = saturate(_196);
  float _200 = saturate(_197);
  float _201 = saturate(_198);
  float _202 = _199 * _72;
  float _203 = _200 * _73;
  float _204 = _201 * _74;
  float _205 = cb2_009x * _152;
  float _206 = cb2_009y * _153;
  float _207 = cb2_009z * _154;
  float _208 = _205 + _202;
  float _209 = _206 + _203;
  float _210 = _207 + _204;
  float _211 = cb2_010x * _162;
  float _212 = cb2_010y * _163;
  float _213 = cb2_010z * _164;
  float _214 = _208 + _211;
  float _215 = _209 + _212;
  float _216 = _210 + _213;
  float _217 = _199 * _84;
  float _218 = _200 * _85;
  float _219 = _201 * _86;
  float _220 = cb2_009x * _172;
  float _221 = cb2_009y * _173;
  float _222 = cb2_009z * _174;
  float _223 = cb2_010x * _182;
  float _224 = cb2_010y * _183;
  float _225 = cb2_010z * _184;
  float4 _226 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _230 = _217 - _214;
  float _231 = _230 + _220;
  float _232 = _231 + _223;
  float _233 = _218 - _215;
  float _234 = _233 + _221;
  float _235 = _234 + _224;
  float _236 = _219 - _216;
  float _237 = _236 + _222;
  float _238 = _237 + _225;
  float _239 = _232 * _101;
  float _240 = _235 * _101;
  float _241 = _238 * _101;
  float _242 = _239 + _214;
  float _243 = _240 + _215;
  float _244 = _241 + _216;
  float _245 = dot(float3(_242, _243, _244), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _249 = t0[0].SExposureData_020;
  float _251 = t0[0].SExposureData_004;
  float _253 = cb2_018x * 0.5f;
  float _254 = _253 * cb2_018y;
  float _255 = _251.x - _254;
  float _256 = cb2_018y * cb2_018x;
  float _257 = 1.0f / _256;
  float _258 = _255 * _257;
  float _259 = _245 / _249.x;
  float _260 = _259 * 5464.01611328125f;
  float _261 = _260 + 9.99999993922529e-09f;
  float _262 = log2(_261);
  float _263 = _262 - _255;
  float _264 = _263 * _257;
  float _265 = saturate(_264);
  float2 _266 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _265), 0.0f);
  float _269 = max(_266.y, 1.0000000116860974e-07f);
  float _270 = _266.x / _269;
  float _271 = _270 + _258;
  float _272 = _271 / _257;
  float _273 = _272 - _251.x;
  float _274 = -0.0f - _273;
  float _276 = _274 - cb2_027x;
  float _277 = max(0.0f, _276);
  float _280 = cb2_026z * _277;
  float _281 = _273 - cb2_027x;
  float _282 = max(0.0f, _281);
  float _284 = cb2_026w * _282;
  bool _285 = (_273 < 0.0f);
  float _286 = select(_285, _280, _284);
  float _287 = exp2(_286);
  float _288 = _287 * _242;
  float _289 = _287 * _243;
  float _290 = _287 * _244;
  float _295 = cb2_024y * _226.x;
  float _296 = cb2_024z * _226.y;
  float _297 = cb2_024w * _226.z;
  float _298 = _295 + _288;
  float _299 = _296 + _289;
  float _300 = _297 + _290;
  float _305 = _298 * cb2_025x;
  float _306 = _299 * cb2_025y;
  float _307 = _300 * cb2_025z;
  float _308 = dot(float3(_305, _306, _307), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _309 = t0[0].SExposureData_012;
  float _311 = _308 * 5464.01611328125f;
  float _312 = _311 * _309.x;
  float _313 = _312 + 9.99999993922529e-09f;
  float _314 = log2(_313);
  float _315 = _314 + 16.929765701293945f;
  float _316 = _315 * 0.05734497308731079f;
  float _317 = saturate(_316);
  float _318 = _317 * _317;
  float _319 = _317 * 2.0f;
  float _320 = 3.0f - _319;
  float _321 = _318 * _320;
  float _322 = _306 * 0.8450999855995178f;
  float _323 = _307 * 0.14589999616146088f;
  float _324 = _322 + _323;
  float _325 = _324 * 2.4890189170837402f;
  float _326 = _324 * 0.3754962384700775f;
  float _327 = _324 * 2.811495304107666f;
  float _328 = _324 * 5.519708156585693f;
  float _329 = _308 - _325;
  float _330 = _321 * _329;
  float _331 = _330 + _325;
  float _332 = _321 * 0.5f;
  float _333 = _332 + 0.5f;
  float _334 = _333 * _329;
  float _335 = _334 + _325;
  float _336 = _305 - _326;
  float _337 = _306 - _327;
  float _338 = _307 - _328;
  float _339 = _333 * _336;
  float _340 = _333 * _337;
  float _341 = _333 * _338;
  float _342 = _339 + _326;
  float _343 = _340 + _327;
  float _344 = _341 + _328;
  float _345 = 1.0f / _335;
  float _346 = _331 * _345;
  float _347 = _346 * _342;
  float _348 = _346 * _343;
  float _349 = _346 * _344;
  float _353 = cb2_020x * TEXCOORD0_centroid.x;
  float _354 = cb2_020y * TEXCOORD0_centroid.y;
  float _357 = _353 + cb2_020z;
  float _358 = _354 + cb2_020w;
  float _361 = dot(float2(_357, _358), float2(_357, _358));
  float _362 = 1.0f - _361;
  float _363 = saturate(_362);
  float _364 = log2(_363);
  float _365 = _364 * cb2_021w;
  float _366 = exp2(_365);
  float _370 = _347 - cb2_021x;
  float _371 = _348 - cb2_021y;
  float _372 = _349 - cb2_021z;
  float _373 = _370 * _366;
  float _374 = _371 * _366;
  float _375 = _372 * _366;
  float _376 = _373 + cb2_021x;
  float _377 = _374 + cb2_021y;
  float _378 = _375 + cb2_021z;
  float _379 = t0[0].SExposureData_000;
  float _381 = max(_249.x, 0.0010000000474974513f);
  float _382 = 1.0f / _381;
  float _383 = _382 * _379.x;
  bool _386 = ((uint)(cb2_069y) == 0);
  float _392;
  float _393;
  float _394;
  float _448;
  float _449;
  float _450;
  float _541;
  float _542;
  float _543;
  float _588;
  float _589;
  float _590;
  float _591;
  float _640;
  float _641;
  float _642;
  float _643;
  float _668;
  float _669;
  float _670;
  float _820;
  float _857;
  float _858;
  float _859;
  float _888;
  float _889;
  float _890;
  float _971;
  float _972;
  float _973;
  float _979;
  float _980;
  float _981;
  float _995;
  float _996;
  float _997;
  float _1022;
  float _1034;
  float _1062;
  float _1074;
  float _1086;
  float _1087;
  float _1088;
  float _1115;
  float _1116;
  float _1117;
  if (!_386) {
    float _388 = _383 * _376;
    float _389 = _383 * _377;
    float _390 = _383 * _378;
    _392 = _388;
    _393 = _389;
    _394 = _390;
  } else {
    _392 = _376;
    _393 = _377;
    _394 = _378;
  }
  float _395 = _392 * 0.6130970120429993f;
  float _396 = mad(0.33952298760414124f, _393, _395);
  float _397 = mad(0.04737899824976921f, _394, _396);
  float _398 = _392 * 0.07019399851560593f;
  float _399 = mad(0.9163540005683899f, _393, _398);
  float _400 = mad(0.013451999984681606f, _394, _399);
  float _401 = _392 * 0.02061600051820278f;
  float _402 = mad(0.10956999659538269f, _393, _401);
  float _403 = mad(0.8698149919509888f, _394, _402);
  float _404 = log2(_397);
  float _405 = log2(_400);
  float _406 = log2(_403);
  float _407 = _404 * 0.04211956635117531f;
  float _408 = _405 * 0.04211956635117531f;
  float _409 = _406 * 0.04211956635117531f;
  float _410 = _407 + 0.6252607107162476f;
  float _411 = _408 + 0.6252607107162476f;
  float _412 = _409 + 0.6252607107162476f;
  float4 _413 = t6.SampleLevel(s2_space2, float3(_410, _411, _412), 0.0f);
  bool _419 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_419 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _423 = cb2_017x * _413.x;
    float _424 = cb2_017x * _413.y;
    float _425 = cb2_017x * _413.z;
    float _427 = _423 + cb2_017y;
    float _428 = _424 + cb2_017y;
    float _429 = _425 + cb2_017y;
    float _430 = exp2(_427);
    float _431 = exp2(_428);
    float _432 = exp2(_429);
    float _433 = _430 + 1.0f;
    float _434 = _431 + 1.0f;
    float _435 = _432 + 1.0f;
    float _436 = 1.0f / _433;
    float _437 = 1.0f / _434;
    float _438 = 1.0f / _435;
    float _440 = cb2_017z * _436;
    float _441 = cb2_017z * _437;
    float _442 = cb2_017z * _438;
    float _444 = _440 + cb2_017w;
    float _445 = _441 + cb2_017w;
    float _446 = _442 + cb2_017w;
    _448 = _444;
    _449 = _445;
    _450 = _446;
  } else {
    _448 = _413.x;
    _449 = _413.y;
    _450 = _413.z;
  }
  float _451 = _448 * 23.0f;
  float _452 = _451 + -14.473931312561035f;
  float _453 = exp2(_452);
  float _454 = _449 * 23.0f;
  float _455 = _454 + -14.473931312561035f;
  float _456 = exp2(_455);
  float _457 = _450 * 23.0f;
  float _458 = _457 + -14.473931312561035f;
  float _459 = exp2(_458);
  float _460 = dot(float3(_453, _456, _459), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _465 = dot(float3(_453, _456, _459), float3(_453, _456, _459));
  float _466 = rsqrt(_465);
  float _467 = _466 * _453;
  float _468 = _466 * _456;
  float _469 = _466 * _459;
  float _470 = cb2_001x - _467;
  float _471 = cb2_001y - _468;
  float _472 = cb2_001z - _469;
  float _473 = dot(float3(_470, _471, _472), float3(_470, _471, _472));
  float _476 = cb2_002z * _473;
  float _478 = _476 + cb2_002w;
  float _479 = saturate(_478);
  float _481 = cb2_002x * _479;
  float _482 = _460 - _453;
  float _483 = _460 - _456;
  float _484 = _460 - _459;
  float _485 = _481 * _482;
  float _486 = _481 * _483;
  float _487 = _481 * _484;
  float _488 = _485 + _453;
  float _489 = _486 + _456;
  float _490 = _487 + _459;
  float _492 = cb2_002y * _479;
  float _493 = 0.10000000149011612f - _488;
  float _494 = 0.10000000149011612f - _489;
  float _495 = 0.10000000149011612f - _490;
  float _496 = _493 * _492;
  float _497 = _494 * _492;
  float _498 = _495 * _492;
  float _499 = _496 + _488;
  float _500 = _497 + _489;
  float _501 = _498 + _490;
  float _502 = saturate(_499);
  float _503 = saturate(_500);
  float _504 = saturate(_501);
  float _509 = cb2_004x * TEXCOORD0_centroid.x;
  float _510 = cb2_004y * TEXCOORD0_centroid.y;
  float _513 = _509 + cb2_004z;
  float _514 = _510 + cb2_004w;
  float4 _520 = t7.Sample(s2_space2, float2(_513, _514));
  float _525 = _520.x * cb2_003x;
  float _526 = _520.y * cb2_003y;
  float _527 = _520.z * cb2_003z;
  float _528 = _520.w * cb2_003w;
  float _531 = _528 + cb2_026y;
  float _532 = saturate(_531);
  bool _535 = ((uint)(cb2_069y) == 0);
  if (!_535) {
    float _537 = _525 * _383;
    float _538 = _526 * _383;
    float _539 = _527 * _383;
    _541 = _537;
    _542 = _538;
    _543 = _539;
  } else {
    _541 = _525;
    _542 = _526;
    _543 = _527;
  }
  bool _546 = ((uint)(cb2_028x) == 2);
  bool _547 = ((uint)(cb2_028x) == 3);
  int _548 = (uint)(cb2_028x) & -2;
  bool _549 = (_548 == 2);
  bool _550 = ((uint)(cb2_028x) == 6);
  bool _551 = _549 || _550;
  if (_551) {
    float _553 = _541 * _532;
    float _554 = _542 * _532;
    float _555 = _543 * _532;
    float _556 = _532 * _532;
    _588 = _553;
    _589 = _554;
    _590 = _555;
    _591 = _556;
  } else {
    bool _558 = ((uint)(cb2_028x) == 4);
    if (_558) {
      float _560 = _541 + -1.0f;
      float _561 = _542 + -1.0f;
      float _562 = _543 + -1.0f;
      float _563 = _532 + -1.0f;
      float _564 = _560 * _532;
      float _565 = _561 * _532;
      float _566 = _562 * _532;
      float _567 = _563 * _532;
      float _568 = _564 + 1.0f;
      float _569 = _565 + 1.0f;
      float _570 = _566 + 1.0f;
      float _571 = _567 + 1.0f;
      _588 = _568;
      _589 = _569;
      _590 = _570;
      _591 = _571;
    } else {
      bool _573 = ((uint)(cb2_028x) == 5);
      if (_573) {
        float _575 = _541 + -0.5f;
        float _576 = _542 + -0.5f;
        float _577 = _543 + -0.5f;
        float _578 = _532 + -0.5f;
        float _579 = _575 * _532;
        float _580 = _576 * _532;
        float _581 = _577 * _532;
        float _582 = _578 * _532;
        float _583 = _579 + 0.5f;
        float _584 = _580 + 0.5f;
        float _585 = _581 + 0.5f;
        float _586 = _582 + 0.5f;
        _588 = _583;
        _589 = _584;
        _590 = _585;
        _591 = _586;
      } else {
        _588 = _541;
        _589 = _542;
        _590 = _543;
        _591 = _532;
      }
    }
  }
  if (_546) {
    float _593 = _588 + _502;
    float _594 = _589 + _503;
    float _595 = _590 + _504;
    _640 = _593;
    _641 = _594;
    _642 = _595;
    _643 = cb2_025w;
  } else {
    if (_547) {
      float _598 = 1.0f - _588;
      float _599 = 1.0f - _589;
      float _600 = 1.0f - _590;
      float _601 = _598 * _502;
      float _602 = _599 * _503;
      float _603 = _600 * _504;
      float _604 = _601 + _588;
      float _605 = _602 + _589;
      float _606 = _603 + _590;
      _640 = _604;
      _641 = _605;
      _642 = _606;
      _643 = cb2_025w;
    } else {
      bool _608 = ((uint)(cb2_028x) == 4);
      if (_608) {
        float _610 = _588 * _502;
        float _611 = _589 * _503;
        float _612 = _590 * _504;
        _640 = _610;
        _641 = _611;
        _642 = _612;
        _643 = cb2_025w;
      } else {
        bool _614 = ((uint)(cb2_028x) == 5);
        if (_614) {
          float _616 = _502 * 2.0f;
          float _617 = _616 * _588;
          float _618 = _503 * 2.0f;
          float _619 = _618 * _589;
          float _620 = _504 * 2.0f;
          float _621 = _620 * _590;
          _640 = _617;
          _641 = _619;
          _642 = _621;
          _643 = cb2_025w;
        } else {
          if (_550) {
            float _624 = _502 - _588;
            float _625 = _503 - _589;
            float _626 = _504 - _590;
            _640 = _624;
            _641 = _625;
            _642 = _626;
            _643 = cb2_025w;
          } else {
            float _628 = _588 - _502;
            float _629 = _589 - _503;
            float _630 = _590 - _504;
            float _631 = _591 * _628;
            float _632 = _591 * _629;
            float _633 = _591 * _630;
            float _634 = _631 + _502;
            float _635 = _632 + _503;
            float _636 = _633 + _504;
            float _637 = 1.0f - _591;
            float _638 = _637 * cb2_025w;
            _640 = _634;
            _641 = _635;
            _642 = _636;
            _643 = _638;
          }
        }
      }
    }
  }
  float _649 = cb2_016x - _640;
  float _650 = cb2_016y - _641;
  float _651 = cb2_016z - _642;
  float _652 = _649 * cb2_016w;
  float _653 = _650 * cb2_016w;
  float _654 = _651 * cb2_016w;
  float _655 = _652 + _640;
  float _656 = _653 + _641;
  float _657 = _654 + _642;
  bool _660 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_660 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _664 = cb2_024x * _655;
    float _665 = cb2_024x * _656;
    float _666 = cb2_024x * _657;
    _668 = _664;
    _669 = _665;
    _670 = _666;
  } else {
    _668 = _655;
    _669 = _656;
    _670 = _657;
  }
  float _673 = _668 * 0.9708889722824097f;
  float _674 = mad(0.026962999254465103f, _669, _673);
  float _675 = mad(0.002148000057786703f, _670, _674);
  float _676 = _668 * 0.01088900025933981f;
  float _677 = mad(0.9869629740715027f, _669, _676);
  float _678 = mad(0.002148000057786703f, _670, _677);
  float _679 = mad(0.026962999254465103f, _669, _676);
  float _680 = mad(0.9621480107307434f, _670, _679);
  float _681 = max(_675, 0.0f);
  float _682 = max(_678, 0.0f);
  float _683 = max(_680, 0.0f);
  float _684 = min(_681, cb2_095y);
  float _685 = min(_682, cb2_095y);
  float _686 = min(_683, cb2_095y);
  bool _689 = ((uint)(cb2_095x) == 0);
  bool _692 = ((uint)(cb2_094w) == 0);
  bool _694 = ((uint)(cb2_094z) == 0);
  bool _696 = ((uint)(cb2_094y) != 0);
  bool _698 = ((uint)(cb2_094x) == 0);
  bool _700 = ((uint)(cb2_069z) != 0);
  float _747 = asfloat((uint)(cb2_075y));
  float _748 = asfloat((uint)(cb2_075z));
  float _749 = asfloat((uint)(cb2_075w));
  float _750 = asfloat((uint)(cb2_074z));
  float _751 = asfloat((uint)(cb2_074w));
  float _752 = asfloat((uint)(cb2_075x));
  float _753 = asfloat((uint)(cb2_073w));
  float _754 = asfloat((uint)(cb2_074x));
  float _755 = asfloat((uint)(cb2_074y));
  float _756 = asfloat((uint)(cb2_077x));
  float _757 = asfloat((uint)(cb2_077y));
  float _758 = asfloat((uint)(cb2_079x));
  float _759 = asfloat((uint)(cb2_079y));
  float _760 = asfloat((uint)(cb2_079z));
  float _761 = asfloat((uint)(cb2_078y));
  float _762 = asfloat((uint)(cb2_078z));
  float _763 = asfloat((uint)(cb2_078w));
  float _764 = asfloat((uint)(cb2_077z));
  float _765 = asfloat((uint)(cb2_077w));
  float _766 = asfloat((uint)(cb2_078x));
  float _767 = asfloat((uint)(cb2_072y));
  float _768 = asfloat((uint)(cb2_072z));
  float _769 = asfloat((uint)(cb2_072w));
  float _770 = asfloat((uint)(cb2_071x));
  float _771 = asfloat((uint)(cb2_071y));
  float _772 = asfloat((uint)(cb2_076x));
  float _773 = asfloat((uint)(cb2_070w));
  float _774 = asfloat((uint)(cb2_070x));
  float _775 = asfloat((uint)(cb2_070y));
  float _776 = asfloat((uint)(cb2_070z));
  float _777 = asfloat((uint)(cb2_073x));
  float _778 = asfloat((uint)(cb2_073y));
  float _779 = asfloat((uint)(cb2_073z));
  float _780 = asfloat((uint)(cb2_071z));
  float _781 = asfloat((uint)(cb2_071w));
  float _782 = asfloat((uint)(cb2_072x));
  float _783 = max(_685, _686);
  float _784 = max(_684, _783);
  float _785 = 1.0f / _784;
  float _786 = _785 * _684;
  float _787 = _785 * _685;
  float _788 = _785 * _686;
  float _789 = abs(_786);
  float _790 = log2(_789);
  float _791 = _790 * _774;
  float _792 = exp2(_791);
  float _793 = abs(_787);
  float _794 = log2(_793);
  float _795 = _794 * _775;
  float _796 = exp2(_795);
  float _797 = abs(_788);
  float _798 = log2(_797);
  float _799 = _798 * _776;
  float _800 = exp2(_799);
  if (_696) {
    float _803 = asfloat((uint)(cb2_076w));
    float _805 = asfloat((uint)(cb2_076z));
    float _807 = asfloat((uint)(cb2_076y));
    float _808 = _805 * _685;
    float _809 = _807 * _684;
    float _810 = _803 * _686;
    float _811 = _809 + _810;
    float _812 = _811 + _808;
    _820 = _812;
  } else {
    float _814 = _781 * _685;
    float _815 = _780 * _684;
    float _816 = _782 * _686;
    float _817 = _814 + _815;
    float _818 = _817 + _816;
    _820 = _818;
  }
  float _821 = abs(_820);
  float _822 = log2(_821);
  float _823 = _822 * _773;
  float _824 = exp2(_823);
  float _825 = log2(_824);
  float _826 = _825 * _772;
  float _827 = exp2(_826);
  float _828 = select(_700, _827, _824);
  float _829 = _828 * _770;
  float _830 = _829 + _771;
  float _831 = 1.0f / _830;
  float _832 = _831 * _824;
  if (_696) {
    if (!_698) {
      float _835 = _792 * _764;
      float _836 = _796 * _765;
      float _837 = _800 * _766;
      float _838 = _836 + _835;
      float _839 = _838 + _837;
      float _840 = _796 * _762;
      float _841 = _792 * _761;
      float _842 = _800 * _763;
      float _843 = _840 + _841;
      float _844 = _843 + _842;
      float _845 = _800 * _760;
      float _846 = _796 * _759;
      float _847 = _792 * _758;
      float _848 = _846 + _847;
      float _849 = _848 + _845;
      float _850 = max(_844, _849);
      float _851 = max(_839, _850);
      float _852 = 1.0f / _851;
      float _853 = _852 * _839;
      float _854 = _852 * _844;
      float _855 = _852 * _849;
      _857 = _853;
      _858 = _854;
      _859 = _855;
    } else {
      _857 = _792;
      _858 = _796;
      _859 = _800;
    }
    float _860 = _857 * _757;
    float _861 = exp2(_860);
    float _862 = _861 * _756;
    float _863 = saturate(_862);
    float _864 = _857 * _756;
    float _865 = _857 - _864;
    float _866 = saturate(_865);
    float _867 = max(_756, _866);
    float _868 = min(_867, _863);
    float _869 = _858 * _757;
    float _870 = exp2(_869);
    float _871 = _870 * _756;
    float _872 = saturate(_871);
    float _873 = _858 * _756;
    float _874 = _858 - _873;
    float _875 = saturate(_874);
    float _876 = max(_756, _875);
    float _877 = min(_876, _872);
    float _878 = _859 * _757;
    float _879 = exp2(_878);
    float _880 = _879 * _756;
    float _881 = saturate(_880);
    float _882 = _859 * _756;
    float _883 = _859 - _882;
    float _884 = saturate(_883);
    float _885 = max(_756, _884);
    float _886 = min(_885, _881);
    _888 = _868;
    _889 = _877;
    _890 = _886;
  } else {
    _888 = _792;
    _889 = _796;
    _890 = _800;
  }
  float _891 = _888 * _780;
  float _892 = _889 * _781;
  float _893 = _892 + _891;
  float _894 = _890 * _782;
  float _895 = _893 + _894;
  float _896 = 1.0f / _895;
  float _897 = _896 * _832;
  float _898 = saturate(_897);
  float _899 = _898 * _888;
  float _900 = saturate(_899);
  float _901 = _898 * _889;
  float _902 = saturate(_901);
  float _903 = _898 * _890;
  float _904 = saturate(_903);
  float _905 = _900 * _767;
  float _906 = _767 - _905;
  float _907 = _902 * _768;
  float _908 = _768 - _907;
  float _909 = _904 * _769;
  float _910 = _769 - _909;
  float _911 = _904 * _782;
  float _912 = _900 * _780;
  float _913 = _902 * _781;
  float _914 = _832 - _912;
  float _915 = _914 - _913;
  float _916 = _915 - _911;
  float _917 = saturate(_916);
  float _918 = _908 * _781;
  float _919 = _906 * _780;
  float _920 = _910 * _782;
  float _921 = _918 + _919;
  float _922 = _921 + _920;
  float _923 = 1.0f / _922;
  float _924 = _923 * _917;
  float _925 = _924 * _906;
  float _926 = _925 + _900;
  float _927 = saturate(_926);
  float _928 = _924 * _908;
  float _929 = _928 + _902;
  float _930 = saturate(_929);
  float _931 = _924 * _910;
  float _932 = _931 + _904;
  float _933 = saturate(_932);
  float _934 = _933 * _782;
  float _935 = _927 * _780;
  float _936 = _930 * _781;
  float _937 = _832 - _935;
  float _938 = _937 - _936;
  float _939 = _938 - _934;
  float _940 = saturate(_939);
  float _941 = _940 * _777;
  float _942 = _941 + _927;
  float _943 = saturate(_942);
  float _944 = _940 * _778;
  float _945 = _944 + _930;
  float _946 = saturate(_945);
  float _947 = _940 * _779;
  float _948 = _947 + _933;
  float _949 = saturate(_948);
  if (!_694) {
    float _951 = _943 * _753;
    float _952 = _946 * _754;
    float _953 = _949 * _755;
    float _954 = _952 + _951;
    float _955 = _954 + _953;
    float _956 = _946 * _751;
    float _957 = _943 * _750;
    float _958 = _949 * _752;
    float _959 = _956 + _957;
    float _960 = _959 + _958;
    float _961 = _949 * _749;
    float _962 = _946 * _748;
    float _963 = _943 * _747;
    float _964 = _962 + _963;
    float _965 = _964 + _961;
    if (!_692) {
      float _967 = saturate(_955);
      float _968 = saturate(_960);
      float _969 = saturate(_965);
      _971 = _969;
      _972 = _968;
      _973 = _967;
    } else {
      _971 = _965;
      _972 = _960;
      _973 = _955;
    }
  } else {
    _971 = _949;
    _972 = _946;
    _973 = _943;
  }
  if (!_689) {
    float _975 = _973 * _753;
    float _976 = _972 * _753;
    float _977 = _971 * _753;
    _979 = _977;
    _980 = _976;
    _981 = _975;
  } else {
    _979 = _971;
    _980 = _972;
    _981 = _973;
  }
  if (_660) {
    float _985 = cb1_018z * 9.999999747378752e-05f;
    float _986 = _985 * _981;
    float _987 = _985 * _980;
    float _988 = _985 * _979;
    float _990 = 5000.0f / cb1_018y;
    float _991 = _986 * _990;
    float _992 = _987 * _990;
    float _993 = _988 * _990;
    _995 = _991;
    _996 = _992;
    _997 = _993;
  } else {
    _995 = _981;
    _996 = _980;
    _997 = _979;
  }
  float _998 = _995 * 1.6047500371932983f;
  float _999 = mad(-0.5310800075531006f, _996, _998);
  float _1000 = mad(-0.07366999983787537f, _997, _999);
  float _1001 = _995 * -0.10208000242710114f;
  float _1002 = mad(1.1081299781799316f, _996, _1001);
  float _1003 = mad(-0.006049999967217445f, _997, _1002);
  float _1004 = _995 * -0.0032599999103695154f;
  float _1005 = mad(-0.07275000214576721f, _996, _1004);
  float _1006 = mad(1.0760200023651123f, _997, _1005);
  if (_660) {
    // float _1008 = max(_1000, 0.0f);
    // float _1009 = max(_1003, 0.0f);
    // float _1010 = max(_1006, 0.0f);
    // bool _1011 = !(_1008 >= 0.0030399328097701073f);
    // if (!_1011) {
    //   float _1013 = abs(_1008);
    //   float _1014 = log2(_1013);
    //   float _1015 = _1014 * 0.4166666567325592f;
    //   float _1016 = exp2(_1015);
    //   float _1017 = _1016 * 1.0549999475479126f;
    //   float _1018 = _1017 + -0.054999999701976776f;
    //   _1022 = _1018;
    // } else {
    //   float _1020 = _1008 * 12.923210144042969f;
    //   _1022 = _1020;
    // }
    // bool _1023 = !(_1009 >= 0.0030399328097701073f);
    // if (!_1023) {
    //   float _1025 = abs(_1009);
    //   float _1026 = log2(_1025);
    //   float _1027 = _1026 * 0.4166666567325592f;
    //   float _1028 = exp2(_1027);
    //   float _1029 = _1028 * 1.0549999475479126f;
    //   float _1030 = _1029 + -0.054999999701976776f;
    //   _1034 = _1030;
    // } else {
    //   float _1032 = _1009 * 12.923210144042969f;
    //   _1034 = _1032;
    // }
    // bool _1035 = !(_1010 >= 0.0030399328097701073f);
    // if (!_1035) {
    //   float _1037 = abs(_1010);
    //   float _1038 = log2(_1037);
    //   float _1039 = _1038 * 0.4166666567325592f;
    //   float _1040 = exp2(_1039);
    //   float _1041 = _1040 * 1.0549999475479126f;
    //   float _1042 = _1041 + -0.054999999701976776f;
    //   _1115 = _1022;
    //   _1116 = _1034;
    //   _1117 = _1042;
    // } else {
    //   float _1044 = _1010 * 12.923210144042969f;
    //   _1115 = _1022;
    //   _1116 = _1034;
    //   _1117 = _1044;
    // }
    _1115 = renodx::color::srgb::EncodeSafe(_1000);
    _1116 = renodx::color::srgb::EncodeSafe(_1003);
    _1117 = renodx::color::srgb::EncodeSafe(_1006);

  } else {
    float _1046 = saturate(_1000);
    float _1047 = saturate(_1003);
    float _1048 = saturate(_1006);
    bool _1049 = ((uint)(cb1_018w) == -2);
    if (!_1049) {
      bool _1051 = !(_1046 >= 0.0030399328097701073f);
      if (!_1051) {
        float _1053 = abs(_1046);
        float _1054 = log2(_1053);
        float _1055 = _1054 * 0.4166666567325592f;
        float _1056 = exp2(_1055);
        float _1057 = _1056 * 1.0549999475479126f;
        float _1058 = _1057 + -0.054999999701976776f;
        _1062 = _1058;
      } else {
        float _1060 = _1046 * 12.923210144042969f;
        _1062 = _1060;
      }
      bool _1063 = !(_1047 >= 0.0030399328097701073f);
      if (!_1063) {
        float _1065 = abs(_1047);
        float _1066 = log2(_1065);
        float _1067 = _1066 * 0.4166666567325592f;
        float _1068 = exp2(_1067);
        float _1069 = _1068 * 1.0549999475479126f;
        float _1070 = _1069 + -0.054999999701976776f;
        _1074 = _1070;
      } else {
        float _1072 = _1047 * 12.923210144042969f;
        _1074 = _1072;
      }
      bool _1075 = !(_1048 >= 0.0030399328097701073f);
      if (!_1075) {
        float _1077 = abs(_1048);
        float _1078 = log2(_1077);
        float _1079 = _1078 * 0.4166666567325592f;
        float _1080 = exp2(_1079);
        float _1081 = _1080 * 1.0549999475479126f;
        float _1082 = _1081 + -0.054999999701976776f;
        _1086 = _1062;
        _1087 = _1074;
        _1088 = _1082;
      } else {
        float _1084 = _1048 * 12.923210144042969f;
        _1086 = _1062;
        _1087 = _1074;
        _1088 = _1084;
      }
    } else {
      _1086 = _1046;
      _1087 = _1047;
      _1088 = _1048;
    }
    float _1093 = abs(_1086);
    float _1094 = abs(_1087);
    float _1095 = abs(_1088);
    float _1096 = log2(_1093);
    float _1097 = log2(_1094);
    float _1098 = log2(_1095);
    float _1099 = _1096 * cb2_000z;
    float _1100 = _1097 * cb2_000z;
    float _1101 = _1098 * cb2_000z;
    float _1102 = exp2(_1099);
    float _1103 = exp2(_1100);
    float _1104 = exp2(_1101);
    float _1105 = _1102 * cb2_000y;
    float _1106 = _1103 * cb2_000y;
    float _1107 = _1104 * cb2_000y;
    float _1108 = _1105 + cb2_000x;
    float _1109 = _1106 + cb2_000x;
    float _1110 = _1107 + cb2_000x;
    float _1111 = saturate(_1108);
    float _1112 = saturate(_1109);
    float _1113 = saturate(_1110);
    _1115 = _1111;
    _1116 = _1112;
    _1117 = _1113;
  }
  float _1121 = cb2_023x * TEXCOORD0_centroid.x;
  float _1122 = cb2_023y * TEXCOORD0_centroid.y;
  float _1125 = _1121 + cb2_023z;
  float _1126 = _1122 + cb2_023w;
  float4 _1129 = t10.SampleLevel(s0_space2, float2(_1125, _1126), 0.0f);
  float _1131 = _1129.x + -0.5f;
  float _1132 = _1131 * cb2_022x;
  float _1133 = _1132 + 0.5f;
  float _1134 = _1133 * 2.0f;
  float _1135 = _1134 * _1115;
  float _1136 = _1134 * _1116;
  float _1137 = _1134 * _1117;
  float _1141 = float((uint)(cb2_019z));
  float _1142 = float((uint)(cb2_019w));
  float _1143 = _1141 + SV_Position.x;
  float _1144 = _1142 + SV_Position.y;
  uint _1145 = uint(_1143);
  uint _1146 = uint(_1144);
  uint _1149 = cb2_019x + -1u;
  uint _1150 = cb2_019y + -1u;
  int _1151 = _1145 & _1149;
  int _1152 = _1146 & _1150;
  float4 _1153 = t3.Load(int3(_1151, _1152, 0));
  float _1157 = _1153.x * 2.0f;
  float _1158 = _1153.y * 2.0f;
  float _1159 = _1153.z * 2.0f;
  float _1160 = _1157 + -1.0f;
  float _1161 = _1158 + -1.0f;
  float _1162 = _1159 + -1.0f;
  float _1163 = _1160 * _643;
  float _1164 = _1161 * _643;
  float _1165 = _1162 * _643;
  float _1166 = _1163 + _1135;
  float _1167 = _1164 + _1136;
  float _1168 = _1165 + _1137;
  float _1169 = dot(float3(_1166, _1167, _1168), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _1166;
  SV_Target.y = _1167;
  SV_Target.z = _1168;
  SV_Target.w = _1169;
  SV_Target_1.x = _1169;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
