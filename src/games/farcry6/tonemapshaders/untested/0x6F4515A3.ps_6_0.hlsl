#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _23 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _27 = _23.x * 6.283199787139893f;
  float _28 = cos(_27);
  float _29 = sin(_27);
  float _30 = _28 * _23.z;
  float _31 = _29 * _23.z;
  float _32 = _30 + TEXCOORD0_centroid.x;
  float _33 = _31 + TEXCOORD0_centroid.y;
  float _34 = _32 * 10.0f;
  float _35 = 10.0f - _34;
  float _36 = min(_34, _35);
  float _37 = saturate(_36);
  float _38 = _37 * _30;
  float _39 = _33 * 10.0f;
  float _40 = 10.0f - _39;
  float _41 = min(_39, _40);
  float _42 = saturate(_41);
  float _43 = _42 * _31;
  float _44 = _38 + TEXCOORD0_centroid.x;
  float _45 = _43 + TEXCOORD0_centroid.y;
  float4 _46 = t6.SampleLevel(s2_space2, float2(_44, _45), 0.0f);
  float _48 = _46.w * _38;
  float _49 = _46.w * _43;
  float _50 = 1.0f - _23.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _57 = cb2_015x * TEXCOORD0_centroid.x;
  float _58 = cb2_015y * TEXCOORD0_centroid.y;
  float _61 = _57 + cb2_015z;
  float _62 = _58 + cb2_015w;
  float4 _63 = t7.SampleLevel(s0_space2, float2(_61, _62), 0.0f);
  float _67 = saturate(_63.x);
  float _68 = saturate(_63.z);
  float _71 = cb2_026x * _68;
  float _72 = _67 * 6.283199787139893f;
  float _73 = cos(_72);
  float _74 = sin(_72);
  float _75 = _71 * _73;
  float _76 = _74 * _71;
  float _77 = 1.0f - _63.y;
  float _78 = saturate(_77);
  float _79 = _75 * _78;
  float _80 = _76 * _78;
  float _81 = _52 + TEXCOORD0_centroid.x;
  float _82 = _81 + _79;
  float _83 = _53 + TEXCOORD0_centroid.y;
  float _84 = _83 + _80;
  float4 _85 = t6.SampleLevel(s2_space2, float2(_82, _84), 0.0f);
  bool _87 = (_85.y > 0.0f);
  float _88 = select(_87, TEXCOORD0_centroid.x, _82);
  float _89 = select(_87, TEXCOORD0_centroid.y, _84);
  float4 _90 = t1.SampleLevel(s4_space2, float2(_88, _89), 0.0f);
  float _94 = max(_90.x, 0.0f);
  float _95 = max(_90.y, 0.0f);
  float _96 = max(_90.z, 0.0f);
  float _97 = min(_94, 65000.0f);
  float _98 = min(_95, 65000.0f);
  float _99 = min(_96, 65000.0f);
  float4 _100 = t3.SampleLevel(s2_space2, float2(_88, _89), 0.0f);
  float _105 = max(_100.x, 0.0f);
  float _106 = max(_100.y, 0.0f);
  float _107 = max(_100.z, 0.0f);
  float _108 = max(_100.w, 0.0f);
  float _109 = min(_105, 5000.0f);
  float _110 = min(_106, 5000.0f);
  float _111 = min(_107, 5000.0f);
  float _112 = min(_108, 5000.0f);
  float _115 = _21.x * cb0_028z;
  float _116 = _115 + cb0_028x;
  float _117 = cb2_027w / _116;
  float _118 = 1.0f - _117;
  float _119 = abs(_118);
  float _121 = cb2_027y * _119;
  float _123 = _121 - cb2_027z;
  float _124 = saturate(_123);
  float _125 = max(_124, _112);
  float _126 = saturate(_125);
  float4 _127 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _131 = _109 - _97;
  float _132 = _110 - _98;
  float _133 = _111 - _99;
  float _134 = _126 * _131;
  float _135 = _126 * _132;
  float _136 = _126 * _133;
  float _137 = _134 + _97;
  float _138 = _135 + _98;
  float _139 = _136 + _99;
  float _140 = dot(float3(_137, _138, _139), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _144 = t0[0].SExposureData_020;
  float _146 = t0[0].SExposureData_004;
  float _148 = cb2_018x * 0.5f;
  float _149 = _148 * cb2_018y;
  float _150 = _146.x - _149;
  float _151 = cb2_018y * cb2_018x;
  float _152 = 1.0f / _151;
  float _153 = _150 * _152;
  float _154 = _140 / _144.x;
  float _155 = _154 * 5464.01611328125f;
  float _156 = _155 + 9.99999993922529e-09f;
  float _157 = log2(_156);
  float _158 = _157 - _150;
  float _159 = _158 * _152;
  float _160 = saturate(_159);
  float2 _161 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _160), 0.0f);
  float _164 = max(_161.y, 1.0000000116860974e-07f);
  float _165 = _161.x / _164;
  float _166 = _165 + _153;
  float _167 = _166 / _152;
  float _168 = _167 - _146.x;
  float _169 = -0.0f - _168;
  float _171 = _169 - cb2_027x;
  float _172 = max(0.0f, _171);
  float _174 = cb2_026z * _172;
  float _175 = _168 - cb2_027x;
  float _176 = max(0.0f, _175);
  float _178 = cb2_026w * _176;
  bool _179 = (_168 < 0.0f);
  float _180 = select(_179, _174, _178);
  float _181 = exp2(_180);
  float _182 = _181 * _137;
  float _183 = _181 * _138;
  float _184 = _181 * _139;
  float _189 = cb2_024y * _127.x;
  float _190 = cb2_024z * _127.y;
  float _191 = cb2_024w * _127.z;
  float _192 = _189 + _182;
  float _193 = _190 + _183;
  float _194 = _191 + _184;
  float _199 = _192 * cb2_025x;
  float _200 = _193 * cb2_025y;
  float _201 = _194 * cb2_025z;
  float _202 = dot(float3(_199, _200, _201), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _203 = t0[0].SExposureData_012;
  float _205 = _202 * 5464.01611328125f;
  float _206 = _205 * _203.x;
  float _207 = _206 + 9.99999993922529e-09f;
  float _208 = log2(_207);
  float _209 = _208 + 16.929765701293945f;
  float _210 = _209 * 0.05734497308731079f;
  float _211 = saturate(_210);
  float _212 = _211 * _211;
  float _213 = _211 * 2.0f;
  float _214 = 3.0f - _213;
  float _215 = _212 * _214;
  float _216 = _200 * 0.8450999855995178f;
  float _217 = _201 * 0.14589999616146088f;
  float _218 = _216 + _217;
  float _219 = _218 * 2.4890189170837402f;
  float _220 = _218 * 0.3754962384700775f;
  float _221 = _218 * 2.811495304107666f;
  float _222 = _218 * 5.519708156585693f;
  float _223 = _202 - _219;
  float _224 = _215 * _223;
  float _225 = _224 + _219;
  float _226 = _215 * 0.5f;
  float _227 = _226 + 0.5f;
  float _228 = _227 * _223;
  float _229 = _228 + _219;
  float _230 = _199 - _220;
  float _231 = _200 - _221;
  float _232 = _201 - _222;
  float _233 = _227 * _230;
  float _234 = _227 * _231;
  float _235 = _227 * _232;
  float _236 = _233 + _220;
  float _237 = _234 + _221;
  float _238 = _235 + _222;
  float _239 = 1.0f / _229;
  float _240 = _225 * _239;
  float _241 = _240 * _236;
  float _242 = _240 * _237;
  float _243 = _240 * _238;
  float _247 = cb2_020x * TEXCOORD0_centroid.x;
  float _248 = cb2_020y * TEXCOORD0_centroid.y;
  float _251 = _247 + cb2_020z;
  float _252 = _248 + cb2_020w;
  float _255 = dot(float2(_251, _252), float2(_251, _252));
  float _256 = 1.0f - _255;
  float _257 = saturate(_256);
  float _258 = log2(_257);
  float _259 = _258 * cb2_021w;
  float _260 = exp2(_259);
  float _264 = _241 - cb2_021x;
  float _265 = _242 - cb2_021y;
  float _266 = _243 - cb2_021z;
  float _267 = _264 * _260;
  float _268 = _265 * _260;
  float _269 = _266 * _260;
  float _270 = _267 + cb2_021x;
  float _271 = _268 + cb2_021y;
  float _272 = _269 + cb2_021z;
  float _273 = t0[0].SExposureData_000;
  float _275 = max(_144.x, 0.0010000000474974513f);
  float _276 = 1.0f / _275;
  float _277 = _276 * _273.x;
  bool _280 = ((uint)(cb2_069y) == 0);
  float _286;
  float _287;
  float _288;
  float _342;
  float _343;
  float _344;
  float _374;
  float _375;
  float _376;
  float _526;
  float _563;
  float _564;
  float _565;
  float _594;
  float _595;
  float _596;
  float _677;
  float _678;
  float _679;
  float _685;
  float _686;
  float _687;
  float _701;
  float _702;
  float _703;
  float _728;
  float _740;
  float _768;
  float _780;
  float _792;
  float _793;
  float _794;
  float _821;
  float _822;
  float _823;
  if (!_280) {
    float _282 = _277 * _270;
    float _283 = _277 * _271;
    float _284 = _277 * _272;
    _286 = _282;
    _287 = _283;
    _288 = _284;
  } else {
    _286 = _270;
    _287 = _271;
    _288 = _272;
  }
  float _289 = _286 * 0.6130970120429993f;
  float _290 = mad(0.33952298760414124f, _287, _289);
  float _291 = mad(0.04737899824976921f, _288, _290);
  float _292 = _286 * 0.07019399851560593f;
  float _293 = mad(0.9163540005683899f, _287, _292);
  float _294 = mad(0.013451999984681606f, _288, _293);
  float _295 = _286 * 0.02061600051820278f;
  float _296 = mad(0.10956999659538269f, _287, _295);
  float _297 = mad(0.8698149919509888f, _288, _296);
  float _298 = log2(_291);
  float _299 = log2(_294);
  float _300 = log2(_297);
  float _301 = _298 * 0.04211956635117531f;
  float _302 = _299 * 0.04211956635117531f;
  float _303 = _300 * 0.04211956635117531f;
  float _304 = _301 + 0.6252607107162476f;
  float _305 = _302 + 0.6252607107162476f;
  float _306 = _303 + 0.6252607107162476f;
  float4 _307 = t5.SampleLevel(s2_space2, float3(_304, _305, _306), 0.0f);
  bool _313 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_313 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _317 = cb2_017x * _307.x;
    float _318 = cb2_017x * _307.y;
    float _319 = cb2_017x * _307.z;
    float _321 = _317 + cb2_017y;
    float _322 = _318 + cb2_017y;
    float _323 = _319 + cb2_017y;
    float _324 = exp2(_321);
    float _325 = exp2(_322);
    float _326 = exp2(_323);
    float _327 = _324 + 1.0f;
    float _328 = _325 + 1.0f;
    float _329 = _326 + 1.0f;
    float _330 = 1.0f / _327;
    float _331 = 1.0f / _328;
    float _332 = 1.0f / _329;
    float _334 = cb2_017z * _330;
    float _335 = cb2_017z * _331;
    float _336 = cb2_017z * _332;
    float _338 = _334 + cb2_017w;
    float _339 = _335 + cb2_017w;
    float _340 = _336 + cb2_017w;
    _342 = _338;
    _343 = _339;
    _344 = _340;
  } else {
    _342 = _307.x;
    _343 = _307.y;
    _344 = _307.z;
  }
  float _345 = _342 * 23.0f;
  float _346 = _345 + -14.473931312561035f;
  float _347 = exp2(_346);
  float _348 = _343 * 23.0f;
  float _349 = _348 + -14.473931312561035f;
  float _350 = exp2(_349);
  float _351 = _344 * 23.0f;
  float _352 = _351 + -14.473931312561035f;
  float _353 = exp2(_352);
  float _359 = cb2_016x - _347;
  float _360 = cb2_016y - _350;
  float _361 = cb2_016z - _353;
  float _362 = _359 * cb2_016w;
  float _363 = _360 * cb2_016w;
  float _364 = _361 * cb2_016w;
  float _365 = _362 + _347;
  float _366 = _363 + _350;
  float _367 = _364 + _353;
  if (_313 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _370 = cb2_024x * _365;
    float _371 = cb2_024x * _366;
    float _372 = cb2_024x * _367;
    _374 = _370;
    _375 = _371;
    _376 = _372;
  } else {
    _374 = _365;
    _375 = _366;
    _376 = _367;
  }
  float _379 = _374 * 0.9708889722824097f;
  float _380 = mad(0.026962999254465103f, _375, _379);
  float _381 = mad(0.002148000057786703f, _376, _380);
  float _382 = _374 * 0.01088900025933981f;
  float _383 = mad(0.9869629740715027f, _375, _382);
  float _384 = mad(0.002148000057786703f, _376, _383);
  float _385 = mad(0.026962999254465103f, _375, _382);
  float _386 = mad(0.9621480107307434f, _376, _385);
  float _387 = max(_381, 0.0f);
  float _388 = max(_384, 0.0f);
  float _389 = max(_386, 0.0f);
  float _390 = min(_387, cb2_095y);
  float _391 = min(_388, cb2_095y);
  float _392 = min(_389, cb2_095y);
  bool _395 = ((uint)(cb2_095x) == 0);
  bool _398 = ((uint)(cb2_094w) == 0);
  bool _400 = ((uint)(cb2_094z) == 0);
  bool _402 = ((uint)(cb2_094y) != 0);
  bool _404 = ((uint)(cb2_094x) == 0);
  bool _406 = ((uint)(cb2_069z) != 0);
  float _453 = asfloat((uint)(cb2_075y));
  float _454 = asfloat((uint)(cb2_075z));
  float _455 = asfloat((uint)(cb2_075w));
  float _456 = asfloat((uint)(cb2_074z));
  float _457 = asfloat((uint)(cb2_074w));
  float _458 = asfloat((uint)(cb2_075x));
  float _459 = asfloat((uint)(cb2_073w));
  float _460 = asfloat((uint)(cb2_074x));
  float _461 = asfloat((uint)(cb2_074y));
  float _462 = asfloat((uint)(cb2_077x));
  float _463 = asfloat((uint)(cb2_077y));
  float _464 = asfloat((uint)(cb2_079x));
  float _465 = asfloat((uint)(cb2_079y));
  float _466 = asfloat((uint)(cb2_079z));
  float _467 = asfloat((uint)(cb2_078y));
  float _468 = asfloat((uint)(cb2_078z));
  float _469 = asfloat((uint)(cb2_078w));
  float _470 = asfloat((uint)(cb2_077z));
  float _471 = asfloat((uint)(cb2_077w));
  float _472 = asfloat((uint)(cb2_078x));
  float _473 = asfloat((uint)(cb2_072y));
  float _474 = asfloat((uint)(cb2_072z));
  float _475 = asfloat((uint)(cb2_072w));
  float _476 = asfloat((uint)(cb2_071x));
  float _477 = asfloat((uint)(cb2_071y));
  float _478 = asfloat((uint)(cb2_076x));
  float _479 = asfloat((uint)(cb2_070w));
  float _480 = asfloat((uint)(cb2_070x));
  float _481 = asfloat((uint)(cb2_070y));
  float _482 = asfloat((uint)(cb2_070z));
  float _483 = asfloat((uint)(cb2_073x));
  float _484 = asfloat((uint)(cb2_073y));
  float _485 = asfloat((uint)(cb2_073z));
  float _486 = asfloat((uint)(cb2_071z));
  float _487 = asfloat((uint)(cb2_071w));
  float _488 = asfloat((uint)(cb2_072x));
  float _489 = max(_391, _392);
  float _490 = max(_390, _489);
  float _491 = 1.0f / _490;
  float _492 = _491 * _390;
  float _493 = _491 * _391;
  float _494 = _491 * _392;
  float _495 = abs(_492);
  float _496 = log2(_495);
  float _497 = _496 * _480;
  float _498 = exp2(_497);
  float _499 = abs(_493);
  float _500 = log2(_499);
  float _501 = _500 * _481;
  float _502 = exp2(_501);
  float _503 = abs(_494);
  float _504 = log2(_503);
  float _505 = _504 * _482;
  float _506 = exp2(_505);
  if (_402) {
    float _509 = asfloat((uint)(cb2_076w));
    float _511 = asfloat((uint)(cb2_076z));
    float _513 = asfloat((uint)(cb2_076y));
    float _514 = _511 * _391;
    float _515 = _513 * _390;
    float _516 = _509 * _392;
    float _517 = _515 + _516;
    float _518 = _517 + _514;
    _526 = _518;
  } else {
    float _520 = _487 * _391;
    float _521 = _486 * _390;
    float _522 = _488 * _392;
    float _523 = _520 + _521;
    float _524 = _523 + _522;
    _526 = _524;
  }
  float _527 = abs(_526);
  float _528 = log2(_527);
  float _529 = _528 * _479;
  float _530 = exp2(_529);
  float _531 = log2(_530);
  float _532 = _531 * _478;
  float _533 = exp2(_532);
  float _534 = select(_406, _533, _530);
  float _535 = _534 * _476;
  float _536 = _535 + _477;
  float _537 = 1.0f / _536;
  float _538 = _537 * _530;
  if (_402) {
    if (!_404) {
      float _541 = _498 * _470;
      float _542 = _502 * _471;
      float _543 = _506 * _472;
      float _544 = _542 + _541;
      float _545 = _544 + _543;
      float _546 = _502 * _468;
      float _547 = _498 * _467;
      float _548 = _506 * _469;
      float _549 = _546 + _547;
      float _550 = _549 + _548;
      float _551 = _506 * _466;
      float _552 = _502 * _465;
      float _553 = _498 * _464;
      float _554 = _552 + _553;
      float _555 = _554 + _551;
      float _556 = max(_550, _555);
      float _557 = max(_545, _556);
      float _558 = 1.0f / _557;
      float _559 = _558 * _545;
      float _560 = _558 * _550;
      float _561 = _558 * _555;
      _563 = _559;
      _564 = _560;
      _565 = _561;
    } else {
      _563 = _498;
      _564 = _502;
      _565 = _506;
    }
    float _566 = _563 * _463;
    float _567 = exp2(_566);
    float _568 = _567 * _462;
    float _569 = saturate(_568);
    float _570 = _563 * _462;
    float _571 = _563 - _570;
    float _572 = saturate(_571);
    float _573 = max(_462, _572);
    float _574 = min(_573, _569);
    float _575 = _564 * _463;
    float _576 = exp2(_575);
    float _577 = _576 * _462;
    float _578 = saturate(_577);
    float _579 = _564 * _462;
    float _580 = _564 - _579;
    float _581 = saturate(_580);
    float _582 = max(_462, _581);
    float _583 = min(_582, _578);
    float _584 = _565 * _463;
    float _585 = exp2(_584);
    float _586 = _585 * _462;
    float _587 = saturate(_586);
    float _588 = _565 * _462;
    float _589 = _565 - _588;
    float _590 = saturate(_589);
    float _591 = max(_462, _590);
    float _592 = min(_591, _587);
    _594 = _574;
    _595 = _583;
    _596 = _592;
  } else {
    _594 = _498;
    _595 = _502;
    _596 = _506;
  }
  float _597 = _594 * _486;
  float _598 = _595 * _487;
  float _599 = _598 + _597;
  float _600 = _596 * _488;
  float _601 = _599 + _600;
  float _602 = 1.0f / _601;
  float _603 = _602 * _538;
  float _604 = saturate(_603);
  float _605 = _604 * _594;
  float _606 = saturate(_605);
  float _607 = _604 * _595;
  float _608 = saturate(_607);
  float _609 = _604 * _596;
  float _610 = saturate(_609);
  float _611 = _606 * _473;
  float _612 = _473 - _611;
  float _613 = _608 * _474;
  float _614 = _474 - _613;
  float _615 = _610 * _475;
  float _616 = _475 - _615;
  float _617 = _610 * _488;
  float _618 = _606 * _486;
  float _619 = _608 * _487;
  float _620 = _538 - _618;
  float _621 = _620 - _619;
  float _622 = _621 - _617;
  float _623 = saturate(_622);
  float _624 = _614 * _487;
  float _625 = _612 * _486;
  float _626 = _616 * _488;
  float _627 = _624 + _625;
  float _628 = _627 + _626;
  float _629 = 1.0f / _628;
  float _630 = _629 * _623;
  float _631 = _630 * _612;
  float _632 = _631 + _606;
  float _633 = saturate(_632);
  float _634 = _630 * _614;
  float _635 = _634 + _608;
  float _636 = saturate(_635);
  float _637 = _630 * _616;
  float _638 = _637 + _610;
  float _639 = saturate(_638);
  float _640 = _639 * _488;
  float _641 = _633 * _486;
  float _642 = _636 * _487;
  float _643 = _538 - _641;
  float _644 = _643 - _642;
  float _645 = _644 - _640;
  float _646 = saturate(_645);
  float _647 = _646 * _483;
  float _648 = _647 + _633;
  float _649 = saturate(_648);
  float _650 = _646 * _484;
  float _651 = _650 + _636;
  float _652 = saturate(_651);
  float _653 = _646 * _485;
  float _654 = _653 + _639;
  float _655 = saturate(_654);
  if (!_400) {
    float _657 = _649 * _459;
    float _658 = _652 * _460;
    float _659 = _655 * _461;
    float _660 = _658 + _657;
    float _661 = _660 + _659;
    float _662 = _652 * _457;
    float _663 = _649 * _456;
    float _664 = _655 * _458;
    float _665 = _662 + _663;
    float _666 = _665 + _664;
    float _667 = _655 * _455;
    float _668 = _652 * _454;
    float _669 = _649 * _453;
    float _670 = _668 + _669;
    float _671 = _670 + _667;
    if (!_398) {
      float _673 = saturate(_661);
      float _674 = saturate(_666);
      float _675 = saturate(_671);
      _677 = _675;
      _678 = _674;
      _679 = _673;
    } else {
      _677 = _671;
      _678 = _666;
      _679 = _661;
    }
  } else {
    _677 = _655;
    _678 = _652;
    _679 = _649;
  }
  if (!_395) {
    float _681 = _679 * _459;
    float _682 = _678 * _459;
    float _683 = _677 * _459;
    _685 = _683;
    _686 = _682;
    _687 = _681;
  } else {
    _685 = _677;
    _686 = _678;
    _687 = _679;
  }
  if (_313) {
    float _691 = cb1_018z * 9.999999747378752e-05f;
    float _692 = _691 * _687;
    float _693 = _691 * _686;
    float _694 = _691 * _685;
    float _696 = 5000.0f / cb1_018y;
    float _697 = _692 * _696;
    float _698 = _693 * _696;
    float _699 = _694 * _696;
    _701 = _697;
    _702 = _698;
    _703 = _699;
  } else {
    _701 = _687;
    _702 = _686;
    _703 = _685;
  }
  float _704 = _701 * 1.6047500371932983f;
  float _705 = mad(-0.5310800075531006f, _702, _704);
  float _706 = mad(-0.07366999983787537f, _703, _705);
  float _707 = _701 * -0.10208000242710114f;
  float _708 = mad(1.1081299781799316f, _702, _707);
  float _709 = mad(-0.006049999967217445f, _703, _708);
  float _710 = _701 * -0.0032599999103695154f;
  float _711 = mad(-0.07275000214576721f, _702, _710);
  float _712 = mad(1.0760200023651123f, _703, _711);
  if (_313) {
    // float _714 = max(_706, 0.0f);
    // float _715 = max(_709, 0.0f);
    // float _716 = max(_712, 0.0f);
    // bool _717 = !(_714 >= 0.0030399328097701073f);
    // if (!_717) {
    //   float _719 = abs(_714);
    //   float _720 = log2(_719);
    //   float _721 = _720 * 0.4166666567325592f;
    //   float _722 = exp2(_721);
    //   float _723 = _722 * 1.0549999475479126f;
    //   float _724 = _723 + -0.054999999701976776f;
    //   _728 = _724;
    // } else {
    //   float _726 = _714 * 12.923210144042969f;
    //   _728 = _726;
    // }
    // bool _729 = !(_715 >= 0.0030399328097701073f);
    // if (!_729) {
    //   float _731 = abs(_715);
    //   float _732 = log2(_731);
    //   float _733 = _732 * 0.4166666567325592f;
    //   float _734 = exp2(_733);
    //   float _735 = _734 * 1.0549999475479126f;
    //   float _736 = _735 + -0.054999999701976776f;
    //   _740 = _736;
    // } else {
    //   float _738 = _715 * 12.923210144042969f;
    //   _740 = _738;
    // }
    // bool _741 = !(_716 >= 0.0030399328097701073f);
    // if (!_741) {
    //   float _743 = abs(_716);
    //   float _744 = log2(_743);
    //   float _745 = _744 * 0.4166666567325592f;
    //   float _746 = exp2(_745);
    //   float _747 = _746 * 1.0549999475479126f;
    //   float _748 = _747 + -0.054999999701976776f;
    //   _821 = _728;
    //   _822 = _740;
    //   _823 = _748;
    // } else {
    //   float _750 = _716 * 12.923210144042969f;
    //   _821 = _728;
    //   _822 = _740;
    //   _823 = _750;
    // }
    _821 = renodx::color::srgb::EncodeSafe(_706);
    _822 = renodx::color::srgb::EncodeSafe(_709);
    _823 = renodx::color::srgb::EncodeSafe(_712);

  } else {
    float _752 = saturate(_706);
    float _753 = saturate(_709);
    float _754 = saturate(_712);
    bool _755 = ((uint)(cb1_018w) == -2);
    if (!_755) {
      bool _757 = !(_752 >= 0.0030399328097701073f);
      if (!_757) {
        float _759 = abs(_752);
        float _760 = log2(_759);
        float _761 = _760 * 0.4166666567325592f;
        float _762 = exp2(_761);
        float _763 = _762 * 1.0549999475479126f;
        float _764 = _763 + -0.054999999701976776f;
        _768 = _764;
      } else {
        float _766 = _752 * 12.923210144042969f;
        _768 = _766;
      }
      bool _769 = !(_753 >= 0.0030399328097701073f);
      if (!_769) {
        float _771 = abs(_753);
        float _772 = log2(_771);
        float _773 = _772 * 0.4166666567325592f;
        float _774 = exp2(_773);
        float _775 = _774 * 1.0549999475479126f;
        float _776 = _775 + -0.054999999701976776f;
        _780 = _776;
      } else {
        float _778 = _753 * 12.923210144042969f;
        _780 = _778;
      }
      bool _781 = !(_754 >= 0.0030399328097701073f);
      if (!_781) {
        float _783 = abs(_754);
        float _784 = log2(_783);
        float _785 = _784 * 0.4166666567325592f;
        float _786 = exp2(_785);
        float _787 = _786 * 1.0549999475479126f;
        float _788 = _787 + -0.054999999701976776f;
        _792 = _768;
        _793 = _780;
        _794 = _788;
      } else {
        float _790 = _754 * 12.923210144042969f;
        _792 = _768;
        _793 = _780;
        _794 = _790;
      }
    } else {
      _792 = _752;
      _793 = _753;
      _794 = _754;
    }
    float _799 = abs(_792);
    float _800 = abs(_793);
    float _801 = abs(_794);
    float _802 = log2(_799);
    float _803 = log2(_800);
    float _804 = log2(_801);
    float _805 = _802 * cb2_000z;
    float _806 = _803 * cb2_000z;
    float _807 = _804 * cb2_000z;
    float _808 = exp2(_805);
    float _809 = exp2(_806);
    float _810 = exp2(_807);
    float _811 = _808 * cb2_000y;
    float _812 = _809 * cb2_000y;
    float _813 = _810 * cb2_000y;
    float _814 = _811 + cb2_000x;
    float _815 = _812 + cb2_000x;
    float _816 = _813 + cb2_000x;
    float _817 = saturate(_814);
    float _818 = saturate(_815);
    float _819 = saturate(_816);
    _821 = _817;
    _822 = _818;
    _823 = _819;
  }
  float _824 = dot(float3(_821, _822, _823), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _821;
  SV_Target.y = _822;
  SV_Target.z = _823;
  SV_Target.w = _824;
  SV_Target_1.x = _824;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
