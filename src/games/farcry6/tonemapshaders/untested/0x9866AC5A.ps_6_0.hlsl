#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture3D<float2> t6 : register(t6);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _18 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _20 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _24 = max(_20.x, 0.0f);
  float _25 = max(_20.y, 0.0f);
  float _26 = max(_20.z, 0.0f);
  float _27 = min(_24, 65000.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float4 _30 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _35 = max(_30.x, 0.0f);
  float _36 = max(_30.y, 0.0f);
  float _37 = max(_30.z, 0.0f);
  float _38 = max(_30.w, 0.0f);
  float _39 = min(_35, 5000.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _45 = _18.x * cb0_028z;
  float _46 = _45 + cb0_028x;
  float _47 = cb2_027w / _46;
  float _48 = 1.0f - _47;
  float _49 = abs(_48);
  float _51 = cb2_027y * _49;
  float _53 = _51 - cb2_027z;
  float _54 = saturate(_53);
  float _55 = max(_54, _42);
  float _56 = saturate(_55);
  float _60 = cb2_013x * TEXCOORD0_centroid.x;
  float _61 = cb2_013y * TEXCOORD0_centroid.y;
  float _64 = _60 + cb2_013z;
  float _65 = _61 + cb2_013w;
  float _68 = dot(float2(_64, _65), float2(_64, _65));
  float _69 = abs(_68);
  float _70 = log2(_69);
  float _71 = _70 * cb2_014x;
  float _72 = exp2(_71);
  float _73 = saturate(_72);
  float _77 = cb2_011x * TEXCOORD0_centroid.x;
  float _78 = cb2_011y * TEXCOORD0_centroid.y;
  float _81 = _77 + cb2_011z;
  float _82 = _78 + cb2_011w;
  float _83 = _81 * _73;
  float _84 = _82 * _73;
  float _85 = _83 + TEXCOORD0_centroid.x;
  float _86 = _84 + TEXCOORD0_centroid.y;
  float _90 = cb2_012x * TEXCOORD0_centroid.x;
  float _91 = cb2_012y * TEXCOORD0_centroid.y;
  float _94 = _90 + cb2_012z;
  float _95 = _91 + cb2_012w;
  float _96 = _94 * _73;
  float _97 = _95 * _73;
  float _98 = _96 + TEXCOORD0_centroid.x;
  float _99 = _97 + TEXCOORD0_centroid.y;
  float4 _100 = t1.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _104 = max(_100.x, 0.0f);
  float _105 = max(_100.y, 0.0f);
  float _106 = max(_100.z, 0.0f);
  float _107 = min(_104, 65000.0f);
  float _108 = min(_105, 65000.0f);
  float _109 = min(_106, 65000.0f);
  float4 _110 = t1.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _114 = max(_110.x, 0.0f);
  float _115 = max(_110.y, 0.0f);
  float _116 = max(_110.z, 0.0f);
  float _117 = min(_114, 65000.0f);
  float _118 = min(_115, 65000.0f);
  float _119 = min(_116, 65000.0f);
  float4 _120 = t3.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _124 = max(_120.x, 0.0f);
  float _125 = max(_120.y, 0.0f);
  float _126 = max(_120.z, 0.0f);
  float _127 = min(_124, 5000.0f);
  float _128 = min(_125, 5000.0f);
  float _129 = min(_126, 5000.0f);
  float4 _130 = t3.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _134 = max(_130.x, 0.0f);
  float _135 = max(_130.y, 0.0f);
  float _136 = max(_130.z, 0.0f);
  float _137 = min(_134, 5000.0f);
  float _138 = min(_135, 5000.0f);
  float _139 = min(_136, 5000.0f);
  float _144 = 1.0f - cb2_009x;
  float _145 = 1.0f - cb2_009y;
  float _146 = 1.0f - cb2_009z;
  float _151 = _144 - cb2_010x;
  float _152 = _145 - cb2_010y;
  float _153 = _146 - cb2_010z;
  float _154 = saturate(_151);
  float _155 = saturate(_152);
  float _156 = saturate(_153);
  float _157 = _154 * _27;
  float _158 = _155 * _28;
  float _159 = _156 * _29;
  float _160 = cb2_009x * _107;
  float _161 = cb2_009y * _108;
  float _162 = cb2_009z * _109;
  float _163 = _160 + _157;
  float _164 = _161 + _158;
  float _165 = _162 + _159;
  float _166 = cb2_010x * _117;
  float _167 = cb2_010y * _118;
  float _168 = cb2_010z * _119;
  float _169 = _163 + _166;
  float _170 = _164 + _167;
  float _171 = _165 + _168;
  float _172 = _154 * _39;
  float _173 = _155 * _40;
  float _174 = _156 * _41;
  float _175 = cb2_009x * _127;
  float _176 = cb2_009y * _128;
  float _177 = cb2_009z * _129;
  float _178 = cb2_010x * _137;
  float _179 = cb2_010y * _138;
  float _180 = cb2_010z * _139;
  float4 _181 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _185 = _172 - _169;
  float _186 = _185 + _175;
  float _187 = _186 + _178;
  float _188 = _173 - _170;
  float _189 = _188 + _176;
  float _190 = _189 + _179;
  float _191 = _174 - _171;
  float _192 = _191 + _177;
  float _193 = _192 + _180;
  float _194 = _187 * _56;
  float _195 = _190 * _56;
  float _196 = _193 * _56;
  float _197 = _194 + _169;
  float _198 = _195 + _170;
  float _199 = _196 + _171;
  float _200 = dot(float3(_197, _198, _199), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _204 = t0[0].SExposureData_020;
  float _206 = t0[0].SExposureData_004;
  float _208 = cb2_018x * 0.5f;
  float _209 = _208 * cb2_018y;
  float _210 = _206.x - _209;
  float _211 = cb2_018y * cb2_018x;
  float _212 = 1.0f / _211;
  float _213 = _210 * _212;
  float _214 = _200 / _204.x;
  float _215 = _214 * 5464.01611328125f;
  float _216 = _215 + 9.99999993922529e-09f;
  float _217 = log2(_216);
  float _218 = _217 - _210;
  float _219 = _218 * _212;
  float _220 = saturate(_219);
  float2 _221 = t6.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _220), 0.0f);
  float _224 = max(_221.y, 1.0000000116860974e-07f);
  float _225 = _221.x / _224;
  float _226 = _225 + _213;
  float _227 = _226 / _212;
  float _228 = _227 - _206.x;
  float _229 = -0.0f - _228;
  float _231 = _229 - cb2_027x;
  float _232 = max(0.0f, _231);
  float _235 = cb2_026z * _232;
  float _236 = _228 - cb2_027x;
  float _237 = max(0.0f, _236);
  float _239 = cb2_026w * _237;
  bool _240 = (_228 < 0.0f);
  float _241 = select(_240, _235, _239);
  float _242 = exp2(_241);
  float _243 = _242 * _197;
  float _244 = _242 * _198;
  float _245 = _242 * _199;
  float _250 = cb2_024y * _181.x;
  float _251 = cb2_024z * _181.y;
  float _252 = cb2_024w * _181.z;
  float _253 = _250 + _243;
  float _254 = _251 + _244;
  float _255 = _252 + _245;
  float _260 = _253 * cb2_025x;
  float _261 = _254 * cb2_025y;
  float _262 = _255 * cb2_025z;
  float _263 = dot(float3(_260, _261, _262), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _264 = t0[0].SExposureData_012;
  float _266 = _263 * 5464.01611328125f;
  float _267 = _266 * _264.x;
  float _268 = _267 + 9.99999993922529e-09f;
  float _269 = log2(_268);
  float _270 = _269 + 16.929765701293945f;
  float _271 = _270 * 0.05734497308731079f;
  float _272 = saturate(_271);
  float _273 = _272 * _272;
  float _274 = _272 * 2.0f;
  float _275 = 3.0f - _274;
  float _276 = _273 * _275;
  float _277 = _261 * 0.8450999855995178f;
  float _278 = _262 * 0.14589999616146088f;
  float _279 = _277 + _278;
  float _280 = _279 * 2.4890189170837402f;
  float _281 = _279 * 0.3754962384700775f;
  float _282 = _279 * 2.811495304107666f;
  float _283 = _279 * 5.519708156585693f;
  float _284 = _263 - _280;
  float _285 = _276 * _284;
  float _286 = _285 + _280;
  float _287 = _276 * 0.5f;
  float _288 = _287 + 0.5f;
  float _289 = _288 * _284;
  float _290 = _289 + _280;
  float _291 = _260 - _281;
  float _292 = _261 - _282;
  float _293 = _262 - _283;
  float _294 = _288 * _291;
  float _295 = _288 * _292;
  float _296 = _288 * _293;
  float _297 = _294 + _281;
  float _298 = _295 + _282;
  float _299 = _296 + _283;
  float _300 = 1.0f / _290;
  float _301 = _286 * _300;
  float _302 = _301 * _297;
  float _303 = _301 * _298;
  float _304 = _301 * _299;
  float _308 = cb2_020x * TEXCOORD0_centroid.x;
  float _309 = cb2_020y * TEXCOORD0_centroid.y;
  float _312 = _308 + cb2_020z;
  float _313 = _309 + cb2_020w;
  float _316 = dot(float2(_312, _313), float2(_312, _313));
  float _317 = 1.0f - _316;
  float _318 = saturate(_317);
  float _319 = log2(_318);
  float _320 = _319 * cb2_021w;
  float _321 = exp2(_320);
  float _325 = _302 - cb2_021x;
  float _326 = _303 - cb2_021y;
  float _327 = _304 - cb2_021z;
  float _328 = _325 * _321;
  float _329 = _326 * _321;
  float _330 = _327 * _321;
  float _331 = _328 + cb2_021x;
  float _332 = _329 + cb2_021y;
  float _333 = _330 + cb2_021z;
  float _334 = t0[0].SExposureData_000;
  float _336 = max(_204.x, 0.0010000000474974513f);
  float _337 = 1.0f / _336;
  float _338 = _337 * _334.x;
  bool _341 = ((uint)(cb2_069y) == 0);
  float _347;
  float _348;
  float _349;
  float _403;
  float _404;
  float _405;
  float _435;
  float _436;
  float _437;
  float _538;
  float _539;
  float _540;
  float _565;
  float _577;
  float _605;
  float _617;
  float _629;
  float _630;
  float _631;
  float _658;
  float _659;
  float _660;
  if (!_341) {
    float _343 = _338 * _331;
    float _344 = _338 * _332;
    float _345 = _338 * _333;
    _347 = _343;
    _348 = _344;
    _349 = _345;
  } else {
    _347 = _331;
    _348 = _332;
    _349 = _333;
  }
  float _350 = _347 * 0.6130970120429993f;
  float _351 = mad(0.33952298760414124f, _348, _350);
  float _352 = mad(0.04737899824976921f, _349, _351);
  float _353 = _347 * 0.07019399851560593f;
  float _354 = mad(0.9163540005683899f, _348, _353);
  float _355 = mad(0.013451999984681606f, _349, _354);
  float _356 = _347 * 0.02061600051820278f;
  float _357 = mad(0.10956999659538269f, _348, _356);
  float _358 = mad(0.8698149919509888f, _349, _357);
  float _359 = log2(_352);
  float _360 = log2(_355);
  float _361 = log2(_358);
  float _362 = _359 * 0.04211956635117531f;
  float _363 = _360 * 0.04211956635117531f;
  float _364 = _361 * 0.04211956635117531f;
  float _365 = _362 + 0.6252607107162476f;
  float _366 = _363 + 0.6252607107162476f;
  float _367 = _364 + 0.6252607107162476f;
  float4 _368 = t5.SampleLevel(s2_space2, float3(_365, _366, _367), 0.0f);
  bool _374 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _378 = cb2_017x * _368.x;
    float _379 = cb2_017x * _368.y;
    float _380 = cb2_017x * _368.z;
    float _382 = _378 + cb2_017y;
    float _383 = _379 + cb2_017y;
    float _384 = _380 + cb2_017y;
    float _385 = exp2(_382);
    float _386 = exp2(_383);
    float _387 = exp2(_384);
    float _388 = _385 + 1.0f;
    float _389 = _386 + 1.0f;
    float _390 = _387 + 1.0f;
    float _391 = 1.0f / _388;
    float _392 = 1.0f / _389;
    float _393 = 1.0f / _390;
    float _395 = cb2_017z * _391;
    float _396 = cb2_017z * _392;
    float _397 = cb2_017z * _393;
    float _399 = _395 + cb2_017w;
    float _400 = _396 + cb2_017w;
    float _401 = _397 + cb2_017w;
    _403 = _399;
    _404 = _400;
    _405 = _401;
  } else {
    _403 = _368.x;
    _404 = _368.y;
    _405 = _368.z;
  }
  float _406 = _403 * 23.0f;
  float _407 = _406 + -14.473931312561035f;
  float _408 = exp2(_407);
  float _409 = _404 * 23.0f;
  float _410 = _409 + -14.473931312561035f;
  float _411 = exp2(_410);
  float _412 = _405 * 23.0f;
  float _413 = _412 + -14.473931312561035f;
  float _414 = exp2(_413);
  float _420 = cb2_016x - _408;
  float _421 = cb2_016y - _411;
  float _422 = cb2_016z - _414;
  float _423 = _420 * cb2_016w;
  float _424 = _421 * cb2_016w;
  float _425 = _422 * cb2_016w;
  float _426 = _423 + _408;
  float _427 = _424 + _411;
  float _428 = _425 + _414;
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _431 = cb2_024x * _426;
    float _432 = cb2_024x * _427;
    float _433 = cb2_024x * _428;
    _435 = _431;
    _436 = _432;
    _437 = _433;
  } else {
    _435 = _426;
    _436 = _427;
    _437 = _428;
  }
  float _438 = _435 * 0.9708889722824097f;
  float _439 = mad(0.026962999254465103f, _436, _438);
  float _440 = mad(0.002148000057786703f, _437, _439);
  float _441 = _435 * 0.01088900025933981f;
  float _442 = mad(0.9869629740715027f, _436, _441);
  float _443 = mad(0.002148000057786703f, _437, _442);
  float _444 = mad(0.026962999254465103f, _436, _441);
  float _445 = mad(0.9621480107307434f, _437, _444);
  if (_374) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _450 = cb1_018y * 0.10000000149011612f;
        float _451 = log2(cb1_018z);
        float _452 = _451 + -13.287712097167969f;
        float _453 = _452 * 1.4929734468460083f;
        float _454 = _453 + 18.0f;
        float _455 = exp2(_454);
        float _456 = _455 * 0.18000000715255737f;
        float _457 = abs(_456);
        float _458 = log2(_457);
        float _459 = _458 * 1.5f;
        float _460 = exp2(_459);
        float _461 = _460 * _450;
        float _462 = _461 / cb1_018z;
        float _463 = _462 + -0.07636754959821701f;
        float _464 = _458 * 1.2750000953674316f;
        float _465 = exp2(_464);
        float _466 = _465 * 0.07636754959821701f;
        float _467 = cb1_018y * 0.011232397519052029f;
        float _468 = _467 * _460;
        float _469 = _468 / cb1_018z;
        float _470 = _466 - _469;
        float _471 = _465 + -0.11232396960258484f;
        float _472 = _471 * _450;
        float _473 = _472 / cb1_018z;
        float _474 = _473 * cb1_018z;
        float _475 = abs(_440);
        float _476 = abs(_443);
        float _477 = abs(_445);
        float _478 = log2(_475);
        float _479 = log2(_476);
        float _480 = log2(_477);
        float _481 = _478 * 1.5f;
        float _482 = _479 * 1.5f;
        float _483 = _480 * 1.5f;
        float _484 = exp2(_481);
        float _485 = exp2(_482);
        float _486 = exp2(_483);
        float _487 = _484 * _474;
        float _488 = _485 * _474;
        float _489 = _486 * _474;
        float _490 = _478 * 1.2750000953674316f;
        float _491 = _479 * 1.2750000953674316f;
        float _492 = _480 * 1.2750000953674316f;
        float _493 = exp2(_490);
        float _494 = exp2(_491);
        float _495 = exp2(_492);
        float _496 = _493 * _463;
        float _497 = _494 * _463;
        float _498 = _495 * _463;
        float _499 = _496 + _470;
        float _500 = _497 + _470;
        float _501 = _498 + _470;
        float _502 = _487 / _499;
        float _503 = _488 / _500;
        float _504 = _489 / _501;
        float _505 = _502 * 9.999999747378752e-05f;
        float _506 = _503 * 9.999999747378752e-05f;
        float _507 = _504 * 9.999999747378752e-05f;
        float _508 = 5000.0f / cb1_018y;
        float _509 = _505 * _508;
        float _510 = _506 * _508;
        float _511 = _507 * _508;
        _538 = _509;
        _539 = _510;
        _540 = _511;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_440, _443, _445));
      _538 = tonemapped.x, _539 = tonemapped.y, _540 = tonemapped.z;
    }
      } else {
        float _513 = _440 + 0.020616600289940834f;
        float _514 = _443 + 0.020616600289940834f;
        float _515 = _445 + 0.020616600289940834f;
        float _516 = _513 * _440;
        float _517 = _514 * _443;
        float _518 = _515 * _445;
        float _519 = _516 + -7.456949970219284e-05f;
        float _520 = _517 + -7.456949970219284e-05f;
        float _521 = _518 + -7.456949970219284e-05f;
        float _522 = _440 * 0.9837960004806519f;
        float _523 = _443 * 0.9837960004806519f;
        float _524 = _445 * 0.9837960004806519f;
        float _525 = _522 + 0.4336790144443512f;
        float _526 = _523 + 0.4336790144443512f;
        float _527 = _524 + 0.4336790144443512f;
        float _528 = _525 * _440;
        float _529 = _526 * _443;
        float _530 = _527 * _445;
        float _531 = _528 + 0.24617899954319f;
        float _532 = _529 + 0.24617899954319f;
        float _533 = _530 + 0.24617899954319f;
        float _534 = _519 / _531;
        float _535 = _520 / _532;
        float _536 = _521 / _533;
        _538 = _534;
        _539 = _535;
        _540 = _536;
      }
      float _541 = _538 * 1.6047500371932983f;
      float _542 = mad(-0.5310800075531006f, _539, _541);
      float _543 = mad(-0.07366999983787537f, _540, _542);
      float _544 = _538 * -0.10208000242710114f;
      float _545 = mad(1.1081299781799316f, _539, _544);
      float _546 = mad(-0.006049999967217445f, _540, _545);
      float _547 = _538 * -0.0032599999103695154f;
      float _548 = mad(-0.07275000214576721f, _539, _547);
      float _549 = mad(1.0760200023651123f, _540, _548);
      if (_374) {
        // float _551 = max(_543, 0.0f);
        // float _552 = max(_546, 0.0f);
        // float _553 = max(_549, 0.0f);
        // bool _554 = !(_551 >= 0.0030399328097701073f);
        // if (!_554) {
        //   float _556 = abs(_551);
        //   float _557 = log2(_556);
        //   float _558 = _557 * 0.4166666567325592f;
        //   float _559 = exp2(_558);
        //   float _560 = _559 * 1.0549999475479126f;
        //   float _561 = _560 + -0.054999999701976776f;
        //   _565 = _561;
        // } else {
        //   float _563 = _551 * 12.923210144042969f;
        //   _565 = _563;
        // }
        // bool _566 = !(_552 >= 0.0030399328097701073f);
        // if (!_566) {
        //   float _568 = abs(_552);
        //   float _569 = log2(_568);
        //   float _570 = _569 * 0.4166666567325592f;
        //   float _571 = exp2(_570);
        //   float _572 = _571 * 1.0549999475479126f;
        //   float _573 = _572 + -0.054999999701976776f;
        //   _577 = _573;
        // } else {
        //   float _575 = _552 * 12.923210144042969f;
        //   _577 = _575;
        // }
        // bool _578 = !(_553 >= 0.0030399328097701073f);
        // if (!_578) {
        //   float _580 = abs(_553);
        //   float _581 = log2(_580);
        //   float _582 = _581 * 0.4166666567325592f;
        //   float _583 = exp2(_582);
        //   float _584 = _583 * 1.0549999475479126f;
        //   float _585 = _584 + -0.054999999701976776f;
        //   _658 = _565;
        //   _659 = _577;
        //   _660 = _585;
        // } else {
        //   float _587 = _553 * 12.923210144042969f;
        //   _658 = _565;
        //   _659 = _577;
        //   _660 = _587;
        // }
        _658 = renodx::color::srgb::EncodeSafe(_543);
        _659 = renodx::color::srgb::EncodeSafe(_546);
        _660 = renodx::color::srgb::EncodeSafe(_549);

      } else {
        float _589 = saturate(_543);
        float _590 = saturate(_546);
        float _591 = saturate(_549);
        bool _592 = ((uint)(cb1_018w) == -2);
        if (!_592) {
          bool _594 = !(_589 >= 0.0030399328097701073f);
          if (!_594) {
            float _596 = abs(_589);
            float _597 = log2(_596);
            float _598 = _597 * 0.4166666567325592f;
            float _599 = exp2(_598);
            float _600 = _599 * 1.0549999475479126f;
            float _601 = _600 + -0.054999999701976776f;
            _605 = _601;
          } else {
            float _603 = _589 * 12.923210144042969f;
            _605 = _603;
          }
          bool _606 = !(_590 >= 0.0030399328097701073f);
          if (!_606) {
            float _608 = abs(_590);
            float _609 = log2(_608);
            float _610 = _609 * 0.4166666567325592f;
            float _611 = exp2(_610);
            float _612 = _611 * 1.0549999475479126f;
            float _613 = _612 + -0.054999999701976776f;
            _617 = _613;
          } else {
            float _615 = _590 * 12.923210144042969f;
            _617 = _615;
          }
          bool _618 = !(_591 >= 0.0030399328097701073f);
          if (!_618) {
            float _620 = abs(_591);
            float _621 = log2(_620);
            float _622 = _621 * 0.4166666567325592f;
            float _623 = exp2(_622);
            float _624 = _623 * 1.0549999475479126f;
            float _625 = _624 + -0.054999999701976776f;
            _629 = _605;
            _630 = _617;
            _631 = _625;
          } else {
            float _627 = _591 * 12.923210144042969f;
            _629 = _605;
            _630 = _617;
            _631 = _627;
          }
        } else {
          _629 = _589;
          _630 = _590;
          _631 = _591;
        }
        float _636 = abs(_629);
        float _637 = abs(_630);
        float _638 = abs(_631);
        float _639 = log2(_636);
        float _640 = log2(_637);
        float _641 = log2(_638);
        float _642 = _639 * cb2_000z;
        float _643 = _640 * cb2_000z;
        float _644 = _641 * cb2_000z;
        float _645 = exp2(_642);
        float _646 = exp2(_643);
        float _647 = exp2(_644);
        float _648 = _645 * cb2_000y;
        float _649 = _646 * cb2_000y;
        float _650 = _647 * cb2_000y;
        float _651 = _648 + cb2_000x;
        float _652 = _649 + cb2_000x;
        float _653 = _650 + cb2_000x;
        float _654 = saturate(_651);
        float _655 = saturate(_652);
        float _656 = saturate(_653);
        _658 = _654;
        _659 = _655;
        _660 = _656;
      }
      float _661 = dot(float3(_658, _659, _660), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _658;
      SV_Target.y = _659;
      SV_Target.z = _660;
      SV_Target.w = _661;
      SV_Target_1.x = _661;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
