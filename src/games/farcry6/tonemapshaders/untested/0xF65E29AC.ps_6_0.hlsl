#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

Texture2D<float4> t9 : register(t9);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _24 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = cb2_015x * TEXCOORD0_centroid.x;
  float _30 = cb2_015y * TEXCOORD0_centroid.y;
  float _33 = _29 + cb2_015z;
  float _34 = _30 + cb2_015w;
  float4 _35 = t7.SampleLevel(s0_space2, float2(_33, _34), 0.0f);
  float _39 = saturate(_35.x);
  float _40 = saturate(_35.z);
  float _43 = cb2_026x * _40;
  float _44 = _39 * 6.283199787139893f;
  float _45 = cos(_44);
  float _46 = sin(_44);
  float _47 = _43 * _45;
  float _48 = _46 * _43;
  float _49 = 1.0f - _35.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t1.SampleLevel(s4_space2, float2(_53, _54), 0.0f);
  float _59 = max(_55.x, 0.0f);
  float _60 = max(_55.y, 0.0f);
  float _61 = max(_55.z, 0.0f);
  float _62 = min(_59, 65000.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float4 _65 = t4.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  float _70 = max(_65.x, 0.0f);
  float _71 = max(_65.y, 0.0f);
  float _72 = max(_65.z, 0.0f);
  float _73 = max(_65.w, 0.0f);
  float _74 = min(_70, 5000.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _80 = _24.x * cb0_028z;
  float _81 = _80 + cb0_028x;
  float _82 = cb2_027w / _81;
  float _83 = 1.0f - _82;
  float _84 = abs(_83);
  float _86 = cb2_027y * _84;
  float _88 = _86 - cb2_027z;
  float _89 = saturate(_88);
  float _90 = max(_89, _77);
  float _91 = saturate(_90);
  float4 _92 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _96 = _74 - _62;
  float _97 = _75 - _63;
  float _98 = _76 - _64;
  float _99 = _91 * _96;
  float _100 = _91 * _97;
  float _101 = _91 * _98;
  float _102 = _99 + _62;
  float _103 = _100 + _63;
  float _104 = _101 + _64;
  float _105 = dot(float3(_102, _103, _104), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _109 = t0[0].SExposureData_020;
  float _111 = t0[0].SExposureData_004;
  float _113 = cb2_018x * 0.5f;
  float _114 = _113 * cb2_018y;
  float _115 = _111.x - _114;
  float _116 = cb2_018y * cb2_018x;
  float _117 = 1.0f / _116;
  float _118 = _115 * _117;
  float _119 = _105 / _109.x;
  float _120 = _119 * 5464.01611328125f;
  float _121 = _120 + 9.99999993922529e-09f;
  float _122 = log2(_121);
  float _123 = _122 - _115;
  float _124 = _123 * _117;
  float _125 = saturate(_124);
  float2 _126 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _125), 0.0f);
  float _129 = max(_126.y, 1.0000000116860974e-07f);
  float _130 = _126.x / _129;
  float _131 = _130 + _118;
  float _132 = _131 / _117;
  float _133 = _132 - _111.x;
  float _134 = -0.0f - _133;
  float _136 = _134 - cb2_027x;
  float _137 = max(0.0f, _136);
  float _139 = cb2_026z * _137;
  float _140 = _133 - cb2_027x;
  float _141 = max(0.0f, _140);
  float _143 = cb2_026w * _141;
  bool _144 = (_133 < 0.0f);
  float _145 = select(_144, _139, _143);
  float _146 = exp2(_145);
  float _147 = _146 * _102;
  float _148 = _146 * _103;
  float _149 = _146 * _104;
  float _154 = cb2_024y * _92.x;
  float _155 = cb2_024z * _92.y;
  float _156 = cb2_024w * _92.z;
  float _157 = _154 + _147;
  float _158 = _155 + _148;
  float _159 = _156 + _149;
  float _164 = _157 * cb2_025x;
  float _165 = _158 * cb2_025y;
  float _166 = _159 * cb2_025z;
  float _167 = dot(float3(_164, _165, _166), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _168 = t0[0].SExposureData_012;
  float _170 = _167 * 5464.01611328125f;
  float _171 = _170 * _168.x;
  float _172 = _171 + 9.99999993922529e-09f;
  float _173 = log2(_172);
  float _174 = _173 + 16.929765701293945f;
  float _175 = _174 * 0.05734497308731079f;
  float _176 = saturate(_175);
  float _177 = _176 * _176;
  float _178 = _176 * 2.0f;
  float _179 = 3.0f - _178;
  float _180 = _177 * _179;
  float _181 = _165 * 0.8450999855995178f;
  float _182 = _166 * 0.14589999616146088f;
  float _183 = _181 + _182;
  float _184 = _183 * 2.4890189170837402f;
  float _185 = _183 * 0.3754962384700775f;
  float _186 = _183 * 2.811495304107666f;
  float _187 = _183 * 5.519708156585693f;
  float _188 = _167 - _184;
  float _189 = _180 * _188;
  float _190 = _189 + _184;
  float _191 = _180 * 0.5f;
  float _192 = _191 + 0.5f;
  float _193 = _192 * _188;
  float _194 = _193 + _184;
  float _195 = _164 - _185;
  float _196 = _165 - _186;
  float _197 = _166 - _187;
  float _198 = _192 * _195;
  float _199 = _192 * _196;
  float _200 = _192 * _197;
  float _201 = _198 + _185;
  float _202 = _199 + _186;
  float _203 = _200 + _187;
  float _204 = 1.0f / _194;
  float _205 = _190 * _204;
  float _206 = _205 * _201;
  float _207 = _205 * _202;
  float _208 = _205 * _203;
  float _212 = cb2_020x * TEXCOORD0_centroid.x;
  float _213 = cb2_020y * TEXCOORD0_centroid.y;
  float _216 = _212 + cb2_020z;
  float _217 = _213 + cb2_020w;
  float _220 = dot(float2(_216, _217), float2(_216, _217));
  float _221 = 1.0f - _220;
  float _222 = saturate(_221);
  float _223 = log2(_222);
  float _224 = _223 * cb2_021w;
  float _225 = exp2(_224);
  float _229 = _206 - cb2_021x;
  float _230 = _207 - cb2_021y;
  float _231 = _208 - cb2_021z;
  float _232 = _229 * _225;
  float _233 = _230 * _225;
  float _234 = _231 * _225;
  float _235 = _232 + cb2_021x;
  float _236 = _233 + cb2_021y;
  float _237 = _234 + cb2_021z;
  float _238 = t0[0].SExposureData_000;
  float _240 = max(_109.x, 0.0010000000474974513f);
  float _241 = 1.0f / _240;
  float _242 = _241 * _238.x;
  bool _245 = ((uint)(cb2_069y) == 0);
  float _251;
  float _252;
  float _253;
  float _307;
  float _308;
  float _309;
  float _385;
  float _386;
  float _387;
  float _488;
  float _489;
  float _490;
  float _515;
  float _527;
  float _555;
  float _567;
  float _579;
  float _580;
  float _581;
  float _608;
  float _609;
  float _610;
  if (!_245) {
    float _247 = _242 * _235;
    float _248 = _242 * _236;
    float _249 = _242 * _237;
    _251 = _247;
    _252 = _248;
    _253 = _249;
  } else {
    _251 = _235;
    _252 = _236;
    _253 = _237;
  }
  float _254 = _251 * 0.6130970120429993f;
  float _255 = mad(0.33952298760414124f, _252, _254);
  float _256 = mad(0.04737899824976921f, _253, _255);
  float _257 = _251 * 0.07019399851560593f;
  float _258 = mad(0.9163540005683899f, _252, _257);
  float _259 = mad(0.013451999984681606f, _253, _258);
  float _260 = _251 * 0.02061600051820278f;
  float _261 = mad(0.10956999659538269f, _252, _260);
  float _262 = mad(0.8698149919509888f, _253, _261);
  float _263 = log2(_256);
  float _264 = log2(_259);
  float _265 = log2(_262);
  float _266 = _263 * 0.04211956635117531f;
  float _267 = _264 * 0.04211956635117531f;
  float _268 = _265 * 0.04211956635117531f;
  float _269 = _266 + 0.6252607107162476f;
  float _270 = _267 + 0.6252607107162476f;
  float _271 = _268 + 0.6252607107162476f;
  float4 _272 = t6.SampleLevel(s2_space2, float3(_269, _270, _271), 0.0f);
  bool _278 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_278 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _282 = cb2_017x * _272.x;
    float _283 = cb2_017x * _272.y;
    float _284 = cb2_017x * _272.z;
    float _286 = _282 + cb2_017y;
    float _287 = _283 + cb2_017y;
    float _288 = _284 + cb2_017y;
    float _289 = exp2(_286);
    float _290 = exp2(_287);
    float _291 = exp2(_288);
    float _292 = _289 + 1.0f;
    float _293 = _290 + 1.0f;
    float _294 = _291 + 1.0f;
    float _295 = 1.0f / _292;
    float _296 = 1.0f / _293;
    float _297 = 1.0f / _294;
    float _299 = cb2_017z * _295;
    float _300 = cb2_017z * _296;
    float _301 = cb2_017z * _297;
    float _303 = _299 + cb2_017w;
    float _304 = _300 + cb2_017w;
    float _305 = _301 + cb2_017w;
    _307 = _303;
    _308 = _304;
    _309 = _305;
  } else {
    _307 = _272.x;
    _308 = _272.y;
    _309 = _272.z;
  }
  float _310 = _307 * 23.0f;
  float _311 = _310 + -14.473931312561035f;
  float _312 = exp2(_311);
  float _313 = _308 * 23.0f;
  float _314 = _313 + -14.473931312561035f;
  float _315 = exp2(_314);
  float _316 = _309 * 23.0f;
  float _317 = _316 + -14.473931312561035f;
  float _318 = exp2(_317);
  float _319 = dot(float3(_312, _315, _318), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _324 = dot(float3(_312, _315, _318), float3(_312, _315, _318));
  float _325 = rsqrt(_324);
  float _326 = _325 * _312;
  float _327 = _325 * _315;
  float _328 = _325 * _318;
  float _329 = cb2_001x - _326;
  float _330 = cb2_001y - _327;
  float _331 = cb2_001z - _328;
  float _332 = dot(float3(_329, _330, _331), float3(_329, _330, _331));
  float _335 = cb2_002z * _332;
  float _337 = _335 + cb2_002w;
  float _338 = saturate(_337);
  float _340 = cb2_002x * _338;
  float _341 = _319 - _312;
  float _342 = _319 - _315;
  float _343 = _319 - _318;
  float _344 = _340 * _341;
  float _345 = _340 * _342;
  float _346 = _340 * _343;
  float _347 = _344 + _312;
  float _348 = _345 + _315;
  float _349 = _346 + _318;
  float _351 = cb2_002y * _338;
  float _352 = 0.10000000149011612f - _347;
  float _353 = 0.10000000149011612f - _348;
  float _354 = 0.10000000149011612f - _349;
  float _355 = _352 * _351;
  float _356 = _353 * _351;
  float _357 = _354 * _351;
  float _358 = _355 + _347;
  float _359 = _356 + _348;
  float _360 = _357 + _349;
  float _361 = saturate(_358);
  float _362 = saturate(_359);
  float _363 = saturate(_360);
  float _370 = cb2_016x - _361;
  float _371 = cb2_016y - _362;
  float _372 = cb2_016z - _363;
  float _373 = _370 * cb2_016w;
  float _374 = _371 * cb2_016w;
  float _375 = _372 * cb2_016w;
  float _376 = _373 + _361;
  float _377 = _374 + _362;
  float _378 = _375 + _363;
  if (_278 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _381 = cb2_024x * _376;
    float _382 = cb2_024x * _377;
    float _383 = cb2_024x * _378;
    _385 = _381;
    _386 = _382;
    _387 = _383;
  } else {
    _385 = _376;
    _386 = _377;
    _387 = _378;
  }
  float _388 = _385 * 0.9708889722824097f;
  float _389 = mad(0.026962999254465103f, _386, _388);
  float _390 = mad(0.002148000057786703f, _387, _389);
  float _391 = _385 * 0.01088900025933981f;
  float _392 = mad(0.9869629740715027f, _386, _391);
  float _393 = mad(0.002148000057786703f, _387, _392);
  float _394 = mad(0.026962999254465103f, _386, _391);
  float _395 = mad(0.9621480107307434f, _387, _394);
  if (_278) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _400 = cb1_018y * 0.10000000149011612f;
        float _401 = log2(cb1_018z);
        float _402 = _401 + -13.287712097167969f;
        float _403 = _402 * 1.4929734468460083f;
        float _404 = _403 + 18.0f;
        float _405 = exp2(_404);
        float _406 = _405 * 0.18000000715255737f;
        float _407 = abs(_406);
        float _408 = log2(_407);
        float _409 = _408 * 1.5f;
        float _410 = exp2(_409);
        float _411 = _410 * _400;
        float _412 = _411 / cb1_018z;
        float _413 = _412 + -0.07636754959821701f;
        float _414 = _408 * 1.2750000953674316f;
        float _415 = exp2(_414);
        float _416 = _415 * 0.07636754959821701f;
        float _417 = cb1_018y * 0.011232397519052029f;
        float _418 = _417 * _410;
        float _419 = _418 / cb1_018z;
        float _420 = _416 - _419;
        float _421 = _415 + -0.11232396960258484f;
        float _422 = _421 * _400;
        float _423 = _422 / cb1_018z;
        float _424 = _423 * cb1_018z;
        float _425 = abs(_390);
        float _426 = abs(_393);
        float _427 = abs(_395);
        float _428 = log2(_425);
        float _429 = log2(_426);
        float _430 = log2(_427);
        float _431 = _428 * 1.5f;
        float _432 = _429 * 1.5f;
        float _433 = _430 * 1.5f;
        float _434 = exp2(_431);
        float _435 = exp2(_432);
        float _436 = exp2(_433);
        float _437 = _434 * _424;
        float _438 = _435 * _424;
        float _439 = _436 * _424;
        float _440 = _428 * 1.2750000953674316f;
        float _441 = _429 * 1.2750000953674316f;
        float _442 = _430 * 1.2750000953674316f;
        float _443 = exp2(_440);
        float _444 = exp2(_441);
        float _445 = exp2(_442);
        float _446 = _443 * _413;
        float _447 = _444 * _413;
        float _448 = _445 * _413;
        float _449 = _446 + _420;
        float _450 = _447 + _420;
        float _451 = _448 + _420;
        float _452 = _437 / _449;
        float _453 = _438 / _450;
        float _454 = _439 / _451;
        float _455 = _452 * 9.999999747378752e-05f;
        float _456 = _453 * 9.999999747378752e-05f;
        float _457 = _454 * 9.999999747378752e-05f;
        float _458 = 5000.0f / cb1_018y;
        float _459 = _455 * _458;
        float _460 = _456 * _458;
        float _461 = _457 * _458;
        _488 = _459;
        _489 = _460;
        _490 = _461;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_390, _393, _395));
      _488 = tonemapped.x, _489 = tonemapped.y, _490 = tonemapped.z;
    }
      } else {
        float _463 = _390 + 0.020616600289940834f;
        float _464 = _393 + 0.020616600289940834f;
        float _465 = _395 + 0.020616600289940834f;
        float _466 = _463 * _390;
        float _467 = _464 * _393;
        float _468 = _465 * _395;
        float _469 = _466 + -7.456949970219284e-05f;
        float _470 = _467 + -7.456949970219284e-05f;
        float _471 = _468 + -7.456949970219284e-05f;
        float _472 = _390 * 0.9837960004806519f;
        float _473 = _393 * 0.9837960004806519f;
        float _474 = _395 * 0.9837960004806519f;
        float _475 = _472 + 0.4336790144443512f;
        float _476 = _473 + 0.4336790144443512f;
        float _477 = _474 + 0.4336790144443512f;
        float _478 = _475 * _390;
        float _479 = _476 * _393;
        float _480 = _477 * _395;
        float _481 = _478 + 0.24617899954319f;
        float _482 = _479 + 0.24617899954319f;
        float _483 = _480 + 0.24617899954319f;
        float _484 = _469 / _481;
        float _485 = _470 / _482;
        float _486 = _471 / _483;
        _488 = _484;
        _489 = _485;
        _490 = _486;
      }
      float _491 = _488 * 1.6047500371932983f;
      float _492 = mad(-0.5310800075531006f, _489, _491);
      float _493 = mad(-0.07366999983787537f, _490, _492);
      float _494 = _488 * -0.10208000242710114f;
      float _495 = mad(1.1081299781799316f, _489, _494);
      float _496 = mad(-0.006049999967217445f, _490, _495);
      float _497 = _488 * -0.0032599999103695154f;
      float _498 = mad(-0.07275000214576721f, _489, _497);
      float _499 = mad(1.0760200023651123f, _490, _498);
      if (_278) {
        // float _501 = max(_493, 0.0f);
        // float _502 = max(_496, 0.0f);
        // float _503 = max(_499, 0.0f);
        // bool _504 = !(_501 >= 0.0030399328097701073f);
        // if (!_504) {
        //   float _506 = abs(_501);
        //   float _507 = log2(_506);
        //   float _508 = _507 * 0.4166666567325592f;
        //   float _509 = exp2(_508);
        //   float _510 = _509 * 1.0549999475479126f;
        //   float _511 = _510 + -0.054999999701976776f;
        //   _515 = _511;
        // } else {
        //   float _513 = _501 * 12.923210144042969f;
        //   _515 = _513;
        // }
        // bool _516 = !(_502 >= 0.0030399328097701073f);
        // if (!_516) {
        //   float _518 = abs(_502);
        //   float _519 = log2(_518);
        //   float _520 = _519 * 0.4166666567325592f;
        //   float _521 = exp2(_520);
        //   float _522 = _521 * 1.0549999475479126f;
        //   float _523 = _522 + -0.054999999701976776f;
        //   _527 = _523;
        // } else {
        //   float _525 = _502 * 12.923210144042969f;
        //   _527 = _525;
        // }
        // bool _528 = !(_503 >= 0.0030399328097701073f);
        // if (!_528) {
        //   float _530 = abs(_503);
        //   float _531 = log2(_530);
        //   float _532 = _531 * 0.4166666567325592f;
        //   float _533 = exp2(_532);
        //   float _534 = _533 * 1.0549999475479126f;
        //   float _535 = _534 + -0.054999999701976776f;
        //   _608 = _515;
        //   _609 = _527;
        //   _610 = _535;
        // } else {
        //   float _537 = _503 * 12.923210144042969f;
        //   _608 = _515;
        //   _609 = _527;
        //   _610 = _537;
        // }
        _608 = renodx::color::srgb::EncodeSafe(_493);
        _609 = renodx::color::srgb::EncodeSafe(_496);
        _610 = renodx::color::srgb::EncodeSafe(_499);

      } else {
        float _539 = saturate(_493);
        float _540 = saturate(_496);
        float _541 = saturate(_499);
        bool _542 = ((uint)(cb1_018w) == -2);
        if (!_542) {
          bool _544 = !(_539 >= 0.0030399328097701073f);
          if (!_544) {
            float _546 = abs(_539);
            float _547 = log2(_546);
            float _548 = _547 * 0.4166666567325592f;
            float _549 = exp2(_548);
            float _550 = _549 * 1.0549999475479126f;
            float _551 = _550 + -0.054999999701976776f;
            _555 = _551;
          } else {
            float _553 = _539 * 12.923210144042969f;
            _555 = _553;
          }
          bool _556 = !(_540 >= 0.0030399328097701073f);
          if (!_556) {
            float _558 = abs(_540);
            float _559 = log2(_558);
            float _560 = _559 * 0.4166666567325592f;
            float _561 = exp2(_560);
            float _562 = _561 * 1.0549999475479126f;
            float _563 = _562 + -0.054999999701976776f;
            _567 = _563;
          } else {
            float _565 = _540 * 12.923210144042969f;
            _567 = _565;
          }
          bool _568 = !(_541 >= 0.0030399328097701073f);
          if (!_568) {
            float _570 = abs(_541);
            float _571 = log2(_570);
            float _572 = _571 * 0.4166666567325592f;
            float _573 = exp2(_572);
            float _574 = _573 * 1.0549999475479126f;
            float _575 = _574 + -0.054999999701976776f;
            _579 = _555;
            _580 = _567;
            _581 = _575;
          } else {
            float _577 = _541 * 12.923210144042969f;
            _579 = _555;
            _580 = _567;
            _581 = _577;
          }
        } else {
          _579 = _539;
          _580 = _540;
          _581 = _541;
        }
        float _586 = abs(_579);
        float _587 = abs(_580);
        float _588 = abs(_581);
        float _589 = log2(_586);
        float _590 = log2(_587);
        float _591 = log2(_588);
        float _592 = _589 * cb2_000z;
        float _593 = _590 * cb2_000z;
        float _594 = _591 * cb2_000z;
        float _595 = exp2(_592);
        float _596 = exp2(_593);
        float _597 = exp2(_594);
        float _598 = _595 * cb2_000y;
        float _599 = _596 * cb2_000y;
        float _600 = _597 * cb2_000y;
        float _601 = _598 + cb2_000x;
        float _602 = _599 + cb2_000x;
        float _603 = _600 + cb2_000x;
        float _604 = saturate(_601);
        float _605 = saturate(_602);
        float _606 = saturate(_603);
        _608 = _604;
        _609 = _605;
        _610 = _606;
      }
      float _614 = cb2_023x * TEXCOORD0_centroid.x;
      float _615 = cb2_023y * TEXCOORD0_centroid.y;
      float _618 = _614 + cb2_023z;
      float _619 = _615 + cb2_023w;
      float4 _622 = t9.SampleLevel(s0_space2, float2(_618, _619), 0.0f);
      float _624 = _622.x + -0.5f;
      float _625 = _624 * cb2_022x;
      float _626 = _625 + 0.5f;
      float _627 = _626 * 2.0f;
      float _628 = _627 * _608;
      float _629 = _627 * _609;
      float _630 = _627 * _610;
      float _634 = float((uint)(cb2_019z));
      float _635 = float((uint)(cb2_019w));
      float _636 = _634 + SV_Position.x;
      float _637 = _635 + SV_Position.y;
      uint _638 = uint(_636);
      uint _639 = uint(_637);
      uint _642 = cb2_019x + -1u;
      uint _643 = cb2_019y + -1u;
      int _644 = _638 & _642;
      int _645 = _639 & _643;
      float4 _646 = t3.Load(int3(_644, _645, 0));
      float _650 = _646.x * 2.0f;
      float _651 = _646.y * 2.0f;
      float _652 = _646.z * 2.0f;
      float _653 = _650 + -1.0f;
      float _654 = _651 + -1.0f;
      float _655 = _652 + -1.0f;
      float _656 = _653 * cb2_025w;
      float _657 = _654 * cb2_025w;
      float _658 = _655 * cb2_025w;
      float _659 = _656 + _628;
      float _660 = _657 + _629;
      float _661 = _658 + _630;
      float _662 = dot(float3(_659, _660, _661), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _659;
      SV_Target.y = _660;
      SV_Target.z = _661;
      SV_Target.w = _662;
      SV_Target_1.x = _662;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
