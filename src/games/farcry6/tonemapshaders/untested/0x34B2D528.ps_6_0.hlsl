#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _25 = cb2_015x * TEXCOORD0_centroid.x;
  float _26 = cb2_015y * TEXCOORD0_centroid.y;
  float _29 = _25 + cb2_015z;
  float _30 = _26 + cb2_015w;
  float4 _31 = t6.SampleLevel(s0_space2, float2(_29, _30), 0.0f);
  float _35 = saturate(_31.x);
  float _36 = saturate(_31.z);
  float _39 = cb2_026x * _36;
  float _40 = _35 * 6.283199787139893f;
  float _41 = cos(_40);
  float _42 = sin(_40);
  float _43 = _39 * _41;
  float _44 = _42 * _39;
  float _45 = 1.0f - _31.y;
  float _46 = saturate(_45);
  float _47 = _43 * _46;
  float _48 = _44 * _46;
  float _49 = _47 + TEXCOORD0_centroid.x;
  float _50 = _48 + TEXCOORD0_centroid.y;
  float4 _51 = t1.SampleLevel(s4_space2, float2(_49, _50), 0.0f);
  float _55 = max(_51.x, 0.0f);
  float _56 = max(_51.y, 0.0f);
  float _57 = max(_51.z, 0.0f);
  float _58 = min(_55, 65000.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float4 _61 = t3.SampleLevel(s2_space2, float2(_49, _50), 0.0f);
  float _66 = max(_61.x, 0.0f);
  float _67 = max(_61.y, 0.0f);
  float _68 = max(_61.z, 0.0f);
  float _69 = max(_61.w, 0.0f);
  float _70 = min(_66, 5000.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _76 = _20.x * cb0_028z;
  float _77 = _76 + cb0_028x;
  float _78 = cb2_027w / _77;
  float _79 = 1.0f - _78;
  float _80 = abs(_79);
  float _82 = cb2_027y * _80;
  float _84 = _82 - cb2_027z;
  float _85 = saturate(_84);
  float _86 = max(_85, _73);
  float _87 = saturate(_86);
  float _91 = cb2_013x * _49;
  float _92 = cb2_013y * _50;
  float _95 = _91 + cb2_013z;
  float _96 = _92 + cb2_013w;
  float _99 = dot(float2(_95, _96), float2(_95, _96));
  float _100 = abs(_99);
  float _101 = log2(_100);
  float _102 = _101 * cb2_014x;
  float _103 = exp2(_102);
  float _104 = saturate(_103);
  float _108 = cb2_011x * _49;
  float _109 = cb2_011y * _50;
  float _112 = _108 + cb2_011z;
  float _113 = _109 + cb2_011w;
  float _114 = _112 * _104;
  float _115 = _113 * _104;
  float _116 = _114 + _49;
  float _117 = _115 + _50;
  float _121 = cb2_012x * _49;
  float _122 = cb2_012y * _50;
  float _125 = _121 + cb2_012z;
  float _126 = _122 + cb2_012w;
  float _127 = _125 * _104;
  float _128 = _126 * _104;
  float _129 = _127 + _49;
  float _130 = _128 + _50;
  float4 _131 = t1.SampleLevel(s2_space2, float2(_116, _117), 0.0f);
  float _135 = max(_131.x, 0.0f);
  float _136 = max(_131.y, 0.0f);
  float _137 = max(_131.z, 0.0f);
  float _138 = min(_135, 65000.0f);
  float _139 = min(_136, 65000.0f);
  float _140 = min(_137, 65000.0f);
  float4 _141 = t1.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _145 = max(_141.x, 0.0f);
  float _146 = max(_141.y, 0.0f);
  float _147 = max(_141.z, 0.0f);
  float _148 = min(_145, 65000.0f);
  float _149 = min(_146, 65000.0f);
  float _150 = min(_147, 65000.0f);
  float4 _151 = t3.SampleLevel(s2_space2, float2(_116, _117), 0.0f);
  float _155 = max(_151.x, 0.0f);
  float _156 = max(_151.y, 0.0f);
  float _157 = max(_151.z, 0.0f);
  float _158 = min(_155, 5000.0f);
  float _159 = min(_156, 5000.0f);
  float _160 = min(_157, 5000.0f);
  float4 _161 = t3.SampleLevel(s2_space2, float2(_129, _130), 0.0f);
  float _165 = max(_161.x, 0.0f);
  float _166 = max(_161.y, 0.0f);
  float _167 = max(_161.z, 0.0f);
  float _168 = min(_165, 5000.0f);
  float _169 = min(_166, 5000.0f);
  float _170 = min(_167, 5000.0f);
  float _175 = 1.0f - cb2_009x;
  float _176 = 1.0f - cb2_009y;
  float _177 = 1.0f - cb2_009z;
  float _182 = _175 - cb2_010x;
  float _183 = _176 - cb2_010y;
  float _184 = _177 - cb2_010z;
  float _185 = saturate(_182);
  float _186 = saturate(_183);
  float _187 = saturate(_184);
  float _188 = _185 * _58;
  float _189 = _186 * _59;
  float _190 = _187 * _60;
  float _191 = cb2_009x * _138;
  float _192 = cb2_009y * _139;
  float _193 = cb2_009z * _140;
  float _194 = _191 + _188;
  float _195 = _192 + _189;
  float _196 = _193 + _190;
  float _197 = cb2_010x * _148;
  float _198 = cb2_010y * _149;
  float _199 = cb2_010z * _150;
  float _200 = _194 + _197;
  float _201 = _195 + _198;
  float _202 = _196 + _199;
  float _203 = _185 * _70;
  float _204 = _186 * _71;
  float _205 = _187 * _72;
  float _206 = cb2_009x * _158;
  float _207 = cb2_009y * _159;
  float _208 = cb2_009z * _160;
  float _209 = cb2_010x * _168;
  float _210 = cb2_010y * _169;
  float _211 = cb2_010z * _170;
  float4 _212 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _216 = _203 - _200;
  float _217 = _216 + _206;
  float _218 = _217 + _209;
  float _219 = _204 - _201;
  float _220 = _219 + _207;
  float _221 = _220 + _210;
  float _222 = _205 - _202;
  float _223 = _222 + _208;
  float _224 = _223 + _211;
  float _225 = _218 * _87;
  float _226 = _221 * _87;
  float _227 = _224 * _87;
  float _228 = _225 + _200;
  float _229 = _226 + _201;
  float _230 = _227 + _202;
  float _231 = dot(float3(_228, _229, _230), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _235 = t0[0].SExposureData_020;
  float _237 = t0[0].SExposureData_004;
  float _239 = cb2_018x * 0.5f;
  float _240 = _239 * cb2_018y;
  float _241 = _237.x - _240;
  float _242 = cb2_018y * cb2_018x;
  float _243 = 1.0f / _242;
  float _244 = _241 * _243;
  float _245 = _231 / _235.x;
  float _246 = _245 * 5464.01611328125f;
  float _247 = _246 + 9.99999993922529e-09f;
  float _248 = log2(_247);
  float _249 = _248 - _241;
  float _250 = _249 * _243;
  float _251 = saturate(_250);
  float2 _252 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _251), 0.0f);
  float _255 = max(_252.y, 1.0000000116860974e-07f);
  float _256 = _252.x / _255;
  float _257 = _256 + _244;
  float _258 = _257 / _243;
  float _259 = _258 - _237.x;
  float _260 = -0.0f - _259;
  float _262 = _260 - cb2_027x;
  float _263 = max(0.0f, _262);
  float _265 = cb2_026z * _263;
  float _266 = _259 - cb2_027x;
  float _267 = max(0.0f, _266);
  float _269 = cb2_026w * _267;
  bool _270 = (_259 < 0.0f);
  float _271 = select(_270, _265, _269);
  float _272 = exp2(_271);
  float _273 = _272 * _228;
  float _274 = _272 * _229;
  float _275 = _272 * _230;
  float _280 = cb2_024y * _212.x;
  float _281 = cb2_024z * _212.y;
  float _282 = cb2_024w * _212.z;
  float _283 = _280 + _273;
  float _284 = _281 + _274;
  float _285 = _282 + _275;
  float _290 = _283 * cb2_025x;
  float _291 = _284 * cb2_025y;
  float _292 = _285 * cb2_025z;
  float _293 = dot(float3(_290, _291, _292), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _294 = t0[0].SExposureData_012;
  float _296 = _293 * 5464.01611328125f;
  float _297 = _296 * _294.x;
  float _298 = _297 + 9.99999993922529e-09f;
  float _299 = log2(_298);
  float _300 = _299 + 16.929765701293945f;
  float _301 = _300 * 0.05734497308731079f;
  float _302 = saturate(_301);
  float _303 = _302 * _302;
  float _304 = _302 * 2.0f;
  float _305 = 3.0f - _304;
  float _306 = _303 * _305;
  float _307 = _291 * 0.8450999855995178f;
  float _308 = _292 * 0.14589999616146088f;
  float _309 = _307 + _308;
  float _310 = _309 * 2.4890189170837402f;
  float _311 = _309 * 0.3754962384700775f;
  float _312 = _309 * 2.811495304107666f;
  float _313 = _309 * 5.519708156585693f;
  float _314 = _293 - _310;
  float _315 = _306 * _314;
  float _316 = _315 + _310;
  float _317 = _306 * 0.5f;
  float _318 = _317 + 0.5f;
  float _319 = _318 * _314;
  float _320 = _319 + _310;
  float _321 = _290 - _311;
  float _322 = _291 - _312;
  float _323 = _292 - _313;
  float _324 = _318 * _321;
  float _325 = _318 * _322;
  float _326 = _318 * _323;
  float _327 = _324 + _311;
  float _328 = _325 + _312;
  float _329 = _326 + _313;
  float _330 = 1.0f / _320;
  float _331 = _316 * _330;
  float _332 = _331 * _327;
  float _333 = _331 * _328;
  float _334 = _331 * _329;
  float _338 = cb2_020x * TEXCOORD0_centroid.x;
  float _339 = cb2_020y * TEXCOORD0_centroid.y;
  float _342 = _338 + cb2_020z;
  float _343 = _339 + cb2_020w;
  float _346 = dot(float2(_342, _343), float2(_342, _343));
  float _347 = 1.0f - _346;
  float _348 = saturate(_347);
  float _349 = log2(_348);
  float _350 = _349 * cb2_021w;
  float _351 = exp2(_350);
  float _355 = _332 - cb2_021x;
  float _356 = _333 - cb2_021y;
  float _357 = _334 - cb2_021z;
  float _358 = _355 * _351;
  float _359 = _356 * _351;
  float _360 = _357 * _351;
  float _361 = _358 + cb2_021x;
  float _362 = _359 + cb2_021y;
  float _363 = _360 + cb2_021z;
  float _364 = t0[0].SExposureData_000;
  float _366 = max(_235.x, 0.0010000000474974513f);
  float _367 = 1.0f / _366;
  float _368 = _367 * _364.x;
  bool _371 = ((uint)(cb2_069y) == 0);
  float _377;
  float _378;
  float _379;
  float _433;
  float _434;
  float _435;
  float _465;
  float _466;
  float _467;
  float _617;
  float _654;
  float _655;
  float _656;
  float _685;
  float _686;
  float _687;
  float _768;
  float _769;
  float _770;
  float _776;
  float _777;
  float _778;
  float _792;
  float _793;
  float _794;
  float _819;
  float _831;
  float _859;
  float _871;
  float _883;
  float _884;
  float _885;
  float _912;
  float _913;
  float _914;
  if (!_371) {
    float _373 = _368 * _361;
    float _374 = _368 * _362;
    float _375 = _368 * _363;
    _377 = _373;
    _378 = _374;
    _379 = _375;
  } else {
    _377 = _361;
    _378 = _362;
    _379 = _363;
  }
  float _380 = _377 * 0.6130970120429993f;
  float _381 = mad(0.33952298760414124f, _378, _380);
  float _382 = mad(0.04737899824976921f, _379, _381);
  float _383 = _377 * 0.07019399851560593f;
  float _384 = mad(0.9163540005683899f, _378, _383);
  float _385 = mad(0.013451999984681606f, _379, _384);
  float _386 = _377 * 0.02061600051820278f;
  float _387 = mad(0.10956999659538269f, _378, _386);
  float _388 = mad(0.8698149919509888f, _379, _387);
  float _389 = log2(_382);
  float _390 = log2(_385);
  float _391 = log2(_388);
  float _392 = _389 * 0.04211956635117531f;
  float _393 = _390 * 0.04211956635117531f;
  float _394 = _391 * 0.04211956635117531f;
  float _395 = _392 + 0.6252607107162476f;
  float _396 = _393 + 0.6252607107162476f;
  float _397 = _394 + 0.6252607107162476f;
  float4 _398 = t5.SampleLevel(s2_space2, float3(_395, _396, _397), 0.0f);
  bool _404 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_404 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _408 = cb2_017x * _398.x;
    float _409 = cb2_017x * _398.y;
    float _410 = cb2_017x * _398.z;
    float _412 = _408 + cb2_017y;
    float _413 = _409 + cb2_017y;
    float _414 = _410 + cb2_017y;
    float _415 = exp2(_412);
    float _416 = exp2(_413);
    float _417 = exp2(_414);
    float _418 = _415 + 1.0f;
    float _419 = _416 + 1.0f;
    float _420 = _417 + 1.0f;
    float _421 = 1.0f / _418;
    float _422 = 1.0f / _419;
    float _423 = 1.0f / _420;
    float _425 = cb2_017z * _421;
    float _426 = cb2_017z * _422;
    float _427 = cb2_017z * _423;
    float _429 = _425 + cb2_017w;
    float _430 = _426 + cb2_017w;
    float _431 = _427 + cb2_017w;
    _433 = _429;
    _434 = _430;
    _435 = _431;
  } else {
    _433 = _398.x;
    _434 = _398.y;
    _435 = _398.z;
  }
  float _436 = _433 * 23.0f;
  float _437 = _436 + -14.473931312561035f;
  float _438 = exp2(_437);
  float _439 = _434 * 23.0f;
  float _440 = _439 + -14.473931312561035f;
  float _441 = exp2(_440);
  float _442 = _435 * 23.0f;
  float _443 = _442 + -14.473931312561035f;
  float _444 = exp2(_443);
  float _450 = cb2_016x - _438;
  float _451 = cb2_016y - _441;
  float _452 = cb2_016z - _444;
  float _453 = _450 * cb2_016w;
  float _454 = _451 * cb2_016w;
  float _455 = _452 * cb2_016w;
  float _456 = _453 + _438;
  float _457 = _454 + _441;
  float _458 = _455 + _444;
  if (_404 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _461 = cb2_024x * _456;
    float _462 = cb2_024x * _457;
    float _463 = cb2_024x * _458;
    _465 = _461;
    _466 = _462;
    _467 = _463;
  } else {
    _465 = _456;
    _466 = _457;
    _467 = _458;
  }
  float _470 = _465 * 0.9708889722824097f;
  float _471 = mad(0.026962999254465103f, _466, _470);
  float _472 = mad(0.002148000057786703f, _467, _471);
  float _473 = _465 * 0.01088900025933981f;
  float _474 = mad(0.9869629740715027f, _466, _473);
  float _475 = mad(0.002148000057786703f, _467, _474);
  float _476 = mad(0.026962999254465103f, _466, _473);
  float _477 = mad(0.9621480107307434f, _467, _476);
  float _478 = max(_472, 0.0f);
  float _479 = max(_475, 0.0f);
  float _480 = max(_477, 0.0f);
  float _481 = min(_478, cb2_095y);
  float _482 = min(_479, cb2_095y);
  float _483 = min(_480, cb2_095y);
  bool _486 = ((uint)(cb2_095x) == 0);
  bool _489 = ((uint)(cb2_094w) == 0);
  bool _491 = ((uint)(cb2_094z) == 0);
  bool _493 = ((uint)(cb2_094y) != 0);
  bool _495 = ((uint)(cb2_094x) == 0);
  bool _497 = ((uint)(cb2_069z) != 0);
  float _544 = asfloat((uint)(cb2_075y));
  float _545 = asfloat((uint)(cb2_075z));
  float _546 = asfloat((uint)(cb2_075w));
  float _547 = asfloat((uint)(cb2_074z));
  float _548 = asfloat((uint)(cb2_074w));
  float _549 = asfloat((uint)(cb2_075x));
  float _550 = asfloat((uint)(cb2_073w));
  float _551 = asfloat((uint)(cb2_074x));
  float _552 = asfloat((uint)(cb2_074y));
  float _553 = asfloat((uint)(cb2_077x));
  float _554 = asfloat((uint)(cb2_077y));
  float _555 = asfloat((uint)(cb2_079x));
  float _556 = asfloat((uint)(cb2_079y));
  float _557 = asfloat((uint)(cb2_079z));
  float _558 = asfloat((uint)(cb2_078y));
  float _559 = asfloat((uint)(cb2_078z));
  float _560 = asfloat((uint)(cb2_078w));
  float _561 = asfloat((uint)(cb2_077z));
  float _562 = asfloat((uint)(cb2_077w));
  float _563 = asfloat((uint)(cb2_078x));
  float _564 = asfloat((uint)(cb2_072y));
  float _565 = asfloat((uint)(cb2_072z));
  float _566 = asfloat((uint)(cb2_072w));
  float _567 = asfloat((uint)(cb2_071x));
  float _568 = asfloat((uint)(cb2_071y));
  float _569 = asfloat((uint)(cb2_076x));
  float _570 = asfloat((uint)(cb2_070w));
  float _571 = asfloat((uint)(cb2_070x));
  float _572 = asfloat((uint)(cb2_070y));
  float _573 = asfloat((uint)(cb2_070z));
  float _574 = asfloat((uint)(cb2_073x));
  float _575 = asfloat((uint)(cb2_073y));
  float _576 = asfloat((uint)(cb2_073z));
  float _577 = asfloat((uint)(cb2_071z));
  float _578 = asfloat((uint)(cb2_071w));
  float _579 = asfloat((uint)(cb2_072x));
  float _580 = max(_482, _483);
  float _581 = max(_481, _580);
  float _582 = 1.0f / _581;
  float _583 = _582 * _481;
  float _584 = _582 * _482;
  float _585 = _582 * _483;
  float _586 = abs(_583);
  float _587 = log2(_586);
  float _588 = _587 * _571;
  float _589 = exp2(_588);
  float _590 = abs(_584);
  float _591 = log2(_590);
  float _592 = _591 * _572;
  float _593 = exp2(_592);
  float _594 = abs(_585);
  float _595 = log2(_594);
  float _596 = _595 * _573;
  float _597 = exp2(_596);
  if (_493) {
    float _600 = asfloat((uint)(cb2_076w));
    float _602 = asfloat((uint)(cb2_076z));
    float _604 = asfloat((uint)(cb2_076y));
    float _605 = _602 * _482;
    float _606 = _604 * _481;
    float _607 = _600 * _483;
    float _608 = _606 + _607;
    float _609 = _608 + _605;
    _617 = _609;
  } else {
    float _611 = _578 * _482;
    float _612 = _577 * _481;
    float _613 = _579 * _483;
    float _614 = _611 + _612;
    float _615 = _614 + _613;
    _617 = _615;
  }
  float _618 = abs(_617);
  float _619 = log2(_618);
  float _620 = _619 * _570;
  float _621 = exp2(_620);
  float _622 = log2(_621);
  float _623 = _622 * _569;
  float _624 = exp2(_623);
  float _625 = select(_497, _624, _621);
  float _626 = _625 * _567;
  float _627 = _626 + _568;
  float _628 = 1.0f / _627;
  float _629 = _628 * _621;
  if (_493) {
    if (!_495) {
      float _632 = _589 * _561;
      float _633 = _593 * _562;
      float _634 = _597 * _563;
      float _635 = _633 + _632;
      float _636 = _635 + _634;
      float _637 = _593 * _559;
      float _638 = _589 * _558;
      float _639 = _597 * _560;
      float _640 = _637 + _638;
      float _641 = _640 + _639;
      float _642 = _597 * _557;
      float _643 = _593 * _556;
      float _644 = _589 * _555;
      float _645 = _643 + _644;
      float _646 = _645 + _642;
      float _647 = max(_641, _646);
      float _648 = max(_636, _647);
      float _649 = 1.0f / _648;
      float _650 = _649 * _636;
      float _651 = _649 * _641;
      float _652 = _649 * _646;
      _654 = _650;
      _655 = _651;
      _656 = _652;
    } else {
      _654 = _589;
      _655 = _593;
      _656 = _597;
    }
    float _657 = _654 * _554;
    float _658 = exp2(_657);
    float _659 = _658 * _553;
    float _660 = saturate(_659);
    float _661 = _654 * _553;
    float _662 = _654 - _661;
    float _663 = saturate(_662);
    float _664 = max(_553, _663);
    float _665 = min(_664, _660);
    float _666 = _655 * _554;
    float _667 = exp2(_666);
    float _668 = _667 * _553;
    float _669 = saturate(_668);
    float _670 = _655 * _553;
    float _671 = _655 - _670;
    float _672 = saturate(_671);
    float _673 = max(_553, _672);
    float _674 = min(_673, _669);
    float _675 = _656 * _554;
    float _676 = exp2(_675);
    float _677 = _676 * _553;
    float _678 = saturate(_677);
    float _679 = _656 * _553;
    float _680 = _656 - _679;
    float _681 = saturate(_680);
    float _682 = max(_553, _681);
    float _683 = min(_682, _678);
    _685 = _665;
    _686 = _674;
    _687 = _683;
  } else {
    _685 = _589;
    _686 = _593;
    _687 = _597;
  }
  float _688 = _685 * _577;
  float _689 = _686 * _578;
  float _690 = _689 + _688;
  float _691 = _687 * _579;
  float _692 = _690 + _691;
  float _693 = 1.0f / _692;
  float _694 = _693 * _629;
  float _695 = saturate(_694);
  float _696 = _695 * _685;
  float _697 = saturate(_696);
  float _698 = _695 * _686;
  float _699 = saturate(_698);
  float _700 = _695 * _687;
  float _701 = saturate(_700);
  float _702 = _697 * _564;
  float _703 = _564 - _702;
  float _704 = _699 * _565;
  float _705 = _565 - _704;
  float _706 = _701 * _566;
  float _707 = _566 - _706;
  float _708 = _701 * _579;
  float _709 = _697 * _577;
  float _710 = _699 * _578;
  float _711 = _629 - _709;
  float _712 = _711 - _710;
  float _713 = _712 - _708;
  float _714 = saturate(_713);
  float _715 = _705 * _578;
  float _716 = _703 * _577;
  float _717 = _707 * _579;
  float _718 = _715 + _716;
  float _719 = _718 + _717;
  float _720 = 1.0f / _719;
  float _721 = _720 * _714;
  float _722 = _721 * _703;
  float _723 = _722 + _697;
  float _724 = saturate(_723);
  float _725 = _721 * _705;
  float _726 = _725 + _699;
  float _727 = saturate(_726);
  float _728 = _721 * _707;
  float _729 = _728 + _701;
  float _730 = saturate(_729);
  float _731 = _730 * _579;
  float _732 = _724 * _577;
  float _733 = _727 * _578;
  float _734 = _629 - _732;
  float _735 = _734 - _733;
  float _736 = _735 - _731;
  float _737 = saturate(_736);
  float _738 = _737 * _574;
  float _739 = _738 + _724;
  float _740 = saturate(_739);
  float _741 = _737 * _575;
  float _742 = _741 + _727;
  float _743 = saturate(_742);
  float _744 = _737 * _576;
  float _745 = _744 + _730;
  float _746 = saturate(_745);
  if (!_491) {
    float _748 = _740 * _550;
    float _749 = _743 * _551;
    float _750 = _746 * _552;
    float _751 = _749 + _748;
    float _752 = _751 + _750;
    float _753 = _743 * _548;
    float _754 = _740 * _547;
    float _755 = _746 * _549;
    float _756 = _753 + _754;
    float _757 = _756 + _755;
    float _758 = _746 * _546;
    float _759 = _743 * _545;
    float _760 = _740 * _544;
    float _761 = _759 + _760;
    float _762 = _761 + _758;
    if (!_489) {
      float _764 = saturate(_752);
      float _765 = saturate(_757);
      float _766 = saturate(_762);
      _768 = _766;
      _769 = _765;
      _770 = _764;
    } else {
      _768 = _762;
      _769 = _757;
      _770 = _752;
    }
  } else {
    _768 = _746;
    _769 = _743;
    _770 = _740;
  }
  if (!_486) {
    float _772 = _770 * _550;
    float _773 = _769 * _550;
    float _774 = _768 * _550;
    _776 = _774;
    _777 = _773;
    _778 = _772;
  } else {
    _776 = _768;
    _777 = _769;
    _778 = _770;
  }
  if (_404) {
    float _782 = cb1_018z * 9.999999747378752e-05f;
    float _783 = _782 * _778;
    float _784 = _782 * _777;
    float _785 = _782 * _776;
    float _787 = 5000.0f / cb1_018y;
    float _788 = _783 * _787;
    float _789 = _784 * _787;
    float _790 = _785 * _787;
    _792 = _788;
    _793 = _789;
    _794 = _790;
  } else {
    _792 = _778;
    _793 = _777;
    _794 = _776;
  }
  float _795 = _792 * 1.6047500371932983f;
  float _796 = mad(-0.5310800075531006f, _793, _795);
  float _797 = mad(-0.07366999983787537f, _794, _796);
  float _798 = _792 * -0.10208000242710114f;
  float _799 = mad(1.1081299781799316f, _793, _798);
  float _800 = mad(-0.006049999967217445f, _794, _799);
  float _801 = _792 * -0.0032599999103695154f;
  float _802 = mad(-0.07275000214576721f, _793, _801);
  float _803 = mad(1.0760200023651123f, _794, _802);
  if (_404) {
    // float _805 = max(_797, 0.0f);
    // float _806 = max(_800, 0.0f);
    // float _807 = max(_803, 0.0f);
    // bool _808 = !(_805 >= 0.0030399328097701073f);
    // if (!_808) {
    //   float _810 = abs(_805);
    //   float _811 = log2(_810);
    //   float _812 = _811 * 0.4166666567325592f;
    //   float _813 = exp2(_812);
    //   float _814 = _813 * 1.0549999475479126f;
    //   float _815 = _814 + -0.054999999701976776f;
    //   _819 = _815;
    // } else {
    //   float _817 = _805 * 12.923210144042969f;
    //   _819 = _817;
    // }
    // bool _820 = !(_806 >= 0.0030399328097701073f);
    // if (!_820) {
    //   float _822 = abs(_806);
    //   float _823 = log2(_822);
    //   float _824 = _823 * 0.4166666567325592f;
    //   float _825 = exp2(_824);
    //   float _826 = _825 * 1.0549999475479126f;
    //   float _827 = _826 + -0.054999999701976776f;
    //   _831 = _827;
    // } else {
    //   float _829 = _806 * 12.923210144042969f;
    //   _831 = _829;
    // }
    // bool _832 = !(_807 >= 0.0030399328097701073f);
    // if (!_832) {
    //   float _834 = abs(_807);
    //   float _835 = log2(_834);
    //   float _836 = _835 * 0.4166666567325592f;
    //   float _837 = exp2(_836);
    //   float _838 = _837 * 1.0549999475479126f;
    //   float _839 = _838 + -0.054999999701976776f;
    //   _912 = _819;
    //   _913 = _831;
    //   _914 = _839;
    // } else {
    //   float _841 = _807 * 12.923210144042969f;
    //   _912 = _819;
    //   _913 = _831;
    //   _914 = _841;
    // }
    _912 = renodx::color::srgb::EncodeSafe(_797);
    _913 = renodx::color::srgb::EncodeSafe(_800);
    _914 = renodx::color::srgb::EncodeSafe(_803);

  } else {
    float _843 = saturate(_797);
    float _844 = saturate(_800);
    float _845 = saturate(_803);
    bool _846 = ((uint)(cb1_018w) == -2);
    if (!_846) {
      bool _848 = !(_843 >= 0.0030399328097701073f);
      if (!_848) {
        float _850 = abs(_843);
        float _851 = log2(_850);
        float _852 = _851 * 0.4166666567325592f;
        float _853 = exp2(_852);
        float _854 = _853 * 1.0549999475479126f;
        float _855 = _854 + -0.054999999701976776f;
        _859 = _855;
      } else {
        float _857 = _843 * 12.923210144042969f;
        _859 = _857;
      }
      bool _860 = !(_844 >= 0.0030399328097701073f);
      if (!_860) {
        float _862 = abs(_844);
        float _863 = log2(_862);
        float _864 = _863 * 0.4166666567325592f;
        float _865 = exp2(_864);
        float _866 = _865 * 1.0549999475479126f;
        float _867 = _866 + -0.054999999701976776f;
        _871 = _867;
      } else {
        float _869 = _844 * 12.923210144042969f;
        _871 = _869;
      }
      bool _872 = !(_845 >= 0.0030399328097701073f);
      if (!_872) {
        float _874 = abs(_845);
        float _875 = log2(_874);
        float _876 = _875 * 0.4166666567325592f;
        float _877 = exp2(_876);
        float _878 = _877 * 1.0549999475479126f;
        float _879 = _878 + -0.054999999701976776f;
        _883 = _859;
        _884 = _871;
        _885 = _879;
      } else {
        float _881 = _845 * 12.923210144042969f;
        _883 = _859;
        _884 = _871;
        _885 = _881;
      }
    } else {
      _883 = _843;
      _884 = _844;
      _885 = _845;
    }
    float _890 = abs(_883);
    float _891 = abs(_884);
    float _892 = abs(_885);
    float _893 = log2(_890);
    float _894 = log2(_891);
    float _895 = log2(_892);
    float _896 = _893 * cb2_000z;
    float _897 = _894 * cb2_000z;
    float _898 = _895 * cb2_000z;
    float _899 = exp2(_896);
    float _900 = exp2(_897);
    float _901 = exp2(_898);
    float _902 = _899 * cb2_000y;
    float _903 = _900 * cb2_000y;
    float _904 = _901 * cb2_000y;
    float _905 = _902 + cb2_000x;
    float _906 = _903 + cb2_000x;
    float _907 = _904 + cb2_000x;
    float _908 = saturate(_905);
    float _909 = saturate(_906);
    float _910 = saturate(_907);
    _912 = _908;
    _913 = _909;
    _914 = _910;
  }
  float _915 = dot(float3(_912, _913, _914), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _912;
  SV_Target.y = _913;
  SV_Target.z = _914;
  SV_Target.w = _915;
  SV_Target_1.x = _915;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
