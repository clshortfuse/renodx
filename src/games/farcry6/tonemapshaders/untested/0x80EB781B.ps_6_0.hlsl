#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _30 = cb2_015x * TEXCOORD0_centroid.x;
  float _31 = cb2_015y * TEXCOORD0_centroid.y;
  float _34 = _30 + cb2_015z;
  float _35 = _31 + cb2_015w;
  float4 _36 = t8.SampleLevel(s0_space2, float2(_34, _35), 0.0f);
  float _40 = saturate(_36.x);
  float _41 = saturate(_36.z);
  float _44 = cb2_026x * _41;
  float _45 = _40 * 6.283199787139893f;
  float _46 = cos(_45);
  float _47 = sin(_45);
  float _48 = _44 * _46;
  float _49 = _47 * _44;
  float _50 = 1.0f - _36.y;
  float _51 = saturate(_50);
  float _52 = _48 * _51;
  float _53 = _49 * _51;
  float _54 = _52 + TEXCOORD0_centroid.x;
  float _55 = _53 + TEXCOORD0_centroid.y;
  float4 _56 = t1.SampleLevel(s4_space2, float2(_54, _55), 0.0f);
  float _60 = max(_56.x, 0.0f);
  float _61 = max(_56.y, 0.0f);
  float _62 = max(_56.z, 0.0f);
  float _63 = min(_60, 65000.0f);
  float _64 = min(_61, 65000.0f);
  float _65 = min(_62, 65000.0f);
  float4 _66 = t4.SampleLevel(s2_space2, float2(_54, _55), 0.0f);
  float _71 = max(_66.x, 0.0f);
  float _72 = max(_66.y, 0.0f);
  float _73 = max(_66.z, 0.0f);
  float _74 = max(_66.w, 0.0f);
  float _75 = min(_71, 5000.0f);
  float _76 = min(_72, 5000.0f);
  float _77 = min(_73, 5000.0f);
  float _78 = min(_74, 5000.0f);
  float _81 = _25.x * cb0_028z;
  float _82 = _81 + cb0_028x;
  float _83 = cb2_027w / _82;
  float _84 = 1.0f - _83;
  float _85 = abs(_84);
  float _87 = cb2_027y * _85;
  float _89 = _87 - cb2_027z;
  float _90 = saturate(_89);
  float _91 = max(_90, _78);
  float _92 = saturate(_91);
  float _96 = cb2_006x * _54;
  float _97 = cb2_006y * _55;
  float _100 = _96 + cb2_006z;
  float _101 = _97 + cb2_006w;
  float _105 = cb2_007x * _54;
  float _106 = cb2_007y * _55;
  float _109 = _105 + cb2_007z;
  float _110 = _106 + cb2_007w;
  float _114 = cb2_008x * _54;
  float _115 = cb2_008y * _55;
  float _118 = _114 + cb2_008z;
  float _119 = _115 + cb2_008w;
  float4 _120 = t1.SampleLevel(s2_space2, float2(_100, _101), 0.0f);
  float _122 = max(_120.x, 0.0f);
  float _123 = min(_122, 65000.0f);
  float4 _124 = t1.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _126 = max(_124.y, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t1.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _130 = max(_128.z, 0.0f);
  float _131 = min(_130, 65000.0f);
  float4 _132 = t4.SampleLevel(s2_space2, float2(_100, _101), 0.0f);
  float _134 = max(_132.x, 0.0f);
  float _135 = min(_134, 5000.0f);
  float4 _136 = t4.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _138 = max(_136.y, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t4.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _142 = max(_140.z, 0.0f);
  float _143 = min(_142, 5000.0f);
  float4 _144 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _150 = cb2_005x * _144.x;
  float _151 = cb2_005x * _144.y;
  float _152 = cb2_005x * _144.z;
  float _153 = _123 - _63;
  float _154 = _127 - _64;
  float _155 = _131 - _65;
  float _156 = _150 * _153;
  float _157 = _151 * _154;
  float _158 = _152 * _155;
  float _159 = _156 + _63;
  float _160 = _157 + _64;
  float _161 = _158 + _65;
  float _162 = _135 - _75;
  float _163 = _139 - _76;
  float _164 = _143 - _77;
  float _165 = _150 * _162;
  float _166 = _151 * _163;
  float _167 = _152 * _164;
  float _168 = _165 + _75;
  float _169 = _166 + _76;
  float _170 = _167 + _77;
  float4 _171 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _175 = _168 - _159;
  float _176 = _169 - _160;
  float _177 = _170 - _161;
  float _178 = _175 * _92;
  float _179 = _176 * _92;
  float _180 = _177 * _92;
  float _181 = _178 + _159;
  float _182 = _179 + _160;
  float _183 = _180 + _161;
  float _184 = dot(float3(_181, _182, _183), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _188 = t0[0].SExposureData_020;
  float _190 = t0[0].SExposureData_004;
  float _192 = cb2_018x * 0.5f;
  float _193 = _192 * cb2_018y;
  float _194 = _190.x - _193;
  float _195 = cb2_018y * cb2_018x;
  float _196 = 1.0f / _195;
  float _197 = _194 * _196;
  float _198 = _184 / _188.x;
  float _199 = _198 * 5464.01611328125f;
  float _200 = _199 + 9.99999993922529e-09f;
  float _201 = log2(_200);
  float _202 = _201 - _194;
  float _203 = _202 * _196;
  float _204 = saturate(_203);
  float2 _205 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _204), 0.0f);
  float _208 = max(_205.y, 1.0000000116860974e-07f);
  float _209 = _205.x / _208;
  float _210 = _209 + _197;
  float _211 = _210 / _196;
  float _212 = _211 - _190.x;
  float _213 = -0.0f - _212;
  float _215 = _213 - cb2_027x;
  float _216 = max(0.0f, _215);
  float _218 = cb2_026z * _216;
  float _219 = _212 - cb2_027x;
  float _220 = max(0.0f, _219);
  float _222 = cb2_026w * _220;
  bool _223 = (_212 < 0.0f);
  float _224 = select(_223, _218, _222);
  float _225 = exp2(_224);
  float _226 = _225 * _181;
  float _227 = _225 * _182;
  float _228 = _225 * _183;
  float _233 = cb2_024y * _171.x;
  float _234 = cb2_024z * _171.y;
  float _235 = cb2_024w * _171.z;
  float _236 = _233 + _226;
  float _237 = _234 + _227;
  float _238 = _235 + _228;
  float _243 = _236 * cb2_025x;
  float _244 = _237 * cb2_025y;
  float _245 = _238 * cb2_025z;
  float _246 = dot(float3(_243, _244, _245), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _247 = t0[0].SExposureData_012;
  float _249 = _246 * 5464.01611328125f;
  float _250 = _249 * _247.x;
  float _251 = _250 + 9.99999993922529e-09f;
  float _252 = log2(_251);
  float _253 = _252 + 16.929765701293945f;
  float _254 = _253 * 0.05734497308731079f;
  float _255 = saturate(_254);
  float _256 = _255 * _255;
  float _257 = _255 * 2.0f;
  float _258 = 3.0f - _257;
  float _259 = _256 * _258;
  float _260 = _244 * 0.8450999855995178f;
  float _261 = _245 * 0.14589999616146088f;
  float _262 = _260 + _261;
  float _263 = _262 * 2.4890189170837402f;
  float _264 = _262 * 0.3754962384700775f;
  float _265 = _262 * 2.811495304107666f;
  float _266 = _262 * 5.519708156585693f;
  float _267 = _246 - _263;
  float _268 = _259 * _267;
  float _269 = _268 + _263;
  float _270 = _259 * 0.5f;
  float _271 = _270 + 0.5f;
  float _272 = _271 * _267;
  float _273 = _272 + _263;
  float _274 = _243 - _264;
  float _275 = _244 - _265;
  float _276 = _245 - _266;
  float _277 = _271 * _274;
  float _278 = _271 * _275;
  float _279 = _271 * _276;
  float _280 = _277 + _264;
  float _281 = _278 + _265;
  float _282 = _279 + _266;
  float _283 = 1.0f / _273;
  float _284 = _269 * _283;
  float _285 = _284 * _280;
  float _286 = _284 * _281;
  float _287 = _284 * _282;
  float _291 = cb2_020x * TEXCOORD0_centroid.x;
  float _292 = cb2_020y * TEXCOORD0_centroid.y;
  float _295 = _291 + cb2_020z;
  float _296 = _292 + cb2_020w;
  float _299 = dot(float2(_295, _296), float2(_295, _296));
  float _300 = 1.0f - _299;
  float _301 = saturate(_300);
  float _302 = log2(_301);
  float _303 = _302 * cb2_021w;
  float _304 = exp2(_303);
  float _308 = _285 - cb2_021x;
  float _309 = _286 - cb2_021y;
  float _310 = _287 - cb2_021z;
  float _311 = _308 * _304;
  float _312 = _309 * _304;
  float _313 = _310 * _304;
  float _314 = _311 + cb2_021x;
  float _315 = _312 + cb2_021y;
  float _316 = _313 + cb2_021z;
  float _317 = t0[0].SExposureData_000;
  float _319 = max(_188.x, 0.0010000000474974513f);
  float _320 = 1.0f / _319;
  float _321 = _320 * _317.x;
  bool _324 = ((uint)(cb2_069y) == 0);
  float _330;
  float _331;
  float _332;
  float _386;
  float _387;
  float _388;
  float _419;
  float _420;
  float _421;
  float _522;
  float _523;
  float _524;
  float _549;
  float _561;
  float _589;
  float _601;
  float _613;
  float _614;
  float _615;
  float _642;
  float _643;
  float _644;
  if (!_324) {
    float _326 = _321 * _314;
    float _327 = _321 * _315;
    float _328 = _321 * _316;
    _330 = _326;
    _331 = _327;
    _332 = _328;
  } else {
    _330 = _314;
    _331 = _315;
    _332 = _316;
  }
  float _333 = _330 * 0.6130970120429993f;
  float _334 = mad(0.33952298760414124f, _331, _333);
  float _335 = mad(0.04737899824976921f, _332, _334);
  float _336 = _330 * 0.07019399851560593f;
  float _337 = mad(0.9163540005683899f, _331, _336);
  float _338 = mad(0.013451999984681606f, _332, _337);
  float _339 = _330 * 0.02061600051820278f;
  float _340 = mad(0.10956999659538269f, _331, _339);
  float _341 = mad(0.8698149919509888f, _332, _340);
  float _342 = log2(_335);
  float _343 = log2(_338);
  float _344 = log2(_341);
  float _345 = _342 * 0.04211956635117531f;
  float _346 = _343 * 0.04211956635117531f;
  float _347 = _344 * 0.04211956635117531f;
  float _348 = _345 + 0.6252607107162476f;
  float _349 = _346 + 0.6252607107162476f;
  float _350 = _347 + 0.6252607107162476f;
  float4 _351 = t6.SampleLevel(s2_space2, float3(_348, _349, _350), 0.0f);
  bool _357 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_357 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _361 = cb2_017x * _351.x;
    float _362 = cb2_017x * _351.y;
    float _363 = cb2_017x * _351.z;
    float _365 = _361 + cb2_017y;
    float _366 = _362 + cb2_017y;
    float _367 = _363 + cb2_017y;
    float _368 = exp2(_365);
    float _369 = exp2(_366);
    float _370 = exp2(_367);
    float _371 = _368 + 1.0f;
    float _372 = _369 + 1.0f;
    float _373 = _370 + 1.0f;
    float _374 = 1.0f / _371;
    float _375 = 1.0f / _372;
    float _376 = 1.0f / _373;
    float _378 = cb2_017z * _374;
    float _379 = cb2_017z * _375;
    float _380 = cb2_017z * _376;
    float _382 = _378 + cb2_017w;
    float _383 = _379 + cb2_017w;
    float _384 = _380 + cb2_017w;
    _386 = _382;
    _387 = _383;
    _388 = _384;
  } else {
    _386 = _351.x;
    _387 = _351.y;
    _388 = _351.z;
  }
  float _389 = _386 * 23.0f;
  float _390 = _389 + -14.473931312561035f;
  float _391 = exp2(_390);
  float _392 = _387 * 23.0f;
  float _393 = _392 + -14.473931312561035f;
  float _394 = exp2(_393);
  float _395 = _388 * 23.0f;
  float _396 = _395 + -14.473931312561035f;
  float _397 = exp2(_396);
  float _404 = cb2_016x - _391;
  float _405 = cb2_016y - _394;
  float _406 = cb2_016z - _397;
  float _407 = _404 * cb2_016w;
  float _408 = _405 * cb2_016w;
  float _409 = _406 * cb2_016w;
  float _410 = _407 + _391;
  float _411 = _408 + _394;
  float _412 = _409 + _397;
  if (_357 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _415 = cb2_024x * _410;
    float _416 = cb2_024x * _411;
    float _417 = cb2_024x * _412;
    _419 = _415;
    _420 = _416;
    _421 = _417;
  } else {
    _419 = _410;
    _420 = _411;
    _421 = _412;
  }
  float _422 = _419 * 0.9708889722824097f;
  float _423 = mad(0.026962999254465103f, _420, _422);
  float _424 = mad(0.002148000057786703f, _421, _423);
  float _425 = _419 * 0.01088900025933981f;
  float _426 = mad(0.9869629740715027f, _420, _425);
  float _427 = mad(0.002148000057786703f, _421, _426);
  float _428 = mad(0.026962999254465103f, _420, _425);
  float _429 = mad(0.9621480107307434f, _421, _428);
  if (_357) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _434 = cb1_018y * 0.10000000149011612f;
        float _435 = log2(cb1_018z);
        float _436 = _435 + -13.287712097167969f;
        float _437 = _436 * 1.4929734468460083f;
        float _438 = _437 + 18.0f;
        float _439 = exp2(_438);
        float _440 = _439 * 0.18000000715255737f;
        float _441 = abs(_440);
        float _442 = log2(_441);
        float _443 = _442 * 1.5f;
        float _444 = exp2(_443);
        float _445 = _444 * _434;
        float _446 = _445 / cb1_018z;
        float _447 = _446 + -0.07636754959821701f;
        float _448 = _442 * 1.2750000953674316f;
        float _449 = exp2(_448);
        float _450 = _449 * 0.07636754959821701f;
        float _451 = cb1_018y * 0.011232397519052029f;
        float _452 = _451 * _444;
        float _453 = _452 / cb1_018z;
        float _454 = _450 - _453;
        float _455 = _449 + -0.11232396960258484f;
        float _456 = _455 * _434;
        float _457 = _456 / cb1_018z;
        float _458 = _457 * cb1_018z;
        float _459 = abs(_424);
        float _460 = abs(_427);
        float _461 = abs(_429);
        float _462 = log2(_459);
        float _463 = log2(_460);
        float _464 = log2(_461);
        float _465 = _462 * 1.5f;
        float _466 = _463 * 1.5f;
        float _467 = _464 * 1.5f;
        float _468 = exp2(_465);
        float _469 = exp2(_466);
        float _470 = exp2(_467);
        float _471 = _468 * _458;
        float _472 = _469 * _458;
        float _473 = _470 * _458;
        float _474 = _462 * 1.2750000953674316f;
        float _475 = _463 * 1.2750000953674316f;
        float _476 = _464 * 1.2750000953674316f;
        float _477 = exp2(_474);
        float _478 = exp2(_475);
        float _479 = exp2(_476);
        float _480 = _477 * _447;
        float _481 = _478 * _447;
        float _482 = _479 * _447;
        float _483 = _480 + _454;
        float _484 = _481 + _454;
        float _485 = _482 + _454;
        float _486 = _471 / _483;
        float _487 = _472 / _484;
        float _488 = _473 / _485;
        float _489 = _486 * 9.999999747378752e-05f;
        float _490 = _487 * 9.999999747378752e-05f;
        float _491 = _488 * 9.999999747378752e-05f;
        float _492 = 5000.0f / cb1_018y;
        float _493 = _489 * _492;
        float _494 = _490 * _492;
        float _495 = _491 * _492;
        _522 = _493;
        _523 = _494;
        _524 = _495;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_424, _427, _429));
      _522 = tonemapped.x, _523 = tonemapped.y, _524 = tonemapped.z;
    }
      } else {
        float _497 = _424 + 0.020616600289940834f;
        float _498 = _427 + 0.020616600289940834f;
        float _499 = _429 + 0.020616600289940834f;
        float _500 = _497 * _424;
        float _501 = _498 * _427;
        float _502 = _499 * _429;
        float _503 = _500 + -7.456949970219284e-05f;
        float _504 = _501 + -7.456949970219284e-05f;
        float _505 = _502 + -7.456949970219284e-05f;
        float _506 = _424 * 0.9837960004806519f;
        float _507 = _427 * 0.9837960004806519f;
        float _508 = _429 * 0.9837960004806519f;
        float _509 = _506 + 0.4336790144443512f;
        float _510 = _507 + 0.4336790144443512f;
        float _511 = _508 + 0.4336790144443512f;
        float _512 = _509 * _424;
        float _513 = _510 * _427;
        float _514 = _511 * _429;
        float _515 = _512 + 0.24617899954319f;
        float _516 = _513 + 0.24617899954319f;
        float _517 = _514 + 0.24617899954319f;
        float _518 = _503 / _515;
        float _519 = _504 / _516;
        float _520 = _505 / _517;
        _522 = _518;
        _523 = _519;
        _524 = _520;
      }
      float _525 = _522 * 1.6047500371932983f;
      float _526 = mad(-0.5310800075531006f, _523, _525);
      float _527 = mad(-0.07366999983787537f, _524, _526);
      float _528 = _522 * -0.10208000242710114f;
      float _529 = mad(1.1081299781799316f, _523, _528);
      float _530 = mad(-0.006049999967217445f, _524, _529);
      float _531 = _522 * -0.0032599999103695154f;
      float _532 = mad(-0.07275000214576721f, _523, _531);
      float _533 = mad(1.0760200023651123f, _524, _532);
      if (_357) {
        // float _535 = max(_527, 0.0f);
        // float _536 = max(_530, 0.0f);
        // float _537 = max(_533, 0.0f);
        // bool _538 = !(_535 >= 0.0030399328097701073f);
        // if (!_538) {
        //   float _540 = abs(_535);
        //   float _541 = log2(_540);
        //   float _542 = _541 * 0.4166666567325592f;
        //   float _543 = exp2(_542);
        //   float _544 = _543 * 1.0549999475479126f;
        //   float _545 = _544 + -0.054999999701976776f;
        //   _549 = _545;
        // } else {
        //   float _547 = _535 * 12.923210144042969f;
        //   _549 = _547;
        // }
        // bool _550 = !(_536 >= 0.0030399328097701073f);
        // if (!_550) {
        //   float _552 = abs(_536);
        //   float _553 = log2(_552);
        //   float _554 = _553 * 0.4166666567325592f;
        //   float _555 = exp2(_554);
        //   float _556 = _555 * 1.0549999475479126f;
        //   float _557 = _556 + -0.054999999701976776f;
        //   _561 = _557;
        // } else {
        //   float _559 = _536 * 12.923210144042969f;
        //   _561 = _559;
        // }
        // bool _562 = !(_537 >= 0.0030399328097701073f);
        // if (!_562) {
        //   float _564 = abs(_537);
        //   float _565 = log2(_564);
        //   float _566 = _565 * 0.4166666567325592f;
        //   float _567 = exp2(_566);
        //   float _568 = _567 * 1.0549999475479126f;
        //   float _569 = _568 + -0.054999999701976776f;
        //   _642 = _549;
        //   _643 = _561;
        //   _644 = _569;
        // } else {
        //   float _571 = _537 * 12.923210144042969f;
        //   _642 = _549;
        //   _643 = _561;
        //   _644 = _571;
        // }
        _642 = renodx::color::srgb::EncodeSafe(_527);
        _643 = renodx::color::srgb::EncodeSafe(_530);
        _644 = renodx::color::srgb::EncodeSafe(_533);

      } else {
        float _573 = saturate(_527);
        float _574 = saturate(_530);
        float _575 = saturate(_533);
        bool _576 = ((uint)(cb1_018w) == -2);
        if (!_576) {
          bool _578 = !(_573 >= 0.0030399328097701073f);
          if (!_578) {
            float _580 = abs(_573);
            float _581 = log2(_580);
            float _582 = _581 * 0.4166666567325592f;
            float _583 = exp2(_582);
            float _584 = _583 * 1.0549999475479126f;
            float _585 = _584 + -0.054999999701976776f;
            _589 = _585;
          } else {
            float _587 = _573 * 12.923210144042969f;
            _589 = _587;
          }
          bool _590 = !(_574 >= 0.0030399328097701073f);
          if (!_590) {
            float _592 = abs(_574);
            float _593 = log2(_592);
            float _594 = _593 * 0.4166666567325592f;
            float _595 = exp2(_594);
            float _596 = _595 * 1.0549999475479126f;
            float _597 = _596 + -0.054999999701976776f;
            _601 = _597;
          } else {
            float _599 = _574 * 12.923210144042969f;
            _601 = _599;
          }
          bool _602 = !(_575 >= 0.0030399328097701073f);
          if (!_602) {
            float _604 = abs(_575);
            float _605 = log2(_604);
            float _606 = _605 * 0.4166666567325592f;
            float _607 = exp2(_606);
            float _608 = _607 * 1.0549999475479126f;
            float _609 = _608 + -0.054999999701976776f;
            _613 = _589;
            _614 = _601;
            _615 = _609;
          } else {
            float _611 = _575 * 12.923210144042969f;
            _613 = _589;
            _614 = _601;
            _615 = _611;
          }
        } else {
          _613 = _573;
          _614 = _574;
          _615 = _575;
        }
        float _620 = abs(_613);
        float _621 = abs(_614);
        float _622 = abs(_615);
        float _623 = log2(_620);
        float _624 = log2(_621);
        float _625 = log2(_622);
        float _626 = _623 * cb2_000z;
        float _627 = _624 * cb2_000z;
        float _628 = _625 * cb2_000z;
        float _629 = exp2(_626);
        float _630 = exp2(_627);
        float _631 = exp2(_628);
        float _632 = _629 * cb2_000y;
        float _633 = _630 * cb2_000y;
        float _634 = _631 * cb2_000y;
        float _635 = _632 + cb2_000x;
        float _636 = _633 + cb2_000x;
        float _637 = _634 + cb2_000x;
        float _638 = saturate(_635);
        float _639 = saturate(_636);
        float _640 = saturate(_637);
        _642 = _638;
        _643 = _639;
        _644 = _640;
      }
      float _648 = cb2_023x * TEXCOORD0_centroid.x;
      float _649 = cb2_023y * TEXCOORD0_centroid.y;
      float _652 = _648 + cb2_023z;
      float _653 = _649 + cb2_023w;
      float4 _656 = t10.SampleLevel(s0_space2, float2(_652, _653), 0.0f);
      float _658 = _656.x + -0.5f;
      float _659 = _658 * cb2_022x;
      float _660 = _659 + 0.5f;
      float _661 = _660 * 2.0f;
      float _662 = _661 * _642;
      float _663 = _661 * _643;
      float _664 = _661 * _644;
      float _668 = float((uint)(cb2_019z));
      float _669 = float((uint)(cb2_019w));
      float _670 = _668 + SV_Position.x;
      float _671 = _669 + SV_Position.y;
      uint _672 = uint(_670);
      uint _673 = uint(_671);
      uint _676 = cb2_019x + -1u;
      uint _677 = cb2_019y + -1u;
      int _678 = _672 & _676;
      int _679 = _673 & _677;
      float4 _680 = t3.Load(int3(_678, _679, 0));
      float _684 = _680.x * 2.0f;
      float _685 = _680.y * 2.0f;
      float _686 = _680.z * 2.0f;
      float _687 = _684 + -1.0f;
      float _688 = _685 + -1.0f;
      float _689 = _686 + -1.0f;
      float _690 = _687 * cb2_025w;
      float _691 = _688 * cb2_025w;
      float _692 = _689 * cb2_025w;
      float _693 = _690 + _662;
      float _694 = _691 + _663;
      float _695 = _692 + _664;
      float _696 = dot(float3(_693, _694, _695), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _693;
      SV_Target.y = _694;
      SV_Target.z = _695;
      SV_Target.w = _696;
      SV_Target_1.x = _696;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
