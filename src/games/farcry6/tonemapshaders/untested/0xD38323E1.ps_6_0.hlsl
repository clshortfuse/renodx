#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t8.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _58 = _56 + TEXCOORD0_centroid.x;
  float _59 = _57 + TEXCOORD0_centroid.y;
  float4 _60 = t8.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  bool _62 = (_60.y > 0.0f);
  float _63 = select(_62, TEXCOORD0_centroid.x, _58);
  float _64 = select(_62, TEXCOORD0_centroid.y, _59);
  float4 _65 = t1.SampleLevel(s4_space2, float2(_63, _64), 0.0f);
  float _69 = max(_65.x, 0.0f);
  float _70 = max(_65.y, 0.0f);
  float _71 = max(_65.z, 0.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float _74 = min(_71, 65000.0f);
  float4 _75 = t4.SampleLevel(s2_space2, float2(_63, _64), 0.0f);
  float _80 = max(_75.x, 0.0f);
  float _81 = max(_75.y, 0.0f);
  float _82 = max(_75.z, 0.0f);
  float _83 = max(_75.w, 0.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _87 = min(_83, 5000.0f);
  float _90 = _25.x * cb0_028z;
  float _91 = _90 + cb0_028x;
  float _92 = cb2_027w / _91;
  float _93 = 1.0f - _92;
  float _94 = abs(_93);
  float _96 = cb2_027y * _94;
  float _98 = _96 - cb2_027z;
  float _99 = saturate(_98);
  float _100 = max(_99, _87);
  float _101 = saturate(_100);
  float _105 = cb2_006x * _63;
  float _106 = cb2_006y * _64;
  float _109 = _105 + cb2_006z;
  float _110 = _106 + cb2_006w;
  float _114 = cb2_007x * _63;
  float _115 = cb2_007y * _64;
  float _118 = _114 + cb2_007z;
  float _119 = _115 + cb2_007w;
  float _123 = cb2_008x * _63;
  float _124 = cb2_008y * _64;
  float _127 = _123 + cb2_008z;
  float _128 = _124 + cb2_008w;
  float4 _129 = t1.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _131 = max(_129.x, 0.0f);
  float _132 = min(_131, 65000.0f);
  float4 _133 = t1.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _135 = max(_133.y, 0.0f);
  float _136 = min(_135, 65000.0f);
  float4 _137 = t1.SampleLevel(s2_space2, float2(_127, _128), 0.0f);
  float _139 = max(_137.z, 0.0f);
  float _140 = min(_139, 65000.0f);
  float4 _141 = t4.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _143 = max(_141.x, 0.0f);
  float _144 = min(_143, 5000.0f);
  float4 _145 = t4.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _147 = max(_145.y, 0.0f);
  float _148 = min(_147, 5000.0f);
  float4 _149 = t4.SampleLevel(s2_space2, float2(_127, _128), 0.0f);
  float _151 = max(_149.z, 0.0f);
  float _152 = min(_151, 5000.0f);
  float4 _153 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _159 = cb2_005x * _153.x;
  float _160 = cb2_005x * _153.y;
  float _161 = cb2_005x * _153.z;
  float _162 = _132 - _72;
  float _163 = _136 - _73;
  float _164 = _140 - _74;
  float _165 = _159 * _162;
  float _166 = _160 * _163;
  float _167 = _161 * _164;
  float _168 = _165 + _72;
  float _169 = _166 + _73;
  float _170 = _167 + _74;
  float _171 = _144 - _84;
  float _172 = _148 - _85;
  float _173 = _152 - _86;
  float _174 = _159 * _171;
  float _175 = _160 * _172;
  float _176 = _161 * _173;
  float _177 = _174 + _84;
  float _178 = _175 + _85;
  float _179 = _176 + _86;
  float4 _180 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _184 = _177 - _168;
  float _185 = _178 - _169;
  float _186 = _179 - _170;
  float _187 = _184 * _101;
  float _188 = _185 * _101;
  float _189 = _186 * _101;
  float _190 = _187 + _168;
  float _191 = _188 + _169;
  float _192 = _189 + _170;
  float _193 = dot(float3(_190, _191, _192), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _197 = t0[0].SExposureData_020;
  float _199 = t0[0].SExposureData_004;
  float _201 = cb2_018x * 0.5f;
  float _202 = _201 * cb2_018y;
  float _203 = _199.x - _202;
  float _204 = cb2_018y * cb2_018x;
  float _205 = 1.0f / _204;
  float _206 = _203 * _205;
  float _207 = _193 / _197.x;
  float _208 = _207 * 5464.01611328125f;
  float _209 = _208 + 9.99999993922529e-09f;
  float _210 = log2(_209);
  float _211 = _210 - _203;
  float _212 = _211 * _205;
  float _213 = saturate(_212);
  float2 _214 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _213), 0.0f);
  float _217 = max(_214.y, 1.0000000116860974e-07f);
  float _218 = _214.x / _217;
  float _219 = _218 + _206;
  float _220 = _219 / _205;
  float _221 = _220 - _199.x;
  float _222 = -0.0f - _221;
  float _224 = _222 - cb2_027x;
  float _225 = max(0.0f, _224);
  float _228 = cb2_026z * _225;
  float _229 = _221 - cb2_027x;
  float _230 = max(0.0f, _229);
  float _232 = cb2_026w * _230;
  bool _233 = (_221 < 0.0f);
  float _234 = select(_233, _228, _232);
  float _235 = exp2(_234);
  float _236 = _235 * _190;
  float _237 = _235 * _191;
  float _238 = _235 * _192;
  float _243 = cb2_024y * _180.x;
  float _244 = cb2_024z * _180.y;
  float _245 = cb2_024w * _180.z;
  float _246 = _243 + _236;
  float _247 = _244 + _237;
  float _248 = _245 + _238;
  float _253 = _246 * cb2_025x;
  float _254 = _247 * cb2_025y;
  float _255 = _248 * cb2_025z;
  float _256 = dot(float3(_253, _254, _255), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _257 = t0[0].SExposureData_012;
  float _259 = _256 * 5464.01611328125f;
  float _260 = _259 * _257.x;
  float _261 = _260 + 9.99999993922529e-09f;
  float _262 = log2(_261);
  float _263 = _262 + 16.929765701293945f;
  float _264 = _263 * 0.05734497308731079f;
  float _265 = saturate(_264);
  float _266 = _265 * _265;
  float _267 = _265 * 2.0f;
  float _268 = 3.0f - _267;
  float _269 = _266 * _268;
  float _270 = _254 * 0.8450999855995178f;
  float _271 = _255 * 0.14589999616146088f;
  float _272 = _270 + _271;
  float _273 = _272 * 2.4890189170837402f;
  float _274 = _272 * 0.3754962384700775f;
  float _275 = _272 * 2.811495304107666f;
  float _276 = _272 * 5.519708156585693f;
  float _277 = _256 - _273;
  float _278 = _269 * _277;
  float _279 = _278 + _273;
  float _280 = _269 * 0.5f;
  float _281 = _280 + 0.5f;
  float _282 = _281 * _277;
  float _283 = _282 + _273;
  float _284 = _253 - _274;
  float _285 = _254 - _275;
  float _286 = _255 - _276;
  float _287 = _281 * _284;
  float _288 = _281 * _285;
  float _289 = _281 * _286;
  float _290 = _287 + _274;
  float _291 = _288 + _275;
  float _292 = _289 + _276;
  float _293 = 1.0f / _283;
  float _294 = _279 * _293;
  float _295 = _294 * _290;
  float _296 = _294 * _291;
  float _297 = _294 * _292;
  float _301 = cb2_020x * TEXCOORD0_centroid.x;
  float _302 = cb2_020y * TEXCOORD0_centroid.y;
  float _305 = _301 + cb2_020z;
  float _306 = _302 + cb2_020w;
  float _309 = dot(float2(_305, _306), float2(_305, _306));
  float _310 = 1.0f - _309;
  float _311 = saturate(_310);
  float _312 = log2(_311);
  float _313 = _312 * cb2_021w;
  float _314 = exp2(_313);
  float _318 = _295 - cb2_021x;
  float _319 = _296 - cb2_021y;
  float _320 = _297 - cb2_021z;
  float _321 = _318 * _314;
  float _322 = _319 * _314;
  float _323 = _320 * _314;
  float _324 = _321 + cb2_021x;
  float _325 = _322 + cb2_021y;
  float _326 = _323 + cb2_021z;
  float _327 = t0[0].SExposureData_000;
  float _329 = max(_197.x, 0.0010000000474974513f);
  float _330 = 1.0f / _329;
  float _331 = _330 * _327.x;
  bool _334 = ((uint)(cb2_069y) == 0);
  float _340;
  float _341;
  float _342;
  float _396;
  float _397;
  float _398;
  float _429;
  float _430;
  float _431;
  float _581;
  float _618;
  float _619;
  float _620;
  float _649;
  float _650;
  float _651;
  float _732;
  float _733;
  float _734;
  float _740;
  float _741;
  float _742;
  float _756;
  float _757;
  float _758;
  float _783;
  float _795;
  float _823;
  float _835;
  float _847;
  float _848;
  float _849;
  float _876;
  float _877;
  float _878;
  if (!_334) {
    float _336 = _331 * _324;
    float _337 = _331 * _325;
    float _338 = _331 * _326;
    _340 = _336;
    _341 = _337;
    _342 = _338;
  } else {
    _340 = _324;
    _341 = _325;
    _342 = _326;
  }
  float _343 = _340 * 0.6130970120429993f;
  float _344 = mad(0.33952298760414124f, _341, _343);
  float _345 = mad(0.04737899824976921f, _342, _344);
  float _346 = _340 * 0.07019399851560593f;
  float _347 = mad(0.9163540005683899f, _341, _346);
  float _348 = mad(0.013451999984681606f, _342, _347);
  float _349 = _340 * 0.02061600051820278f;
  float _350 = mad(0.10956999659538269f, _341, _349);
  float _351 = mad(0.8698149919509888f, _342, _350);
  float _352 = log2(_345);
  float _353 = log2(_348);
  float _354 = log2(_351);
  float _355 = _352 * 0.04211956635117531f;
  float _356 = _353 * 0.04211956635117531f;
  float _357 = _354 * 0.04211956635117531f;
  float _358 = _355 + 0.6252607107162476f;
  float _359 = _356 + 0.6252607107162476f;
  float _360 = _357 + 0.6252607107162476f;
  float4 _361 = t6.SampleLevel(s2_space2, float3(_358, _359, _360), 0.0f);
  bool _367 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_367 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _371 = cb2_017x * _361.x;
    float _372 = cb2_017x * _361.y;
    float _373 = cb2_017x * _361.z;
    float _375 = _371 + cb2_017y;
    float _376 = _372 + cb2_017y;
    float _377 = _373 + cb2_017y;
    float _378 = exp2(_375);
    float _379 = exp2(_376);
    float _380 = exp2(_377);
    float _381 = _378 + 1.0f;
    float _382 = _379 + 1.0f;
    float _383 = _380 + 1.0f;
    float _384 = 1.0f / _381;
    float _385 = 1.0f / _382;
    float _386 = 1.0f / _383;
    float _388 = cb2_017z * _384;
    float _389 = cb2_017z * _385;
    float _390 = cb2_017z * _386;
    float _392 = _388 + cb2_017w;
    float _393 = _389 + cb2_017w;
    float _394 = _390 + cb2_017w;
    _396 = _392;
    _397 = _393;
    _398 = _394;
  } else {
    _396 = _361.x;
    _397 = _361.y;
    _398 = _361.z;
  }
  float _399 = _396 * 23.0f;
  float _400 = _399 + -14.473931312561035f;
  float _401 = exp2(_400);
  float _402 = _397 * 23.0f;
  float _403 = _402 + -14.473931312561035f;
  float _404 = exp2(_403);
  float _405 = _398 * 23.0f;
  float _406 = _405 + -14.473931312561035f;
  float _407 = exp2(_406);
  float _414 = cb2_016x - _401;
  float _415 = cb2_016y - _404;
  float _416 = cb2_016z - _407;
  float _417 = _414 * cb2_016w;
  float _418 = _415 * cb2_016w;
  float _419 = _416 * cb2_016w;
  float _420 = _417 + _401;
  float _421 = _418 + _404;
  float _422 = _419 + _407;
  if (_367 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _425 = cb2_024x * _420;
    float _426 = cb2_024x * _421;
    float _427 = cb2_024x * _422;
    _429 = _425;
    _430 = _426;
    _431 = _427;
  } else {
    _429 = _420;
    _430 = _421;
    _431 = _422;
  }
  float _434 = _429 * 0.9708889722824097f;
  float _435 = mad(0.026962999254465103f, _430, _434);
  float _436 = mad(0.002148000057786703f, _431, _435);
  float _437 = _429 * 0.01088900025933981f;
  float _438 = mad(0.9869629740715027f, _430, _437);
  float _439 = mad(0.002148000057786703f, _431, _438);
  float _440 = mad(0.026962999254465103f, _430, _437);
  float _441 = mad(0.9621480107307434f, _431, _440);
  float _442 = max(_436, 0.0f);
  float _443 = max(_439, 0.0f);
  float _444 = max(_441, 0.0f);
  float _445 = min(_442, cb2_095y);
  float _446 = min(_443, cb2_095y);
  float _447 = min(_444, cb2_095y);
  bool _450 = ((uint)(cb2_095x) == 0);
  bool _453 = ((uint)(cb2_094w) == 0);
  bool _455 = ((uint)(cb2_094z) == 0);
  bool _457 = ((uint)(cb2_094y) != 0);
  bool _459 = ((uint)(cb2_094x) == 0);
  bool _461 = ((uint)(cb2_069z) != 0);
  float _508 = asfloat((uint)(cb2_075y));
  float _509 = asfloat((uint)(cb2_075z));
  float _510 = asfloat((uint)(cb2_075w));
  float _511 = asfloat((uint)(cb2_074z));
  float _512 = asfloat((uint)(cb2_074w));
  float _513 = asfloat((uint)(cb2_075x));
  float _514 = asfloat((uint)(cb2_073w));
  float _515 = asfloat((uint)(cb2_074x));
  float _516 = asfloat((uint)(cb2_074y));
  float _517 = asfloat((uint)(cb2_077x));
  float _518 = asfloat((uint)(cb2_077y));
  float _519 = asfloat((uint)(cb2_079x));
  float _520 = asfloat((uint)(cb2_079y));
  float _521 = asfloat((uint)(cb2_079z));
  float _522 = asfloat((uint)(cb2_078y));
  float _523 = asfloat((uint)(cb2_078z));
  float _524 = asfloat((uint)(cb2_078w));
  float _525 = asfloat((uint)(cb2_077z));
  float _526 = asfloat((uint)(cb2_077w));
  float _527 = asfloat((uint)(cb2_078x));
  float _528 = asfloat((uint)(cb2_072y));
  float _529 = asfloat((uint)(cb2_072z));
  float _530 = asfloat((uint)(cb2_072w));
  float _531 = asfloat((uint)(cb2_071x));
  float _532 = asfloat((uint)(cb2_071y));
  float _533 = asfloat((uint)(cb2_076x));
  float _534 = asfloat((uint)(cb2_070w));
  float _535 = asfloat((uint)(cb2_070x));
  float _536 = asfloat((uint)(cb2_070y));
  float _537 = asfloat((uint)(cb2_070z));
  float _538 = asfloat((uint)(cb2_073x));
  float _539 = asfloat((uint)(cb2_073y));
  float _540 = asfloat((uint)(cb2_073z));
  float _541 = asfloat((uint)(cb2_071z));
  float _542 = asfloat((uint)(cb2_071w));
  float _543 = asfloat((uint)(cb2_072x));
  float _544 = max(_446, _447);
  float _545 = max(_445, _544);
  float _546 = 1.0f / _545;
  float _547 = _546 * _445;
  float _548 = _546 * _446;
  float _549 = _546 * _447;
  float _550 = abs(_547);
  float _551 = log2(_550);
  float _552 = _551 * _535;
  float _553 = exp2(_552);
  float _554 = abs(_548);
  float _555 = log2(_554);
  float _556 = _555 * _536;
  float _557 = exp2(_556);
  float _558 = abs(_549);
  float _559 = log2(_558);
  float _560 = _559 * _537;
  float _561 = exp2(_560);
  if (_457) {
    float _564 = asfloat((uint)(cb2_076w));
    float _566 = asfloat((uint)(cb2_076z));
    float _568 = asfloat((uint)(cb2_076y));
    float _569 = _566 * _446;
    float _570 = _568 * _445;
    float _571 = _564 * _447;
    float _572 = _570 + _571;
    float _573 = _572 + _569;
    _581 = _573;
  } else {
    float _575 = _542 * _446;
    float _576 = _541 * _445;
    float _577 = _543 * _447;
    float _578 = _575 + _576;
    float _579 = _578 + _577;
    _581 = _579;
  }
  float _582 = abs(_581);
  float _583 = log2(_582);
  float _584 = _583 * _534;
  float _585 = exp2(_584);
  float _586 = log2(_585);
  float _587 = _586 * _533;
  float _588 = exp2(_587);
  float _589 = select(_461, _588, _585);
  float _590 = _589 * _531;
  float _591 = _590 + _532;
  float _592 = 1.0f / _591;
  float _593 = _592 * _585;
  if (_457) {
    if (!_459) {
      float _596 = _553 * _525;
      float _597 = _557 * _526;
      float _598 = _561 * _527;
      float _599 = _597 + _596;
      float _600 = _599 + _598;
      float _601 = _557 * _523;
      float _602 = _553 * _522;
      float _603 = _561 * _524;
      float _604 = _601 + _602;
      float _605 = _604 + _603;
      float _606 = _561 * _521;
      float _607 = _557 * _520;
      float _608 = _553 * _519;
      float _609 = _607 + _608;
      float _610 = _609 + _606;
      float _611 = max(_605, _610);
      float _612 = max(_600, _611);
      float _613 = 1.0f / _612;
      float _614 = _613 * _600;
      float _615 = _613 * _605;
      float _616 = _613 * _610;
      _618 = _614;
      _619 = _615;
      _620 = _616;
    } else {
      _618 = _553;
      _619 = _557;
      _620 = _561;
    }
    float _621 = _618 * _518;
    float _622 = exp2(_621);
    float _623 = _622 * _517;
    float _624 = saturate(_623);
    float _625 = _618 * _517;
    float _626 = _618 - _625;
    float _627 = saturate(_626);
    float _628 = max(_517, _627);
    float _629 = min(_628, _624);
    float _630 = _619 * _518;
    float _631 = exp2(_630);
    float _632 = _631 * _517;
    float _633 = saturate(_632);
    float _634 = _619 * _517;
    float _635 = _619 - _634;
    float _636 = saturate(_635);
    float _637 = max(_517, _636);
    float _638 = min(_637, _633);
    float _639 = _620 * _518;
    float _640 = exp2(_639);
    float _641 = _640 * _517;
    float _642 = saturate(_641);
    float _643 = _620 * _517;
    float _644 = _620 - _643;
    float _645 = saturate(_644);
    float _646 = max(_517, _645);
    float _647 = min(_646, _642);
    _649 = _629;
    _650 = _638;
    _651 = _647;
  } else {
    _649 = _553;
    _650 = _557;
    _651 = _561;
  }
  float _652 = _649 * _541;
  float _653 = _650 * _542;
  float _654 = _653 + _652;
  float _655 = _651 * _543;
  float _656 = _654 + _655;
  float _657 = 1.0f / _656;
  float _658 = _657 * _593;
  float _659 = saturate(_658);
  float _660 = _659 * _649;
  float _661 = saturate(_660);
  float _662 = _659 * _650;
  float _663 = saturate(_662);
  float _664 = _659 * _651;
  float _665 = saturate(_664);
  float _666 = _661 * _528;
  float _667 = _528 - _666;
  float _668 = _663 * _529;
  float _669 = _529 - _668;
  float _670 = _665 * _530;
  float _671 = _530 - _670;
  float _672 = _665 * _543;
  float _673 = _661 * _541;
  float _674 = _663 * _542;
  float _675 = _593 - _673;
  float _676 = _675 - _674;
  float _677 = _676 - _672;
  float _678 = saturate(_677);
  float _679 = _669 * _542;
  float _680 = _667 * _541;
  float _681 = _671 * _543;
  float _682 = _679 + _680;
  float _683 = _682 + _681;
  float _684 = 1.0f / _683;
  float _685 = _684 * _678;
  float _686 = _685 * _667;
  float _687 = _686 + _661;
  float _688 = saturate(_687);
  float _689 = _685 * _669;
  float _690 = _689 + _663;
  float _691 = saturate(_690);
  float _692 = _685 * _671;
  float _693 = _692 + _665;
  float _694 = saturate(_693);
  float _695 = _694 * _543;
  float _696 = _688 * _541;
  float _697 = _691 * _542;
  float _698 = _593 - _696;
  float _699 = _698 - _697;
  float _700 = _699 - _695;
  float _701 = saturate(_700);
  float _702 = _701 * _538;
  float _703 = _702 + _688;
  float _704 = saturate(_703);
  float _705 = _701 * _539;
  float _706 = _705 + _691;
  float _707 = saturate(_706);
  float _708 = _701 * _540;
  float _709 = _708 + _694;
  float _710 = saturate(_709);
  if (!_455) {
    float _712 = _704 * _514;
    float _713 = _707 * _515;
    float _714 = _710 * _516;
    float _715 = _713 + _712;
    float _716 = _715 + _714;
    float _717 = _707 * _512;
    float _718 = _704 * _511;
    float _719 = _710 * _513;
    float _720 = _717 + _718;
    float _721 = _720 + _719;
    float _722 = _710 * _510;
    float _723 = _707 * _509;
    float _724 = _704 * _508;
    float _725 = _723 + _724;
    float _726 = _725 + _722;
    if (!_453) {
      float _728 = saturate(_716);
      float _729 = saturate(_721);
      float _730 = saturate(_726);
      _732 = _730;
      _733 = _729;
      _734 = _728;
    } else {
      _732 = _726;
      _733 = _721;
      _734 = _716;
    }
  } else {
    _732 = _710;
    _733 = _707;
    _734 = _704;
  }
  if (!_450) {
    float _736 = _734 * _514;
    float _737 = _733 * _514;
    float _738 = _732 * _514;
    _740 = _738;
    _741 = _737;
    _742 = _736;
  } else {
    _740 = _732;
    _741 = _733;
    _742 = _734;
  }
  if (_367) {
    float _746 = cb1_018z * 9.999999747378752e-05f;
    float _747 = _746 * _742;
    float _748 = _746 * _741;
    float _749 = _746 * _740;
    float _751 = 5000.0f / cb1_018y;
    float _752 = _747 * _751;
    float _753 = _748 * _751;
    float _754 = _749 * _751;
    _756 = _752;
    _757 = _753;
    _758 = _754;
  } else {
    _756 = _742;
    _757 = _741;
    _758 = _740;
  }
  float _759 = _756 * 1.6047500371932983f;
  float _760 = mad(-0.5310800075531006f, _757, _759);
  float _761 = mad(-0.07366999983787537f, _758, _760);
  float _762 = _756 * -0.10208000242710114f;
  float _763 = mad(1.1081299781799316f, _757, _762);
  float _764 = mad(-0.006049999967217445f, _758, _763);
  float _765 = _756 * -0.0032599999103695154f;
  float _766 = mad(-0.07275000214576721f, _757, _765);
  float _767 = mad(1.0760200023651123f, _758, _766);
  if (_367) {
    // float _769 = max(_761, 0.0f);
    // float _770 = max(_764, 0.0f);
    // float _771 = max(_767, 0.0f);
    // bool _772 = !(_769 >= 0.0030399328097701073f);
    // if (!_772) {
    //   float _774 = abs(_769);
    //   float _775 = log2(_774);
    //   float _776 = _775 * 0.4166666567325592f;
    //   float _777 = exp2(_776);
    //   float _778 = _777 * 1.0549999475479126f;
    //   float _779 = _778 + -0.054999999701976776f;
    //   _783 = _779;
    // } else {
    //   float _781 = _769 * 12.923210144042969f;
    //   _783 = _781;
    // }
    // bool _784 = !(_770 >= 0.0030399328097701073f);
    // if (!_784) {
    //   float _786 = abs(_770);
    //   float _787 = log2(_786);
    //   float _788 = _787 * 0.4166666567325592f;
    //   float _789 = exp2(_788);
    //   float _790 = _789 * 1.0549999475479126f;
    //   float _791 = _790 + -0.054999999701976776f;
    //   _795 = _791;
    // } else {
    //   float _793 = _770 * 12.923210144042969f;
    //   _795 = _793;
    // }
    // bool _796 = !(_771 >= 0.0030399328097701073f);
    // if (!_796) {
    //   float _798 = abs(_771);
    //   float _799 = log2(_798);
    //   float _800 = _799 * 0.4166666567325592f;
    //   float _801 = exp2(_800);
    //   float _802 = _801 * 1.0549999475479126f;
    //   float _803 = _802 + -0.054999999701976776f;
    //   _876 = _783;
    //   _877 = _795;
    //   _878 = _803;
    // } else {
    //   float _805 = _771 * 12.923210144042969f;
    //   _876 = _783;
    //   _877 = _795;
    //   _878 = _805;
    // }
    _876 = renodx::color::srgb::EncodeSafe(_761);
    _877 = renodx::color::srgb::EncodeSafe(_764);
    _878 = renodx::color::srgb::EncodeSafe(_767);

  } else {
    float _807 = saturate(_761);
    float _808 = saturate(_764);
    float _809 = saturate(_767);
    bool _810 = ((uint)(cb1_018w) == -2);
    if (!_810) {
      bool _812 = !(_807 >= 0.0030399328097701073f);
      if (!_812) {
        float _814 = abs(_807);
        float _815 = log2(_814);
        float _816 = _815 * 0.4166666567325592f;
        float _817 = exp2(_816);
        float _818 = _817 * 1.0549999475479126f;
        float _819 = _818 + -0.054999999701976776f;
        _823 = _819;
      } else {
        float _821 = _807 * 12.923210144042969f;
        _823 = _821;
      }
      bool _824 = !(_808 >= 0.0030399328097701073f);
      if (!_824) {
        float _826 = abs(_808);
        float _827 = log2(_826);
        float _828 = _827 * 0.4166666567325592f;
        float _829 = exp2(_828);
        float _830 = _829 * 1.0549999475479126f;
        float _831 = _830 + -0.054999999701976776f;
        _835 = _831;
      } else {
        float _833 = _808 * 12.923210144042969f;
        _835 = _833;
      }
      bool _836 = !(_809 >= 0.0030399328097701073f);
      if (!_836) {
        float _838 = abs(_809);
        float _839 = log2(_838);
        float _840 = _839 * 0.4166666567325592f;
        float _841 = exp2(_840);
        float _842 = _841 * 1.0549999475479126f;
        float _843 = _842 + -0.054999999701976776f;
        _847 = _823;
        _848 = _835;
        _849 = _843;
      } else {
        float _845 = _809 * 12.923210144042969f;
        _847 = _823;
        _848 = _835;
        _849 = _845;
      }
    } else {
      _847 = _807;
      _848 = _808;
      _849 = _809;
    }
    float _854 = abs(_847);
    float _855 = abs(_848);
    float _856 = abs(_849);
    float _857 = log2(_854);
    float _858 = log2(_855);
    float _859 = log2(_856);
    float _860 = _857 * cb2_000z;
    float _861 = _858 * cb2_000z;
    float _862 = _859 * cb2_000z;
    float _863 = exp2(_860);
    float _864 = exp2(_861);
    float _865 = exp2(_862);
    float _866 = _863 * cb2_000y;
    float _867 = _864 * cb2_000y;
    float _868 = _865 * cb2_000y;
    float _869 = _866 + cb2_000x;
    float _870 = _867 + cb2_000x;
    float _871 = _868 + cb2_000x;
    float _872 = saturate(_869);
    float _873 = saturate(_870);
    float _874 = saturate(_871);
    _876 = _872;
    _877 = _873;
    _878 = _874;
  }
  float _882 = cb2_023x * TEXCOORD0_centroid.x;
  float _883 = cb2_023y * TEXCOORD0_centroid.y;
  float _886 = _882 + cb2_023z;
  float _887 = _883 + cb2_023w;
  float4 _890 = t10.SampleLevel(s0_space2, float2(_886, _887), 0.0f);
  float _892 = _890.x + -0.5f;
  float _893 = _892 * cb2_022x;
  float _894 = _893 + 0.5f;
  float _895 = _894 * 2.0f;
  float _896 = _895 * _876;
  float _897 = _895 * _877;
  float _898 = _895 * _878;
  float _902 = float((uint)(cb2_019z));
  float _903 = float((uint)(cb2_019w));
  float _904 = _902 + SV_Position.x;
  float _905 = _903 + SV_Position.y;
  uint _906 = uint(_904);
  uint _907 = uint(_905);
  uint _910 = cb2_019x + -1u;
  uint _911 = cb2_019y + -1u;
  int _912 = _906 & _910;
  int _913 = _907 & _911;
  float4 _914 = t3.Load(int3(_912, _913, 0));
  float _918 = _914.x * 2.0f;
  float _919 = _914.y * 2.0f;
  float _920 = _914.z * 2.0f;
  float _921 = _918 + -1.0f;
  float _922 = _919 + -1.0f;
  float _923 = _920 + -1.0f;
  float _924 = _921 * cb2_025w;
  float _925 = _922 * cb2_025w;
  float _926 = _923 * cb2_025w;
  float _927 = _924 + _896;
  float _928 = _925 + _897;
  float _929 = _926 + _898;
  float _930 = dot(float3(_927, _928, _929), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _927;
  SV_Target.y = _928;
  SV_Target.z = _929;
  SV_Target.w = _930;
  SV_Target_1.x = _930;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
