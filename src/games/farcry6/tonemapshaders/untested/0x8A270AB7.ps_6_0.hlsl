#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

Texture3D<float2> t9 : register(t9);

Texture2D<float4> t10 : register(t10);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _25 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _27 = t8.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _31 = _27.x * 6.283199787139893f;
  float _32 = cos(_31);
  float _33 = sin(_31);
  float _34 = _32 * _27.z;
  float _35 = _33 * _27.z;
  float _36 = _34 + TEXCOORD0_centroid.x;
  float _37 = _35 + TEXCOORD0_centroid.y;
  float _38 = _36 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _34;
  float _43 = _37 * 10.0f;
  float _44 = 10.0f - _43;
  float _45 = min(_43, _44);
  float _46 = saturate(_45);
  float _47 = _46 * _35;
  float _48 = _42 + TEXCOORD0_centroid.x;
  float _49 = _47 + TEXCOORD0_centroid.y;
  float4 _50 = t8.SampleLevel(s2_space2, float2(_48, _49), 0.0f);
  float _52 = _50.w * _42;
  float _53 = _50.w * _47;
  float _54 = 1.0f - _27.y;
  float _55 = saturate(_54);
  float _56 = _52 * _55;
  float _57 = _53 * _55;
  float _58 = _56 + TEXCOORD0_centroid.x;
  float _59 = _57 + TEXCOORD0_centroid.y;
  float4 _60 = t8.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  bool _62 = (_60.y > 0.0f);
  float _63 = select(_62, TEXCOORD0_centroid.x, _58);
  float _64 = select(_62, TEXCOORD0_centroid.y, _59);
  float4 _65 = t1.SampleLevel(s4_space2, float2(_63, _64), 0.0f);
  float _69 = max(_65.x, 0.0f);
  float _70 = max(_65.y, 0.0f);
  float _71 = max(_65.z, 0.0f);
  float _72 = min(_69, 65000.0f);
  float _73 = min(_70, 65000.0f);
  float _74 = min(_71, 65000.0f);
  float4 _75 = t4.SampleLevel(s2_space2, float2(_63, _64), 0.0f);
  float _80 = max(_75.x, 0.0f);
  float _81 = max(_75.y, 0.0f);
  float _82 = max(_75.z, 0.0f);
  float _83 = max(_75.w, 0.0f);
  float _84 = min(_80, 5000.0f);
  float _85 = min(_81, 5000.0f);
  float _86 = min(_82, 5000.0f);
  float _87 = min(_83, 5000.0f);
  float _90 = _25.x * cb0_028z;
  float _91 = _90 + cb0_028x;
  float _92 = cb2_027w / _91;
  float _93 = 1.0f - _92;
  float _94 = abs(_93);
  float _96 = cb2_027y * _94;
  float _98 = _96 - cb2_027z;
  float _99 = saturate(_98);
  float _100 = max(_99, _87);
  float _101 = saturate(_100);
  float _105 = cb2_006x * _63;
  float _106 = cb2_006y * _64;
  float _109 = _105 + cb2_006z;
  float _110 = _106 + cb2_006w;
  float _114 = cb2_007x * _63;
  float _115 = cb2_007y * _64;
  float _118 = _114 + cb2_007z;
  float _119 = _115 + cb2_007w;
  float _123 = cb2_008x * _63;
  float _124 = cb2_008y * _64;
  float _127 = _123 + cb2_008z;
  float _128 = _124 + cb2_008w;
  float4 _129 = t1.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _131 = max(_129.x, 0.0f);
  float _132 = min(_131, 65000.0f);
  float4 _133 = t1.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _135 = max(_133.y, 0.0f);
  float _136 = min(_135, 65000.0f);
  float4 _137 = t1.SampleLevel(s2_space2, float2(_127, _128), 0.0f);
  float _139 = max(_137.z, 0.0f);
  float _140 = min(_139, 65000.0f);
  float4 _141 = t4.SampleLevel(s2_space2, float2(_109, _110), 0.0f);
  float _143 = max(_141.x, 0.0f);
  float _144 = min(_143, 5000.0f);
  float4 _145 = t4.SampleLevel(s2_space2, float2(_118, _119), 0.0f);
  float _147 = max(_145.y, 0.0f);
  float _148 = min(_147, 5000.0f);
  float4 _149 = t4.SampleLevel(s2_space2, float2(_127, _128), 0.0f);
  float _151 = max(_149.z, 0.0f);
  float _152 = min(_151, 5000.0f);
  float4 _153 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _159 = cb2_005x * _153.x;
  float _160 = cb2_005x * _153.y;
  float _161 = cb2_005x * _153.z;
  float _162 = _132 - _72;
  float _163 = _136 - _73;
  float _164 = _140 - _74;
  float _165 = _159 * _162;
  float _166 = _160 * _163;
  float _167 = _161 * _164;
  float _168 = _165 + _72;
  float _169 = _166 + _73;
  float _170 = _167 + _74;
  float _171 = _144 - _84;
  float _172 = _148 - _85;
  float _173 = _152 - _86;
  float _174 = _159 * _171;
  float _175 = _160 * _172;
  float _176 = _161 * _173;
  float _177 = _174 + _84;
  float _178 = _175 + _85;
  float _179 = _176 + _86;
  float4 _180 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _184 = _177 - _168;
  float _185 = _178 - _169;
  float _186 = _179 - _170;
  float _187 = _184 * _101;
  float _188 = _185 * _101;
  float _189 = _186 * _101;
  float _190 = _187 + _168;
  float _191 = _188 + _169;
  float _192 = _189 + _170;
  float _193 = dot(float3(_190, _191, _192), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _197 = t0[0].SExposureData_020;
  float _199 = t0[0].SExposureData_004;
  float _201 = cb2_018x * 0.5f;
  float _202 = _201 * cb2_018y;
  float _203 = _199.x - _202;
  float _204 = cb2_018y * cb2_018x;
  float _205 = 1.0f / _204;
  float _206 = _203 * _205;
  float _207 = _193 / _197.x;
  float _208 = _207 * 5464.01611328125f;
  float _209 = _208 + 9.99999993922529e-09f;
  float _210 = log2(_209);
  float _211 = _210 - _203;
  float _212 = _211 * _205;
  float _213 = saturate(_212);
  float2 _214 = t9.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _213), 0.0f);
  float _217 = max(_214.y, 1.0000000116860974e-07f);
  float _218 = _214.x / _217;
  float _219 = _218 + _206;
  float _220 = _219 / _205;
  float _221 = _220 - _199.x;
  float _222 = -0.0f - _221;
  float _224 = _222 - cb2_027x;
  float _225 = max(0.0f, _224);
  float _228 = cb2_026z * _225;
  float _229 = _221 - cb2_027x;
  float _230 = max(0.0f, _229);
  float _232 = cb2_026w * _230;
  bool _233 = (_221 < 0.0f);
  float _234 = select(_233, _228, _232);
  float _235 = exp2(_234);
  float _236 = _235 * _190;
  float _237 = _235 * _191;
  float _238 = _235 * _192;
  float _243 = cb2_024y * _180.x;
  float _244 = cb2_024z * _180.y;
  float _245 = cb2_024w * _180.z;
  float _246 = _243 + _236;
  float _247 = _244 + _237;
  float _248 = _245 + _238;
  float _253 = _246 * cb2_025x;
  float _254 = _247 * cb2_025y;
  float _255 = _248 * cb2_025z;
  float _256 = dot(float3(_253, _254, _255), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _257 = t0[0].SExposureData_012;
  float _259 = _256 * 5464.01611328125f;
  float _260 = _259 * _257.x;
  float _261 = _260 + 9.99999993922529e-09f;
  float _262 = log2(_261);
  float _263 = _262 + 16.929765701293945f;
  float _264 = _263 * 0.05734497308731079f;
  float _265 = saturate(_264);
  float _266 = _265 * _265;
  float _267 = _265 * 2.0f;
  float _268 = 3.0f - _267;
  float _269 = _266 * _268;
  float _270 = _254 * 0.8450999855995178f;
  float _271 = _255 * 0.14589999616146088f;
  float _272 = _270 + _271;
  float _273 = _272 * 2.4890189170837402f;
  float _274 = _272 * 0.3754962384700775f;
  float _275 = _272 * 2.811495304107666f;
  float _276 = _272 * 5.519708156585693f;
  float _277 = _256 - _273;
  float _278 = _269 * _277;
  float _279 = _278 + _273;
  float _280 = _269 * 0.5f;
  float _281 = _280 + 0.5f;
  float _282 = _281 * _277;
  float _283 = _282 + _273;
  float _284 = _253 - _274;
  float _285 = _254 - _275;
  float _286 = _255 - _276;
  float _287 = _281 * _284;
  float _288 = _281 * _285;
  float _289 = _281 * _286;
  float _290 = _287 + _274;
  float _291 = _288 + _275;
  float _292 = _289 + _276;
  float _293 = 1.0f / _283;
  float _294 = _279 * _293;
  float _295 = _294 * _290;
  float _296 = _294 * _291;
  float _297 = _294 * _292;
  float _301 = cb2_020x * TEXCOORD0_centroid.x;
  float _302 = cb2_020y * TEXCOORD0_centroid.y;
  float _305 = _301 + cb2_020z;
  float _306 = _302 + cb2_020w;
  float _309 = dot(float2(_305, _306), float2(_305, _306));
  float _310 = 1.0f - _309;
  float _311 = saturate(_310);
  float _312 = log2(_311);
  float _313 = _312 * cb2_021w;
  float _314 = exp2(_313);
  float _318 = _295 - cb2_021x;
  float _319 = _296 - cb2_021y;
  float _320 = _297 - cb2_021z;
  float _321 = _318 * _314;
  float _322 = _319 * _314;
  float _323 = _320 * _314;
  float _324 = _321 + cb2_021x;
  float _325 = _322 + cb2_021y;
  float _326 = _323 + cb2_021z;
  float _327 = t0[0].SExposureData_000;
  float _329 = max(_197.x, 0.0010000000474974513f);
  float _330 = 1.0f / _329;
  float _331 = _330 * _327.x;
  bool _334 = ((uint)(cb2_069y) == 0);
  float _340;
  float _341;
  float _342;
  float _396;
  float _397;
  float _398;
  float _474;
  float _475;
  float _476;
  float _626;
  float _663;
  float _664;
  float _665;
  float _694;
  float _695;
  float _696;
  float _777;
  float _778;
  float _779;
  float _785;
  float _786;
  float _787;
  float _801;
  float _802;
  float _803;
  float _828;
  float _840;
  float _868;
  float _880;
  float _892;
  float _893;
  float _894;
  float _921;
  float _922;
  float _923;
  if (!_334) {
    float _336 = _331 * _324;
    float _337 = _331 * _325;
    float _338 = _331 * _326;
    _340 = _336;
    _341 = _337;
    _342 = _338;
  } else {
    _340 = _324;
    _341 = _325;
    _342 = _326;
  }
  float _343 = _340 * 0.6130970120429993f;
  float _344 = mad(0.33952298760414124f, _341, _343);
  float _345 = mad(0.04737899824976921f, _342, _344);
  float _346 = _340 * 0.07019399851560593f;
  float _347 = mad(0.9163540005683899f, _341, _346);
  float _348 = mad(0.013451999984681606f, _342, _347);
  float _349 = _340 * 0.02061600051820278f;
  float _350 = mad(0.10956999659538269f, _341, _349);
  float _351 = mad(0.8698149919509888f, _342, _350);
  float _352 = log2(_345);
  float _353 = log2(_348);
  float _354 = log2(_351);
  float _355 = _352 * 0.04211956635117531f;
  float _356 = _353 * 0.04211956635117531f;
  float _357 = _354 * 0.04211956635117531f;
  float _358 = _355 + 0.6252607107162476f;
  float _359 = _356 + 0.6252607107162476f;
  float _360 = _357 + 0.6252607107162476f;
  float4 _361 = t6.SampleLevel(s2_space2, float3(_358, _359, _360), 0.0f);
  bool _367 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_367 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _371 = cb2_017x * _361.x;
    float _372 = cb2_017x * _361.y;
    float _373 = cb2_017x * _361.z;
    float _375 = _371 + cb2_017y;
    float _376 = _372 + cb2_017y;
    float _377 = _373 + cb2_017y;
    float _378 = exp2(_375);
    float _379 = exp2(_376);
    float _380 = exp2(_377);
    float _381 = _378 + 1.0f;
    float _382 = _379 + 1.0f;
    float _383 = _380 + 1.0f;
    float _384 = 1.0f / _381;
    float _385 = 1.0f / _382;
    float _386 = 1.0f / _383;
    float _388 = cb2_017z * _384;
    float _389 = cb2_017z * _385;
    float _390 = cb2_017z * _386;
    float _392 = _388 + cb2_017w;
    float _393 = _389 + cb2_017w;
    float _394 = _390 + cb2_017w;
    _396 = _392;
    _397 = _393;
    _398 = _394;
  } else {
    _396 = _361.x;
    _397 = _361.y;
    _398 = _361.z;
  }
  float _399 = _396 * 23.0f;
  float _400 = _399 + -14.473931312561035f;
  float _401 = exp2(_400);
  float _402 = _397 * 23.0f;
  float _403 = _402 + -14.473931312561035f;
  float _404 = exp2(_403);
  float _405 = _398 * 23.0f;
  float _406 = _405 + -14.473931312561035f;
  float _407 = exp2(_406);
  float _408 = dot(float3(_401, _404, _407), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _413 = dot(float3(_401, _404, _407), float3(_401, _404, _407));
  float _414 = rsqrt(_413);
  float _415 = _414 * _401;
  float _416 = _414 * _404;
  float _417 = _414 * _407;
  float _418 = cb2_001x - _415;
  float _419 = cb2_001y - _416;
  float _420 = cb2_001z - _417;
  float _421 = dot(float3(_418, _419, _420), float3(_418, _419, _420));
  float _424 = cb2_002z * _421;
  float _426 = _424 + cb2_002w;
  float _427 = saturate(_426);
  float _429 = cb2_002x * _427;
  float _430 = _408 - _401;
  float _431 = _408 - _404;
  float _432 = _408 - _407;
  float _433 = _429 * _430;
  float _434 = _429 * _431;
  float _435 = _429 * _432;
  float _436 = _433 + _401;
  float _437 = _434 + _404;
  float _438 = _435 + _407;
  float _440 = cb2_002y * _427;
  float _441 = 0.10000000149011612f - _436;
  float _442 = 0.10000000149011612f - _437;
  float _443 = 0.10000000149011612f - _438;
  float _444 = _441 * _440;
  float _445 = _442 * _440;
  float _446 = _443 * _440;
  float _447 = _444 + _436;
  float _448 = _445 + _437;
  float _449 = _446 + _438;
  float _450 = saturate(_447);
  float _451 = saturate(_448);
  float _452 = saturate(_449);
  float _459 = cb2_016x - _450;
  float _460 = cb2_016y - _451;
  float _461 = cb2_016z - _452;
  float _462 = _459 * cb2_016w;
  float _463 = _460 * cb2_016w;
  float _464 = _461 * cb2_016w;
  float _465 = _462 + _450;
  float _466 = _463 + _451;
  float _467 = _464 + _452;
  if (_367 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _470 = cb2_024x * _465;
    float _471 = cb2_024x * _466;
    float _472 = cb2_024x * _467;
    _474 = _470;
    _475 = _471;
    _476 = _472;
  } else {
    _474 = _465;
    _475 = _466;
    _476 = _467;
  }
  float _479 = _474 * 0.9708889722824097f;
  float _480 = mad(0.026962999254465103f, _475, _479);
  float _481 = mad(0.002148000057786703f, _476, _480);
  float _482 = _474 * 0.01088900025933981f;
  float _483 = mad(0.9869629740715027f, _475, _482);
  float _484 = mad(0.002148000057786703f, _476, _483);
  float _485 = mad(0.026962999254465103f, _475, _482);
  float _486 = mad(0.9621480107307434f, _476, _485);
  float _487 = max(_481, 0.0f);
  float _488 = max(_484, 0.0f);
  float _489 = max(_486, 0.0f);
  float _490 = min(_487, cb2_095y);
  float _491 = min(_488, cb2_095y);
  float _492 = min(_489, cb2_095y);
  bool _495 = ((uint)(cb2_095x) == 0);
  bool _498 = ((uint)(cb2_094w) == 0);
  bool _500 = ((uint)(cb2_094z) == 0);
  bool _502 = ((uint)(cb2_094y) != 0);
  bool _504 = ((uint)(cb2_094x) == 0);
  bool _506 = ((uint)(cb2_069z) != 0);
  float _553 = asfloat((uint)(cb2_075y));
  float _554 = asfloat((uint)(cb2_075z));
  float _555 = asfloat((uint)(cb2_075w));
  float _556 = asfloat((uint)(cb2_074z));
  float _557 = asfloat((uint)(cb2_074w));
  float _558 = asfloat((uint)(cb2_075x));
  float _559 = asfloat((uint)(cb2_073w));
  float _560 = asfloat((uint)(cb2_074x));
  float _561 = asfloat((uint)(cb2_074y));
  float _562 = asfloat((uint)(cb2_077x));
  float _563 = asfloat((uint)(cb2_077y));
  float _564 = asfloat((uint)(cb2_079x));
  float _565 = asfloat((uint)(cb2_079y));
  float _566 = asfloat((uint)(cb2_079z));
  float _567 = asfloat((uint)(cb2_078y));
  float _568 = asfloat((uint)(cb2_078z));
  float _569 = asfloat((uint)(cb2_078w));
  float _570 = asfloat((uint)(cb2_077z));
  float _571 = asfloat((uint)(cb2_077w));
  float _572 = asfloat((uint)(cb2_078x));
  float _573 = asfloat((uint)(cb2_072y));
  float _574 = asfloat((uint)(cb2_072z));
  float _575 = asfloat((uint)(cb2_072w));
  float _576 = asfloat((uint)(cb2_071x));
  float _577 = asfloat((uint)(cb2_071y));
  float _578 = asfloat((uint)(cb2_076x));
  float _579 = asfloat((uint)(cb2_070w));
  float _580 = asfloat((uint)(cb2_070x));
  float _581 = asfloat((uint)(cb2_070y));
  float _582 = asfloat((uint)(cb2_070z));
  float _583 = asfloat((uint)(cb2_073x));
  float _584 = asfloat((uint)(cb2_073y));
  float _585 = asfloat((uint)(cb2_073z));
  float _586 = asfloat((uint)(cb2_071z));
  float _587 = asfloat((uint)(cb2_071w));
  float _588 = asfloat((uint)(cb2_072x));
  float _589 = max(_491, _492);
  float _590 = max(_490, _589);
  float _591 = 1.0f / _590;
  float _592 = _591 * _490;
  float _593 = _591 * _491;
  float _594 = _591 * _492;
  float _595 = abs(_592);
  float _596 = log2(_595);
  float _597 = _596 * _580;
  float _598 = exp2(_597);
  float _599 = abs(_593);
  float _600 = log2(_599);
  float _601 = _600 * _581;
  float _602 = exp2(_601);
  float _603 = abs(_594);
  float _604 = log2(_603);
  float _605 = _604 * _582;
  float _606 = exp2(_605);
  if (_502) {
    float _609 = asfloat((uint)(cb2_076w));
    float _611 = asfloat((uint)(cb2_076z));
    float _613 = asfloat((uint)(cb2_076y));
    float _614 = _611 * _491;
    float _615 = _613 * _490;
    float _616 = _609 * _492;
    float _617 = _615 + _616;
    float _618 = _617 + _614;
    _626 = _618;
  } else {
    float _620 = _587 * _491;
    float _621 = _586 * _490;
    float _622 = _588 * _492;
    float _623 = _620 + _621;
    float _624 = _623 + _622;
    _626 = _624;
  }
  float _627 = abs(_626);
  float _628 = log2(_627);
  float _629 = _628 * _579;
  float _630 = exp2(_629);
  float _631 = log2(_630);
  float _632 = _631 * _578;
  float _633 = exp2(_632);
  float _634 = select(_506, _633, _630);
  float _635 = _634 * _576;
  float _636 = _635 + _577;
  float _637 = 1.0f / _636;
  float _638 = _637 * _630;
  if (_502) {
    if (!_504) {
      float _641 = _598 * _570;
      float _642 = _602 * _571;
      float _643 = _606 * _572;
      float _644 = _642 + _641;
      float _645 = _644 + _643;
      float _646 = _602 * _568;
      float _647 = _598 * _567;
      float _648 = _606 * _569;
      float _649 = _646 + _647;
      float _650 = _649 + _648;
      float _651 = _606 * _566;
      float _652 = _602 * _565;
      float _653 = _598 * _564;
      float _654 = _652 + _653;
      float _655 = _654 + _651;
      float _656 = max(_650, _655);
      float _657 = max(_645, _656);
      float _658 = 1.0f / _657;
      float _659 = _658 * _645;
      float _660 = _658 * _650;
      float _661 = _658 * _655;
      _663 = _659;
      _664 = _660;
      _665 = _661;
    } else {
      _663 = _598;
      _664 = _602;
      _665 = _606;
    }
    float _666 = _663 * _563;
    float _667 = exp2(_666);
    float _668 = _667 * _562;
    float _669 = saturate(_668);
    float _670 = _663 * _562;
    float _671 = _663 - _670;
    float _672 = saturate(_671);
    float _673 = max(_562, _672);
    float _674 = min(_673, _669);
    float _675 = _664 * _563;
    float _676 = exp2(_675);
    float _677 = _676 * _562;
    float _678 = saturate(_677);
    float _679 = _664 * _562;
    float _680 = _664 - _679;
    float _681 = saturate(_680);
    float _682 = max(_562, _681);
    float _683 = min(_682, _678);
    float _684 = _665 * _563;
    float _685 = exp2(_684);
    float _686 = _685 * _562;
    float _687 = saturate(_686);
    float _688 = _665 * _562;
    float _689 = _665 - _688;
    float _690 = saturate(_689);
    float _691 = max(_562, _690);
    float _692 = min(_691, _687);
    _694 = _674;
    _695 = _683;
    _696 = _692;
  } else {
    _694 = _598;
    _695 = _602;
    _696 = _606;
  }
  float _697 = _694 * _586;
  float _698 = _695 * _587;
  float _699 = _698 + _697;
  float _700 = _696 * _588;
  float _701 = _699 + _700;
  float _702 = 1.0f / _701;
  float _703 = _702 * _638;
  float _704 = saturate(_703);
  float _705 = _704 * _694;
  float _706 = saturate(_705);
  float _707 = _704 * _695;
  float _708 = saturate(_707);
  float _709 = _704 * _696;
  float _710 = saturate(_709);
  float _711 = _706 * _573;
  float _712 = _573 - _711;
  float _713 = _708 * _574;
  float _714 = _574 - _713;
  float _715 = _710 * _575;
  float _716 = _575 - _715;
  float _717 = _710 * _588;
  float _718 = _706 * _586;
  float _719 = _708 * _587;
  float _720 = _638 - _718;
  float _721 = _720 - _719;
  float _722 = _721 - _717;
  float _723 = saturate(_722);
  float _724 = _714 * _587;
  float _725 = _712 * _586;
  float _726 = _716 * _588;
  float _727 = _724 + _725;
  float _728 = _727 + _726;
  float _729 = 1.0f / _728;
  float _730 = _729 * _723;
  float _731 = _730 * _712;
  float _732 = _731 + _706;
  float _733 = saturate(_732);
  float _734 = _730 * _714;
  float _735 = _734 + _708;
  float _736 = saturate(_735);
  float _737 = _730 * _716;
  float _738 = _737 + _710;
  float _739 = saturate(_738);
  float _740 = _739 * _588;
  float _741 = _733 * _586;
  float _742 = _736 * _587;
  float _743 = _638 - _741;
  float _744 = _743 - _742;
  float _745 = _744 - _740;
  float _746 = saturate(_745);
  float _747 = _746 * _583;
  float _748 = _747 + _733;
  float _749 = saturate(_748);
  float _750 = _746 * _584;
  float _751 = _750 + _736;
  float _752 = saturate(_751);
  float _753 = _746 * _585;
  float _754 = _753 + _739;
  float _755 = saturate(_754);
  if (!_500) {
    float _757 = _749 * _559;
    float _758 = _752 * _560;
    float _759 = _755 * _561;
    float _760 = _758 + _757;
    float _761 = _760 + _759;
    float _762 = _752 * _557;
    float _763 = _749 * _556;
    float _764 = _755 * _558;
    float _765 = _762 + _763;
    float _766 = _765 + _764;
    float _767 = _755 * _555;
    float _768 = _752 * _554;
    float _769 = _749 * _553;
    float _770 = _768 + _769;
    float _771 = _770 + _767;
    if (!_498) {
      float _773 = saturate(_761);
      float _774 = saturate(_766);
      float _775 = saturate(_771);
      _777 = _775;
      _778 = _774;
      _779 = _773;
    } else {
      _777 = _771;
      _778 = _766;
      _779 = _761;
    }
  } else {
    _777 = _755;
    _778 = _752;
    _779 = _749;
  }
  if (!_495) {
    float _781 = _779 * _559;
    float _782 = _778 * _559;
    float _783 = _777 * _559;
    _785 = _783;
    _786 = _782;
    _787 = _781;
  } else {
    _785 = _777;
    _786 = _778;
    _787 = _779;
  }
  if (_367) {
    float _791 = cb1_018z * 9.999999747378752e-05f;
    float _792 = _791 * _787;
    float _793 = _791 * _786;
    float _794 = _791 * _785;
    float _796 = 5000.0f / cb1_018y;
    float _797 = _792 * _796;
    float _798 = _793 * _796;
    float _799 = _794 * _796;
    _801 = _797;
    _802 = _798;
    _803 = _799;
  } else {
    _801 = _787;
    _802 = _786;
    _803 = _785;
  }
  float _804 = _801 * 1.6047500371932983f;
  float _805 = mad(-0.5310800075531006f, _802, _804);
  float _806 = mad(-0.07366999983787537f, _803, _805);
  float _807 = _801 * -0.10208000242710114f;
  float _808 = mad(1.1081299781799316f, _802, _807);
  float _809 = mad(-0.006049999967217445f, _803, _808);
  float _810 = _801 * -0.0032599999103695154f;
  float _811 = mad(-0.07275000214576721f, _802, _810);
  float _812 = mad(1.0760200023651123f, _803, _811);
  if (_367) {
    // float _814 = max(_806, 0.0f);
    // float _815 = max(_809, 0.0f);
    // float _816 = max(_812, 0.0f);
    // bool _817 = !(_814 >= 0.0030399328097701073f);
    // if (!_817) {
    //   float _819 = abs(_814);
    //   float _820 = log2(_819);
    //   float _821 = _820 * 0.4166666567325592f;
    //   float _822 = exp2(_821);
    //   float _823 = _822 * 1.0549999475479126f;
    //   float _824 = _823 + -0.054999999701976776f;
    //   _828 = _824;
    // } else {
    //   float _826 = _814 * 12.923210144042969f;
    //   _828 = _826;
    // }
    // bool _829 = !(_815 >= 0.0030399328097701073f);
    // if (!_829) {
    //   float _831 = abs(_815);
    //   float _832 = log2(_831);
    //   float _833 = _832 * 0.4166666567325592f;
    //   float _834 = exp2(_833);
    //   float _835 = _834 * 1.0549999475479126f;
    //   float _836 = _835 + -0.054999999701976776f;
    //   _840 = _836;
    // } else {
    //   float _838 = _815 * 12.923210144042969f;
    //   _840 = _838;
    // }
    // bool _841 = !(_816 >= 0.0030399328097701073f);
    // if (!_841) {
    //   float _843 = abs(_816);
    //   float _844 = log2(_843);
    //   float _845 = _844 * 0.4166666567325592f;
    //   float _846 = exp2(_845);
    //   float _847 = _846 * 1.0549999475479126f;
    //   float _848 = _847 + -0.054999999701976776f;
    //   _921 = _828;
    //   _922 = _840;
    //   _923 = _848;
    // } else {
    //   float _850 = _816 * 12.923210144042969f;
    //   _921 = _828;
    //   _922 = _840;
    //   _923 = _850;
    // }
    _921 = renodx::color::srgb::EncodeSafe(_806);
    _922 = renodx::color::srgb::EncodeSafe(_809);
    _923 = renodx::color::srgb::EncodeSafe(_812);

  } else {
    float _852 = saturate(_806);
    float _853 = saturate(_809);
    float _854 = saturate(_812);
    bool _855 = ((uint)(cb1_018w) == -2);
    if (!_855) {
      bool _857 = !(_852 >= 0.0030399328097701073f);
      if (!_857) {
        float _859 = abs(_852);
        float _860 = log2(_859);
        float _861 = _860 * 0.4166666567325592f;
        float _862 = exp2(_861);
        float _863 = _862 * 1.0549999475479126f;
        float _864 = _863 + -0.054999999701976776f;
        _868 = _864;
      } else {
        float _866 = _852 * 12.923210144042969f;
        _868 = _866;
      }
      bool _869 = !(_853 >= 0.0030399328097701073f);
      if (!_869) {
        float _871 = abs(_853);
        float _872 = log2(_871);
        float _873 = _872 * 0.4166666567325592f;
        float _874 = exp2(_873);
        float _875 = _874 * 1.0549999475479126f;
        float _876 = _875 + -0.054999999701976776f;
        _880 = _876;
      } else {
        float _878 = _853 * 12.923210144042969f;
        _880 = _878;
      }
      bool _881 = !(_854 >= 0.0030399328097701073f);
      if (!_881) {
        float _883 = abs(_854);
        float _884 = log2(_883);
        float _885 = _884 * 0.4166666567325592f;
        float _886 = exp2(_885);
        float _887 = _886 * 1.0549999475479126f;
        float _888 = _887 + -0.054999999701976776f;
        _892 = _868;
        _893 = _880;
        _894 = _888;
      } else {
        float _890 = _854 * 12.923210144042969f;
        _892 = _868;
        _893 = _880;
        _894 = _890;
      }
    } else {
      _892 = _852;
      _893 = _853;
      _894 = _854;
    }
    float _899 = abs(_892);
    float _900 = abs(_893);
    float _901 = abs(_894);
    float _902 = log2(_899);
    float _903 = log2(_900);
    float _904 = log2(_901);
    float _905 = _902 * cb2_000z;
    float _906 = _903 * cb2_000z;
    float _907 = _904 * cb2_000z;
    float _908 = exp2(_905);
    float _909 = exp2(_906);
    float _910 = exp2(_907);
    float _911 = _908 * cb2_000y;
    float _912 = _909 * cb2_000y;
    float _913 = _910 * cb2_000y;
    float _914 = _911 + cb2_000x;
    float _915 = _912 + cb2_000x;
    float _916 = _913 + cb2_000x;
    float _917 = saturate(_914);
    float _918 = saturate(_915);
    float _919 = saturate(_916);
    _921 = _917;
    _922 = _918;
    _923 = _919;
  }
  float _927 = cb2_023x * TEXCOORD0_centroid.x;
  float _928 = cb2_023y * TEXCOORD0_centroid.y;
  float _931 = _927 + cb2_023z;
  float _932 = _928 + cb2_023w;
  float4 _935 = t10.SampleLevel(s0_space2, float2(_931, _932), 0.0f);
  float _937 = _935.x + -0.5f;
  float _938 = _937 * cb2_022x;
  float _939 = _938 + 0.5f;
  float _940 = _939 * 2.0f;
  float _941 = _940 * _921;
  float _942 = _940 * _922;
  float _943 = _940 * _923;
  float _947 = float((uint)(cb2_019z));
  float _948 = float((uint)(cb2_019w));
  float _949 = _947 + SV_Position.x;
  float _950 = _948 + SV_Position.y;
  uint _951 = uint(_949);
  uint _952 = uint(_950);
  uint _955 = cb2_019x + -1u;
  uint _956 = cb2_019y + -1u;
  int _957 = _951 & _955;
  int _958 = _952 & _956;
  float4 _959 = t3.Load(int3(_957, _958, 0));
  float _963 = _959.x * 2.0f;
  float _964 = _959.y * 2.0f;
  float _965 = _959.z * 2.0f;
  float _966 = _963 + -1.0f;
  float _967 = _964 + -1.0f;
  float _968 = _965 + -1.0f;
  float _969 = _966 * cb2_025w;
  float _970 = _967 * cb2_025w;
  float _971 = _968 * cb2_025w;
  float _972 = _969 + _941;
  float _973 = _970 + _942;
  float _974 = _971 + _943;
  float _975 = dot(float3(_972, _973, _974), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _972;
  SV_Target.y = _973;
  SV_Target.z = _974;
  SV_Target.w = _975;
  SV_Target_1.x = _975;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
