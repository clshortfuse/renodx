#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture3D<float2> t6 : register(t6);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _18 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _20 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _24 = max(_20.x, 0.0f);
  float _25 = max(_20.y, 0.0f);
  float _26 = max(_20.z, 0.0f);
  float _27 = min(_24, 65000.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float4 _30 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _35 = max(_30.x, 0.0f);
  float _36 = max(_30.y, 0.0f);
  float _37 = max(_30.z, 0.0f);
  float _38 = max(_30.w, 0.0f);
  float _39 = min(_35, 5000.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _45 = _18.x * cb0_028z;
  float _46 = _45 + cb0_028x;
  float _47 = cb2_027w / _46;
  float _48 = 1.0f - _47;
  float _49 = abs(_48);
  float _51 = cb2_027y * _49;
  float _53 = _51 - cb2_027z;
  float _54 = saturate(_53);
  float _55 = max(_54, _42);
  float _56 = saturate(_55);
  float4 _57 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _61 = _39 - _27;
  float _62 = _40 - _28;
  float _63 = _41 - _29;
  float _64 = _56 * _61;
  float _65 = _56 * _62;
  float _66 = _56 * _63;
  float _67 = _64 + _27;
  float _68 = _65 + _28;
  float _69 = _66 + _29;
  float _70 = dot(float3(_67, _68, _69), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _74 = t0[0].SExposureData_020;
  float _76 = t0[0].SExposureData_004;
  float _78 = cb2_018x * 0.5f;
  float _79 = _78 * cb2_018y;
  float _80 = _76.x - _79;
  float _81 = cb2_018y * cb2_018x;
  float _82 = 1.0f / _81;
  float _83 = _80 * _82;
  float _84 = _70 / _74.x;
  float _85 = _84 * 5464.01611328125f;
  float _86 = _85 + 9.99999993922529e-09f;
  float _87 = log2(_86);
  float _88 = _87 - _80;
  float _89 = _88 * _82;
  float _90 = saturate(_89);
  float2 _91 = t6.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _90), 0.0f);
  float _94 = max(_91.y, 1.0000000116860974e-07f);
  float _95 = _91.x / _94;
  float _96 = _95 + _83;
  float _97 = _96 / _82;
  float _98 = _97 - _76.x;
  float _99 = -0.0f - _98;
  float _101 = _99 - cb2_027x;
  float _102 = max(0.0f, _101);
  float _105 = cb2_026z * _102;
  float _106 = _98 - cb2_027x;
  float _107 = max(0.0f, _106);
  float _109 = cb2_026w * _107;
  bool _110 = (_98 < 0.0f);
  float _111 = select(_110, _105, _109);
  float _112 = exp2(_111);
  float _113 = _112 * _67;
  float _114 = _112 * _68;
  float _115 = _112 * _69;
  float _120 = cb2_024y * _57.x;
  float _121 = cb2_024z * _57.y;
  float _122 = cb2_024w * _57.z;
  float _123 = _120 + _113;
  float _124 = _121 + _114;
  float _125 = _122 + _115;
  float _130 = _123 * cb2_025x;
  float _131 = _124 * cb2_025y;
  float _132 = _125 * cb2_025z;
  float _133 = dot(float3(_130, _131, _132), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _134 = t0[0].SExposureData_012;
  float _136 = _133 * 5464.01611328125f;
  float _137 = _136 * _134.x;
  float _138 = _137 + 9.99999993922529e-09f;
  float _139 = log2(_138);
  float _140 = _139 + 16.929765701293945f;
  float _141 = _140 * 0.05734497308731079f;
  float _142 = saturate(_141);
  float _143 = _142 * _142;
  float _144 = _142 * 2.0f;
  float _145 = 3.0f - _144;
  float _146 = _143 * _145;
  float _147 = _131 * 0.8450999855995178f;
  float _148 = _132 * 0.14589999616146088f;
  float _149 = _147 + _148;
  float _150 = _149 * 2.4890189170837402f;
  float _151 = _149 * 0.3754962384700775f;
  float _152 = _149 * 2.811495304107666f;
  float _153 = _149 * 5.519708156585693f;
  float _154 = _133 - _150;
  float _155 = _146 * _154;
  float _156 = _155 + _150;
  float _157 = _146 * 0.5f;
  float _158 = _157 + 0.5f;
  float _159 = _158 * _154;
  float _160 = _159 + _150;
  float _161 = _130 - _151;
  float _162 = _131 - _152;
  float _163 = _132 - _153;
  float _164 = _158 * _161;
  float _165 = _158 * _162;
  float _166 = _158 * _163;
  float _167 = _164 + _151;
  float _168 = _165 + _152;
  float _169 = _166 + _153;
  float _170 = 1.0f / _160;
  float _171 = _156 * _170;
  float _172 = _171 * _167;
  float _173 = _171 * _168;
  float _174 = _171 * _169;
  float _178 = cb2_020x * TEXCOORD0_centroid.x;
  float _179 = cb2_020y * TEXCOORD0_centroid.y;
  float _182 = _178 + cb2_020z;
  float _183 = _179 + cb2_020w;
  float _186 = dot(float2(_182, _183), float2(_182, _183));
  float _187 = 1.0f - _186;
  float _188 = saturate(_187);
  float _189 = log2(_188);
  float _190 = _189 * cb2_021w;
  float _191 = exp2(_190);
  float _195 = _172 - cb2_021x;
  float _196 = _173 - cb2_021y;
  float _197 = _174 - cb2_021z;
  float _198 = _195 * _191;
  float _199 = _196 * _191;
  float _200 = _197 * _191;
  float _201 = _198 + cb2_021x;
  float _202 = _199 + cb2_021y;
  float _203 = _200 + cb2_021z;
  float _204 = t0[0].SExposureData_000;
  float _206 = max(_74.x, 0.0010000000474974513f);
  float _207 = 1.0f / _206;
  float _208 = _207 * _204.x;
  bool _211 = ((uint)(cb2_069y) == 0);
  float _217;
  float _218;
  float _219;
  float _273;
  float _274;
  float _275;
  float _305;
  float _306;
  float _307;
  float _457;
  float _494;
  float _495;
  float _496;
  float _525;
  float _526;
  float _527;
  float _608;
  float _609;
  float _610;
  float _616;
  float _617;
  float _618;
  float _632;
  float _633;
  float _634;
  float _659;
  float _671;
  float _699;
  float _711;
  float _723;
  float _724;
  float _725;
  float _752;
  float _753;
  float _754;
  if (!_211) {
    float _213 = _208 * _201;
    float _214 = _208 * _202;
    float _215 = _208 * _203;
    _217 = _213;
    _218 = _214;
    _219 = _215;
  } else {
    _217 = _201;
    _218 = _202;
    _219 = _203;
  }
  float _220 = _217 * 0.6130970120429993f;
  float _221 = mad(0.33952298760414124f, _218, _220);
  float _222 = mad(0.04737899824976921f, _219, _221);
  float _223 = _217 * 0.07019399851560593f;
  float _224 = mad(0.9163540005683899f, _218, _223);
  float _225 = mad(0.013451999984681606f, _219, _224);
  float _226 = _217 * 0.02061600051820278f;
  float _227 = mad(0.10956999659538269f, _218, _226);
  float _228 = mad(0.8698149919509888f, _219, _227);
  float _229 = log2(_222);
  float _230 = log2(_225);
  float _231 = log2(_228);
  float _232 = _229 * 0.04211956635117531f;
  float _233 = _230 * 0.04211956635117531f;
  float _234 = _231 * 0.04211956635117531f;
  float _235 = _232 + 0.6252607107162476f;
  float _236 = _233 + 0.6252607107162476f;
  float _237 = _234 + 0.6252607107162476f;
  float4 _238 = t5.SampleLevel(s2_space2, float3(_235, _236, _237), 0.0f);
  bool _244 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_244 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _248 = cb2_017x * _238.x;
    float _249 = cb2_017x * _238.y;
    float _250 = cb2_017x * _238.z;
    float _252 = _248 + cb2_017y;
    float _253 = _249 + cb2_017y;
    float _254 = _250 + cb2_017y;
    float _255 = exp2(_252);
    float _256 = exp2(_253);
    float _257 = exp2(_254);
    float _258 = _255 + 1.0f;
    float _259 = _256 + 1.0f;
    float _260 = _257 + 1.0f;
    float _261 = 1.0f / _258;
    float _262 = 1.0f / _259;
    float _263 = 1.0f / _260;
    float _265 = cb2_017z * _261;
    float _266 = cb2_017z * _262;
    float _267 = cb2_017z * _263;
    float _269 = _265 + cb2_017w;
    float _270 = _266 + cb2_017w;
    float _271 = _267 + cb2_017w;
    _273 = _269;
    _274 = _270;
    _275 = _271;
  } else {
    _273 = _238.x;
    _274 = _238.y;
    _275 = _238.z;
  }
  float _276 = _273 * 23.0f;
  float _277 = _276 + -14.473931312561035f;
  float _278 = exp2(_277);
  float _279 = _274 * 23.0f;
  float _280 = _279 + -14.473931312561035f;
  float _281 = exp2(_280);
  float _282 = _275 * 23.0f;
  float _283 = _282 + -14.473931312561035f;
  float _284 = exp2(_283);
  float _290 = cb2_016x - _278;
  float _291 = cb2_016y - _281;
  float _292 = cb2_016z - _284;
  float _293 = _290 * cb2_016w;
  float _294 = _291 * cb2_016w;
  float _295 = _292 * cb2_016w;
  float _296 = _293 + _278;
  float _297 = _294 + _281;
  float _298 = _295 + _284;
  if (_244 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _301 = cb2_024x * _296;
    float _302 = cb2_024x * _297;
    float _303 = cb2_024x * _298;
    _305 = _301;
    _306 = _302;
    _307 = _303;
  } else {
    _305 = _296;
    _306 = _297;
    _307 = _298;
  }
  float _310 = _305 * 0.9708889722824097f;
  float _311 = mad(0.026962999254465103f, _306, _310);
  float _312 = mad(0.002148000057786703f, _307, _311);
  float _313 = _305 * 0.01088900025933981f;
  float _314 = mad(0.9869629740715027f, _306, _313);
  float _315 = mad(0.002148000057786703f, _307, _314);
  float _316 = mad(0.026962999254465103f, _306, _313);
  float _317 = mad(0.9621480107307434f, _307, _316);
  float _318 = max(_312, 0.0f);
  float _319 = max(_315, 0.0f);
  float _320 = max(_317, 0.0f);
  float _321 = min(_318, cb2_095y);
  float _322 = min(_319, cb2_095y);
  float _323 = min(_320, cb2_095y);
  bool _326 = ((uint)(cb2_095x) == 0);
  bool _329 = ((uint)(cb2_094w) == 0);
  bool _331 = ((uint)(cb2_094z) == 0);
  bool _333 = ((uint)(cb2_094y) != 0);
  bool _335 = ((uint)(cb2_094x) == 0);
  bool _337 = ((uint)(cb2_069z) != 0);
  float _384 = asfloat((uint)(cb2_075y));
  float _385 = asfloat((uint)(cb2_075z));
  float _386 = asfloat((uint)(cb2_075w));
  float _387 = asfloat((uint)(cb2_074z));
  float _388 = asfloat((uint)(cb2_074w));
  float _389 = asfloat((uint)(cb2_075x));
  float _390 = asfloat((uint)(cb2_073w));
  float _391 = asfloat((uint)(cb2_074x));
  float _392 = asfloat((uint)(cb2_074y));
  float _393 = asfloat((uint)(cb2_077x));
  float _394 = asfloat((uint)(cb2_077y));
  float _395 = asfloat((uint)(cb2_079x));
  float _396 = asfloat((uint)(cb2_079y));
  float _397 = asfloat((uint)(cb2_079z));
  float _398 = asfloat((uint)(cb2_078y));
  float _399 = asfloat((uint)(cb2_078z));
  float _400 = asfloat((uint)(cb2_078w));
  float _401 = asfloat((uint)(cb2_077z));
  float _402 = asfloat((uint)(cb2_077w));
  float _403 = asfloat((uint)(cb2_078x));
  float _404 = asfloat((uint)(cb2_072y));
  float _405 = asfloat((uint)(cb2_072z));
  float _406 = asfloat((uint)(cb2_072w));
  float _407 = asfloat((uint)(cb2_071x));
  float _408 = asfloat((uint)(cb2_071y));
  float _409 = asfloat((uint)(cb2_076x));
  float _410 = asfloat((uint)(cb2_070w));
  float _411 = asfloat((uint)(cb2_070x));
  float _412 = asfloat((uint)(cb2_070y));
  float _413 = asfloat((uint)(cb2_070z));
  float _414 = asfloat((uint)(cb2_073x));
  float _415 = asfloat((uint)(cb2_073y));
  float _416 = asfloat((uint)(cb2_073z));
  float _417 = asfloat((uint)(cb2_071z));
  float _418 = asfloat((uint)(cb2_071w));
  float _419 = asfloat((uint)(cb2_072x));
  float _420 = max(_322, _323);
  float _421 = max(_321, _420);
  float _422 = 1.0f / _421;
  float _423 = _422 * _321;
  float _424 = _422 * _322;
  float _425 = _422 * _323;
  float _426 = abs(_423);
  float _427 = log2(_426);
  float _428 = _427 * _411;
  float _429 = exp2(_428);
  float _430 = abs(_424);
  float _431 = log2(_430);
  float _432 = _431 * _412;
  float _433 = exp2(_432);
  float _434 = abs(_425);
  float _435 = log2(_434);
  float _436 = _435 * _413;
  float _437 = exp2(_436);
  if (_333) {
    float _440 = asfloat((uint)(cb2_076w));
    float _442 = asfloat((uint)(cb2_076z));
    float _444 = asfloat((uint)(cb2_076y));
    float _445 = _442 * _322;
    float _446 = _444 * _321;
    float _447 = _440 * _323;
    float _448 = _446 + _447;
    float _449 = _448 + _445;
    _457 = _449;
  } else {
    float _451 = _418 * _322;
    float _452 = _417 * _321;
    float _453 = _419 * _323;
    float _454 = _451 + _452;
    float _455 = _454 + _453;
    _457 = _455;
  }
  float _458 = abs(_457);
  float _459 = log2(_458);
  float _460 = _459 * _410;
  float _461 = exp2(_460);
  float _462 = log2(_461);
  float _463 = _462 * _409;
  float _464 = exp2(_463);
  float _465 = select(_337, _464, _461);
  float _466 = _465 * _407;
  float _467 = _466 + _408;
  float _468 = 1.0f / _467;
  float _469 = _468 * _461;
  if (_333) {
    if (!_335) {
      float _472 = _429 * _401;
      float _473 = _433 * _402;
      float _474 = _437 * _403;
      float _475 = _473 + _472;
      float _476 = _475 + _474;
      float _477 = _433 * _399;
      float _478 = _429 * _398;
      float _479 = _437 * _400;
      float _480 = _477 + _478;
      float _481 = _480 + _479;
      float _482 = _437 * _397;
      float _483 = _433 * _396;
      float _484 = _429 * _395;
      float _485 = _483 + _484;
      float _486 = _485 + _482;
      float _487 = max(_481, _486);
      float _488 = max(_476, _487);
      float _489 = 1.0f / _488;
      float _490 = _489 * _476;
      float _491 = _489 * _481;
      float _492 = _489 * _486;
      _494 = _490;
      _495 = _491;
      _496 = _492;
    } else {
      _494 = _429;
      _495 = _433;
      _496 = _437;
    }
    float _497 = _494 * _394;
    float _498 = exp2(_497);
    float _499 = _498 * _393;
    float _500 = saturate(_499);
    float _501 = _494 * _393;
    float _502 = _494 - _501;
    float _503 = saturate(_502);
    float _504 = max(_393, _503);
    float _505 = min(_504, _500);
    float _506 = _495 * _394;
    float _507 = exp2(_506);
    float _508 = _507 * _393;
    float _509 = saturate(_508);
    float _510 = _495 * _393;
    float _511 = _495 - _510;
    float _512 = saturate(_511);
    float _513 = max(_393, _512);
    float _514 = min(_513, _509);
    float _515 = _496 * _394;
    float _516 = exp2(_515);
    float _517 = _516 * _393;
    float _518 = saturate(_517);
    float _519 = _496 * _393;
    float _520 = _496 - _519;
    float _521 = saturate(_520);
    float _522 = max(_393, _521);
    float _523 = min(_522, _518);
    _525 = _505;
    _526 = _514;
    _527 = _523;
  } else {
    _525 = _429;
    _526 = _433;
    _527 = _437;
  }
  float _528 = _525 * _417;
  float _529 = _526 * _418;
  float _530 = _529 + _528;
  float _531 = _527 * _419;
  float _532 = _530 + _531;
  float _533 = 1.0f / _532;
  float _534 = _533 * _469;
  float _535 = saturate(_534);
  float _536 = _535 * _525;
  float _537 = saturate(_536);
  float _538 = _535 * _526;
  float _539 = saturate(_538);
  float _540 = _535 * _527;
  float _541 = saturate(_540);
  float _542 = _537 * _404;
  float _543 = _404 - _542;
  float _544 = _539 * _405;
  float _545 = _405 - _544;
  float _546 = _541 * _406;
  float _547 = _406 - _546;
  float _548 = _541 * _419;
  float _549 = _537 * _417;
  float _550 = _539 * _418;
  float _551 = _469 - _549;
  float _552 = _551 - _550;
  float _553 = _552 - _548;
  float _554 = saturate(_553);
  float _555 = _545 * _418;
  float _556 = _543 * _417;
  float _557 = _547 * _419;
  float _558 = _555 + _556;
  float _559 = _558 + _557;
  float _560 = 1.0f / _559;
  float _561 = _560 * _554;
  float _562 = _561 * _543;
  float _563 = _562 + _537;
  float _564 = saturate(_563);
  float _565 = _561 * _545;
  float _566 = _565 + _539;
  float _567 = saturate(_566);
  float _568 = _561 * _547;
  float _569 = _568 + _541;
  float _570 = saturate(_569);
  float _571 = _570 * _419;
  float _572 = _564 * _417;
  float _573 = _567 * _418;
  float _574 = _469 - _572;
  float _575 = _574 - _573;
  float _576 = _575 - _571;
  float _577 = saturate(_576);
  float _578 = _577 * _414;
  float _579 = _578 + _564;
  float _580 = saturate(_579);
  float _581 = _577 * _415;
  float _582 = _581 + _567;
  float _583 = saturate(_582);
  float _584 = _577 * _416;
  float _585 = _584 + _570;
  float _586 = saturate(_585);
  if (!_331) {
    float _588 = _580 * _390;
    float _589 = _583 * _391;
    float _590 = _586 * _392;
    float _591 = _589 + _588;
    float _592 = _591 + _590;
    float _593 = _583 * _388;
    float _594 = _580 * _387;
    float _595 = _586 * _389;
    float _596 = _593 + _594;
    float _597 = _596 + _595;
    float _598 = _586 * _386;
    float _599 = _583 * _385;
    float _600 = _580 * _384;
    float _601 = _599 + _600;
    float _602 = _601 + _598;
    if (!_329) {
      float _604 = saturate(_592);
      float _605 = saturate(_597);
      float _606 = saturate(_602);
      _608 = _606;
      _609 = _605;
      _610 = _604;
    } else {
      _608 = _602;
      _609 = _597;
      _610 = _592;
    }
  } else {
    _608 = _586;
    _609 = _583;
    _610 = _580;
  }
  if (!_326) {
    float _612 = _610 * _390;
    float _613 = _609 * _390;
    float _614 = _608 * _390;
    _616 = _614;
    _617 = _613;
    _618 = _612;
  } else {
    _616 = _608;
    _617 = _609;
    _618 = _610;
  }
  if (_244) {
    float _622 = cb1_018z * 9.999999747378752e-05f;
    float _623 = _622 * _618;
    float _624 = _622 * _617;
    float _625 = _622 * _616;
    float _627 = 5000.0f / cb1_018y;
    float _628 = _623 * _627;
    float _629 = _624 * _627;
    float _630 = _625 * _627;
    _632 = _628;
    _633 = _629;
    _634 = _630;
  } else {
    _632 = _618;
    _633 = _617;
    _634 = _616;
  }
  float _635 = _632 * 1.6047500371932983f;
  float _636 = mad(-0.5310800075531006f, _633, _635);
  float _637 = mad(-0.07366999983787537f, _634, _636);
  float _638 = _632 * -0.10208000242710114f;
  float _639 = mad(1.1081299781799316f, _633, _638);
  float _640 = mad(-0.006049999967217445f, _634, _639);
  float _641 = _632 * -0.0032599999103695154f;
  float _642 = mad(-0.07275000214576721f, _633, _641);
  float _643 = mad(1.0760200023651123f, _634, _642);
  if (_244) {
    // float _645 = max(_637, 0.0f);
    // float _646 = max(_640, 0.0f);
    // float _647 = max(_643, 0.0f);
    // bool _648 = !(_645 >= 0.0030399328097701073f);
    // if (!_648) {
    //   float _650 = abs(_645);
    //   float _651 = log2(_650);
    //   float _652 = _651 * 0.4166666567325592f;
    //   float _653 = exp2(_652);
    //   float _654 = _653 * 1.0549999475479126f;
    //   float _655 = _654 + -0.054999999701976776f;
    //   _659 = _655;
    // } else {
    //   float _657 = _645 * 12.923210144042969f;
    //   _659 = _657;
    // }
    // bool _660 = !(_646 >= 0.0030399328097701073f);
    // if (!_660) {
    //   float _662 = abs(_646);
    //   float _663 = log2(_662);
    //   float _664 = _663 * 0.4166666567325592f;
    //   float _665 = exp2(_664);
    //   float _666 = _665 * 1.0549999475479126f;
    //   float _667 = _666 + -0.054999999701976776f;
    //   _671 = _667;
    // } else {
    //   float _669 = _646 * 12.923210144042969f;
    //   _671 = _669;
    // }
    // bool _672 = !(_647 >= 0.0030399328097701073f);
    // if (!_672) {
    //   float _674 = abs(_647);
    //   float _675 = log2(_674);
    //   float _676 = _675 * 0.4166666567325592f;
    //   float _677 = exp2(_676);
    //   float _678 = _677 * 1.0549999475479126f;
    //   float _679 = _678 + -0.054999999701976776f;
    //   _752 = _659;
    //   _753 = _671;
    //   _754 = _679;
    // } else {
    //   float _681 = _647 * 12.923210144042969f;
    //   _752 = _659;
    //   _753 = _671;
    //   _754 = _681;
    // }
    _752 = renodx::color::srgb::EncodeSafe(_637);
    _753 = renodx::color::srgb::EncodeSafe(_640);
    _754 = renodx::color::srgb::EncodeSafe(_643);

  } else {
    float _683 = saturate(_637);
    float _684 = saturate(_640);
    float _685 = saturate(_643);
    bool _686 = ((uint)(cb1_018w) == -2);
    if (!_686) {
      bool _688 = !(_683 >= 0.0030399328097701073f);
      if (!_688) {
        float _690 = abs(_683);
        float _691 = log2(_690);
        float _692 = _691 * 0.4166666567325592f;
        float _693 = exp2(_692);
        float _694 = _693 * 1.0549999475479126f;
        float _695 = _694 + -0.054999999701976776f;
        _699 = _695;
      } else {
        float _697 = _683 * 12.923210144042969f;
        _699 = _697;
      }
      bool _700 = !(_684 >= 0.0030399328097701073f);
      if (!_700) {
        float _702 = abs(_684);
        float _703 = log2(_702);
        float _704 = _703 * 0.4166666567325592f;
        float _705 = exp2(_704);
        float _706 = _705 * 1.0549999475479126f;
        float _707 = _706 + -0.054999999701976776f;
        _711 = _707;
      } else {
        float _709 = _684 * 12.923210144042969f;
        _711 = _709;
      }
      bool _712 = !(_685 >= 0.0030399328097701073f);
      if (!_712) {
        float _714 = abs(_685);
        float _715 = log2(_714);
        float _716 = _715 * 0.4166666567325592f;
        float _717 = exp2(_716);
        float _718 = _717 * 1.0549999475479126f;
        float _719 = _718 + -0.054999999701976776f;
        _723 = _699;
        _724 = _711;
        _725 = _719;
      } else {
        float _721 = _685 * 12.923210144042969f;
        _723 = _699;
        _724 = _711;
        _725 = _721;
      }
    } else {
      _723 = _683;
      _724 = _684;
      _725 = _685;
    }
    float _730 = abs(_723);
    float _731 = abs(_724);
    float _732 = abs(_725);
    float _733 = log2(_730);
    float _734 = log2(_731);
    float _735 = log2(_732);
    float _736 = _733 * cb2_000z;
    float _737 = _734 * cb2_000z;
    float _738 = _735 * cb2_000z;
    float _739 = exp2(_736);
    float _740 = exp2(_737);
    float _741 = exp2(_738);
    float _742 = _739 * cb2_000y;
    float _743 = _740 * cb2_000y;
    float _744 = _741 * cb2_000y;
    float _745 = _742 + cb2_000x;
    float _746 = _743 + cb2_000x;
    float _747 = _744 + cb2_000x;
    float _748 = saturate(_745);
    float _749 = saturate(_746);
    float _750 = saturate(_747);
    _752 = _748;
    _753 = _749;
    _754 = _750;
  }
  float _755 = dot(float3(_752, _753, _754), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _752;
  SV_Target.y = _753;
  SV_Target.z = _754;
  SV_Target.w = _755;
  SV_Target_1.x = _755;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
