#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t5 : register(t5);

Texture3D<float4> t6 : register(t6);

Texture3D<float2> t7 : register(t7);

Texture2D<float4> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  uint cb2_019x : packoffset(c019.x);
  uint cb2_019y : packoffset(c019.y);
  uint cb2_019z : packoffset(c019.z);
  uint cb2_019w : packoffset(c019.w);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_022x : packoffset(c022.x);
  float cb2_023x : packoffset(c023.x);
  float cb2_023y : packoffset(c023.y);
  float cb2_023z : packoffset(c023.z);
  float cb2_023w : packoffset(c023.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_025w : packoffset(c025.w);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
  uint cb2_069z : packoffset(c069.z);
  uint cb2_070x : packoffset(c070.x);
  uint cb2_070y : packoffset(c070.y);
  uint cb2_070z : packoffset(c070.z);
  uint cb2_070w : packoffset(c070.w);
  uint cb2_071x : packoffset(c071.x);
  uint cb2_071y : packoffset(c071.y);
  uint cb2_071z : packoffset(c071.z);
  uint cb2_071w : packoffset(c071.w);
  uint cb2_072x : packoffset(c072.x);
  uint cb2_072y : packoffset(c072.y);
  uint cb2_072z : packoffset(c072.z);
  uint cb2_072w : packoffset(c072.w);
  uint cb2_073x : packoffset(c073.x);
  uint cb2_073y : packoffset(c073.y);
  uint cb2_073z : packoffset(c073.z);
  uint cb2_073w : packoffset(c073.w);
  uint cb2_074x : packoffset(c074.x);
  uint cb2_074y : packoffset(c074.y);
  uint cb2_074z : packoffset(c074.z);
  uint cb2_074w : packoffset(c074.w);
  uint cb2_075x : packoffset(c075.x);
  uint cb2_075y : packoffset(c075.y);
  uint cb2_075z : packoffset(c075.z);
  uint cb2_075w : packoffset(c075.w);
  uint cb2_076x : packoffset(c076.x);
  uint cb2_076y : packoffset(c076.y);
  uint cb2_076z : packoffset(c076.z);
  uint cb2_076w : packoffset(c076.w);
  uint cb2_077x : packoffset(c077.x);
  uint cb2_077y : packoffset(c077.y);
  uint cb2_077z : packoffset(c077.z);
  uint cb2_077w : packoffset(c077.w);
  uint cb2_078x : packoffset(c078.x);
  uint cb2_078y : packoffset(c078.y);
  uint cb2_078z : packoffset(c078.z);
  uint cb2_078w : packoffset(c078.w);
  uint cb2_079x : packoffset(c079.x);
  uint cb2_079y : packoffset(c079.y);
  uint cb2_079z : packoffset(c079.z);
  uint cb2_094x : packoffset(c094.x);
  uint cb2_094y : packoffset(c094.y);
  uint cb2_094z : packoffset(c094.z);
  uint cb2_094w : packoffset(c094.w);
  uint cb2_095x : packoffset(c095.x);
  float cb2_095y : packoffset(c095.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _23 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _25 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _29 = max(_25.x, 0.0f);
  float _30 = max(_25.y, 0.0f);
  float _31 = max(_25.z, 0.0f);
  float _32 = min(_29, 65000.0f);
  float _33 = min(_30, 65000.0f);
  float _34 = min(_31, 65000.0f);
  float4 _35 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _40 = max(_35.x, 0.0f);
  float _41 = max(_35.y, 0.0f);
  float _42 = max(_35.z, 0.0f);
  float _43 = max(_35.w, 0.0f);
  float _44 = min(_40, 5000.0f);
  float _45 = min(_41, 5000.0f);
  float _46 = min(_42, 5000.0f);
  float _47 = min(_43, 5000.0f);
  float _50 = _23.x * cb0_028z;
  float _51 = _50 + cb0_028x;
  float _52 = cb2_027w / _51;
  float _53 = 1.0f - _52;
  float _54 = abs(_53);
  float _56 = cb2_027y * _54;
  float _58 = _56 - cb2_027z;
  float _59 = saturate(_58);
  float _60 = max(_59, _47);
  float _61 = saturate(_60);
  float4 _62 = t5.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _66 = _44 - _32;
  float _67 = _45 - _33;
  float _68 = _46 - _34;
  float _69 = _61 * _66;
  float _70 = _61 * _67;
  float _71 = _61 * _68;
  float _72 = _69 + _32;
  float _73 = _70 + _33;
  float _74 = _71 + _34;
  float _75 = dot(float3(_72, _73, _74), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _79 = t0[0].SExposureData_020;
  float _81 = t0[0].SExposureData_004;
  float _83 = cb2_018x * 0.5f;
  float _84 = _83 * cb2_018y;
  float _85 = _81.x - _84;
  float _86 = cb2_018y * cb2_018x;
  float _87 = 1.0f / _86;
  float _88 = _85 * _87;
  float _89 = _75 / _79.x;
  float _90 = _89 * 5464.01611328125f;
  float _91 = _90 + 9.99999993922529e-09f;
  float _92 = log2(_91);
  float _93 = _92 - _85;
  float _94 = _93 * _87;
  float _95 = saturate(_94);
  float2 _96 = t7.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _95), 0.0f);
  float _99 = max(_96.y, 1.0000000116860974e-07f);
  float _100 = _96.x / _99;
  float _101 = _100 + _88;
  float _102 = _101 / _87;
  float _103 = _102 - _81.x;
  float _104 = -0.0f - _103;
  float _106 = _104 - cb2_027x;
  float _107 = max(0.0f, _106);
  float _110 = cb2_026z * _107;
  float _111 = _103 - cb2_027x;
  float _112 = max(0.0f, _111);
  float _114 = cb2_026w * _112;
  bool _115 = (_103 < 0.0f);
  float _116 = select(_115, _110, _114);
  float _117 = exp2(_116);
  float _118 = _117 * _72;
  float _119 = _117 * _73;
  float _120 = _117 * _74;
  float _125 = cb2_024y * _62.x;
  float _126 = cb2_024z * _62.y;
  float _127 = cb2_024w * _62.z;
  float _128 = _125 + _118;
  float _129 = _126 + _119;
  float _130 = _127 + _120;
  float _135 = _128 * cb2_025x;
  float _136 = _129 * cb2_025y;
  float _137 = _130 * cb2_025z;
  float _138 = dot(float3(_135, _136, _137), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _139 = t0[0].SExposureData_012;
  float _141 = _138 * 5464.01611328125f;
  float _142 = _141 * _139.x;
  float _143 = _142 + 9.99999993922529e-09f;
  float _144 = log2(_143);
  float _145 = _144 + 16.929765701293945f;
  float _146 = _145 * 0.05734497308731079f;
  float _147 = saturate(_146);
  float _148 = _147 * _147;
  float _149 = _147 * 2.0f;
  float _150 = 3.0f - _149;
  float _151 = _148 * _150;
  float _152 = _136 * 0.8450999855995178f;
  float _153 = _137 * 0.14589999616146088f;
  float _154 = _152 + _153;
  float _155 = _154 * 2.4890189170837402f;
  float _156 = _154 * 0.3754962384700775f;
  float _157 = _154 * 2.811495304107666f;
  float _158 = _154 * 5.519708156585693f;
  float _159 = _138 - _155;
  float _160 = _151 * _159;
  float _161 = _160 + _155;
  float _162 = _151 * 0.5f;
  float _163 = _162 + 0.5f;
  float _164 = _163 * _159;
  float _165 = _164 + _155;
  float _166 = _135 - _156;
  float _167 = _136 - _157;
  float _168 = _137 - _158;
  float _169 = _163 * _166;
  float _170 = _163 * _167;
  float _171 = _163 * _168;
  float _172 = _169 + _156;
  float _173 = _170 + _157;
  float _174 = _171 + _158;
  float _175 = 1.0f / _165;
  float _176 = _161 * _175;
  float _177 = _176 * _172;
  float _178 = _176 * _173;
  float _179 = _176 * _174;
  float _183 = cb2_020x * TEXCOORD0_centroid.x;
  float _184 = cb2_020y * TEXCOORD0_centroid.y;
  float _187 = _183 + cb2_020z;
  float _188 = _184 + cb2_020w;
  float _191 = dot(float2(_187, _188), float2(_187, _188));
  float _192 = 1.0f - _191;
  float _193 = saturate(_192);
  float _194 = log2(_193);
  float _195 = _194 * cb2_021w;
  float _196 = exp2(_195);
  float _200 = _177 - cb2_021x;
  float _201 = _178 - cb2_021y;
  float _202 = _179 - cb2_021z;
  float _203 = _200 * _196;
  float _204 = _201 * _196;
  float _205 = _202 * _196;
  float _206 = _203 + cb2_021x;
  float _207 = _204 + cb2_021y;
  float _208 = _205 + cb2_021z;
  float _209 = t0[0].SExposureData_000;
  float _211 = max(_79.x, 0.0010000000474974513f);
  float _212 = 1.0f / _211;
  float _213 = _212 * _209.x;
  bool _216 = ((uint)(cb2_069y) == 0);
  float _222;
  float _223;
  float _224;
  float _278;
  float _279;
  float _280;
  float _356;
  float _357;
  float _358;
  float _508;
  float _545;
  float _546;
  float _547;
  float _576;
  float _577;
  float _578;
  float _659;
  float _660;
  float _661;
  float _667;
  float _668;
  float _669;
  float _683;
  float _684;
  float _685;
  float _710;
  float _722;
  float _750;
  float _762;
  float _774;
  float _775;
  float _776;
  float _803;
  float _804;
  float _805;
  if (!_216) {
    float _218 = _213 * _206;
    float _219 = _213 * _207;
    float _220 = _213 * _208;
    _222 = _218;
    _223 = _219;
    _224 = _220;
  } else {
    _222 = _206;
    _223 = _207;
    _224 = _208;
  }
  float _225 = _222 * 0.6130970120429993f;
  float _226 = mad(0.33952298760414124f, _223, _225);
  float _227 = mad(0.04737899824976921f, _224, _226);
  float _228 = _222 * 0.07019399851560593f;
  float _229 = mad(0.9163540005683899f, _223, _228);
  float _230 = mad(0.013451999984681606f, _224, _229);
  float _231 = _222 * 0.02061600051820278f;
  float _232 = mad(0.10956999659538269f, _223, _231);
  float _233 = mad(0.8698149919509888f, _224, _232);
  float _234 = log2(_227);
  float _235 = log2(_230);
  float _236 = log2(_233);
  float _237 = _234 * 0.04211956635117531f;
  float _238 = _235 * 0.04211956635117531f;
  float _239 = _236 * 0.04211956635117531f;
  float _240 = _237 + 0.6252607107162476f;
  float _241 = _238 + 0.6252607107162476f;
  float _242 = _239 + 0.6252607107162476f;
  float4 _243 = t6.SampleLevel(s2_space2, float3(_240, _241, _242), 0.0f);
  bool _249 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_249 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _253 = cb2_017x * _243.x;
    float _254 = cb2_017x * _243.y;
    float _255 = cb2_017x * _243.z;
    float _257 = _253 + cb2_017y;
    float _258 = _254 + cb2_017y;
    float _259 = _255 + cb2_017y;
    float _260 = exp2(_257);
    float _261 = exp2(_258);
    float _262 = exp2(_259);
    float _263 = _260 + 1.0f;
    float _264 = _261 + 1.0f;
    float _265 = _262 + 1.0f;
    float _266 = 1.0f / _263;
    float _267 = 1.0f / _264;
    float _268 = 1.0f / _265;
    float _270 = cb2_017z * _266;
    float _271 = cb2_017z * _267;
    float _272 = cb2_017z * _268;
    float _274 = _270 + cb2_017w;
    float _275 = _271 + cb2_017w;
    float _276 = _272 + cb2_017w;
    _278 = _274;
    _279 = _275;
    _280 = _276;
  } else {
    _278 = _243.x;
    _279 = _243.y;
    _280 = _243.z;
  }
  float _281 = _278 * 23.0f;
  float _282 = _281 + -14.473931312561035f;
  float _283 = exp2(_282);
  float _284 = _279 * 23.0f;
  float _285 = _284 + -14.473931312561035f;
  float _286 = exp2(_285);
  float _287 = _280 * 23.0f;
  float _288 = _287 + -14.473931312561035f;
  float _289 = exp2(_288);
  float _290 = dot(float3(_283, _286, _289), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _295 = dot(float3(_283, _286, _289), float3(_283, _286, _289));
  float _296 = rsqrt(_295);
  float _297 = _296 * _283;
  float _298 = _296 * _286;
  float _299 = _296 * _289;
  float _300 = cb2_001x - _297;
  float _301 = cb2_001y - _298;
  float _302 = cb2_001z - _299;
  float _303 = dot(float3(_300, _301, _302), float3(_300, _301, _302));
  float _306 = cb2_002z * _303;
  float _308 = _306 + cb2_002w;
  float _309 = saturate(_308);
  float _311 = cb2_002x * _309;
  float _312 = _290 - _283;
  float _313 = _290 - _286;
  float _314 = _290 - _289;
  float _315 = _311 * _312;
  float _316 = _311 * _313;
  float _317 = _311 * _314;
  float _318 = _315 + _283;
  float _319 = _316 + _286;
  float _320 = _317 + _289;
  float _322 = cb2_002y * _309;
  float _323 = 0.10000000149011612f - _318;
  float _324 = 0.10000000149011612f - _319;
  float _325 = 0.10000000149011612f - _320;
  float _326 = _323 * _322;
  float _327 = _324 * _322;
  float _328 = _325 * _322;
  float _329 = _326 + _318;
  float _330 = _327 + _319;
  float _331 = _328 + _320;
  float _332 = saturate(_329);
  float _333 = saturate(_330);
  float _334 = saturate(_331);
  float _341 = cb2_016x - _332;
  float _342 = cb2_016y - _333;
  float _343 = cb2_016z - _334;
  float _344 = _341 * cb2_016w;
  float _345 = _342 * cb2_016w;
  float _346 = _343 * cb2_016w;
  float _347 = _344 + _332;
  float _348 = _345 + _333;
  float _349 = _346 + _334;
  if (_249 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _352 = cb2_024x * _347;
    float _353 = cb2_024x * _348;
    float _354 = cb2_024x * _349;
    _356 = _352;
    _357 = _353;
    _358 = _354;
  } else {
    _356 = _347;
    _357 = _348;
    _358 = _349;
  }
  float _361 = _356 * 0.9708889722824097f;
  float _362 = mad(0.026962999254465103f, _357, _361);
  float _363 = mad(0.002148000057786703f, _358, _362);
  float _364 = _356 * 0.01088900025933981f;
  float _365 = mad(0.9869629740715027f, _357, _364);
  float _366 = mad(0.002148000057786703f, _358, _365);
  float _367 = mad(0.026962999254465103f, _357, _364);
  float _368 = mad(0.9621480107307434f, _358, _367);
  float _369 = max(_363, 0.0f);
  float _370 = max(_366, 0.0f);
  float _371 = max(_368, 0.0f);
  float _372 = min(_369, cb2_095y);
  float _373 = min(_370, cb2_095y);
  float _374 = min(_371, cb2_095y);
  bool _377 = ((uint)(cb2_095x) == 0);
  bool _380 = ((uint)(cb2_094w) == 0);
  bool _382 = ((uint)(cb2_094z) == 0);
  bool _384 = ((uint)(cb2_094y) != 0);
  bool _386 = ((uint)(cb2_094x) == 0);
  bool _388 = ((uint)(cb2_069z) != 0);
  float _435 = asfloat((uint)(cb2_075y));
  float _436 = asfloat((uint)(cb2_075z));
  float _437 = asfloat((uint)(cb2_075w));
  float _438 = asfloat((uint)(cb2_074z));
  float _439 = asfloat((uint)(cb2_074w));
  float _440 = asfloat((uint)(cb2_075x));
  float _441 = asfloat((uint)(cb2_073w));
  float _442 = asfloat((uint)(cb2_074x));
  float _443 = asfloat((uint)(cb2_074y));
  float _444 = asfloat((uint)(cb2_077x));
  float _445 = asfloat((uint)(cb2_077y));
  float _446 = asfloat((uint)(cb2_079x));
  float _447 = asfloat((uint)(cb2_079y));
  float _448 = asfloat((uint)(cb2_079z));
  float _449 = asfloat((uint)(cb2_078y));
  float _450 = asfloat((uint)(cb2_078z));
  float _451 = asfloat((uint)(cb2_078w));
  float _452 = asfloat((uint)(cb2_077z));
  float _453 = asfloat((uint)(cb2_077w));
  float _454 = asfloat((uint)(cb2_078x));
  float _455 = asfloat((uint)(cb2_072y));
  float _456 = asfloat((uint)(cb2_072z));
  float _457 = asfloat((uint)(cb2_072w));
  float _458 = asfloat((uint)(cb2_071x));
  float _459 = asfloat((uint)(cb2_071y));
  float _460 = asfloat((uint)(cb2_076x));
  float _461 = asfloat((uint)(cb2_070w));
  float _462 = asfloat((uint)(cb2_070x));
  float _463 = asfloat((uint)(cb2_070y));
  float _464 = asfloat((uint)(cb2_070z));
  float _465 = asfloat((uint)(cb2_073x));
  float _466 = asfloat((uint)(cb2_073y));
  float _467 = asfloat((uint)(cb2_073z));
  float _468 = asfloat((uint)(cb2_071z));
  float _469 = asfloat((uint)(cb2_071w));
  float _470 = asfloat((uint)(cb2_072x));
  float _471 = max(_373, _374);
  float _472 = max(_372, _471);
  float _473 = 1.0f / _472;
  float _474 = _473 * _372;
  float _475 = _473 * _373;
  float _476 = _473 * _374;
  float _477 = abs(_474);
  float _478 = log2(_477);
  float _479 = _478 * _462;
  float _480 = exp2(_479);
  float _481 = abs(_475);
  float _482 = log2(_481);
  float _483 = _482 * _463;
  float _484 = exp2(_483);
  float _485 = abs(_476);
  float _486 = log2(_485);
  float _487 = _486 * _464;
  float _488 = exp2(_487);
  if (_384) {
    float _491 = asfloat((uint)(cb2_076w));
    float _493 = asfloat((uint)(cb2_076z));
    float _495 = asfloat((uint)(cb2_076y));
    float _496 = _493 * _373;
    float _497 = _495 * _372;
    float _498 = _491 * _374;
    float _499 = _497 + _498;
    float _500 = _499 + _496;
    _508 = _500;
  } else {
    float _502 = _469 * _373;
    float _503 = _468 * _372;
    float _504 = _470 * _374;
    float _505 = _502 + _503;
    float _506 = _505 + _504;
    _508 = _506;
  }
  float _509 = abs(_508);
  float _510 = log2(_509);
  float _511 = _510 * _461;
  float _512 = exp2(_511);
  float _513 = log2(_512);
  float _514 = _513 * _460;
  float _515 = exp2(_514);
  float _516 = select(_388, _515, _512);
  float _517 = _516 * _458;
  float _518 = _517 + _459;
  float _519 = 1.0f / _518;
  float _520 = _519 * _512;
  if (_384) {
    if (!_386) {
      float _523 = _480 * _452;
      float _524 = _484 * _453;
      float _525 = _488 * _454;
      float _526 = _524 + _523;
      float _527 = _526 + _525;
      float _528 = _484 * _450;
      float _529 = _480 * _449;
      float _530 = _488 * _451;
      float _531 = _528 + _529;
      float _532 = _531 + _530;
      float _533 = _488 * _448;
      float _534 = _484 * _447;
      float _535 = _480 * _446;
      float _536 = _534 + _535;
      float _537 = _536 + _533;
      float _538 = max(_532, _537);
      float _539 = max(_527, _538);
      float _540 = 1.0f / _539;
      float _541 = _540 * _527;
      float _542 = _540 * _532;
      float _543 = _540 * _537;
      _545 = _541;
      _546 = _542;
      _547 = _543;
    } else {
      _545 = _480;
      _546 = _484;
      _547 = _488;
    }
    float _548 = _545 * _445;
    float _549 = exp2(_548);
    float _550 = _549 * _444;
    float _551 = saturate(_550);
    float _552 = _545 * _444;
    float _553 = _545 - _552;
    float _554 = saturate(_553);
    float _555 = max(_444, _554);
    float _556 = min(_555, _551);
    float _557 = _546 * _445;
    float _558 = exp2(_557);
    float _559 = _558 * _444;
    float _560 = saturate(_559);
    float _561 = _546 * _444;
    float _562 = _546 - _561;
    float _563 = saturate(_562);
    float _564 = max(_444, _563);
    float _565 = min(_564, _560);
    float _566 = _547 * _445;
    float _567 = exp2(_566);
    float _568 = _567 * _444;
    float _569 = saturate(_568);
    float _570 = _547 * _444;
    float _571 = _547 - _570;
    float _572 = saturate(_571);
    float _573 = max(_444, _572);
    float _574 = min(_573, _569);
    _576 = _556;
    _577 = _565;
    _578 = _574;
  } else {
    _576 = _480;
    _577 = _484;
    _578 = _488;
  }
  float _579 = _576 * _468;
  float _580 = _577 * _469;
  float _581 = _580 + _579;
  float _582 = _578 * _470;
  float _583 = _581 + _582;
  float _584 = 1.0f / _583;
  float _585 = _584 * _520;
  float _586 = saturate(_585);
  float _587 = _586 * _576;
  float _588 = saturate(_587);
  float _589 = _586 * _577;
  float _590 = saturate(_589);
  float _591 = _586 * _578;
  float _592 = saturate(_591);
  float _593 = _588 * _455;
  float _594 = _455 - _593;
  float _595 = _590 * _456;
  float _596 = _456 - _595;
  float _597 = _592 * _457;
  float _598 = _457 - _597;
  float _599 = _592 * _470;
  float _600 = _588 * _468;
  float _601 = _590 * _469;
  float _602 = _520 - _600;
  float _603 = _602 - _601;
  float _604 = _603 - _599;
  float _605 = saturate(_604);
  float _606 = _596 * _469;
  float _607 = _594 * _468;
  float _608 = _598 * _470;
  float _609 = _606 + _607;
  float _610 = _609 + _608;
  float _611 = 1.0f / _610;
  float _612 = _611 * _605;
  float _613 = _612 * _594;
  float _614 = _613 + _588;
  float _615 = saturate(_614);
  float _616 = _612 * _596;
  float _617 = _616 + _590;
  float _618 = saturate(_617);
  float _619 = _612 * _598;
  float _620 = _619 + _592;
  float _621 = saturate(_620);
  float _622 = _621 * _470;
  float _623 = _615 * _468;
  float _624 = _618 * _469;
  float _625 = _520 - _623;
  float _626 = _625 - _624;
  float _627 = _626 - _622;
  float _628 = saturate(_627);
  float _629 = _628 * _465;
  float _630 = _629 + _615;
  float _631 = saturate(_630);
  float _632 = _628 * _466;
  float _633 = _632 + _618;
  float _634 = saturate(_633);
  float _635 = _628 * _467;
  float _636 = _635 + _621;
  float _637 = saturate(_636);
  if (!_382) {
    float _639 = _631 * _441;
    float _640 = _634 * _442;
    float _641 = _637 * _443;
    float _642 = _640 + _639;
    float _643 = _642 + _641;
    float _644 = _634 * _439;
    float _645 = _631 * _438;
    float _646 = _637 * _440;
    float _647 = _644 + _645;
    float _648 = _647 + _646;
    float _649 = _637 * _437;
    float _650 = _634 * _436;
    float _651 = _631 * _435;
    float _652 = _650 + _651;
    float _653 = _652 + _649;
    if (!_380) {
      float _655 = saturate(_643);
      float _656 = saturate(_648);
      float _657 = saturate(_653);
      _659 = _657;
      _660 = _656;
      _661 = _655;
    } else {
      _659 = _653;
      _660 = _648;
      _661 = _643;
    }
  } else {
    _659 = _637;
    _660 = _634;
    _661 = _631;
  }
  if (!_377) {
    float _663 = _661 * _441;
    float _664 = _660 * _441;
    float _665 = _659 * _441;
    _667 = _665;
    _668 = _664;
    _669 = _663;
  } else {
    _667 = _659;
    _668 = _660;
    _669 = _661;
  }
  if (_249) {
    float _673 = cb1_018z * 9.999999747378752e-05f;
    float _674 = _673 * _669;
    float _675 = _673 * _668;
    float _676 = _673 * _667;
    float _678 = 5000.0f / cb1_018y;
    float _679 = _674 * _678;
    float _680 = _675 * _678;
    float _681 = _676 * _678;
    _683 = _679;
    _684 = _680;
    _685 = _681;
  } else {
    _683 = _669;
    _684 = _668;
    _685 = _667;
  }
  float _686 = _683 * 1.6047500371932983f;
  float _687 = mad(-0.5310800075531006f, _684, _686);
  float _688 = mad(-0.07366999983787537f, _685, _687);
  float _689 = _683 * -0.10208000242710114f;
  float _690 = mad(1.1081299781799316f, _684, _689);
  float _691 = mad(-0.006049999967217445f, _685, _690);
  float _692 = _683 * -0.0032599999103695154f;
  float _693 = mad(-0.07275000214576721f, _684, _692);
  float _694 = mad(1.0760200023651123f, _685, _693);
  if (_249) {
    // float _696 = max(_688, 0.0f);
    // float _697 = max(_691, 0.0f);
    // float _698 = max(_694, 0.0f);
    // bool _699 = !(_696 >= 0.0030399328097701073f);
    // if (!_699) {
    //   float _701 = abs(_696);
    //   float _702 = log2(_701);
    //   float _703 = _702 * 0.4166666567325592f;
    //   float _704 = exp2(_703);
    //   float _705 = _704 * 1.0549999475479126f;
    //   float _706 = _705 + -0.054999999701976776f;
    //   _710 = _706;
    // } else {
    //   float _708 = _696 * 12.923210144042969f;
    //   _710 = _708;
    // }
    // bool _711 = !(_697 >= 0.0030399328097701073f);
    // if (!_711) {
    //   float _713 = abs(_697);
    //   float _714 = log2(_713);
    //   float _715 = _714 * 0.4166666567325592f;
    //   float _716 = exp2(_715);
    //   float _717 = _716 * 1.0549999475479126f;
    //   float _718 = _717 + -0.054999999701976776f;
    //   _722 = _718;
    // } else {
    //   float _720 = _697 * 12.923210144042969f;
    //   _722 = _720;
    // }
    // bool _723 = !(_698 >= 0.0030399328097701073f);
    // if (!_723) {
    //   float _725 = abs(_698);
    //   float _726 = log2(_725);
    //   float _727 = _726 * 0.4166666567325592f;
    //   float _728 = exp2(_727);
    //   float _729 = _728 * 1.0549999475479126f;
    //   float _730 = _729 + -0.054999999701976776f;
    //   _803 = _710;
    //   _804 = _722;
    //   _805 = _730;
    // } else {
    //   float _732 = _698 * 12.923210144042969f;
    //   _803 = _710;
    //   _804 = _722;
    //   _805 = _732;
    // }
    _803 = renodx::color::srgb::EncodeSafe(_688);
    _804 = renodx::color::srgb::EncodeSafe(_691);
    _805 = renodx::color::srgb::EncodeSafe(_694);

  } else {
    float _734 = saturate(_688);
    float _735 = saturate(_691);
    float _736 = saturate(_694);
    bool _737 = ((uint)(cb1_018w) == -2);
    if (!_737) {
      bool _739 = !(_734 >= 0.0030399328097701073f);
      if (!_739) {
        float _741 = abs(_734);
        float _742 = log2(_741);
        float _743 = _742 * 0.4166666567325592f;
        float _744 = exp2(_743);
        float _745 = _744 * 1.0549999475479126f;
        float _746 = _745 + -0.054999999701976776f;
        _750 = _746;
      } else {
        float _748 = _734 * 12.923210144042969f;
        _750 = _748;
      }
      bool _751 = !(_735 >= 0.0030399328097701073f);
      if (!_751) {
        float _753 = abs(_735);
        float _754 = log2(_753);
        float _755 = _754 * 0.4166666567325592f;
        float _756 = exp2(_755);
        float _757 = _756 * 1.0549999475479126f;
        float _758 = _757 + -0.054999999701976776f;
        _762 = _758;
      } else {
        float _760 = _735 * 12.923210144042969f;
        _762 = _760;
      }
      bool _763 = !(_736 >= 0.0030399328097701073f);
      if (!_763) {
        float _765 = abs(_736);
        float _766 = log2(_765);
        float _767 = _766 * 0.4166666567325592f;
        float _768 = exp2(_767);
        float _769 = _768 * 1.0549999475479126f;
        float _770 = _769 + -0.054999999701976776f;
        _774 = _750;
        _775 = _762;
        _776 = _770;
      } else {
        float _772 = _736 * 12.923210144042969f;
        _774 = _750;
        _775 = _762;
        _776 = _772;
      }
    } else {
      _774 = _734;
      _775 = _735;
      _776 = _736;
    }
    float _781 = abs(_774);
    float _782 = abs(_775);
    float _783 = abs(_776);
    float _784 = log2(_781);
    float _785 = log2(_782);
    float _786 = log2(_783);
    float _787 = _784 * cb2_000z;
    float _788 = _785 * cb2_000z;
    float _789 = _786 * cb2_000z;
    float _790 = exp2(_787);
    float _791 = exp2(_788);
    float _792 = exp2(_789);
    float _793 = _790 * cb2_000y;
    float _794 = _791 * cb2_000y;
    float _795 = _792 * cb2_000y;
    float _796 = _793 + cb2_000x;
    float _797 = _794 + cb2_000x;
    float _798 = _795 + cb2_000x;
    float _799 = saturate(_796);
    float _800 = saturate(_797);
    float _801 = saturate(_798);
    _803 = _799;
    _804 = _800;
    _805 = _801;
  }
  float _809 = cb2_023x * TEXCOORD0_centroid.x;
  float _810 = cb2_023y * TEXCOORD0_centroid.y;
  float _813 = _809 + cb2_023z;
  float _814 = _810 + cb2_023w;
  float4 _817 = t8.SampleLevel(s0_space2, float2(_813, _814), 0.0f);
  float _819 = _817.x + -0.5f;
  float _820 = _819 * cb2_022x;
  float _821 = _820 + 0.5f;
  float _822 = _821 * 2.0f;
  float _823 = _822 * _803;
  float _824 = _822 * _804;
  float _825 = _822 * _805;
  float _829 = float((uint)(cb2_019z));
  float _830 = float((uint)(cb2_019w));
  float _831 = _829 + SV_Position.x;
  float _832 = _830 + SV_Position.y;
  uint _833 = uint(_831);
  uint _834 = uint(_832);
  uint _837 = cb2_019x + -1u;
  uint _838 = cb2_019y + -1u;
  int _839 = _833 & _837;
  int _840 = _834 & _838;
  float4 _841 = t3.Load(int3(_839, _840, 0));
  float _845 = _841.x * 2.0f;
  float _846 = _841.y * 2.0f;
  float _847 = _841.z * 2.0f;
  float _848 = _845 + -1.0f;
  float _849 = _846 + -1.0f;
  float _850 = _847 + -1.0f;
  float _851 = _848 * cb2_025w;
  float _852 = _849 * cb2_025w;
  float _853 = _850 * cb2_025w;
  float _854 = _851 + _823;
  float _855 = _852 + _824;
  float _856 = _853 + _825;
  float _857 = dot(float3(_854, _855, _856), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  SV_Target.x = _854;
  SV_Target.y = _855;
  SV_Target.z = _856;
  SV_Target.w = _857;
  SV_Target_1.x = _857;
  SV_Target_1.y = 0.0f;
  SV_Target_1.z = 0.0f;
  SV_Target_1.w = 0.0f;
  OutputSignature output_signature = { SV_Target, SV_Target_1 };
  return output_signature;
}
