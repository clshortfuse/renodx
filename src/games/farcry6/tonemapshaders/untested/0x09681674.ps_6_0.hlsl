#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture3D<float2> t6 : register(t6);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_001x : packoffset(c001.x);
  float cb2_001y : packoffset(c001.y);
  float cb2_001z : packoffset(c001.z);
  float cb2_002x : packoffset(c002.x);
  float cb2_002y : packoffset(c002.y);
  float cb2_002z : packoffset(c002.z);
  float cb2_002w : packoffset(c002.w);
  float cb2_009x : packoffset(c009.x);
  float cb2_009y : packoffset(c009.y);
  float cb2_009z : packoffset(c009.z);
  float cb2_010x : packoffset(c010.x);
  float cb2_010y : packoffset(c010.y);
  float cb2_010z : packoffset(c010.z);
  float cb2_011x : packoffset(c011.x);
  float cb2_011y : packoffset(c011.y);
  float cb2_011z : packoffset(c011.z);
  float cb2_011w : packoffset(c011.w);
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013x : packoffset(c013.x);
  float cb2_013y : packoffset(c013.y);
  float cb2_013z : packoffset(c013.z);
  float cb2_013w : packoffset(c013.w);
  float cb2_014x : packoffset(c014.x);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _18 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _20 = t1.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _24 = max(_20.x, 0.0f);
  float _25 = max(_20.y, 0.0f);
  float _26 = max(_20.z, 0.0f);
  float _27 = min(_24, 65000.0f);
  float _28 = min(_25, 65000.0f);
  float _29 = min(_26, 65000.0f);
  float4 _30 = t3.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _35 = max(_30.x, 0.0f);
  float _36 = max(_30.y, 0.0f);
  float _37 = max(_30.z, 0.0f);
  float _38 = max(_30.w, 0.0f);
  float _39 = min(_35, 5000.0f);
  float _40 = min(_36, 5000.0f);
  float _41 = min(_37, 5000.0f);
  float _42 = min(_38, 5000.0f);
  float _45 = _18.x * cb0_028z;
  float _46 = _45 + cb0_028x;
  float _47 = cb2_027w / _46;
  float _48 = 1.0f - _47;
  float _49 = abs(_48);
  float _51 = cb2_027y * _49;
  float _53 = _51 - cb2_027z;
  float _54 = saturate(_53);
  float _55 = max(_54, _42);
  float _56 = saturate(_55);
  float _60 = cb2_013x * TEXCOORD0_centroid.x;
  float _61 = cb2_013y * TEXCOORD0_centroid.y;
  float _64 = _60 + cb2_013z;
  float _65 = _61 + cb2_013w;
  float _68 = dot(float2(_64, _65), float2(_64, _65));
  float _69 = abs(_68);
  float _70 = log2(_69);
  float _71 = _70 * cb2_014x;
  float _72 = exp2(_71);
  float _73 = saturate(_72);
  float _77 = cb2_011x * TEXCOORD0_centroid.x;
  float _78 = cb2_011y * TEXCOORD0_centroid.y;
  float _81 = _77 + cb2_011z;
  float _82 = _78 + cb2_011w;
  float _83 = _81 * _73;
  float _84 = _82 * _73;
  float _85 = _83 + TEXCOORD0_centroid.x;
  float _86 = _84 + TEXCOORD0_centroid.y;
  float _90 = cb2_012x * TEXCOORD0_centroid.x;
  float _91 = cb2_012y * TEXCOORD0_centroid.y;
  float _94 = _90 + cb2_012z;
  float _95 = _91 + cb2_012w;
  float _96 = _94 * _73;
  float _97 = _95 * _73;
  float _98 = _96 + TEXCOORD0_centroid.x;
  float _99 = _97 + TEXCOORD0_centroid.y;
  float4 _100 = t1.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _104 = max(_100.x, 0.0f);
  float _105 = max(_100.y, 0.0f);
  float _106 = max(_100.z, 0.0f);
  float _107 = min(_104, 65000.0f);
  float _108 = min(_105, 65000.0f);
  float _109 = min(_106, 65000.0f);
  float4 _110 = t1.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _114 = max(_110.x, 0.0f);
  float _115 = max(_110.y, 0.0f);
  float _116 = max(_110.z, 0.0f);
  float _117 = min(_114, 65000.0f);
  float _118 = min(_115, 65000.0f);
  float _119 = min(_116, 65000.0f);
  float4 _120 = t3.SampleLevel(s2_space2, float2(_85, _86), 0.0f);
  float _124 = max(_120.x, 0.0f);
  float _125 = max(_120.y, 0.0f);
  float _126 = max(_120.z, 0.0f);
  float _127 = min(_124, 5000.0f);
  float _128 = min(_125, 5000.0f);
  float _129 = min(_126, 5000.0f);
  float4 _130 = t3.SampleLevel(s2_space2, float2(_98, _99), 0.0f);
  float _134 = max(_130.x, 0.0f);
  float _135 = max(_130.y, 0.0f);
  float _136 = max(_130.z, 0.0f);
  float _137 = min(_134, 5000.0f);
  float _138 = min(_135, 5000.0f);
  float _139 = min(_136, 5000.0f);
  float _144 = 1.0f - cb2_009x;
  float _145 = 1.0f - cb2_009y;
  float _146 = 1.0f - cb2_009z;
  float _151 = _144 - cb2_010x;
  float _152 = _145 - cb2_010y;
  float _153 = _146 - cb2_010z;
  float _154 = saturate(_151);
  float _155 = saturate(_152);
  float _156 = saturate(_153);
  float _157 = _154 * _27;
  float _158 = _155 * _28;
  float _159 = _156 * _29;
  float _160 = cb2_009x * _107;
  float _161 = cb2_009y * _108;
  float _162 = cb2_009z * _109;
  float _163 = _160 + _157;
  float _164 = _161 + _158;
  float _165 = _162 + _159;
  float _166 = cb2_010x * _117;
  float _167 = cb2_010y * _118;
  float _168 = cb2_010z * _119;
  float _169 = _163 + _166;
  float _170 = _164 + _167;
  float _171 = _165 + _168;
  float _172 = _154 * _39;
  float _173 = _155 * _40;
  float _174 = _156 * _41;
  float _175 = cb2_009x * _127;
  float _176 = cb2_009y * _128;
  float _177 = cb2_009z * _129;
  float _178 = cb2_010x * _137;
  float _179 = cb2_010y * _138;
  float _180 = cb2_010z * _139;
  float4 _181 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _185 = _172 - _169;
  float _186 = _185 + _175;
  float _187 = _186 + _178;
  float _188 = _173 - _170;
  float _189 = _188 + _176;
  float _190 = _189 + _179;
  float _191 = _174 - _171;
  float _192 = _191 + _177;
  float _193 = _192 + _180;
  float _194 = _187 * _56;
  float _195 = _190 * _56;
  float _196 = _193 * _56;
  float _197 = _194 + _169;
  float _198 = _195 + _170;
  float _199 = _196 + _171;
  float _200 = dot(float3(_197, _198, _199), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _204 = t0[0].SExposureData_020;
  float _206 = t0[0].SExposureData_004;
  float _208 = cb2_018x * 0.5f;
  float _209 = _208 * cb2_018y;
  float _210 = _206.x - _209;
  float _211 = cb2_018y * cb2_018x;
  float _212 = 1.0f / _211;
  float _213 = _210 * _212;
  float _214 = _200 / _204.x;
  float _215 = _214 * 5464.01611328125f;
  float _216 = _215 + 9.99999993922529e-09f;
  float _217 = log2(_216);
  float _218 = _217 - _210;
  float _219 = _218 * _212;
  float _220 = saturate(_219);
  float2 _221 = t6.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _220), 0.0f);
  float _224 = max(_221.y, 1.0000000116860974e-07f);
  float _225 = _221.x / _224;
  float _226 = _225 + _213;
  float _227 = _226 / _212;
  float _228 = _227 - _206.x;
  float _229 = -0.0f - _228;
  float _231 = _229 - cb2_027x;
  float _232 = max(0.0f, _231);
  float _235 = cb2_026z * _232;
  float _236 = _228 - cb2_027x;
  float _237 = max(0.0f, _236);
  float _239 = cb2_026w * _237;
  bool _240 = (_228 < 0.0f);
  float _241 = select(_240, _235, _239);
  float _242 = exp2(_241);
  float _243 = _242 * _197;
  float _244 = _242 * _198;
  float _245 = _242 * _199;
  float _250 = cb2_024y * _181.x;
  float _251 = cb2_024z * _181.y;
  float _252 = cb2_024w * _181.z;
  float _253 = _250 + _243;
  float _254 = _251 + _244;
  float _255 = _252 + _245;
  float _260 = _253 * cb2_025x;
  float _261 = _254 * cb2_025y;
  float _262 = _255 * cb2_025z;
  float _263 = dot(float3(_260, _261, _262), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _264 = t0[0].SExposureData_012;
  float _266 = _263 * 5464.01611328125f;
  float _267 = _266 * _264.x;
  float _268 = _267 + 9.99999993922529e-09f;
  float _269 = log2(_268);
  float _270 = _269 + 16.929765701293945f;
  float _271 = _270 * 0.05734497308731079f;
  float _272 = saturate(_271);
  float _273 = _272 * _272;
  float _274 = _272 * 2.0f;
  float _275 = 3.0f - _274;
  float _276 = _273 * _275;
  float _277 = _261 * 0.8450999855995178f;
  float _278 = _262 * 0.14589999616146088f;
  float _279 = _277 + _278;
  float _280 = _279 * 2.4890189170837402f;
  float _281 = _279 * 0.3754962384700775f;
  float _282 = _279 * 2.811495304107666f;
  float _283 = _279 * 5.519708156585693f;
  float _284 = _263 - _280;
  float _285 = _276 * _284;
  float _286 = _285 + _280;
  float _287 = _276 * 0.5f;
  float _288 = _287 + 0.5f;
  float _289 = _288 * _284;
  float _290 = _289 + _280;
  float _291 = _260 - _281;
  float _292 = _261 - _282;
  float _293 = _262 - _283;
  float _294 = _288 * _291;
  float _295 = _288 * _292;
  float _296 = _288 * _293;
  float _297 = _294 + _281;
  float _298 = _295 + _282;
  float _299 = _296 + _283;
  float _300 = 1.0f / _290;
  float _301 = _286 * _300;
  float _302 = _301 * _297;
  float _303 = _301 * _298;
  float _304 = _301 * _299;
  float _308 = cb2_020x * TEXCOORD0_centroid.x;
  float _309 = cb2_020y * TEXCOORD0_centroid.y;
  float _312 = _308 + cb2_020z;
  float _313 = _309 + cb2_020w;
  float _316 = dot(float2(_312, _313), float2(_312, _313));
  float _317 = 1.0f - _316;
  float _318 = saturate(_317);
  float _319 = log2(_318);
  float _320 = _319 * cb2_021w;
  float _321 = exp2(_320);
  float _325 = _302 - cb2_021x;
  float _326 = _303 - cb2_021y;
  float _327 = _304 - cb2_021z;
  float _328 = _325 * _321;
  float _329 = _326 * _321;
  float _330 = _327 * _321;
  float _331 = _328 + cb2_021x;
  float _332 = _329 + cb2_021y;
  float _333 = _330 + cb2_021z;
  float _334 = t0[0].SExposureData_000;
  float _336 = max(_204.x, 0.0010000000474974513f);
  float _337 = 1.0f / _336;
  float _338 = _337 * _334.x;
  bool _341 = ((uint)(cb2_069y) == 0);
  float _347;
  float _348;
  float _349;
  float _403;
  float _404;
  float _405;
  float _480;
  float _481;
  float _482;
  float _583;
  float _584;
  float _585;
  float _610;
  float _622;
  float _650;
  float _662;
  float _674;
  float _675;
  float _676;
  float _703;
  float _704;
  float _705;
  if (!_341) {
    float _343 = _338 * _331;
    float _344 = _338 * _332;
    float _345 = _338 * _333;
    _347 = _343;
    _348 = _344;
    _349 = _345;
  } else {
    _347 = _331;
    _348 = _332;
    _349 = _333;
  }
  float _350 = _347 * 0.6130970120429993f;
  float _351 = mad(0.33952298760414124f, _348, _350);
  float _352 = mad(0.04737899824976921f, _349, _351);
  float _353 = _347 * 0.07019399851560593f;
  float _354 = mad(0.9163540005683899f, _348, _353);
  float _355 = mad(0.013451999984681606f, _349, _354);
  float _356 = _347 * 0.02061600051820278f;
  float _357 = mad(0.10956999659538269f, _348, _356);
  float _358 = mad(0.8698149919509888f, _349, _357);
  float _359 = log2(_352);
  float _360 = log2(_355);
  float _361 = log2(_358);
  float _362 = _359 * 0.04211956635117531f;
  float _363 = _360 * 0.04211956635117531f;
  float _364 = _361 * 0.04211956635117531f;
  float _365 = _362 + 0.6252607107162476f;
  float _366 = _363 + 0.6252607107162476f;
  float _367 = _364 + 0.6252607107162476f;
  float4 _368 = t5.SampleLevel(s2_space2, float3(_365, _366, _367), 0.0f);
  bool _374 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _378 = cb2_017x * _368.x;
    float _379 = cb2_017x * _368.y;
    float _380 = cb2_017x * _368.z;
    float _382 = _378 + cb2_017y;
    float _383 = _379 + cb2_017y;
    float _384 = _380 + cb2_017y;
    float _385 = exp2(_382);
    float _386 = exp2(_383);
    float _387 = exp2(_384);
    float _388 = _385 + 1.0f;
    float _389 = _386 + 1.0f;
    float _390 = _387 + 1.0f;
    float _391 = 1.0f / _388;
    float _392 = 1.0f / _389;
    float _393 = 1.0f / _390;
    float _395 = cb2_017z * _391;
    float _396 = cb2_017z * _392;
    float _397 = cb2_017z * _393;
    float _399 = _395 + cb2_017w;
    float _400 = _396 + cb2_017w;
    float _401 = _397 + cb2_017w;
    _403 = _399;
    _404 = _400;
    _405 = _401;
  } else {
    _403 = _368.x;
    _404 = _368.y;
    _405 = _368.z;
  }
  float _406 = _403 * 23.0f;
  float _407 = _406 + -14.473931312561035f;
  float _408 = exp2(_407);
  float _409 = _404 * 23.0f;
  float _410 = _409 + -14.473931312561035f;
  float _411 = exp2(_410);
  float _412 = _405 * 23.0f;
  float _413 = _412 + -14.473931312561035f;
  float _414 = exp2(_413);
  float _415 = dot(float3(_408, _411, _414), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _420 = dot(float3(_408, _411, _414), float3(_408, _411, _414));
  float _421 = rsqrt(_420);
  float _422 = _421 * _408;
  float _423 = _421 * _411;
  float _424 = _421 * _414;
  float _425 = cb2_001x - _422;
  float _426 = cb2_001y - _423;
  float _427 = cb2_001z - _424;
  float _428 = dot(float3(_425, _426, _427), float3(_425, _426, _427));
  float _431 = cb2_002z * _428;
  float _433 = _431 + cb2_002w;
  float _434 = saturate(_433);
  float _436 = cb2_002x * _434;
  float _437 = _415 - _408;
  float _438 = _415 - _411;
  float _439 = _415 - _414;
  float _440 = _436 * _437;
  float _441 = _436 * _438;
  float _442 = _436 * _439;
  float _443 = _440 + _408;
  float _444 = _441 + _411;
  float _445 = _442 + _414;
  float _447 = cb2_002y * _434;
  float _448 = 0.10000000149011612f - _443;
  float _449 = 0.10000000149011612f - _444;
  float _450 = 0.10000000149011612f - _445;
  float _451 = _448 * _447;
  float _452 = _449 * _447;
  float _453 = _450 * _447;
  float _454 = _451 + _443;
  float _455 = _452 + _444;
  float _456 = _453 + _445;
  float _457 = saturate(_454);
  float _458 = saturate(_455);
  float _459 = saturate(_456);
  float _465 = cb2_016x - _457;
  float _466 = cb2_016y - _458;
  float _467 = cb2_016z - _459;
  float _468 = _465 * cb2_016w;
  float _469 = _466 * cb2_016w;
  float _470 = _467 * cb2_016w;
  float _471 = _468 + _457;
  float _472 = _469 + _458;
  float _473 = _470 + _459;
  if (_374 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _476 = cb2_024x * _471;
    float _477 = cb2_024x * _472;
    float _478 = cb2_024x * _473;
    _480 = _476;
    _481 = _477;
    _482 = _478;
  } else {
    _480 = _471;
    _481 = _472;
    _482 = _473;
  }
  float _483 = _480 * 0.9708889722824097f;
  float _484 = mad(0.026962999254465103f, _481, _483);
  float _485 = mad(0.002148000057786703f, _482, _484);
  float _486 = _480 * 0.01088900025933981f;
  float _487 = mad(0.9869629740715027f, _481, _486);
  float _488 = mad(0.002148000057786703f, _482, _487);
  float _489 = mad(0.026962999254465103f, _481, _486);
  float _490 = mad(0.9621480107307434f, _482, _489);
  if (_374) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _495 = cb1_018y * 0.10000000149011612f;
        float _496 = log2(cb1_018z);
        float _497 = _496 + -13.287712097167969f;
        float _498 = _497 * 1.4929734468460083f;
        float _499 = _498 + 18.0f;
        float _500 = exp2(_499);
        float _501 = _500 * 0.18000000715255737f;
        float _502 = abs(_501);
        float _503 = log2(_502);
        float _504 = _503 * 1.5f;
        float _505 = exp2(_504);
        float _506 = _505 * _495;
        float _507 = _506 / cb1_018z;
        float _508 = _507 + -0.07636754959821701f;
        float _509 = _503 * 1.2750000953674316f;
        float _510 = exp2(_509);
        float _511 = _510 * 0.07636754959821701f;
        float _512 = cb1_018y * 0.011232397519052029f;
        float _513 = _512 * _505;
        float _514 = _513 / cb1_018z;
        float _515 = _511 - _514;
        float _516 = _510 + -0.11232396960258484f;
        float _517 = _516 * _495;
        float _518 = _517 / cb1_018z;
        float _519 = _518 * cb1_018z;
        float _520 = abs(_485);
        float _521 = abs(_488);
        float _522 = abs(_490);
        float _523 = log2(_520);
        float _524 = log2(_521);
        float _525 = log2(_522);
        float _526 = _523 * 1.5f;
        float _527 = _524 * 1.5f;
        float _528 = _525 * 1.5f;
        float _529 = exp2(_526);
        float _530 = exp2(_527);
        float _531 = exp2(_528);
        float _532 = _529 * _519;
        float _533 = _530 * _519;
        float _534 = _531 * _519;
        float _535 = _523 * 1.2750000953674316f;
        float _536 = _524 * 1.2750000953674316f;
        float _537 = _525 * 1.2750000953674316f;
        float _538 = exp2(_535);
        float _539 = exp2(_536);
        float _540 = exp2(_537);
        float _541 = _538 * _508;
        float _542 = _539 * _508;
        float _543 = _540 * _508;
        float _544 = _541 + _515;
        float _545 = _542 + _515;
        float _546 = _543 + _515;
        float _547 = _532 / _544;
        float _548 = _533 / _545;
        float _549 = _534 / _546;
        float _550 = _547 * 9.999999747378752e-05f;
        float _551 = _548 * 9.999999747378752e-05f;
        float _552 = _549 * 9.999999747378752e-05f;
        float _553 = 5000.0f / cb1_018y;
        float _554 = _550 * _553;
        float _555 = _551 * _553;
        float _556 = _552 * _553;
        _583 = _554;
        _584 = _555;
        _585 = _556;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_485, _488, _490));
      _583 = tonemapped.x, _584 = tonemapped.y, _585 = tonemapped.z;
    }
      } else {
        float _558 = _485 + 0.020616600289940834f;
        float _559 = _488 + 0.020616600289940834f;
        float _560 = _490 + 0.020616600289940834f;
        float _561 = _558 * _485;
        float _562 = _559 * _488;
        float _563 = _560 * _490;
        float _564 = _561 + -7.456949970219284e-05f;
        float _565 = _562 + -7.456949970219284e-05f;
        float _566 = _563 + -7.456949970219284e-05f;
        float _567 = _485 * 0.9837960004806519f;
        float _568 = _488 * 0.9837960004806519f;
        float _569 = _490 * 0.9837960004806519f;
        float _570 = _567 + 0.4336790144443512f;
        float _571 = _568 + 0.4336790144443512f;
        float _572 = _569 + 0.4336790144443512f;
        float _573 = _570 * _485;
        float _574 = _571 * _488;
        float _575 = _572 * _490;
        float _576 = _573 + 0.24617899954319f;
        float _577 = _574 + 0.24617899954319f;
        float _578 = _575 + 0.24617899954319f;
        float _579 = _564 / _576;
        float _580 = _565 / _577;
        float _581 = _566 / _578;
        _583 = _579;
        _584 = _580;
        _585 = _581;
      }
      float _586 = _583 * 1.6047500371932983f;
      float _587 = mad(-0.5310800075531006f, _584, _586);
      float _588 = mad(-0.07366999983787537f, _585, _587);
      float _589 = _583 * -0.10208000242710114f;
      float _590 = mad(1.1081299781799316f, _584, _589);
      float _591 = mad(-0.006049999967217445f, _585, _590);
      float _592 = _583 * -0.0032599999103695154f;
      float _593 = mad(-0.07275000214576721f, _584, _592);
      float _594 = mad(1.0760200023651123f, _585, _593);
      if (_374) {
        // float _596 = max(_588, 0.0f);
        // float _597 = max(_591, 0.0f);
        // float _598 = max(_594, 0.0f);
        // bool _599 = !(_596 >= 0.0030399328097701073f);
        // if (!_599) {
        //   float _601 = abs(_596);
        //   float _602 = log2(_601);
        //   float _603 = _602 * 0.4166666567325592f;
        //   float _604 = exp2(_603);
        //   float _605 = _604 * 1.0549999475479126f;
        //   float _606 = _605 + -0.054999999701976776f;
        //   _610 = _606;
        // } else {
        //   float _608 = _596 * 12.923210144042969f;
        //   _610 = _608;
        // }
        // bool _611 = !(_597 >= 0.0030399328097701073f);
        // if (!_611) {
        //   float _613 = abs(_597);
        //   float _614 = log2(_613);
        //   float _615 = _614 * 0.4166666567325592f;
        //   float _616 = exp2(_615);
        //   float _617 = _616 * 1.0549999475479126f;
        //   float _618 = _617 + -0.054999999701976776f;
        //   _622 = _618;
        // } else {
        //   float _620 = _597 * 12.923210144042969f;
        //   _622 = _620;
        // }
        // bool _623 = !(_598 >= 0.0030399328097701073f);
        // if (!_623) {
        //   float _625 = abs(_598);
        //   float _626 = log2(_625);
        //   float _627 = _626 * 0.4166666567325592f;
        //   float _628 = exp2(_627);
        //   float _629 = _628 * 1.0549999475479126f;
        //   float _630 = _629 + -0.054999999701976776f;
        //   _703 = _610;
        //   _704 = _622;
        //   _705 = _630;
        // } else {
        //   float _632 = _598 * 12.923210144042969f;
        //   _703 = _610;
        //   _704 = _622;
        //   _705 = _632;
        // }
        _703 = renodx::color::srgb::EncodeSafe(_588);
        _704 = renodx::color::srgb::EncodeSafe(_591);
        _705 = renodx::color::srgb::EncodeSafe(_594);

      } else {
        float _634 = saturate(_588);
        float _635 = saturate(_591);
        float _636 = saturate(_594);
        bool _637 = ((uint)(cb1_018w) == -2);
        if (!_637) {
          bool _639 = !(_634 >= 0.0030399328097701073f);
          if (!_639) {
            float _641 = abs(_634);
            float _642 = log2(_641);
            float _643 = _642 * 0.4166666567325592f;
            float _644 = exp2(_643);
            float _645 = _644 * 1.0549999475479126f;
            float _646 = _645 + -0.054999999701976776f;
            _650 = _646;
          } else {
            float _648 = _634 * 12.923210144042969f;
            _650 = _648;
          }
          bool _651 = !(_635 >= 0.0030399328097701073f);
          if (!_651) {
            float _653 = abs(_635);
            float _654 = log2(_653);
            float _655 = _654 * 0.4166666567325592f;
            float _656 = exp2(_655);
            float _657 = _656 * 1.0549999475479126f;
            float _658 = _657 + -0.054999999701976776f;
            _662 = _658;
          } else {
            float _660 = _635 * 12.923210144042969f;
            _662 = _660;
          }
          bool _663 = !(_636 >= 0.0030399328097701073f);
          if (!_663) {
            float _665 = abs(_636);
            float _666 = log2(_665);
            float _667 = _666 * 0.4166666567325592f;
            float _668 = exp2(_667);
            float _669 = _668 * 1.0549999475479126f;
            float _670 = _669 + -0.054999999701976776f;
            _674 = _650;
            _675 = _662;
            _676 = _670;
          } else {
            float _672 = _636 * 12.923210144042969f;
            _674 = _650;
            _675 = _662;
            _676 = _672;
          }
        } else {
          _674 = _634;
          _675 = _635;
          _676 = _636;
        }
        float _681 = abs(_674);
        float _682 = abs(_675);
        float _683 = abs(_676);
        float _684 = log2(_681);
        float _685 = log2(_682);
        float _686 = log2(_683);
        float _687 = _684 * cb2_000z;
        float _688 = _685 * cb2_000z;
        float _689 = _686 * cb2_000z;
        float _690 = exp2(_687);
        float _691 = exp2(_688);
        float _692 = exp2(_689);
        float _693 = _690 * cb2_000y;
        float _694 = _691 * cb2_000y;
        float _695 = _692 * cb2_000y;
        float _696 = _693 + cb2_000x;
        float _697 = _694 + cb2_000x;
        float _698 = _695 + cb2_000x;
        float _699 = saturate(_696);
        float _700 = saturate(_697);
        float _701 = saturate(_698);
        _703 = _699;
        _704 = _700;
        _705 = _701;
      }
      float _706 = dot(float3(_703, _704, _705), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _703;
      SV_Target.y = _704;
      SV_Target.z = _705;
      SV_Target.w = _706;
      SV_Target_1.x = _706;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
