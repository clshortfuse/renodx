#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026x : packoffset(c026.x);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s0_space2 : register(s0, space2);

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _21 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _26 = cb2_015x * TEXCOORD0_centroid.x;
  float _27 = cb2_015y * TEXCOORD0_centroid.y;
  float _30 = _26 + cb2_015z;
  float _31 = _27 + cb2_015w;
  float4 _32 = t7.SampleLevel(s0_space2, float2(_30, _31), 0.0f);
  float _36 = saturate(_32.x);
  float _37 = saturate(_32.z);
  float _40 = cb2_026x * _37;
  float _41 = _36 * 6.283199787139893f;
  float _42 = cos(_41);
  float _43 = sin(_41);
  float _44 = _40 * _42;
  float _45 = _43 * _40;
  float _46 = 1.0f - _32.y;
  float _47 = saturate(_46);
  float _48 = _44 * _47;
  float _49 = _45 * _47;
  float _50 = _48 + TEXCOORD0_centroid.x;
  float _51 = _49 + TEXCOORD0_centroid.y;
  float4 _52 = t1.SampleLevel(s4_space2, float2(_50, _51), 0.0f);
  float _56 = max(_52.x, 0.0f);
  float _57 = max(_52.y, 0.0f);
  float _58 = max(_52.z, 0.0f);
  float _59 = min(_56, 65000.0f);
  float _60 = min(_57, 65000.0f);
  float _61 = min(_58, 65000.0f);
  float4 _62 = t3.SampleLevel(s2_space2, float2(_50, _51), 0.0f);
  float _67 = max(_62.x, 0.0f);
  float _68 = max(_62.y, 0.0f);
  float _69 = max(_62.z, 0.0f);
  float _70 = max(_62.w, 0.0f);
  float _71 = min(_67, 5000.0f);
  float _72 = min(_68, 5000.0f);
  float _73 = min(_69, 5000.0f);
  float _74 = min(_70, 5000.0f);
  float _77 = _21.x * cb0_028z;
  float _78 = _77 + cb0_028x;
  float _79 = cb2_027w / _78;
  float _80 = 1.0f - _79;
  float _81 = abs(_80);
  float _83 = cb2_027y * _81;
  float _85 = _83 - cb2_027z;
  float _86 = saturate(_85);
  float _87 = max(_86, _74);
  float _88 = saturate(_87);
  float _92 = cb2_006x * _50;
  float _93 = cb2_006y * _51;
  float _96 = _92 + cb2_006z;
  float _97 = _93 + cb2_006w;
  float _101 = cb2_007x * _50;
  float _102 = cb2_007y * _51;
  float _105 = _101 + cb2_007z;
  float _106 = _102 + cb2_007w;
  float _110 = cb2_008x * _50;
  float _111 = cb2_008y * _51;
  float _114 = _110 + cb2_008z;
  float _115 = _111 + cb2_008w;
  float4 _116 = t1.SampleLevel(s2_space2, float2(_96, _97), 0.0f);
  float _118 = max(_116.x, 0.0f);
  float _119 = min(_118, 65000.0f);
  float4 _120 = t1.SampleLevel(s2_space2, float2(_105, _106), 0.0f);
  float _122 = max(_120.y, 0.0f);
  float _123 = min(_122, 65000.0f);
  float4 _124 = t1.SampleLevel(s2_space2, float2(_114, _115), 0.0f);
  float _126 = max(_124.z, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t3.SampleLevel(s2_space2, float2(_96, _97), 0.0f);
  float _130 = max(_128.x, 0.0f);
  float _131 = min(_130, 5000.0f);
  float4 _132 = t3.SampleLevel(s2_space2, float2(_105, _106), 0.0f);
  float _134 = max(_132.y, 0.0f);
  float _135 = min(_134, 5000.0f);
  float4 _136 = t3.SampleLevel(s2_space2, float2(_114, _115), 0.0f);
  float _138 = max(_136.z, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _146 = cb2_005x * _140.x;
  float _147 = cb2_005x * _140.y;
  float _148 = cb2_005x * _140.z;
  float _149 = _119 - _59;
  float _150 = _123 - _60;
  float _151 = _127 - _61;
  float _152 = _146 * _149;
  float _153 = _147 * _150;
  float _154 = _148 * _151;
  float _155 = _152 + _59;
  float _156 = _153 + _60;
  float _157 = _154 + _61;
  float _158 = _131 - _71;
  float _159 = _135 - _72;
  float _160 = _139 - _73;
  float _161 = _146 * _158;
  float _162 = _147 * _159;
  float _163 = _148 * _160;
  float _164 = _161 + _71;
  float _165 = _162 + _72;
  float _166 = _163 + _73;
  float4 _167 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _171 = _164 - _155;
  float _172 = _165 - _156;
  float _173 = _166 - _157;
  float _174 = _171 * _88;
  float _175 = _172 * _88;
  float _176 = _173 * _88;
  float _177 = _174 + _155;
  float _178 = _175 + _156;
  float _179 = _176 + _157;
  float _180 = dot(float3(_177, _178, _179), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _184 = t0[0].SExposureData_020;
  float _186 = t0[0].SExposureData_004;
  float _188 = cb2_018x * 0.5f;
  float _189 = _188 * cb2_018y;
  float _190 = _186.x - _189;
  float _191 = cb2_018y * cb2_018x;
  float _192 = 1.0f / _191;
  float _193 = _190 * _192;
  float _194 = _180 / _184.x;
  float _195 = _194 * 5464.01611328125f;
  float _196 = _195 + 9.99999993922529e-09f;
  float _197 = log2(_196);
  float _198 = _197 - _190;
  float _199 = _198 * _192;
  float _200 = saturate(_199);
  float2 _201 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _200), 0.0f);
  float _204 = max(_201.y, 1.0000000116860974e-07f);
  float _205 = _201.x / _204;
  float _206 = _205 + _193;
  float _207 = _206 / _192;
  float _208 = _207 - _186.x;
  float _209 = -0.0f - _208;
  float _211 = _209 - cb2_027x;
  float _212 = max(0.0f, _211);
  float _214 = cb2_026z * _212;
  float _215 = _208 - cb2_027x;
  float _216 = max(0.0f, _215);
  float _218 = cb2_026w * _216;
  bool _219 = (_208 < 0.0f);
  float _220 = select(_219, _214, _218);
  float _221 = exp2(_220);
  float _222 = _221 * _177;
  float _223 = _221 * _178;
  float _224 = _221 * _179;
  float _229 = cb2_024y * _167.x;
  float _230 = cb2_024z * _167.y;
  float _231 = cb2_024w * _167.z;
  float _232 = _229 + _222;
  float _233 = _230 + _223;
  float _234 = _231 + _224;
  float _239 = _232 * cb2_025x;
  float _240 = _233 * cb2_025y;
  float _241 = _234 * cb2_025z;
  float _242 = dot(float3(_239, _240, _241), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _243 = t0[0].SExposureData_012;
  float _245 = _242 * 5464.01611328125f;
  float _246 = _245 * _243.x;
  float _247 = _246 + 9.99999993922529e-09f;
  float _248 = log2(_247);
  float _249 = _248 + 16.929765701293945f;
  float _250 = _249 * 0.05734497308731079f;
  float _251 = saturate(_250);
  float _252 = _251 * _251;
  float _253 = _251 * 2.0f;
  float _254 = 3.0f - _253;
  float _255 = _252 * _254;
  float _256 = _240 * 0.8450999855995178f;
  float _257 = _241 * 0.14589999616146088f;
  float _258 = _256 + _257;
  float _259 = _258 * 2.4890189170837402f;
  float _260 = _258 * 0.3754962384700775f;
  float _261 = _258 * 2.811495304107666f;
  float _262 = _258 * 5.519708156585693f;
  float _263 = _242 - _259;
  float _264 = _255 * _263;
  float _265 = _264 + _259;
  float _266 = _255 * 0.5f;
  float _267 = _266 + 0.5f;
  float _268 = _267 * _263;
  float _269 = _268 + _259;
  float _270 = _239 - _260;
  float _271 = _240 - _261;
  float _272 = _241 - _262;
  float _273 = _267 * _270;
  float _274 = _267 * _271;
  float _275 = _267 * _272;
  float _276 = _273 + _260;
  float _277 = _274 + _261;
  float _278 = _275 + _262;
  float _279 = 1.0f / _269;
  float _280 = _265 * _279;
  float _281 = _280 * _276;
  float _282 = _280 * _277;
  float _283 = _280 * _278;
  float _287 = cb2_020x * TEXCOORD0_centroid.x;
  float _288 = cb2_020y * TEXCOORD0_centroid.y;
  float _291 = _287 + cb2_020z;
  float _292 = _288 + cb2_020w;
  float _295 = dot(float2(_291, _292), float2(_291, _292));
  float _296 = 1.0f - _295;
  float _297 = saturate(_296);
  float _298 = log2(_297);
  float _299 = _298 * cb2_021w;
  float _300 = exp2(_299);
  float _304 = _281 - cb2_021x;
  float _305 = _282 - cb2_021y;
  float _306 = _283 - cb2_021z;
  float _307 = _304 * _300;
  float _308 = _305 * _300;
  float _309 = _306 * _300;
  float _310 = _307 + cb2_021x;
  float _311 = _308 + cb2_021y;
  float _312 = _309 + cb2_021z;
  float _313 = t0[0].SExposureData_000;
  float _315 = max(_184.x, 0.0010000000474974513f);
  float _316 = 1.0f / _315;
  float _317 = _316 * _313.x;
  bool _320 = ((uint)(cb2_069y) == 0);
  float _326;
  float _327;
  float _328;
  float _382;
  float _383;
  float _384;
  float _414;
  float _415;
  float _416;
  float _517;
  float _518;
  float _519;
  float _544;
  float _556;
  float _584;
  float _596;
  float _608;
  float _609;
  float _610;
  float _637;
  float _638;
  float _639;
  if (!_320) {
    float _322 = _317 * _310;
    float _323 = _317 * _311;
    float _324 = _317 * _312;
    _326 = _322;
    _327 = _323;
    _328 = _324;
  } else {
    _326 = _310;
    _327 = _311;
    _328 = _312;
  }
  float _329 = _326 * 0.6130970120429993f;
  float _330 = mad(0.33952298760414124f, _327, _329);
  float _331 = mad(0.04737899824976921f, _328, _330);
  float _332 = _326 * 0.07019399851560593f;
  float _333 = mad(0.9163540005683899f, _327, _332);
  float _334 = mad(0.013451999984681606f, _328, _333);
  float _335 = _326 * 0.02061600051820278f;
  float _336 = mad(0.10956999659538269f, _327, _335);
  float _337 = mad(0.8698149919509888f, _328, _336);
  float _338 = log2(_331);
  float _339 = log2(_334);
  float _340 = log2(_337);
  float _341 = _338 * 0.04211956635117531f;
  float _342 = _339 * 0.04211956635117531f;
  float _343 = _340 * 0.04211956635117531f;
  float _344 = _341 + 0.6252607107162476f;
  float _345 = _342 + 0.6252607107162476f;
  float _346 = _343 + 0.6252607107162476f;
  float4 _347 = t5.SampleLevel(s2_space2, float3(_344, _345, _346), 0.0f);
  bool _353 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_353 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _357 = cb2_017x * _347.x;
    float _358 = cb2_017x * _347.y;
    float _359 = cb2_017x * _347.z;
    float _361 = _357 + cb2_017y;
    float _362 = _358 + cb2_017y;
    float _363 = _359 + cb2_017y;
    float _364 = exp2(_361);
    float _365 = exp2(_362);
    float _366 = exp2(_363);
    float _367 = _364 + 1.0f;
    float _368 = _365 + 1.0f;
    float _369 = _366 + 1.0f;
    float _370 = 1.0f / _367;
    float _371 = 1.0f / _368;
    float _372 = 1.0f / _369;
    float _374 = cb2_017z * _370;
    float _375 = cb2_017z * _371;
    float _376 = cb2_017z * _372;
    float _378 = _374 + cb2_017w;
    float _379 = _375 + cb2_017w;
    float _380 = _376 + cb2_017w;
    _382 = _378;
    _383 = _379;
    _384 = _380;
  } else {
    _382 = _347.x;
    _383 = _347.y;
    _384 = _347.z;
  }
  float _385 = _382 * 23.0f;
  float _386 = _385 + -14.473931312561035f;
  float _387 = exp2(_386);
  float _388 = _383 * 23.0f;
  float _389 = _388 + -14.473931312561035f;
  float _390 = exp2(_389);
  float _391 = _384 * 23.0f;
  float _392 = _391 + -14.473931312561035f;
  float _393 = exp2(_392);
  float _399 = cb2_016x - _387;
  float _400 = cb2_016y - _390;
  float _401 = cb2_016z - _393;
  float _402 = _399 * cb2_016w;
  float _403 = _400 * cb2_016w;
  float _404 = _401 * cb2_016w;
  float _405 = _402 + _387;
  float _406 = _403 + _390;
  float _407 = _404 + _393;
  if (_353 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _410 = cb2_024x * _405;
    float _411 = cb2_024x * _406;
    float _412 = cb2_024x * _407;
    _414 = _410;
    _415 = _411;
    _416 = _412;
  } else {
    _414 = _405;
    _415 = _406;
    _416 = _407;
  }
  float _417 = _414 * 0.9708889722824097f;
  float _418 = mad(0.026962999254465103f, _415, _417);
  float _419 = mad(0.002148000057786703f, _416, _418);
  float _420 = _414 * 0.01088900025933981f;
  float _421 = mad(0.9869629740715027f, _415, _420);
  float _422 = mad(0.002148000057786703f, _416, _421);
  float _423 = mad(0.026962999254465103f, _415, _420);
  float _424 = mad(0.9621480107307434f, _416, _423);
  if (_353) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _429 = cb1_018y * 0.10000000149011612f;
        float _430 = log2(cb1_018z);
        float _431 = _430 + -13.287712097167969f;
        float _432 = _431 * 1.4929734468460083f;
        float _433 = _432 + 18.0f;
        float _434 = exp2(_433);
        float _435 = _434 * 0.18000000715255737f;
        float _436 = abs(_435);
        float _437 = log2(_436);
        float _438 = _437 * 1.5f;
        float _439 = exp2(_438);
        float _440 = _439 * _429;
        float _441 = _440 / cb1_018z;
        float _442 = _441 + -0.07636754959821701f;
        float _443 = _437 * 1.2750000953674316f;
        float _444 = exp2(_443);
        float _445 = _444 * 0.07636754959821701f;
        float _446 = cb1_018y * 0.011232397519052029f;
        float _447 = _446 * _439;
        float _448 = _447 / cb1_018z;
        float _449 = _445 - _448;
        float _450 = _444 + -0.11232396960258484f;
        float _451 = _450 * _429;
        float _452 = _451 / cb1_018z;
        float _453 = _452 * cb1_018z;
        float _454 = abs(_419);
        float _455 = abs(_422);
        float _456 = abs(_424);
        float _457 = log2(_454);
        float _458 = log2(_455);
        float _459 = log2(_456);
        float _460 = _457 * 1.5f;
        float _461 = _458 * 1.5f;
        float _462 = _459 * 1.5f;
        float _463 = exp2(_460);
        float _464 = exp2(_461);
        float _465 = exp2(_462);
        float _466 = _463 * _453;
        float _467 = _464 * _453;
        float _468 = _465 * _453;
        float _469 = _457 * 1.2750000953674316f;
        float _470 = _458 * 1.2750000953674316f;
        float _471 = _459 * 1.2750000953674316f;
        float _472 = exp2(_469);
        float _473 = exp2(_470);
        float _474 = exp2(_471);
        float _475 = _472 * _442;
        float _476 = _473 * _442;
        float _477 = _474 * _442;
        float _478 = _475 + _449;
        float _479 = _476 + _449;
        float _480 = _477 + _449;
        float _481 = _466 / _478;
        float _482 = _467 / _479;
        float _483 = _468 / _480;
        float _484 = _481 * 9.999999747378752e-05f;
        float _485 = _482 * 9.999999747378752e-05f;
        float _486 = _483 * 9.999999747378752e-05f;
        float _487 = 5000.0f / cb1_018y;
        float _488 = _484 * _487;
        float _489 = _485 * _487;
        float _490 = _486 * _487;
        _517 = _488;
        _518 = _489;
        _519 = _490;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_419, _422, _424));
      _517 = tonemapped.x, _518 = tonemapped.y, _519 = tonemapped.z;
    }
      } else {
        float _492 = _419 + 0.020616600289940834f;
        float _493 = _422 + 0.020616600289940834f;
        float _494 = _424 + 0.020616600289940834f;
        float _495 = _492 * _419;
        float _496 = _493 * _422;
        float _497 = _494 * _424;
        float _498 = _495 + -7.456949970219284e-05f;
        float _499 = _496 + -7.456949970219284e-05f;
        float _500 = _497 + -7.456949970219284e-05f;
        float _501 = _419 * 0.9837960004806519f;
        float _502 = _422 * 0.9837960004806519f;
        float _503 = _424 * 0.9837960004806519f;
        float _504 = _501 + 0.4336790144443512f;
        float _505 = _502 + 0.4336790144443512f;
        float _506 = _503 + 0.4336790144443512f;
        float _507 = _504 * _419;
        float _508 = _505 * _422;
        float _509 = _506 * _424;
        float _510 = _507 + 0.24617899954319f;
        float _511 = _508 + 0.24617899954319f;
        float _512 = _509 + 0.24617899954319f;
        float _513 = _498 / _510;
        float _514 = _499 / _511;
        float _515 = _500 / _512;
        _517 = _513;
        _518 = _514;
        _519 = _515;
      }
      float _520 = _517 * 1.6047500371932983f;
      float _521 = mad(-0.5310800075531006f, _518, _520);
      float _522 = mad(-0.07366999983787537f, _519, _521);
      float _523 = _517 * -0.10208000242710114f;
      float _524 = mad(1.1081299781799316f, _518, _523);
      float _525 = mad(-0.006049999967217445f, _519, _524);
      float _526 = _517 * -0.0032599999103695154f;
      float _527 = mad(-0.07275000214576721f, _518, _526);
      float _528 = mad(1.0760200023651123f, _519, _527);
      if (_353) {
        // float _530 = max(_522, 0.0f);
        // float _531 = max(_525, 0.0f);
        // float _532 = max(_528, 0.0f);
        // bool _533 = !(_530 >= 0.0030399328097701073f);
        // if (!_533) {
        //   float _535 = abs(_530);
        //   float _536 = log2(_535);
        //   float _537 = _536 * 0.4166666567325592f;
        //   float _538 = exp2(_537);
        //   float _539 = _538 * 1.0549999475479126f;
        //   float _540 = _539 + -0.054999999701976776f;
        //   _544 = _540;
        // } else {
        //   float _542 = _530 * 12.923210144042969f;
        //   _544 = _542;
        // }
        // bool _545 = !(_531 >= 0.0030399328097701073f);
        // if (!_545) {
        //   float _547 = abs(_531);
        //   float _548 = log2(_547);
        //   float _549 = _548 * 0.4166666567325592f;
        //   float _550 = exp2(_549);
        //   float _551 = _550 * 1.0549999475479126f;
        //   float _552 = _551 + -0.054999999701976776f;
        //   _556 = _552;
        // } else {
        //   float _554 = _531 * 12.923210144042969f;
        //   _556 = _554;
        // }
        // bool _557 = !(_532 >= 0.0030399328097701073f);
        // if (!_557) {
        //   float _559 = abs(_532);
        //   float _560 = log2(_559);
        //   float _561 = _560 * 0.4166666567325592f;
        //   float _562 = exp2(_561);
        //   float _563 = _562 * 1.0549999475479126f;
        //   float _564 = _563 + -0.054999999701976776f;
        //   _637 = _544;
        //   _638 = _556;
        //   _639 = _564;
        // } else {
        //   float _566 = _532 * 12.923210144042969f;
        //   _637 = _544;
        //   _638 = _556;
        //   _639 = _566;
        // }
        _637 = renodx::color::srgb::EncodeSafe(_522);
        _638 = renodx::color::srgb::EncodeSafe(_525);
        _639 = renodx::color::srgb::EncodeSafe(_528);

      } else {
        float _568 = saturate(_522);
        float _569 = saturate(_525);
        float _570 = saturate(_528);
        bool _571 = ((uint)(cb1_018w) == -2);
        if (!_571) {
          bool _573 = !(_568 >= 0.0030399328097701073f);
          if (!_573) {
            float _575 = abs(_568);
            float _576 = log2(_575);
            float _577 = _576 * 0.4166666567325592f;
            float _578 = exp2(_577);
            float _579 = _578 * 1.0549999475479126f;
            float _580 = _579 + -0.054999999701976776f;
            _584 = _580;
          } else {
            float _582 = _568 * 12.923210144042969f;
            _584 = _582;
          }
          bool _585 = !(_569 >= 0.0030399328097701073f);
          if (!_585) {
            float _587 = abs(_569);
            float _588 = log2(_587);
            float _589 = _588 * 0.4166666567325592f;
            float _590 = exp2(_589);
            float _591 = _590 * 1.0549999475479126f;
            float _592 = _591 + -0.054999999701976776f;
            _596 = _592;
          } else {
            float _594 = _569 * 12.923210144042969f;
            _596 = _594;
          }
          bool _597 = !(_570 >= 0.0030399328097701073f);
          if (!_597) {
            float _599 = abs(_570);
            float _600 = log2(_599);
            float _601 = _600 * 0.4166666567325592f;
            float _602 = exp2(_601);
            float _603 = _602 * 1.0549999475479126f;
            float _604 = _603 + -0.054999999701976776f;
            _608 = _584;
            _609 = _596;
            _610 = _604;
          } else {
            float _606 = _570 * 12.923210144042969f;
            _608 = _584;
            _609 = _596;
            _610 = _606;
          }
        } else {
          _608 = _568;
          _609 = _569;
          _610 = _570;
        }
        float _615 = abs(_608);
        float _616 = abs(_609);
        float _617 = abs(_610);
        float _618 = log2(_615);
        float _619 = log2(_616);
        float _620 = log2(_617);
        float _621 = _618 * cb2_000z;
        float _622 = _619 * cb2_000z;
        float _623 = _620 * cb2_000z;
        float _624 = exp2(_621);
        float _625 = exp2(_622);
        float _626 = exp2(_623);
        float _627 = _624 * cb2_000y;
        float _628 = _625 * cb2_000y;
        float _629 = _626 * cb2_000y;
        float _630 = _627 + cb2_000x;
        float _631 = _628 + cb2_000x;
        float _632 = _629 + cb2_000x;
        float _633 = saturate(_630);
        float _634 = saturate(_631);
        float _635 = saturate(_632);
        _637 = _633;
        _638 = _634;
        _639 = _635;
      }
      float _640 = dot(float3(_637, _638, _639), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _637;
      SV_Target.y = _638;
      SV_Target.z = _639;
      SV_Target.w = _640;
      SV_Target_1.x = _640;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
