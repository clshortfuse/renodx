#include "../../common.hlsli"
struct SExposureData {
  float SExposureData_000;
  float SExposureData_004;
  float SExposureData_008;
  float SExposureData_012;
  float SExposureData_016;
  float SExposureData_020;
};

StructuredBuffer<SExposureData> t0 : register(t0);

Texture2D<float4> t1 : register(t1);

Texture2D<float> t2 : register(t2);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t4 : register(t4);

Texture3D<float4> t5 : register(t5);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t7 : register(t7);

Texture3D<float2> t8 : register(t8);

cbuffer cb0 : register(b0) {
  float cb0_028x : packoffset(c028.x);
  float cb0_028z : packoffset(c028.z);
};

cbuffer cb1 : register(b1) {
  float cb1_018y : packoffset(c018.y);
  float cb1_018z : packoffset(c018.z);
  uint cb1_018w : packoffset(c018.w);
};

cbuffer cb2 : register(b2) {
  float cb2_000x : packoffset(c000.x);
  float cb2_000y : packoffset(c000.y);
  float cb2_000z : packoffset(c000.z);
  float cb2_005x : packoffset(c005.x);
  float cb2_006x : packoffset(c006.x);
  float cb2_006y : packoffset(c006.y);
  float cb2_006z : packoffset(c006.z);
  float cb2_006w : packoffset(c006.w);
  float cb2_007x : packoffset(c007.x);
  float cb2_007y : packoffset(c007.y);
  float cb2_007z : packoffset(c007.z);
  float cb2_007w : packoffset(c007.w);
  float cb2_008x : packoffset(c008.x);
  float cb2_008y : packoffset(c008.y);
  float cb2_008z : packoffset(c008.z);
  float cb2_008w : packoffset(c008.w);
  float cb2_016x : packoffset(c016.x);
  float cb2_016y : packoffset(c016.y);
  float cb2_016z : packoffset(c016.z);
  float cb2_016w : packoffset(c016.w);
  float cb2_017x : packoffset(c017.x);
  float cb2_017y : packoffset(c017.y);
  float cb2_017z : packoffset(c017.z);
  float cb2_017w : packoffset(c017.w);
  float cb2_018x : packoffset(c018.x);
  float cb2_018y : packoffset(c018.y);
  float cb2_020x : packoffset(c020.x);
  float cb2_020y : packoffset(c020.y);
  float cb2_020z : packoffset(c020.z);
  float cb2_020w : packoffset(c020.w);
  float cb2_021x : packoffset(c021.x);
  float cb2_021y : packoffset(c021.y);
  float cb2_021z : packoffset(c021.z);
  float cb2_021w : packoffset(c021.w);
  float cb2_024x : packoffset(c024.x);
  float cb2_024y : packoffset(c024.y);
  float cb2_024z : packoffset(c024.z);
  float cb2_024w : packoffset(c024.w);
  float cb2_025x : packoffset(c025.x);
  float cb2_025y : packoffset(c025.y);
  float cb2_025z : packoffset(c025.z);
  float cb2_026z : packoffset(c026.z);
  float cb2_026w : packoffset(c026.w);
  float cb2_027x : packoffset(c027.x);
  float cb2_027y : packoffset(c027.y);
  float cb2_027z : packoffset(c027.z);
  float cb2_027w : packoffset(c027.w);
  uint cb2_069y : packoffset(c069.y);
};

SamplerState s2_space2 : register(s2, space2);

SamplerState s4_space2 : register(s4, space2);

struct OutputSignature {
  float4 SV_Target : SV_Target;
  float4 SV_Target_1 : SV_Target1;
};

OutputSignature main(
  linear float2 TEXCOORD0_centroid : TEXCOORD0_centroid,
  noperspective float4 SV_Position : SV_Position,
  nointerpolation uint SV_IsFrontFace : SV_IsFrontFace
) {
  float4 SV_Target;
  float4 SV_Target_1;
  float _20 = t2.SampleLevel(s4_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float4 _22 = t7.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _26 = _22.x * 6.283199787139893f;
  float _27 = cos(_26);
  float _28 = sin(_26);
  float _29 = _27 * _22.z;
  float _30 = _28 * _22.z;
  float _31 = _29 + TEXCOORD0_centroid.x;
  float _32 = _30 + TEXCOORD0_centroid.y;
  float _33 = _31 * 10.0f;
  float _34 = 10.0f - _33;
  float _35 = min(_33, _34);
  float _36 = saturate(_35);
  float _37 = _36 * _29;
  float _38 = _32 * 10.0f;
  float _39 = 10.0f - _38;
  float _40 = min(_38, _39);
  float _41 = saturate(_40);
  float _42 = _41 * _30;
  float _43 = _37 + TEXCOORD0_centroid.x;
  float _44 = _42 + TEXCOORD0_centroid.y;
  float4 _45 = t7.SampleLevel(s2_space2, float2(_43, _44), 0.0f);
  float _47 = _45.w * _37;
  float _48 = _45.w * _42;
  float _49 = 1.0f - _22.y;
  float _50 = saturate(_49);
  float _51 = _47 * _50;
  float _52 = _48 * _50;
  float _53 = _51 + TEXCOORD0_centroid.x;
  float _54 = _52 + TEXCOORD0_centroid.y;
  float4 _55 = t7.SampleLevel(s2_space2, float2(_53, _54), 0.0f);
  bool _57 = (_55.y > 0.0f);
  float _58 = select(_57, TEXCOORD0_centroid.x, _53);
  float _59 = select(_57, TEXCOORD0_centroid.y, _54);
  float4 _60 = t1.SampleLevel(s4_space2, float2(_58, _59), 0.0f);
  float _64 = max(_60.x, 0.0f);
  float _65 = max(_60.y, 0.0f);
  float _66 = max(_60.z, 0.0f);
  float _67 = min(_64, 65000.0f);
  float _68 = min(_65, 65000.0f);
  float _69 = min(_66, 65000.0f);
  float4 _70 = t3.SampleLevel(s2_space2, float2(_58, _59), 0.0f);
  float _75 = max(_70.x, 0.0f);
  float _76 = max(_70.y, 0.0f);
  float _77 = max(_70.z, 0.0f);
  float _78 = max(_70.w, 0.0f);
  float _79 = min(_75, 5000.0f);
  float _80 = min(_76, 5000.0f);
  float _81 = min(_77, 5000.0f);
  float _82 = min(_78, 5000.0f);
  float _85 = _20.x * cb0_028z;
  float _86 = _85 + cb0_028x;
  float _87 = cb2_027w / _86;
  float _88 = 1.0f - _87;
  float _89 = abs(_88);
  float _91 = cb2_027y * _89;
  float _93 = _91 - cb2_027z;
  float _94 = saturate(_93);
  float _95 = max(_94, _82);
  float _96 = saturate(_95);
  float _100 = cb2_006x * _58;
  float _101 = cb2_006y * _59;
  float _104 = _100 + cb2_006z;
  float _105 = _101 + cb2_006w;
  float _109 = cb2_007x * _58;
  float _110 = cb2_007y * _59;
  float _113 = _109 + cb2_007z;
  float _114 = _110 + cb2_007w;
  float _118 = cb2_008x * _58;
  float _119 = cb2_008y * _59;
  float _122 = _118 + cb2_008z;
  float _123 = _119 + cb2_008w;
  float4 _124 = t1.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _126 = max(_124.x, 0.0f);
  float _127 = min(_126, 65000.0f);
  float4 _128 = t1.SampleLevel(s2_space2, float2(_113, _114), 0.0f);
  float _130 = max(_128.y, 0.0f);
  float _131 = min(_130, 65000.0f);
  float4 _132 = t1.SampleLevel(s2_space2, float2(_122, _123), 0.0f);
  float _134 = max(_132.z, 0.0f);
  float _135 = min(_134, 65000.0f);
  float4 _136 = t3.SampleLevel(s2_space2, float2(_104, _105), 0.0f);
  float _138 = max(_136.x, 0.0f);
  float _139 = min(_138, 5000.0f);
  float4 _140 = t3.SampleLevel(s2_space2, float2(_113, _114), 0.0f);
  float _142 = max(_140.y, 0.0f);
  float _143 = min(_142, 5000.0f);
  float4 _144 = t3.SampleLevel(s2_space2, float2(_122, _123), 0.0f);
  float _146 = max(_144.z, 0.0f);
  float _147 = min(_146, 5000.0f);
  float4 _148 = t6.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _154 = cb2_005x * _148.x;
  float _155 = cb2_005x * _148.y;
  float _156 = cb2_005x * _148.z;
  float _157 = _127 - _67;
  float _158 = _131 - _68;
  float _159 = _135 - _69;
  float _160 = _154 * _157;
  float _161 = _155 * _158;
  float _162 = _156 * _159;
  float _163 = _160 + _67;
  float _164 = _161 + _68;
  float _165 = _162 + _69;
  float _166 = _139 - _79;
  float _167 = _143 - _80;
  float _168 = _147 - _81;
  float _169 = _154 * _166;
  float _170 = _155 * _167;
  float _171 = _156 * _168;
  float _172 = _169 + _79;
  float _173 = _170 + _80;
  float _174 = _171 + _81;
  float4 _175 = t4.SampleLevel(s2_space2, float2(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y), 0.0f);
  float _179 = _172 - _163;
  float _180 = _173 - _164;
  float _181 = _174 - _165;
  float _182 = _179 * _96;
  float _183 = _180 * _96;
  float _184 = _181 * _96;
  float _185 = _182 + _163;
  float _186 = _183 + _164;
  float _187 = _184 + _165;
  float _188 = dot(float3(_185, _186, _187), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _192 = t0[0].SExposureData_020;
  float _194 = t0[0].SExposureData_004;
  float _196 = cb2_018x * 0.5f;
  float _197 = _196 * cb2_018y;
  float _198 = _194.x - _197;
  float _199 = cb2_018y * cb2_018x;
  float _200 = 1.0f / _199;
  float _201 = _198 * _200;
  float _202 = _188 / _192.x;
  float _203 = _202 * 5464.01611328125f;
  float _204 = _203 + 9.99999993922529e-09f;
  float _205 = log2(_204);
  float _206 = _205 - _198;
  float _207 = _206 * _200;
  float _208 = saturate(_207);
  float2 _209 = t8.SampleLevel(s2_space2, float3(TEXCOORD0_centroid.x, TEXCOORD0_centroid.y, _208), 0.0f);
  float _212 = max(_209.y, 1.0000000116860974e-07f);
  float _213 = _209.x / _212;
  float _214 = _213 + _201;
  float _215 = _214 / _200;
  float _216 = _215 - _194.x;
  float _217 = -0.0f - _216;
  float _219 = _217 - cb2_027x;
  float _220 = max(0.0f, _219);
  float _223 = cb2_026z * _220;
  float _224 = _216 - cb2_027x;
  float _225 = max(0.0f, _224);
  float _227 = cb2_026w * _225;
  bool _228 = (_216 < 0.0f);
  float _229 = select(_228, _223, _227);
  float _230 = exp2(_229);
  float _231 = _230 * _185;
  float _232 = _230 * _186;
  float _233 = _230 * _187;
  float _238 = cb2_024y * _175.x;
  float _239 = cb2_024z * _175.y;
  float _240 = cb2_024w * _175.z;
  float _241 = _238 + _231;
  float _242 = _239 + _232;
  float _243 = _240 + _233;
  float _248 = _241 * cb2_025x;
  float _249 = _242 * cb2_025y;
  float _250 = _243 * cb2_025z;
  float _251 = dot(float3(_248, _249, _250), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
  float _252 = t0[0].SExposureData_012;
  float _254 = _251 * 5464.01611328125f;
  float _255 = _254 * _252.x;
  float _256 = _255 + 9.99999993922529e-09f;
  float _257 = log2(_256);
  float _258 = _257 + 16.929765701293945f;
  float _259 = _258 * 0.05734497308731079f;
  float _260 = saturate(_259);
  float _261 = _260 * _260;
  float _262 = _260 * 2.0f;
  float _263 = 3.0f - _262;
  float _264 = _261 * _263;
  float _265 = _249 * 0.8450999855995178f;
  float _266 = _250 * 0.14589999616146088f;
  float _267 = _265 + _266;
  float _268 = _267 * 2.4890189170837402f;
  float _269 = _267 * 0.3754962384700775f;
  float _270 = _267 * 2.811495304107666f;
  float _271 = _267 * 5.519708156585693f;
  float _272 = _251 - _268;
  float _273 = _264 * _272;
  float _274 = _273 + _268;
  float _275 = _264 * 0.5f;
  float _276 = _275 + 0.5f;
  float _277 = _276 * _272;
  float _278 = _277 + _268;
  float _279 = _248 - _269;
  float _280 = _249 - _270;
  float _281 = _250 - _271;
  float _282 = _276 * _279;
  float _283 = _276 * _280;
  float _284 = _276 * _281;
  float _285 = _282 + _269;
  float _286 = _283 + _270;
  float _287 = _284 + _271;
  float _288 = 1.0f / _278;
  float _289 = _274 * _288;
  float _290 = _289 * _285;
  float _291 = _289 * _286;
  float _292 = _289 * _287;
  float _296 = cb2_020x * TEXCOORD0_centroid.x;
  float _297 = cb2_020y * TEXCOORD0_centroid.y;
  float _300 = _296 + cb2_020z;
  float _301 = _297 + cb2_020w;
  float _304 = dot(float2(_300, _301), float2(_300, _301));
  float _305 = 1.0f - _304;
  float _306 = saturate(_305);
  float _307 = log2(_306);
  float _308 = _307 * cb2_021w;
  float _309 = exp2(_308);
  float _313 = _290 - cb2_021x;
  float _314 = _291 - cb2_021y;
  float _315 = _292 - cb2_021z;
  float _316 = _313 * _309;
  float _317 = _314 * _309;
  float _318 = _315 * _309;
  float _319 = _316 + cb2_021x;
  float _320 = _317 + cb2_021y;
  float _321 = _318 + cb2_021z;
  float _322 = t0[0].SExposureData_000;
  float _324 = max(_192.x, 0.0010000000474974513f);
  float _325 = 1.0f / _324;
  float _326 = _325 * _322.x;
  bool _329 = ((uint)(cb2_069y) == 0);
  float _335;
  float _336;
  float _337;
  float _391;
  float _392;
  float _393;
  float _423;
  float _424;
  float _425;
  float _526;
  float _527;
  float _528;
  float _553;
  float _565;
  float _593;
  float _605;
  float _617;
  float _618;
  float _619;
  float _646;
  float _647;
  float _648;
  if (!_329) {
    float _331 = _326 * _319;
    float _332 = _326 * _320;
    float _333 = _326 * _321;
    _335 = _331;
    _336 = _332;
    _337 = _333;
  } else {
    _335 = _319;
    _336 = _320;
    _337 = _321;
  }
  float _338 = _335 * 0.6130970120429993f;
  float _339 = mad(0.33952298760414124f, _336, _338);
  float _340 = mad(0.04737899824976921f, _337, _339);
  float _341 = _335 * 0.07019399851560593f;
  float _342 = mad(0.9163540005683899f, _336, _341);
  float _343 = mad(0.013451999984681606f, _337, _342);
  float _344 = _335 * 0.02061600051820278f;
  float _345 = mad(0.10956999659538269f, _336, _344);
  float _346 = mad(0.8698149919509888f, _337, _345);
  float _347 = log2(_340);
  float _348 = log2(_343);
  float _349 = log2(_346);
  float _350 = _347 * 0.04211956635117531f;
  float _351 = _348 * 0.04211956635117531f;
  float _352 = _349 * 0.04211956635117531f;
  float _353 = _350 + 0.6252607107162476f;
  float _354 = _351 + 0.6252607107162476f;
  float _355 = _352 + 0.6252607107162476f;
  float4 _356 = t5.SampleLevel(s2_space2, float3(_353, _354, _355), 0.0f);
  bool _362 = ((int)(uint)(cb1_018w) > (int)-1);
  if (_362 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _366 = cb2_017x * _356.x;
    float _367 = cb2_017x * _356.y;
    float _368 = cb2_017x * _356.z;
    float _370 = _366 + cb2_017y;
    float _371 = _367 + cb2_017y;
    float _372 = _368 + cb2_017y;
    float _373 = exp2(_370);
    float _374 = exp2(_371);
    float _375 = exp2(_372);
    float _376 = _373 + 1.0f;
    float _377 = _374 + 1.0f;
    float _378 = _375 + 1.0f;
    float _379 = 1.0f / _376;
    float _380 = 1.0f / _377;
    float _381 = 1.0f / _378;
    float _383 = cb2_017z * _379;
    float _384 = cb2_017z * _380;
    float _385 = cb2_017z * _381;
    float _387 = _383 + cb2_017w;
    float _388 = _384 + cb2_017w;
    float _389 = _385 + cb2_017w;
    _391 = _387;
    _392 = _388;
    _393 = _389;
  } else {
    _391 = _356.x;
    _392 = _356.y;
    _393 = _356.z;
  }
  float _394 = _391 * 23.0f;
  float _395 = _394 + -14.473931312561035f;
  float _396 = exp2(_395);
  float _397 = _392 * 23.0f;
  float _398 = _397 + -14.473931312561035f;
  float _399 = exp2(_398);
  float _400 = _393 * 23.0f;
  float _401 = _400 + -14.473931312561035f;
  float _402 = exp2(_401);
  float _408 = cb2_016x - _396;
  float _409 = cb2_016y - _399;
  float _410 = cb2_016z - _402;
  float _411 = _408 * cb2_016w;
  float _412 = _409 * cb2_016w;
  float _413 = _410 * cb2_016w;
  float _414 = _411 + _396;
  float _415 = _412 + _399;
  float _416 = _413 + _402;
  if (_362 && RENODX_TONE_MAP_TYPE == 0.f) {
    float _419 = cb2_024x * _414;
    float _420 = cb2_024x * _415;
    float _421 = cb2_024x * _416;
    _423 = _419;
    _424 = _420;
    _425 = _421;
  } else {
    _423 = _414;
    _424 = _415;
    _425 = _416;
  }
  float _426 = _423 * 0.9708889722824097f;
  float _427 = mad(0.026962999254465103f, _424, _426);
  float _428 = mad(0.002148000057786703f, _425, _427);
  float _429 = _423 * 0.01088900025933981f;
  float _430 = mad(0.9869629740715027f, _424, _429);
  float _431 = mad(0.002148000057786703f, _425, _430);
  float _432 = mad(0.026962999254465103f, _424, _429);
  float _433 = mad(0.9621480107307434f, _425, _432);
  if (_362) {
    if (RENODX_TONE_MAP_TYPE == 0.f) {
        float _438 = cb1_018y * 0.10000000149011612f;
        float _439 = log2(cb1_018z);
        float _440 = _439 + -13.287712097167969f;
        float _441 = _440 * 1.4929734468460083f;
        float _442 = _441 + 18.0f;
        float _443 = exp2(_442);
        float _444 = _443 * 0.18000000715255737f;
        float _445 = abs(_444);
        float _446 = log2(_445);
        float _447 = _446 * 1.5f;
        float _448 = exp2(_447);
        float _449 = _448 * _438;
        float _450 = _449 / cb1_018z;
        float _451 = _450 + -0.07636754959821701f;
        float _452 = _446 * 1.2750000953674316f;
        float _453 = exp2(_452);
        float _454 = _453 * 0.07636754959821701f;
        float _455 = cb1_018y * 0.011232397519052029f;
        float _456 = _455 * _448;
        float _457 = _456 / cb1_018z;
        float _458 = _454 - _457;
        float _459 = _453 + -0.11232396960258484f;
        float _460 = _459 * _438;
        float _461 = _460 / cb1_018z;
        float _462 = _461 * cb1_018z;
        float _463 = abs(_428);
        float _464 = abs(_431);
        float _465 = abs(_433);
        float _466 = log2(_463);
        float _467 = log2(_464);
        float _468 = log2(_465);
        float _469 = _466 * 1.5f;
        float _470 = _467 * 1.5f;
        float _471 = _468 * 1.5f;
        float _472 = exp2(_469);
        float _473 = exp2(_470);
        float _474 = exp2(_471);
        float _475 = _472 * _462;
        float _476 = _473 * _462;
        float _477 = _474 * _462;
        float _478 = _466 * 1.2750000953674316f;
        float _479 = _467 * 1.2750000953674316f;
        float _480 = _468 * 1.2750000953674316f;
        float _481 = exp2(_478);
        float _482 = exp2(_479);
        float _483 = exp2(_480);
        float _484 = _481 * _451;
        float _485 = _482 * _451;
        float _486 = _483 * _451;
        float _487 = _484 + _458;
        float _488 = _485 + _458;
        float _489 = _486 + _458;
        float _490 = _475 / _487;
        float _491 = _476 / _488;
        float _492 = _477 / _489;
        float _493 = _490 * 9.999999747378752e-05f;
        float _494 = _491 * 9.999999747378752e-05f;
        float _495 = _492 * 9.999999747378752e-05f;
        float _496 = 5000.0f / cb1_018y;
        float _497 = _493 * _496;
        float _498 = _494 * _496;
        float _499 = _495 * _496;
        _526 = _497;
        _527 = _498;
        _528 = _499;
    } else {
      float3 tonemapped = ApplyCustomToneMap(float3(_428, _431, _433));
      _526 = tonemapped.x, _527 = tonemapped.y, _528 = tonemapped.z;
    }
      } else {
        float _501 = _428 + 0.020616600289940834f;
        float _502 = _431 + 0.020616600289940834f;
        float _503 = _433 + 0.020616600289940834f;
        float _504 = _501 * _428;
        float _505 = _502 * _431;
        float _506 = _503 * _433;
        float _507 = _504 + -7.456949970219284e-05f;
        float _508 = _505 + -7.456949970219284e-05f;
        float _509 = _506 + -7.456949970219284e-05f;
        float _510 = _428 * 0.9837960004806519f;
        float _511 = _431 * 0.9837960004806519f;
        float _512 = _433 * 0.9837960004806519f;
        float _513 = _510 + 0.4336790144443512f;
        float _514 = _511 + 0.4336790144443512f;
        float _515 = _512 + 0.4336790144443512f;
        float _516 = _513 * _428;
        float _517 = _514 * _431;
        float _518 = _515 * _433;
        float _519 = _516 + 0.24617899954319f;
        float _520 = _517 + 0.24617899954319f;
        float _521 = _518 + 0.24617899954319f;
        float _522 = _507 / _519;
        float _523 = _508 / _520;
        float _524 = _509 / _521;
        _526 = _522;
        _527 = _523;
        _528 = _524;
      }
      float _529 = _526 * 1.6047500371932983f;
      float _530 = mad(-0.5310800075531006f, _527, _529);
      float _531 = mad(-0.07366999983787537f, _528, _530);
      float _532 = _526 * -0.10208000242710114f;
      float _533 = mad(1.1081299781799316f, _527, _532);
      float _534 = mad(-0.006049999967217445f, _528, _533);
      float _535 = _526 * -0.0032599999103695154f;
      float _536 = mad(-0.07275000214576721f, _527, _535);
      float _537 = mad(1.0760200023651123f, _528, _536);
      if (_362) {
        // float _539 = max(_531, 0.0f);
        // float _540 = max(_534, 0.0f);
        // float _541 = max(_537, 0.0f);
        // bool _542 = !(_539 >= 0.0030399328097701073f);
        // if (!_542) {
        //   float _544 = abs(_539);
        //   float _545 = log2(_544);
        //   float _546 = _545 * 0.4166666567325592f;
        //   float _547 = exp2(_546);
        //   float _548 = _547 * 1.0549999475479126f;
        //   float _549 = _548 + -0.054999999701976776f;
        //   _553 = _549;
        // } else {
        //   float _551 = _539 * 12.923210144042969f;
        //   _553 = _551;
        // }
        // bool _554 = !(_540 >= 0.0030399328097701073f);
        // if (!_554) {
        //   float _556 = abs(_540);
        //   float _557 = log2(_556);
        //   float _558 = _557 * 0.4166666567325592f;
        //   float _559 = exp2(_558);
        //   float _560 = _559 * 1.0549999475479126f;
        //   float _561 = _560 + -0.054999999701976776f;
        //   _565 = _561;
        // } else {
        //   float _563 = _540 * 12.923210144042969f;
        //   _565 = _563;
        // }
        // bool _566 = !(_541 >= 0.0030399328097701073f);
        // if (!_566) {
        //   float _568 = abs(_541);
        //   float _569 = log2(_568);
        //   float _570 = _569 * 0.4166666567325592f;
        //   float _571 = exp2(_570);
        //   float _572 = _571 * 1.0549999475479126f;
        //   float _573 = _572 + -0.054999999701976776f;
        //   _646 = _553;
        //   _647 = _565;
        //   _648 = _573;
        // } else {
        //   float _575 = _541 * 12.923210144042969f;
        //   _646 = _553;
        //   _647 = _565;
        //   _648 = _575;
        // }
        _646 = renodx::color::srgb::EncodeSafe(_531);
        _647 = renodx::color::srgb::EncodeSafe(_534);
        _648 = renodx::color::srgb::EncodeSafe(_537);

      } else {
        float _577 = saturate(_531);
        float _578 = saturate(_534);
        float _579 = saturate(_537);
        bool _580 = ((uint)(cb1_018w) == -2);
        if (!_580) {
          bool _582 = !(_577 >= 0.0030399328097701073f);
          if (!_582) {
            float _584 = abs(_577);
            float _585 = log2(_584);
            float _586 = _585 * 0.4166666567325592f;
            float _587 = exp2(_586);
            float _588 = _587 * 1.0549999475479126f;
            float _589 = _588 + -0.054999999701976776f;
            _593 = _589;
          } else {
            float _591 = _577 * 12.923210144042969f;
            _593 = _591;
          }
          bool _594 = !(_578 >= 0.0030399328097701073f);
          if (!_594) {
            float _596 = abs(_578);
            float _597 = log2(_596);
            float _598 = _597 * 0.4166666567325592f;
            float _599 = exp2(_598);
            float _600 = _599 * 1.0549999475479126f;
            float _601 = _600 + -0.054999999701976776f;
            _605 = _601;
          } else {
            float _603 = _578 * 12.923210144042969f;
            _605 = _603;
          }
          bool _606 = !(_579 >= 0.0030399328097701073f);
          if (!_606) {
            float _608 = abs(_579);
            float _609 = log2(_608);
            float _610 = _609 * 0.4166666567325592f;
            float _611 = exp2(_610);
            float _612 = _611 * 1.0549999475479126f;
            float _613 = _612 + -0.054999999701976776f;
            _617 = _593;
            _618 = _605;
            _619 = _613;
          } else {
            float _615 = _579 * 12.923210144042969f;
            _617 = _593;
            _618 = _605;
            _619 = _615;
          }
        } else {
          _617 = _577;
          _618 = _578;
          _619 = _579;
        }
        float _624 = abs(_617);
        float _625 = abs(_618);
        float _626 = abs(_619);
        float _627 = log2(_624);
        float _628 = log2(_625);
        float _629 = log2(_626);
        float _630 = _627 * cb2_000z;
        float _631 = _628 * cb2_000z;
        float _632 = _629 * cb2_000z;
        float _633 = exp2(_630);
        float _634 = exp2(_631);
        float _635 = exp2(_632);
        float _636 = _633 * cb2_000y;
        float _637 = _634 * cb2_000y;
        float _638 = _635 * cb2_000y;
        float _639 = _636 + cb2_000x;
        float _640 = _637 + cb2_000x;
        float _641 = _638 + cb2_000x;
        float _642 = saturate(_639);
        float _643 = saturate(_640);
        float _644 = saturate(_641);
        _646 = _642;
        _647 = _643;
        _648 = _644;
      }
      float _649 = dot(float3(_646, _647, _648), float3(0.2125999927520752f, 0.7152000069618225f, 0.0722000002861023f));
      SV_Target.x = _646;
      SV_Target.y = _647;
      SV_Target.z = _648;
      SV_Target.w = _649;
      SV_Target_1.x = _649;
      SV_Target_1.y = 0.0f;
      SV_Target_1.z = 0.0f;
      SV_Target_1.w = 0.0f;
      OutputSignature output_signature = { SV_Target, SV_Target_1 };
      return output_signature;
}
