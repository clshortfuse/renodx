#include "./shared.h"

Texture2D<float4> g_textures2D[] : register(t0, space2);

cbuffer Globals : register(b0) {
  float Globals_006z : packoffset(c006.z);
  float Globals_007x : packoffset(c007.x);
  float Globals_007y : packoffset(c007.y);
  float Globals_009x : packoffset(c009.x);
  float Globals_009y : packoffset(c009.y);
  float Globals_009z : packoffset(c009.z);
  float Globals_009w : packoffset(c009.w);
  float Globals_010x : packoffset(c010.x);
  float Globals_010y : packoffset(c010.y);
  float Globals_010z : packoffset(c010.z);
  float Globals_011x : packoffset(c011.x);
  float Globals_011y : packoffset(c011.y);
  float Globals_011z : packoffset(c011.z);
  float Globals_012x : packoffset(c012.x);
  float Globals_013x : packoffset(c013.x);
  float Globals_013y : packoffset(c013.y);
  float Globals_013z : packoffset(c013.z);
  float Globals_014x : packoffset(c014.x);
  float Globals_014z : packoffset(c014.z);
  float Globals_020y : packoffset(c020.y);
  float Globals_020z : packoffset(c020.z);
  uint Globals_025y : packoffset(c025.y);
  uint Globals_025z : packoffset(c025.z);
  uint Globals_026w : packoffset(c026.w);
  uint Globals_027x : packoffset(c027.x);
  uint Globals_027y : packoffset(c027.y);
  uint Globals_027z : packoffset(c027.z);
  uint Globals_027w : packoffset(c027.w);
  uint Globals_028x : packoffset(c028.x);
  uint Globals_028w : packoffset(c028.w);
  uint Globals_029x : packoffset(c029.x);
  uint Globals_065x : packoffset(c065.x);
  uint Globals_065y : packoffset(c065.y);
  uint Globals_065z : packoffset(c065.z);
  uint Globals_065w : packoffset(c065.w);
  float Globals_066y : packoffset(c066.y);
  float Globals_066z : packoffset(c066.z);
  float Globals_067x : packoffset(c067.x);
  float Globals_067y : packoffset(c067.y);
  float Globals_067z : packoffset(c067.z);
  float Globals_068x : packoffset(c068.x);
  float Globals_068y : packoffset(c068.y);
  float Globals_068z : packoffset(c068.z);
};

SamplerState g_samplers[] : register(s0, space1);

float4 main(
    noperspective float4 SV_Position: SV_Position,
    linear float4 TEXCOORD: TEXCOORD,
    linear float4 TEXCOORD_1: TEXCOORD1,
    linear float4 TEXCOORD_2: TEXCOORD2)
    : SV_Target {
  float4 SV_Target;
  // cbuffer _1 = Globals;
  float _2 = TEXCOORD_2.x;
  float _3 = TEXCOORD_2.y;
  float _4 = TEXCOORD_2.z;
  float _5 = TEXCOORD_2.w;
  float _6 = TEXCOORD.x;
  float _7 = TEXCOORD.y;
  uint _9 = Globals_027w;
  uint _11 = Globals_028x;
  uint _12 = _9 + 0;
  // texture _13 = g_textures2D[_12];
  uint _14 = _11 + 0;
  // SamplerState _15 = g_samplers[_14];
  float4 _16 = g_textures2D[_12].Sample(g_samplers[_14], float2(_6, _7));
  float _17 = _16.x;
  float _19 = Globals_014x;
  float _20 = Globals_014z;
  float _21 = _19 * _20;
  float _22 = -0.0f - _21;
  float _23 = _17 - _20;
  float _24 = _22 / _23;
  uint _26 = Globals_025y;
  uint _27 = Globals_025z;
  uint _28 = _26 + 0;
  // texture _29 = g_textures2D[_28];
  uint _30 = _27 + 0;
  // SamplerState _31 = g_samplers[_30];
  float4 _32 = g_textures2D[_28].Sample(g_samplers[_30], float2(_6, _7));
  float _33 = _32.x;
  float _34 = _32.y;
  float _35 = _32.z;
  uint _37 = Globals_027y;
  uint _38 = Globals_027z;
  uint _39 = _37 + 0;
  // texture _40 = g_textures2D[_39];
  uint _41 = _38 + 0;
  // SamplerState _42 = g_samplers[_41];
  float4 _43 = g_textures2D[_39].Sample(g_samplers[_41], float2(_6, _7));
  float _44 = _43.x;
  float _45 = _43.y;
  float _46 = _43.z;
  float _47 = _43.w;
  float _48 = _44 * _44;
  float _49 = _45 * _45;
  float _50 = _46 * _46;
  float _52 = Globals_007y;
  float _53 = _48 * _52;
  float _54 = _49 * _52;
  float _55 = _50 * _52;
  float _56 = saturate(_47);
  uint _58 = Globals_026w;
  uint _60 = Globals_027x;
  uint _61 = _58 + 0;
  // texture _62 = g_textures2D[_61];
  uint _63 = _60 + 0;
  // SamplerState _64 = g_samplers[_63];
  float4 _65 = g_textures2D[_61].Sample(g_samplers[_63], float2(_6, _7));
  float _66 = _65.x;
  float _67 = _65.y;
  float _68 = _65.z;
  float _70 = Globals_013x;
  float _71 = Globals_013y;
  float _72 = _24 - _71;
  float _73 = _72 * _70;
  float _74 = saturate(_73);
  float _75 = Globals_013z;
  bool _76 = (_24 < _75);
  float _77 = float(_76);
  float _78 = _77 * _74;
  float _79 = max(_78, _56);
  uint _81 = Globals_028w;
  uint _83 = Globals_029x;
  uint _84 = _81 + 0;
  // texture _85 = g_textures2D[_84];
  uint _86 = _83 + 0;
  // SamplerState _87 = g_samplers[_86];
  float4 _88 = g_textures2D[_84].Sample(g_samplers[_86], float2(0.0f, 0.0f));
  float _89 = _88.x;
  float _91 = Globals_020z;
  float _92 = Globals_020y;
  float _93 = max(_89, _92);
  float _94 = min(_93, _91);
  float _95 = _66 - _33;
  float _96 = _67 - _34;
  float _97 = _68 - _35;
  float _98 = _79 * _95;
  float _99 = _79 * _96;
  float _100 = _79 * _97;
  float _101 = _98 + _33;
  float _102 = _99 + _34;
  float _103 = _100 + _35;
  uint _105 = Globals_065x;
  uint _106 = Globals_065y;
  uint _107 = _105 + 0;
  // texture _108 = g_textures2D[_107];
  uint _109 = _106 + 0;
  // SamplerState _110 = g_samplers[_109];
  float4 _111 = g_textures2D[_107].Sample(g_samplers[_109], float2(_2, _3));
  float _112 = _111.x;
  float _113 = _111.y;
  float _114 = _111.z;
  float _115 = _111.w;
  uint _117 = Globals_065z;
  uint _118 = Globals_065w;
  uint _119 = _117 + 0;
  // texture _120 = g_textures2D[_119];
  uint _121 = _118 + 0;
  // SamplerState _122 = g_samplers[_121];
  float4 _123 = g_textures2D[_119].Sample(g_samplers[_121], float2(_4, _5));
  float _124 = _123.x;
  float _125 = _123.y;
  float _126 = _123.z;
  float _127 = _123.w;
  float _129 = Globals_067x;
  float _130 = Globals_067y;
  float _131 = Globals_067z;
  float _133 = Globals_068x;
  float _134 = Globals_068y;
  float _135 = Globals_068z;
  float _136 = dot(float3(_101, _102, _103), float3(0.29899999499320984f, 0.5870000123977661f, 0.11400000005960464f));
  float _137 = 1.0099999904632568f - _136;
  float _139 = Globals_066y;
  float _140 = Globals_066z;
  float _141 = abs(_137);
  float _142 = log2(_141);
  float _143 = _142 * _139;
  float _144 = _142 * _140;
  float _145 = exp2(_143);
  float _146 = exp2(_144);
  float _147 = _115 * _112;
  float _148 = _147 * _133;
  float _149 = _148 * _145;
  float _150 = _115 * _113;
  float _151 = _150 * _134;
  float _152 = _151 * _145;
  float _153 = _115 * _114;
  float _154 = _153 * _135;
  float _155 = _154 * _145;
  float _156 = _149 + _101;
  float _157 = _152 + _102;
  float _158 = _155 + _103;
  float _159 = _127 * _124;
  float _160 = _159 * _129;
  float _161 = _160 * _146;
  float _162 = _127 * _125;
  float _163 = _162 * _130;
  float _164 = _163 * _146;
  float _165 = _127 * _126;
  float _166 = _165 * _131;
  float _167 = _166 * _146;
  float _168 = _156 + _161;
  float _169 = _157 + _164;
  float _170 = _158 + _167;
  float _172 = Globals_006z;
  float _173 = _94 + 0.0010000000474974513f;
  float _174 = _172 / _173;
  float _175 = _168 * _174;
  float _176 = _174 * _169;
  float _177 = _174 * _170;
  float _179 = Globals_007x;
  float _180 = _175 / _179;
  float _181 = _176 / _179;
  float _182 = _177 / _179;
  float _183 = _180 + 1.0f;
  float _184 = _181 + 1.0f;
  float _185 = _182 + 1.0f;
  float _186 = _183 * _175;
  float _187 = _184 * _176;
  float _188 = _185 * _177;
  float _189 = _175 + 1.0f;
  float _190 = _176 + 1.0f;
  float _191 = _177 + 1.0f;
  float _192 = _186 / _189;
  float _193 = _187 / _190;
  float _194 = _188 / _191;
  float _195 = _192 + _53;
  float _196 = _193 + _54;
  float _197 = _194 + _55;
  float _199 = Globals_010x;
  float _200 = Globals_010y;
  float _201 = Globals_010z;
  float _202 = _195 + _199;
  float _203 = _196 + _200;
  float _204 = _197 + _201;
  float _206 = Globals_011x;
  float _207 = Globals_011y;
  float _208 = Globals_011z;
  float _209 = _206 * 2.0f;
  float _210 = _209 * _202;
  float _211 = _207 * 2.0f;
  float _212 = _211 * _203;
  float _213 = _208 * 2.0f;
  float _214 = _213 * _204;

  float3 hdrColor = float3(_210, _212, _214);

  // removing these saturates causes weird colors
  float _215 = saturate(_210);
  float _216 = saturate(_212);
  float _217 = saturate(_214);

  float _219 = Globals_009x;  // LUMINANCE.x
  float _220 = Globals_009y;  // LUMINANCE.y
  float _221 = Globals_009z;  // LUMINANCE.z
  float _222 = dot(float3(_215, _216, _217), float3(_219, _220, _221));
  float _223 = Globals_009w;
  float _224 = _215 - _222;
  float _225 = _216 - _222;
  float _226 = _217 - _222;
  float _227 = _223 * _224;
  float _228 = _223 * _225;
  float _229 = _223 * _226;
  float _230 = _227 + _222;
  float _231 = _228 + _222;
  float _232 = _229 + _222;
  float _234 = Globals_012x;  // deSat
  float _235 = _230 + -1.0f;
  float _236 = _231 + -1.0f;
  float _237 = _232 + -1.0f;
  float _238 = _230 + -0.5f;
  float _239 = _231 + -0.5f;
  float _240 = _232 + -0.5f;
  float _241 = _230 * _234;
  float _242 = _241 * _235;
  float _243 = _242 * _238;
  float _244 = _231 * _234;
  float _245 = _244 * _236;
  float _246 = _245 * _239;
  float _247 = _232 * _234;
  float _248 = _247 * _237;
  float _249 = _248 * _240;
  float _250 = _230 - _243;
  float _251 = _231 - _246;
  float _252 = _232 - _249;

#if 1  // use upgradetonemap() to recover highlight detail
  float3 upgradedColor = renodx::tonemap::UpgradeToneMap(hdrColor, saturate(hdrColor), float3(_250, _251, _252), 1.f);
  _250 = upgradedColor.r;
  _251 = upgradedColor.g;
  _252 = upgradedColor.b;
#endif

  float _253 = max(0, _250);  // float _253 = saturate(_250);
  float _254 = max(0, _251);  // float _254 = saturate(_251);
  float _255 = max(0, _252);  // float _255 = saturate(_252);

  float _256 = abs(_253);
  float _257 = abs(_254);
  float _258 = abs(_255);
  float _259 = log2(_256);
  float _260 = log2(_257);
  float _261 = log2(_258);
  float _262 = _259 * 0.45454543828964233f;
  float _263 = _260 * 0.45454543828964233f;
  float _264 = _261 * 0.45454543828964233f;
  float _265 = exp2(_262);
  float _266 = exp2(_263);
  float _267 = exp2(_264);
  SV_Target.x = _265;
  SV_Target.y = _266;
  SV_Target.z = _267;
  SV_Target.w = 1.0f;
  return SV_Target;
}
