#version 450

#extension GL_GOOGLE_include_directive : require
#include "./include/common.glsl"

#extension GL_EXT_buffer_reference2 : require
#if defined(GL_EXT_control_flow_attributes)
#extension GL_EXT_control_flow_attributes : require
#define SPIRV_CROSS_FLATTEN [[flatten]]
#define SPIRV_CROSS_BRANCH  [[dont_flatten]]
#define SPIRV_CROSS_UNROLL  [[unroll]]
#define SPIRV_CROSS_LOOP    [[dont_unroll]]
#else
#define SPIRV_CROSS_FLATTEN
#define SPIRV_CROSS_BRANCH
#define SPIRV_CROSS_UNROLL
#define SPIRV_CROSS_LOOP
#endif
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct _111 {
  float _m0;
  float _m1;
};

struct _112 {
  float _m0[10];
  float _m1[10];
  _111 _m2;
  _111 _m3;
  _111 _m4;
  float _m5;
  float _m6;
};

struct _163 {
  float _m0;
  float _m1;
  float _m2;
};

struct _167 {
  float _m0[5];
};

struct _183 {
  _163 _m0;
  _163 _m1;
  _163 _m2;
  float _m3[6];
  float _m4[6];
};

struct _742 {
  float _m0[6];
  float _m1[6];
  _111 _m2;
  _111 _m3;
  _111 _m4;
  float _m5;
  float _m6;
};

const float _1784[2][2] = float[][](float[](-15.0, 0.180000007152557373046875), float[](-6.5, 0.3499999940395355224609375));
const float _1927[2][2] = float[][](float[](6.5, 0.88999998569488525390625), float[](18.0, 0.89999997615814208984375));

struct _3175 {
  uint _m0;
  uint _m1;
};

layout(set = 0, binding = 0, std140) uniform _2991_2993 {
  uvec4 _m0;
  vec4 _m1;
  vec4 _m2;
  vec4 _m3;
  vec4 _m4;
  vec4 _m5;
  vec4 _m6;
  vec4 _m7;
  vec4 _m8;
  vec4 _m9;
  vec4 _m10;
  vec4 _m11;
  vec4 _m12;
  vec4 _m13;
  vec4 _m14;
  vec4 _m15;
  float _m16;
  float _m17;
  uint _m18;
  float _m19;
  float _m20;
  float _m21;
  float _m22;
  float _m23;
  float _m24;
  uint _m25;
  uint _m26;
  float _m27;
  uint _m28;
  float _m29;
  float _m30;
  float _m31;
  float _m32;
  float _m33;
  float _m34;
  float _m35;
  float _m36;
  float _m37;
  float _m38;
  float _m39;
  float _m40;
  float _m41;
  float _m42;
  uint _m43;
  float _m44;
  float _m45;
  float _m46;
  float _m47;
  float _m48;
  uint _m49;
  uint _m50;
  uint _m51;
  uint _m52;
  int _m53;
  uint _m54;
}
_2993;

layout(set = 1, binding = 0, std140) uniform _3150_3152 {
  uvec4 _m0;
  uint _m1;
}
_3152;

layout(set = 0, binding = 1, std430) restrict readonly buffer _3177_3179 {
  _3175 _m0[];
}
_3179;

layout(set = 0, binding = 2, std140) uniform _3182_3184 {
  vec4 _m0[1024];
}
_3184;

layout(set = 0, binding = 3, std140) uniform _3187_3189 {
  vec4 _m0[64];
}
_3189;

layout(set = 1, binding = 1, rgba16f) uniform writeonly image3D _3167;

uint _223;
uint _225;
uint _227;
int _231;
int _233;
int _235;
uint _3197;

vec3 _212(vec3 _211) {
  return exp2((_211 * 16.0) - vec3(8.0));
}

vec3 _41(vec3 _39, mat3 _40) {
  return _39 * _40;
}

float _24(float _21, float _22, float _23) {
  return max(_21, max(_22, _23));
}

float _143(float _139, float _140, float _141, float _142) {
  float _1391;
  if (_139 < _141) {
    _1391 = _139;
  } else {
    float _1394 = (_140 - _141) / pow(pow((1.0 - _141) / (_140 - _141), -_142) - 1.0, 1.0 / _142);
    float _1412 = (_139 - _141) / _1394;
    float _1418 = pow(_1412, _142);
    _1391 = _141 + ((_1394 * _1412) / pow(1.0 + _1418, 1.0 / _142));
  }
  return _1391;
}

vec3 _146(vec3 _145) {
  vec3 _1450 = _145;
  mat3 _1452 = mat3(vec3(1.45143949985504150390625, -0.236510813236236572265625, -0.21492855250835418701171875), vec3(-0.076553881168365478515625, 1.17623007297515869140625, -0.09967593848705291748046875), vec3(0.008316130377352237701416015625, -0.00603245012462139129638671875, 0.997716248035430908203125));
  vec3 _1436 = _41(_1450, _1452);
  float _1455 = _1436.x;
  float _1458 = _1436.y;
  float _1461 = _1436.z;
  float _1454 = _24(_1455, _1458, _1461);
  vec3 _1469;
  if (_1454 == 0.0) {
    _1469 = vec3(0.0);
  } else {
    _1469 = (vec3(_1454) - _1436) / vec3(abs(_1454));
  }
  float _1484 = _1469.x;
  float _1487 = 1.14699995517730712890625;
  float _1488 = 0.814999997615814208984375;
  float _1489 = 1.2000000476837158203125;
  vec3 _1480;
  _1480.x = _143(_1484, _1487, _1488, _1489);
  float _1494 = _1469.y;
  float _1497 = 1.26400005817413330078125;
  float _1498 = 0.802999973297119140625;
  float _1499 = 1.2000000476837158203125;
  _1480.y = _143(_1494, _1497, _1498, _1499);
  float _1504 = _1469.z;
  float _1507 = 1.3120000362396240234375;
  float _1508 = 0.87999999523162841796875;
  float _1509 = 1.2000000476837158203125;
  _1480.z = _143(_1504, _1507, _1508, _1509);
  vec3 _1512 = vec3(_1454) - (_1480 * abs(_1454));
  vec3 _1534 = _1512;
  mat3 _1536 = mat3(vec3(0.695452153682708740234375, 0.14067868888378143310546875, 0.1638690531253814697265625), vec3(0.044794611632823944091796875, 0.859670937061309814453125, 0.095534317195415496826171875), vec3(-0.0055258697830140590667724609375, 0.0040252101607620716094970703125, 1.00150072574615478515625));
  vec3 _1520 = _41(_1534, _1536);
  return _1520;
}

float _29(float _26, float _27, float _28) {
  return min(_26, min(_27, _28));
}

float _63(vec3 _62) {
  float _364 = _62.x;
  float _368 = _62.y;
  float _372 = _62.z;
  float _363 = _24(_364, _368, _372);
  float _377 = _62.x;
  float _380 = _62.y;
  float _383 = _62.z;
  float _376 = _29(_377, _380, _383);
  return (max(_363, 1.0000000133514319600180897396058e-10) - max(_376, 1.0000000133514319600180897396058e-10)) / max(_363, 0.00999999977648258209228515625);
}

float _69(vec3 _68) {
  float _448 = 1.75;
  float _450 = _68.x;
  float _453 = _68.y;
  float _456 = _68.z;
  float _459 = sqrt(((_456 * (_456 - _453)) + (_453 * (_453 - _450))) + (_450 * (_450 - _456)));
  return (((_456 + _453) + _450) + (_448 * _459)) / 3.0;
}

float _132(float _131) {
  float _1345 = max(1.0 - abs(_131 / 2.0), 0.0);
  float _1351 = 1.0 + (sign(_131) * (1.0 - (_1345 * _1345)));
  return _1351 / 2.0;
}

float _125(float _122, float _123, float _124) {
  float _1181;
  if (_122 <= (0.666666686534881591796875 * _124)) {
    _1181 = _123;
  } else {
    if (_122 >= (2.0 * _124)) {
      _1181 = 0.0;
    } else {
      _1181 = _123 * ((_124 / _122) - 0.5);
    }
  }
  return _1181;
}

float _45(float _44) {
  float _276;
  if (_44 < 1.0) {
    _276 = _44;
  } else {
    _276 = 1.0 / _44;
  }
  float _273 = _276;
  float _284 = _273 * _273;
  float _288 = 0.087292902171611785888671875;
  _288 = (-0.3018949925899505615234375) + (_288 * _284);
  _288 = 1.0 + (_288 * _284);
  _288 *= _273;
  float _304;
  if (_44 < 1.0) {
    _304 = _288;
  } else {
    _304 = 1.57079637050628662109375 - _288;
  }
  return _304;
}

float _48(float _47) {
  float _318 = abs(_47);
  float _315 = _45(_318);
  float _322;
  if (_47 < 0.0) {
    _322 = -_315;
  } else {
    _322 = _315;
  }
  return _322;
}

float _53(float _51, float _52) {
  float _336 = _51 / _52;
  float _332 = _48(_336);
  SPIRV_CROSS_FLATTEN
  if (_52 < 0.0) {
    _332 += ((_51 >= 0.0) ? 3.1415927410125732421875 : (-3.1415927410125732421875));
  }
  return _332;
}

float _66(vec3 _65) {
  bool _403 = _65.x == _65.y;
  bool _411;
  if (_403) {
    _411 = _65.y == _65.z;
  } else {
    _411 = _403;
  }
  float _414;
  if (_411) {
    _414 = 0.0;
  } else {
    float _434 = 1.73205077648162841796875 * (_65.y - _65.z);
    float _435 = ((2.0 * _65.x) - _65.y) - _65.z;
    _414 = 57.295780181884765625 * _53(_434, _435);
  }
  if (_414 < 0.0) {
    _414 += 360.0;
  }
  return _414;
}

float _136(float _134, float _135) {
  float _1364 = _134 - _135;
  if (_1364 < (-180.0)) {
    _1364 += 360.0;
  } else {
    if (_1364 > 180.0) {
      _1364 -= 360.0;
    }
  }
  return _1364;
}

float _129(float _127, float _128) {
  float _1201[5] = float[]((-_128) / 2.0, (-_128) / 4.0, 0.0, _128 / 4.0, _128 / 2.0);
  float _1213 = 0.0;
  bool _1217 = _127 > _1201[0];
  bool _1224;
  if (_1217) {
    _1224 = _127 < _1201[4];
  } else {
    _1224 = _1217;
  }
  if (_1224) {
    float _1227 = ((_127 - _1201[0]) * 4.0) / _128;
    int _1235 = int(_1227);
    float _1238 = _1227 - float(_1235);
    float _1246[4] = float[]((_1238 * _1238) * _1238, _1238 * _1238, _1238, 1.0);
    if (_1235 == 3) {
      _1213 = (((_1246[0] * (-0.16666667163372039794921875)) + (_1246[1] * 0.5)) + (_1246[2] * (-0.5))) + (_1246[3] * 0.16666667163372039794921875);
    } else {
      if (_1235 == 2) {
        _1213 = (((_1246[0] * 0.5) + (_1246[1] * (-1.0))) + (_1246[2] * 0.0)) + (_1246[3] * 0.666666686534881591796875);
      } else {
        if (_1235 == 1) {
          _1213 = (((_1246[0] * (-0.5)) + (_1246[1] * 0.5)) + (_1246[2] * 0.5)) + (_1246[3] * 0.16666667163372039794921875);
        } else {
          if (_1235 == 0) {
            _1213 = (((_1246[0] * 0.16666667163372039794921875) + (_1246[1] * 0.0)) + (_1246[2] * 0.0)) + (_1246[3] * 0.0);
          } else {
            _1213 = 0.0;
          }
        }
      }
    }
  }
  return (_1213 * 3.0) / 2.0;
}

mat3 _104(float _102, vec3 _103) {
  mat3 _678;
  _678[0].x = ((1.0 - _102) * _103.x) + _102;
  _678[1].x = (1.0 - _102) * _103.x;
  _678[2].x = (1.0 - _102) * _103.x;
  _678[0].y = (1.0 - _102) * _103.y;
  _678[1].y = ((1.0 - _102) * _103.y) + _102;
  _678[2].y = (1.0 - _102) * _103.y;
  _678[0].z = (1.0 - _102) * _103.z;
  _678[1].z = (1.0 - _102) * _103.z;
  _678[2].z = ((1.0 - _102) * _103.z) + _102;
  return _678;
}

float _56(float _55) {
  return log2(_55) / 3.3219280242919921875;
}

vec3 _36(mat3 _34, vec3 _35) {
  return _34 * _35;
}

float _59(float _58) {
  return pow(10.0, _58);
}

float _107(float _106) {
  _742 _744 = _742(float[](-4.0, -4.0, -3.1573765277862548828125, -0.485249996185302734375, 1.84773242473602294921875, 1.84773242473602294921875), float[](-0.718548238277435302734375, 2.0810306072235107421875, 3.66812419891357421875, 4.0, 4.0, 4.0), _111(5.4931642807787284255027770996094e-06, 9.9999997473787516355514526367188e-05), _111(0.180000007152557373046875, 4.80000019073486328125), _111(47185.921875, 10000.0), 0.0, 0.0);
  float _769 = max(_106, 6.1035199905745685100555419921875e-05);
  float _765 = _56(_769);
  float _772 = _744._m2._m0;
  float _779;
  if (_765 <= _56(_772)) {
    float _780 = _744._m2._m1;
    _779 = _56(_780);
  } else {
    float _786 = _744._m2._m0;
    bool _790 = _765 > _56(_786);
    bool _800;
    if (_790) {
      float _795 = _744._m3._m0;
      _800 = _765 < _56(_795);
    } else {
      _800 = _790;
    }
    if (_800) {
      float _805 = _744._m2._m0;
      float _811 = _744._m3._m0;
      float _815 = _744._m2._m0;
      float _803 = (3.0 * (_765 - _56(_805))) / (_56(_811) - _56(_815));
      int _822 = int(_803);
      float _825 = _803 - float(_822);
      vec3 _830 = vec3(_744._m0[_822], _744._m0[_822 + 1], _744._m0[_822 + 2]);
      vec3 _843 = vec3(_825 * _825, _825, 1.0);
      mat3 _856 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _857 = _830;
      _779 = dot(_843, _36(_856, _857));
    } else {
      float _863 = _744._m3._m0;
      bool _867 = _765 >= _56(_863);
      bool _877;
      if (_867) {
        float _872 = _744._m4._m0;
        _877 = _765 < _56(_872);
      } else {
        _877 = _867;
      }
      if (_877) {
        float _882 = _744._m3._m0;
        float _888 = _744._m4._m0;
        float _892 = _744._m3._m0;
        float _880 = (3.0 * (_765 - _56(_882))) / (_56(_888) - _56(_892));
        int _898 = int(_880);
        float _901 = _880 - float(_898);
        vec3 _906 = vec3(_744._m1[_898], _744._m1[_898 + 1], _744._m1[_898 + 2]);
        vec3 _919 = vec3(_901 * _901, _901, 1.0);
        mat3 _926 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _927 = _906;
        _779 = dot(_919, _36(_926, _927));
      } else {
        float _932 = _744._m4._m1;
        _779 = _56(_932);
      }
    }
  }
  float _936 = _779;
  return _59(_936);
}

vec3 _209(vec3 _208) {
  vec3 _2728 = _208;
  float _2727 = _63(_2728);
  vec3 _2732 = _208;
  float _2731 = _69(_2732);
  float _2739 = (_2727 - 0.4000000059604644775390625) / 0.20000000298023223876953125;
  float _2735 = _132(_2739);
  float _2744 = _2731;
  float _2746 = 0.0500000007450580596923828125 * _2735;
  float _2747 = 0.07999999821186065673828125;
  float _2741 = 1.0 + _125(_2744, _2746, _2747);
  vec3 _2750 = _208 * _2741;
  vec3 _2755 = _2750;
  float _2754 = _66(_2755);
  float _2759 = _2754;
  float _2761 = 0.0;
  float _2758 = _136(_2759, _2761);
  float _2764 = _2758;
  float _2766 = 135.0;
  float _2763 = _129(_2764, _2766);
  _2750.x += (((_2763 * _2727) * (0.02999999932944774627685546875 - _2750.x)) * 0.180000007152557373046875);
  _2750 = max(_2750, vec3(0.0));
  vec3 _2784 = _2750;
  mat3 _2786 = mat3(vec3(1.45143949985504150390625, -0.236510813236236572265625, -0.21492855250835418701171875), vec3(-0.076553881168365478515625, 1.17623007297515869140625, -0.09967593848705291748046875), vec3(0.008316130377352237701416015625, -0.00603245012462139129638671875, 0.997716248035430908203125));
  vec3 _2783 = _41(_2784, _2786);
  _2783 = clamp(_2783, vec3(0.0), vec3(65504.0));
  float _2793 = 0.959999978542327880859375;
  vec3 _2794 = vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875);
  mat3 _2792 = _104(_2793, _2794);
  vec3 _2796 = _2783;
  mat3 _2798 = _2792;
  _2783 = _41(_2796, _2798);
  float _2802 = _2783.x;
  vec3 _2801;
  _2801.x = _107(_2802);
  float _2807 = _2783.y;
  _2801.y = _107(_2807);
  float _2812 = _2783.z;
  _2801.z = _107(_2812);
  vec3 _2818 = _2801;
  mat3 _2820 = mat3(vec3(0.695452153682708740234375, 0.14067868888378143310546875, 0.1638690531253814697265625), vec3(0.044794611632823944091796875, 0.859670937061309814453125, 0.095534317195415496826171875), vec3(-0.0055258697830140590667724609375, 0.0040252101607620716094970703125, 1.00150072574615478515625));
  vec3 _2817 = _41(_2818, _2820);
  return _2817;
}

_112 _114() {
  float _962 = 0.001988737843930721282958984375;
  float _966 = 0.180000007152557373046875;
  float _970 = 16.29174041748046875;
  _112 _941 = _112(float[](-1.69896996021270751953125, -1.69896996021270751953125, -1.477900028228759765625, -1.2290999889373779296875, -0.864799976348876953125, -0.448000013828277587890625, 0.0051799998618662357330322265625, 0.451108038425445556640625, 0.91137444972991943359375, 0.91137444972991943359375), float[](0.51543867588043212890625, 0.8470437526702880859375, 1.13580000400543212890625, 1.38020002841949462890625, 1.51970005035400390625, 1.5985000133514404296875, 1.64670002460479736328125, 1.67460918426513671875, 1.687873363494873046875, 1.687873363494873046875), _111(_107(_962), 0.0199999995529651641845703125), _111(_107(_966), 4.80000019073486328125), _111(_107(_970), 48.0), 0.0, 0.039999999105930328369140625);
  return _941;
}

float _120(float _118, _112 _119) {
  float _982 = max(_118, 6.1035199905745685100555419921875e-05);
  float _979 = _56(_982);
  float _985 = _119._m2._m0;
  float _992;
  if (_979 <= _56(_985)) {
    float _998 = _119._m2._m1;
    float _1004 = _119._m2._m0;
    _992 = (_979 * _119._m5) + (_56(_998) - (_119._m5 * _56(_1004)));
  } else {
    float _1013 = _119._m2._m0;
    bool _1017 = _979 > _56(_1013);
    bool _1026;
    if (_1017) {
      float _1021 = _119._m3._m0;
      _1026 = _979 < _56(_1021);
    } else {
      _1026 = _1017;
    }
    if (_1026) {
      float _1032 = _119._m2._m0;
      float _1038 = _119._m3._m0;
      float _1042 = _119._m2._m0;
      float _1029 = (7.0 * (_979 - _56(_1032))) / (_56(_1038) - _56(_1042));
      int _1048 = int(_1029);
      float _1051 = _1029 - float(_1048);
      vec3 _1056 = vec3(_119._m0[_1048], _119._m0[_1048 + 1], _119._m0[_1048 + 2]);
      vec3 _1069 = vec3(_1051 * _1051, _1051, 1.0);
      mat3 _1076 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _1077 = _1056;
      _992 = dot(_1069, _36(_1076, _1077));
    } else {
      float _1083 = _119._m3._m0;
      bool _1087 = _979 >= _56(_1083);
      bool _1096;
      if (_1087) {
        float _1091 = _119._m4._m0;
        _1096 = _979 < _56(_1091);
      } else {
        _1096 = _1087;
      }
      if (_1096) {
        float _1101 = _119._m3._m0;
        float _1107 = _119._m4._m0;
        float _1111 = _119._m3._m0;
        float _1099 = (7.0 * (_979 - _56(_1101))) / (_56(_1107) - _56(_1111));
        int _1117 = int(_1099);
        float _1120 = _1099 - float(_1117);
        vec3 _1125 = vec3(_119._m1[_1117], _119._m1[_1117 + 1], _119._m1[_1117 + 2]);
        vec3 _1138 = vec3(_1120 * _1120, _1120, 1.0);
        mat3 _1145 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _1146 = _1125;
        _992 = dot(_1138, _36(_1145, _1146));
      } else {
        float _1156 = _119._m4._m1;
        float _1162 = _119._m4._m0;
        _992 = (_979 * _119._m6) + (_56(_1156) - (_119._m6 * _56(_1162)));
      }
    }
  }
  float _1169 = _992;
  return _59(_1169);
}

float _80(float _77, float _78, float _79) {
  return (_77 - _79) / (_78 - _79);
}

vec3 _86(vec3 _83, float _84, float _85) {
  float _561 = _83.x;
  float _564 = _84;
  float _566 = _85;
  float _569 = _83.y;
  float _572 = _84;
  float _574 = _85;
  float _577 = _83.z;
  float _580 = _84;
  float _582 = _85;
  return vec3(_80(_561, _564, _566), _80(_569, _572, _574), _80(_577, _580, _582));
}

vec3 _72(vec3 _71) {
  float _491 = (_71.x + _71.y) + _71.z;
  if (_491 == 0.0) {
    _491 = 1.0000000133514319600180897396058e-10;
  }
  vec3 _504;
  _504.x = _71.x / _491;
  _504.y = _71.y / _491;
  _504.z = _71.y;
  return _504;
}

vec3 _75(vec3 _74) {
  vec3 _521;
  _521.x = (_74.x * _74.z) / max(_74.y, 1.0000000133514319600180897396058e-10);
  _521.y = _74.z;
  _521.z = (((1.0 - _74.x) - _74.y) * _74.z) / max(_74.y, 1.0000000133514319600180897396058e-10);
  return _521;
}

vec3 _99(vec3 _98) {
  vec3 _638 = _98;
  mat3 _640 = mat3(vec3(0.662454128265380859375, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875), vec3(-0.0055746599100530147552490234375, 0.0040607298724353313446044921875, 1.0103390216827392578125));
  vec3 _624 = _41(_638, _640);
  vec3 _643 = _624;
  vec3 _642 = _72(_643);
  _642.z = clamp(_642.z, 0.0, 65504.0);
  _642.z = pow(_642.z, 0.981100022792816162109375);
  vec3 _656 = _642;
  _624 = _75(_656);
  vec3 _672 = _624;
  mat3 _674 = mat3(vec3(1.64102351665496826171875, -0.32480335235595703125, -0.2364247143268585205078125), vec3(-0.663663089275360107421875, 1.6153318881988525390625, 0.01675635017454624176025390625), vec3(0.011721909977495670318603515625, -0.00828444026410579681396484375, 0.988394916057586669921875));
  return _41(_672, _674);
}

vec3 _11(vec3 _10) {
  return clamp(_10, vec3(0.0), vec3(1.0));
}

float _17(uint _16) {
  return uintBitsToFloat(_16);
}

float _155(float _153[2][2], float _154) {
  if (_154 < _153[0][0]) {
    return _153[0][1];
  }
  if (_154 >= _153[1][0]) {
    return _153[1][1];
  }
  int _1559 = 0;
  int _1560 = 1;
  while (_1559 < (_1560 - 1)) {
    int _1570 = (_1559 + _1560) / 2;
    if (_153[_1570][0] == _154) {
      return _153[_1570][1];
    } else {
      if (_153[_1570][0] < _154) {
        _1559 = _1570;
      } else {
        _1560 = _1570;
      }
    }
  }
  float _1597 = (_154 - _153[_1559][0]) / (_153[_1559 + 1][0] - _153[_1559][0]);
  float _1612 = 1.0 - _1597;
  return (_1612 * _153[_1559][1]) + (_1597 * _153[_1559 + 1][1]);
}

float _158(float _157) {
  float _1630 = 9.9999997473787516355514526367188e-05;
  float _1634 = 0.0199999995529651641845703125;
  float _1629[2][2] = float[][](float[](_56(_1630), -15.0), float[](_56(_1634), -6.5));
  float _1639 = _157;
  float _1642[2][2] = _1629;
  float _1644 = _56(_1639);
  return 0.180000007152557373046875 * pow(2.0, _155(_1642, _1644));
}

float _161(float _160) {
  float _1651 = 48.0;
  float _1655 = 10000.0;
  float _1650[2][2] = float[][](float[](_56(_1651), 6.5), float[](_56(_1655), 18.0));
  float _1660 = _160;
  float _1663[2][2] = _1650;
  float _1665 = _56(_1660);
  return 0.180000007152557373046875 * pow(2.0, _155(_1663, _1665));
}

_167 _171(_163 _169, _163 _170) {
  float _1672 = _170._m0;
  float _1676 = _169._m0;
  float _1671 = (_56(_1672) - _56(_1676)) / 3.0;
  float _1686 = _169._m0;
  float _1694 = _169._m1;
  float _1700 = _169._m0;
  _167 _1683;
  _1683._m0[0] = (_169._m2 * (_56(_1686) - (0.5 * _1671))) + (_56(_1694) - (_169._m2 * _56(_1700)));
  float _1710 = _169._m0;
  float _1718 = _169._m1;
  float _1724 = _169._m0;
  _1683._m0[1] = (_169._m2 * (_56(_1710) + (0.5 * _1671))) + (_56(_1718) - (_169._m2 * _56(_1724)));
  float _1734 = _170._m0;
  float _1742 = _170._m1;
  float _1748 = _170._m0;
  _1683._m0[3] = (_170._m2 * (_56(_1734) - (0.5 * _1671))) + (_56(_1742) - (_170._m2 * _56(_1748)));
  float _1758 = _170._m0;
  float _1766 = _170._m1;
  float _1772 = _170._m0;
  _1683._m0[4] = (_170._m2 * (_56(_1758) + (0.5 * _1671))) + (_56(_1766) - (_170._m2 * _56(_1772)));
  float _1790[2][2] = _1784;
  float _1792 = log2(_169._m0 / 0.180000007152557373046875);
  float _1785 = _155(_1790, _1792);
  float _1794 = _169._m1;
  float _1799 = _170._m1;
  float _1803 = _169._m1;
  _1683._m0[2] = _56(_1794) + (_1785 * (_56(_1799) - _56(_1803)));
  return _1683;
}

_167 _175(_163 _173, _163 _174) {
  float _1815 = _174._m0;
  float _1819 = _173._m0;
  float _1814 = (_56(_1815) - _56(_1819)) / 3.0;
  float _1828 = _173._m0;
  float _1836 = _173._m1;
  float _1842 = _173._m0;
  _167 _1825;
  _1825._m0[0] = (_173._m2 * (_56(_1828) - (0.5 * _1814))) + (_56(_1836) - (_173._m2 * _56(_1842)));
  float _1852 = _173._m0;
  float _1860 = _173._m1;
  float _1866 = _173._m0;
  _1825._m0[1] = (_173._m2 * (_56(_1852) + (0.5 * _1814))) + (_56(_1860) - (_173._m2 * _56(_1866)));
  float _1876 = _174._m0;
  float _1884 = _174._m1;
  float _1890 = _174._m0;
  _1825._m0[3] = (_174._m2 * (_56(_1876) - (0.5 * _1814))) + (_56(_1884) - (_174._m2 * _56(_1890)));
  float _1900 = _174._m0;
  float _1908 = _174._m1;
  float _1914 = _174._m0;
  _1825._m0[4] = (_174._m2 * (_56(_1900) + (0.5 * _1814))) + (_56(_1908) - (_174._m2 * _56(_1914)));
  float _1933[2][2] = _1927;
  float _1935 = log2(_174._m0 / 0.180000007152557373046875);
  float _1928 = _155(_1933, _1935);
  float _1937 = _173._m1;
  float _1942 = _174._m1;
  float _1946 = _173._m1;
  _1825._m0[2] = _56(_1937) + (_1928 * (_56(_1942) - _56(_1946)));
  return _1825;
}

float _179(float _177, float _178) {
  return pow(2.0, log2(_177) - _178);
}

_183 _188(float _185, float _186, float _187) {
  float _1965 = _185;
  _163 _1964 = _163(_158(_1965), _185, 0.0);
  _163 _1970 = _163(0.180000007152557373046875, 4.80000019073486328125, 1.5499999523162841796875);
  float _1974 = _186;
  _163 _1973 = _163(_161(_1974), _186, 0.0);
  _163 _1980 = _1964;
  _163 _1982 = _1970;
  _167 _1979 = _171(_1980, _1982);
  _163 _1986 = _1970;
  _163 _1988 = _1973;
  _167 _1985 = _175(_1986, _1988);
  float _1991 = _185;
  float _1994 = _158(_1991);
  float _1995 = _187;
  _1964._m0 = _179(_1994, _1995);
  float _1999 = 0.180000007152557373046875;
  float _2000 = _187;
  _1970._m0 = _179(_1999, _2000);
  float _2004 = _186;
  float _2007 = _161(_2004);
  float _2008 = _187;
  _1973._m0 = _179(_2007, _2008);
  _183 _2012 = _183(_163(_1964._m0, _1964._m1, _1964._m2), _163(_1970._m0, _1970._m1, _1970._m2), _163(_1973._m0, _1973._m1, _1973._m2), float[](_1979._m0[0], _1979._m0[1], _1979._m0[2], _1979._m0[3], _1979._m0[4], _1979._m0[4]), float[](_1985._m0[0], _1985._m0[1], _1985._m0[2], _1985._m0[3], _1985._m0[4], _1985._m0[4]));
  return _2012;
}

float _203(float _201, _183 _202) {
  float _2282 = _202._m1._m0;
  float _2286 = _202._m0._m0;
  float _2281 = (_56(_2282) - _56(_2286)) / 3.0;
  float _2293 = _202._m2._m0;
  float _2297 = _202._m1._m0;
  float _2292 = (_56(_2293) - _56(_2297)) / 3.0;
  float _2311[4];
  for (int _2303 = 0; _2303 < 4; _2303++) {
    _2311[_2303] = (_202._m3[_2303] + _202._m3[_2303 + 1]) / 2.0;
  }
  float _2333[4];
  for (int _2325 = 0; _2325 < 4; _2325++) {
    _2333[_2325] = (_202._m4[_2325] + _202._m4[_2325 + 1]) / 2.0;
  }
  float _2350 = max(_201, 1.0000000133514319600180897396058e-10);
  float _2347 = _56(_2350);
  float _2353 = _202._m0._m1;
  float _2360;
  if (_2347 <= _56(_2353)) {
    float _2361 = _202._m0._m0;
    _2360 = _56(_2361);
  } else {
    float _2367 = _202._m0._m1;
    bool _2371 = _2347 > _56(_2367);
    bool _2380;
    if (_2371) {
      float _2375 = _202._m1._m1;
      _2380 = _2347 <= _56(_2375);
    } else {
      _2380 = _2371;
    }
    if (_2380) {
      bool _2386 = _2347 > _2311[0];
      bool _2393;
      if (_2386) {
        _2393 = _2347 <= _2311[1];
      } else {
        _2393 = _2386;
      }
      vec3 _2396;
      uint _2406;
      if (_2393) {
        _2396.x = _202._m3[0];
        _2396.y = _202._m3[1];
        _2396.z = _202._m3[2];
        _2406 = 0u;
      } else {
        bool _2411 = _2347 > _2311[1];
        bool _2418;
        if (_2411) {
          _2418 = _2347 <= _2311[2];
        } else {
          _2418 = _2411;
        }
        if (_2418) {
          _2396.x = _202._m3[1];
          _2396.y = _202._m3[2];
          _2396.z = _202._m3[3];
          _2406 = 1u;
        } else {
          bool _2434 = _2347 > _2311[2];
          bool _2441;
          if (_2434) {
            _2441 = _2347 <= _2311[3];
          } else {
            _2441 = _2434;
          }
          if (_2441) {
            _2396.x = _202._m3[2];
            _2396.y = _202._m3[3];
            _2396.z = _202._m3[4];
            _2406 = 2u;
          }
        }
      }
      mat3 _2454 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _2455 = _2396;
      vec3 _2453 = _36(_2454, _2455);
      float _2458 = _2453.x;
      float _2461 = _2453.y;
      float _2464 = _2453.z;
      _2464 -= _2347;
      float _2470 = sqrt((_2461 * _2461) - ((4.0 * _2458) * _2464));
      float _2480 = (2.0 * _2464) / ((-_2470) - _2461);
      float _2488 = _202._m0._m0;
      _2360 = _56(_2488) + ((_2480 + float(_2406)) * _2281);
    } else {
      float _2501 = _202._m1._m1;
      bool _2505 = _2347 > _56(_2501);
      bool _2514;
      if (_2505) {
        float _2509 = _202._m2._m1;
        _2514 = _2347 < _56(_2509);
      } else {
        _2514 = _2505;
      }
      if (_2514) {
        bool _2520 = _2347 >= _2333[0];
        bool _2527;
        if (_2520) {
          _2527 = _2347 <= _2333[1];
        } else {
          _2527 = _2520;
        }
        vec3 _2530;
        uint _2540;
        if (_2527) {
          _2530.x = _202._m4[0];
          _2530.y = _202._m4[1];
          _2530.z = _202._m4[2];
          _2540 = 0u;
        } else {
          bool _2545 = _2347 > _2333[1];
          bool _2552;
          if (_2545) {
            _2552 = _2347 <= _2333[2];
          } else {
            _2552 = _2545;
          }
          if (_2552) {
            _2530.x = _202._m4[1];
            _2530.y = _202._m4[2];
            _2530.z = _202._m4[3];
            _2540 = 1u;
          } else {
            bool _2568 = _2347 > _2333[2];
            bool _2575;
            if (_2568) {
              _2575 = _2347 <= _2333[3];
            } else {
              _2575 = _2568;
            }
            if (_2575) {
              _2530.x = _202._m4[2];
              _2530.y = _202._m4[3];
              _2530.z = _202._m4[4];
              _2540 = 2u;
            }
          }
        }
        mat3 _2588 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _2589 = _2530;
        vec3 _2587 = _36(_2588, _2589);
        float _2592 = _2587.x;
        float _2595 = _2587.y;
        float _2598 = _2587.z;
        _2598 -= _2347;
        float _2604 = sqrt((_2595 * _2595) - ((4.0 * _2592) * _2598));
        float _2614 = (2.0 * _2598) / ((-_2604) - _2595);
        float _2622 = _202._m1._m0;
        _2360 = _56(_2622) + ((_2614 + float(_2540)) * _2292);
      } else {
        float _2634 = _202._m2._m0;
        _2360 = _56(_2634);
      }
    }
  }
  float _2638 = _2360;
  return _59(_2638);
}

vec3 _206(vec3 _205) {
  vec3 _2644 = _205;
  float _2643 = _63(_2644);
  vec3 _2648 = _205;
  float _2647 = _69(_2648);
  float _2657 = (_2643 - 0.4000000059604644775390625) / 0.20000000298023223876953125;
  float _2651 = _132(_2657);
  float _2664 = _2647;
  float _2666 = 0.0500000007450580596923828125 * _2651;
  float _2667 = 0.07999999821186065673828125;
  float _2659 = 1.0 + _125(_2664, _2666, _2667);
  vec3 _2670 = _205 * _2659;
  vec3 _2675 = _2670;
  float _2674 = _66(_2675);
  float _2679 = _2674;
  float _2681 = 0.0;
  float _2678 = _136(_2679, _2681);
  float _2685 = _2678;
  float _2687 = 135.0;
  float _2683 = _129(_2685, _2687);
  _2670.x += (((_2683 * _2643) * (0.02999999932944774627685546875 - _2670.x)) * 0.180000007152557373046875);
  _2670 = max(_2670, vec3(0.0));
  vec3 _2706 = _2670;
  mat3 _2708 = mat3(vec3(1.45143949985504150390625, -0.236510813236236572265625, -0.21492855250835418701171875), vec3(-0.076553881168365478515625, 1.17623007297515869140625, -0.09967593848705291748046875), vec3(0.008316130377352237701416015625, -0.00603245012462139129638671875, 0.997716248035430908203125));
  vec3 _2705 = _41(_2706, _2708);
  _2705 = clamp(_2705, vec3(0.0), vec3(65504.0));
  float _2716 = 0.959999978542327880859375;
  vec3 _2717 = vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875);
  mat3 _2714 = _104(_2716, _2717);
  vec3 _2719 = _2705;
  mat3 _2721 = _2714;
  _2705 = _41(_2719, _2721);
  return _2705;
}

float _194(float _192, _183 _193) {
  float _2067 = max(_192, 6.1035199905745685100555419921875e-05);
  float _2064 = _56(_2067);
  float _2070 = _193._m0._m0;
  float _2077;
  if (_2064 <= _56(_2070)) {
    float _2082 = _193._m0._m1;
    float _2088 = _193._m0._m0;
    _2077 = (_2064 * _193._m0._m2) + (_56(_2082) - (_193._m0._m2 * _56(_2088)));
  } else {
    float _2097 = _193._m0._m0;
    bool _2101 = _2064 > _56(_2097);
    bool _2110;
    if (_2101) {
      float _2105 = _193._m1._m0;
      _2110 = _2064 < _56(_2105);
    } else {
      _2110 = _2101;
    }
    if (_2110) {
      float _2115 = _193._m0._m0;
      float _2121 = _193._m1._m0;
      float _2125 = _193._m0._m0;
      float _2113 = (3.0 * (_2064 - _56(_2115))) / (_56(_2121) - _56(_2125));
      int _2131 = int(_2113);
      float _2134 = _2113 - float(_2131);
      vec3 _2139 = vec3(_193._m3[_2131], _193._m3[_2131 + 1], _193._m3[_2131 + 2]);
      vec3 _2152 = vec3(_2134 * _2134, _2134, 1.0);
      mat3 _2159 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
      vec3 _2160 = _2139;
      _2077 = dot(_2152, _36(_2159, _2160));
    } else {
      float _2166 = _193._m1._m0;
      bool _2170 = _2064 >= _56(_2166);
      bool _2179;
      if (_2170) {
        float _2174 = _193._m2._m0;
        _2179 = _2064 < _56(_2174);
      } else {
        _2179 = _2170;
      }
      if (_2179) {
        float _2184 = _193._m1._m0;
        float _2190 = _193._m2._m0;
        float _2194 = _193._m1._m0;
        float _2182 = (3.0 * (_2064 - _56(_2184))) / (_56(_2190) - _56(_2194));
        int _2200 = int(_2182);
        float _2203 = _2182 - float(_2200);
        vec3 _2208 = vec3(_193._m4[_2200], _193._m4[_2200 + 1], _193._m4[_2200 + 2]);
        vec3 _2221 = vec3(_2203 * _2203, _2203, 1.0);
        mat3 _2228 = mat3(vec3(0.5, -1.0, 0.5), vec3(-1.0, 1.0, 0.5), vec3(0.5, 0.0, 0.0));
        vec3 _2229 = _2208;
        _2077 = dot(_2221, _36(_2228, _2229));
      } else {
        float _2238 = _193._m2._m1;
        float _2244 = _193._m2._m0;
        _2077 = (_2064 * _193._m2._m2) + (_56(_2238) - (_193._m2._m2 * _56(_2244)));
      }
    }
  }
  float _2251 = _2077;
  return _59(_2251);
}

vec3 _199(vec3 _197, _183 _198) {
  float _2257 = _197.x;
  _183 _2260 = _198;
  vec3 _2256;
  _2256.x = _194(_2257, _2260);
  float _2264 = _197.y;
  _183 _2267 = _198;
  _2256.y = _194(_2264, _2267);
  float _2271 = _197.z;
  _183 _2274 = _198;
  _2256.z = _194(_2271, _2274);
  return _2256;
}

float _91(float _88, float _89, float _90) {
  return (_88 * (_89 - _90)) + _90;
}

vec3 _96(vec3 _93, float _94, float _95) {
  float _597 = _93.x;
  float _600 = _94;
  float _602 = _95;
  float _605 = _93.y;
  float _608 = _94;
  float _610 = _95;
  float _613 = _93.z;
  float _616 = _94;
  float _618 = _95;
  return vec3(_91(_597, _600, _602), _91(_605, _608, _610), _91(_613, _616, _618));
}

vec3 _220(vec3 _217, uint _218, bool _219) {
  vec3 _2848 = _217;
  mat3 _2850 = mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375));
  vec3 _2865 = _41(_2848, _2850);
  mat3 _2866 = mat3(vec3(1.01303005218505859375, 0.0061053098179399967193603515625, -0.014971000142395496368408203125), vec3(0.0076982299797236919403076171875, 0.99816501140594482421875, -0.005032029934227466583251953125), vec3(-0.0028413101099431514739990234375, 0.0046851597726345062255859375, 0.92450702190399169921875));
  vec3 _2880 = _41(_2865, _2866);
  mat3 _2881 = mat3(vec3(1.04981100559234619140625, -0.0, -9.7479998657945543527603149414063e-05), vec3(-0.495902955532073974609375, 1.37331295013427734375, 0.09824003279209136962890625), vec3(3.9999999756901161163114011287689e-08, -0.0, 0.991252124309539794921875));
  vec3 _2834 = _41(_2880, _2881);
  vec3 _2883 = _2834;
  _2834 = _146(_2883);
  vec3 _2886 = vec3(0.0);
  float _2887 = 0.0;
  float _2888 = 0.0;
  vec3 _2889 = vec3(0.0);
  if ((_218 & 1u) == 0u) {
    vec3 _2896 = _2834;
    vec3 _2895 = _209(_2896);
    vec3 _2900 = _2895;
    mat3 _2902 = mat3(vec3(1.45143949985504150390625, -0.236510813236236572265625, -0.21492855250835418701171875), vec3(-0.076553881168365478515625, 1.17623007297515869140625, -0.09967593848705291748046875), vec3(0.008316130377352237701416015625, -0.00603245012462139129638671875, 0.997716248035430908203125));
    vec3 _2899 = _41(_2900, _2902);
    _2887 = 0.0199999995529651641845703125;
    _2888 = 48.0;
    float _2905 = _2899.x;
    _112 _2908 = _114();
    _2886.x = _120(_2905, _2908);
    float _2912 = _2899.y;
    _112 _2915 = _114();
    _2886.y = _120(_2912, _2915);
    float _2919 = _2899.z;
    _112 _2922 = _114();
    _2886.z = _120(_2919, _2922);
    vec3 _2925 = _2886;
    float _2927 = _2888;
    float _2929 = _2887;
    _2889 = _86(_2925, _2927, _2929);
    vec3 _2932 = _2889;
    _2889 = _99(_2932);
    float _2937 = 0.930000007152557373046875;
    vec3 _2938 = vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875);
    mat3 _2935 = _104(_2937, _2938);
    vec3 _2940 = _2889;
    mat3 _2942 = _2935;
    _2889 = _41(_2940, _2942);
    vec3 _2946 = _2889;
    mat3 _2948 = mat3(vec3(0.662454128265380859375, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875), vec3(-0.0055746599100530147552490234375, 0.0040607298724353313446044921875, 1.0103390216827392578125));
    vec3 _2945 = _41(_2946, _2948);
    vec3 _2963 = _2945;
    mat3 _2965 = mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125));
    _2889 = _41(_2963, _2965);
    vec3 _2980 = _2889;
    mat3 _2982 = mat3(vec3(3.2409694194793701171875, -1.53738296031951904296875, -0.4986107647418975830078125), vec3(-0.96924388408660888671875, 1.87596786022186279296875, 0.041555099189281463623046875), vec3(0.055630020797252655029296875, -0.2039768397808074951171875, 1.0569713115692138671875));
    _2889 = _41(_2980, _2982);
    vec3 _2984 = _2889;
    _2889 = _11(_2984);
  } else {
    float _2988 = _2993._m41;  // _2993._m41 - mid gray = 10.f default
    uint _2999 = 8388608u;
    _2887 = max(_17(_2999), _2993._m42);  // _2993._m42 - aces minimum nits = 0.0001f

    // _2887 = 0.000001f; // lower minimum nits

    _2888 = _2993._m40;  // peak nits
    float _3009 = _2887;
    float _3011 = _2888;
    float _3013 = 0.0;
    _183 _3008 = _188(_3009, _3011, _3013);
    float _3016 = _2988;
    _183 _3018 = _3008;
    float _3015 = log2(_203(_3016, _3018)) - (-2.4739310741424560546875);
    float _3025 = _2887;
    float _3027 = _2888;
    float _3029 = _3015;
    _183 _3024 = _188(_3025, _3027, _3029);
    vec3 _3033 = _2834;
    vec3 _3032 = _206(_3033);
    vec3 _3036 = _3032;
    _183 _3038 = _3024;
    _2886 = _199(_3036, _3038);
    vec3 _3041 = _2886;
    float _3043 = _2888;
    float _3045 = _2887;
    _2889 = _86(_3041, _3043, _3045);
    float _3049 = 0.930000007152557373046875;
    vec3 _3050 = vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875);
    mat3 _3048 = _104(_3049, _3050);
    vec3 _3052 = _2889;
    mat3 _3054 = _3048;
    _2889 = _41(_3052, _3054);
    vec3 _3058 = _2889;
    mat3 _3060 = mat3(vec3(0.662454128265380859375, 0.1340042054653167724609375, 0.1561876833438873291015625), vec3(0.272228717803955078125, 0.67408168315887451171875, 0.0536895208060741424560546875), vec3(-0.0055746599100530147552490234375, 0.0040607298724353313446044921875, 1.0103390216827392578125));
    vec3 _3057 = _41(_3058, _3060);
    vec3 _3062 = _3057;
    mat3 _3064 = mat3(vec3(0.987228810787200927734375, -0.00611330009996891021728515625, 0.0159534104168415069580078125), vec3(-0.007598400115966796875, 1.00185978412628173828125, 0.0053300000727176666259765625), vec3(0.00307258008979260921478271484375, -0.0050959200598299503326416015625, 1.0816795825958251953125));
    _2889 = _41(_3062, _3064);
    vec3 _3079 = _2889;
    mat3 _3081 = mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875));
    _2889 = _41(_3079, _3081);
    _2889 = max(vec3(0.0), _2889);
    vec3 _3090 = _2889;
    float _3092 = _2888;
    float _3094 = (_219 == true) ? 0.0 : _2887;
    _2889 = max(vec3(0.0), _96(_3090, _3092, _3094));
  }
  return _2889;
}

void main() {
  _223 = 2147483648u;
  _225 = 1073741824u;
  _227 = 536870912u;
  _231 = 0;
  _233 = 1;
  _235 = 2;
  ivec3 _3102 = ivec3(gl_GlobalInvocationID);
  int _3108 = _2993._m53;  // not contrast
  bool _3116 = _3102.x >= _3108;
  bool _3124;
  if (!_3116) {
    _3124 = _3102.y >= _3108;
  } else {
    _3124 = _3116;
  }
  bool _3132;
  if (!_3124) {
    _3132 = _3102.z >= _3108;
  } else {
    _3132 = _3124;
  }
  SPIRV_CROSS_BRANCH
  if (_3132) {
    return;
  }
  vec3 _3136 = vec3(_3102) / vec3(float(_2993._m53) - 1.0);
  vec3 _3145 = _3136;
  _3136 = _212(_3145);
  vec3 _3158 = _3136;
  uint use_hdr = _2993._m52;  // 0u - false, 1u - true
  bool _3163 = (_3152._m1 & 1u) != 0u;

#if TONE_MAP_TYPE

  const float peak_nits = _2993._m40;
  const float paper_white = _2993._m41 * 10.f;
  const vec3 untonemapped = _3136;

  vec3 _3148 = ApplyACES(untonemapped, peak_nits, paper_white);

#else

  vec3 _3148 = _220(_3158, use_hdr, _3163);
#endif
  imageStore(_3167, _3102, vec4(_3148, 1.0));
}

