// Output

#version 450

#extension GL_GOOGLE_include_directive : require
#include "./include/common.glsl"

#extension GL_EXT_buffer_reference2 : require
#if defined(GL_EXT_control_flow_attributes)
#extension GL_EXT_control_flow_attributes : require
#define SPIRV_CROSS_FLATTEN [[flatten]]
#define SPIRV_CROSS_BRANCH  [[dont_flatten]]
#define SPIRV_CROSS_UNROLL  [[unroll]]
#define SPIRV_CROSS_LOOP    [[dont_unroll]]
#else
#define SPIRV_CROSS_FLATTEN
#define SPIRV_CROSS_BRANCH
#define SPIRV_CROSS_UNROLL
#define SPIRV_CROSS_LOOP
#endif
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

struct _1169 {
  uint _m0;
  uint _m1;
};

struct _1326 {
  float _m0;
  float _m1;
};

struct _1327 {
  float _m0[6];
  float _m1[6];
  _1326 _m2;
  _1326 _m3;
  _1326 _m4;
  float _m5;
  float _m6;
};

layout(set = 1, binding = 0, std140) uniform _342_344 {
  uvec4 _m0;
  vec4 _m1;
  vec4 _m2;
  vec4 _m3;
  vec4 _m4;
  vec4 _m5;
  float _m6;
  float _m7;
  float _m8;
  float _m9;
  float _m10;
  float _m11;
  float _m12;
  uint _m13;
  uint _m14;
}
_344;

layout(set = 0, binding = 0, std140) uniform _928_930 {
  uvec4 _m0;
  vec4 _m1;
  vec4 _m2;
  vec4 _m3;
  vec4 _m4;
  vec4 _m5;
  vec4 _m6;
  vec4 _m7;
  vec4 _m8;
  vec4 _m9;
  vec4 _m10;
  vec4 _m11;
  vec4 _m12;
  vec4 _m13;
  vec4 _m14;
  vec4 _m15;
  float _m16;
  float _m17;
  float _m18;
  uint _m19;
  float _m20;
  float _m21;
  float _m22;
  float _m23;
  float _m24;
  float _m25;
  uint _m26;
  uint _m27;
  float _m28;
  uint _m29;
  float _m30;
  float _m31;
  float _m32;
  float _m33;
  float _m34;
  float _m35;
  float _m36;
  float _m37;
  float _m38;
  float _m39;
  float _m40;
  float _m41;
  float _m42;
  float _m43;
  float _m44;
  float _m45;
  float _m46;
  uint _m47;
  float _m48;
  float _m49;
  float _m50;
  float _m51;
  float _m52;
  uint _m53;
  uint _m54;
  uint _m55;
  float _m56;
  uint _m57;
}
_930;

layout(set = 0, binding = 2, std430) restrict readonly buffer _1171_1173 {
  _1169 _m0[];
}
_1173;

layout(set = 0, binding = 3, std140) uniform _1176_1178 {
  vec4 _m0[1024];
}
_1178;

layout(set = 0, binding = 4, std140) uniform _1181_1183 {
  vec4 _m0[64];
}
_1183;

layout(set = 1, binding = 6) uniform texture2D _487;
layout(set = 0, binding = 5) uniform sampler _491;
layout(set = 1, binding = 5) uniform texture2D _605;
layout(set = 0, binding = 8) uniform sampler _607;
layout(set = 1, binding = 3, rgba8) uniform writeonly image2D _882;
layout(set = 1, binding = 2) uniform texture3D _1012;
layout(set = 0, binding = 9) uniform sampler _1014;
layout(set = 1, binding = 4, rgb10_a2) uniform writeonly image2D _1112;
layout(set = 1, binding = 1, r11f_g11f_b10f) uniform writeonly image2D _1163;
layout(set = 0, binding = 1) uniform texture2D _1168;
layout(set = 0, binding = 6) uniform sampler _1184;
layout(set = 0, binding = 7) uniform texture2D _1185;

uint _78;
uint _80;
uint _82;
int _86;
int _88;
int _90;
uint _1193;

float _47(float _46) {
  return 0.16666667163372039794921875 * ((_46 * ((_46 * ((-_46) + 3.0)) - 3.0)) + 1.0);
}

float _50(float _49) {
  return 0.16666667163372039794921875 * (((_49 * _49) * ((3.0 * _49) - 6.0)) + 4.0);
}

float _59(float _58) {
  float _242 = _58;
  float _245 = _58;
  return _47(_242) + _50(_245);
}

float _53(float _52) {
  return 0.16666667163372039794921875 * ((_52 * ((_52 * (((-3.0) * _52) + 3.0)) + 3.0)) + 1.0);
}

float _56(float _55) {
  return 0.16666667163372039794921875 * ((_55 * _55) * _55);
}

float _62(float _61) {
  float _251 = _61;
  float _254 = _61;
  return _53(_251) + _56(_254);
}

float _65(float _64) {
  float _261 = _64;
  float _264 = _64;
  float _267 = _64;
  return (-1.0) + (_50(_261) / (_47(_264) + _50(_267)));
}

float _68(float _67) {
  float _275 = _67;
  float _278 = _67;
  float _281 = _67;
  return 1.0 + (_56(_275) / (_53(_278) + _56(_281)));
}

float _19(float _18) {
#if USE_POWER_GAMMA
  return pow(_18, 2.2f);
#endif

  float _108;
  if (_18 <= 0.040449999272823333740234375) {
    _108 = _18 / 12.9200000762939453125;
  } else {
    _108 = pow((_18 / 1.05499994754791259765625) + 0.0521326996386051177978515625, 2.400000095367431640625);
  }
  return _108;
}

vec3 _22(vec3 _21) {
  float _125 = _21.x;
  float _130 = _21.y;
  float _135 = _21.z;
  return vec3(_19(_125), _19(_130), _19(_135));
}

vec3 _35(mat3 _33, vec3 _34) {
  return _33 * _34;
}

vec3 _16(vec3 _15) {
  return clamp(_15, vec3(0.0), vec3(1.0));
}

float _25(float _24) {
  float _146;
  if (_24 > 0.003130800090730190277099609375) {
    _146 = (pow(_24, 0.4166666567325592041015625) * 1.05499994754791259765625) - 0.054999999701976776123046875;
  } else {
    _146 = _24 * 12.9200000762939453125;
  }
  return _146;
}

vec3 _28(vec3 _27) {
  float _161 = _27.x;
  float _165 = _27.y;
  float _169 = _27.z;
  return vec3(_25(_161), _25(_165), _25(_169));
}

float _44(vec3 _43) {
  return dot(_43, vec3(0.2125999927520751953125, 0.715200006961822509765625, 0.072200000286102294921875));
}

float _10(float _9) {
  return clamp(_9, 0.0, 1.0);
}

vec3 _40(vec3 _38, mat3 _39) {
  return _38 * _39;
}

float _71(float _70) {
  float _289 = _70 / 10000.0;
  float _293 = pow(_289, 0.1593017578125);
  float _297 = (0.8359375 + (18.8515625 * _293)) / (1.0 + (18.6875 * _293));
  _297 = pow(_297, 78.84375);
  return _297;
}

vec3 _74(vec3 _73) {
  float _314 = _73.x;
  float _318 = _73.y;
  float _322 = _73.z;
  return vec3(_71(_314), _71(_318), _71(_322));
}

void main() {
  _78 = 2147483648u;
  _80 = 1073741824u;
  _82 = 536870912u;
  _86 = 0;
  _88 = 1;
  _90 = 2;
  ivec3 _331 = ivec3(gl_GlobalInvocationID);
  vec2 _339 = _344._m5.xy + (_344._m5.zw * (vec2(_331.xy) + vec2(0.5)));
  vec2 _362 = _344._m1.zw * (vec2(_331.xy) + vec2(0.5));
  vec2 _372 = _339;
  vec2 _374 = (_372 * _344._m4.xy) + vec2(0.5);
  vec2 _383 = floor(_374);
  vec2 _386 = fract(_374);
  float _390 = _386.x;
  float _389 = _59(_390);
  float _395 = _386.x;
  float _394 = _62(_395);
  float _400 = _386.x;
  float _399 = _65(_400);
  float _405 = _386.x;
  float _404 = _68(_405);
  float _410 = _386.y;
  float _409 = _65(_410);
  float _415 = _386.y;
  float _414 = _68(_415);
  vec2 _419 = (vec2(_383.x + _399, _383.y + _409) - vec2(0.5)) / _344._m4.xy;
  vec2 _435 = (vec2(_383.x + _404, _383.y + _409) - vec2(0.5)) / _344._m4.xy;
  vec2 _451 = (vec2(_383.x + _399, _383.y + _414) - vec2(0.5)) / _344._m4.xy;
  vec2 _467 = (vec2(_383.x + _404, _383.y + _414) - vec2(0.5)) / _344._m4.xy;
  vec4 _484 = textureLod(sampler2D(_487, _491), vec4(_419, 0.0, 0.0).xy, vec4(_419, 0.0, 0.0).w);
  vec4 _507 = textureLod(sampler2D(_487, _491), vec4(_435, 0.0, 0.0).xy, vec4(_435, 0.0, 0.0).w);
  vec4 _522 = textureLod(sampler2D(_487, _491), vec4(_451, 0.0, 0.0).xy, vec4(_451, 0.0, 0.0).w);
  vec4 _537 = textureLod(sampler2D(_487, _491), vec4(_467, 0.0, 0.0).xy, vec4(_467, 0.0, 0.0).w);
  float _553 = _386.y;
  float _565 = _386.y;
  vec4 _552 = (((_484 * _389) + (_507 * _394)) * _59(_553)) + (((_522 * _389) + (_537 * _394)) * _62(_565));
  vec3 _578 = mix(_552.xyz, textureLod(sampler2D(_487, _491), vec4(_372, 0.0, 0.0).xy, vec4(_372, 0.0, 0.0).w).xyz, _344._m3.zzz);
  _578 = max(vec3(0.0), _578);
  vec4 _604 = textureLod(sampler2D(_605, _607), vec4(_362, 0.0, 0.0).xy, vec4(_362, 0.0, 0.0).w);
  vec3 _621 = _604.xyz;
  vec3 _624 = _22(_621);
  _604.x = _624.x;
  _604.y = _624.y;
  _604.z = _624.z;
  vec3 _631 = _604.xyz;
  SPIRV_CROSS_BRANCH
  if (_344._m3.x > 0.0) {
    float _640 = _344._m9;
    float _644 = _344._m8;
    float _648 = mix(0.949999988079071044921875, 1.0499999523162841796875, _344._m7);
    float _655 = mix(1.0, 3.0, _344._m6);
    _631 = max(vec3(0.0), mix(vec3(0.5), _631, vec3(_648))) * _655;
    vec3 _668 = vec3(0.0);
    vec3 _692;
    vec3 _705;
    SPIRV_CROSS_BRANCH
    if (_344._m3.x == 1.0) {
      mat3 _688 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
      vec3 _689 = _631;
      vec3 _674 = _35(_688, _689);
      _692.x = dot(_674, vec3(0.0, 1.0511829853057861328125, -0.051160991191864013671875));
      _692.y = _674.y;
      _692.z = _674.z;
      mat3 _719 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
      vec3 _720 = _692;
      _705 = _35(_719, _720);
      vec3 _723 = _631 - _705;
      _668.x = 0.0;
      _668.y = (_723.x * _640) + _723.y;
      _668.z = (_723.x * _640) + _723.z;
    } else {
      SPIRV_CROSS_BRANCH
      if (_344._m3.x == 2.0) {
        mat3 _752 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
        vec3 _753 = _631;
        vec3 _751 = _35(_752, _753);
        _692.x = _751.x;
        _692.y = dot(_751, vec3(0.9513092041015625, 0.0, 0.04866991937160491943359375));
        _692.z = _751.z;
        mat3 _768 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
        vec3 _769 = _692;
        _705 = _35(_768, _769);
        vec3 _772 = _631 - _705;
        _668.x = (_772.y * _640) + _772.x;
        _668.y = 0.0;
        _668.z = (_772.y * _640) + _772.z;
      } else {
        SPIRV_CROSS_BRANCH
        if (_344._m3.x == 3.0) {
          mat3 _800 = mat3(vec3(0.3139902055263519287109375, 0.1553724110126495361328125, 0.0177523903548717498779296875), vec3(0.639512956142425537109375, 0.757894456386566162109375, 0.109442092478275299072265625), vec3(0.0464975498616695404052734375, 0.0867014229297637939453125, 0.87256920337677001953125));
          vec3 _801 = _631;
          vec3 _799 = _35(_800, _801);
          _692.x = _799.x;
          _692.y = _799.y;
          _692.z = dot(_799, vec3(-0.867447376251220703125, 1.867270946502685546875, 0.0));
          mat3 _816 = mat3(vec3(5.4722118377685546875, -1.12524187564849853515625, 0.02980164997279644012451171875), vec3(-4.64196014404296875, 2.293170928955078125, -0.19318072497844696044921875), vec3(0.16963708400726318359375, -0.16789519786834716796875, 1.1636478900909423828125));
          vec3 _817 = _692;
          _705 = _35(_816, _817);
          vec3 _820 = _631 - _705;
          _668.x = (_820.z * _640) + _820.x;
          _668.y = (_820.z * _640) + _820.y;
          _668.z = 0.0;
        }
      }
    }
    vec3 _841 = max(vec3(0.0), _631 + _668);
    vec3 _850 = mix(_631, _841, vec3(_644));
    _604.x = _850.x;
    _604.y = _850.y;
    _604.z = _850.z;
  }
  uint _858 = _344._m13;
  vec4 _900;
  SPIRV_CROSS_BRANCH
  if ((_858 & 1u) == 0u) {
    vec3 _868 = _578;
    vec3 _871 = _16(_868);
    _578 = _22(_871);
    if ((_344._m14 & 1u) != 0u) {
      imageStore(_882, _331.xy, vec4(_578, 1.0));
    }
    vec3 _891 = (_578 * (1.0 - _604.w)) + _604.xyz;
    vec3 _901 = _891;
    vec3 _903 = _28(_901);
    _900.x = _903.x;
    _900.y = _903.y;
    _900.z = _903.z;
    SPIRV_CROSS_FLATTEN
    if (_344._m12 != 1.0) {
      vec4 _916 = _900;
      vec3 _921 = pow(_916.xyz, vec3(_344._m12));
      _900.x = _921.x;
      _900.y = _921.y;
      _900.z = _921.z;
    }
    vec4 _934 = _900;
    vec3 _936 = _934.xyz * _930._m41;
    _900.x = _936.x;
    _900.y = _936.y;
    _900.z = _936.z;
    bool _945 = _344._m3.w > 0.0;
    bool _955;
    if (_945) {
      _955 = ((_930._m57 & 1u) != 0u) == false;
    } else {
      _955 = _945;
    }
    SPIRV_CROSS_BRANCH
    if (_955) {
      vec2 _958 = _362 + (vec2(ivec2(_344._m2.xy) & ivec2(1023)) / vec2(1023.0));
      vec2 _972 = (_362 * vec2(_930._m18 * _930._m56, _930._m18)) + vec2(_344._m10, _344._m11);
      vec3 _994 = _900.xyz;
      float _999 = 1.0 - _44(_994);
      float _993 = _10(_999);
      vec3 _1001 = (vec3(1.0, 0.550000011920928955078125, 1.0) * _993) * _344._m3.w;
      vec3 _1009 = (textureLod(sampler3D(_1012, _1014), vec4(_972, _993, 0.0).xyz, vec4(_972, _993, 0.0).w).xyz * 2.0) - vec3(1.0);
      vec3 _1041 = _900.xyz + (_1009 * _1001);
      vec3 _1042 = _16(_1041);
      _900.x = _1042.x;
      _900.y = _1042.y;
      _900.z = _1042.z;
    }
  } else {
    _578 = max(vec3(0.0), _578);
    vec3 _1065 = _604.xyz;
    mat3 _1068 = mat3(vec3(0.412390887737274169921875, 0.357584297657012939453125, 0.18048083782196044921875), vec3(0.2126390635967254638671875, 0.71516859531402587890625, 0.072192333638668060302734375), vec3(0.01933082006871700286865234375, 0.119194723665714263916015625, 0.95053231716156005859375));
    vec3 _1083 = _40(_1065, _1068);
    mat3 _1084 = mat3(vec3(1.71665096282958984375, -0.35567080974578857421875, -0.2533662319183349609375), vec3(-0.666684329509735107421875, 1.616481304168701171875, 0.0157685391604900360107421875), vec3(0.0176398493349552154541015625, -0.04277060925960540771484375, 0.94210326671600341796875));
    vec3 _1085 = _40(_1083, _1084);
    _604.x = _1085.x;
    _604.y = _1085.y;
    _604.z = _1085.z;
    vec4 _1095 = _604;
    vec3 _1097 = _1095.xyz * _930._m46;
    _604.x = _1097.x;
    _604.y = _1097.y;
    _604.z = _1097.z;
    if ((_344._m14 & 1u) != 0u) {
      vec3 _1116 = _578;
      imageStore(_1112, _331.xy, vec4(_74(_1116), 1.0));
    }
    if (((_930._m57 & 4u) != 0u) == false) {
      _578 *= _930._m42;
    }
    vec3 _1143 = (_578 * (1.0 - _604.w)) + _604.xyz;
    _900.x = _1143.x;
    _900.y = _1143.y;
    _900.z = _1143.z;
    vec3 _1150 = _900.xyz;
    vec3 _1153 = _74(_1150);
    _900.x = _1153.x;
    _900.y = _1153.y;
    _900.z = _1153.z;
  }
  _900.w = 1.0;
  imageStore(_1163, _331.xy, _900);
}

