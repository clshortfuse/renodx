Texture2D<float4> tLinearImage : register(t0);

cbuffer HDRMapping : register(b0) {
  float HDRMapping_000x : packoffset(c000.x);
  float HDRMapping_000y : packoffset(c000.y);
  float HDRMapping_000z : packoffset(c000.z);
  float HDRMapping_000w : packoffset(c000.w);
  float HDRMapping_001x : packoffset(c001.x);
  float HDRMapping_001y : packoffset(c001.y);
  float HDRMapping_001z : packoffset(c001.z);
  float HDRMapping_001w : packoffset(c001.w);
  float HDRMapping_002x : packoffset(c002.x);
  float HDRMapping_002y : packoffset(c002.y);
  float HDRMapping_002z : packoffset(c002.z);
  float HDRMapping_002w : packoffset(c002.w);
  float HDRMapping_003x : packoffset(c003.x);
  float HDRMapping_003y : packoffset(c003.y);
  float HDRMapping_003z : packoffset(c003.z);
  float HDRMapping_003w : packoffset(c003.w);
  uint HDRMapping_004x : packoffset(c004.x);
  float HDRMapping_004y : packoffset(c004.y);
};

SamplerState PointBorder : register(s2, space32);

float4 main(
  noperspective float4 SV_Position : SV_Position,
  linear float2 TEXCOORD : TEXCOORD
) : SV_Target {
  float4 SV_Target;
  // texture _1 = tLinearImage;
  // SamplerState _2 = PointBorder;
  // cbuffer _3 = HDRMapping;
  float _4 = TEXCOORD.x;
  float _5 = TEXCOORD.y;
  float4 _6 = tLinearImage.SampleLevel(PointBorder, float2(_4, _5), 0.0f);
  float _7 = _6.x;
  float _8 = _6.y;
  float _9 = _6.z;
  float _10 = _7 * 0.627403974533081f;
  float _11 = mad(0.3292819857597351f, _8, _10);
  float _12 = mad(0.04331360012292862f, _9, _11);
  float _13 = _7 * 0.06909699738025665f;
  float _14 = mad(0.9195399880409241f, _8, _13);
  float _15 = mad(0.011361200362443924f, _9, _14);
  float _16 = _7 * 0.01639159955084324f;
  float _17 = mad(0.08801320195198059f, _8, _16);
  float _18 = mad(0.8955950140953064f, _9, _17);
  float _20 = HDRMapping_004y;
  float _21 = log2(_12);
  float _22 = log2(_15);
  float _23 = log2(_18);
  float _24 = _21 * _20;
  float _25 = _22 * _20;
  float _26 = _23 * _20;
  float _27 = exp2(_24);
  float _28 = exp2(_25);
  float _29 = exp2(_26);
  float _31 = HDRMapping_000x;
  float _32 = 10000.0f / _31;
  float _33 = _27 / _32;
  float _34 = _28 / _32;
  float _35 = _29 / _32;
  float _36 = saturate(_33);
  float _37 = saturate(_34);
  float _38 = saturate(_35);
  float _39 = log2(_36);
  float _40 = log2(_37);
  float _41 = log2(_38);
  float _42 = _39 * 0.1593017578125f;
  float _43 = _40 * 0.1593017578125f;
  float _44 = _41 * 0.1593017578125f;
  float _45 = exp2(_42);
  float _46 = exp2(_43);
  float _47 = exp2(_44);
  float _48 = _45 * 18.8515625f;
  float _49 = _46 * 18.8515625f;
  float _50 = _47 * 18.8515625f;
  float _51 = _48 + 0.8359375f;
  float _52 = _49 + 0.8359375f;
  float _53 = _50 + 0.8359375f;
  float _54 = _45 * 18.6875f;
  float _55 = _46 * 18.6875f;
  float _56 = _47 * 18.6875f;
  float _57 = _54 + 1.0f;
  float _58 = _55 + 1.0f;
  float _59 = _56 + 1.0f;
  float _60 = _51 / _57;
  float _61 = _52 / _58;
  float _62 = _53 / _59;
  float _63 = log2(_60);
  float _64 = log2(_61);
  float _65 = log2(_62);
  float _66 = _63 * 78.84375f;
  float _67 = _64 * 78.84375f;
  float _68 = _65 * 78.84375f;
  float _69 = exp2(_66);
  float _70 = exp2(_67);
  float _71 = exp2(_68);
  float _72 = saturate(_69);
  float _73 = saturate(_70);
  float _74 = saturate(_71);
  uint _76 = HDRMapping_004x;
  int _77 = _76 & 1;
  bool _78 = (_77 == 0);
  float _106 = _72;
  float _107 = _73;
  float _108 = _74;
  float _171;
  float _172;
  float _173;
  float _201;
  float _202;
  float _203;
  int _204;
  float _289;
  float _290;
  float _291;
  if (!_78) {
    float _80 = max(_7, _8);
    float _81 = max(_80, _9);
    float _82 = _81 * 9.999999747378752e-05f;
    float _83 = _82 * _31;
    float _84 = saturate(_83);
    float _85 = _84 * 10000.0f;
    float _87 = HDRMapping_003x;
    bool _88 = (_4 >= _87);
    float _89 = HDRMapping_003z;
    bool _90 = (_4 <= _89);
    bool _91 = _88 && _90;
    float _92 = HDRMapping_003y;
    bool _93 = (_5 >= _92);
    float _94 = HDRMapping_003w;
    bool _95 = (_5 <= _94);
    bool _96 = _93 && _95;
    bool _97 = _91 && _96;
    do {
      if (_97) {
        float _99 = HDRMapping_000z;
        bool _100 = !(_85 >= _99);
        _106 = 0.5f;
        _107 = 0.0f;
        _108 = 0.0f;
        do {
          if (_100) {
            float _102 = HDRMapping_000w;
            bool _103 = !(_85 <= _102);
            _106 = 0.0f;
            _107 = 0.0f;
            _108 = 0.5f;
            if (_103) {
              break;
            }
          }
          break;
        } while (false);
      }
      _106 = _72;
      _107 = _73;
      _108 = _74;
    } while (false);
  }
  int _109 = _76 & 2;
  bool _110 = (_109 == 0);
  _171 = _106;
  _172 = _107;
  _173 = _108;
  if (!_110) {
    float _112 = HDRMapping_000z;
    float _113 = _112 * 9.999999747378752e-05f;
    float _114 = saturate(_113);
    float _115 = log2(_114);
    float _116 = _115 * 0.1593017578125f;
    float _117 = exp2(_116);
    float _118 = _117 * 18.8515625f;
    float _119 = _118 + 0.8359375f;
    float _120 = _117 * 18.6875f;
    float _121 = _120 + 1.0f;
    float _122 = _119 / _121;
    float _123 = log2(_122);
    float _124 = _123 * 78.84375f;
    float _125 = exp2(_124);
    float _126 = saturate(_125);
    float _127 = HDRMapping_000w;
    float _128 = _127 * 9.999999747378752e-05f;
    float _129 = saturate(_128);
    float _130 = log2(_129);
    float _131 = _130 * 0.1593017578125f;
    float _132 = exp2(_131);
    float _133 = _132 * 18.8515625f;
    float _134 = _133 + 0.8359375f;
    float _135 = _132 * 18.6875f;
    float _136 = _135 + 1.0f;
    float _137 = _134 / _136;
    float _138 = log2(_137);
    float _139 = _138 * 78.84375f;
    float _140 = exp2(_139);
    float _141 = saturate(_140);
    float _142 = _126 - _141;
    float _143 = _106 / _126;
    float _144 = _107 / _126;
    float _145 = _108 / _126;
    float _146 = saturate(_143);
    float _147 = saturate(_144);
    float _148 = saturate(_145);
    float _149 = _146 * _126;
    float _150 = _147 * _126;
    float _151 = _148 * _126;
    float _152 = _146 + _146;
    float _153 = 2.0f - _152;
    float _154 = _153 * _142;
    float _155 = _154 + _149;
    float _156 = _155 * _146;
    float _157 = _147 + _147;
    float _158 = 2.0f - _157;
    float _159 = _158 * _142;
    float _160 = _159 + _150;
    float _161 = _160 * _147;
    float _162 = _148 + _148;
    float _163 = 2.0f - _162;
    float _164 = _163 * _142;
    float _165 = _164 + _151;
    float _166 = _165 * _148;
    float _167 = min(_156, _106);
    float _168 = min(_161, _107);
    float _169 = min(_166, _108);
    _171 = _167;
    _172 = _168;
    _173 = _169;
  }
  int _174 = _76 & 4;
  bool _175 = (_174 == 0);
  _289 = _171;
  _290 = _172;
  _291 = _173;
  if (!_175) {
    float _178 = HDRMapping_002x;
    bool _179 = (_4 >= _178);
    float _180 = HDRMapping_002z;
    bool _181 = (_4 <= _180);
    bool _182 = _179 && _181;
    float _183 = HDRMapping_002y;
    bool _184 = (_5 >= _183);
    float _185 = HDRMapping_002w;
    bool _186 = (_5 <= _185);
    bool _187 = _184 && _186;
    bool _188 = _182 && _187;
    _201 = _171;
    _202 = _172;
    _203 = _173;
    _204 = 0.0f;
    do {
      if (_188) {
        float _190 = HDRMapping_000y;
        float _191 = 1.0f - _171;
        float _192 = 1.0f - _172;
        float _193 = 1.0f - _173;
        float _194 = _190 * _191;
        float _195 = _190 * _192;
        float _196 = _190 * _193;
        float _197 = _194 + _171;
        float _198 = _195 + _172;
        float _199 = _196 + _173;
        _201 = _197;
        _202 = _198;
        _203 = _199;
        _204 = 1.0f;
      }
      float _206 = HDRMapping_001x;
      bool _207 = (_4 >= _206);
      float _208 = HDRMapping_001z;
      bool _209 = (_4 <= _208);
      bool _210 = _207 && _209;
      float _211 = HDRMapping_001y;
      bool _212 = (_5 >= _211);
      float _213 = HDRMapping_001w;
      bool _214 = (_5 <= _213);
      bool _215 = _212 && _214;
      bool _216 = _210 && _215;
      _289 = _201;
      _290 = _202;
      _291 = _203;
      if (_216) {
        float _218 = HDRMapping_000y;
        float _219 = HDRMapping_000z;
        float _220 = _219 / _31;
        float _221 = _220 * 0.627403974533081f;
        float _222 = mad(0.3292819857597351f, _220, _221);
        float _223 = mad(0.04331360012292862f, _220, _222);
        float _224 = _220 * 0.06909699738025665f;
        float _225 = mad(0.9195399880409241f, _220, _224);
        float _226 = mad(0.011361200362443924f, _220, _225);
        float _227 = _220 * 0.01639159955084324f;
        float _228 = mad(0.08801320195198059f, _220, _227);
        float _229 = mad(0.8955950140953064f, _220, _228);
        float _230 = _223 / _32;
        float _231 = _226 / _32;
        float _232 = _229 / _32;
        float _233 = saturate(_230);
        float _234 = saturate(_231);
        float _235 = saturate(_232);
        float _236 = log2(_233);
        float _237 = log2(_234);
        float _238 = log2(_235);
        float _239 = _236 * 0.1593017578125f;
        float _240 = _237 * 0.1593017578125f;
        float _241 = _238 * 0.1593017578125f;
        float _242 = exp2(_239);
        float _243 = exp2(_240);
        float _244 = exp2(_241);
        float _245 = _242 * 18.8515625f;
        float _246 = _243 * 18.8515625f;
        float _247 = _244 * 18.8515625f;
        float _248 = _245 + 0.8359375f;
        float _249 = _246 + 0.8359375f;
        float _250 = _247 + 0.8359375f;
        float _251 = _242 * 18.6875f;
        float _252 = _243 * 18.6875f;
        float _253 = _244 * 18.6875f;
        float _254 = _251 + 1.0f;
        float _255 = _252 + 1.0f;
        float _256 = _253 + 1.0f;
        float _257 = _248 / _254;
        float _258 = _249 / _255;
        float _259 = _250 / _256;
        float _260 = log2(_257);
        float _261 = log2(_258);
        float _262 = log2(_259);
        float _263 = _260 * 78.84375f;
        float _264 = _261 * 78.84375f;
        float _265 = _262 * 78.84375f;
        float _266 = exp2(_263);
        float _267 = exp2(_264);
        float _268 = exp2(_265);
        float _269 = saturate(_266);
        float _270 = saturate(_267);
        float _271 = saturate(_268);
        float _272 = _269 - _201;
        float _273 = _270 - _202;
        float _274 = _271 - _203;
        float _275 = _272 * _218;
        float _276 = _273 * _218;
        float _277 = _274 * _218;
        float _278 = _275 + _201;
        float _279 = _276 + _202;
        float _280 = _277 + _203;
        bool _281 = (_204 != 0);
        float _282 = min(_201, _278);
        float _283 = min(_202, _279);
        float _284 = min(_203, _280);
        float _285 = _281 ? _282 : _278;
        float _286 = _281 ? _283 : _279;
        float _287 = _281 ? _284 : _280;
        _289 = _285;
        _290 = _286;
        _291 = _287;
      }
    } while (false);
  }
  SV_Target.x = _289;
  SV_Target.y = _290;
  SV_Target.z = _291;
  SV_Target.w = 1.0f;
  return SV_Target;
}