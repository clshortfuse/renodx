#include "../common.hlsli"

struct _425 {
  uint2 _m0;
  uint _m1;
};

cbuffer CB0_buf : register(b0, space8) {
  float2 CB0_m0 : packoffset(c0);
  float2 CB0_m1 : packoffset(c0.z);
  float2 CB0_m2 : packoffset(c1);
  float2 CB0_m3 : packoffset(c1.z);
  float4 CB0_m4 : packoffset(c2);
};

SamplerState S0 : register(s0, space8);
Texture2D<float4> T0 : register(t0, space8);
Texture2D<float4> T1 : register(t1, space8);

static float4 SV_POSITION;
static float2 TEXCOORD;
static float4 SV_TARGET;

struct SPIRV_Cross_Input {
  float4 SV_POSITION : SV_POSITION;
  float2 TEXCOORD : TEXCOORD;
};

struct SPIRV_Cross_Output {
  float4 SV_TARGET : SV_Target0;
};

uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param) {
  uint2 ret;
  Tex.GetDimensions(Level, ret.x, ret.y, Param);
  return ret;
}

int cvt_f32_i32(float v) {
  return isnan(v) ? 0 : ((v < (-2147483648.0f)) ? int(0x80000000) : ((v > 2147483520.0f) ? 2147483647 : int(v)));
}

float dp3_f32(float3 a, float3 b) {
  precise float _82 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _82));
}

void frag_main() {
  int _110 = cvt_f32_i32(TEXCOORD.x);
  int _111 = cvt_f32_i32(TEXCOORD.y);
  int _118 = cvt_f32_i32(CB0_m0.x);
  int _119 = cvt_f32_i32(CB0_m0.y);
  if (CB0_m1.x == 1.0f) {
    int _131 = abs(_110);
    int _132 = abs(_111);
    int _133 = _131 & 1;
    int _134 = _132 & 1;
    bool _137 = uint(_110 & int(0x80000000)) != 0u;
    bool _138 = uint(_111 & int(0x80000000)) != 0u;
    if (((_138 && ((-_134) == _119)) || ((_134 == _119) && (!_138))) && (((_118 == (-_133)) && _137) || ((_118 == _133) && (!_137)))) {
      uint _159 = uint(_131) >> 1u;
      uint _160 = uint(_132) >> 1u;
      float4 _177 = T0.Load(int3(uint2((uint((_110 ^ 2) & int(0x80000000)) != 0u) ? uint(-int(_159)) : _159, (uint((_111 ^ 2) & int(0x80000000)) != 0u) ? uint(-int(_160)) : _160), 0u));
      float _178 = _177.x;
      float _179 = _177.y;
      float _180 = _177.z;
      uint _185 = uint(cvt_f32_i32(CB0_m3.y));
      float _272;
      float _273;
      float _274;
      if (_185 == 1u) {
        float _213 = 1.0f / CB0_m2.x;
        _272 = exp2(_213 * log2((_180 < 0.040449999272823333740234375f) ? (_180 * 0.077399380505084991455078125f) : exp2(log2(mad(_180, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
        _273 = exp2(_213 * log2((_179 < 0.040449999272823333740234375f) ? (_179 * 0.077399380505084991455078125f) : exp2(log2(mad(_179, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
        _274 = exp2(log2((_178 < 0.040449999272823333740234375f) ? (_178 * 0.077399380505084991455078125f) : exp2(log2(mad(_178, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _213);
      } else {
        float _269;
        float _270;
        float _271;
        if (_185 == 2u) {
#if 1
          DecodePQ(float3(_178, _179, _180), CB0_m2.x, CB0_m2.y, _269, _270, _271);
#else
          float _232 = exp2(log2(_178) * 0.0126833133399486541748046875f);
          float _233 = exp2(log2(_179) * 0.0126833133399486541748046875f);
          float _234 = exp2(log2(_180) * 0.0126833133399486541748046875f);
          float _251 = 1.0f / CB0_m2.x;
          float _252 = 1.0f / CB0_m2.y;
          float3 _265 = float3(exp2(_251 * log2(max((_232 - 0.8359375f) / mad(_232, -18.6875f, 18.8515625f), 0.0f))) * _252, exp2(_251 * log2(max((_233 - 0.8359375f) / mad(_233, -18.6875f, 18.8515625f), 0.0f))) * _252, exp2(_251 * log2(max((_234 - 0.8359375f) / mad(_234, -18.6875f, 18.8515625f), 0.0f))) * _252);
          _269 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _265);
          _270 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _265);
          _271 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _265);
#endif
        } else {
          _269 = _180;
          _270 = _179;
          _271 = _178;
        }
        _272 = _269;
        _273 = _270;
        _274 = _271;
      }
      SV_TARGET.x = (_274 * CB0_m1.y) * 4.0f;
      SV_TARGET.y = (_273 * CB0_m1.y) * 4.0f;
      SV_TARGET.z = (_272 * CB0_m1.y) * 4.0f;
      SV_TARGET.w = (_177.w * CB0_m1.y) * 4.0f;
    } else {
      SV_TARGET.x = 0.0f;
      SV_TARGET.y = 0.0f;
      SV_TARGET.z = 0.0f;
      SV_TARGET.w = 1.0f;
    }
  } else {
    if (CB0_m1.x >= 2.0f) {
      float4 _302 = T0.Load(int3(uint2(uint(_110), uint(_111)), 0u));
      float _303 = _302.x;
      float _304 = _302.y;
      float _305 = _302.z;
      uint _310 = uint(cvt_f32_i32(CB0_m3.y));
      float _397;
      float _398;
      float _399;
      if (_310 == 1u) {
        float _338 = 1.0f / CB0_m2.x;
        _397 = exp2(_338 * log2((_305 < 0.040449999272823333740234375f) ? (_305 * 0.077399380505084991455078125f) : exp2(log2(mad(_305, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
        _398 = exp2(_338 * log2((_304 < 0.040449999272823333740234375f) ? (_304 * 0.077399380505084991455078125f) : exp2(log2(mad(_304, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
        _399 = exp2(log2((_303 < 0.040449999272823333740234375f) ? (_303 * 0.077399380505084991455078125f) : exp2(log2(mad(_303, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _338);
      } else {
        float _394;
        float _395;
        float _396;
        if (_310 == 2u) {
#if 1
          DecodePQ(float3(_303, _304, _305), CB0_m2.x, CB0_m2.y, _394, _395, _396);
#else
          float _357 = exp2(log2(_303) * 0.0126833133399486541748046875f);
          float _358 = exp2(log2(_304) * 0.0126833133399486541748046875f);
          float _359 = exp2(log2(_305) * 0.0126833133399486541748046875f);
          float _376 = 1.0f / CB0_m2.x;
          float _377 = 1.0f / CB0_m2.y;
          float3 _390 = float3(exp2(_376 * log2(max((_357 - 0.8359375f) / mad(_357, -18.6875f, 18.8515625f), 0.0f))) * _377, exp2(_376 * log2(max((_358 - 0.8359375f) / mad(_358, -18.6875f, 18.8515625f), 0.0f))) * _377, exp2(_376 * log2(max((_359 - 0.8359375f) / mad(_359, -18.6875f, 18.8515625f), 0.0f))) * _377);
          _394 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _390);
          _395 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _390);
          _396 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _390);
#endif
        } else {
          _394 = _305;
          _395 = _304;
          _396 = _303;
        }
        _397 = _394;
        _398 = _395;
        _399 = _396;
      }
      uint _422;
      spvTextureSize(T1, 0u, _422);
      bool _423 = _422 > 0u;
      uint _424_dummy_parameter;
      _425 _426 = { spvTextureSize(T1, 0u, _424_dummy_parameter), 1u };
      float _443 = T1.Sample(S0, float2(trunc(TEXCOORD.x) / float(_423 ? _426._m0.x : 0u), trunc(TEXCOORD.y) / float(_423 ? _426._m0.y : 0u))).x - 0.5f;
      SV_TARGET.x = mad(_443, CB0_m4.x, (_399 < 0.00310000008903443813323974609375f) ? (_399 * 12.9200000762939453125f) : mad(exp2(log2(_399) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f));
      SV_TARGET.y = mad(_443, CB0_m4.x, (_398 < 0.00310000008903443813323974609375f) ? (_398 * 12.9200000762939453125f) : mad(exp2(log2(_398) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f));
      SV_TARGET.z = mad(_443, CB0_m4.x, (_397 < 0.00310000008903443813323974609375f) ? (_397 * 12.9200000762939453125f) : mad(exp2(log2(_397) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f));
      if (CB0_m1.x == 3.0f) {
        SV_TARGET.w = 1.0f;
      } else {
        SV_TARGET.w = _302.w;
      }
    } else {
      float4 _462 = T0.Load(int3(uint2(uint(_110), uint(_111)), 0u));
      float _463 = _462.x;
      float _464 = _462.y;
      float _465 = _462.z;
      uint _470 = uint(cvt_f32_i32(CB0_m3.y));
      float _557;
      float _558;
      float _559;
      if (_470 == 1u) {
        float _498 = 1.0f / CB0_m2.x;
        _557 = exp2(_498 * log2((_465 < 0.040449999272823333740234375f) ? (_465 * 0.077399380505084991455078125f) : exp2(log2(mad(_465, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
        _558 = exp2(log2((_464 < 0.040449999272823333740234375f) ? (_464 * 0.077399380505084991455078125f) : exp2(log2(mad(_464, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _498);
        _559 = exp2(log2((_463 < 0.040449999272823333740234375f) ? (_463 * 0.077399380505084991455078125f) : exp2(log2(mad(_463, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _498);
      } else {
        float _554;
        float _555;
        float _556;
        if (_470 == 2u) {
#if 1
          DecodePQ(float3(_463, _464, _465), CB0_m2.x, CB0_m2.y, _554, _555, _556);
#else
          float _517 = exp2(log2(_463) * 0.0126833133399486541748046875f);
          float _518 = exp2(log2(_464) * 0.0126833133399486541748046875f);
          float _519 = exp2(log2(_465) * 0.0126833133399486541748046875f);
          float _536 = 1.0f / CB0_m2.x;
          float _537 = 1.0f / CB0_m2.y;
          float3 _550 = float3(_537 * exp2(_536 * log2(max((_517 - 0.8359375f) / mad(_517, -18.6875f, 18.8515625f), 0.0f))), exp2(log2(max((_518 - 0.8359375f) / mad(_518, -18.6875f, 18.8515625f), 0.0f)) * _536) * _537, exp2(log2(max((_519 - 0.8359375f) / mad(_519, -18.6875f, 18.8515625f), 0.0f)) * _536) * _537);
          _554 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _550);
          _555 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _550);
          _556 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _550);
#endif
        } else {
          _554 = _465;
          _555 = _464;
          _556 = _463;
        }
        _557 = _554;
        _558 = _555;
        _559 = _556;
      }
      SV_TARGET.x = CB0_m1.y * _559;
      SV_TARGET.y = CB0_m1.y * _558;
      SV_TARGET.z = CB0_m1.y * _557;
      SV_TARGET.w = _462.w * CB0_m1.y;
    }
  }
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_TARGET = SV_TARGET;
  return stage_output;
}
