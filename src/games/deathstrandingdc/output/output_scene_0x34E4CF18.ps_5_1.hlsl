#include "../common.hlsli"

cbuffer CB0_buf : register(b0, space8) {
  float2 CB0_m0 : packoffset(c0);
  float2 CB0_m1 : packoffset(c0.z);
  float4 CB0_m2 : packoffset(c1);
};

SamplerState S0 : register(s0, space8);
Texture2D<float4> T0 : register(t0, space8);
Texture2D<float4> T1 : register(t1, space8);

static float4 SV_POSITION;
static float2 TEXCOORD;
static float4 SV_TARGET;

struct SPIRV_Cross_Input {
  float4 SV_POSITION : SV_POSITION0;
  float2 TEXCOORD : TEXCOORD;
};

struct SPIRV_Cross_Output {
  float4 SV_TARGET : SV_Target0;
};

int cvt_f32_i32(float v) {
  return isnan(v) ? 0 : ((v < (-2147483648.0f)) ? int(0x80000000) : ((v > 2147483520.0f) ? 2147483647 : int(v)));
}

float dp3_f32(float3 a, float3 b) {
  precise float _92 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _92));
}

void frag_main() {
  float2 _122 = float2(TEXCOORD.x, TEXCOORD.y);
  float4 _125 = T0.Sample(S0, _122);
  float4 _132 = T1.Sample(S0, _122);

  SV_TARGET.w = _132.w;

  float _133 = _132.x;
  float _134 = _132.y;
  float _135 = _132.z;
  float _137 = sqrt(_125.x);
  float _138 = sqrt(_125.y);
  float _139 = sqrt(_125.z);
  uint _159 = uint(cvt_f32_i32(CB0_m1.y));
  bool _160 = _159 == 1u;
  bool _161 = _159 == 2u;
  float _247;
  float _248;
  float _249;
  if (_160) {
    float _188 = 1.0f / CB0_m0.x;
    _247 = exp2(_188 * log2((_135 < 0.040449999272823333740234375f) ? (_135 * 0.077399380505084991455078125f) : exp2(log2(mad(_135, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
    _248 = exp2(_188 * log2((_134 < 0.040449999272823333740234375f) ? (_134 * 0.077399380505084991455078125f) : exp2(log2(mad(_134, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
    _249 = exp2(log2((_133 < 0.040449999272823333740234375f) ? (_133 * 0.077399380505084991455078125f) : exp2(log2(mad(_133, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _188);
  } else {
    float _244;
    float _245;
    float _246;
    if (_161) {
      float _206 = exp2(log2(_133) * 0.0126833133399486541748046875f);
      float _207 = exp2(log2(_134) * 0.0126833133399486541748046875f);
      float _208 = exp2(log2(_135) * 0.0126833133399486541748046875f);
      float _226 = 1.0f / CB0_m0.x;
      float _227 = 1.0f / CB0_m0.y;
      float3 _240 = float3(exp2(_226 * log2(max((_206 - 0.8359375f) / mad(_206, -18.6875f, 18.8515625f), 0.0f))) * _227, exp2(_226 * log2(max((_207 - 0.8359375f) / mad(_207, -18.6875f, 18.8515625f), 0.0f))) * _227, exp2(_226 * log2(max((_208 - 0.8359375f) / mad(_208, -18.6875f, 18.8515625f), 0.0f))) * _227);
      _244 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _240);
      _245 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _240);
      _246 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _240);
    } else {
      _244 = _135;
      _245 = _134;
      _246 = _133;
    }
    _247 = _244;
    _248 = _245;
    _249 = _246;
  }
  float _250 = 1.0f - _125.w;
  float _254 = (_137 > 0.0f) ? exp2(log2(_137) * CB0_m2.x) : 0.0f;
  float _255 = (_138 > 0.0f) ? exp2(log2(_138) * CB0_m2.x) : 0.0f;
  float _256 = (_139 > 0.0f) ? exp2(log2(_139) * CB0_m2.x) : 0.0f;
  float _260 = (_250 * _249) + (_254 * _254);
  float _261 = (_255 * _255) + (_250 * _248);
  float _262 = (_256 * _256) + (_250 * _247);
  float _317;
  float _318;
  float _319;
  if (_161 && (CB0_m1.x > 0.0f)) {
    _317 = ((_262 < 3.0f) && (_262 >= 0.0f)) ? (exp2(log2((_262 < 0.009300000034272670745849609375f) ? (_262 * 4.306666851043701171875f) : mad(exp2(log2(_262 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _262;
    _318 = ((_261 < 3.0f) && (_261 >= 0.0f)) ? (exp2(log2((_261 < 0.009300000034272670745849609375f) ? (_261 * 4.306666851043701171875f) : mad(exp2(log2(_261 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _261;
    _319 = ((_260 >= 0.0f) && (_260 < 3.0f)) ? (exp2(log2((_260 < 0.009300000034272670745849609375f) ? (_260 * 4.306666851043701171875f) : mad(exp2(log2(_260 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _260;
  } else {
    _317 = _262;
    _318 = _261;
    _319 = _260;
  }
  float _395;
  float _396;
  float _397;
  if (_160) {
    float _328 = log2(_319) * CB0_m0.x;
    float _329 = log2(_318) * CB0_m0.x;
    float _330 = log2(_317) * CB0_m0.x;
    float _331 = exp2(_328);
    float _332 = exp2(_329);
    float _333 = exp2(_330);
    _395 = (_333 < 0.00310000008903443813323974609375f) ? (_333 * 12.9200000762939453125f) : mad(exp2(_330 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    _396 = (_332 < 0.00310000008903443813323974609375f) ? (_332 * 12.9200000762939453125f) : mad(exp2(_329 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    _397 = (_331 < 0.00310000008903443813323974609375f) ? (_331 * 12.9200000762939453125f) : mad(exp2(_328 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
  } else {
    float _392;
    float _393;
    float _394;
    if (_161) {
      float3 _354 = float3(_319, _318, _317);
#if 1
      if (GenerateOutput(_354, SV_TARGET, true)) {
        return;
      }
#endif
      float _371 = exp2(CB0_m0.x * log2(dp3_f32(float3(0.627403914928436279296875f, 0.3292830288410186767578125f, 0.0433130674064159393310546875f), _354) * CB0_m0.y));
      float _372 = exp2(log2(dp3_f32(float3(0.069097287952899932861328125f, 0.9195404052734375f, 0.01136231608688831329345703125f), _354) * CB0_m0.y) * CB0_m0.x);
      float _373 = exp2(log2(dp3_f32(float3(0.01639143936336040496826171875f, 0.08801330626010894775390625f, 0.895595252513885498046875f), _354) * CB0_m0.y) * CB0_m0.x);
      _392 = exp2(log2(mad(_373, 18.8515625f, 0.8359375f) / mad(_373, 18.6875f, 1.0f)) * 78.84375f);
      _393 = exp2(log2(mad(_372, 18.8515625f, 0.8359375f) / mad(_372, 18.6875f, 1.0f)) * 78.84375f);
      _394 = exp2(log2(mad(_371, 18.8515625f, 0.8359375f) / mad(_371, 18.6875f, 1.0f)) * 78.84375f);
    } else {
      _392 = _317;
      _393 = _318;
      _394 = _319;
    }
    _395 = _392;
    _396 = _393;
    _397 = _394;
  }
  SV_TARGET.x = _397;
  SV_TARGET.y = _396;
  SV_TARGET.z = _395;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_TARGET = SV_TARGET;
  return stage_output;
}
