#include "../common.hlsli"

cbuffer CB0_buf : register(b0, space8) {
  float4 CB0_m0 : packoffset(c0);
  uint3 CB0_m1 : packoffset(c1);
  float CB0_m2 : packoffset(c1.w);
  float2 CB0_m3 : packoffset(c2);
  float2 CB0_m4 : packoffset(c2.z);
  float4 CB0_m5 : packoffset(c3);
};

SamplerState S0 : register(s0, space8);
SamplerState S1 : register(s1, space8);
Texture2D<float4> T0 : register(t0, space8);
Texture2D<float4> T1 : register(t1, space8);
Texture2D<float4> T2 : register(t2, space8);

static float4 SV_POSITION;
static float2 TEXCOORD;
static float4 SV_TARGET;

struct SPIRV_Cross_Input {
  float4 SV_POSITION : SV_POSITION;
  float2 TEXCOORD : TEXCOORD;
};

struct SPIRV_Cross_Output {
  float4 SV_TARGET : SV_Target0;
};

int cvt_f32_i32(float v) {
  return isnan(v) ? 0 : ((v < (-2147483648.0f)) ? int(0x80000000) : ((v > 2147483520.0f) ? 2147483647 : int(v)));
}

float dp3_f32(float3 a, float3 b) {
  precise float _120 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _120));
}

void frag_main() {
  float2 _150 = float2(TEXCOORD.x, TEXCOORD.y);
  float4 _153 = T0.Sample(S0, _150);
  float4 _159 = T1.Sample(S0, _150);
  float _160 = _159.x;
  float4 _162 = T1.GatherRed(S0, _150);
  float _163 = _162.x;
  float _164 = _162.y;
  float _165 = _162.z;
  float4 _167 = T1.GatherRed(S0, _150, int2(-1, -1));
  float _168 = _167.z;
  float _169 = _167.x;
  float _170 = _167.w;
  float _177 = max(max(_165, max(_160, _163)), max(_168, _169));
  float _184 = _177 - min(min(_165, min(_160, _163)), min(_168, _169));
  bool _188 = _184 < max(_177 * CB0_m0.y, CB0_m0.z);
  float _192;
  if (_188) {
    _192 = _160;
  } else {
    _192 = 0.0f;
  }
  float _464;
  float _465;
  float _466;
  float _467;
  if (!_188) {
    float4 _196 = T1.Sample(S0, _150, int2(1, -1));
    float _197 = _196.x;
    float4 _199 = T1.Sample(S0, _150, int2(-1, 1));
    float _200 = _199.x;
    float _201 = _163 + _168;
    float _202 = _165 + _169;
    float _207 = _164 + _197;
    float _211 = _170 + _200;
    bool _226 = (mad(abs(mad(_160, -2.0f, _201)), 2.0f, abs(mad(_165, -2.0f, _207))) + abs(mad(_169, -2.0f, _211))) >= (mad(abs(mad(_160, -2.0f, _202)), 2.0f, abs(mad(_168, -2.0f, _170 + _197))) + abs(mad(_163, -2.0f, _164 + _200)));
    bool _228 = !_226;
    float _231;
    float _232;
    if (_228) {
      _231 = _165;
      _232 = _169;
    } else {
      _231 = _163;
      _232 = _168;
    }
    float _242;
    if (_226) {
      _242 = CB0_m2;
    } else {
      _242 = asfloat(CB0_m1.z);
    }
    float _247 = abs(_232 - _160);
    float _248 = abs(_231 - _160);
    bool _249 = _247 >= _248;
    float _255;
    if (_249) {
      _255 = -_242;
    } else {
      _255 = _242;
    }
    float _258 = clamp((1.0f / _184) * abs(mad(mad(_202 + _201, 2.0f, _207 + _211), 0.083333335816860198974609375f, -_160)), 0.0f, 1.0f);
    float _263 = _226 ? 0.0f : CB0_m2;
    float _268;
    if (_228) {
      _268 = mad(_255, 0.5f, TEXCOORD.x);
    } else {
      _268 = TEXCOORD.x;
    }
    float _273;
    if (_226) {
      _273 = mad(_255, 0.5f, TEXCOORD.y);
    } else {
      _273 = TEXCOORD.y;
    }
    float _275 = _226 ? asfloat(CB0_m1.z) : 0.0f;
    float _276 = _268 - _275;
    float _277 = _273 - _263;
    float _278 = _275 + _268;
    float _279 = _263 + _273;
    float4 _283 = T1.Sample(S0, float2(_276, _277));
    float4 _288 = T1.Sample(S0, float2(_278, _279));
    float _295;
    if (!_249) {
      _295 = _160 + _231;
    } else {
      _295 = _160 + _232;
    }
    float _296 = max(_247, _248) * 0.25f;
    float _298 = mad(_258, -2.0f, 3.0f) * (_258 * _258);
    bool _299 = mad(_295, -0.5f, _160) < 0.0f;
    float _300 = mad(_295, -0.5f, _283.x);
    float _301 = mad(_295, -0.5f, _288.x);
    bool _304 = abs(_300) < _296;
    bool _305 = abs(_301) < _296;
    float _310;
    float _311;
    if (_304) {
      _310 = mad(_263, -1.5f, _277);
      _311 = mad(_275, -1.5f, _276);
    } else {
      _310 = _277;
      _311 = _276;
    }
    float _317;
    float _318;
    if (_305) {
      _317 = mad(_263, 1.5f, _279);
      _318 = mad(_275, 1.5f, _278);
    } else {
      _317 = _279;
      _318 = _278;
    }
    float _406;
    float _407;
    float _408;
    float _409;
    float _410;
    float _411;
    if (_305 || _304) {
      float _327;
      if (_304) {
        _327 = T1.SampleLevel(S0, float2(_311, _310), 0.0f).x;
      } else {
        _327 = _300;
      }
      float _334;
      if (_305) {
        _334 = T1.SampleLevel(S0, float2(_318, _317), 0.0f).x;
      } else {
        _334 = _301;
      }
      float _338;
      if (_304) {
        _338 = mad(_295, -0.5f, _327);
      } else {
        _338 = _327;
      }
      float _342;
      if (_305) {
        _342 = mad(_295, -0.5f, _334);
      } else {
        _342 = _334;
      }
      bool _345 = _296 > abs(_338);
      bool _346 = abs(_342) < _296;
      float _351;
      float _352;
      if (_345) {
        _351 = mad(_263, -3.0f, _310);
        _352 = mad(_275, -3.0f, _311);
      } else {
        _351 = _310;
        _352 = _311;
      }
      float _358;
      float _359;
      if (_346) {
        _358 = mad(_263, 3.0f, _317);
        _359 = mad(_275, 3.0f, _318);
      } else {
        _358 = _317;
        _359 = _318;
      }
      float _400;
      float _401;
      float _402;
      float _403;
      float _404;
      float _405;
      if (_346 || _345) {
        float _368;
        if (_345) {
          _368 = T1.SampleLevel(S0, float2(_352, _351), 0.0f).x;
        } else {
          _368 = _338;
        }
        float _375;
        if (_346) {
          _375 = T1.SampleLevel(S0, float2(_359, _358), 0.0f).x;
        } else {
          _375 = _342;
        }
        float _379;
        if (_345) {
          _379 = mad(_295, -0.5f, _368);
        } else {
          _379 = _368;
        }
        float _383;
        if (_346) {
          _383 = mad(_295, -0.5f, _375);
        } else {
          _383 = _375;
        }
        float _392;
        float _393;
        if (_296 > abs(_379)) {
          _392 = mad(_275, -12.0f, _352);
          _393 = mad(_263, -12.0f, _351);
        } else {
          _392 = _352;
          _393 = _351;
        }
        float _398;
        float _399;
        if (abs(_383) < _296) {
          _398 = mad(_275, 12.0f, _359);
          _399 = mad(_263, 12.0f, _358);
        } else {
          _398 = _359;
          _399 = _358;
        }
        _400 = _383;
        _401 = _379;
        _402 = _398;
        _403 = _392;
        _404 = _399;
        _405 = _393;
      } else {
        _400 = _342;
        _401 = _338;
        _402 = _359;
        _403 = _352;
        _404 = _358;
        _405 = _351;
      }
      _406 = _400;
      _407 = _401;
      _408 = _402;
      _409 = _403;
      _410 = _404;
      _411 = _405;
    } else {
      _406 = _301;
      _407 = _300;
      _408 = _318;
      _409 = _311;
      _410 = _317;
      _411 = _310;
    }
    float _419;
    float _420;
    if (_228) {
      _419 = _410 - TEXCOORD.y;
      _420 = TEXCOORD.y - _411;
    } else {
      _419 = _408 - TEXCOORD.x;
      _420 = TEXCOORD.x - _409;
    }
    bool _421 = _407 < 0.0f;
    bool _422 = _406 < 0.0f;
    bool _424 = !_299;
    bool _434 = _419 > _420;
    float _447 = max((_298 * _298) * CB0_m0.x, ((((_421 && _424) || (_299 && (!_421))) && _434) || (((_299 && (!_422)) || (_422 && _424)) && (!_434))) ? mad(-(1.0f / (_419 + _420)), min(_419, _420), 0.5f) : 0.0f);
    float _452;
    if (_228) {
      _452 = mad(_447, _255, TEXCOORD.x);
    } else {
      _452 = TEXCOORD.x;
    }
    float _457;
    if (_226) {
      _457 = mad(_447, _255, TEXCOORD.y);
    } else {
      _457 = TEXCOORD.y;
    }
    float4 _460 = T0.Sample(S0, float2(_452, _457));
    _464 = _160;
    _465 = _460.z;
    _466 = _460.y;
    _467 = _460.x;
  } else {
    _464 = _192;
    _465 = _153.z;
    _466 = _153.y;
    _467 = _153.x;
  }
  if (CB0_m5.w < 1.0f) {
    uint _477 = uint(cvt_f32_i32(CB0_m4.y));
    float _565;
    float _566;
    float _567;
    if (_477 == 1u) {
      float _505 = 1.0f / CB0_m3.x;
      _565 = exp2(_505 * log2((_465 < 0.040449999272823333740234375f) ? (_465 * 0.077399380505084991455078125f) : exp2(log2(mad(_465, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
      _566 = exp2(log2((_466 < 0.040449999272823333740234375f) ? (_466 * 0.077399380505084991455078125f) : exp2(log2(mad(_466, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _505);
      _567 = exp2(log2((_467 < 0.040449999272823333740234375f) ? (_467 * 0.077399380505084991455078125f) : exp2(log2(mad(_467, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _505);
    } else {
      float _562;
      float _563;
      float _564;
      if (_477 == 2u) {
#if 1
        DecodePQ(float3(_467, _466, _465), CB0_m3.x, CB0_m3.y, _562, _563, _564);
#else
        float _524 = exp2(log2(_467) * 0.0126833133399486541748046875f);
        float _525 = exp2(log2(_466) * 0.0126833133399486541748046875f);
        float _526 = exp2(log2(_465) * 0.0126833133399486541748046875f);
        float _544 = 1.0f / CB0_m3.x;
        float _545 = 1.0f / CB0_m3.y;
        float3 _558 = float3(_545 * exp2(_544 * log2(max((_524 - 0.8359375f) / mad(_524, -18.6875f, 18.8515625f), 0.0f))), _545 * exp2(log2(max((_525 - 0.8359375f) / mad(_525, -18.6875f, 18.8515625f), 0.0f)) * _544), exp2(log2(max((_526 - 0.8359375f) / mad(_526, -18.6875f, 18.8515625f), 0.0f)) * _544) * _545);
        _562 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _558);
        _563 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _558);
        _564 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _558);
#endif
      } else {
        _562 = _465;
        _563 = _466;
        _564 = _467;
      }
      _565 = _562;
      _566 = _563;
      _567 = _564;
    }
    SV_TARGET.x = _567;
    SV_TARGET.y = _566;
    SV_TARGET.z = _565;
    SV_TARGET.w = _464;
  } else {
    float4 _576 = T2.Sample(S1, _150);
    float _581 = sqrt(_576.x);
    float _582 = sqrt(_576.y);
    float _583 = sqrt(_576.z);
    uint _601 = uint(cvt_f32_i32(CB0_m4.y));
    bool _602 = _601 == 1u;
    bool _603 = _601 == 2u;
    float _688;
    float _689;
    float _690;
    if (_602) {
      float _630 = 1.0f / CB0_m3.x;
      _688 = exp2(_630 * log2((_465 < 0.040449999272823333740234375f) ? (_465 * 0.077399380505084991455078125f) : exp2(log2(mad(_465, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
      _689 = exp2(log2((_466 < 0.040449999272823333740234375f) ? (_466 * 0.077399380505084991455078125f) : exp2(log2(mad(_466, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _630);
      _690 = exp2(log2((_467 < 0.040449999272823333740234375f) ? (_467 * 0.077399380505084991455078125f) : exp2(log2(mad(_467, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _630);
    } else {
      float _685;
      float _686;
      float _687;
      if (_603) {
#if 1
        DecodePQ(float3(_467, _466, _465), CB0_m3.x, CB0_m3.y, _685, _686, _687);
#else
        float _648 = exp2(log2(_467) * 0.0126833133399486541748046875f);
        float _649 = exp2(log2(_466) * 0.0126833133399486541748046875f);
        float _650 = exp2(log2(_465) * 0.0126833133399486541748046875f);
        float _667 = 1.0f / CB0_m3.x;
        float _668 = 1.0f / CB0_m3.y;
        float3 _681 = float3(_668 * exp2(_667 * log2(max((_648 - 0.8359375f) / mad(_648, -18.6875f, 18.8515625f), 0.0f))), _668 * exp2(log2(max((_649 - 0.8359375f) / mad(_649, -18.6875f, 18.8515625f), 0.0f)) * _667), _668 * exp2(log2(max((_650 - 0.8359375f) / mad(_650, -18.6875f, 18.8515625f), 0.0f)) * _667));
        _685 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _681);
        _686 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _681);
        _687 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _681);
#endif
      } else {
        _685 = _465;
        _686 = _466;
        _687 = _467;
      }
      _688 = _685;
      _689 = _686;
      _690 = _687;
    }
    float _691 = 1.0f - _576.w;
    float _695 = (_581 > 0.0f) ? exp2(log2(_581) * CB0_m5.x) : 0.0f;
    float _696 = (_582 > 0.0f) ? exp2(log2(_582) * CB0_m5.x) : 0.0f;
    float _697 = (_583 > 0.0f) ? exp2(log2(_583) * CB0_m5.x) : 0.0f;
    float _701 = (_691 * _690) + (_695 * _695);
    float _702 = (_689 * _691) + (_696 * _696);
    float _703 = (_691 * _688) + (_697 * _697);
    float _758;
    float _759;
    float _760;
    if (_603 && (CB0_m4.x > 0.0f)) {
      _758 = ((_703 >= 0.0f) && (_703 < 3.0f)) ? (exp2(log2((_703 < 0.009300000034272670745849609375f) ? (_703 * 4.306666851043701171875f) : mad(exp2(log2(_703 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _703;
      _759 = ((_702 >= 0.0f) && (_702 < 3.0f)) ? (exp2(log2((_702 < 0.009300000034272670745849609375f) ? (_702 * 4.306666851043701171875f) : mad(exp2(log2(_702 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _702;
      _760 = ((_701 >= 0.0f) && (_701 < 3.0f)) ? (exp2(log2((_701 < 0.009300000034272670745849609375f) ? (_701 * 4.306666851043701171875f) : mad(exp2(log2(_701 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _701;
    } else {
      _758 = _703;
      _759 = _702;
      _760 = _701;
    }
    float _836;
    float _837;
    float _838;
    if (_602) {
      float _769 = log2(_760) * CB0_m3.x;
      float _770 = log2(_759) * CB0_m3.x;
      float _771 = log2(_758) * CB0_m3.x;
      float _772 = exp2(_769);
      float _773 = exp2(_770);
      float _774 = exp2(_771);
      _836 = (_774 < 0.00310000008903443813323974609375f) ? (_774 * 12.9200000762939453125f) : mad(exp2(_771 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
      _837 = (_773 < 0.00310000008903443813323974609375f) ? (_773 * 12.9200000762939453125f) : mad(exp2(_770 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
      _838 = (_772 < 0.00310000008903443813323974609375f) ? (_772 * 12.9200000762939453125f) : mad(exp2(_769 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    } else {
      float _833;
      float _834;
      float _835;
      if (_603) {
        float3 _795 = float3(_760, _759, _758);
#if 1

        FinalizeOutput(_795, CB0_m3.x, CB0_m3.y, _835, _834, _833, true);
#else
        float _812 = exp2(CB0_m3.x * log2(CB0_m3.y * dp3_f32(float3(0.627403914928436279296875f, 0.3292830288410186767578125f, 0.0433130674064159393310546875f), _795)));
        float _813 = exp2(log2(CB0_m3.y * dp3_f32(float3(0.069097287952899932861328125f, 0.9195404052734375f, 0.01136231608688831329345703125f), _795)) * CB0_m3.x);
        float _814 = exp2(log2(CB0_m3.y * dp3_f32(float3(0.01639143936336040496826171875f, 0.08801330626010894775390625f, 0.895595252513885498046875f), _795)) * CB0_m3.x);
        _833 = exp2(log2(mad(_814, 18.8515625f, 0.8359375f) / mad(_814, 18.6875f, 1.0f)) * 78.84375f);
        _834 = exp2(log2(mad(_813, 18.8515625f, 0.8359375f) / mad(_813, 18.6875f, 1.0f)) * 78.84375f);
        _835 = exp2(log2(mad(_812, 18.8515625f, 0.8359375f) / mad(_812, 18.6875f, 1.0f)) * 78.84375f);
#endif
      } else {
        _833 = _758;
        _834 = _759;
        _835 = _760;
      }
      _836 = _833;
      _837 = _834;
      _838 = _835;
    }
    SV_TARGET.x = _838;
    SV_TARGET.y = _837;
    SV_TARGET.z = _836;
    SV_TARGET.w = 1.0f;
  }
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_TARGET = SV_TARGET;
  return stage_output;
}
