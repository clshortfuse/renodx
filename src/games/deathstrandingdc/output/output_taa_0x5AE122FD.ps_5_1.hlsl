#include "../common.hlsli"

cbuffer CB0_buf : register(b0, space5) {
  float4 CB0_m0 : packoffset(c0);
  float2 CB0_m1 : packoffset(c1);
  float2 CB0_m2 : packoffset(c1.z);
  float2 CB0_m3 : packoffset(c2);
  float2 CB0_m4 : packoffset(c2.z);
  float4 CB0_m5 : packoffset(c3);
};

cbuffer CB1_buf : register(b0, space8) {
  float2 CB1_m0 : packoffset(c0);
  uint2 CB1_m1 : packoffset(c0.z);
};

SamplerState S0 : register(s0, space5);
SamplerState S1 : register(s1, space5);
Texture2D<float4> T0 : register(t0, space5);
Texture2D<float4> T1 : register(t1, space5);
Texture2D<float4> T2 : register(t2, space5);
Texture2D<float4> T3 : register(t3, space5);
RWTexture2D<float4> U0 : register(u0, space8);

static float4 SV_POSITION;
static float2 TEXCOORD;
static float4 SV_TARGET;

struct SPIRV_Cross_Input {
  float4 SV_POSITION : SV_POSITION;
  float2 TEXCOORD : TEXCOORD;
};

struct SPIRV_Cross_Output {
  float4 SV_TARGET : SV_Target0;
};

float dp2_f32(float2 a, float2 b) {
  precise float _148 = a.x * b.x;
  return mad(a.y, b.y, _148);
}

float dp3_f32(float3 a, float3 b) {
  precise float _133 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _133));
}

int cvt_f32_i32(float v) {
  return isnan(v) ? 0 : ((v < (-2147483648.0f)) ? int(0x80000000) : ((v > 2147483520.0f) ? 2147483647 : int(v)));
}

void frag_main() {
  SV_TARGET.w = 0.0f;

  float2 _162 = float2(TEXCOORD.x, TEXCOORD.y);
  float4 _165 = T2.SampleLevel(S0, _162, 0.0f);
  float _174 = _165.x * CB0_m2.x;
  float _175 = _165.y * CB0_m2.y;
  float _185 = TEXCOORD.x - CB0_m0.x;
  float _186 = TEXCOORD.y - CB0_m0.y;
  float4 _197 = T0.SampleLevel(S1, float2(_185, _186), 0.0f);
  float _198 = _197.x;
  float _199 = _197.y;
  float _200 = _197.z;
  float4 _202 = T0.SampleLevel(S1, _162, 0.0f);  // center pixel

  float _203 = _202.x;
  float _204 = _202.y;
  float _205 = _202.z;
  float _206 = TEXCOORD.x + CB0_m0.x;
  float _207 = TEXCOORD.y + CB0_m0.y;
  float4 _212 = T0.SampleLevel(S1, float2(_206, _207), 0.0f);
  float _213 = _212.x;
  float _214 = _212.y;
  float _215 = _212.z;
  float4 _224 = T0.SampleLevel(S1, float2(_206 + CB0_m0.z, CB0_m0.w + _207), 0.0f);
  float _225 = _224.x;
  float _226 = _224.y;
  float _227 = _224.z;
  float4 _230 = T0.SampleLevel(S1, float2(TEXCOORD.x + CB0_m0.z, TEXCOORD.y + CB0_m0.w), 0.0f);
  float _231 = _230.x;
  float _232 = _230.y;
  float _233 = _230.z;
  float4 _238 = T0.SampleLevel(S1, float2(_185 + CB0_m0.z, CB0_m0.w + _186), 0.0f);
  float _239 = _238.x;
  float _240 = _238.y;
  float _241 = _238.z;
  float2 _256 = float2(_174, _175);
  float _259 = clamp(mad(dp2_f32(_256, _256), 230400.0f, -1.0f), 0.0f, 1.0f);
  float _262 = dp3_f32(float3(_203, _204, _205), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
  float _264 = dp3_f32(float3(_231, _232, _233), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f));
  float _272 = (_262 + _264) * 0.5f;
  float _283 = min(max(_262, _264), max(min(_262, _264), _272 + ((mad(_259, -0.66600000858306884765625f, 0.333000004291534423828125f) * CB0_m1.y) * (_272 + ((dp3_f32(float3(T0.SampleLevel(S1, float2(TEXCOORD.x - CB0_m0.z, TEXCOORD.y - CB0_m0.w), 0.0f).xyz), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f)) + dp3_f32(float3(T0.SampleLevel(S1, float2(mad(CB0_m0.z, 2.0f, TEXCOORD.x), mad(CB0_m0.w, 2.0f, TEXCOORD.y)), 0.0f).xyz), float3(0.2125999927520751953125f, 0.715200006961822509765625f, 0.072200000286102294921875f))) * (-0.5f))))));
  float _287 = max(_272, 9.9999997473787516355514526367188e-05f);
  float _288 = (((_203 + _231) * 0.5f) * _283) / _287;
  float _289 = (((_204 + _232) * 0.5f) * _283) / _287;
  float _290 = (((_205 + _233) * 0.5f) * _283) / _287;
  uint2 _303 = uint2(uint(cvt_f32_i32(mad(TEXCOORD.x, CB1_m0.x, 0.5f))), uint(cvt_f32_i32(mad(TEXCOORD.y, CB1_m0.y, 0.5f))));
  float4 _304 = U0[_303];
  float3 _317 = float3(abs(_304.x - _288) * 50.0f, abs(_304.y - _289) * 100.0f, abs(_304.z - _290) * 100.0f);
  float _322 = min(1.0f - _259, (dp3_f32(_317, _317) > 1.0f) ? 0.0f : 1.0f);
  U0[_303] = float4(_288, _289, _290, _322);
  float4 _329 = T1.SampleLevel(S0, float2(mad(_174, -0.5f, TEXCOORD.x), mad(_175, 0.5f, TEXCOORD.y)), 0.0f);
  float _330 = _329.x;
  float _331 = _329.y;
  float _332 = _329.z;
  float _335 = min(_203, _231);
  float _336 = min(_204, _232);
  float _337 = min(_205, _233);
  float _338 = max(_203, _231);
  float _339 = max(_204, _232);
  float _340 = max(_205, _233);
  float _358 = mad(mad(_259, min(_338, max(_335, _330)) - _330, _330) - _288, CB0_m1.x, _288);
  float _359 = mad(mad(_259, min(max(_331, _336), _339) - _331, _331) - _289, CB0_m1.x, _289);
  float _360 = mad(mad(_259, min(max(_332, _337), _340) - _332, _332) - _290, CB0_m1.x, _290);
  float _394;
  float _395;
  float _396;
  if (min(_322, _329.w) < 0.20000000298023223876953125f) {
    _394 = min(max(min(min(_241, min(_200, min(_215, _227))), _337), _360), max(max(_241, max(_200, max(_215, _227))), _340));
    _395 = min(max(min(min(_240, min(_199, min(_214, _226))), _336), _359), max(max(_240, max(_199, max(_214, _226))), _339));
    _396 = min(max(_338, max(_239, max(_198, max(_213, _225)))), max(_358, min(_335, min(_239, min(_198, min(_213, _225))))));
  } else {
    _394 = _360;
    _395 = _359;
    _396 = _358;
  }

  float _770;
  float _771;
  float _772;
  if (CB0_m5.w < 1.0f) {
    uint _406 = uint(cvt_f32_i32(CB0_m4.y));
    float _493;
    float _494;
    float _495;
    if (_406 == 1u) {
      float _434 = 1.0f / CB0_m3.x;
      _493 = exp2(_434 * log2((_394 < 0.040449999272823333740234375f) ? (_394 * 0.077399380505084991455078125f) : exp2(log2(mad(_394, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
      _494 = exp2(_434 * log2((_395 < 0.040449999272823333740234375f) ? (_395 * 0.077399380505084991455078125f) : exp2(log2(mad(_395, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
      _495 = exp2(log2((_396 < 0.040449999272823333740234375f) ? (_396 * 0.077399380505084991455078125f) : exp2(log2(mad(_396, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _434);
    } else {
      float _490;
      float _491;
      float _492;
      if (_406 == 2u) {
#if 1
        DecodePQ(float3(_396, _395, _394), CB0_m3.x, CB0_m3.y, _490, _491, _492);
#else
        float _453 = exp2(log2(_396) * 0.0126833133399486541748046875f);
        float _454 = exp2(log2(_395) * 0.0126833133399486541748046875f);
        float _455 = exp2(log2(_394) * 0.0126833133399486541748046875f);
        float _472 = 1.0f / CB0_m3.x;
        float _473 = 1.0f / CB0_m3.y;
        float3 _486 = float3(exp2(_472 * log2(max((_453 - 0.8359375f) / mad(_453, -18.6875f, 18.8515625f), 0.0f))) * _473, exp2(_472 * log2(max((_454 - 0.8359375f) / mad(_454, -18.6875f, 18.8515625f), 0.0f))) * _473, exp2(_472 * log2(max((_455 - 0.8359375f) / mad(_455, -18.6875f, 18.8515625f), 0.0f))) * _473);
        _490 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _486);
        _491 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _486);
        _492 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _486);
#endif
      } else {
        _490 = _394;
        _491 = _395;
        _492 = _396;
      }

      _493 = _490;
      _494 = _491;
      _495 = _492;
    }
    _770 = _493;
    _771 = _494;
    _772 = _495;

  } else {
    float4 _498 = T3.SampleLevel(S1, _162, 0.0f);
    float _499 = _498.x;
    float _500 = _498.y;
    float _501 = _498.z;
    float _502 = _498.w;
    float _767;
    float _768;
    float _769;
    if ((_502 + max(_499, max(_500, _501))) > 0.0f) {
      float _509 = sqrt(_499);
      float _510 = sqrt(_500);
      float _511 = sqrt(_501);
      uint _529 = uint(cvt_f32_i32(CB0_m4.y));
      bool _530 = _529 == 1u;
      bool _531 = _529 == 2u;
      float _616;
      float _617;
      float _618;
      if (_530) {
        float _558 = 1.0f / CB0_m3.x;
        _616 = exp2(_558 * log2((_394 < 0.040449999272823333740234375f) ? (_394 * 0.077399380505084991455078125f) : exp2(log2(mad(_394, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
        _617 = exp2(_558 * log2((_395 < 0.040449999272823333740234375f) ? (_395 * 0.077399380505084991455078125f) : exp2(log2(mad(_395, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
        _618 = exp2(log2((_396 < 0.040449999272823333740234375f) ? (_396 * 0.077399380505084991455078125f) : exp2(log2(mad(_396, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _558);
      } else {
        float _613;
        float _614;
        float _615;
        if (_531) {
#if 1
          DecodePQ(float3(_396, _395, _394), CB0_m3.x, CB0_m3.y, _613, _614, _615);
#else
          float _576 = exp2(log2(_396) * 0.0126833133399486541748046875f);
          float _577 = exp2(log2(_395) * 0.0126833133399486541748046875f);
          float _578 = exp2(log2(_394) * 0.0126833133399486541748046875f);
          float _595 = 1.0f / CB0_m3.x;
          float _596 = 1.0f / CB0_m3.y;
          float3 _609 = float3(exp2(_595 * log2(max((_576 - 0.8359375f) / mad(_576, -18.6875f, 18.8515625f), 0.0f))) * _596, exp2(_595 * log2(max((_577 - 0.8359375f) / mad(_577, -18.6875f, 18.8515625f), 0.0f))) * _596, exp2(_595 * log2(max((_578 - 0.8359375f) / mad(_578, -18.6875f, 18.8515625f), 0.0f))) * _596);
          _613 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _609);
          _614 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _609);
          _615 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _609);
#endif
        } else {
          _613 = _394;
          _614 = _395;
          _615 = _396;
        }
        _616 = _613;
        _617 = _614;
        _618 = _615;
      }
      float _619 = 1.0f - _502;
      float _623 = (_509 > 0.0f) ? exp2(log2(_509) * CB0_m5.x) : 0.0f;
      float _624 = (_510 > 0.0f) ? exp2(log2(_510) * CB0_m5.x) : 0.0f;
      float _625 = (_511 > 0.0f) ? exp2(log2(_511) * CB0_m5.x) : 0.0f;
      float _629 = (_619 * _618) + (_623 * _623);
      float _630 = (_624 * _624) + (_619 * _617);
      float _631 = (_625 * _625) + (_619 * _616);
      float _686;
      float _687;
      float _688;
      if ((CB0_m4.x > 0.0f) && _531) {
        _686 = ((_631 < 3.0f) && (_631 >= 0.0f)) ? (exp2(log2((_631 < 0.009300000034272670745849609375f) ? (_631 * 4.306666851043701171875f) : mad(exp2(log2(_631 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _631;
        _687 = ((_630 < 3.0f) && (_630 >= 0.0f)) ? (exp2(log2((_630 < 0.009300000034272670745849609375f) ? (_630 * 4.306666851043701171875f) : mad(exp2(log2(_630 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _630;
        _688 = ((_629 >= 0.0f) && (_629 < 3.0f)) ? (exp2(log2((_629 < 0.009300000034272670745849609375f) ? (_629 * 4.306666851043701171875f) : mad(exp2(log2(_629 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _629;
      } else {
        _686 = _631;
        _687 = _630;
        _688 = _629;
      }
      float _764;
      float _765;
      float _766;
      if (_530) {
        float _697 = CB0_m3.x * log2(_688);
        float _698 = log2(_687) * CB0_m3.x;
        float _699 = log2(_686) * CB0_m3.x;
        float _700 = exp2(_697);
        float _701 = exp2(_698);
        float _702 = exp2(_699);
        _764 = (_702 < 0.00310000008903443813323974609375f) ? (_702 * 12.9200000762939453125f) : mad(exp2(_699 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
        _765 = (_701 < 0.00310000008903443813323974609375f) ? (_701 * 12.9200000762939453125f) : mad(exp2(_698 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
        _766 = (_700 < 0.00310000008903443813323974609375f) ? (_700 * 12.9200000762939453125f) : mad(exp2(_697 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
      } else {
        float _761;
        float _762;
        float _763;
        if (_531) {
          float3 _723 = float3(_688, _687, _686);
#if 1
          EncodePQ(_723, CB0_m3.x, CB0_m3.y, _761, _762, _763);
#else
          float _740 = exp2(CB0_m3.x * log2(CB0_m3.y * dp3_f32(float3(0.627403914928436279296875f, 0.3292830288410186767578125f, 0.0433130674064159393310546875f), _723)));
          float _741 = exp2(log2(CB0_m3.y * dp3_f32(float3(0.069097287952899932861328125f, 0.9195404052734375f, 0.01136231608688831329345703125f), _723)) * CB0_m3.x);
          float _742 = exp2(log2(CB0_m3.y * dp3_f32(float3(0.01639143936336040496826171875f, 0.08801330626010894775390625f, 0.895595252513885498046875f), _723)) * CB0_m3.x);
          _761 = exp2(log2(mad(_742, 18.8515625f, 0.8359375f) / mad(_742, 18.6875f, 1.0f)) * 78.84375f);
          _762 = exp2(log2(mad(_741, 18.8515625f, 0.8359375f) / mad(_741, 18.6875f, 1.0f)) * 78.84375f);
          _763 = exp2(log2(mad(_740, 18.8515625f, 0.8359375f) / mad(_740, 18.6875f, 1.0f)) * 78.84375f);
#endif
        } else {
          _761 = _686;
          _762 = _687;
          _763 = _688;
        }
        _764 = _761;
        _765 = _762;
        _766 = _763;
      }
      _767 = _764;
      _768 = _765;
      _769 = _766;

    } else {
      _767 = _394;
      _768 = _395;
      _769 = _396;
    }
    _770 = _767;
    _771 = _768;
    _772 = _769;
  }
  SV_TARGET.x = _772;
  SV_TARGET.y = _771;
  SV_TARGET.z = _770;

  ReScaleBrightnessAndGammaCorrectForTAA(SV_TARGET.r, SV_TARGET.g, SV_TARGET.b, true);
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_TARGET = SV_TARGET;
  return stage_output;
}
