#include "../common.hlsli"

cbuffer CB0_buf : register(b0, space8) {
  float2 CB0_m0 : packoffset(c0);
  float2 CB0_m1 : packoffset(c0.z);
  float CB0_m2 : packoffset(c1);
  float2 CB0_m3 : packoffset(c1.y);
  uint CB0_m4 : packoffset(c1.w);
  float4 CB0_m5 : packoffset(c2);
};

SamplerState S0 : register(s0, space8);
Texture2D<float4> T0 : register(t0, space8);
Texture2D<float4> T1 : register(t1, space8);
Texture2D<float4> T2 : register(t2, space8);

static float4 SV_POSITION;
static float2 TEXCOORD;
static float4 SV_TARGET;

struct SPIRV_Cross_Input {
  float4 SV_POSITION : SV_POSITION;
  float2 TEXCOORD : TEXCOORD;
};

struct SPIRV_Cross_Output {
  float4 SV_TARGET : SV_Target0;
};

int cvt_f32_i32(float v) {
  return isnan(v) ? 0 : ((v < (-2147483648.0f)) ? int(0x80000000) : ((v > 2147483520.0f) ? 2147483647 : int(v)));
}

float dp3_f32(float3 a, float3 b) {
  precise float _97 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _97));
}

void frag_main() {
  float2 _143 = float2(TEXCOORD.x, TEXCOORD.y);
  float4 _146 = T1.Sample(S0, _143);
  float _147 = _146.x;
  float _148 = _146.y;
  float _149 = _146.z;
  float4 _152 = T0.SampleLevel(S0, _143, 0.0f);
  float _157 = sqrt(_152.x);
  float _158 = sqrt(_152.y);
  float _159 = sqrt(_152.z);
  uint _178 = uint(cvt_f32_i32(CB0_m1.y));
  bool _179 = _178 == 1u;
  bool _180 = _178 == 2u;
  float _265;
  float _266;
  float _267;
  if (_179) {
    float _207 = 1.0f / CB0_m0.x;
    _265 = exp2(_207 * log2((_149 < 0.040449999272823333740234375f) ? (_149 * 0.077399380505084991455078125f) : exp2(log2(mad(_149, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
    _266 = exp2(_207 * log2((_148 < 0.040449999272823333740234375f) ? (_148 * 0.077399380505084991455078125f) : exp2(log2(mad(_148, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
    _267 = exp2(log2((_147 < 0.040449999272823333740234375f) ? (_147 * 0.077399380505084991455078125f) : exp2(log2(mad(_147, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _207);
  } else {
    float _262;
    float _263;
    float _264;
    if (_180) {
#if 1
      DecodePQ(float3(_147, _148, _149), CB0_m0.x, CB0_m0.y, _262, _263, _264);
#else
      float _225 = exp2(log2(_147) * 0.0126833133399486541748046875f);
      float _226 = exp2(log2(_148) * 0.0126833133399486541748046875f);
      float _227 = exp2(log2(_149) * 0.0126833133399486541748046875f);
      float _244 = 1.0f / CB0_m0.x;
      float _245 = 1.0f / CB0_m0.y;
      float3 _258 = float3(exp2(_244 * log2(max((_225 - 0.8359375f) / mad(_225, -18.6875f, 18.8515625f), 0.0f))) * _245, exp2(_244 * log2(max((_226 - 0.8359375f) / mad(_226, -18.6875f, 18.8515625f), 0.0f))) * _245, exp2(_244 * log2(max((_227 - 0.8359375f) / mad(_227, -18.6875f, 18.8515625f), 0.0f))) * _245);
      _262 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _258);
      _263 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _258);
      _264 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _258);
#endif
    } else {
      _262 = _149;
      _263 = _148;
      _264 = _147;
    }
    _265 = _262;
    _266 = _263;
    _267 = _264;
  }
  float _268 = 1.0f - _152.w;
  float _272 = (_157 > 0.0f) ? exp2(log2(_157) * CB0_m5.x) : 0.0f;
  float _273 = (_158 > 0.0f) ? exp2(log2(_158) * CB0_m5.x) : 0.0f;
  float _274 = (_159 > 0.0f) ? exp2(log2(_159) * CB0_m5.x) : 0.0f;
  float _278 = (_268 * _267) + (_272 * _272);
  float _279 = (_273 * _273) + (_268 * _266);
  float _280 = (_274 * _274) + (_268 * _265);
  float _335;
  float _336;
  float _337;
  if (_180 && (CB0_m1.x > 0.0f)) {
    _335 = ((_280 < 3.0f) && (_280 >= 0.0f)) ? (exp2(log2((_280 < 0.009300000034272670745849609375f) ? (_280 * 4.306666851043701171875f) : mad(exp2(log2(_280 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _280;
    _336 = ((_279 < 3.0f) && (_279 >= 0.0f)) ? (exp2(log2((_279 < 0.009300000034272670745849609375f) ? (_279 * 4.306666851043701171875f) : mad(exp2(log2(_279 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _279;
    _337 = ((_278 >= 0.0f) && (_278 < 3.0f)) ? (exp2(log2((_278 < 0.009300000034272670745849609375f) ? (_278 * 4.306666851043701171875f) : mad(exp2(log2(_278 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _278;
  } else {
    _335 = _280;
    _336 = _279;
    _337 = _278;
  }
  float _413;
  float _414;
  float _415;
  if (_179) {
    float _346 = log2(_337) * CB0_m0.x;
    float _347 = log2(_336) * CB0_m0.x;
    float _348 = log2(_335) * CB0_m0.x;
    float _349 = exp2(_346);
    float _350 = exp2(_347);
    float _351 = exp2(_348);
    _413 = (_351 < 0.00310000008903443813323974609375f) ? (_351 * 12.9200000762939453125f) : mad(exp2(_348 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    _414 = (_350 < 0.00310000008903443813323974609375f) ? (_350 * 12.9200000762939453125f) : mad(exp2(_347 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    _415 = (_349 < 0.00310000008903443813323974609375f) ? (_349 * 12.9200000762939453125f) : mad(exp2(_346 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
  } else {
    float _410;
    float _411;
    float _412;
    if (_180) {
      float3 _372 = float3(_337, _336, _335);
#if 1
      FinalizeOutput(_372, CB0_m0.x, CB0_m0.y, _412, _411, _410);
#else
      float _389 = exp2(CB0_m0.x * log2(CB0_m0.y * dp3_f32(float3(0.627403914928436279296875f, 0.3292830288410186767578125f, 0.0433130674064159393310546875f), _372)));
      float _390 = exp2(log2(CB0_m0.y * dp3_f32(float3(0.069097287952899932861328125f, 0.9195404052734375f, 0.01136231608688831329345703125f), _372)) * CB0_m0.x);
      float _391 = exp2(log2(CB0_m0.y * dp3_f32(float3(0.01639143936336040496826171875f, 0.08801330626010894775390625f, 0.895595252513885498046875f), _372)) * CB0_m0.x);
      _410 = exp2(log2(mad(_391, 18.8515625f, 0.8359375f) / mad(_391, 18.6875f, 1.0f)) * 78.84375f);
      _411 = exp2(log2(mad(_390, 18.8515625f, 0.8359375f) / mad(_390, 18.6875f, 1.0f)) * 78.84375f);
      _412 = exp2(log2(mad(_389, 18.8515625f, 0.8359375f) / mad(_389, 18.6875f, 1.0f)) * 78.84375f);
#endif
    } else {
      _410 = _335;
      _411 = _336;
      _412 = _337;
    }
    _413 = _410;
    _414 = _411;
    _415 = _412;
  }

  float _424 = T2.Load(int3(uint2(uint(clamp(cvt_f32_i32(TEXCOORD.x * CB0_m3.x), 1, cvt_f32_i32(CB0_m3.x - 3.0f)) & 31), uint(min(cvt_f32_i32(CB0_m3.y - 3.0f), cvt_f32_i32(TEXCOORD.y * CB0_m3.y)) & 31)), 0u)).x - 0.5f;
  SV_TARGET.x = max(mad(CB0_m2, _424, _415), 0.0f);
  SV_TARGET.y = max(mad(CB0_m2, _424, _414), 0.0f);
  SV_TARGET.z = max(mad(CB0_m2, _424, _413), 0.0f);
  SV_TARGET.w = 0.0f;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_TARGET = SV_TARGET;
  return stage_output;
}
