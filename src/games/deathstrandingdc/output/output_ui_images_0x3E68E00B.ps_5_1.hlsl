#include "../common.hlsli"

cbuffer CB0_buf : register(b0, space8) {
  float2 CB0_m0 : packoffset(c0);
  float2 CB0_m1 : packoffset(c0.z);
  float4 CB0_m2 : packoffset(c1);
};

SamplerState S0 : register(s0, space8);
Texture2D<float4> T0 : register(t0, space8);
Texture2D<float4> T1 : register(t1, space8);

static float4 SV_POSITION;
static float2 TEXCOORD;
static float4 SV_TARGET;

struct SPIRV_Cross_Input {
  float4 SV_POSITION : SV_POSITION0;
  float2 TEXCOORD : TEXCOORD;
};

struct SPIRV_Cross_Output {
  float4 SV_TARGET : SV_Target0;
};

int cvt_f32_i32(float v) {
  return isnan(v) ? 0 : ((v < (-2147483648.0f)) ? int(0x80000000) : ((v > 2147483520.0f) ? 2147483647 : int(v)));
}

float dp3_f32(float3 a, float3 b) {
  precise float _92 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _92));
}

void frag_main() {
  SV_TARGET.w = 1.0f;

  float2 _122 = float2(TEXCOORD.x, TEXCOORD.y);
  float4 _125 = T0.Sample(S0, _122);
  float4 _132 = T1.Sample(S0, _122);
  float _133 = _132.x;
  float _134 = _132.y;
  float _135 = _132.z;
  float _140 = sqrt(clamp(_125.x, 0.0f, 1.0f));
  float _141 = sqrt(clamp(_125.y, 0.0f, 1.0f));
  float _142 = sqrt(clamp(_125.z, 0.0f, 1.0f));
  uint _162 = uint(cvt_f32_i32(CB0_m1.y));
  bool _163 = _162 == 1u;
  bool _164 = _162 == 2u;
  float _250;
  float _251;
  float _252;
  if (_163) {
    float _191 = 1.0f / CB0_m0.x;
    _250 = exp2(_191 * log2((_135 < 0.040449999272823333740234375f) ? (_135 * 0.077399380505084991455078125f) : exp2(log2(mad(_135, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
    _251 = exp2(_191 * log2((_134 < 0.040449999272823333740234375f) ? (_134 * 0.077399380505084991455078125f) : exp2(log2(mad(_134, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)));
    _252 = exp2(log2((_133 < 0.040449999272823333740234375f) ? (_133 * 0.077399380505084991455078125f) : exp2(log2(mad(_133, 0.94786727428436279296875f, 0.0521326996386051177978515625f)) * 2.400000095367431640625f)) * _191);
  } else {
    float _247;
    float _248;
    float _249;
    if (_164) {
#if 1
      DecodePQ(float3(_133, _134, _135), CB0_m0.x, CB0_m0.y, _247, _248, _249);
#else
      float _209 = exp2(log2(_133) * 0.0126833133399486541748046875f);
      float _210 = exp2(log2(_134) * 0.0126833133399486541748046875f);
      float _211 = exp2(log2(_135) * 0.0126833133399486541748046875f);
      float _229 = 1.0f / CB0_m0.x;
      float _230 = 1.0f / CB0_m0.y;
      float3 _243 = float3(exp2(_229 * log2(max((_209 - 0.8359375f) / mad(_209, -18.6875f, 18.8515625f), 0.0f))) * _230, exp2(_229 * log2(max((_210 - 0.8359375f) / mad(_210, -18.6875f, 18.8515625f), 0.0f))) * _230, exp2(_229 * log2(max((_211 - 0.8359375f) / mad(_211, -18.6875f, 18.8515625f), 0.0f))) * _230);
      _247 = dp3_f32(float3(-0.01815080083906650543212890625f, -0.100579001009464263916015625f, 1.11872994899749755859375f), _243);
      _248 = dp3_f32(float3(-0.12454999983310699462890625f, 1.1328999996185302734375f, -0.008349419571459293365478515625f), _243);
      _249 = dp3_f32(float3(1.6604900360107421875f, -0.5876410007476806640625f, -0.0728498995304107666015625f), _243);
#endif
    } else {
      _247 = _135;
      _248 = _134;
      _249 = _133;
    }
    _250 = _247;
    _251 = _248;
    _252 = _249;
  }
  float _253 = 1.0f - clamp(_125.w, 0.0f, 1.0f);
  float _257 = (_140 > 0.0f) ? exp2(log2(_140) * CB0_m2.x) : 0.0f;
  float _258 = (_141 > 0.0f) ? exp2(log2(_141) * CB0_m2.x) : 0.0f;
  float _259 = (_142 > 0.0f) ? exp2(log2(_142) * CB0_m2.x) : 0.0f;
  float _263 = (_253 * _252) + (_257 * _257);
  float _264 = (_258 * _258) + (_251 * _253);
  float _265 = (_259 * _259) + (_253 * _250);
  float _320;
  float _321;
  float _322;
  if (_164 && (CB0_m1.x > 0.0f)) {
    _320 = ((_265 < 3.0f) && (_265 >= 0.0f)) ? (exp2(log2((_265 < 0.009300000034272670745849609375f) ? (_265 * 4.306666851043701171875f) : mad(exp2(log2(_265 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _265;
    _321 = ((_264 < 3.0f) && (_264 >= 0.0f)) ? (exp2(log2((_264 < 0.009300000034272670745849609375f) ? (_264 * 4.306666851043701171875f) : mad(exp2(log2(_264 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _264;
    _322 = ((_263 >= 0.0f) && (_263 < 3.0f)) ? (exp2(log2((_263 < 0.009300000034272670745849609375f) ? (_263 * 4.306666851043701171875f) : mad(exp2(log2(_263 * 0.3333333432674407958984375f) * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f)) * 2.2000000476837158203125f) * 3.0f) : _263;
  } else {
    _320 = _265;
    _321 = _264;
    _322 = _263;
  }
  float _398;
  float _399;
  float _400;
  if (_163) {
    float _331 = log2(_322) * CB0_m0.x;
    float _332 = log2(_321) * CB0_m0.x;
    float _333 = log2(_320) * CB0_m0.x;
    float _334 = exp2(_331);
    float _335 = exp2(_332);
    float _336 = exp2(_333);
    _398 = (_336 < 0.00310000008903443813323974609375f) ? (_336 * 12.9200000762939453125f) : mad(exp2(_333 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    _399 = (_335 < 0.00310000008903443813323974609375f) ? (_335 * 12.9200000762939453125f) : mad(exp2(_332 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    _400 = (_334 < 0.00310000008903443813323974609375f) ? (_334 * 12.9200000762939453125f) : mad(exp2(_331 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
  } else {
    float _395;
    float _396;
    float _397;
    if (_164) {
      float3 _357 = float3(_322, _321, _320);

#if 1
      FinalizeOutput(_357, CB0_m0.x, CB0_m0.y, _397, _396, _395);
#else
      float _374 = exp2(CB0_m0.x * log2(dp3_f32(float3(0.627403914928436279296875f, 0.3292830288410186767578125f, 0.0433130674064159393310546875f), _357) * CB0_m0.y));
      float _375 = exp2(log2(dp3_f32(float3(0.069097287952899932861328125f, 0.9195404052734375f, 0.01136231608688831329345703125f), _357) * CB0_m0.y) * CB0_m0.x);
      float _376 = exp2(log2(dp3_f32(float3(0.01639143936336040496826171875f, 0.08801330626010894775390625f, 0.895595252513885498046875f), _357) * CB0_m0.y) * CB0_m0.x);
      _395 = exp2(log2(mad(_376, 18.8515625f, 0.8359375f) / mad(_376, 18.6875f, 1.0f)) * 78.84375f);
      _396 = exp2(log2(mad(_375, 18.8515625f, 0.8359375f) / mad(_375, 18.6875f, 1.0f)) * 78.84375f);
      _397 = exp2(log2(mad(_374, 18.8515625f, 0.8359375f) / mad(_374, 18.6875f, 1.0f)) * 78.84375f);
#endif
    } else {
      _395 = _320;
      _396 = _321;
      _397 = _322;
    }
    _398 = _395;
    _399 = _396;
    _400 = _397;
  }
  SV_TARGET.x = _400;
  SV_TARGET.y = _399;
  SV_TARGET.z = _398;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_TARGET = SV_TARGET;
  return stage_output;
}
