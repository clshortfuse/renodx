// injected cbuffer values are always zero for some reason
#include "./common.hlsli"

cbuffer CB0_buf : register(b0, space8) {
  float4 CB0_m0 : packoffset(c0);
  float4 CB0_m1 : packoffset(c1);
  float4 CB0_m2 : packoffset(c2);
  float4 CB0_m3 : packoffset(c3);
};

SamplerState S0 : register(s0, space8);
Texture2D<float4> T0 : register(t16, space8);
Texture2D<float4> T1 : register(t17, space8);
Texture2D<float4> T2 : register(t18, space8);
Texture2D<float4> T3 : register(t19, space8);

static float4 SV_POSITION;
static float2 TEXCOORD;
static float4 SV_TARGET;

struct SPIRV_Cross_Input {
  float4 SV_POSITION : SV_POSITION;
  float2 TEXCOORD : TEXCOORD;
};

struct SPIRV_Cross_Output {
  float4 SV_TARGET : SV_Target0;
};

int cvt_f32_i32(float v) {
  return isnan(v) ? 0 : ((v < (-2147483648.0f)) ? int(0x80000000) : ((v > 2147483520.0f) ? 2147483647 : int(v)));
}

float dp3_f32(float3 a, float3 b) {
  precise float _100 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _100));
}

void frag_main() {
  float _439;
  float _440;
  float _441;
  if (CB0_m3.x > 0.0f) {
    float2 _138 = float2(TEXCOORD.x, TEXCOORD.y);
    float4 _141 = T0.Sample(S0, _138);
    float4 _145 = T1.Sample(S0, _138);
    float4 _149 = T2.Sample(S0, _138);
    float4 _153 = T3.Sample(S0, _138);
    float _159 = mad(_145.x, CB0_m0.x, CB0_m0.z);
    float _164 = mad(_149.x, CB0_m0.y, CB0_m0.w);
    float _171 = (_141.x + _153.x) * CB0_m1.x;
    float _187 = (max(mad(_164, 0.11102962493896484375f, _171 + (_159 * 0.008609036915004253387451171875f)), 0.0f));
    float _188 = (max(mad(_164, -0.11102962493896484375f, _171 + (_159 * (-0.008609036915004253387451171875f))), 0.0f));
    float _189 = (max(mad(_164, -0.3206271827220916748046875f, _171 + (_159 * 0.560031354427337646484375f)), 0.0f));
    _187 = pow(_187, 0.0126833133399486541748046875f);
    _188 = pow(_188, 0.0126833133399486541748046875f);
    _189 = pow(_189, 0.0126833133399486541748046875f);
    float _211 = exp2(log2(abs(max(_187 - 0.8359375f, 0.0f) / mad(_187, -18.6875f, 18.8515625f))) * 6.277394771575927734375f);
    float _212 = exp2(log2(abs(max(_188 - 0.8359375f, 0.0f) / mad(_188, -18.6875f, 18.8515625f))) * 6.277394771575927734375f);
    float _213 = exp2(log2(abs(max(_189 - 0.8359375f, 0.0f) / mad(_189, -18.6875f, 18.8515625f))) * 6.277394771575927734375f);
    float _223 = mad(_213, 8.73067760467529296875f, (_211 * 429.575836181640625f) + (_212 * (-313.3065185546875f)));
    float _224 = mad(_213, -24.0338611602783203125f, (_211 * (-98.91619110107421875f)) + (_212 * 247.9500579833984375f));
    float _225 = mad(_213, 140.6079559326171875f, (_211 * (-3.2437374591827392578125f)) + (_212 * (-12.3642139434814453125f)));
    uint _229 = uint(cvt_f32_i32(CB0_m2.w));
    float _313;
    float _314;
    float _315;
    if (_229 == 1u) {
      float _242 = log2(abs(_223)) * CB0_m2.x;
      float _243 = log2(abs(_224)) * CB0_m2.x;
      float _244 = log2(abs(_225)) * CB0_m2.x;
      float _245 = exp2(_242);
      float _246 = exp2(_243);
      float _247 = exp2(_244);
      _313 = (_247 < 0.00310000008903443813323974609375f) ? (_247 * 12.9200000762939453125f) : mad(exp2(_244 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
      _314 = (_246 < 0.00310000008903443813323974609375f) ? (_246 * 12.9200000762939453125f) : mad(exp2(_243 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
      _315 = (_245 < 0.00310000008903443813323974609375f) ? (_245 * 12.9200000762939453125f) : mad(exp2(_242 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    } else {
      float _310;
      float _311;
      float _312;
      if (_229 == 2u) {
        float3 _269 = float3(_223, _224, _225);
#if 1
        EncodePQ(_269, CB0_m2.x, CB0_m2.y, _310, _311, _312);
#else
        float _289 = exp2(log2(abs(dp3_f32(float3(0.627403914928436279296875f, 0.3292830288410186767578125f, 0.0433130674064159393310546875f), _269) * CB0_m2.y)) * CB0_m2.x);
        float _290 = exp2(log2(abs(dp3_f32(float3(0.069097287952899932861328125f, 0.9195404052734375f, 0.01136231608688831329345703125f), _269) * CB0_m2.y)) * CB0_m2.x);
        float _291 = exp2(log2(abs(dp3_f32(float3(0.01639143936336040496826171875f, 0.08801330626010894775390625f, 0.895595252513885498046875f), _269) * CB0_m2.y)) * CB0_m2.x);
        _310 = exp2(log2(mad(_291, 18.8515625f, 0.8359375f) / mad(_291, 18.6875f, 1.0f)) * 78.84375f);
        _311 = exp2(log2(mad(_290, 18.8515625f, 0.8359375f) / mad(_290, 18.6875f, 1.0f)) * 78.84375f);
        _312 = exp2(log2(mad(_289, 18.8515625f, 0.8359375f) / mad(_289, 18.6875f, 1.0f)) * 78.84375f);
#endif
      } else {
        _310 = _225;
        _311 = _224;
        _312 = _223;
      }
      _313 = _310;
      _314 = _311;
      _315 = _312;
    }
    _439 = _313;
    _440 = _314;
    _441 = _315;
  } else {
    float2 _322 = float2(TEXCOORD.x, TEXCOORD.y);
    float4 _324 = T0.Sample(S0, _322);
    float _325 = _324.x;
    float4 _328 = T1.Sample(S0, _322);
    float _329 = _328.x;
    float4 _332 = T2.Sample(S0, _322);
    float _333 = _332.x;
    float _349 = log2(clamp(mad(_333, 0.0f, mad(_329, 1.401999950408935546875f, _325)) - 0.7009999752044677734375f, 0.0f, 1.0f)) * 2.2000000476837158203125f;
    float _350 = log2(clamp(mad(_333, -0.344139993190765380859375f, mad(_329, -0.714139997959136962890625f, _325)) + 0.529139995574951171875f, 0.0f, 1.0f)) * 2.2000000476837158203125f;
    float _351 = log2(clamp(mad(_333, 1.77199995517730712890625f, mad(_329, 0.0f, _325)) - 0.885999977588653564453125f, 0.0f, 1.0f)) * 2.2000000476837158203125f;
    uint _355 = uint(cvt_f32_i32(CB0_m2.w));
    float _436;
    float _437;
    float _438;
    if (_355 == 1u) {
      float _362 = _349 * CB0_m2.x;
      float _363 = _350 * CB0_m2.x;
      float _364 = _351 * CB0_m2.x;
      float _365 = exp2(_362);
      float _366 = exp2(_363);
      float _367 = exp2(_364);
      _436 = (_367 < 0.00310000008903443813323974609375f) ? (_367 * 12.9200000762939453125f) : mad(exp2(_364 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
      _437 = (_366 < 0.00310000008903443813323974609375f) ? (_366 * 12.9200000762939453125f) : mad(exp2(_363 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
      _438 = (_365 < 0.00310000008903443813323974609375f) ? (_365 * 12.9200000762939453125f) : mad(exp2(_362 * 0.4166666567325592041015625f), 1.05499994754791259765625f, -0.054999999701976776123046875f);
    } else {
      float _386 = exp2(_349);
      float _387 = exp2(_350);
      float _388 = exp2(_351);
      float _433;
      float _434;
      float _435;
      if (_355 == 2u) {
        float3 _392 = float3(_386, _387, _388);
#if 1
        EncodePQ(_392, CB0_m2.x, CB0_m2.y, _433, _434, _435);
#else
        float _412 = exp2(CB0_m2.x * log2(abs(CB0_m2.y * dp3_f32(float3(0.627403914928436279296875f, 0.3292830288410186767578125f, 0.0433130674064159393310546875f), _392))));
        float _413 = exp2(log2(abs(CB0_m2.y * dp3_f32(float3(0.069097287952899932861328125f, 0.9195404052734375f, 0.01136231608688831329345703125f), _392))) * CB0_m2.x);
        float _414 = exp2(log2(abs(CB0_m2.y * dp3_f32(float3(0.01639143936336040496826171875f, 0.08801330626010894775390625f, 0.895595252513885498046875f), _392))) * CB0_m2.x);
        _433 = exp2(log2(mad(_414, 18.8515625f, 0.8359375f) / mad(_414, 18.6875f, 1.0f)) * 78.84375f);
        _434 = exp2(log2(mad(_413, 18.8515625f, 0.8359375f) / mad(_413, 18.6875f, 1.0f)) * 78.84375f);
        _435 = exp2(log2(mad(_412, 18.8515625f, 0.8359375f) / mad(_412, 18.6875f, 1.0f)) * 78.84375f);
#endif
      } else {
        _433 = _388;
        _434 = _387;
        _435 = _386;
      }
      _436 = _433;
      _437 = _434;
      _438 = _435;
    }
    _439 = _436;
    _440 = _437;
    _441 = _438;
  }
  SV_TARGET.x = _441;
  SV_TARGET.y = _440;
  SV_TARGET.z = _439;
  SV_TARGET.w = 1.0f;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_TARGET = SV_TARGET;
  return stage_output;
}
