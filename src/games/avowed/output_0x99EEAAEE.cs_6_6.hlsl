#include "./common.hlsl"

struct _View_PreExposureSceneData {
  float PreExposure;
  float OneOverPreExposure;
  float AverageSceneLuminance;
  uint IsValid;
  float PrevPreExposure;
  float PrevOneOverPreExposure;
  float PreExposureCorrection;
  uint PrevIsValid;
};
StructuredBuffer<_View_PreExposureSceneData> View_PreExposureSceneData : register(t0);

struct _EyeAdaptationBuffer {
  float data[4];
};
StructuredBuffer<float4> EyeAdaptationBuffer : register(t1);


Texture2D<float4> ColorTexture : register(t2);

Texture2D<float4> BloomTexture : register(t3);

struct _SceneColorApplyParamaters {
  float data[4];
};
StructuredBuffer<_SceneColorApplyParamaters> SceneColorApplyParamaters : register(t4);

Texture3D<float4> LumBilateralGrid : register(t5);

Texture2D<float4> BlurredLogLum : register(t6);

Texture2D<float4> BloomDirtMaskTexture : register(t7);

Texture3D<float4> ColorGradingLUT : register(t8);

RWTexture2D<float4> RWOutputTexture : register(u0);

RWTexture2D<float4> RWOutputLuminance : register(u1);

cbuffer cb0 : register(b0) {
  float cb0_001x : packoffset(c001.x);
  float cb0_001y : packoffset(c001.y);
  float cb0_009x : packoffset(c009.x);
  float cb0_009y : packoffset(c009.y);
  float cb0_010x : packoffset(c010.x);
  float cb0_010y : packoffset(c010.y);
  float cb0_010z : packoffset(c010.z);
  float cb0_010w : packoffset(c010.w);
  float cb0_015x : packoffset(c015.x);
  float cb0_015y : packoffset(c015.y);
  float cb0_015z : packoffset(c015.z);
  float cb0_015w : packoffset(c015.w);
  float cb0_016z : packoffset(c016.z);
  float cb0_016w : packoffset(c016.w);
  uint cb0_018x : packoffset(c018.x);
  uint cb0_018y : packoffset(c018.y);
  float cb0_019y : packoffset(c019.y);
  float cb0_019z : packoffset(c019.z);
  float cb0_025y : packoffset(c025.y);
  float cb0_025z : packoffset(c025.z);
  float cb0_025w : packoffset(c025.w);
  float cb0_033x : packoffset(c033.x);
  float cb0_033y : packoffset(c033.y);
  float cb0_033z : packoffset(c033.z);
  float cb0_033w : packoffset(c033.w);
  float cb0_034x : packoffset(c034.x);
  float cb0_034z : packoffset(c034.z);
  float cb0_034w : packoffset(c034.w);
  float cb0_036x : packoffset(c036.x);
  float cb0_036y : packoffset(c036.y);
  float cb0_036z : packoffset(c036.z);
  float cb0_036w : packoffset(c036.w);
  float cb0_037x : packoffset(c037.x);
  float cb0_037y : packoffset(c037.y);
  float cb0_037z : packoffset(c037.z);
  float cb0_037w : packoffset(c037.w);
  float cb0_044x : packoffset(c044.x);
  float cb0_044y : packoffset(c044.y);
  float cb0_044z : packoffset(c044.z);
  float cb0_045x : packoffset(c045.x);
  float cb0_045y : packoffset(c045.y);
  float cb0_045z : packoffset(c045.z);
  float cb0_047x : packoffset(c047.x);
  float cb0_048x : packoffset(c048.x);
  float cb0_048y : packoffset(c048.y);
  float cb0_048z : packoffset(c048.z);
  float cb0_048w : packoffset(c048.w);
  float cb0_050z : packoffset(c050.z);
  float cb0_050w : packoffset(c050.w);
  float cb0_051x : packoffset(c051.x);
  float cb0_051y : packoffset(c051.y);
  uint cb0_051z : packoffset(c051.z);
};

SamplerState ColorSampler : register(s0);

SamplerState BloomSampler : register(s1);

SamplerState LumBilateralGridSampler : register(s2);

SamplerState BlurredLogLumSampler : register(s3);

SamplerState BloomDirtMaskSampler : register(s4);

SamplerState ColorGradingLUTSampler : register(s5);

[numthreads(8, 8, 1)]
void main(uint3 vThreadID: SV_DispatchThreadID) {
  float3 untonemapped;
  uint initial = (cb0_018x) + (vThreadID.x);
  uint end = (cb0_018y) + (vThreadID.y);

  float _22 = float((uint)(vThreadID.x));
  float _23 = float((uint)(vThreadID.y));
  float _27 = float((uint)(cb0_018x));
  float _28 = float((uint)(cb0_018y));
  float _29 = _22 + 0.5f;
  float _30 = _29 + _27;
  float _31 = _23 + 0.5f;
  float _32 = _31 + _28;
  float _36 = _30 * (cb0_016z);
  float _37 = _32 * (cb0_016w);
  float _38 = _36 + -0.5f;
  float _39 = _37 + -0.5f;
  float _40 = abs(_38);
  float _41 = abs(_39);
  float _42 = max(_40, _41);
  bool _43 = !(_42 >= 0.5f);
  float _362;
  float _363;
  float _364;
  if (_43) {
    float _48 = (cb0_016z)*_29;
    float _49 = (cb0_016w)*_31;
    float _53 = (cb0_019z) * (cb0_019y);
    float _57 = (cb0_009x)*_48;
    float _58 = (cb0_009y)*_49;
    float _62 = _57 - (cb0_010z);
    float _63 = _58 - (cb0_010w);
    float _66 = _62 / (cb0_010x);
    float _67 = _63 / (cb0_010y);
    float _73 = (cb0_048z)*_66;
    float _74 = (cb0_048w)*_67;
    float _75 = _73 + (cb0_048x);
    float _76 = _74 + (cb0_048y);
    float _77 = _53 * _53;
    float _78 = _77 + 1.0f;
    float _79 = sqrt(_78);
    float _80 = 1.4142135381698608f / _79;
    float _81 = _75 * _80;
    float _85 = (cb0_001x) + _48;
    float _86 = (cb0_001y) + _49;
    /* int4 _88 = asint(View_PreExposureSceneData[0].data[12 / 4]);
    float _90 = float((uint)((int)(_88.x)));
    float4 _91 = View_PreExposureSceneData[0].data[4 / 4]; */
    float _90 = View_PreExposureSceneData.Load(0u).IsValid;
    float _91 = View_PreExposureSceneData.Load(0u).OneOverPreExposure;
    float _93 = (_91) + -1.0f;
    float _94 = _93 * _90;
    float _95 = _94 + 1.0f;
    float4 _97 = EyeAdaptationBuffer.Load(0u);
    float _105 = max(_48, (cb0_015x));
    float _106 = max(_49, (cb0_015y));
    float _107 = min(_105, (cb0_015z));
    float _108 = min(_106, (cb0_015w));
    float4 _111 = ColorTexture.SampleLevel(ColorSampler, float2(_107, _108), 0.0f);
    float _120 = (cb0_036x)*_48;
    float _121 = (cb0_036y)*_49;
    float _122 = _120 + (cb0_036z);
    float _123 = _121 + (cb0_036w);
    float _129 = max(_122, (cb0_037x));
    float _130 = max(_123, (cb0_037y));
    float _131 = min(_129, (cb0_037z));
    float _132 = min(_130, (cb0_037w));
    float4 _135 = BloomTexture.SampleLevel(BloomSampler, float2(_131, _132), 0.0f);
    float _139 = _75 * 0.5f;
    float _140 = _76 * 0.5f;
    float _141 = _139 + 0.5f;
    float _142 = 0.5f - _140;
    float4 _145 = BloomDirtMaskTexture.SampleLevel(BloomDirtMaskSampler, float2(_141, _142), 0.0f);
    float _153 = (cb0_045x) * (_145.x);
    float _154 = (cb0_045y) * (_145.y);
    float _155 = (cb0_045z) * (_145.z);
    float _156 = _153 + 1.0f;
    float _157 = _154 + 1.0f;
    float _158 = _155 + 1.0f;
    float _159 = _156 * (_135.x);
    float _160 = _157 * (_135.y);
    float _161 = _158 * (_135.z);
    float _164 = _81 * (cb0_047x);
    float _165 = _80 * _53;
    float _166 = _165 * _76;
    float _167 = _166 * (cb0_047x);
    float _168 = dot(float2(_164, _167), float2(_164, _167));
    float _169 = _168 + 1.0f;
    float _170 = 1.0f / _169;
    float _171 = _170 * _170;
    float4 _177 = SceneColorApplyParamaters[0].data[0 / 4];
    float _181 = (_111.x) * _95;
    float _182 = (_111.y) * _95;
    float _183 = (_111.z) * _95;
    float _186 = dot(float3(_181, _182, _183), float3(0.3333333432674408f, 0.3333333432674408f, 0.3333333432674408f));
    float _187 = max(_186, (cb0_025w));
    float _188 = log2(_187);
    float _189 = (_97.w) * 0.18000000715255737f;
    float _192 = _189 * (cb0_034x);
    float _193 = log2(_192);
    float _198 = (cb0_034z)*_48;
    float _199 = (cb0_034w)*_49;
    float _201 = (cb0_025y)*_188;
    float _203 = _201 + (cb0_025z);
    float _204 = _203 * 0.96875f;
    float _205 = _204 + 0.015625f;
    float4 _208 = LumBilateralGrid.SampleLevel(LumBilateralGridSampler, float3(_198, _199, _205), 0.0f);
    float _211 = (_208.x) / (_208.y);
    float4 _214 = BlurredLogLum.SampleLevel(BlurredLogLumSampler, float2(_48, _49), 0.0f);
    bool _216 = ((_208.y) < 0.0010000000474974513f);
    float _217 = (_216 ? (_214.x) : _211);
    float _218 = (_214.x) - _217;
    float _219 = _218 * (cb0_033w);
    float _220 = log2((_97.x));
    float _221 = _217 + _220;
    float _222 = _221 + _219;
    float _226 = _220 + _188;
    float _227 = _226 - _222;
    float _228 = _222 - _193;
    bool _229 = (_228 > 0.0f);
    float _230 = (_229 ? (cb0_033x) : (cb0_033y));
    float _231 = _230 * _228;
    float _232 = _227 * (cb0_033z);
    float _233 = _193 - _226;
    float _234 = _233 + _232;
    float _235 = _234 + _231;
    float _236 = exp2(_235);
    float _237 = _95 * (_97.x);
    float _238 = _237 * _171;
    float _239 = _238 * _236;
    float _240 = (cb0_044x) * (_111.x);
    float _241 = _240 * (_177.x);
    float _242 = _241 * _239;
    float _243 = (cb0_044y) * (_111.y);
    float _244 = _243 * (_177.y);
    float _245 = _244 * _239;
    float _246 = (cb0_044z) * (_111.z);
    float _247 = _246 * (_177.z);
    float _248 = _247 * _239;

    untonemapped = float3(_242, _245, _248);

    float _249 = _159 * _238;
    float _250 = _160 * _238;
    float _251 = _161 * _238;
    float _252 = _249 + 0.002667719265446067f;
    float _253 = _252 + _242;
    float _254 = _250 + 0.002667719265446067f;
    float _255 = _254 + _245;
    float _256 = _251 + 0.002667719265446067f;
    float _257 = _256 + _248;
    float _258 = log2(_253);
    float _259 = log2(_255);
    float _260 = log2(_257);
    float _261 = _258 * 0.0714285746216774f;
    float _262 = _259 * 0.0714285746216774f;
    float _263 = _260 * 0.0714285746216774f;
    float _264 = _261 + 0.6107269525527954f;
    float _265 = _262 + 0.6107269525527954f;
    float _266 = _263 + 0.6107269525527954f;
    float _267 = saturate(_264);
    float _268 = saturate(_265);
    float _269 = saturate(_266);
    float _272 = (cb0_050z)*_267;
    float _273 = (cb0_050z)*_268;
    float _274 = (cb0_050z)*_269;
    float _276 = _272 + (cb0_050w);
    float _277 = _273 + (cb0_050w);
    float _278 = _274 + (cb0_050w);
    float4 _281 = ColorGradingLUT.SampleLevel(ColorGradingLUTSampler, float3(_276, _277, _278), 0.0f);
    OutputSignature output = LutToneMap(untonemapped, float3(_276, _277, _278), ColorGradingLUT, ColorGradingLUTSampler);
    RWOutputTexture[int2(initial, end)] = output.SV_Target;
    RWOutputLuminance[int2(initial, end)] = float4(output.SV_Target_1, output.SV_Target_1, output.SV_Target_1, output.SV_Target_1);
    return;

    float _285 = (_281.x) * 1.0499999523162842f;
    float _286 = (_281.y) * 1.0499999523162842f;
    float _287 = (_281.z) * 1.0499999523162842f;
    float _288 = dot(float3(_285, _286, _287), float3(0.29899999499320984f, 0.5870000123977661f, 0.11400000005960464f));
    bool _291 = (((uint)(cb0_051z)) == 0);
    _362 = _285;
    _363 = _286;
    _364 = _287;
    do {
      if (!_291) {
        float _293 = log2(_285);
        float _294 = log2(_286);
        float _295 = log2(_287);
        float _296 = _293 * 0.012683313339948654f;
        float _297 = _294 * 0.012683313339948654f;
        float _298 = _295 * 0.012683313339948654f;
        float _299 = exp2(_296);
        float _300 = exp2(_297);
        float _301 = exp2(_298);
        float _302 = _299 + -0.8359375f;
        float _303 = _300 + -0.8359375f;
        float _304 = _301 + -0.8359375f;
        float _305 = max(0.0f, _302);
        float _306 = max(0.0f, _303);
        float _307 = max(0.0f, _304);
        float _308 = _299 * 18.6875f;
        float _309 = _300 * 18.6875f;
        float _310 = _301 * 18.6875f;
        float _311 = 18.8515625f - _308;
        float _312 = 18.8515625f - _309;
        float _313 = 18.8515625f - _310;
        float _314 = _305 / _311;
        float _315 = _306 / _312;
        float _316 = _307 / _313;
        float _317 = log2(_314);
        float _318 = log2(_315);
        float _319 = log2(_316);
        float _320 = _317 * 6.277394771575928f;
        float _321 = _318 * 6.277394771575928f;
        float _322 = _319 * 6.277394771575928f;
        float _323 = exp2(_320);
        float _324 = exp2(_321);
        float _325 = exp2(_322);
        float _326 = _323 * 10000.0f;
        float _327 = _324 * 10000.0f;
        float _328 = _325 * 10000.0f;
        float _331 = _326 / (cb0_051x);
        float _332 = _327 / (cb0_051x);
        float _333 = _328 / (cb0_051x);
        float _334 = max(6.103519990574569e-05f, _331);
        float _335 = max(6.103519990574569e-05f, _332);
        float _336 = max(6.103519990574569e-05f, _333);
        float _337 = max(_334, 0.0031306699384003878f);
        float _338 = max(_335, 0.0031306699384003878f);
        float _339 = max(_336, 0.0031306699384003878f);
        float _340 = log2(_337);
        float _341 = log2(_338);
        float _342 = log2(_339);
        float _343 = _340 * 0.4166666567325592f;
        float _344 = _341 * 0.4166666567325592f;
        float _345 = _342 * 0.4166666567325592f;
        float _346 = exp2(_343);
        float _347 = exp2(_344);
        float _348 = exp2(_345);
        float _349 = _346 * 1.0549999475479126f;
        float _350 = _347 * 1.0549999475479126f;
        float _351 = _348 * 1.0549999475479126f;
        float _352 = _349 + -0.054999999701976776f;
        float _353 = _350 + -0.054999999701976776f;
        float _354 = _351 + -0.054999999701976776f;
        float _355 = _334 * 12.920000076293945f;
        float _356 = _335 * 12.920000076293945f;
        float _357 = _336 * 12.920000076293945f;
        float _358 = min(_355, _352);
        float _359 = min(_356, _353);
        float _360 = min(_357, _354);
        _362 = _358;
        _363 = _359;
        _364 = _360;
      }
      float _365 = _86 * 543.3099975585938f;
      float _366 = _85 + _365;
      float _367 = sin(_366);
      float _368 = _367 * 493013.0f;
      float _369 = frac(_368);
      float _370 = _369 * 2.0f;
      float _371 = _370 + -1.0f;
      float _372 = _371 * 0x7FF0000000000000;
      float _373 = max(_372, -1.0f);
      float _374 = min(_373, 1.0f);
      float _375 = abs(_371);
      float _376 = 1.0f - _375;
      float _377 = saturate(_376);
      float _378 = sqrt(_377);
      float _379 = _378 * _374;
      float _380 = _374 - _379;
      float _383 = _380 * (cb0_051y);
      float _384 = _383 + _362;
      float _385 = _383 + _363;
      float _386 = _383 + _364;
      uint _390 = (cb0_018x) + (vThreadID.x);
      uint _391 = (cb0_018y) + (vThreadID.y);
      RWOutputTexture[int2(_390, _391)] = float4(_384, _385, _386, 0.f);
      RWOutputLuminance[int2(_390, _391)] = float4(_288, _288, _288, _288);
    } while (false);
  }
}
