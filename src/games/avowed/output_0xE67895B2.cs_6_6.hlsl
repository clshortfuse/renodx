#include "./common.hlsl"

struct _View_PreExposureSceneData {
  float PreExposure;
  float OneOverPreExposure;
  float AverageSceneLuminance;
  uint IsValid;
  float PrevPreExposure;
  float PrevOneOverPreExposure;
  float PreExposureCorrection;
  uint PrevIsValid;
};
StructuredBuffer<_View_PreExposureSceneData> View_PreExposureSceneData : register(t0);

struct _EyeAdaptationBuffer {
  float data[4];
};
StructuredBuffer<float4> EyeAdaptationBuffer : register(t1);


Texture2D<float4> ColorTexture : register(t2);

Texture2D<float4> BloomTexture : register(t3);

struct _SceneColorApplyParamaters {
  float data[4];
};
StructuredBuffer<_SceneColorApplyParamaters> SceneColorApplyParamaters : register(t4);

Texture3D<float4> LumBilateralGrid : register(t5);

Texture2D<float4> BlurredLogLum : register(t6);

Texture2D<float4> BloomDirtMaskTexture : register(t7);

Texture3D<float4> ColorGradingLUT : register(t8);

RWTexture2D<float4> RWOutputTexture : register(u0);

RWTexture2D<float4> RWOutputLuminance : register(u1);

cbuffer cb0 : register(b0) {
  float cb0_001x : packoffset(c001.x);
  float cb0_001y : packoffset(c001.y);
  float cb0_009x : packoffset(c009.x);
  float cb0_009y : packoffset(c009.y);
  float cb0_009z : packoffset(c009.z);
  float cb0_009w : packoffset(c009.w);
  float cb0_010x : packoffset(c010.x);
  float cb0_010y : packoffset(c010.y);
  float cb0_010z : packoffset(c010.z);
  float cb0_010w : packoffset(c010.w);
  float cb0_015x : packoffset(c015.x);
  float cb0_015y : packoffset(c015.y);
  float cb0_015z : packoffset(c015.z);
  float cb0_015w : packoffset(c015.w);
  float cb0_016z : packoffset(c016.z);
  float cb0_016w : packoffset(c016.w);
  uint cb0_018x : packoffset(c018.x);
  uint cb0_018y : packoffset(c018.y);
  float cb0_019y : packoffset(c019.y);
  float cb0_019z : packoffset(c019.z);
  float cb0_025y : packoffset(c025.y);
  float cb0_025z : packoffset(c025.z);
  float cb0_025w : packoffset(c025.w);
  float cb0_033x : packoffset(c033.x);
  float cb0_033y : packoffset(c033.y);
  float cb0_033z : packoffset(c033.z);
  float cb0_033w : packoffset(c033.w);
  float cb0_034x : packoffset(c034.x);
  float cb0_034z : packoffset(c034.z);
  float cb0_034w : packoffset(c034.w);
  float cb0_036x : packoffset(c036.x);
  float cb0_036y : packoffset(c036.y);
  float cb0_036z : packoffset(c036.z);
  float cb0_036w : packoffset(c036.w);
  float cb0_037x : packoffset(c037.x);
  float cb0_037y : packoffset(c037.y);
  float cb0_037z : packoffset(c037.z);
  float cb0_037w : packoffset(c037.w);
  float cb0_044x : packoffset(c044.x);
  float cb0_044y : packoffset(c044.y);
  float cb0_044z : packoffset(c044.z);
  float cb0_045x : packoffset(c045.x);
  float cb0_045y : packoffset(c045.y);
  float cb0_045z : packoffset(c045.z);
  float cb0_046x : packoffset(c046.x);
  float cb0_046y : packoffset(c046.y);
  float cb0_046z : packoffset(c046.z);
  float cb0_047x : packoffset(c047.x);
  float cb0_048x : packoffset(c048.x);
  float cb0_048y : packoffset(c048.y);
  float cb0_048z : packoffset(c048.z);
  float cb0_048w : packoffset(c048.w);
  float cb0_049x : packoffset(c049.x);
  float cb0_049y : packoffset(c049.y);
  float cb0_049z : packoffset(c049.z);
  float cb0_049w : packoffset(c049.w);
  float cb0_050z : packoffset(c050.z);
  float cb0_050w : packoffset(c050.w);
  float cb0_051x : packoffset(c051.x);
  float cb0_051y : packoffset(c051.y);
  uint cb0_051z : packoffset(c051.z);
};

SamplerState ColorSampler : register(s0);

SamplerState BloomSampler : register(s1);

SamplerState LumBilateralGridSampler : register(s2);

SamplerState BlurredLogLumSampler : register(s3);

SamplerState BloomDirtMaskSampler : register(s4);

SamplerState ColorGradingLUTSampler : register(s5);

[numthreads(8, 8, 1)]
void main(uint3 vThreadID: SV_DispatchThreadID) {
  float3 untonemapped;
  uint initial = (cb0_018x) + (vThreadID.x);
  uint end = (cb0_018y) + (vThreadID.y);

  float _22 = float((uint)(vThreadID.x));
  float _23 = float((uint)(vThreadID.y));
  float _27 = float((uint)(cb0_018x));
  float _28 = float((uint)(cb0_018y));
  float _29 = _22 + 0.5f;
  float _30 = _29 + _27;
  float _31 = _23 + 0.5f;
  float _32 = _31 + _28;
  float _36 = _30 * (cb0_016z);
  float _37 = _32 * (cb0_016w);
  float _38 = _36 + -0.5f;
  float _39 = _37 + -0.5f;
  float _40 = abs(_38);
  float _41 = abs(_39);
  float _42 = max(_40, _41);
  bool _43 = !(_42 >= 0.5f);
  float _433;
  float _434;
  float _435;
  if (_43) {
    float _48 = (cb0_016z)*_29;
    float _49 = (cb0_016w)*_31;
    float _53 = (cb0_019z) * (cb0_019y);
    float _57 = (cb0_009x)*_48;
    float _58 = (cb0_009y)*_49;
    float _62 = _57 - (cb0_010z);
    float _63 = _58 - (cb0_010w);
    float _66 = _62 / (cb0_010x);
    float _67 = _63 / (cb0_010y);
    float _73 = (cb0_048z)*_66;
    float _74 = (cb0_048w)*_67;
    float _75 = _73 + (cb0_048x);
    float _76 = _74 + (cb0_048y);
    float _77 = _53 * _53;
    float _78 = _77 + 1.0f;
    float _79 = sqrt(_78);
    float _80 = 1.4142135381698608f / _79;
    float _81 = _75 * _80;
    float _85 = (cb0_001x) + _48;
    float _86 = (cb0_001y) + _49;
    /* int4 _88 = asint(View_PreExposureSceneData[0].data[12 / 4]);
    float _90 = float((uint)((int)(_88.x)));
    float4 _91 = View_PreExposureSceneData[0].data[4 / 4]; */
    float _90 = View_PreExposureSceneData.Load(0u).IsValid;
    float _91 = View_PreExposureSceneData.Load(0u).OneOverPreExposure;
    float _93 = (_91) + -1.0f;
    float _94 = _93 * _90;
    float _95 = _94 + 1.0f;
    float4 _97 = EyeAdaptationBuffer.Load(0u);
    bool _104 = (_75 > 0.0f);
    bool _105 = (_76 > 0.0f);
    bool _106 = (_75 < 0.0f);
    bool _107 = (_76 < 0.0f);
    int _108 = int(_104);
    int _109 = int(_105);
    int _110 = int(_106);
    int _111 = int(_107);
    int _112 = _108 - _110;
    int _113 = _109 - _111;
    float _114 = float(_112);
    float _115 = float(_113);
    float _116 = abs(_75);
    float _117 = abs(_76);
    float _118 = _116 - (cb0_046z);
    float _119 = _117 - (cb0_046z);
    float _120 = saturate(_118);
    float _121 = saturate(_119);
    float _122 = _120 * (cb0_046x);
    float _123 = _122 * _114;
    float _124 = _121 * (cb0_046x);
    float _125 = _124 * _115;
    float _126 = _120 * (cb0_046y);
    float _127 = _126 * _114;
    float _128 = _121 * (cb0_046y);
    float _129 = _128 * _115;
    float _130 = _75 - _123;
    float _131 = _76 - _125;
    float _132 = _75 - _127;
    float _133 = _76 - _129;
    float _139 = _130 * (cb0_049z);
    float _140 = _131 * (cb0_049w);
    float _141 = _139 + (cb0_049x);
    float _142 = _140 + (cb0_049y);
    float _143 = _132 * (cb0_049z);
    float _144 = _133 * (cb0_049w);
    float _145 = _143 + (cb0_049x);
    float _146 = _144 + (cb0_049y);
    float _149 = _141 * (cb0_010x);
    float _150 = _142 * (cb0_010y);
    float _151 = _149 + (cb0_010z);
    float _152 = _150 + (cb0_010w);
    float _153 = _151 * (cb0_009z);
    float _154 = _152 * (cb0_009w);
    float _155 = (cb0_010x)*_145;
    float _156 = (cb0_010y)*_146;
    float _157 = _155 + (cb0_010z);
    float _158 = _156 + (cb0_010w);
    float _159 = _157 * (cb0_009z);
    float _160 = _158 * (cb0_009w);
    float _166 = max(_153, (cb0_015x));
    float _167 = max(_154, (cb0_015y));
    float _168 = min(_166, (cb0_015z));
    float _169 = min(_167, (cb0_015w));
    float4 _172 = ColorTexture.SampleLevel(ColorSampler, float2(_168, _169), 0.0f);
    float _174 = max(_159, (cb0_015x));
    float _175 = max(_160, (cb0_015y));
    float _176 = min(_174, (cb0_015z));
    float _177 = min(_175, (cb0_015w));
    float4 _178 = ColorTexture.SampleLevel(ColorSampler, float2(_176, _177), 0.0f);
    float _180 = max(_48, (cb0_015x));
    float _181 = max(_49, (cb0_015y));
    float _182 = min(_180, (cb0_015z));
    float _183 = min(_181, (cb0_015w));
    float4 _184 = ColorTexture.SampleLevel(ColorSampler, float2(_182, _183), 0.0f);
    float _191 = (cb0_036x)*_48;
    float _192 = (cb0_036y)*_49;
    float _193 = _191 + (cb0_036z);
    float _194 = _192 + (cb0_036w);
    float _200 = max(_193, (cb0_037x));
    float _201 = max(_194, (cb0_037y));
    float _202 = min(_200, (cb0_037z));
    float _203 = min(_201, (cb0_037w));
    float4 _206 = BloomTexture.SampleLevel(BloomSampler, float2(_202, _203), 0.0f);
    float _210 = _75 * 0.5f;
    float _211 = _76 * 0.5f;
    float _212 = _210 + 0.5f;
    float _213 = 0.5f - _211;
    float4 _216 = BloomDirtMaskTexture.SampleLevel(BloomDirtMaskSampler, float2(_212, _213), 0.0f);
    float _224 = (cb0_045x) * (_216.x);
    float _225 = (cb0_045y) * (_216.y);
    float _226 = (cb0_045z) * (_216.z);
    float _227 = _224 + 1.0f;
    float _228 = _225 + 1.0f;
    float _229 = _226 + 1.0f;
    float _230 = _227 * (_206.x);
    float _231 = _228 * (_206.y);
    float _232 = _229 * (_206.z);
    float _235 = _81 * (cb0_047x);
    float _236 = _80 * _53;
    float _237 = _236 * _76;
    float _238 = _237 * (cb0_047x);
    float _239 = dot(float2(_235, _238), float2(_235, _238));
    float _240 = _239 + 1.0f;
    float _241 = 1.0f / _240;
    float _242 = _241 * _241;
    float4 _248 = SceneColorApplyParamaters[0].data[0 / 4];
    float _252 = (_172.x) * _95;
    float _253 = (_178.y) * _95;
    float _254 = (_184.z) * _95;
    float _257 = dot(float3(_252, _253, _254), float3(0.3333333432674408f, 0.3333333432674408f, 0.3333333432674408f));
    float _258 = max(_257, (cb0_025w));
    float _259 = log2(_258);
    float _260 = (_97.w) * 0.18000000715255737f;
    float _263 = _260 * (cb0_034x);
    float _264 = log2(_263);
    float _269 = (cb0_034z)*_48;
    float _270 = (cb0_034w)*_49;
    float _272 = (cb0_025y)*_259;
    float _274 = _272 + (cb0_025z);
    float _275 = _274 * 0.96875f;
    float _276 = _275 + 0.015625f;
    float4 _279 = LumBilateralGrid.SampleLevel(LumBilateralGridSampler, float3(_269, _270, _276), 0.0f);
    float _282 = (_279.x) / (_279.y);
    float4 _285 = BlurredLogLum.SampleLevel(BlurredLogLumSampler, float2(_48, _49), 0.0f);
    bool _287 = ((_279.y) < 0.0010000000474974513f);
    float _288 = (_287 ? (_285.x) : _282);
    float _289 = (_285.x) - _288;
    float _290 = _289 * (cb0_033w);
    float _291 = log2((_97.x));
    float _292 = _288 + _291;
    float _293 = _292 + _290;
    float _297 = _291 + _259;
    float _298 = _297 - _293;
    float _299 = _293 - _264;
    bool _300 = (_299 > 0.0f);
    float _301 = (_300 ? (cb0_033x) : (cb0_033y));
    float _302 = _301 * _299;
    float _303 = _298 * (cb0_033z);
    float _304 = _264 - _297;
    float _305 = _304 + _303;
    float _306 = _305 + _302;
    float _307 = exp2(_306);
    float _308 = _95 * (_97.x);
    float _309 = _308 * _242;
    float _310 = _309 * _307;
    float _311 = (cb0_044x) * (_172.x);
    float _312 = _311 * (_248.x);
    float _313 = _312 * _310;
    float _314 = (cb0_044y) * (_178.y);
    float _315 = _314 * (_248.y);
    float _316 = _315 * _310;
    float _317 = (cb0_044z) * (_184.z);
    float _318 = _317 * (_248.z);
    float _319 = _318 * _310;

    untonemapped = float3(_313, _316, _319);

    float _320 = _230 * _309;
    float _321 = _231 * _309;
    float _322 = _232 * _309;
    float _323 = _320 + 0.002667719265446067f;
    float _324 = _323 + _313;
    float _325 = _321 + 0.002667719265446067f;
    float _326 = _325 + _316;
    float _327 = _322 + 0.002667719265446067f;
    float _328 = _327 + _319;
    float _329 = log2(_324);
    float _330 = log2(_326);
    float _331 = log2(_328);
    float _332 = _329 * 0.0714285746216774f;
    float _333 = _330 * 0.0714285746216774f;
    float _334 = _331 * 0.0714285746216774f;
    float _335 = _332 + 0.6107269525527954f;
    float _336 = _333 + 0.6107269525527954f;
    float _337 = _334 + 0.6107269525527954f;
    float _338 = saturate(_335);
    float _339 = saturate(_336);
    float _340 = saturate(_337);
    float _343 = (cb0_050z)*_338;
    float _344 = (cb0_050z)*_339;
    float _345 = (cb0_050z)*_340;
    float _347 = _343 + (cb0_050w);
    float _348 = _344 + (cb0_050w);
    float _349 = _345 + (cb0_050w);
    float4 _352 = ColorGradingLUT.SampleLevel(ColorGradingLUTSampler, float3(_347, _348, _349), 0.0f);
    OutputSignature output = LutToneMap(untonemapped, float3(_347, _348, _349), ColorGradingLUT, ColorGradingLUTSampler);
    RWOutputTexture[int2(initial, end)] = output.SV_Target;
    RWOutputLuminance[int2(initial, end)] = float4(output.SV_Target_1, output.SV_Target_1, output.SV_Target_1, output.SV_Target_1);
    return;

    float _356 = (_352.x) * 1.0499999523162842f;
    float _357 = (_352.y) * 1.0499999523162842f;
    float _358 = (_352.z) * 1.0499999523162842f;
    float _359 = dot(float3(_356, _357, _358), float3(0.29899999499320984f, 0.5870000123977661f, 0.11400000005960464f));
    bool _362 = (((uint)(cb0_051z)) == 0);
    _433 = _356;
    _434 = _357;
    _435 = _358;
    do {
      if (!_362) {
        float _364 = log2(_356);
        float _365 = log2(_357);
        float _366 = log2(_358);
        float _367 = _364 * 0.012683313339948654f;
        float _368 = _365 * 0.012683313339948654f;
        float _369 = _366 * 0.012683313339948654f;
        float _370 = exp2(_367);
        float _371 = exp2(_368);
        float _372 = exp2(_369);
        float _373 = _370 + -0.8359375f;
        float _374 = _371 + -0.8359375f;
        float _375 = _372 + -0.8359375f;
        float _376 = max(0.0f, _373);
        float _377 = max(0.0f, _374);
        float _378 = max(0.0f, _375);
        float _379 = _370 * 18.6875f;
        float _380 = _371 * 18.6875f;
        float _381 = _372 * 18.6875f;
        float _382 = 18.8515625f - _379;
        float _383 = 18.8515625f - _380;
        float _384 = 18.8515625f - _381;
        float _385 = _376 / _382;
        float _386 = _377 / _383;
        float _387 = _378 / _384;
        float _388 = log2(_385);
        float _389 = log2(_386);
        float _390 = log2(_387);
        float _391 = _388 * 6.277394771575928f;
        float _392 = _389 * 6.277394771575928f;
        float _393 = _390 * 6.277394771575928f;
        float _394 = exp2(_391);
        float _395 = exp2(_392);
        float _396 = exp2(_393);
        float _397 = _394 * 10000.0f;
        float _398 = _395 * 10000.0f;
        float _399 = _396 * 10000.0f;
        float _402 = _397 / (cb0_051x);
        float _403 = _398 / (cb0_051x);
        float _404 = _399 / (cb0_051x);
        float _405 = max(6.103519990574569e-05f, _402);
        float _406 = max(6.103519990574569e-05f, _403);
        float _407 = max(6.103519990574569e-05f, _404);
        float _408 = max(_405, 0.0031306699384003878f);
        float _409 = max(_406, 0.0031306699384003878f);
        float _410 = max(_407, 0.0031306699384003878f);
        float _411 = log2(_408);
        float _412 = log2(_409);
        float _413 = log2(_410);
        float _414 = _411 * 0.4166666567325592f;
        float _415 = _412 * 0.4166666567325592f;
        float _416 = _413 * 0.4166666567325592f;
        float _417 = exp2(_414);
        float _418 = exp2(_415);
        float _419 = exp2(_416);
        float _420 = _417 * 1.0549999475479126f;
        float _421 = _418 * 1.0549999475479126f;
        float _422 = _419 * 1.0549999475479126f;
        float _423 = _420 + -0.054999999701976776f;
        float _424 = _421 + -0.054999999701976776f;
        float _425 = _422 + -0.054999999701976776f;
        float _426 = _405 * 12.920000076293945f;
        float _427 = _406 * 12.920000076293945f;
        float _428 = _407 * 12.920000076293945f;
        float _429 = min(_426, _423);
        float _430 = min(_427, _424);
        float _431 = min(_428, _425);
        _433 = _429;
        _434 = _430;
        _435 = _431;
      }
      float _436 = _86 * 543.3099975585938f;
      float _437 = _85 + _436;
      float _438 = sin(_437);
      float _439 = _438 * 493013.0f;
      float _440 = frac(_439);
      float _441 = _440 * 2.0f;
      float _442 = _441 + -1.0f;
      float _443 = _442 * 0x7FF0000000000000;
      float _444 = max(_443, -1.0f);
      float _445 = min(_444, 1.0f);
      float _446 = abs(_442);
      float _447 = 1.0f - _446;
      float _448 = saturate(_447);
      float _449 = sqrt(_448);
      float _450 = _449 * _445;
      float _451 = _445 - _450;
      float _454 = _451 * (cb0_051y);
      float _455 = _454 + _433;
      float _456 = _454 + _434;
      float _457 = _454 + _435;
      uint _461 = (cb0_018x) + (vThreadID.x);
      uint _462 = (cb0_018y) + (vThreadID.y);
      RWOutputTexture[int2(_461, _462)] = float4(_455, _456, _457, 0.0f);
      RWOutputLuminance[int2(_461, _462)] = float4(_359, _359, _359, _359);
    } while (false);
  }
}
